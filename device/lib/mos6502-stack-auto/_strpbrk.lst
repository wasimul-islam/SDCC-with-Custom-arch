                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strpbrk
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strchr
                             12 	.globl _strpbrk
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'strpbrk'
                             50 ;------------------------------------------------------------
                             51 ;control                   Allocated to stack - sp +11
                             52 ;string                    Allocated to stack - sp +7
                             53 ;ret                       Allocated to stack - sp +5
                             54 ;ch                        Allocated to registers 
                             55 ;p                         Allocated to stack - sp +3
                             56 ;sloc0                     Allocated to stack - sp +1
                             57 ;------------------------------------------------------------
                             58 ;	../_strpbrk.c: 31: char * strpbrk ( const char * string, const char * control )
                             59 ;	-----------------------------------------
                             60 ;	 function strpbrk
                             61 ;	-----------------------------------------
                             62 ;	Register assignment is optimal.
                             63 ;	Stack space usage: 8 bytes.
   0000                      64 _strpbrk:
   0000 85*00         [ 3]   65 	sta	*(__TEMP+0)
   0002 8A            [ 2]   66 	txa
   0003 48            [ 3]   67 	pha
   0004 A5*00         [ 3]   68 	lda	*(__TEMP+0)
   0006 48            [ 3]   69 	pha
   0007 48            [ 3]   70 	pha
   0008 48            [ 3]   71 	pha
   0009 48            [ 3]   72 	pha
   000A 48            [ 3]   73 	pha
   000B 48            [ 3]   74 	pha
   000C 48            [ 3]   75 	pha
                             76 ;	../_strpbrk.c: 33: char *ret = NULL;
   000D BA            [ 2]   77 	tsx
   000E A9 00         [ 2]   78 	lda	#0x00
   0010 9D 05 01      [ 5]   79 	sta	0x105,x
   0013 9D 06 01      [ 5]   80 	sta	0x106,x
                             81 ;	../_strpbrk.c: 36: while (ch = *control) {
   0016 BD 0B 01      [ 5]   82 	lda	0x10b,x
   0019 9D 01 01      [ 5]   83 	sta	0x101,x
   001C BD 0C 01      [ 5]   84 	lda	0x10c,x
   001F 9D 02 01      [ 5]   85 	sta	0x102,x
   0022                      86 00105$:
   0022 BA            [ 2]   87 	tsx
   0023 BD 01 01      [ 5]   88 	lda	0x101,x
   0026 85*00         [ 3]   89 	sta	*(__DPTR+0)
   0028 BD 02 01      [ 5]   90 	lda	0x102,x
   002B 85*01         [ 3]   91 	sta	*(__DPTR+1)
   002D A0 00         [ 2]   92 	ldy	#0x00
   002F B1*00         [ 6]   93 	lda	[__DPTR],y
   0031 F0 68         [ 4]   94 	beq	00107$
                             95 ;	../_strpbrk.c: 37: char * p = strchr(string, ch);
   0033 48            [ 3]   96 	pha
   0034 BD 08 01      [ 5]   97 	lda	0x108,x
   0037 AA            [ 2]   98 	tax
   0038 86*00         [ 3]   99 	stx	*(__TEMP+0)
   003A BA            [ 2]  100 	tsx
   003B BD 08 01      [ 5]  101 	lda	0x108,x
   003E 08            [ 3]  102 	php
   003F A6*00         [ 3]  103 	ldx	*(__TEMP+0)
   0041 28            [ 4]  104 	plp
   0042 20r00r00      [ 6]  105 	jsr	_strchr
   0045 86*00         [ 3]  106 	stx	*(__TEMP+0)
   0047 BA            [ 2]  107 	tsx
   0048 9D 04 01      [ 5]  108 	sta	0x104,x
   004B A6*00         [ 3]  109 	ldx	*(__TEMP+0)
   004D 8A            [ 2]  110 	txa
   004E BA            [ 2]  111 	tsx
   004F 9D 05 01      [ 5]  112 	sta	0x105,x
   0052 A6*00         [ 3]  113 	ldx	*(__TEMP+0)
   0054 85*00         [ 3]  114 	sta	*(__TEMP+0)
   0056 68            [ 4]  115 	pla
   0057 A5*00         [ 3]  116 	lda	*(__TEMP+0)
                            117 ;	../_strpbrk.c: 38: if (p != NULL && (ret == NULL || p < ret)) {
   0059 BA            [ 2]  118 	tsx
   005A BD 03 01      [ 5]  119 	lda	0x103,x
   005D 1D 04 01      [ 5]  120 	ora	0x104,x
   0060 F0 24         [ 4]  121 	beq	00102$
   0062 BD 05 01      [ 5]  122 	lda	0x105,x
   0065 1D 06 01      [ 5]  123 	ora	0x106,x
   0068 F0 0F         [ 4]  124 	beq	00101$
   006A BD 03 01      [ 5]  125 	lda	0x103,x
   006D 38            [ 2]  126 	sec
   006E FD 05 01      [ 5]  127 	sbc	0x105,x
   0071 BD 04 01      [ 5]  128 	lda	0x104,x
   0074 FD 06 01      [ 5]  129 	sbc	0x106,x
   0077 B0 0D         [ 4]  130 	bcs	00102$
   0079                     131 00101$:
                            132 ;	../_strpbrk.c: 39: ret = p;
   0079 BA            [ 2]  133 	tsx
   007A BD 03 01      [ 5]  134 	lda	0x103,x
   007D 9D 05 01      [ 5]  135 	sta	0x105,x
   0080 BD 04 01      [ 5]  136 	lda	0x104,x
   0083 9D 06 01      [ 5]  137 	sta	0x106,x
   0086                     138 00102$:
                            139 ;	../_strpbrk.c: 41: control++;
   0086 BA            [ 2]  140 	tsx
   0087 BD 01 01      [ 5]  141 	lda	0x101,x
   008A 18            [ 2]  142 	clc
   008B 69 01         [ 2]  143 	adc	#0x01
   008D 9D 01 01      [ 5]  144 	sta	0x101,x
   0090 BD 02 01      [ 5]  145 	lda	0x102,x
   0093 69 00         [ 2]  146 	adc	#0x00
   0095 9D 02 01      [ 5]  147 	sta	0x102,x
   0098 4Cr22r00      [ 3]  148 	jmp	00105$
   009B                     149 00107$:
                            150 ;	../_strpbrk.c: 44: return (ret);
   009B BA            [ 2]  151 	tsx
   009C BD 06 01      [ 5]  152 	lda	0x106,x
   009F AA            [ 2]  153 	tax
   00A0 86*00         [ 3]  154 	stx	*(__TEMP+0)
   00A2 BA            [ 2]  155 	tsx
   00A3 BD 05 01      [ 5]  156 	lda	0x105,x
   00A6 08            [ 3]  157 	php
   00A7 A6*00         [ 3]  158 	ldx	*(__TEMP+0)
   00A9 28            [ 4]  159 	plp
                            160 ;	../_strpbrk.c: 45: }
   00AA 85*00         [ 3]  161 	sta	*(__TEMP+0)
   00AC 86*01         [ 3]  162 	stx	*(__TEMP+1)
   00AE BA            [ 2]  163 	tsx
   00AF 8A            [ 2]  164 	txa
   00B0 18            [ 2]  165 	clc
   00B1 69 08         [ 2]  166 	adc	#0x08
   00B3 AA            [ 2]  167 	tax
   00B4 9A            [ 2]  168 	txs
   00B5 A6*01         [ 3]  169 	ldx	*(__TEMP+1)
   00B7 A5*00         [ 3]  170 	lda	*(__TEMP+0)
   00B9 60            [ 6]  171 	rts
                            172 	.area CODE
                            173 	.area RODATA
                            174 	.area XINIT
                            175 	.area CABS    (ABS)
