                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module bsearch
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _bsearch
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'bsearch'
                             49 ;------------------------------------------------------------
                             50 ;base                      Allocated to stack - sp +13
                             51 ;nmemb                     Allocated to stack - sp +15
                             52 ;size                      Allocated to stack - sp +17
                             53 ;compar                    Allocated to stack - sp +19
                             54 ;key                       Allocated to stack - sp +9
                             55 ;left                      Allocated to stack - sp +5
                             56 ;middle                    Allocated to stack - sp +7
                             57 ;c                         Allocated to registers a x 
                             58 ;sloc0                     Allocated to stack - sp +5
                             59 ;sloc1                     Allocated to stack - sp +3
                             60 ;sloc2                     Allocated to stack - sp +1
                             61 ;------------------------------------------------------------
                             62 ;	../bsearch.c: 31: void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                             63 ;	-----------------------------------------
                             64 ;	 function bsearch
                             65 ;	-----------------------------------------
                             66 ;	Register assignment is optimal.
                             67 ;	Stack space usage: 10 bytes.
   0000                      68 _bsearch:
   0000 85*00         [ 3]   69 	sta	*(__TEMP+0)
   0002 8A            [ 2]   70 	txa
   0003 48            [ 3]   71 	pha
   0004 A5*00         [ 3]   72 	lda	*(__TEMP+0)
   0006 48            [ 3]   73 	pha
   0007 86*01         [ 3]   74 	stx	*(__TEMP+1)
   0009 BA            [ 2]   75 	tsx
   000A 8A            [ 2]   76 	txa
   000B 18            [ 2]   77 	clc
   000C 69 F8         [ 2]   78 	adc	#0xf8
   000E AA            [ 2]   79 	tax
   000F 9A            [ 2]   80 	txs
   0010 A6*01         [ 3]   81 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   82 	lda	*(__TEMP+0)
                             83 ;	../bsearch.c: 33: for(const char *left = base; nmemb;)
   0014 BA            [ 2]   84 	tsx
   0015 BD 0D 01      [ 5]   85 	lda	0x10d,x
   0018 9D 05 01      [ 5]   86 	sta	0x105,x
   001B BD 0E 01      [ 5]   87 	lda	0x10e,x
   001E 9D 06 01      [ 5]   88 	sta	0x106,x
   0021                      89 00109$:
   0021 BA            [ 2]   90 	tsx
   0022 BD 0F 01      [ 5]   91 	lda	0x10f,x
   0025 1D 10 01      [ 5]   92 	ora	0x110,x
   0028 D0 03         [ 4]   93 	bne	00129$
   002A 4Cr35r01      [ 3]   94 	jmp	00107$
   002D                      95 00129$:
                             96 ;	../bsearch.c: 35: const char *middle = left + nmemb / 2 * size;
   002D BD 0F 01      [ 5]   97 	lda	0x10f,x
   0030 85*00         [ 3]   98 	sta	*(__TEMP+0)
   0032 BD 10 01      [ 5]   99 	lda	0x110,x
   0035 AA            [ 2]  100 	tax
   0036 A5*00         [ 3]  101 	lda	*(__TEMP+0)
   0038 86*00         [ 3]  102 	stx	*(__TEMP+0)
   003A 46*00         [ 5]  103 	lsr	*(__TEMP+0)
   003C 6A            [ 2]  104 	ror	a
   003D A6*00         [ 3]  105 	ldx	*(__TEMP+0)
   003F 48            [ 3]  106 	pha
   0040 8A            [ 2]  107 	txa
   0041 BA            [ 2]  108 	tsx
   0042 9D 05 01      [ 5]  109 	sta	0x105,x
   0045 68            [ 4]  110 	pla
   0046 9D 04 01      [ 5]  111 	sta	0x104,x
   0049 BD 13 01      [ 5]  112 	lda	0x113,x
   004C 48            [ 3]  113 	pha
   004D BD 12 01      [ 5]  114 	lda	0x112,x
   0050 48            [ 3]  115 	pha
   0051 BD 05 01      [ 5]  116 	lda	0x105,x
   0054 AA            [ 2]  117 	tax
   0055 86*00         [ 3]  118 	stx	*(__TEMP+0)
   0057 BA            [ 2]  119 	tsx
   0058 BD 05 01      [ 5]  120 	lda	0x105,x
   005B 08            [ 3]  121 	php
   005C A6*00         [ 3]  122 	ldx	*(__TEMP+0)
   005E 28            [ 4]  123 	plp
   005F 20r00r00      [ 6]  124 	jsr	__mulint
   0062 86*00         [ 3]  125 	stx	*(__TEMP+0)
   0064 BA            [ 2]  126 	tsx
   0065 9D 03 01      [ 5]  127 	sta	0x103,x
   0068 A6*00         [ 3]  128 	ldx	*(__TEMP+0)
   006A 8A            [ 2]  129 	txa
   006B BA            [ 2]  130 	tsx
   006C 9D 04 01      [ 5]  131 	sta	0x104,x
   006F A6*00         [ 3]  132 	ldx	*(__TEMP+0)
   0071 85*00         [ 3]  133 	sta	*(__TEMP+0)
   0073 68            [ 4]  134 	pla
   0074 68            [ 4]  135 	pla
   0075 A5*00         [ 3]  136 	lda	*(__TEMP+0)
   0077 BA            [ 2]  137 	tsx
   0078 BD 05 01      [ 5]  138 	lda	0x105,x
   007B 18            [ 2]  139 	clc
   007C 7D 01 01      [ 5]  140 	adc	0x101,x
   007F 9D 07 01      [ 5]  141 	sta	0x107,x
   0082 BD 06 01      [ 5]  142 	lda	0x106,x
   0085 7D 02 01      [ 5]  143 	adc	0x102,x
   0088 9D 08 01      [ 5]  144 	sta	0x108,x
                            145 ;	../bsearch.c: 36: int c = (*compar)(key, middle);
   008B BD 07 01      [ 5]  146 	lda	0x107,x
   008E 85*00         [ 3]  147 	sta	*(__TEMP+0)
   0090 BD 08 01      [ 5]  148 	lda	0x108,x
   0093 AA            [ 2]  149 	tax
   0094 48            [ 3]  150 	pha
   0095 A5*00         [ 3]  151 	lda	*(__TEMP+0)
   0097 48            [ 3]  152 	pha
   0098 BA            [ 2]  153 	tsx
   0099 BD 15 01      [ 5]  154 	lda	0x115,x
   009C 85*00         [ 3]  155 	sta	*(__TEMP+0)
   009E BD 16 01      [ 5]  156 	lda	0x116,x
   00A1 85*01         [ 3]  157 	sta	*(__TEMP+1)
   00A3 BD 0C 01      [ 5]  158 	lda	0x10c,x
   00A6 AA            [ 2]  159 	tax
   00A7 86*02         [ 3]  160 	stx	*(__TEMP+2)
   00A9 BA            [ 2]  161 	tsx
   00AA BD 0B 01      [ 5]  162 	lda	0x10b,x
   00AD 08            [ 3]  163 	php
   00AE A6*02         [ 3]  164 	ldx	*(__TEMP+2)
   00B0 28            [ 4]  165 	plp
   00B1 20r00r00      [ 6]  166 	jsr	__sdcc_indirect_jsr
   00B4 85*00         [ 3]  167 	sta	*(__TEMP+0)
   00B6 68            [ 4]  168 	pla
   00B7 68            [ 4]  169 	pla
                            170 ;	../bsearch.c: 38: if(c < 0)
   00B8 8A            [ 2]  171 	txa
   00B9 38            [ 2]  172 	sec
   00BA E9 00         [ 2]  173 	sbc	#0x00
   00BC 08            [ 3]  174 	php
   00BD A5*00         [ 3]  175 	lda	*(__TEMP+0)
   00BF 28            [ 4]  176 	plp
   00C0 50 04         [ 4]  177 	bvc	00131$
   00C2 10 04         [ 4]  178 	bpl	00130$
   00C4 30 12         [ 4]  179 	bmi	00105$
   00C6                     180 00131$:
   00C6 10 10         [ 4]  181 	bpl	00105$
   00C8                     182 00130$:
                            183 ;	../bsearch.c: 39: nmemb = nmemb / 2;	
   00C8 BA            [ 2]  184 	tsx
   00C9 BD 03 01      [ 5]  185 	lda	0x103,x
   00CC 9D 0F 01      [ 5]  186 	sta	0x10f,x
   00CF BD 04 01      [ 5]  187 	lda	0x104,x
   00D2 9D 10 01      [ 5]  188 	sta	0x110,x
   00D5 4Cr21r00      [ 3]  189 	jmp	00109$
   00D8                     190 00105$:
                            191 ;	../bsearch.c: 40: else if(c > 0)
   00D8 85*00         [ 3]  192 	sta	*(__TEMP+0)
   00DA A9 00         [ 2]  193 	lda	#0x00
   00DC 38            [ 2]  194 	sec
   00DD E5*00         [ 3]  195 	sbc	*(__TEMP+0)
   00DF A9 00         [ 2]  196 	lda	#0x00
   00E1 86*00         [ 3]  197 	stx	*(__TEMP+0)
   00E3 E5*00         [ 3]  198 	sbc	*(__TEMP+0)
   00E5 50 04         [ 4]  199 	bvc	00134$
   00E7 10 04         [ 4]  200 	bpl	00133$
   00E9 30 3B         [ 4]  201 	bmi	00102$
   00EB                     202 00134$:
   00EB 10 39         [ 4]  203 	bpl	00102$
   00ED                     204 00133$:
                            205 ;	../bsearch.c: 42: left = middle + size;
   00ED BA            [ 2]  206 	tsx
   00EE BD 07 01      [ 5]  207 	lda	0x107,x
   00F1 18            [ 2]  208 	clc
   00F2 7D 11 01      [ 5]  209 	adc	0x111,x
   00F5 9D 05 01      [ 5]  210 	sta	0x105,x
   00F8 BD 08 01      [ 5]  211 	lda	0x108,x
   00FB 7D 12 01      [ 5]  212 	adc	0x112,x
   00FE 9D 06 01      [ 5]  213 	sta	0x106,x
                            214 ;	../bsearch.c: 43: nmemb = (nmemb - 1) / 2;
   0101 BD 0F 01      [ 5]  215 	lda	0x10f,x
   0104 85*00         [ 3]  216 	sta	*(__TEMP+0)
   0106 BD 10 01      [ 5]  217 	lda	0x110,x
   0109 AA            [ 2]  218 	tax
   010A A5*00         [ 3]  219 	lda	*(__TEMP+0)
   010C 38            [ 2]  220 	sec
   010D E9 01         [ 2]  221 	sbc	#0x01
   010F B0 01         [ 4]  222 	bcs	00136$
   0111 CA            [ 2]  223 	dex
   0112                     224 00136$:
   0112 86*00         [ 3]  225 	stx	*(__TEMP+0)
   0114 46*00         [ 5]  226 	lsr	*(__TEMP+0)
   0116 6A            [ 2]  227 	ror	a
   0117 A6*00         [ 3]  228 	ldx	*(__TEMP+0)
   0119 48            [ 3]  229 	pha
   011A 8A            [ 2]  230 	txa
   011B BA            [ 2]  231 	tsx
   011C 9D 11 01      [ 5]  232 	sta	0x111,x
   011F 68            [ 4]  233 	pla
   0120 9D 10 01      [ 5]  234 	sta	0x110,x
   0123 4Cr21r00      [ 3]  235 	jmp	00109$
   0126                     236 00102$:
                            237 ;	../bsearch.c: 46: return(middle);
   0126 BA            [ 2]  238 	tsx
   0127 BD 07 01      [ 5]  239 	lda	0x107,x
   012A 85*00         [ 3]  240 	sta	*(__TEMP+0)
   012C BD 08 01      [ 5]  241 	lda	0x108,x
   012F AA            [ 2]  242 	tax
   0130 A5*00         [ 3]  243 	lda	*(__TEMP+0)
   0132 4Cr38r01      [ 3]  244 	jmp	00111$
   0135                     245 00107$:
                            246 ;	../bsearch.c: 49: return(0);
   0135 A9 00         [ 2]  247 	lda	#0x00
   0137 AA            [ 2]  248 	tax
   0138                     249 00111$:
                            250 ;	../bsearch.c: 50: }
   0138 85*00         [ 3]  251 	sta	*(__TEMP+0)
   013A 86*01         [ 3]  252 	stx	*(__TEMP+1)
   013C BA            [ 2]  253 	tsx
   013D 8A            [ 2]  254 	txa
   013E 18            [ 2]  255 	clc
   013F 69 0A         [ 2]  256 	adc	#0x0a
   0141 AA            [ 2]  257 	tax
   0142 9A            [ 2]  258 	txs
   0143 A6*01         [ 3]  259 	ldx	*(__TEMP+1)
   0145 A5*00         [ 3]  260 	lda	*(__TEMP+0)
   0147 60            [ 6]  261 	rts
                            262 	.area CODE
                            263 	.area RODATA
                            264 	.area XINIT
                            265 	.area CABS    (ABS)
