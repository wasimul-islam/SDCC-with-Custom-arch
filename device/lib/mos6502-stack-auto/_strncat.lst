                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strncat
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strncat
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'strncat'
                             49 ;------------------------------------------------------------
                             50 ;back                      Allocated to stack - sp +15
                             51 ;count                     Allocated to stack - sp +17
                             52 ;front                     Allocated to stack - sp +11
                             53 ;start                     Allocated to stack - sp +9
                             54 ;sloc0                     Allocated to stack - sp +7
                             55 ;sloc1                     Allocated to stack - sp +5
                             56 ;sloc2                     Allocated to stack - sp +3
                             57 ;sloc3                     Allocated to stack - sp +1
                             58 ;------------------------------------------------------------
                             59 ;	../_strncat.c: 31: char * strncat ( char * front, const char * back, size_t count )
                             60 ;	-----------------------------------------
                             61 ;	 function strncat
                             62 ;	-----------------------------------------
                             63 ;	Register assignment is optimal.
                             64 ;	Stack space usage: 12 bytes.
   0000                      65 _strncat:
   0000 85*00         [ 3]   66 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   67 	stx	*(__TEMP+1)
   0004 BA            [ 2]   68 	tsx
   0005 8A            [ 2]   69 	txa
   0006 18            [ 2]   70 	clc
   0007 69 F4         [ 2]   71 	adc	#0xf4
   0009 AA            [ 2]   72 	tax
   000A 9A            [ 2]   73 	txs
   000B A6*01         [ 3]   74 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   75 	lda	*(__TEMP+0)
                             76 ;	../_strncat.c: 33: char *start = front;
   000F 48            [ 3]   77 	pha
   0010 86*00         [ 3]   78 	stx	*(__TEMP+0)
   0012 8A            [ 2]   79 	txa
   0013 BA            [ 2]   80 	tsx
   0014 9D 0B 01      [ 5]   81 	sta	0x10b,x
   0017 68            [ 4]   82 	pla
   0018 9D 0A 01      [ 5]   83 	sta	0x10a,x
   001B A6*00         [ 3]   84 	ldx	*(__TEMP+0)
                             85 ;	../_strncat.c: 35: while (*front++);
   001D                      86 00101$:
   001D 85*00         [ 3]   87 	sta	*(__TEMP+0)
   001F 86*01         [ 3]   88 	stx	*(__TEMP+1)
   0021 85*00         [ 3]   89 	sta	*(__DPTR+0)
   0023 86*01         [ 3]   90 	stx	*(__DPTR+1)
   0025 A0 00         [ 2]   91 	ldy	#0x00
   0027 B1*00         [ 6]   92 	lda	[__DPTR],y
   0029 A8            [ 2]   93 	tay
   002A A6*01         [ 3]   94 	ldx	*(__TEMP+1)
   002C A5*00         [ 3]   95 	lda	*(__TEMP+0)
   002E 18            [ 2]   96 	clc
   002F 69 01         [ 2]   97 	adc	#0x01
   0031 90 01         [ 4]   98 	bcc	00137$
   0033 E8            [ 2]   99 	inx
   0034                     100 00137$:
   0034 C0 00         [ 2]  101 	cpy	#0x00
   0036 D0 E5         [ 4]  102 	bne	00101$
                            103 ;	../_strncat.c: 37: front--;
   0038 38            [ 2]  104 	sec
   0039 E9 01         [ 2]  105 	sbc	#0x01
   003B 86*00         [ 3]  106 	stx	*(__TEMP+0)
   003D BA            [ 2]  107 	tsx
   003E 9D 0B 01      [ 5]  108 	sta	0x10b,x
   0041 A6*00         [ 3]  109 	ldx	*(__TEMP+0)
   0043 8A            [ 2]  110 	txa
   0044 E9 00         [ 2]  111 	sbc	#0x00
   0046 86*00         [ 3]  112 	stx	*(__TEMP+0)
   0048 BA            [ 2]  113 	tsx
   0049 9D 0C 01      [ 5]  114 	sta	0x10c,x
                            115 ;	../_strncat.c: 39: while (count--)
   004C BA            [ 2]  116 	tsx
   004D BD 0F 01      [ 5]  117 	lda	0x10f,x
   0050 9D 07 01      [ 5]  118 	sta	0x107,x
   0053 BD 10 01      [ 5]  119 	lda	0x110,x
   0056 9D 08 01      [ 5]  120 	sta	0x108,x
   0059 BD 0B 01      [ 5]  121 	lda	0x10b,x
   005C 9D 05 01      [ 5]  122 	sta	0x105,x
   005F BD 0C 01      [ 5]  123 	lda	0x10c,x
   0062 9D 06 01      [ 5]  124 	sta	0x106,x
   0065 BD 11 01      [ 5]  125 	lda	0x111,x
   0068 9D 03 01      [ 5]  126 	sta	0x103,x
   006B BD 12 01      [ 5]  127 	lda	0x112,x
   006E 9D 04 01      [ 5]  128 	sta	0x104,x
   0071                     129 00106$:
   0071 BA            [ 2]  130 	tsx
   0072 BD 03 01      [ 5]  131 	lda	0x103,x
   0075 9D 01 01      [ 5]  132 	sta	0x101,x
   0078 BD 04 01      [ 5]  133 	lda	0x104,x
   007B 9D 02 01      [ 5]  134 	sta	0x102,x
   007E BD 03 01      [ 5]  135 	lda	0x103,x
   0081 38            [ 2]  136 	sec
   0082 E9 01         [ 2]  137 	sbc	#0x01
   0084 9D 03 01      [ 5]  138 	sta	0x103,x
   0087 BD 04 01      [ 5]  139 	lda	0x104,x
   008A E9 00         [ 2]  140 	sbc	#0x00
   008C 9D 04 01      [ 5]  141 	sta	0x104,x
   008F BD 01 01      [ 5]  142 	lda	0x101,x
   0092 1D 02 01      [ 5]  143 	ora	0x102,x
   0095 F0 67         [ 4]  144 	beq	00108$
                            145 ;	../_strncat.c: 40: if (!(*front++ = *back++))
   0097 BD 07 01      [ 5]  146 	lda	0x107,x
   009A 85*00         [ 3]  147 	sta	*(__DPTR+0)
   009C BD 08 01      [ 5]  148 	lda	0x108,x
   009F 85*01         [ 3]  149 	sta	*(__DPTR+1)
   00A1 A0 00         [ 2]  150 	ldy	#0x00
   00A3 B1*00         [ 6]  151 	lda	[__DPTR],y
   00A5 A8            [ 2]  152 	tay
   00A6 BD 07 01      [ 5]  153 	lda	0x107,x
   00A9 18            [ 2]  154 	clc
   00AA 69 01         [ 2]  155 	adc	#0x01
   00AC 9D 07 01      [ 5]  156 	sta	0x107,x
   00AF BD 08 01      [ 5]  157 	lda	0x108,x
   00B2 69 00         [ 2]  158 	adc	#0x00
   00B4 9D 08 01      [ 5]  159 	sta	0x108,x
   00B7 84*00         [ 3]  160 	sty	*(__TEMP+0)
   00B9 BD 05 01      [ 5]  161 	lda	0x105,x
   00BC 85*00         [ 3]  162 	sta	*(__DPTR+0)
   00BE BD 06 01      [ 5]  163 	lda	0x106,x
   00C1 85*01         [ 3]  164 	sta	*(__DPTR+1)
   00C3 A4*00         [ 3]  165 	ldy	*(__TEMP+0)
   00C5 98            [ 2]  166 	tya
   00C6 A0 00         [ 2]  167 	ldy	#0x00
   00C8 91*00         [ 6]  168 	sta	[__DPTR],y
   00CA A4*00         [ 3]  169 	ldy	*(__TEMP+0)
   00CC BD 05 01      [ 5]  170 	lda	0x105,x
   00CF 18            [ 2]  171 	clc
   00D0 69 01         [ 2]  172 	adc	#0x01
   00D2 9D 05 01      [ 5]  173 	sta	0x105,x
   00D5 BD 06 01      [ 5]  174 	lda	0x106,x
   00D8 69 00         [ 2]  175 	adc	#0x00
   00DA 9D 06 01      [ 5]  176 	sta	0x106,x
   00DD BD 05 01      [ 5]  177 	lda	0x105,x
   00E0 9D 0B 01      [ 5]  178 	sta	0x10b,x
   00E3 BD 06 01      [ 5]  179 	lda	0x106,x
   00E6 9D 0C 01      [ 5]  180 	sta	0x10c,x
   00E9 C0 00         [ 2]  181 	cpy	#0x00
   00EB D0 84         [ 4]  182 	bne	00106$
                            183 ;	../_strncat.c: 41: return(start);
   00ED BD 0A 01      [ 5]  184 	lda	0x10a,x
   00F0 AA            [ 2]  185 	tax
   00F1 86*00         [ 3]  186 	stx	*(__TEMP+0)
   00F3 BA            [ 2]  187 	tsx
   00F4 BD 09 01      [ 5]  188 	lda	0x109,x
   00F7 08            [ 3]  189 	php
   00F8 A6*00         [ 3]  190 	ldx	*(__TEMP+0)
   00FA 28            [ 4]  191 	plp
   00FB 4Cr1Cr01      [ 3]  192 	jmp	00109$
   00FE                     193 00108$:
                            194 ;	../_strncat.c: 43: *front = '\0';
   00FE BA            [ 2]  195 	tsx
   00FF BD 0B 01      [ 5]  196 	lda	0x10b,x
   0102 85*00         [ 3]  197 	sta	*(__DPTR+0)
   0104 BD 0C 01      [ 5]  198 	lda	0x10c,x
   0107 85*01         [ 3]  199 	sta	*(__DPTR+1)
   0109 A9 00         [ 2]  200 	lda	#0x00
   010B A8            [ 2]  201 	tay
   010C 91*00         [ 6]  202 	sta	[__DPTR],y
                            203 ;	../_strncat.c: 44: return(start);
   010E BD 0A 01      [ 5]  204 	lda	0x10a,x
   0111 AA            [ 2]  205 	tax
   0112 86*00         [ 3]  206 	stx	*(__TEMP+0)
   0114 BA            [ 2]  207 	tsx
   0115 BD 09 01      [ 5]  208 	lda	0x109,x
   0118 08            [ 3]  209 	php
   0119 A6*00         [ 3]  210 	ldx	*(__TEMP+0)
   011B 28            [ 4]  211 	plp
   011C                     212 00109$:
                            213 ;	../_strncat.c: 45: }
   011C 85*00         [ 3]  214 	sta	*(__TEMP+0)
   011E 86*01         [ 3]  215 	stx	*(__TEMP+1)
   0120 BA            [ 2]  216 	tsx
   0121 8A            [ 2]  217 	txa
   0122 18            [ 2]  218 	clc
   0123 69 0C         [ 2]  219 	adc	#0x0c
   0125 AA            [ 2]  220 	tax
   0126 9A            [ 2]  221 	txs
   0127 A6*01         [ 3]  222 	ldx	*(__TEMP+1)
   0129 A5*00         [ 3]  223 	lda	*(__TEMP+0)
   012B 60            [ 6]  224 	rts
                            225 	.area CODE
                            226 	.area RODATA
                            227 	.area XINIT
                            228 	.area CABS    (ABS)
