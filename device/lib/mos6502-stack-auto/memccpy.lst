                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module memccpy
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _memccpy
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'memccpy'
                             49 ;------------------------------------------------------------
                             50 ;src                       Allocated to stack - sp +13
                             51 ;c                         Allocated to stack - sp +15
                             52 ;n                         Allocated to stack - sp +17
                             53 ;dst                       Allocated to registers a x 
                             54 ;d                         Allocated to stack - sp +9
                             55 ;s                         Allocated to registers 
                             56 ;sloc0                     Allocated to stack - sp +7
                             57 ;sloc1                     Allocated to stack - sp +5
                             58 ;sloc2                     Allocated to stack - sp +3
                             59 ;sloc3                     Allocated to stack - sp +1
                             60 ;------------------------------------------------------------
                             61 ;	../memccpy.c: 31: void *memccpy (void *restrict dst, const void *restrict src, int c, size_t n)
                             62 ;	-----------------------------------------
                             63 ;	 function memccpy
                             64 ;	-----------------------------------------
                             65 ;	Register assignment is optimal.
                             66 ;	Stack space usage: 10 bytes.
   0000                      67 _memccpy:
   0000 85*00         [ 3]   68 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   69 	stx	*(__TEMP+1)
   0004 BA            [ 2]   70 	tsx
   0005 8A            [ 2]   71 	txa
   0006 18            [ 2]   72 	clc
   0007 69 F6         [ 2]   73 	adc	#0xf6
   0009 AA            [ 2]   74 	tax
   000A 9A            [ 2]   75 	txs
   000B A6*01         [ 3]   76 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   77 	lda	*(__TEMP+0)
                             78 ;	../memccpy.c: 33: char *d = dst;
   000F 48            [ 3]   79 	pha
   0010 8A            [ 2]   80 	txa
   0011 BA            [ 2]   81 	tsx
   0012 9D 09 01      [ 5]   82 	sta	0x109,x
   0015 68            [ 4]   83 	pla
   0016 9D 08 01      [ 5]   84 	sta	0x108,x
                             85 ;	../memccpy.c: 34: const char *s = src;
   0019 BD 0E 01      [ 5]   86 	lda	0x10e, x
   001C 9D 06 01      [ 5]   87 	sta	0x106,x
   001F BD 0F 01      [ 5]   88 	lda	0x10f,x
   0022 9D 07 01      [ 5]   89 	sta	0x107,x
                             90 ;	../memccpy.c: 36: while (n--)
   0025 BD 12 01      [ 5]   91 	lda	0x112,x
   0028 9D 04 01      [ 5]   92 	sta	0x104,x
   002B BD 13 01      [ 5]   93 	lda	0x113,x
   002E 9D 05 01      [ 5]   94 	sta	0x105,x
   0031                      95 00103$:
   0031 BA            [ 2]   96 	tsx
   0032 BD 03 01      [ 5]   97 	lda	0x103,x
   0035 9D 01 01      [ 5]   98 	sta	0x101,x
   0038 BD 04 01      [ 5]   99 	lda	0x104,x
   003B 9D 02 01      [ 5]  100 	sta	0x102,x
   003E BD 03 01      [ 5]  101 	lda	0x103,x
   0041 38            [ 2]  102 	sec
   0042 E9 01         [ 2]  103 	sbc	#0x01
   0044 9D 03 01      [ 5]  104 	sta	0x103,x
   0047 BD 04 01      [ 5]  105 	lda	0x104,x
   004A E9 00         [ 2]  106 	sbc	#0x00
   004C 9D 04 01      [ 5]  107 	sta	0x104,x
   004F BD 01 01      [ 5]  108 	lda	0x101,x
   0052 1D 02 01      [ 5]  109 	ora	0x102,x
   0055 F0 64         [ 4]  110 	beq	00105$
                            111 ;	../memccpy.c: 37: if ((*d++ = *s++) == (unsigned char)c)
   0057 BD 05 01      [ 5]  112 	lda	0x105,x
   005A 85*00         [ 3]  113 	sta	*(__DPTR+0)
   005C BD 06 01      [ 5]  114 	lda	0x106,x
   005F 85*01         [ 3]  115 	sta	*(__DPTR+1)
   0061 A0 00         [ 2]  116 	ldy	#0x00
   0063 B1*00         [ 6]  117 	lda	[__DPTR],y
   0065 9D 01 01      [ 5]  118 	sta	0x101,x
   0068 BD 05 01      [ 5]  119 	lda	0x105,x
   006B 18            [ 2]  120 	clc
   006C 69 01         [ 2]  121 	adc	#0x01
   006E 9D 05 01      [ 5]  122 	sta	0x105,x
   0071 BD 06 01      [ 5]  123 	lda	0x106,x
   0074 69 00         [ 2]  124 	adc	#0x00
   0076 9D 06 01      [ 5]  125 	sta	0x106,x
   0079 BD 07 01      [ 5]  126 	lda	0x107,x
   007C 85*00         [ 3]  127 	sta	*(__DPTR+0)
   007E BD 08 01      [ 5]  128 	lda	0x108,x
   0081 85*01         [ 3]  129 	sta	*(__DPTR+1)
   0083 BD 01 01      [ 5]  130 	lda	0x101,x
   0086 91*00         [ 6]  131 	sta	[__DPTR],y
   0088 BD 07 01      [ 5]  132 	lda	0x107,x
   008B 18            [ 2]  133 	clc
   008C 69 01         [ 2]  134 	adc	#0x01
   008E 9D 07 01      [ 5]  135 	sta	0x107,x
   0091 BD 08 01      [ 5]  136 	lda	0x108,x
   0094 69 00         [ 2]  137 	adc	#0x00
   0096 9D 08 01      [ 5]  138 	sta	0x108,x
   0099 BD 07 01      [ 5]  139 	lda	0x107,x
   009C 9D 09 01      [ 5]  140 	sta	0x109,x
   009F BD 08 01      [ 5]  141 	lda	0x108,x
   00A2 9D 0A 01      [ 5]  142 	sta	0x10a,x
   00A5 BD 0F 01      [ 5]  143 	lda	0x10f,x
   00A8 DD 01 01      [ 5]  144 	cmp	0x101,x
   00AB D0 84         [ 4]  145 	bne	00103$
                            146 ;	../memccpy.c: 38: return (d);
   00AD BD 09 01      [ 5]  147 	lda	0x109,x
   00B0 85*00         [ 3]  148 	sta	*(__TEMP+0)
   00B2 BD 0A 01      [ 5]  149 	lda	0x10a,x
   00B5 AA            [ 2]  150 	tax
   00B6 A5*00         [ 3]  151 	lda	*(__TEMP+0)
   00B8 4CrBEr00      [ 3]  152 	jmp	00106$
   00BB                     153 00105$:
                            154 ;	../memccpy.c: 40: return (0);
   00BB A9 00         [ 2]  155 	lda	#0x00
   00BD AA            [ 2]  156 	tax
   00BE                     157 00106$:
                            158 ;	../memccpy.c: 41: }
   00BE 85*00         [ 3]  159 	sta	*(__TEMP+0)
   00C0 86*01         [ 3]  160 	stx	*(__TEMP+1)
   00C2 BA            [ 2]  161 	tsx
   00C3 8A            [ 2]  162 	txa
   00C4 18            [ 2]  163 	clc
   00C5 69 0A         [ 2]  164 	adc	#0x0a
   00C7 AA            [ 2]  165 	tax
   00C8 9A            [ 2]  166 	txs
   00C9 A6*01         [ 3]  167 	ldx	*(__TEMP+1)
   00CB A5*00         [ 3]  168 	lda	*(__TEMP+0)
   00CD 60            [ 6]  169 	rts
                            170 	.area CODE
                            171 	.area RODATA
                            172 	.area XINIT
                            173 	.area CABS    (ABS)
