                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _moduint
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl __moduint
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function '_moduint'
                             49 ;------------------------------------------------------------
                             50 ;b                         Allocated to stack - sp +6
                             51 ;a                         Allocated to stack - sp +2
                             52 ;count                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../_moduint.c: 179: _moduint (unsigned int a, unsigned int b) __SDCC_NONBANKED
                             55 ;	-----------------------------------------
                             56 ;	 function _moduint
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 3 bytes.
   0000                      60 __moduint:
   0000 85*00         [ 3]   61 	sta	*(__TEMP+0)
   0002 8A            [ 2]   62 	txa
   0003 48            [ 3]   63 	pha
   0004 A5*00         [ 3]   64 	lda	*(__TEMP+0)
   0006 48            [ 3]   65 	pha
   0007 48            [ 3]   66 	pha
                             67 ;	../_moduint.c: 181: unsigned char count = 0;
   0008 A0 00         [ 2]   68 	ldy	#0x00
                             69 ;	../_moduint.c: 183: while (!MSB_SET(b))
   000A BA            [ 2]   70 	tsx
   000B 98            [ 2]   71 	tya
   000C 9D 01 01      [ 5]   72 	sta	0x101,x
   000F                      73 00103$:
   000F BA            [ 2]   74 	tsx
   0010 BD 07 01      [ 5]   75 	lda	0x107,x
   0013 2A            [ 2]   76 	rol	a
   0014 A9 00         [ 2]   77 	lda	#0x00
   0016 2A            [ 2]   78 	rol	a
   0017 A2 00         [ 2]   79 	ldx	#0x00
   0019 29 01         [ 2]   80 	and	#0x01
   001B D0 59         [ 4]   81 	bne	00117$
                             82 ;	../_moduint.c: 185: b <<= 1;
   001D BA            [ 2]   83 	tsx
   001E BD 06 01      [ 5]   84 	lda	0x106,x
   0021 85*00         [ 3]   85 	sta	*(__TEMP+0)
   0023 BD 07 01      [ 5]   86 	lda	0x107,x
   0026 AA            [ 2]   87 	tax
   0027 A5*00         [ 3]   88 	lda	*(__TEMP+0)
   0029 86*00         [ 3]   89 	stx	*(__TEMP+0)
   002B 0A            [ 2]   90 	asl	a
   002C 26*00         [ 5]   91 	rol	*(__TEMP+0)
   002E A6*00         [ 3]   92 	ldx	*(__TEMP+0)
   0030 48            [ 3]   93 	pha
   0031 8A            [ 2]   94 	txa
   0032 BA            [ 2]   95 	tsx
   0033 9D 08 01      [ 5]   96 	sta	0x108,x
   0036 68            [ 4]   97 	pla
   0037 9D 07 01      [ 5]   98 	sta	0x107,x
                             99 ;	../_moduint.c: 186: if (b > a)
   003A BD 03 01      [ 5]  100 	lda	0x103, x
   003D 38            [ 2]  101 	sec
   003E FD 07 01      [ 5]  102 	sbc	0x107,x
   0041 BD 04 01      [ 5]  103 	lda	0x104,x
   0044 FD 08 01      [ 5]  104 	sbc	0x108,x
   0047 B0 1F         [ 4]  105 	bcs	00102$
                            106 ;	../_moduint.c: 188: b >>=1;
   0049 BD 07 01      [ 5]  107 	lda	0x107,x
   004C 85*00         [ 3]  108 	sta	*(__TEMP+0)
   004E BD 08 01      [ 5]  109 	lda	0x108,x
   0051 AA            [ 2]  110 	tax
   0052 A5*00         [ 3]  111 	lda	*(__TEMP+0)
   0054 86*00         [ 3]  112 	stx	*(__TEMP+0)
   0056 46*00         [ 5]  113 	lsr	*(__TEMP+0)
   0058 6A            [ 2]  114 	ror	a
   0059 A6*00         [ 3]  115 	ldx	*(__TEMP+0)
   005B 48            [ 3]  116 	pha
   005C 8A            [ 2]  117 	txa
   005D BA            [ 2]  118 	tsx
   005E 9D 08 01      [ 5]  119 	sta	0x108,x
   0061 68            [ 4]  120 	pla
   0062 9D 07 01      [ 5]  121 	sta	0x107,x
                            122 ;	../_moduint.c: 189: break;
   0065 4Cr76r00      [ 3]  123 	jmp	00117$
   0068                     124 00102$:
                            125 ;	../_moduint.c: 191: count++;
   0068 BA            [ 2]  126 	tsx
   0069 BD 01 01      [ 5]  127 	lda	0x101,x
   006C 18            [ 2]  128 	clc
   006D 69 01         [ 2]  129 	adc	#0x01
   006F 9D 01 01      [ 5]  130 	sta	0x101, x
   0072 A8            [ 2]  131 	tay
   0073 4Cr0Fr00      [ 3]  132 	jmp	00103$
                            133 ;	../_moduint.c: 193: do
   0076                     134 00117$:
   0076                     135 00108$:
                            136 ;	../_moduint.c: 195: if (a >= b)
   0076 BA            [ 2]  137 	tsx
   0077 BD 02 01      [ 5]  138 	lda	0x102,x
   007A 38            [ 2]  139 	sec
   007B FD 06 01      [ 5]  140 	sbc	0x106,x
   007E BD 03 01      [ 5]  141 	lda	0x103,x
   0081 FD 07 01      [ 5]  142 	sbc	0x107,x
   0084 90 13         [ 4]  143 	bcc	00107$
                            144 ;	../_moduint.c: 196: a -= b;
   0086 BD 02 01      [ 5]  145 	lda	0x102,x
   0089 38            [ 2]  146 	sec
   008A FD 06 01      [ 5]  147 	sbc	0x106,x
   008D 9D 02 01      [ 5]  148 	sta	0x102,x
   0090 BD 03 01      [ 5]  149 	lda	0x103,x
   0093 FD 07 01      [ 5]  150 	sbc	0x107,x
   0096 9D 03 01      [ 5]  151 	sta	0x103,x
   0099                     152 00107$:
                            153 ;	../_moduint.c: 197: b >>= 1;
   0099 BA            [ 2]  154 	tsx
   009A BD 06 01      [ 5]  155 	lda	0x106,x
   009D 85*00         [ 3]  156 	sta	*(__TEMP+0)
   009F BD 07 01      [ 5]  157 	lda	0x107,x
   00A2 AA            [ 2]  158 	tax
   00A3 A5*00         [ 3]  159 	lda	*(__TEMP+0)
   00A5 86*00         [ 3]  160 	stx	*(__TEMP+0)
   00A7 46*00         [ 5]  161 	lsr	*(__TEMP+0)
   00A9 6A            [ 2]  162 	ror	a
   00AA A6*00         [ 3]  163 	ldx	*(__TEMP+0)
   00AC 48            [ 3]  164 	pha
   00AD 8A            [ 2]  165 	txa
   00AE BA            [ 2]  166 	tsx
   00AF 9D 08 01      [ 5]  167 	sta	0x108,x
   00B2 68            [ 4]  168 	pla
   00B3 9D 07 01      [ 5]  169 	sta	0x107,x
                            170 ;	../_moduint.c: 199: while (count--);
   00B6 98            [ 2]  171 	tya
   00B7 88            [ 2]  172 	dey
   00B8 C9 00         [ 2]  173 	cmp	#0x00
   00BA D0 BA         [ 4]  174 	bne	00108$
                            175 ;	../_moduint.c: 200: return a;
   00BC BD 04 01      [ 5]  176 	lda	0x104,x
   00BF AA            [ 2]  177 	tax
   00C0 86*00         [ 3]  178 	stx	*(__TEMP+0)
   00C2 BA            [ 2]  179 	tsx
   00C3 BD 02 01      [ 5]  180 	lda	0x102,x
   00C6 08            [ 3]  181 	php
   00C7 A6*00         [ 3]  182 	ldx	*(__TEMP+0)
   00C9 28            [ 4]  183 	plp
                            184 ;	../_moduint.c: 201: }
   00CA 85*00         [ 3]  185 	sta	*(__TEMP+0)
   00CC 68            [ 4]  186 	pla
   00CD 68            [ 4]  187 	pla
   00CE 68            [ 4]  188 	pla
   00CF A5*00         [ 3]  189 	lda	*(__TEMP+0)
   00D1 60            [ 6]  190 	rts
                            191 	.area CODE
                            192 	.area RODATA
                            193 	.area XINIT
                            194 	.area CABS    (ABS)
