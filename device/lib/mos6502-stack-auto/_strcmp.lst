                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strcmp
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strcmp
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'strcmp'
                             49 ;------------------------------------------------------------
                             50 ;adst                      Allocated to stack - sp +13
                             51 ;asrc                      Allocated to registers 
                             52 ;ret                       Allocated to stack - sp +9
                             53 ;sloc0                     Allocated to stack - sp +7
                             54 ;sloc1                     Allocated to stack - sp +5
                             55 ;sloc2                     Allocated to stack - sp +3
                             56 ;sloc3                     Allocated to stack - sp +1
                             57 ;------------------------------------------------------------
                             58 ;	../_strcmp.c: 34: int strcmp ( const char * asrc, const char * adst )
                             59 ;	-----------------------------------------
                             60 ;	 function strcmp
                             61 ;	-----------------------------------------
                             62 ;	Register assignment is optimal.
                             63 ;	Stack space usage: 10 bytes.
   0000                      64 _strcmp:
   0000 85*00         [ 3]   65 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   66 	stx	*(__TEMP+1)
   0004 BA            [ 2]   67 	tsx
   0005 8A            [ 2]   68 	txa
   0006 18            [ 2]   69 	clc
   0007 69 F6         [ 2]   70 	adc	#0xf6
   0009 AA            [ 2]   71 	tax
   000A 9A            [ 2]   72 	txs
   000B A6*01         [ 3]   73 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   74 	lda	*(__TEMP+0)
   000F 86*00         [ 3]   75 	stx	*(__TEMP+0)
   0011 BA            [ 2]   76 	tsx
   0012 9D 07 01      [ 5]   77 	sta	0x107,x
   0015 A6*00         [ 3]   78 	ldx	*(__TEMP+0)
   0017 8A            [ 2]   79 	txa
   0018 BA            [ 2]   80 	tsx
   0019 9D 08 01      [ 5]   81 	sta	0x108,x
                             82 ;	../_strcmp.c: 51: while( ! (ret = *(unsigned char *)asrc - *(unsigned char *)adst) && *adst)
   001C BA            [ 2]   83 	tsx
   001D BD 0D 01      [ 5]   84 	lda	0x10d,x
   0020 9D 05 01      [ 5]   85 	sta	0x105,x
   0023 BD 0E 01      [ 5]   86 	lda	0x10e,x
   0026 9D 06 01      [ 5]   87 	sta	0x106,x
   0029                      88 00102$:
   0029 BA            [ 2]   89 	tsx
   002A BD 07 01      [ 5]   90 	lda	0x107,x
   002D 85*00         [ 3]   91 	sta	*(__DPTR+0)
   002F BD 08 01      [ 5]   92 	lda	0x108,x
   0032 85*01         [ 3]   93 	sta	*(__DPTR+1)
   0034 A0 00         [ 2]   94 	ldy	#0x00
   0036 B1*00         [ 6]   95 	lda	[__DPTR],y
   0038 A8            [ 2]   96 	tay
   0039 9D 03 01      [ 5]   97 	sta	0x103,x
   003C A9 00         [ 2]   98 	lda	#0x00
   003E 9D 04 01      [ 5]   99 	sta	0x104,x
   0041 BD 05 01      [ 5]  100 	lda	0x105,x
   0044 85*00         [ 3]  101 	sta	*(__DPTR+0)
   0046 BD 06 01      [ 5]  102 	lda	0x106,x
   0049 85*01         [ 3]  103 	sta	*(__DPTR+1)
   004B A0 00         [ 2]  104 	ldy	#0x00
   004D B1*00         [ 6]  105 	lda	[__DPTR],y
   004F A8            [ 2]  106 	tay
   0050 9D 01 01      [ 5]  107 	sta	0x101,x
   0053 A9 00         [ 2]  108 	lda	#0x00
   0055 9D 02 01      [ 5]  109 	sta	0x102,x
   0058 BD 03 01      [ 5]  110 	lda	0x103,x
   005B 38            [ 2]  111 	sec
   005C FD 01 01      [ 5]  112 	sbc	0x101,x
   005F 9D 09 01      [ 5]  113 	sta	0x109,x
   0062 BD 04 01      [ 5]  114 	lda	0x104,x
   0065 FD 02 01      [ 5]  115 	sbc	0x102,x
   0068 9D 0A 01      [ 5]  116 	sta	0x10a,x
   006B BD 09 01      [ 5]  117 	lda	0x109,x
   006E 9D 01 01      [ 5]  118 	sta	0x101,x
   0071 BD 0A 01      [ 5]  119 	lda	0x10a,x
   0074 9D 02 01      [ 5]  120 	sta	0x102,x
   0077 BD 09 01      [ 5]  121 	lda	0x109,x
   007A 1D 0A 01      [ 5]  122 	ora	0x10a,x
   007D D0 29         [ 4]  123 	bne	00104$
   007F C0 00         [ 2]  124 	cpy	#0x00
   0081 F0 25         [ 4]  125 	beq	00104$
                            126 ;	../_strcmp.c: 52: ++asrc, ++adst;
   0083 BD 07 01      [ 5]  127 	lda	0x107,x
   0086 18            [ 2]  128 	clc
   0087 69 01         [ 2]  129 	adc	#0x01
   0089 9D 07 01      [ 5]  130 	sta	0x107,x
   008C BD 08 01      [ 5]  131 	lda	0x108,x
   008F 69 00         [ 2]  132 	adc	#0x00
   0091 9D 08 01      [ 5]  133 	sta	0x108,x
   0094 BD 05 01      [ 5]  134 	lda	0x105,x
   0097 18            [ 2]  135 	clc
   0098 69 01         [ 2]  136 	adc	#0x01
   009A 9D 05 01      [ 5]  137 	sta	0x105,x
   009D BD 06 01      [ 5]  138 	lda	0x106,x
   00A0 69 00         [ 2]  139 	adc	#0x00
   00A2 9D 06 01      [ 5]  140 	sta	0x106,x
   00A5 4Cr29r00      [ 3]  141 	jmp	00102$
   00A8                     142 00104$:
                            143 ;	../_strcmp.c: 54: return( ret );
   00A8 BA            [ 2]  144 	tsx
   00A9 BD 02 01      [ 5]  145 	lda	0x102,x
   00AC AA            [ 2]  146 	tax
   00AD 86*00         [ 3]  147 	stx	*(__TEMP+0)
   00AF BA            [ 2]  148 	tsx
   00B0 BD 01 01      [ 5]  149 	lda	0x101,x
   00B3 08            [ 3]  150 	php
   00B4 A6*00         [ 3]  151 	ldx	*(__TEMP+0)
   00B6 28            [ 4]  152 	plp
                            153 ;	../_strcmp.c: 56: }
   00B7 85*00         [ 3]  154 	sta	*(__TEMP+0)
   00B9 86*01         [ 3]  155 	stx	*(__TEMP+1)
   00BB BA            [ 2]  156 	tsx
   00BC 8A            [ 2]  157 	txa
   00BD 18            [ 2]  158 	clc
   00BE 69 0A         [ 2]  159 	adc	#0x0a
   00C0 AA            [ 2]  160 	tax
   00C1 9A            [ 2]  161 	txs
   00C2 A6*01         [ 3]  162 	ldx	*(__TEMP+1)
   00C4 A5*00         [ 3]  163 	lda	*(__TEMP+0)
   00C6 60            [ 6]  164 	rts
                            165 	.area CODE
                            166 	.area RODATA
                            167 	.area XINIT
                            168 	.area CABS    (ABS)
