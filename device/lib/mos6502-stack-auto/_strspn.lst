                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strspn
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strchr
                             12 	.globl _strspn
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'strspn'
                             50 ;------------------------------------------------------------
                             51 ;control                   Allocated to stack - sp +7
                             52 ;string                    Allocated to registers 
                             53 ;count                     Allocated to stack - sp +3
                             54 ;ch                        Allocated to registers 
                             55 ;sloc0                     Allocated to stack - sp +1
                             56 ;------------------------------------------------------------
                             57 ;	../_strspn.c: 31: size_t strspn ( const char * string, const char * control )
                             58 ;	-----------------------------------------
                             59 ;	 function strspn
                             60 ;	-----------------------------------------
                             61 ;	Register assignment is optimal.
                             62 ;	Stack space usage: 4 bytes.
   0000                      63 _strspn:
   0000 48            [ 3]   64 	pha
   0001 48            [ 3]   65 	pha
   0002 48            [ 3]   66 	pha
   0003 48            [ 3]   67 	pha
   0004 86*00         [ 3]   68 	stx	*(__TEMP+0)
   0006 BA            [ 2]   69 	tsx
   0007 9D 01 01      [ 5]   70 	sta	0x101,x
   000A A6*00         [ 3]   71 	ldx	*(__TEMP+0)
   000C 8A            [ 2]   72 	txa
   000D BA            [ 2]   73 	tsx
   000E 9D 02 01      [ 5]   74 	sta	0x102,x
                             75 ;	../_strspn.c: 36: while (ch = *string) {
   0011 BA            [ 2]   76 	tsx
   0012 A9 00         [ 2]   77 	lda	#0x00
   0014 9D 03 01      [ 5]   78 	sta	0x103,x
   0017 9D 04 01      [ 5]   79 	sta	0x104,x
   001A                      80 00104$:
   001A BA            [ 2]   81 	tsx
   001B BD 01 01      [ 5]   82 	lda	0x101,x
   001E 85*00         [ 3]   83 	sta	*(__DPTR+0)
   0020 BD 02 01      [ 5]   84 	lda	0x102,x
   0023 85*01         [ 3]   85 	sta	*(__DPTR+1)
   0025 A0 00         [ 2]   86 	ldy	#0x00
   0027 B1*00         [ 6]   87 	lda	[__DPTR],y
   0029 F0 43         [ 4]   88 	beq	00106$
                             89 ;	../_strspn.c: 37: if ( strchr(control,ch) )
   002B 48            [ 3]   90 	pha
   002C BD 08 01      [ 5]   91 	lda	0x108,x
   002F AA            [ 2]   92 	tax
   0030 86*00         [ 3]   93 	stx	*(__TEMP+0)
   0032 BA            [ 2]   94 	tsx
   0033 BD 08 01      [ 5]   95 	lda	0x108,x
   0036 08            [ 3]   96 	php
   0037 A6*00         [ 3]   97 	ldx	*(__TEMP+0)
   0039 28            [ 4]   98 	plp
   003A 20r00r00      [ 6]   99 	jsr	_strchr
   003D 85*00         [ 3]  100 	sta	*(__TEMP+0)
   003F 68            [ 4]  101 	pla
   0040 A5*00         [ 3]  102 	lda	*(__TEMP+0)
   0042 D0 02         [ 4]  103 	bne	00123$
   0044 E0 00         [ 2]  104 	cpx	#0x00
   0046                     105 00123$:
   0046 F0 26         [ 4]  106 	beq	00106$
                            107 ;	../_strspn.c: 38: count++ ;
   0048 BA            [ 2]  108 	tsx
   0049 BD 03 01      [ 5]  109 	lda	0x103,x
   004C 18            [ 2]  110 	clc
   004D 69 01         [ 2]  111 	adc	#0x01
   004F 9D 03 01      [ 5]  112 	sta	0x103,x
   0052 BD 04 01      [ 5]  113 	lda	0x104,x
   0055 69 00         [ 2]  114 	adc	#0x00
   0057 9D 04 01      [ 5]  115 	sta	0x104,x
                            116 ;	../_strspn.c: 41: string++ ;
   005A BD 01 01      [ 5]  117 	lda	0x101,x
   005D 18            [ 2]  118 	clc
   005E 69 01         [ 2]  119 	adc	#0x01
   0060 9D 01 01      [ 5]  120 	sta	0x101,x
   0063 BD 02 01      [ 5]  121 	lda	0x102,x
   0066 69 00         [ 2]  122 	adc	#0x00
   0068 9D 02 01      [ 5]  123 	sta	0x102,x
   006B 4Cr1Ar00      [ 3]  124 	jmp	00104$
   006E                     125 00106$:
                            126 ;	../_strspn.c: 44: return count ;
   006E BA            [ 2]  127 	tsx
   006F BD 04 01      [ 5]  128 	lda	0x104,x
   0072 AA            [ 2]  129 	tax
   0073 86*00         [ 3]  130 	stx	*(__TEMP+0)
   0075 BA            [ 2]  131 	tsx
   0076 BD 03 01      [ 5]  132 	lda	0x103,x
   0079 08            [ 3]  133 	php
   007A A6*00         [ 3]  134 	ldx	*(__TEMP+0)
   007C 28            [ 4]  135 	plp
                            136 ;	../_strspn.c: 45: }
   007D 85*00         [ 3]  137 	sta	*(__TEMP+0)
   007F 68            [ 4]  138 	pla
   0080 68            [ 4]  139 	pla
   0081 68            [ 4]  140 	pla
   0082 68            [ 4]  141 	pla
   0083 A5*00         [ 3]  142 	lda	*(__TEMP+0)
   0085 60            [ 6]  143 	rts
                            144 	.area CODE
                            145 	.area RODATA
                            146 	.area XINIT
                            147 	.area CABS    (ABS)
