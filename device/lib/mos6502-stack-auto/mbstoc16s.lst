                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbstoc16s
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mbtowc
                             12 	.globl ___mbstoc16s
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function '__mbstoc16s'
                             50 ;------------------------------------------------------------
                             51 ;s                         Allocated to stack - sp +21
                             52 ;n                         Allocated to stack - sp +23
                             53 ;c16s                      Allocated to stack - sp +17
                             54 ;m                         Allocated to stack - sp +15
                             55 ;l                         Allocated to stack - sp +13
                             56 ;codepoint                 Allocated to stack - sp +1
                             57 ;sloc0                     Allocated to stack - sp +11
                             58 ;sloc1                     Allocated to stack - sp +9
                             59 ;sloc2                     Allocated to stack - sp +5
                             60 ;------------------------------------------------------------
                             61 ;	../mbstoc16s.c: 44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                             62 ;	-----------------------------------------
                             63 ;	 function __mbstoc16s
                             64 ;	-----------------------------------------
                             65 ;	Register assignment is optimal.
                             66 ;	Stack space usage: 18 bytes.
   0000                      67 ___mbstoc16s:
   0000 85*00         [ 3]   68 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   69 	stx	*(__TEMP+1)
   0004 BA            [ 2]   70 	tsx
   0005 8A            [ 2]   71 	txa
   0006 18            [ 2]   72 	clc
   0007 69 EE         [ 2]   73 	adc	#0xee
   0009 AA            [ 2]   74 	tax
   000A 9A            [ 2]   75 	txs
   000B A6*01         [ 3]   76 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   77 	lda	*(__TEMP+0)
   000F 86*00         [ 3]   78 	stx	*(__TEMP+0)
   0011 BA            [ 2]   79 	tsx
   0012 9D 0B 01      [ 5]   80 	sta	0x10b,x
   0015 A6*00         [ 3]   81 	ldx	*(__TEMP+0)
   0017 8A            [ 2]   82 	txa
   0018 BA            [ 2]   83 	tsx
   0019 9D 0C 01      [ 5]   84 	sta	0x10c,x
                             85 ;	../mbstoc16s.c: 46: size_t m = 0;
   001C BA            [ 2]   86 	tsx
   001D A9 00         [ 2]   87 	lda	#0x00
   001F 9D 0F 01      [ 5]   88 	sta	0x10f,x
   0022 9D 10 01      [ 5]   89 	sta	0x110,x
                             90 ;	../mbstoc16s.c: 85: return(m);
   0025                      91 00116$:
                             92 ;	../mbstoc16s.c: 53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
   0025 BA            [ 2]   93 	tsx
   0026 E8            [ 2]   94 	inx
   0027 8A            [ 2]   95 	txa
   0028 A2 01         [ 2]   96 	ldx	#0x01
   002A 48            [ 3]   97 	pha
   002B 8A            [ 2]   98 	txa
   002C BA            [ 2]   99 	tsx
   002D 9D 0B 01      [ 5]  100 	sta	0x10b,x
   0030 68            [ 4]  101 	pla
   0031 9D 0A 01      [ 5]  102 	sta	0x10a,x
   0034 A9 00         [ 2]  103 	lda	#0x00
   0036 48            [ 3]  104 	pha
   0037 A9 04         [ 2]  105 	lda	#0x04
   0039 48            [ 3]  106 	pha
   003A BD 17 01      [ 5]  107 	lda	0x117,x
   003D 48            [ 3]  108 	pha
   003E BD 16 01      [ 5]  109 	lda	0x116,x
   0041 48            [ 3]  110 	pha
   0042 BD 0B 01      [ 5]  111 	lda	0x10b,x
   0045 AA            [ 2]  112 	tax
   0046 86*00         [ 3]  113 	stx	*(__TEMP+0)
   0048 BA            [ 2]  114 	tsx
   0049 BD 0D 01      [ 5]  115 	lda	0x10d,x
   004C 08            [ 3]  116 	php
   004D A6*00         [ 3]  117 	ldx	*(__TEMP+0)
   004F 28            [ 4]  118 	plp
   0050 20r00r00      [ 6]  119 	jsr	_mbtowc
   0053 86*00         [ 3]  120 	stx	*(__TEMP+0)
   0055 BA            [ 2]  121 	tsx
   0056 9D 11 01      [ 5]  122 	sta	0x111,x
   0059 A6*00         [ 3]  123 	ldx	*(__TEMP+0)
   005B 8A            [ 2]  124 	txa
   005C BA            [ 2]  125 	tsx
   005D 9D 12 01      [ 5]  126 	sta	0x112,x
   0060 A6*00         [ 3]  127 	ldx	*(__TEMP+0)
   0062 85*00         [ 3]  128 	sta	*(__TEMP+0)
   0064 68            [ 4]  129 	pla
   0065 68            [ 4]  130 	pla
   0066 68            [ 4]  131 	pla
   0067 68            [ 4]  132 	pla
   0068 A5*00         [ 3]  133 	lda	*(__TEMP+0)
                            134 ;	../mbstoc16s.c: 55: if(l < 0)
   006A BA            [ 2]  135 	tsx
   006B BD 0E 01      [ 5]  136 	lda	0x10e,x
   006E 38            [ 2]  137 	sec
   006F E9 00         [ 2]  138 	sbc	#0x00
   0071 50 04         [ 4]  139 	bvc	00156$
   0073 10 04         [ 4]  140 	bpl	00155$
   0075 30 08         [ 4]  141 	bmi	00106$
   0077                     142 00156$:
   0077 10 06         [ 4]  143 	bpl	00106$
   0079                     144 00155$:
                            145 ;	../mbstoc16s.c: 56: return(-1);
   0079 A9 FF         [ 2]  146 	lda	#0xff
   007B AA            [ 2]  147 	tax
   007C 4Cr6Ar02      [ 3]  148 	jmp	00118$
   007F                     149 00106$:
                            150 ;	../mbstoc16s.c: 57: else if(!l)
   007F BA            [ 2]  151 	tsx
   0080 BD 0D 01      [ 5]  152 	lda	0x10d,x
   0083 1D 0E 01      [ 5]  153 	ora	0x10e,x
   0086 D0 27         [ 4]  154 	bne	00107$
                            155 ;	../mbstoc16s.c: 59: if(m < n)
   0088 BD 0F 01      [ 5]  156 	lda	0x10f,x
   008B 38            [ 2]  157 	sec
   008C FD 17 01      [ 5]  158 	sbc	0x117,x
   008F BD 10 01      [ 5]  159 	lda	0x110,x
   0092 FD 18 01      [ 5]  160 	sbc	0x118,x
   0095 90 03         [ 4]  161 	bcc	00159$
   0097 4Cr5Br02      [ 3]  162 	jmp	00115$
   009A                     163 00159$:
                            164 ;	../mbstoc16s.c: 60: *c16s = 0;
   009A BD 0B 01      [ 5]  165 	lda	0x10b,x
   009D 85*00         [ 3]  166 	sta	*(__DPTR+0)
   009F BD 0C 01      [ 5]  167 	lda	0x10c,x
   00A2 85*01         [ 3]  168 	sta	*(__DPTR+1)
   00A4 A9 00         [ 2]  169 	lda	#0x00
   00A6 A8            [ 2]  170 	tay
   00A7 91*00         [ 6]  171 	sta	[__DPTR],y
   00A9 C8            [ 2]  172 	iny
   00AA 91*00         [ 6]  173 	sta	[__DPTR],y
                            174 ;	../mbstoc16s.c: 61: break;
   00AC 4Cr5Br02      [ 3]  175 	jmp	00115$
   00AF                     176 00107$:
                            177 ;	../mbstoc16s.c: 64: if (codepoint <= 0xffff) // Basic multilingual plane
   00AF BA            [ 2]  178 	tsx
   00B0 A9 FF         [ 2]  179 	lda	#0xff
   00B2 38            [ 2]  180 	sec
   00B3 FD 01 01      [ 5]  181 	sbc	0x101,x
   00B6 A9 FF         [ 2]  182 	lda	#0xff
   00B8 FD 02 01      [ 5]  183 	sbc	0x102,x
   00BB A9 00         [ 2]  184 	lda	#0x00
   00BD FD 03 01      [ 5]  185 	sbc	0x103,x
   00C0 A9 00         [ 2]  186 	lda	#0x00
   00C2 FD 04 01      [ 5]  187 	sbc	0x104,x
   00C5 90 5A         [ 4]  188 	bcc	00113$
                            189 ;	../mbstoc16s.c: 66: if (m >= n)
   00C7 BD 0F 01      [ 5]  190 	lda	0x10f,x
   00CA 38            [ 2]  191 	sec
   00CB FD 17 01      [ 5]  192 	sbc	0x117,x
   00CE BD 10 01      [ 5]  193 	lda	0x110,x
   00D1 FD 18 01      [ 5]  194 	sbc	0x118,x
   00D4 90 03         [ 4]  195 	bcc	00161$
   00D6 4Cr5Br02      [ 3]  196 	jmp	00115$
   00D9                     197 00161$:
                            198 ;	../mbstoc16s.c: 69: *c16s++ = codepoint;
   00D9 BD 01 01      [ 5]  199 	lda	0x101,x
   00DC 9D 09 01      [ 5]  200 	sta	0x109,x
   00DF BD 02 01      [ 5]  201 	lda	0x102,x
   00E2 9D 0A 01      [ 5]  202 	sta	0x10a,x
   00E5 BD 0B 01      [ 5]  203 	lda	0x10b,x
   00E8 85*00         [ 3]  204 	sta	*(__DPTR+0)
   00EA BD 0C 01      [ 5]  205 	lda	0x10c,x
   00ED 85*01         [ 3]  206 	sta	*(__DPTR+1)
   00EF BD 09 01      [ 5]  207 	lda	0x109,x
   00F2 A0 00         [ 2]  208 	ldy	#0x00
   00F4 91*00         [ 6]  209 	sta	[__DPTR],y
   00F6 BD 0A 01      [ 5]  210 	lda	0x10a,x
   00F9 C8            [ 2]  211 	iny
   00FA 91*00         [ 6]  212 	sta	[__DPTR],y
   00FC BD 0B 01      [ 5]  213 	lda	0x10b,x
   00FF 18            [ 2]  214 	clc
   0100 69 02         [ 2]  215 	adc	#0x02
   0102 9D 0B 01      [ 5]  216 	sta	0x10b,x
   0105 BD 0C 01      [ 5]  217 	lda	0x10c,x
   0108 69 00         [ 2]  218 	adc	#0x00
   010A 9D 0C 01      [ 5]  219 	sta	0x10c,x
                            220 ;	../mbstoc16s.c: 70: m++;
   010D BD 0F 01      [ 5]  221 	lda	0x10f,x
   0110 18            [ 2]  222 	clc
   0111 69 01         [ 2]  223 	adc	#0x01
   0113 9D 0F 01      [ 5]  224 	sta	0x10f,x
   0116 BD 10 01      [ 5]  225 	lda	0x110,x
   0119 69 00         [ 2]  226 	adc	#0x00
   011B 9D 10 01      [ 5]  227 	sta	0x110,x
   011E 4Cr44r02      [ 3]  228 	jmp	00114$
   0121                     229 00113$:
                            230 ;	../mbstoc16s.c: 74: if (m + 1 >= n)
   0121 BA            [ 2]  231 	tsx
   0122 BD 0F 01      [ 5]  232 	lda	0x10f,x
   0125 18            [ 2]  233 	clc
   0126 69 01         [ 2]  234 	adc	#0x01
   0128 9D 09 01      [ 5]  235 	sta	0x109,x
   012B BD 10 01      [ 5]  236 	lda	0x110,x
   012E 69 00         [ 2]  237 	adc	#0x00
   0130 9D 0A 01      [ 5]  238 	sta	0x10a,x
   0133 BD 09 01      [ 5]  239 	lda	0x109,x
   0136 38            [ 2]  240 	sec
   0137 FD 17 01      [ 5]  241 	sbc	0x117,x
   013A BD 0A 01      [ 5]  242 	lda	0x10a,x
   013D FD 18 01      [ 5]  243 	sbc	0x118,x
   0140 90 03         [ 4]  244 	bcc	00162$
   0142 4Cr5Br02      [ 3]  245 	jmp	00115$
   0145                     246 00162$:
                            247 ;	../mbstoc16s.c: 77: codepoint -= 0x100000;
   0145 BD 01 01      [ 5]  248 	lda	0x101,x
   0148 38            [ 2]  249 	sec
   0149 E9 00         [ 2]  250 	sbc	#0x00
   014B 9D 01 01      [ 5]  251 	sta	0x101,x
   014E BD 02 01      [ 5]  252 	lda	0x102,x
   0151 E9 00         [ 2]  253 	sbc	#0x00
   0153 9D 02 01      [ 5]  254 	sta	0x102,x
   0156 BD 03 01      [ 5]  255 	lda	0x103,x
   0159 E9 10         [ 2]  256 	sbc	#0x10
   015B 9D 03 01      [ 5]  257 	sta	0x103,x
   015E BD 04 01      [ 5]  258 	lda	0x104,x
   0161 E9 00         [ 2]  259 	sbc	#0x00
   0163 9D 04 01      [ 5]  260 	sta	0x104,x
                            261 ;	../mbstoc16s.c: 78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
   0166 BD 02 01      [ 5]  262 	lda	0x102,x
   0169 85*00         [ 3]  263 	sta	*(__TEMP+0)
   016B BD 03 01      [ 5]  264 	lda	0x103,x
   016E AA            [ 2]  265 	tax
   016F A5*00         [ 3]  266 	lda	*(__TEMP+0)
   0171 86*00         [ 3]  267 	stx	*(__TEMP+0)
   0173 46*00         [ 5]  268 	lsr	*(__TEMP+0)
   0175 6A            [ 2]  269 	ror	a
   0176 46*00         [ 5]  270 	lsr	*(__TEMP+0)
   0178 6A            [ 2]  271 	ror	a
   0179 A6*00         [ 3]  272 	ldx	*(__TEMP+0)
   017B 48            [ 3]  273 	pha
   017C 8A            [ 2]  274 	txa
   017D BA            [ 2]  275 	tsx
   017E 9D 07 01      [ 5]  276 	sta	0x107,x
   0181 68            [ 4]  277 	pla
   0182 9D 06 01      [ 5]  278 	sta	0x106,x
   0185 85*00         [ 3]  279 	sta	*(__TEMP+0)
   0187 BD 05 01      [ 5]  280 	lda	0x105,x
   018A AA            [ 2]  281 	tax
   018B A9 00         [ 2]  282 	lda	#0x00
   018D 86*00         [ 3]  283 	stx	*(__TEMP+0)
   018F 46*00         [ 5]  284 	lsr	*(__TEMP+0)
   0191 6A            [ 2]  285 	ror	a
   0192 46*00         [ 5]  286 	lsr	*(__TEMP+0)
   0194 6A            [ 2]  287 	ror	a
   0195 BA            [ 2]  288 	tsx
   0196 1D 06 01      [ 5]  289 	ora	0x106,x
   0199 08            [ 3]  290 	php
   019A A6*00         [ 3]  291 	ldx	*(__TEMP+0)
   019C 28            [ 4]  292 	plp
   019D 48            [ 3]  293 	pha
   019E 8A            [ 2]  294 	txa
   019F BA            [ 2]  295 	tsx
   01A0 9D 08 01      [ 5]  296 	sta	0x108,x
   01A3 68            [ 4]  297 	pla
   01A4 9D 07 01      [ 5]  298 	sta	0x107,x
   01A7 48            [ 3]  299 	pha
   01A8 A9 00         [ 2]  300 	lda	#0x00
   01AA 9D 09 01      [ 5]  301 	sta	0x109,x
   01AD 68            [ 4]  302 	pla
   01AE BD 06 01      [ 5]  303 	lda	0x106,x
   01B1 85*00         [ 3]  304 	sta	*(__TEMP+0)
   01B3 BD 07 01      [ 5]  305 	lda	0x107,x
   01B6 AA            [ 2]  306 	tax
   01B7 29 03         [ 2]  307 	and	#0x03
   01B9 AA            [ 2]  308 	tax
   01BA A5*00         [ 3]  309 	lda	*(__TEMP+0)
   01BC 18            [ 2]  310 	clc
   01BD 48            [ 3]  311 	pha
   01BE 8A            [ 2]  312 	txa
   01BF 18            [ 2]  313 	clc
   01C0 69 D8         [ 2]  314 	adc	#0xd8
   01C2 AA            [ 2]  315 	tax
   01C3 68            [ 4]  316 	pla
   01C4 85*00         [ 3]  317 	sta	*(__TEMP+0)
   01C6 86*01         [ 3]  318 	stx	*(__TEMP+1)
   01C8 BA            [ 2]  319 	tsx
   01C9 BD 0B 01      [ 5]  320 	lda	0x10b,x
   01CC 85*00         [ 3]  321 	sta	*(__DPTR+0)
   01CE BD 0C 01      [ 5]  322 	lda	0x10c,x
   01D1 85*01         [ 3]  323 	sta	*(__DPTR+1)
   01D3 A5*00         [ 3]  324 	lda	*(__TEMP+0)
   01D5 A6*01         [ 3]  325 	ldx	*(__TEMP+1)
   01D7 A0 00         [ 2]  326 	ldy	#0x00
   01D9 91*00         [ 6]  327 	sta	[__DPTR],y
   01DB 8A            [ 2]  328 	txa
   01DC C8            [ 2]  329 	iny
   01DD 91*00         [ 6]  330 	sta	[__DPTR],y
   01DF BA            [ 2]  331 	tsx
   01E0 BD 0B 01      [ 5]  332 	lda	0x10b,x
   01E3 18            [ 2]  333 	clc
   01E4 69 02         [ 2]  334 	adc	#0x02
   01E6 9D 11 01      [ 5]  335 	sta	0x111,x
   01E9 BD 0C 01      [ 5]  336 	lda	0x10c,x
   01EC 69 00         [ 2]  337 	adc	#0x00
   01EE 9D 12 01      [ 5]  338 	sta	0x112,x
                            339 ;	../mbstoc16s.c: 79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
   01F1 BD 01 01      [ 5]  340 	lda	0x101,x
   01F4 85*00         [ 3]  341 	sta	*(__TEMP+0)
   01F6 BD 02 01      [ 5]  342 	lda	0x102,x
   01F9 AA            [ 2]  343 	tax
   01FA 29 03         [ 2]  344 	and	#0x03
   01FC AA            [ 2]  345 	tax
   01FD A5*00         [ 3]  346 	lda	*(__TEMP+0)
   01FF 18            [ 2]  347 	clc
   0200 48            [ 3]  348 	pha
   0201 8A            [ 2]  349 	txa
   0202 18            [ 2]  350 	clc
   0203 69 DC         [ 2]  351 	adc	#0xdc
   0205 AA            [ 2]  352 	tax
   0206 68            [ 4]  353 	pla
   0207 85*00         [ 3]  354 	sta	*(__TEMP+0)
   0209 86*01         [ 3]  355 	stx	*(__TEMP+1)
   020B BA            [ 2]  356 	tsx
   020C BD 11 01      [ 5]  357 	lda	0x111,x
   020F 85*00         [ 3]  358 	sta	*(__DPTR+0)
   0211 BD 12 01      [ 5]  359 	lda	0x112,x
   0214 85*01         [ 3]  360 	sta	*(__DPTR+1)
   0216 A5*00         [ 3]  361 	lda	*(__TEMP+0)
   0218 A6*01         [ 3]  362 	ldx	*(__TEMP+1)
   021A 88            [ 2]  363 	dey
   021B 91*00         [ 6]  364 	sta	[__DPTR],y
   021D 8A            [ 2]  365 	txa
   021E C8            [ 2]  366 	iny
   021F 91*00         [ 6]  367 	sta	[__DPTR],y
   0221 BA            [ 2]  368 	tsx
   0222 BD 11 01      [ 5]  369 	lda	0x111,x
   0225 18            [ 2]  370 	clc
   0226 69 02         [ 2]  371 	adc	#0x02
   0228 9D 0B 01      [ 5]  372 	sta	0x10b,x
   022B BD 12 01      [ 5]  373 	lda	0x112,x
   022E 69 00         [ 2]  374 	adc	#0x00
   0230 9D 0C 01      [ 5]  375 	sta	0x10c,x
                            376 ;	../mbstoc16s.c: 80: m += 2;
   0233 BD 0F 01      [ 5]  377 	lda	0x10f,x
   0236 18            [ 2]  378 	clc
   0237 69 02         [ 2]  379 	adc	#0x02
   0239 9D 0F 01      [ 5]  380 	sta	0x10f,x
   023C BD 10 01      [ 5]  381 	lda	0x110,x
   023F 69 00         [ 2]  382 	adc	#0x00
   0241 9D 10 01      [ 5]  383 	sta	0x110,x
   0244                     384 00114$:
                            385 ;	../mbstoc16s.c: 82: s += l;
   0244 BA            [ 2]  386 	tsx
   0245 BD 15 01      [ 5]  387 	lda	0x115,x
   0248 18            [ 2]  388 	clc
   0249 7D 0D 01      [ 5]  389 	adc	0x10d,x
   024C 9D 15 01      [ 5]  390 	sta	0x115,x
   024F BD 16 01      [ 5]  391 	lda	0x116,x
   0252 7D 0E 01      [ 5]  392 	adc	0x10e,x
   0255 9D 16 01      [ 5]  393 	sta	0x116,x
   0258 4Cr25r00      [ 3]  394 	jmp	00116$
   025B                     395 00115$:
                            396 ;	../mbstoc16s.c: 85: return(m);
   025B BA            [ 2]  397 	tsx
   025C BD 10 01      [ 5]  398 	lda	0x110,x
   025F AA            [ 2]  399 	tax
   0260 86*00         [ 3]  400 	stx	*(__TEMP+0)
   0262 BA            [ 2]  401 	tsx
   0263 BD 0F 01      [ 5]  402 	lda	0x10f,x
   0266 08            [ 3]  403 	php
   0267 A6*00         [ 3]  404 	ldx	*(__TEMP+0)
   0269 28            [ 4]  405 	plp
   026A                     406 00118$:
                            407 ;	../mbstoc16s.c: 86: }
   026A 85*00         [ 3]  408 	sta	*(__TEMP+0)
   026C 86*01         [ 3]  409 	stx	*(__TEMP+1)
   026E BA            [ 2]  410 	tsx
   026F 8A            [ 2]  411 	txa
   0270 18            [ 2]  412 	clc
   0271 69 12         [ 2]  413 	adc	#0x12
   0273 AA            [ 2]  414 	tax
   0274 9A            [ 2]  415 	txs
   0275 A6*01         [ 3]  416 	ldx	*(__TEMP+1)
   0277 A5*00         [ 3]  417 	lda	*(__TEMP+0)
   0279 60            [ 6]  418 	rts
                            419 	.area CODE
                            420 	.area RODATA
                            421 	.area XINIT
                            422 	.area CABS    (ABS)
