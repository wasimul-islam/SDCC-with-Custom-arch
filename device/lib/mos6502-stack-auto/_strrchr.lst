                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strrchr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strrchr
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'strrchr'
                             49 ;------------------------------------------------------------
                             50 ;ch                        Allocated to stack - sp +7
                             51 ;string                    Allocated to stack - sp +3
                             52 ;start                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../_strrchr.c: 32: char * strrchr ( const char * string, char ch )
                             55 ;	-----------------------------------------
                             56 ;	 function strrchr
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 4 bytes.
   0000                      60 _strrchr:
   0000 48            [ 3]   61 	pha
   0001 48            [ 3]   62 	pha
   0002 48            [ 3]   63 	pha
   0003 48            [ 3]   64 	pha
                             65 ;	../_strrchr.c: 37: const char * start = string;
   0004 48            [ 3]   66 	pha
   0005 86*00         [ 3]   67 	stx	*(__TEMP+0)
   0007 8A            [ 2]   68 	txa
   0008 BA            [ 2]   69 	tsx
   0009 9D 03 01      [ 5]   70 	sta	0x103,x
   000C 68            [ 4]   71 	pla
   000D 9D 02 01      [ 5]   72 	sta	0x102,x
   0010 A6*00         [ 3]   73 	ldx	*(__TEMP+0)
                             74 ;	../_strrchr.c: 39: while (*string++)                       /* find end of string */
   0012                      75 00101$:
   0012 85*00         [ 3]   76 	sta	*(__TEMP+0)
   0014 86*01         [ 3]   77 	stx	*(__TEMP+1)
   0016 85*00         [ 3]   78 	sta	*(__DPTR+0)
   0018 86*01         [ 3]   79 	stx	*(__DPTR+1)
   001A A0 00         [ 2]   80 	ldy	#0x00
   001C B1*00         [ 6]   81 	lda	[__DPTR],y
   001E A8            [ 2]   82 	tay
   001F A6*01         [ 3]   83 	ldx	*(__TEMP+1)
   0021 A5*00         [ 3]   84 	lda	*(__TEMP+0)
   0023 18            [ 2]   85 	clc
   0024 69 01         [ 2]   86 	adc	#0x01
   0026 90 01         [ 4]   87 	bcc	00133$
   0028 E8            [ 2]   88 	inx
   0029                      89 00133$:
   0029 C0 00         [ 2]   90 	cpy	#0x00
   002B D0 E5         [ 4]   91 	bne	00101$
                             92 ;	../_strrchr.c: 42: while (--string != start && *string != ch)
   002D 48            [ 3]   93 	pha
   002E 8A            [ 2]   94 	txa
   002F BA            [ 2]   95 	tsx
   0030 9D 05 01      [ 5]   96 	sta	0x105,x
   0033 68            [ 4]   97 	pla
   0034 9D 04 01      [ 5]   98 	sta	0x104,x
   0037                      99 00105$:
   0037 BA            [ 2]  100 	tsx
   0038 BD 03 01      [ 5]  101 	lda	0x103,x
   003B 38            [ 2]  102 	sec
   003C E9 01         [ 2]  103 	sbc	#0x01
   003E 9D 03 01      [ 5]  104 	sta	0x103,x
   0041 BD 04 01      [ 5]  105 	lda	0x104,x
   0044 E9 00         [ 2]  106 	sbc	#0x00
   0046 9D 04 01      [ 5]  107 	sta	0x104,x
   0049 BD 03 01      [ 5]  108 	lda	0x103,x
   004C DD 01 01      [ 5]  109 	cmp	0x101,x
   004F D0 08         [ 4]  110 	bne	00136$
   0051 BD 04 01      [ 5]  111 	lda	0x104,x
   0054 DD 02 01      [ 5]  112 	cmp	0x102,x
   0057 F0 13         [ 4]  113 	beq	00107$
   0059                     114 00136$:
   0059 BD 03 01      [ 5]  115 	lda	0x103,x
   005C 85*00         [ 3]  116 	sta	*(__DPTR+0)
   005E BD 04 01      [ 5]  117 	lda	0x104,x
   0061 85*01         [ 3]  118 	sta	*(__DPTR+1)
   0063 A0 00         [ 2]  119 	ldy	#0x00
   0065 B1*00         [ 6]  120 	lda	[__DPTR],y
   0067 DD 07 01      [ 5]  121 	cmp	0x107,x
   006A D0 CB         [ 4]  122 	bne	00105$
   006C                     123 00107$:
                            124 ;	../_strrchr.c: 45: if (*string == ch)                      /* char found ? */
   006C BA            [ 2]  125 	tsx
   006D BD 03 01      [ 5]  126 	lda	0x103,x
   0070 85*00         [ 3]  127 	sta	*(__DPTR+0)
   0072 BD 04 01      [ 5]  128 	lda	0x104,x
   0075 85*01         [ 3]  129 	sta	*(__DPTR+1)
   0077 A0 00         [ 2]  130 	ldy	#0x00
   0079 B1*00         [ 6]  131 	lda	[__DPTR],y
   007B DD 07 01      [ 5]  132 	cmp	0x107,x
   007E D0 11         [ 4]  133 	bne	00109$
                            134 ;	../_strrchr.c: 46: return( (char *)string );
   0080 BD 04 01      [ 5]  135 	lda	0x104,x
   0083 AA            [ 2]  136 	tax
   0084 86*00         [ 3]  137 	stx	*(__TEMP+0)
   0086 BA            [ 2]  138 	tsx
   0087 BD 03 01      [ 5]  139 	lda	0x103,x
   008A 08            [ 3]  140 	php
   008B A6*00         [ 3]  141 	ldx	*(__TEMP+0)
   008D 28            [ 4]  142 	plp
   008E 4Cr94r00      [ 3]  143 	jmp	00110$
   0091                     144 00109$:
                            145 ;	../_strrchr.c: 48: return (NULL) ;
   0091 A9 00         [ 2]  146 	lda	#0x00
   0093 AA            [ 2]  147 	tax
   0094                     148 00110$:
                            149 ;	../_strrchr.c: 49: }
   0094 85*00         [ 3]  150 	sta	*(__TEMP+0)
   0096 68            [ 4]  151 	pla
   0097 68            [ 4]  152 	pla
   0098 68            [ 4]  153 	pla
   0099 68            [ 4]  154 	pla
   009A A5*00         [ 3]  155 	lda	*(__TEMP+0)
   009C 60            [ 6]  156 	rts
                            157 	.area CODE
                            158 	.area RODATA
                            159 	.area XINIT
                            160 	.area CABS    (ABS)
