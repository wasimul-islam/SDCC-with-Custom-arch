                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbstowcs
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mbtowc
                             12 	.globl _mbstowcs
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'mbstowcs'
                             50 ;------------------------------------------------------------
                             51 ;s                         Allocated to stack - sp +15
                             52 ;n                         Allocated to stack - sp +17
                             53 ;pwcs                      Allocated to registers 
                             54 ;m                         Allocated to stack - sp +11
                             55 ;b                         Allocated to stack - sp +9
                             56 ;sloc0                     Allocated to stack - sp +7
                             57 ;sloc1                     Allocated to stack - sp +5
                             58 ;sloc2                     Allocated to stack - sp +3
                             59 ;sloc3                     Allocated to stack - sp +1
                             60 ;------------------------------------------------------------
                             61 ;	../mbstowcs.c: 33: size_t mbstowcs(wchar_t *restrict pwcs, const char *restrict s, size_t n)
                             62 ;	-----------------------------------------
                             63 ;	 function mbstowcs
                             64 ;	-----------------------------------------
                             65 ;	Register assignment is optimal.
                             66 ;	Stack space usage: 12 bytes.
   0000                      67 _mbstowcs:
   0000 85*00         [ 3]   68 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   69 	stx	*(__TEMP+1)
   0004 BA            [ 2]   70 	tsx
   0005 8A            [ 2]   71 	txa
   0006 18            [ 2]   72 	clc
   0007 69 F4         [ 2]   73 	adc	#0xf4
   0009 AA            [ 2]   74 	tax
   000A 9A            [ 2]   75 	txs
   000B A6*01         [ 3]   76 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   77 	lda	*(__TEMP+0)
   000F 86*00         [ 3]   78 	stx	*(__TEMP+0)
   0011 BA            [ 2]   79 	tsx
   0012 9D 07 01      [ 5]   80 	sta	0x107,x
   0015 A6*00         [ 3]   81 	ldx	*(__TEMP+0)
   0017 8A            [ 2]   82 	txa
   0018 BA            [ 2]   83 	tsx
   0019 9D 08 01      [ 5]   84 	sta	0x108,x
                             85 ;	../mbstowcs.c: 35: size_t m = 0;
   001C BA            [ 2]   86 	tsx
   001D A9 00         [ 2]   87 	lda	#0x00
   001F 9D 05 01      [ 5]   88 	sta	0x105,x
   0022 9D 06 01      [ 5]   89 	sta	0x106,x
                             90 ;	../mbstowcs.c: 36: while(n--)
   0025 9D 0B 01      [ 5]   91 	sta	0x10b,x
   0028 9D 0C 01      [ 5]   92 	sta	0x10c,x
   002B BD 11 01      [ 5]   93 	lda	0x111,x
   002E 9D 03 01      [ 5]   94 	sta	0x103,x
   0031 BD 12 01      [ 5]   95 	lda	0x112,x
   0034 9D 04 01      [ 5]   96 	sta	0x104,x
   0037                      97 00105$:
   0037 BA            [ 2]   98 	tsx
   0038 BD 03 01      [ 5]   99 	lda	0x103,x
   003B 9D 01 01      [ 5]  100 	sta	0x101,x
   003E BD 04 01      [ 5]  101 	lda	0x104,x
   0041 9D 02 01      [ 5]  102 	sta	0x102,x
   0044 BD 03 01      [ 5]  103 	lda	0x103,x
   0047 38            [ 2]  104 	sec
   0048 E9 01         [ 2]  105 	sbc	#0x01
   004A 9D 03 01      [ 5]  106 	sta	0x103,x
   004D BD 04 01      [ 5]  107 	lda	0x104,x
   0050 E9 00         [ 2]  108 	sbc	#0x00
   0052 9D 04 01      [ 5]  109 	sta	0x104,x
   0055 BD 01 01      [ 5]  110 	lda	0x101,x
   0058 1D 02 01      [ 5]  111 	ora	0x102,x
   005B D0 03         [ 4]  112 	bne	00126$
   005D 4Cr04r01      [ 3]  113 	jmp	00107$
   0060                     114 00126$:
                            115 ;	../mbstowcs.c: 38: int b = mbtowc(pwcs++, s, MB_LEN_MAX);
   0060 BD 07 01      [ 5]  116 	lda	0x107,x
   0063 9D 01 01      [ 5]  117 	sta	0x101,x
   0066 BD 08 01      [ 5]  118 	lda	0x108,x
   0069 9D 02 01      [ 5]  119 	sta	0x102,x
   006C BD 07 01      [ 5]  120 	lda	0x107,x
   006F 18            [ 2]  121 	clc
   0070 69 04         [ 2]  122 	adc	#0x04
   0072 9D 07 01      [ 5]  123 	sta	0x107,x
   0075 BD 08 01      [ 5]  124 	lda	0x108,x
   0078 69 00         [ 2]  125 	adc	#0x00
   007A 9D 08 01      [ 5]  126 	sta	0x108,x
   007D A9 00         [ 2]  127 	lda	#0x00
   007F 48            [ 3]  128 	pha
   0080 A9 04         [ 2]  129 	lda	#0x04
   0082 48            [ 3]  130 	pha
   0083 BD 10 01      [ 5]  131 	lda	0x110,x
   0086 48            [ 3]  132 	pha
   0087 BD 0F 01      [ 5]  133 	lda	0x10f,x
   008A 48            [ 3]  134 	pha
   008B BD 02 01      [ 5]  135 	lda	0x102,x
   008E AA            [ 2]  136 	tax
   008F 86*00         [ 3]  137 	stx	*(__TEMP+0)
   0091 BA            [ 2]  138 	tsx
   0092 BD 05 01      [ 5]  139 	lda	0x105,x
   0095 08            [ 3]  140 	php
   0096 A6*00         [ 3]  141 	ldx	*(__TEMP+0)
   0098 28            [ 4]  142 	plp
   0099 20r00r00      [ 6]  143 	jsr	_mbtowc
   009C 86*00         [ 3]  144 	stx	*(__TEMP+0)
   009E BA            [ 2]  145 	tsx
   009F 9D 0D 01      [ 5]  146 	sta	0x10d,x
   00A2 A6*00         [ 3]  147 	ldx	*(__TEMP+0)
   00A4 8A            [ 2]  148 	txa
   00A5 BA            [ 2]  149 	tsx
   00A6 9D 0E 01      [ 5]  150 	sta	0x10e,x
   00A9 A6*00         [ 3]  151 	ldx	*(__TEMP+0)
   00AB 85*00         [ 3]  152 	sta	*(__TEMP+0)
   00AD 68            [ 4]  153 	pla
   00AE 68            [ 4]  154 	pla
   00AF 68            [ 4]  155 	pla
   00B0 68            [ 4]  156 	pla
   00B1 A5*00         [ 3]  157 	lda	*(__TEMP+0)
                            158 ;	../mbstowcs.c: 39: if(!b)
   00B3 BA            [ 2]  159 	tsx
   00B4 BD 09 01      [ 5]  160 	lda	0x109,x
   00B7 1D 0A 01      [ 5]  161 	ora	0x10a,x
   00BA F0 48         [ 4]  162 	beq	00107$
                            163 ;	../mbstowcs.c: 41: if(b < 0)
   00BC BD 0A 01      [ 5]  164 	lda	0x10a,x
   00BF 38            [ 2]  165 	sec
   00C0 E9 00         [ 2]  166 	sbc	#0x00
   00C2 50 04         [ 4]  167 	bvc	00129$
   00C4 10 04         [ 4]  168 	bpl	00128$
   00C6 30 08         [ 4]  169 	bmi	00104$
   00C8                     170 00129$:
   00C8 10 06         [ 4]  171 	bpl	00104$
   00CA                     172 00128$:
                            173 ;	../mbstowcs.c: 42: return(-1);
   00CA A9 FF         [ 2]  174 	lda	#0xff
   00CC AA            [ 2]  175 	tax
   00CD 4Cr13r01      [ 3]  176 	jmp	00108$
   00D0                     177 00104$:
                            178 ;	../mbstowcs.c: 43: s += b;
   00D0 BA            [ 2]  179 	tsx
   00D1 BD 0F 01      [ 5]  180 	lda	0x10f,x
   00D4 18            [ 2]  181 	clc
   00D5 7D 09 01      [ 5]  182 	adc	0x109,x
   00D8 9D 0F 01      [ 5]  183 	sta	0x10f,x
   00DB BD 10 01      [ 5]  184 	lda	0x110,x
   00DE 7D 0A 01      [ 5]  185 	adc	0x10a,x
   00E1 9D 10 01      [ 5]  186 	sta	0x110,x
                            187 ;	../mbstowcs.c: 44: m++;
   00E4 BD 0B 01      [ 5]  188 	lda	0x10b,x
   00E7 18            [ 2]  189 	clc
   00E8 69 01         [ 2]  190 	adc	#0x01
   00EA 9D 0B 01      [ 5]  191 	sta	0x10b,x
   00ED BD 0C 01      [ 5]  192 	lda	0x10c,x
   00F0 69 00         [ 2]  193 	adc	#0x00
   00F2 9D 0C 01      [ 5]  194 	sta	0x10c,x
   00F5 BD 0B 01      [ 5]  195 	lda	0x10b,x
   00F8 9D 05 01      [ 5]  196 	sta	0x105,x
   00FB BD 0C 01      [ 5]  197 	lda	0x10c,x
   00FE 9D 06 01      [ 5]  198 	sta	0x106,x
   0101 4Cr37r00      [ 3]  199 	jmp	00105$
   0104                     200 00107$:
                            201 ;	../mbstowcs.c: 47: return(m);
   0104 BA            [ 2]  202 	tsx
   0105 BD 06 01      [ 5]  203 	lda	0x106,x
   0108 AA            [ 2]  204 	tax
   0109 86*00         [ 3]  205 	stx	*(__TEMP+0)
   010B BA            [ 2]  206 	tsx
   010C BD 05 01      [ 5]  207 	lda	0x105,x
   010F 08            [ 3]  208 	php
   0110 A6*00         [ 3]  209 	ldx	*(__TEMP+0)
   0112 28            [ 4]  210 	plp
   0113                     211 00108$:
                            212 ;	../mbstowcs.c: 48: }
   0113 85*00         [ 3]  213 	sta	*(__TEMP+0)
   0115 86*01         [ 3]  214 	stx	*(__TEMP+1)
   0117 BA            [ 2]  215 	tsx
   0118 8A            [ 2]  216 	txa
   0119 18            [ 2]  217 	clc
   011A 69 0C         [ 2]  218 	adc	#0x0c
   011C AA            [ 2]  219 	tax
   011D 9A            [ 2]  220 	txs
   011E A6*01         [ 3]  221 	ldx	*(__TEMP+1)
   0120 A5*00         [ 3]  222 	lda	*(__TEMP+0)
   0122 60            [ 6]  223 	rts
                            224 	.area CODE
                            225 	.area RODATA
                            226 	.area XINIT
                            227 	.area CABS    (ABS)
