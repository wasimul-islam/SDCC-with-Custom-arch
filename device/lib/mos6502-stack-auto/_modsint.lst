                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _modsint
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl __modsint
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function '_modsint'
                             49 ;------------------------------------------------------------
                             50 ;b                         Allocated to stack - sp +5
                             51 ;a                         Allocated to registers a x 
                             52 ;r                         Allocated to registers a x 
                             53 ;sloc0                     Allocated to stack - sp +1
                             54 ;------------------------------------------------------------
                             55 ;	../_modsint.c: 209: int _modsint (int a, int b) __SDCC_NONBANKED
                             56 ;	-----------------------------------------
                             57 ;	 function _modsint
                             58 ;	-----------------------------------------
                             59 ;	Register assignment is optimal.
                             60 ;	Stack space usage: 2 bytes.
   0000                      61 __modsint:
   0000 48            [ 3]   62 	pha
   0001 48            [ 3]   63 	pha
                             64 ;	../_modsint.c: 213: r = (unsigned)(a < 0 ? -a : a) % (unsigned)(b < 0 ? -b : b);
   0002 85*00         [ 3]   65 	sta	*(__TEMP+0)
   0004 8A            [ 2]   66 	txa
   0005 38            [ 2]   67 	sec
   0006 E9 00         [ 2]   68 	sbc	#0x00
   0008 50 04         [ 4]   69 	bvc	00124$
   000A 10 09         [ 4]   70 	bpl	00122$
   000C 30 02         [ 4]   71 	bmi	00125$
   000E                      72 00124$:
   000E 30 05         [ 4]   73 	bmi	00122$
   0010                      74 00125$:
   0010 A9 00         [ 2]   75 	lda	#0x00
   0012 4Cr17r00      [ 3]   76 	jmp	00123$
   0015                      77 00122$:
   0015 A9 01         [ 2]   78 	lda	#0x01
   0017                      79 00123$:
   0017 A8            [ 2]   80 	tay
   0018 A5*00         [ 3]   81 	lda	*(__TEMP+0)
   001A C0 00         [ 2]   82 	cpy	#0x00
   001C F0 11         [ 4]   83 	beq	00106$
   001E 49 FF         [ 2]   84 	eor	#0xff
   0020 18            [ 2]   85 	clc
   0021 69 01         [ 2]   86 	adc	#0x01
   0023 48            [ 3]   87 	pha
   0024 A9 00         [ 2]   88 	lda	#0x00
   0026 86*00         [ 3]   89 	stx	*(__TEMP+0)
   0028 E5*00         [ 3]   90 	sbc	*(__TEMP+0)
   002A AA            [ 2]   91 	tax
   002B 68            [ 4]   92 	pla
   002C 4Cr2Fr00      [ 3]   93 	jmp	00107$
   002F                      94 00106$:
   002F                      95 00107$:
   002F 48            [ 3]   96 	pha
   0030 8A            [ 2]   97 	txa
   0031 BA            [ 2]   98 	tsx
   0032 9D 03 01      [ 5]   99 	sta	0x103,x
   0035 68            [ 4]  100 	pla
   0036 9D 02 01      [ 5]  101 	sta	0x102,x
   0039 BD 07 01      [ 5]  102 	lda	0x107, x
   003C 38            [ 2]  103 	sec
   003D E9 00         [ 2]  104 	sbc	#0x00
   003F 50 04         [ 4]  105 	bvc	00128$
   0041 10 04         [ 4]  106 	bpl	00127$
   0043 30 13         [ 4]  107 	bmi	00108$
   0045                     108 00128$:
   0045 10 11         [ 4]  109 	bpl	00108$
   0047                     110 00127$:
   0047 A9 00         [ 2]  111 	lda	#0x00
   0049 38            [ 2]  112 	sec
   004A FD 06 01      [ 5]  113 	sbc	0x106,x
   004D 48            [ 3]  114 	pha
   004E A9 00         [ 2]  115 	lda	#0x00
   0050 FD 07 01      [ 5]  116 	sbc	0x107,x
   0053 AA            [ 2]  117 	tax
   0054 68            [ 4]  118 	pla
   0055 4Cr64r00      [ 3]  119 	jmp	00109$
   0058                     120 00108$:
   0058 BA            [ 2]  121 	tsx
   0059 BD 05 01      [ 5]  122 	lda	0x105,x
   005C 85*00         [ 3]  123 	sta	*(__TEMP+0)
   005E BD 06 01      [ 5]  124 	lda	0x106,x
   0061 AA            [ 2]  125 	tax
   0062 A5*00         [ 3]  126 	lda	*(__TEMP+0)
   0064                     127 00109$:
   0064 85*00         [ 3]  128 	sta	*(__TEMP+0)
   0066 98            [ 2]  129 	tya
   0067 48            [ 3]  130 	pha
   0068 8A            [ 2]  131 	txa
   0069 48            [ 3]  132 	pha
   006A A5*00         [ 3]  133 	lda	*(__TEMP+0)
   006C 48            [ 3]  134 	pha
   006D BA            [ 2]  135 	tsx
   006E BD 05 01      [ 5]  136 	lda	0x105,x
   0071 AA            [ 2]  137 	tax
   0072 86*00         [ 3]  138 	stx	*(__TEMP+0)
   0074 BA            [ 2]  139 	tsx
   0075 BD 04 01      [ 5]  140 	lda	0x104,x
   0078 08            [ 3]  141 	php
   0079 A6*00         [ 3]  142 	ldx	*(__TEMP+0)
   007B 28            [ 4]  143 	plp
   007C 20r00r00      [ 6]  144 	jsr	__moduint
   007F 85*00         [ 3]  145 	sta	*(__TEMP+0)
   0081 68            [ 4]  146 	pla
   0082 68            [ 4]  147 	pla
   0083 68            [ 4]  148 	pla
   0084 A8            [ 2]  149 	tay
   0085 A5*00         [ 3]  150 	lda	*(__TEMP+0)
                            151 ;	../_modsint.c: 215: if (a < 0)
   0087 C0 00         [ 2]  152 	cpy	#0x00
   0089 F0 11         [ 4]  153 	beq	00102$
                            154 ;	../_modsint.c: 216: return -r;
   008B 49 FF         [ 2]  155 	eor	#0xff
   008D 18            [ 2]  156 	clc
   008E 69 01         [ 2]  157 	adc	#0x01
   0090 48            [ 3]  158 	pha
   0091 A9 00         [ 2]  159 	lda	#0x00
   0093 86*00         [ 3]  160 	stx	*(__TEMP+0)
   0095 E5*00         [ 3]  161 	sbc	*(__TEMP+0)
   0097 AA            [ 2]  162 	tax
   0098 68            [ 4]  163 	pla
   0099 4Cr9Cr00      [ 3]  164 	jmp	00104$
   009C                     165 00102$:
                            166 ;	../_modsint.c: 218: return r;
   009C                     167 00104$:
                            168 ;	../_modsint.c: 219: }
   009C 85*00         [ 3]  169 	sta	*(__TEMP+0)
   009E 68            [ 4]  170 	pla
   009F 68            [ 4]  171 	pla
   00A0 A5*00         [ 3]  172 	lda	*(__TEMP+0)
   00A2 60            [ 6]  173 	rts
                            174 	.area CODE
                            175 	.area RODATA
                            176 	.area XINIT
                            177 	.area CABS    (ABS)
