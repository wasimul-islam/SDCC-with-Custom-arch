                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _memcmp
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _memcmp
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'memcmp'
                             49 ;------------------------------------------------------------
                             50 ;buf2                      Allocated to stack - sp +12
                             51 ;count                     Allocated to stack - sp +14
                             52 ;buf1                      Allocated to stack - sp +8
                             53 ;sloc0                     Allocated to stack - sp +6
                             54 ;sloc1                     Allocated to stack - sp +4
                             55 ;sloc2                     Allocated to stack - sp +3
                             56 ;sloc3                     Allocated to stack - sp +1
                             57 ;------------------------------------------------------------
                             58 ;	../_memcmp.c: 31: int memcmp (const void * buf1, const void * buf2, size_t count)
                             59 ;	-----------------------------------------
                             60 ;	 function memcmp
                             61 ;	-----------------------------------------
                             62 ;	Register assignment is optimal.
                             63 ;	Stack space usage: 9 bytes.
   0000                      64 _memcmp:
   0000 85*00         [ 3]   65 	sta	*(__TEMP+0)
   0002 8A            [ 2]   66 	txa
   0003 48            [ 3]   67 	pha
   0004 A5*00         [ 3]   68 	lda	*(__TEMP+0)
   0006 48            [ 3]   69 	pha
   0007 48            [ 3]   70 	pha
   0008 48            [ 3]   71 	pha
   0009 48            [ 3]   72 	pha
   000A 48            [ 3]   73 	pha
   000B 48            [ 3]   74 	pha
   000C 48            [ 3]   75 	pha
   000D 48            [ 3]   76 	pha
                             77 ;	../_memcmp.c: 33: if (!count)
   000E BA            [ 2]   78 	tsx
   000F BD 0E 01      [ 5]   79 	lda	0x10e,x
   0012 1D 0F 01      [ 5]   80 	ora	0x10f,x
   0015 D0 06         [ 4]   81 	bne	00112$
                             82 ;	../_memcmp.c: 34: return(0);
   0017 A9 00         [ 2]   83 	lda	#0x00
   0019 AA            [ 2]   84 	tax
   001A 4Cr08r01      [ 3]   85 	jmp	00107$
                             86 ;	../_memcmp.c: 36: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
   001D                      87 00112$:
   001D BA            [ 2]   88 	tsx
   001E BD 0E 01      [ 5]   89 	lda	0x10e,x
   0021 9D 06 01      [ 5]   90 	sta	0x106,x
   0024 BD 0F 01      [ 5]   91 	lda	0x10f,x
   0027 9D 07 01      [ 5]   92 	sta	0x107,x
   002A                      93 00104$:
   002A BA            [ 2]   94 	tsx
   002B BD 06 01      [ 5]   95 	lda	0x106,x
   002E 38            [ 2]   96 	sec
   002F E9 01         [ 2]   97 	sbc	#0x01
   0031 9D 06 01      [ 5]   98 	sta	0x106,x
   0034 BD 07 01      [ 5]   99 	lda	0x107,x
   0037 E9 00         [ 2]  100 	sbc	#0x00
   0039 9D 07 01      [ 5]  101 	sta	0x107,x
   003C BD 06 01      [ 5]  102 	lda	0x106,x
   003F 1D 07 01      [ 5]  103 	ora	0x107,x
   0042 F0 77         [ 4]  104 	beq	00106$
   0044 BD 08 01      [ 5]  105 	lda	0x108,x
   0047 9D 04 01      [ 5]  106 	sta	0x104,x
   004A BD 09 01      [ 5]  107 	lda	0x109,x
   004D 9D 05 01      [ 5]  108 	sta	0x105,x
   0050 BD 04 01      [ 5]  109 	lda	0x104,x
   0053 85*00         [ 3]  110 	sta	*(__DPTR+0)
   0055 BD 05 01      [ 5]  111 	lda	0x105,x
   0058 85*01         [ 3]  112 	sta	*(__DPTR+1)
   005A A0 00         [ 2]  113 	ldy	#0x00
   005C B1*00         [ 6]  114 	lda	[__DPTR],y
   005E 9D 03 01      [ 5]  115 	sta	0x103,x
   0061 BD 0C 01      [ 5]  116 	lda	0x10c,x
   0064 9D 01 01      [ 5]  117 	sta	0x101,x
   0067 BD 0D 01      [ 5]  118 	lda	0x10d,x
   006A 9D 02 01      [ 5]  119 	sta	0x102,x
   006D BD 01 01      [ 5]  120 	lda	0x101,x
   0070 85*00         [ 3]  121 	sta	*(__DPTR+0)
   0072 BD 02 01      [ 5]  122 	lda	0x102,x
   0075 85*01         [ 3]  123 	sta	*(__DPTR+1)
   0077 B1*00         [ 6]  124 	lda	[__DPTR],y
   0079 DD 03 01      [ 5]  125 	cmp	0x103,x
   007C D0 3D         [ 4]  126 	bne	00106$
                            127 ;	../_memcmp.c: 37: buf1 = (char *)buf1 + 1;
   007E BD 04 01      [ 5]  128 	lda	0x104,x
   0081 18            [ 2]  129 	clc
   0082 69 01         [ 2]  130 	adc	#0x01
   0084 9D 04 01      [ 5]  131 	sta	0x104,x
   0087 BD 05 01      [ 5]  132 	lda	0x105,x
   008A 69 00         [ 2]  133 	adc	#0x00
   008C 9D 05 01      [ 5]  134 	sta	0x105,x
   008F BD 04 01      [ 5]  135 	lda	0x104,x
   0092 9D 08 01      [ 5]  136 	sta	0x108,x
   0095 BD 05 01      [ 5]  137 	lda	0x105,x
   0098 9D 09 01      [ 5]  138 	sta	0x109,x
                            139 ;	../_memcmp.c: 38: buf2 = (char *)buf2 + 1;
   009B BD 01 01      [ 5]  140 	lda	0x101,x
   009E 18            [ 2]  141 	clc
   009F 69 01         [ 2]  142 	adc	#0x01
   00A1 9D 01 01      [ 5]  143 	sta	0x101,x
   00A4 BD 02 01      [ 5]  144 	lda	0x102,x
   00A7 69 00         [ 2]  145 	adc	#0x00
   00A9 9D 02 01      [ 5]  146 	sta	0x102,x
   00AC BD 01 01      [ 5]  147 	lda	0x101,x
   00AF 9D 0C 01      [ 5]  148 	sta	0x10c,x
   00B2 BD 02 01      [ 5]  149 	lda	0x102,x
   00B5 9D 0D 01      [ 5]  150 	sta	0x10d,x
   00B8 4Cr2Ar00      [ 3]  151 	jmp	00104$
   00BB                     152 00106$:
                            153 ;	../_memcmp.c: 41: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
   00BB BA            [ 2]  154 	tsx
   00BC BD 08 01      [ 5]  155 	lda	0x108,x
   00BF 85*00         [ 3]  156 	sta	*(__TEMP+0)
   00C1 BD 09 01      [ 5]  157 	lda	0x109,x
   00C4 AA            [ 2]  158 	tax
   00C5 A5*00         [ 3]  159 	lda	*(__TEMP+0)
   00C7 85*00         [ 3]  160 	sta	*(__DPTR+0)
   00C9 86*01         [ 3]  161 	stx	*(__DPTR+1)
   00CB A0 00         [ 2]  162 	ldy	#0x00
   00CD B1*00         [ 6]  163 	lda	[__DPTR],y
   00CF A8            [ 2]  164 	tay
   00D0 BA            [ 2]  165 	tsx
   00D1 98            [ 2]  166 	tya
   00D2 9D 01 01      [ 5]  167 	sta	0x101,x
   00D5 A9 00         [ 2]  168 	lda	#0x00
   00D7 9D 02 01      [ 5]  169 	sta	0x102,x
   00DA BD 0C 01      [ 5]  170 	lda	0x10c,x
   00DD 85*00         [ 3]  171 	sta	*(__TEMP+0)
   00DF BD 0D 01      [ 5]  172 	lda	0x10d,x
   00E2 AA            [ 2]  173 	tax
   00E3 A5*00         [ 3]  174 	lda	*(__TEMP+0)
   00E5 85*00         [ 3]  175 	sta	*(__DPTR+0)
   00E7 86*01         [ 3]  176 	stx	*(__DPTR+1)
   00E9 A0 00         [ 2]  177 	ldy	#0x00
   00EB B1*00         [ 6]  178 	lda	[__DPTR],y
   00ED A8            [ 2]  179 	tay
   00EE BA            [ 2]  180 	tsx
   00EF 98            [ 2]  181 	tya
   00F0 9D 04 01      [ 5]  182 	sta	0x104,x
   00F3 A9 00         [ 2]  183 	lda	#0x00
   00F5 9D 05 01      [ 5]  184 	sta	0x105,x
   00F8 BD 01 01      [ 5]  185 	lda	0x101,x
   00FB 38            [ 2]  186 	sec
   00FC FD 04 01      [ 5]  187 	sbc	0x104,x
   00FF 48            [ 3]  188 	pha
   0100 BD 02 01      [ 5]  189 	lda	0x102,x
   0103 FD 05 01      [ 5]  190 	sbc	0x105,x
   0106 AA            [ 2]  191 	tax
   0107 68            [ 4]  192 	pla
   0108                     193 00107$:
                            194 ;	../_memcmp.c: 42: }
   0108 85*00         [ 3]  195 	sta	*(__TEMP+0)
   010A 86*01         [ 3]  196 	stx	*(__TEMP+1)
   010C BA            [ 2]  197 	tsx
   010D 8A            [ 2]  198 	txa
   010E 18            [ 2]  199 	clc
   010F 69 09         [ 2]  200 	adc	#0x09
   0111 AA            [ 2]  201 	tax
   0112 9A            [ 2]  202 	txs
   0113 A6*01         [ 3]  203 	ldx	*(__TEMP+1)
   0115 A5*00         [ 3]  204 	lda	*(__TEMP+0)
   0117 60            [ 6]  205 	rts
                            206 	.area CODE
                            207 	.area RODATA
                            208 	.area XINIT
                            209 	.area CABS    (ABS)
