                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _memmove
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _memmove
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'memmove'
                             49 ;------------------------------------------------------------
                             50 ;src                       Allocated to stack - sp +17
                             51 ;size                      Allocated to stack - sp +19
                             52 ;dst                       Allocated to stack - sp +13
                             53 ;c                         Allocated to stack - sp +11
                             54 ;d                         Allocated to registers 
                             55 ;s                         Allocated to registers 
                             56 ;sloc0                     Allocated to stack - sp +9
                             57 ;sloc1                     Allocated to stack - sp +7
                             58 ;sloc2                     Allocated to stack - sp +5
                             59 ;sloc3                     Allocated to stack - sp +3
                             60 ;sloc4                     Allocated to stack - sp +1
                             61 ;------------------------------------------------------------
                             62 ;	../_memmove.c: 35: void *memmove (void *dst, const void *src, size_t size)
                             63 ;	-----------------------------------------
                             64 ;	 function memmove
                             65 ;	-----------------------------------------
                             66 ;	Register assignment is optimal.
                             67 ;	Stack space usage: 14 bytes.
   0000                      68 _memmove:
   0000 85*00         [ 3]   69 	sta	*(__TEMP+0)
   0002 8A            [ 2]   70 	txa
   0003 48            [ 3]   71 	pha
   0004 A5*00         [ 3]   72 	lda	*(__TEMP+0)
   0006 48            [ 3]   73 	pha
   0007 86*01         [ 3]   74 	stx	*(__TEMP+1)
   0009 BA            [ 2]   75 	tsx
   000A 8A            [ 2]   76 	txa
   000B 18            [ 2]   77 	clc
   000C 69 F4         [ 2]   78 	adc	#0xf4
   000E AA            [ 2]   79 	tax
   000F 9A            [ 2]   80 	txs
   0010 A6*01         [ 3]   81 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   82 	lda	*(__TEMP+0)
                             83 ;	../_memmove.c: 37: size_t c = size;
   0014 BA            [ 2]   84 	tsx
   0015 BD 13 01      [ 5]   85 	lda	0x113,x
   0018 9D 0B 01      [ 5]   86 	sta	0x10b,x
   001B BD 14 01      [ 5]   87 	lda	0x114,x
   001E 9D 0C 01      [ 5]   88 	sta	0x10c,x
                             89 ;	../_memmove.c: 38: if (c == 0 || dst == src)
   0021 BD 0B 01      [ 5]   90 	lda	0x10b,x
   0024 1D 0C 01      [ 5]   91 	ora	0x10c,x
   0027 F0 10         [ 4]   92 	beq	00101$
   0029 BD 0D 01      [ 5]   93 	lda	0x10d,x
   002C DD 11 01      [ 5]   94 	cmp	0x111,x
   002F D0 1A         [ 4]   95 	bne	00102$
   0031 BD 0E 01      [ 5]   96 	lda	0x10e,x
   0034 DD 12 01      [ 5]   97 	cmp	0x112,x
   0037 D0 12         [ 4]   98 	bne	00102$
   0039                      99 00101$:
                            100 ;	../_memmove.c: 39: return dst;
   0039 BA            [ 2]  101 	tsx
   003A BD 0E 01      [ 5]  102 	lda	0x10e,x
   003D AA            [ 2]  103 	tax
   003E 86*00         [ 3]  104 	stx	*(__TEMP+0)
   0040 BA            [ 2]  105 	tsx
   0041 BD 0D 01      [ 5]  106 	lda	0x10d,x
   0044 08            [ 3]  107 	php
   0045 A6*00         [ 3]  108 	ldx	*(__TEMP+0)
   0047 28            [ 4]  109 	plp
   0048 4Cr95r01      [ 3]  110 	jmp	00113$
   004B                     111 00102$:
                            112 ;	../_memmove.c: 41: char *d = dst;
   004B BA            [ 2]  113 	tsx
   004C BD 0D 01      [ 5]  114 	lda	0x10d,x
   004F 9D 09 01      [ 5]  115 	sta	0x109,x
   0052 BD 0E 01      [ 5]  116 	lda	0x10e,x
   0055 9D 0A 01      [ 5]  117 	sta	0x10a,x
                            118 ;	../_memmove.c: 42: const char *s = src;
   0058 BD 11 01      [ 5]  119 	lda	0x111,x
   005B 9D 07 01      [ 5]  120 	sta	0x107,x
   005E BD 12 01      [ 5]  121 	lda	0x112,x
   0061 9D 08 01      [ 5]  122 	sta	0x108,x
                            123 ;	../_memmove.c: 43: if (s < d) {
   0064 BD 07 01      [ 5]  124 	lda	0x107,x
   0067 38            [ 2]  125 	sec
   0068 FD 09 01      [ 5]  126 	sbc	0x109,x
   006B BD 08 01      [ 5]  127 	lda	0x108,x
   006E FD 0A 01      [ 5]  128 	sbc	0x10a,x
   0071 90 03         [ 4]  129 	bcc	00146$
   0073 4Cr05r01      [ 3]  130 	jmp	00119$
   0076                     131 00146$:
                            132 ;	../_memmove.c: 50: s += c;
   0076 BD 07 01      [ 5]  133 	lda	0x107,x
   0079 18            [ 2]  134 	clc
   007A 7D 0B 01      [ 5]  135 	adc	0x10b,x
   007D 9D 05 01      [ 5]  136 	sta	0x105,x
   0080 BD 08 01      [ 5]  137 	lda	0x108,x
   0083 7D 0C 01      [ 5]  138 	adc	0x10c,x
   0086 9D 06 01      [ 5]  139 	sta	0x106,x
                            140 ;	../_memmove.c: 51: d += c;
   0089 BD 09 01      [ 5]  141 	lda	0x109,x
   008C 18            [ 2]  142 	clc
   008D 7D 0B 01      [ 5]  143 	adc	0x10b,x
   0090 9D 03 01      [ 5]  144 	sta	0x103,x
   0093 BD 0A 01      [ 5]  145 	lda	0x10a,x
   0096 7D 0C 01      [ 5]  146 	adc	0x10c,x
   0099 9D 04 01      [ 5]  147 	sta	0x104,x
                            148 ;	../_memmove.c: 52: do {
   009C BD 0B 01      [ 5]  149 	lda	0x10b,x
   009F 9D 01 01      [ 5]  150 	sta	0x101,x
   00A2 BD 0C 01      [ 5]  151 	lda	0x10c,x
   00A5 9D 02 01      [ 5]  152 	sta	0x102,x
   00A8                     153 00104$:
                            154 ;	../_memmove.c: 53: *--d = *--s;
   00A8 BA            [ 2]  155 	tsx
   00A9 BD 03 01      [ 5]  156 	lda	0x103,x
   00AC 38            [ 2]  157 	sec
   00AD E9 01         [ 2]  158 	sbc	#0x01
   00AF 9D 03 01      [ 5]  159 	sta	0x103,x
   00B2 BD 04 01      [ 5]  160 	lda	0x104,x
   00B5 E9 00         [ 2]  161 	sbc	#0x00
   00B7 9D 04 01      [ 5]  162 	sta	0x104,x
   00BA BD 05 01      [ 5]  163 	lda	0x105,x
   00BD 38            [ 2]  164 	sec
   00BE E9 01         [ 2]  165 	sbc	#0x01
   00C0 9D 05 01      [ 5]  166 	sta	0x105,x
   00C3 BD 06 01      [ 5]  167 	lda	0x106,x
   00C6 E9 00         [ 2]  168 	sbc	#0x00
   00C8 9D 06 01      [ 5]  169 	sta	0x106,x
   00CB BD 05 01      [ 5]  170 	lda	0x105,x
   00CE 85*00         [ 3]  171 	sta	*(__DPTR+0)
   00D0 BD 06 01      [ 5]  172 	lda	0x106,x
   00D3 85*01         [ 3]  173 	sta	*(__DPTR+1)
   00D5 A0 00         [ 2]  174 	ldy	#0x00
   00D7 B1*00         [ 6]  175 	lda	[__DPTR],y
   00D9 85*00         [ 3]  176 	sta	*(__TEMP+0)
   00DB BD 03 01      [ 5]  177 	lda	0x103,x
   00DE 85*00         [ 3]  178 	sta	*(__DPTR+0)
   00E0 BD 04 01      [ 5]  179 	lda	0x104,x
   00E3 85*01         [ 3]  180 	sta	*(__DPTR+1)
   00E5 A5*00         [ 3]  181 	lda	*(__TEMP+0)
   00E7 91*00         [ 6]  182 	sta	[__DPTR],y
                            183 ;	../_memmove.c: 54: } while (--c);
   00E9 BD 01 01      [ 5]  184 	lda	0x101,x
   00EC 38            [ 2]  185 	sec
   00ED E9 01         [ 2]  186 	sbc	#0x01
   00EF 9D 01 01      [ 5]  187 	sta	0x101,x
   00F2 BD 02 01      [ 5]  188 	lda	0x102,x
   00F5 E9 00         [ 2]  189 	sbc	#0x00
   00F7 9D 02 01      [ 5]  190 	sta	0x102,x
   00FA BD 01 01      [ 5]  191 	lda	0x101,x
   00FD 1D 02 01      [ 5]  192 	ora	0x102,x
   0100 D0 A6         [ 4]  193 	bne	00104$
   0102 4Cr86r01      [ 3]  194 	jmp	00112$
                            195 ;	../_memmove.c: 59: do {
   0105                     196 00119$:
   0105 BA            [ 2]  197 	tsx
   0106 BD 07 01      [ 5]  198 	lda	0x107,x
   0109 9D 01 01      [ 5]  199 	sta	0x101,x
   010C BD 08 01      [ 5]  200 	lda	0x108,x
   010F 9D 02 01      [ 5]  201 	sta	0x102,x
   0112 BD 09 01      [ 5]  202 	lda	0x109,x
   0115 9D 03 01      [ 5]  203 	sta	0x103,x
   0118 BD 0A 01      [ 5]  204 	lda	0x10a,x
   011B 9D 04 01      [ 5]  205 	sta	0x104,x
   011E BD 0B 01      [ 5]  206 	lda	0x10b,x
   0121 9D 05 01      [ 5]  207 	sta	0x105,x
   0124 BD 0C 01      [ 5]  208 	lda	0x10c,x
   0127 9D 06 01      [ 5]  209 	sta	0x106,x
   012A                     210 00107$:
                            211 ;	../_memmove.c: 60: *d++ = *s++;
   012A BA            [ 2]  212 	tsx
   012B BD 01 01      [ 5]  213 	lda	0x101,x
   012E 85*00         [ 3]  214 	sta	*(__DPTR+0)
   0130 BD 02 01      [ 5]  215 	lda	0x102,x
   0133 85*01         [ 3]  216 	sta	*(__DPTR+1)
   0135 A0 00         [ 2]  217 	ldy	#0x00
   0137 B1*00         [ 6]  218 	lda	[__DPTR],y
   0139 9D 07 01      [ 5]  219 	sta	0x107,x
   013C BD 01 01      [ 5]  220 	lda	0x101,x
   013F 18            [ 2]  221 	clc
   0140 69 01         [ 2]  222 	adc	#0x01
   0142 9D 01 01      [ 5]  223 	sta	0x101,x
   0145 BD 02 01      [ 5]  224 	lda	0x102,x
   0148 69 00         [ 2]  225 	adc	#0x00
   014A 9D 02 01      [ 5]  226 	sta	0x102,x
   014D BD 03 01      [ 5]  227 	lda	0x103,x
   0150 85*00         [ 3]  228 	sta	*(__DPTR+0)
   0152 BD 04 01      [ 5]  229 	lda	0x104,x
   0155 85*01         [ 3]  230 	sta	*(__DPTR+1)
   0157 BD 07 01      [ 5]  231 	lda	0x107,x
   015A 91*00         [ 6]  232 	sta	[__DPTR],y
   015C BD 03 01      [ 5]  233 	lda	0x103,x
   015F 18            [ 2]  234 	clc
   0160 69 01         [ 2]  235 	adc	#0x01
   0162 9D 03 01      [ 5]  236 	sta	0x103,x
   0165 BD 04 01      [ 5]  237 	lda	0x104,x
   0168 69 00         [ 2]  238 	adc	#0x00
   016A 9D 04 01      [ 5]  239 	sta	0x104,x
                            240 ;	../_memmove.c: 61: } while (--c);
   016D BD 05 01      [ 5]  241 	lda	0x105,x
   0170 38            [ 2]  242 	sec
   0171 E9 01         [ 2]  243 	sbc	#0x01
   0173 9D 05 01      [ 5]  244 	sta	0x105,x
   0176 BD 06 01      [ 5]  245 	lda	0x106,x
   0179 E9 00         [ 2]  246 	sbc	#0x00
   017B 9D 06 01      [ 5]  247 	sta	0x106,x
   017E BD 05 01      [ 5]  248 	lda	0x105,x
   0181 1D 06 01      [ 5]  249 	ora	0x106,x
   0184 D0 A4         [ 4]  250 	bne	00107$
   0186                     251 00112$:
                            252 ;	../_memmove.c: 65: return dst;
   0186 BA            [ 2]  253 	tsx
   0187 BD 0E 01      [ 5]  254 	lda	0x10e,x
   018A AA            [ 2]  255 	tax
   018B 86*00         [ 3]  256 	stx	*(__TEMP+0)
   018D BA            [ 2]  257 	tsx
   018E BD 0D 01      [ 5]  258 	lda	0x10d,x
   0191 08            [ 3]  259 	php
   0192 A6*00         [ 3]  260 	ldx	*(__TEMP+0)
   0194 28            [ 4]  261 	plp
   0195                     262 00113$:
                            263 ;	../_memmove.c: 66: }
   0195 85*00         [ 3]  264 	sta	*(__TEMP+0)
   0197 86*01         [ 3]  265 	stx	*(__TEMP+1)
   0199 BA            [ 2]  266 	tsx
   019A 8A            [ 2]  267 	txa
   019B 18            [ 2]  268 	clc
   019C 69 0E         [ 2]  269 	adc	#0x0e
   019E AA            [ 2]  270 	tax
   019F 9A            [ 2]  271 	txs
   01A0 A6*01         [ 3]  272 	ldx	*(__TEMP+1)
   01A2 A5*00         [ 3]  273 	lda	*(__TEMP+0)
   01A4 60            [ 6]  274 	rts
                            275 	.area CODE
                            276 	.area RODATA
                            277 	.area XINIT
                            278 	.area CABS    (ABS)
