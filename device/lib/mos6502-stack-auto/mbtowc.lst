                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbtowc
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mbtowc
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'mbtowc'
                             49 ;------------------------------------------------------------
                             50 ;s                         Allocated to stack - sp +23
                             51 ;n                         Allocated to stack - sp +25
                             52 ;pwc                       Allocated to stack - sp +19
                             53 ;codepoint                 Allocated to stack - sp +1
                             54 ;seqlen                    Allocated to stack - sp +18
                             55 ;i                         Allocated to stack - sp +17
                             56 ;first_byte                Allocated to stack - sp +16
                             57 ;sloc0                     Allocated to stack - sp +15
                             58 ;sloc1                     Allocated to stack - sp +13
                             59 ;sloc2                     Allocated to stack - sp +11
                             60 ;sloc3                     Allocated to stack - sp +9
                             61 ;sloc4                     Allocated to stack - sp +5
                             62 ;------------------------------------------------------------
                             63 ;	../mbtowc.c: 31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                             64 ;	-----------------------------------------
                             65 ;	 function mbtowc
                             66 ;	-----------------------------------------
                             67 ;	Register assignment is optimal.
                             68 ;	Stack space usage: 20 bytes.
   0000                      69 _mbtowc:
   0000 85*00         [ 3]   70 	sta	*(__TEMP+0)
   0002 8A            [ 2]   71 	txa
   0003 48            [ 3]   72 	pha
   0004 A5*00         [ 3]   73 	lda	*(__TEMP+0)
   0006 48            [ 3]   74 	pha
   0007 86*01         [ 3]   75 	stx	*(__TEMP+1)
   0009 BA            [ 2]   76 	tsx
   000A 8A            [ 2]   77 	txa
   000B 18            [ 2]   78 	clc
   000C 69 EE         [ 2]   79 	adc	#0xee
   000E AA            [ 2]   80 	tax
   000F 9A            [ 2]   81 	txs
   0010 A6*01         [ 3]   82 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   83 	lda	*(__TEMP+0)
                             84 ;	../mbtowc.c: 37: if(!s)
   0014 BA            [ 2]   85 	tsx
   0015 BD 17 01      [ 5]   86 	lda	0x117,x
   0018 1D 18 01      [ 5]   87 	ora	0x118,x
   001B D0 06         [ 4]   88 	bne	00102$
                             89 ;	../mbtowc.c: 38: return(0);
   001D A9 00         [ 2]   90 	lda	#0x00
   001F AA            [ 2]   91 	tax
   0020 4Cr01r03      [ 3]   92 	jmp	00126$
   0023                      93 00102$:
                             94 ;	../mbtowc.c: 40: seqlen = 1;
   0023 BA            [ 2]   95 	tsx
   0024 A9 01         [ 2]   96 	lda	#0x01
   0026 9D 0F 01      [ 5]   97 	sta	0x10f,x
                             98 ;	../mbtowc.c: 41: first_byte = *s;
   0029 BD 17 01      [ 5]   99 	lda	0x117,x
   002C 9D 0D 01      [ 5]  100 	sta	0x10d,x
   002F BD 18 01      [ 5]  101 	lda	0x118,x
   0032 9D 0E 01      [ 5]  102 	sta	0x10e,x
   0035 BD 0D 01      [ 5]  103 	lda	0x10d,x
   0038 85*00         [ 3]  104 	sta	*(__DPTR+0)
   003A BD 0E 01      [ 5]  105 	lda	0x10e,x
   003D 85*01         [ 3]  106 	sta	*(__DPTR+1)
   003F A0 00         [ 2]  107 	ldy	#0x00
   0041 B1*00         [ 6]  108 	lda	[__DPTR],y
   0043 9D 10 01      [ 5]  109 	sta	0x110,x
                            110 ;	../mbtowc.c: 43: if(first_byte & 0x80)
   0046 A9 80         [ 2]  111 	lda	#0x80
   0048 3D 10 01      [ 5]  112 	and	0x110,x
   004B F0 7A         [ 4]  113 	beq	00107$
                            114 ;	../mbtowc.c: 45: while (first_byte & (0x80 >> seqlen))
   004D A9 01         [ 2]  115 	lda	#0x01
   004F 9D 12 01      [ 5]  116 	sta	0x112,x
   0052                     117 00103$:
   0052 BA            [ 2]  118 	tsx
   0053 BD 12 01      [ 5]  119 	lda	0x112,x
   0056 A8            [ 2]  120 	tay
   0057 A9 80         [ 2]  121 	lda	#0x80
   0059 9D 0B 01      [ 5]  122 	sta	0x10b,x
   005C A9 00         [ 2]  123 	lda	#0x00
   005E 9D 0C 01      [ 5]  124 	sta	0x10c,x
   0061 C0 00         [ 2]  125 	cpy	#0x00
   0063 F0 13         [ 4]  126 	beq	00190$
   0065                     127 00189$:
   0065 BD 0C 01      [ 5]  128 	lda	0x10c,x
   0068 C9 80         [ 2]  129 	cmp	#0x80
   006A 6A            [ 2]  130 	ror	a
   006B 9D 0C 01      [ 5]  131 	sta	0x10c,x
   006E BD 0B 01      [ 5]  132 	lda	0x10b,x
   0071 6A            [ 2]  133 	ror	a
   0072 9D 0B 01      [ 5]  134 	sta	0x10b,x
   0075 88            [ 2]  135 	dey
   0076 D0 ED         [ 4]  136 	bne	00189$
   0078                     137 00190$:
   0078 BD 10 01      [ 5]  138 	lda	0x110,x
   007B 9D 09 01      [ 5]  139 	sta	0x109,x
   007E A9 00         [ 2]  140 	lda	#0x00
   0080 9D 0A 01      [ 5]  141 	sta	0x10a,x
   0083 BD 0B 01      [ 5]  142 	lda	0x10b,x
   0086 3D 09 01      [ 5]  143 	and	0x109,x
   0089 D0 06         [ 4]  144 	bne	00191$
   008B BD 0C 01      [ 5]  145 	lda	0x10c,x
   008E 3D 0A 01      [ 5]  146 	and	0x10a,x
   0091                     147 00191$:
   0091 F0 0C         [ 4]  148 	beq	00143$
                            149 ;	../mbtowc.c: 46: seqlen++;
   0093 BD 12 01      [ 5]  150 	lda	0x112,x
   0096 18            [ 2]  151 	clc
   0097 69 01         [ 2]  152 	adc	#0x01
   0099 9D 12 01      [ 5]  153 	sta	0x112,x
   009C 4Cr52r00      [ 3]  154 	jmp	00103$
   009F                     155 00143$:
   009F BA            [ 2]  156 	tsx
   00A0 BD 12 01      [ 5]  157 	lda	0x112,x
   00A3 9D 0F 01      [ 5]  158 	sta	0x10f,x
                            159 ;	../mbtowc.c: 47: first_byte &= (0xff >> (seqlen + 1));
   00A6 BD 12 01      [ 5]  160 	lda	0x112,x
   00A9 18            [ 2]  161 	clc
   00AA 69 01         [ 2]  162 	adc	#0x01
   00AC A8            [ 2]  163 	tay
   00AD A9 FF         [ 2]  164 	lda	#0xff
   00AF A2 00         [ 2]  165 	ldx	#0x00
   00B1 C0 00         [ 2]  166 	cpy	#0x00
   00B3 F0 0B         [ 4]  167 	beq	00194$
   00B5                     168 00193$:
   00B5 48            [ 3]  169 	pha
   00B6 8A            [ 2]  170 	txa
   00B7 C9 80         [ 2]  171 	cmp	#0x80
   00B9 6A            [ 2]  172 	ror	a
   00BA AA            [ 2]  173 	tax
   00BB 68            [ 4]  174 	pla
   00BC 6A            [ 2]  175 	ror	a
   00BD 88            [ 2]  176 	dey
   00BE D0 F5         [ 4]  177 	bne	00193$
   00C0                     178 00194$:
   00C0 BA            [ 2]  179 	tsx
   00C1 3D 10 01      [ 5]  180 	and	0x110,x
   00C4 9D 10 01      [ 5]  181 	sta	0x110,x
   00C7                     182 00107$:
                            183 ;	../mbtowc.c: 50: if(seqlen > 4 || n < seqlen)
   00C7 BA            [ 2]  184 	tsx
   00C8 BD 0F 01      [ 5]  185 	lda	0x10f,x
   00CB C9 04         [ 2]  186 	cmp	#0x04
   00CD F0 02         [ 4]  187 	beq	00195$
   00CF B0 1A         [ 4]  188 	bcs	00108$
   00D1                     189 00195$:
   00D1 BD 0F 01      [ 5]  190 	lda	0x10f,x
   00D4 9D 09 01      [ 5]  191 	sta	0x109,x
   00D7 A9 00         [ 2]  192 	lda	#0x00
   00D9 9D 0A 01      [ 5]  193 	sta	0x10a,x
   00DC BD 19 01      [ 5]  194 	lda	0x119,x
   00DF 38            [ 2]  195 	sec
   00E0 FD 09 01      [ 5]  196 	sbc	0x109,x
   00E3 BD 1A 01      [ 5]  197 	lda	0x11a,x
   00E6 FD 0A 01      [ 5]  198 	sbc	0x10a,x
   00E9 B0 06         [ 4]  199 	bcs	00136$
   00EB                     200 00108$:
                            201 ;	../mbtowc.c: 51: return(-1);
   00EB A9 FF         [ 2]  202 	lda	#0xff
   00ED AA            [ 2]  203 	tax
   00EE 4Cr01r03      [ 3]  204 	jmp	00126$
                            205 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
   00F1                     206 00136$:
   00F1 BA            [ 2]  207 	tsx
   00F2 A9 01         [ 2]  208 	lda	#0x01
   00F4 9D 11 01      [ 5]  209 	sta	0x111,x
   00F7                     210 00121$:
   00F7 BA            [ 2]  211 	tsx
   00F8 BD 11 01      [ 5]  212 	lda	0x111,x
   00FB DD 0F 01      [ 5]  213 	cmp	0x10f,x
   00FE B0 36         [ 4]  214 	bcs	00113$
                            215 ;	../mbtowc.c: 54: if((s[i] & 0xc0) != 0x80)
   0100 BD 0D 01      [ 5]  216 	lda	0x10d,x
   0103 18            [ 2]  217 	clc
   0104 7D 11 01      [ 5]  218 	adc	0x111,x
   0107 48            [ 3]  219 	pha
   0108 BD 0E 01      [ 5]  220 	lda	0x10e,x
   010B 69 00         [ 2]  221 	adc	#0x00
   010D AA            [ 2]  222 	tax
   010E 68            [ 4]  223 	pla
   010F 85*00         [ 3]  224 	sta	*(__DPTR+0)
   0111 86*01         [ 3]  225 	stx	*(__DPTR+1)
   0113 A0 00         [ 2]  226 	ldy	#0x00
   0115 B1*00         [ 6]  227 	lda	[__DPTR],y
   0117 A2 00         [ 2]  228 	ldx	#0x00
   0119 29 C0         [ 2]  229 	and	#0xc0
   011B C9 80         [ 2]  230 	cmp	#0x80
   011D D0 04         [ 4]  231 	bne	00200$
   011F E0 00         [ 2]  232 	cpx	#0x00
   0121 F0 06         [ 4]  233 	beq	00122$
   0123                     234 00200$:
                            235 ;	../mbtowc.c: 55: return(-1);
   0123 A9 FF         [ 2]  236 	lda	#0xff
   0125 AA            [ 2]  237 	tax
   0126 4Cr01r03      [ 3]  238 	jmp	00126$
   0129                     239 00122$:
                            240 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
   0129 BA            [ 2]  241 	tsx
   012A BD 11 01      [ 5]  242 	lda	0x111,x
   012D 18            [ 2]  243 	clc
   012E 69 01         [ 2]  244 	adc	#0x01
   0130 9D 11 01      [ 5]  245 	sta	0x111,x
   0133 4CrF7r00      [ 3]  246 	jmp	00121$
   0136                     247 00113$:
                            248 ;	../mbtowc.c: 57: codepoint = first_byte;
   0136 BA            [ 2]  249 	tsx
   0137 BD 10 01      [ 5]  250 	lda	0x110,x
   013A 9D 01 01      [ 5]  251 	sta	0x101,x
   013D A9 00         [ 2]  252 	lda	#0x00
   013F 9D 02 01      [ 5]  253 	sta	0x102,x
   0142 9D 03 01      [ 5]  254 	sta	0x103,x
   0145 9D 04 01      [ 5]  255 	sta	0x104,x
                            256 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
   0148 BD 0D 01      [ 5]  257 	lda	0x10d,x
   014B 18            [ 2]  258 	clc
   014C 69 01         [ 2]  259 	adc	#0x01
   014E 9D 17 01      [ 5]  260 	sta	0x117,x
   0151 BD 0E 01      [ 5]  261 	lda	0x10e,x
   0154 69 00         [ 2]  262 	adc	#0x00
   0156 9D 18 01      [ 5]  263 	sta	0x118,x
   0159 BD 0F 01      [ 5]  264 	lda	0x10f,x
   015C 38            [ 2]  265 	sec
   015D E9 01         [ 2]  266 	sbc	#0x01
   015F 9D 09 01      [ 5]  267 	sta	0x109,x
   0162 BD 17 01      [ 5]  268 	lda	0x117,x
   0165 9D 0B 01      [ 5]  269 	sta	0x10b,x
   0168 BD 18 01      [ 5]  270 	lda	0x118,x
   016B 9D 0C 01      [ 5]  271 	sta	0x10c,x
   016E                     272 00124$:
   016E BA            [ 2]  273 	tsx
   016F BD 09 01      [ 5]  274 	lda	0x109,x
   0172 D0 03         [ 4]  275 	bne	00201$
   0174 4Cr8Br02      [ 3]  276 	jmp	00114$
   0177                     277 00201$:
                            278 ;	../mbtowc.c: 61: codepoint <<= 6;
   0177 BD 01 01      [ 5]  279 	lda	0x101,x
   017A 0A            [ 2]  280 	asl	a
   017B 9D 01 01      [ 5]  281 	sta	0x101,x
   017E BD 02 01      [ 5]  282 	lda	0x102,x
   0181 2A            [ 2]  283 	rol	a
   0182 9D 02 01      [ 5]  284 	sta	0x102,x
   0185 BD 03 01      [ 5]  285 	lda	0x103,x
   0188 2A            [ 2]  286 	rol	a
   0189 9D 03 01      [ 5]  287 	sta	0x103,x
   018C BD 04 01      [ 5]  288 	lda	0x104,x
   018F 2A            [ 2]  289 	rol	a
   0190 9D 04 01      [ 5]  290 	sta	0x104,x
   0193 BD 01 01      [ 5]  291 	lda	0x101,x
   0196 0A            [ 2]  292 	asl	a
   0197 9D 01 01      [ 5]  293 	sta	0x101,x
   019A BD 02 01      [ 5]  294 	lda	0x102,x
   019D 2A            [ 2]  295 	rol	a
   019E 9D 02 01      [ 5]  296 	sta	0x102,x
   01A1 BD 03 01      [ 5]  297 	lda	0x103,x
   01A4 2A            [ 2]  298 	rol	a
   01A5 9D 03 01      [ 5]  299 	sta	0x103,x
   01A8 BD 04 01      [ 5]  300 	lda	0x104,x
   01AB 2A            [ 2]  301 	rol	a
   01AC 9D 04 01      [ 5]  302 	sta	0x104,x
   01AF BD 01 01      [ 5]  303 	lda	0x101,x
   01B2 0A            [ 2]  304 	asl	a
   01B3 9D 01 01      [ 5]  305 	sta	0x101,x
   01B6 BD 02 01      [ 5]  306 	lda	0x102,x
   01B9 2A            [ 2]  307 	rol	a
   01BA 9D 02 01      [ 5]  308 	sta	0x102,x
   01BD BD 03 01      [ 5]  309 	lda	0x103,x
   01C0 2A            [ 2]  310 	rol	a
   01C1 9D 03 01      [ 5]  311 	sta	0x103,x
   01C4 BD 04 01      [ 5]  312 	lda	0x104,x
   01C7 2A            [ 2]  313 	rol	a
   01C8 9D 04 01      [ 5]  314 	sta	0x104,x
   01CB BD 01 01      [ 5]  315 	lda	0x101,x
   01CE 0A            [ 2]  316 	asl	a
   01CF 9D 01 01      [ 5]  317 	sta	0x101,x
   01D2 BD 02 01      [ 5]  318 	lda	0x102,x
   01D5 2A            [ 2]  319 	rol	a
   01D6 9D 02 01      [ 5]  320 	sta	0x102,x
   01D9 BD 03 01      [ 5]  321 	lda	0x103,x
   01DC 2A            [ 2]  322 	rol	a
   01DD 9D 03 01      [ 5]  323 	sta	0x103,x
   01E0 BD 04 01      [ 5]  324 	lda	0x104,x
   01E3 2A            [ 2]  325 	rol	a
   01E4 9D 04 01      [ 5]  326 	sta	0x104,x
   01E7 BD 01 01      [ 5]  327 	lda	0x101,x
   01EA 0A            [ 2]  328 	asl	a
   01EB 9D 01 01      [ 5]  329 	sta	0x101,x
   01EE BD 02 01      [ 5]  330 	lda	0x102,x
   01F1 2A            [ 2]  331 	rol	a
   01F2 9D 02 01      [ 5]  332 	sta	0x102,x
   01F5 BD 03 01      [ 5]  333 	lda	0x103,x
   01F8 2A            [ 2]  334 	rol	a
   01F9 9D 03 01      [ 5]  335 	sta	0x103,x
   01FC BD 04 01      [ 5]  336 	lda	0x104,x
   01FF 2A            [ 2]  337 	rol	a
   0200 9D 04 01      [ 5]  338 	sta	0x104,x
   0203 BD 01 01      [ 5]  339 	lda	0x101,x
   0206 0A            [ 2]  340 	asl	a
   0207 9D 01 01      [ 5]  341 	sta	0x101,x
   020A BD 02 01      [ 5]  342 	lda	0x102,x
   020D 2A            [ 2]  343 	rol	a
   020E 9D 02 01      [ 5]  344 	sta	0x102,x
   0211 BD 03 01      [ 5]  345 	lda	0x103,x
   0214 2A            [ 2]  346 	rol	a
   0215 9D 03 01      [ 5]  347 	sta	0x103,x
   0218 BD 04 01      [ 5]  348 	lda	0x104,x
   021B 2A            [ 2]  349 	rol	a
   021C 9D 04 01      [ 5]  350 	sta	0x104,x
                            351 ;	../mbtowc.c: 62: codepoint |= (*s & 0x3f);
   021F BD 0B 01      [ 5]  352 	lda	0x10b,x
   0222 85*00         [ 3]  353 	sta	*(__DPTR+0)
   0224 BD 0C 01      [ 5]  354 	lda	0x10c,x
   0227 85*01         [ 3]  355 	sta	*(__DPTR+1)
   0229 A0 00         [ 2]  356 	ldy	#0x00
   022B B1*00         [ 6]  357 	lda	[__DPTR],y
   022D A2 00         [ 2]  358 	ldx	#0x00
   022F 29 3F         [ 2]  359 	and	#0x3f
   0231 48            [ 3]  360 	pha
   0232 8A            [ 2]  361 	txa
   0233 BA            [ 2]  362 	tsx
   0234 9D 07 01      [ 5]  363 	sta	0x107,x
   0237 68            [ 4]  364 	pla
   0238 9D 06 01      [ 5]  365 	sta	0x106,x
   023B BD 07 01      [ 5]  366 	lda	0x107,x
   023E 0A            [ 2]  367 	asl	a
   023F 98            [ 2]  368 	tya
   0240 69 FF         [ 2]  369 	adc	#0xff
   0242 49 FF         [ 2]  370 	eor	#0xff
   0244 9D 08 01      [ 5]  371 	sta	0x108,x
   0247 9D 09 01      [ 5]  372 	sta	0x109,x
   024A BD 02 01      [ 5]  373 	lda	0x102,x
   024D 1D 06 01      [ 5]  374 	ora	0x106,x
   0250 9D 02 01      [ 5]  375 	sta	0x102,x
   0253 BD 03 01      [ 5]  376 	lda	0x103,x
   0256 1D 07 01      [ 5]  377 	ora	0x107,x
   0259 9D 03 01      [ 5]  378 	sta	0x103,x
   025C BD 04 01      [ 5]  379 	lda	0x104,x
   025F 1D 08 01      [ 5]  380 	ora	0x108,x
   0262 9D 04 01      [ 5]  381 	sta	0x104,x
   0265 BD 05 01      [ 5]  382 	lda	0x105,x
   0268 1D 09 01      [ 5]  383 	ora	0x109,x
   026B 9D 05 01      [ 5]  384 	sta	0x105,x
                            385 ;	../mbtowc.c: 63: s++;
   026E BD 0C 01      [ 5]  386 	lda	0x10c,x
   0271 18            [ 2]  387 	clc
   0272 69 01         [ 2]  388 	adc	#0x01
   0274 9D 0C 01      [ 5]  389 	sta	0x10c,x
   0277 BD 0D 01      [ 5]  390 	lda	0x10d,x
   027A 69 00         [ 2]  391 	adc	#0x00
   027C 9D 0D 01      [ 5]  392 	sta	0x10d,x
                            393 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
   027F BD 0A 01      [ 5]  394 	lda	0x10a,x
   0282 38            [ 2]  395 	sec
   0283 E9 01         [ 2]  396 	sbc	#0x01
   0285 9D 0A 01      [ 5]  397 	sta	0x10a,x
   0288 4Cr6Er01      [ 3]  398 	jmp	00124$
   028B                     399 00114$:
                            400 ;	../mbtowc.c: 66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
   028B BA            [ 2]  401 	tsx
   028C BD 02 01      [ 5]  402 	lda	0x102,x
   028F 38            [ 2]  403 	sec
   0290 E9 D8         [ 2]  404 	sbc	#0xd8
   0292 BD 03 01      [ 5]  405 	lda	0x103,x
   0295 E9 00         [ 2]  406 	sbc	#0x00
   0297 BD 04 01      [ 5]  407 	lda	0x104,x
   029A E9 00         [ 2]  408 	sbc	#0x00
   029C 90 1D         [ 4]  409 	bcc	00116$
   029E A9 FF         [ 2]  410 	lda	#0xff
   02A0 38            [ 2]  411 	sec
   02A1 FD 01 01      [ 5]  412 	sbc	0x101,x
   02A4 A9 DF         [ 2]  413 	lda	#0xdf
   02A6 FD 02 01      [ 5]  414 	sbc	0x102,x
   02A9 A9 00         [ 2]  415 	lda	#0x00
   02AB FD 03 01      [ 5]  416 	sbc	0x103,x
   02AE A9 00         [ 2]  417 	lda	#0x00
   02B0 FD 04 01      [ 5]  418 	sbc	0x104,x
   02B3 90 06         [ 4]  419 	bcc	00116$
                            420 ;	../mbtowc.c: 67: return(-1);
   02B5 A9 FF         [ 2]  421 	lda	#0xff
   02B7 AA            [ 2]  422 	tax
   02B8 4Cr01r03      [ 3]  423 	jmp	00126$
   02BB                     424 00116$:
                            425 ;	../mbtowc.c: 69: if(pwc)
   02BB BA            [ 2]  426 	tsx
   02BC BD 13 01      [ 5]  427 	lda	0x113,x
   02BF 1D 14 01      [ 5]  428 	ora	0x114,x
   02C2 F0 23         [ 4]  429 	beq	00119$
                            430 ;	../mbtowc.c: 70: *pwc = codepoint;
   02C4 BD 13 01      [ 5]  431 	lda	0x113,x
   02C7 85*00         [ 3]  432 	sta	*(__DPTR+0)
   02C9 BD 14 01      [ 5]  433 	lda	0x114,x
   02CC 85*01         [ 3]  434 	sta	*(__DPTR+1)
   02CE BD 01 01      [ 5]  435 	lda	0x101,x
   02D1 A0 00         [ 2]  436 	ldy	#0x00
   02D3 91*00         [ 6]  437 	sta	[__DPTR],y
   02D5 BD 02 01      [ 5]  438 	lda	0x102,x
   02D8 C8            [ 2]  439 	iny
   02D9 91*00         [ 6]  440 	sta	[__DPTR],y
   02DB BD 03 01      [ 5]  441 	lda	0x103,x
   02DE C8            [ 2]  442 	iny
   02DF 91*00         [ 6]  443 	sta	[__DPTR],y
   02E1 BD 04 01      [ 5]  444 	lda	0x104,x
   02E4 C8            [ 2]  445 	iny
   02E5 91*00         [ 6]  446 	sta	[__DPTR],y
   02E7                     447 00119$:
                            448 ;	../mbtowc.c: 71: return(codepoint ? seqlen : 0);
   02E7 BA            [ 2]  449 	tsx
   02E8 BD 04 01      [ 5]  450 	lda	0x104,x
   02EB 1D 03 01      [ 5]  451 	ora	0x103,x
   02EE 1D 02 01      [ 5]  452 	ora	0x102,x
   02F1 1D 01 01      [ 5]  453 	ora	0x101,x
   02F4 F0 08         [ 4]  454 	beq	00128$
   02F6 BD 0F 01      [ 5]  455 	lda	0x10f,x
   02F9 A2 00         [ 2]  456 	ldx	#0x00
   02FB 4Cr01r03      [ 3]  457 	jmp	00129$
   02FE                     458 00128$:
   02FE A9 00         [ 2]  459 	lda	#0x00
   0300 AA            [ 2]  460 	tax
   0301                     461 00129$:
   0301                     462 00126$:
                            463 ;	../mbtowc.c: 72: }
   0301 85*00         [ 3]  464 	sta	*(__TEMP+0)
   0303 86*01         [ 3]  465 	stx	*(__TEMP+1)
   0305 BA            [ 2]  466 	tsx
   0306 8A            [ 2]  467 	txa
   0307 18            [ 2]  468 	clc
   0308 69 14         [ 2]  469 	adc	#0x14
   030A AA            [ 2]  470 	tax
   030B 9A            [ 2]  471 	txs
   030C A6*01         [ 3]  472 	ldx	*(__TEMP+1)
   030E A5*00         [ 3]  473 	lda	*(__TEMP+0)
   0310 60            [ 6]  474 	rts
                            475 	.area CODE
                            476 	.area RODATA
                            477 	.area XINIT
                            478 	.area CABS    (ABS)
