                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _memset
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _memset
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'memset'
                             49 ;------------------------------------------------------------
                             50 ;c                         Allocated to stack - sp +12
                             51 ;n                         Allocated to stack - sp +13
                             52 ;s                         Allocated to stack - sp +8
                             53 ;sz                        Allocated to stack - sp +6
                             54 ;dst                       Allocated to registers 
                             55 ;data                      Allocated to stack - sp +5
                             56 ;sloc0                     Allocated to stack - sp +3
                             57 ;sloc1                     Allocated to stack - sp +1
                             58 ;------------------------------------------------------------
                             59 ;	../_memset.c: 42: void *memset (void *s, unsigned char c, size_t n)
                             60 ;	-----------------------------------------
                             61 ;	 function memset
                             62 ;	-----------------------------------------
                             63 ;	Register assignment is optimal.
                             64 ;	Stack space usage: 9 bytes.
   0000                      65 _memset:
   0000 85*00         [ 3]   66 	sta	*(__TEMP+0)
   0002 8A            [ 2]   67 	txa
   0003 48            [ 3]   68 	pha
   0004 A5*00         [ 3]   69 	lda	*(__TEMP+0)
   0006 48            [ 3]   70 	pha
   0007 48            [ 3]   71 	pha
   0008 48            [ 3]   72 	pha
   0009 48            [ 3]   73 	pha
   000A 48            [ 3]   74 	pha
   000B 48            [ 3]   75 	pha
   000C 48            [ 3]   76 	pha
   000D 48            [ 3]   77 	pha
                             78 ;	../_memset.c: 189: register size_t sz = n;
   000E BA            [ 2]   79 	tsx
   000F BD 0D 01      [ 5]   80 	lda	0x10d,x
   0012 9D 06 01      [ 5]   81 	sta	0x106,x
   0015 BD 0E 01      [ 5]   82 	lda	0x10e,x
   0018 9D 07 01      [ 5]   83 	sta	0x107,x
                             84 ;	../_memset.c: 190: if (sz != 0)
   001B BD 0D 01      [ 5]   85 	lda	0x10d,x
   001E 1D 0E 01      [ 5]   86 	ora	0x10e,x
   0021 F0 5A         [ 4]   87 	beq	00105$
                             88 ;	../_memset.c: 192: register char *dst = s;
   0023 BD 08 01      [ 5]   89 	lda	0x108,x
   0026 9D 03 01      [ 5]   90 	sta	0x103,x
   0029 BD 09 01      [ 5]   91 	lda	0x109,x
   002C 9D 04 01      [ 5]   92 	sta	0x104,x
                             93 ;	../_memset.c: 193: register char data = (char)c;
   002F BD 0C 01      [ 5]   94 	lda	0x10c,x
   0032 9D 05 01      [ 5]   95 	sta	0x105,x
                             96 ;	../_memset.c: 194: do {
   0035 BD 06 01      [ 5]   97 	lda	0x106,x
   0038 9D 01 01      [ 5]   98 	sta	0x101,x
   003B BD 07 01      [ 5]   99 	lda	0x107,x
   003E 9D 02 01      [ 5]  100 	sta	0x102,x
   0041                     101 00101$:
                            102 ;	../_memset.c: 195: *dst++ = data;
   0041 BA            [ 2]  103 	tsx
   0042 BD 03 01      [ 5]  104 	lda	0x103,x
   0045 85*00         [ 3]  105 	sta	*(__DPTR+0)
   0047 BD 04 01      [ 5]  106 	lda	0x104,x
   004A 85*01         [ 3]  107 	sta	*(__DPTR+1)
   004C BD 05 01      [ 5]  108 	lda	0x105,x
   004F A0 00         [ 2]  109 	ldy	#0x00
   0051 91*00         [ 6]  110 	sta	[__DPTR],y
   0053 BD 03 01      [ 5]  111 	lda	0x103,x
   0056 18            [ 2]  112 	clc
   0057 69 01         [ 2]  113 	adc	#0x01
   0059 9D 03 01      [ 5]  114 	sta	0x103,x
   005C BD 04 01      [ 5]  115 	lda	0x104,x
   005F 69 00         [ 2]  116 	adc	#0x00
   0061 9D 04 01      [ 5]  117 	sta	0x104,x
                            118 ;	../_memset.c: 196: } while (--sz);
   0064 BD 01 01      [ 5]  119 	lda	0x101,x
   0067 38            [ 2]  120 	sec
   0068 E9 01         [ 2]  121 	sbc	#0x01
   006A 9D 01 01      [ 5]  122 	sta	0x101,x
   006D BD 02 01      [ 5]  123 	lda	0x102,x
   0070 E9 00         [ 2]  124 	sbc	#0x00
   0072 9D 02 01      [ 5]  125 	sta	0x102,x
   0075 BD 01 01      [ 5]  126 	lda	0x101,x
   0078 1D 02 01      [ 5]  127 	ora	0x102,x
   007B D0 C4         [ 4]  128 	bne	00101$
   007D                     129 00105$:
                            130 ;	../_memset.c: 198: return s;
   007D BA            [ 2]  131 	tsx
   007E BD 09 01      [ 5]  132 	lda	0x109,x
   0081 AA            [ 2]  133 	tax
   0082 86*00         [ 3]  134 	stx	*(__TEMP+0)
   0084 BA            [ 2]  135 	tsx
   0085 BD 08 01      [ 5]  136 	lda	0x108,x
   0088 08            [ 3]  137 	php
   0089 A6*00         [ 3]  138 	ldx	*(__TEMP+0)
   008B 28            [ 4]  139 	plp
                            140 ;	../_memset.c: 199: }
   008C 85*00         [ 3]  141 	sta	*(__TEMP+0)
   008E 86*01         [ 3]  142 	stx	*(__TEMP+1)
   0090 BA            [ 2]  143 	tsx
   0091 8A            [ 2]  144 	txa
   0092 18            [ 2]  145 	clc
   0093 69 09         [ 2]  146 	adc	#0x09
   0095 AA            [ 2]  147 	tax
   0096 9A            [ 2]  148 	txs
   0097 A6*01         [ 3]  149 	ldx	*(__TEMP+1)
   0099 A5*00         [ 3]  150 	lda	*(__TEMP+0)
   009B 60            [ 6]  151 	rts
                            152 	.area CODE
                            153 	.area RODATA
                            154 	.area XINIT
                            155 	.area CABS    (ABS)
