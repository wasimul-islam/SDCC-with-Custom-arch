                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module wcslen
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wcslen
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'wcslen'
                             49 ;------------------------------------------------------------
                             50 ;s                         Allocated to registers 
                             51 ;n                         Allocated to stack - sp +7
                             52 ;sloc0                     Allocated to stack - sp +5
                             53 ;sloc1                     Allocated to stack - sp +1
                             54 ;------------------------------------------------------------
                             55 ;	../wcslen.c: 31: size_t wcslen(const wchar_t *s)
                             56 ;	-----------------------------------------
                             57 ;	 function wcslen
                             58 ;	-----------------------------------------
                             59 ;	Register assignment is optimal.
                             60 ;	Stack space usage: 8 bytes.
   0000                      61 _wcslen:
   0000 85*00         [ 3]   62 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   63 	stx	*(__TEMP+1)
   0004 BA            [ 2]   64 	tsx
   0005 8A            [ 2]   65 	txa
   0006 18            [ 2]   66 	clc
   0007 69 F8         [ 2]   67 	adc	#0xf8
   0009 AA            [ 2]   68 	tax
   000A 9A            [ 2]   69 	txs
   000B A6*01         [ 3]   70 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   71 	lda	*(__TEMP+0)
   000F 86*00         [ 3]   72 	stx	*(__TEMP+0)
   0011 BA            [ 2]   73 	tsx
   0012 9D 05 01      [ 5]   74 	sta	0x105,x
   0015 A6*00         [ 3]   75 	ldx	*(__TEMP+0)
   0017 8A            [ 2]   76 	txa
   0018 BA            [ 2]   77 	tsx
   0019 9D 06 01      [ 5]   78 	sta	0x106,x
                             79 ;	../wcslen.c: 34: while (*s)
   001C BA            [ 2]   80 	tsx
   001D A9 00         [ 2]   81 	lda	#0x00
   001F 9D 07 01      [ 5]   82 	sta	0x107,x
   0022 9D 08 01      [ 5]   83 	sta	0x108,x
   0025                      84 00101$:
   0025 BA            [ 2]   85 	tsx
   0026 BD 05 01      [ 5]   86 	lda	0x105,x
   0029 85*00         [ 3]   87 	sta	*(__DPTR+0)
   002B BD 06 01      [ 5]   88 	lda	0x106,x
   002E 85*01         [ 3]   89 	sta	*(__DPTR+1)
   0030 A0 00         [ 2]   90 	ldy	#0x00
   0032 B1*00         [ 6]   91 	lda	[__DPTR],y
   0034 9D 01 01      [ 5]   92 	sta	0x101,x
   0037 C8            [ 2]   93 	iny
   0038 B1*00         [ 6]   94 	lda	[__DPTR],y
   003A 9D 02 01      [ 5]   95 	sta	0x102,x
   003D C8            [ 2]   96 	iny
   003E B1*00         [ 6]   97 	lda	[__DPTR],y
   0040 9D 03 01      [ 5]   98 	sta	0x103,x
   0043 C8            [ 2]   99 	iny
   0044 B1*00         [ 6]  100 	lda	[__DPTR],y
   0046 9D 04 01      [ 5]  101 	sta	0x104, x
   0049 1D 03 01      [ 5]  102 	ora	0x103,x
   004C 1D 02 01      [ 5]  103 	ora	0x102,x
   004F 1D 01 01      [ 5]  104 	ora	0x101,x
   0052 F0 25         [ 4]  105 	beq	00103$
                            106 ;	../wcslen.c: 36: n++;
   0054 BD 07 01      [ 5]  107 	lda	0x107,x
   0057 18            [ 2]  108 	clc
   0058 69 01         [ 2]  109 	adc	#0x01
   005A 9D 07 01      [ 5]  110 	sta	0x107,x
   005D BD 08 01      [ 5]  111 	lda	0x108,x
   0060 69 00         [ 2]  112 	adc	#0x00
   0062 9D 08 01      [ 5]  113 	sta	0x108,x
                            114 ;	../wcslen.c: 37: s++;
   0065 BD 05 01      [ 5]  115 	lda	0x105,x
   0068 18            [ 2]  116 	clc
   0069 69 04         [ 2]  117 	adc	#0x04
   006B 9D 05 01      [ 5]  118 	sta	0x105,x
   006E BD 06 01      [ 5]  119 	lda	0x106,x
   0071 69 00         [ 2]  120 	adc	#0x00
   0073 9D 06 01      [ 5]  121 	sta	0x106,x
   0076 4Cr25r00      [ 3]  122 	jmp	00101$
   0079                     123 00103$:
                            124 ;	../wcslen.c: 40: return n;
   0079 BA            [ 2]  125 	tsx
   007A BD 08 01      [ 5]  126 	lda	0x108,x
   007D AA            [ 2]  127 	tax
   007E 86*00         [ 3]  128 	stx	*(__TEMP+0)
   0080 BA            [ 2]  129 	tsx
   0081 BD 07 01      [ 5]  130 	lda	0x107,x
   0084 08            [ 3]  131 	php
   0085 A6*00         [ 3]  132 	ldx	*(__TEMP+0)
   0087 28            [ 4]  133 	plp
                            134 ;	../wcslen.c: 41: }
   0088 85*00         [ 3]  135 	sta	*(__TEMP+0)
   008A 86*01         [ 3]  136 	stx	*(__TEMP+1)
   008C BA            [ 2]  137 	tsx
   008D 8A            [ 2]  138 	txa
   008E 18            [ 2]  139 	clc
   008F 69 08         [ 2]  140 	adc	#0x08
   0091 AA            [ 2]  141 	tax
   0092 9A            [ 2]  142 	txs
   0093 A6*01         [ 3]  143 	ldx	*(__TEMP+1)
   0095 A5*00         [ 3]  144 	lda	*(__TEMP+0)
   0097 60            [ 6]  145 	rts
                            146 	.area CODE
                            147 	.area RODATA
                            148 	.area XINIT
                            149 	.area CABS    (ABS)
