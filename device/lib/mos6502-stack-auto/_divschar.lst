                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _divschar
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl __divschar
                             12 	.globl __divuschar
                             13 	.globl __divsuchar
                             14 ;--------------------------------------------------------
                             15 ; ZP ram data
                             16 ;--------------------------------------------------------
                             17 	.area ZP      (PAG)
                             18 ;--------------------------------------------------------
                             19 ; overlayable items in ram
                             20 ;--------------------------------------------------------
                             21 ;--------------------------------------------------------
                             22 ; uninitialized external ram data
                             23 ;--------------------------------------------------------
                             24 	.area BSS
                             25 ;--------------------------------------------------------
                             26 ; absolute external ram data
                             27 ;--------------------------------------------------------
                             28 	.area DABS    (ABS)
                             29 ;--------------------------------------------------------
                             30 ; initialized external ram data
                             31 ;--------------------------------------------------------
                             32 	.area DATA
                             33 ;--------------------------------------------------------
                             34 ; global & static initialisations
                             35 ;--------------------------------------------------------
                             36 	.area _CODE
                             37 	.area GSINIT
                             38 	.area GSFINAL
                             39 	.area GSINIT
                             40 ;--------------------------------------------------------
                             41 ; Home
                             42 ;--------------------------------------------------------
                             43 	.area _CODE
                             44 	.area _CODE
                             45 ;--------------------------------------------------------
                             46 ; code
                             47 ;--------------------------------------------------------
                             48 	.area CODE
                             49 ;------------------------------------------------------------
                             50 ;Allocation info for local variables in function '_divschar'
                             51 ;------------------------------------------------------------
                             52 ;y                         Allocated to registers y 
                             53 ;x                         Allocated to registers a 
                             54 ;sloc0                     Allocated to stack - sp +1
                             55 ;------------------------------------------------------------
                             56 ;	../_divschar.c: 31: _divschar (signed char x, signed char y)
                             57 ;	-----------------------------------------
                             58 ;	 function _divschar
                             59 ;	-----------------------------------------
                             60 ;	Register assignment is optimal.
                             61 ;	Stack space usage: 2 bytes.
   0000                      62 __divschar:
   0000 48            [ 3]   63 	pha
   0001 48            [ 3]   64 	pha
   0002 86*00         [ 3]   65 	stx	*(__TEMP+0)
   0004 A4*00         [ 3]   66 	ldy	*(__TEMP+0)
                             67 ;	../_divschar.c: 33: return ((int)x / (int)y);
   0006 BA            [ 2]   68 	tsx
   0007 9D 01 01      [ 5]   69 	sta	0x101,x
   000A 0A            [ 2]   70 	asl	a
   000B A9 00         [ 2]   71 	lda	#0x00
   000D 69 FF         [ 2]   72 	adc	#0xff
   000F 49 FF         [ 2]   73 	eor	#0xff
   0011 9D 02 01      [ 5]   74 	sta	0x102,x
   0014 98            [ 2]   75 	tya
   0015 48            [ 3]   76 	pha
   0016 0A            [ 2]   77 	asl	a
   0017 A9 00         [ 2]   78 	lda	#0x00
   0019 69 FF         [ 2]   79 	adc	#0xff
   001B 49 FF         [ 2]   80 	eor	#0xff
   001D AA            [ 2]   81 	tax
   001E 68            [ 4]   82 	pla
   001F 85*00         [ 3]   83 	sta	*(__TEMP+0)
   0021 8A            [ 2]   84 	txa
   0022 48            [ 3]   85 	pha
   0023 A5*00         [ 3]   86 	lda	*(__TEMP+0)
   0025 48            [ 3]   87 	pha
   0026 BA            [ 2]   88 	tsx
   0027 BD 04 01      [ 5]   89 	lda	0x104,x
   002A AA            [ 2]   90 	tax
   002B 86*00         [ 3]   91 	stx	*(__TEMP+0)
   002D BA            [ 2]   92 	tsx
   002E BD 03 01      [ 5]   93 	lda	0x103,x
   0031 08            [ 3]   94 	php
   0032 A6*00         [ 3]   95 	ldx	*(__TEMP+0)
   0034 28            [ 4]   96 	plp
   0035 20r00r00      [ 6]   97 	jsr	__divsint
   0038 85*00         [ 3]   98 	sta	*(__TEMP+0)
   003A 68            [ 4]   99 	pla
   003B 68            [ 4]  100 	pla
                            101 ;	../_divschar.c: 34: }
   003C 68            [ 4]  102 	pla
   003D 68            [ 4]  103 	pla
   003E A5*00         [ 3]  104 	lda	*(__TEMP+0)
   0040 60            [ 6]  105 	rts
                            106 ;------------------------------------------------------------
                            107 ;Allocation info for local variables in function '_divuschar'
                            108 ;------------------------------------------------------------
                            109 ;y                         Allocated to registers y 
                            110 ;x                         Allocated to registers a 
                            111 ;sloc0                     Allocated to stack - sp +1
                            112 ;------------------------------------------------------------
                            113 ;	../_divschar.c: 37: _divuschar (unsigned char x, unsigned char y)
                            114 ;	-----------------------------------------
                            115 ;	 function _divuschar
                            116 ;	-----------------------------------------
                            117 ;	Register assignment is optimal.
                            118 ;	Stack space usage: 2 bytes.
   0041                     119 __divuschar:
   0041 48            [ 3]  120 	pha
   0042 48            [ 3]  121 	pha
   0043 86*00         [ 3]  122 	stx	*(__TEMP+0)
   0045 A4*00         [ 3]  123 	ldy	*(__TEMP+0)
                            124 ;	../_divschar.c: 39: return ((int)((signed char)x) / (int)y);
   0047 BA            [ 2]  125 	tsx
   0048 9D 01 01      [ 5]  126 	sta	0x101,x
   004B 0A            [ 2]  127 	asl	a
   004C A9 00         [ 2]  128 	lda	#0x00
   004E 69 FF         [ 2]  129 	adc	#0xff
   0050 49 FF         [ 2]  130 	eor	#0xff
   0052 9D 02 01      [ 5]  131 	sta	0x102,x
   0055 98            [ 2]  132 	tya
   0056 A2 00         [ 2]  133 	ldx	#0x00
   0058 85*00         [ 3]  134 	sta	*(__TEMP+0)
   005A 8A            [ 2]  135 	txa
   005B 48            [ 3]  136 	pha
   005C A5*00         [ 3]  137 	lda	*(__TEMP+0)
   005E 48            [ 3]  138 	pha
   005F BA            [ 2]  139 	tsx
   0060 BD 04 01      [ 5]  140 	lda	0x104,x
   0063 AA            [ 2]  141 	tax
   0064 86*00         [ 3]  142 	stx	*(__TEMP+0)
   0066 BA            [ 2]  143 	tsx
   0067 BD 03 01      [ 5]  144 	lda	0x103,x
   006A 08            [ 3]  145 	php
   006B A6*00         [ 3]  146 	ldx	*(__TEMP+0)
   006D 28            [ 4]  147 	plp
   006E 20r00r00      [ 6]  148 	jsr	__divsint
   0071 85*00         [ 3]  149 	sta	*(__TEMP+0)
   0073 68            [ 4]  150 	pla
   0074 68            [ 4]  151 	pla
                            152 ;	../_divschar.c: 40: }
   0075 68            [ 4]  153 	pla
   0076 68            [ 4]  154 	pla
   0077 A5*00         [ 3]  155 	lda	*(__TEMP+0)
   0079 60            [ 6]  156 	rts
                            157 ;------------------------------------------------------------
                            158 ;Allocation info for local variables in function '_divsuchar'
                            159 ;------------------------------------------------------------
                            160 ;y                         Allocated to registers y 
                            161 ;x                         Allocated to registers a 
                            162 ;sloc0                     Allocated to stack - sp +1
                            163 ;------------------------------------------------------------
                            164 ;	../_divschar.c: 43: _divsuchar (signed char x, signed char y)
                            165 ;	-----------------------------------------
                            166 ;	 function _divsuchar
                            167 ;	-----------------------------------------
                            168 ;	Register assignment is optimal.
                            169 ;	Stack space usage: 2 bytes.
   007A                     170 __divsuchar:
   007A 48            [ 3]  171 	pha
   007B 48            [ 3]  172 	pha
   007C 86*00         [ 3]  173 	stx	*(__TEMP+0)
   007E A4*00         [ 3]  174 	ldy	*(__TEMP+0)
                            175 ;	../_divschar.c: 45: return ((int)((unsigned char)x) / (int)y);
   0080 BA            [ 2]  176 	tsx
   0081 9D 01 01      [ 5]  177 	sta	0x101,x
   0084 48            [ 3]  178 	pha
   0085 A9 00         [ 2]  179 	lda	#0x00
   0087 9D 02 01      [ 5]  180 	sta	0x102,x
   008A 68            [ 4]  181 	pla
   008B 98            [ 2]  182 	tya
   008C 48            [ 3]  183 	pha
   008D 0A            [ 2]  184 	asl	a
   008E A9 00         [ 2]  185 	lda	#0x00
   0090 69 FF         [ 2]  186 	adc	#0xff
   0092 49 FF         [ 2]  187 	eor	#0xff
   0094 AA            [ 2]  188 	tax
   0095 68            [ 4]  189 	pla
   0096 85*00         [ 3]  190 	sta	*(__TEMP+0)
   0098 8A            [ 2]  191 	txa
   0099 48            [ 3]  192 	pha
   009A A5*00         [ 3]  193 	lda	*(__TEMP+0)
   009C 48            [ 3]  194 	pha
   009D BA            [ 2]  195 	tsx
   009E BD 04 01      [ 5]  196 	lda	0x104,x
   00A1 AA            [ 2]  197 	tax
   00A2 86*00         [ 3]  198 	stx	*(__TEMP+0)
   00A4 BA            [ 2]  199 	tsx
   00A5 BD 03 01      [ 5]  200 	lda	0x103,x
   00A8 08            [ 3]  201 	php
   00A9 A6*00         [ 3]  202 	ldx	*(__TEMP+0)
   00AB 28            [ 4]  203 	plp
   00AC 20r00r00      [ 6]  204 	jsr	__divsint
   00AF 85*00         [ 3]  205 	sta	*(__TEMP+0)
   00B1 68            [ 4]  206 	pla
   00B2 68            [ 4]  207 	pla
                            208 ;	../_divschar.c: 46: }
   00B3 68            [ 4]  209 	pla
   00B4 68            [ 4]  210 	pla
   00B5 A5*00         [ 3]  211 	lda	*(__TEMP+0)
   00B7 60            [ 6]  212 	rts
                            213 	.area CODE
                            214 	.area RODATA
                            215 	.area XINIT
                            216 	.area CABS    (ABS)
