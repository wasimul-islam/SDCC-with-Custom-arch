                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module strndup
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _malloc
                             12 	.globl ___memcpy
                             13 	.globl _strlen
                             14 	.globl _strndup
                             15 ;--------------------------------------------------------
                             16 ; ZP ram data
                             17 ;--------------------------------------------------------
                             18 	.area ZP      (PAG)
                             19 ;--------------------------------------------------------
                             20 ; overlayable items in ram
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; uninitialized external ram data
                             24 ;--------------------------------------------------------
                             25 	.area BSS
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area DABS    (ABS)
                             30 ;--------------------------------------------------------
                             31 ; initialized external ram data
                             32 ;--------------------------------------------------------
                             33 	.area DATA
                             34 ;--------------------------------------------------------
                             35 ; global & static initialisations
                             36 ;--------------------------------------------------------
                             37 	.area _CODE
                             38 	.area GSINIT
                             39 	.area GSFINAL
                             40 	.area GSINIT
                             41 ;--------------------------------------------------------
                             42 ; Home
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 	.area _CODE
                             46 ;--------------------------------------------------------
                             47 ; code
                             48 ;--------------------------------------------------------
                             49 	.area CODE
                             50 ;------------------------------------------------------------
                             51 ;Allocation info for local variables in function 'strndup'
                             52 ;------------------------------------------------------------
                             53 ;n                         Allocated to stack - sp +13
                             54 ;s                         Allocated to stack - sp +9
                             55 ;l                         Allocated to stack - sp +7
                             56 ;r                         Allocated to stack - sp +5
                             57 ;sloc0                     Allocated to stack - sp +3
                             58 ;sloc1                     Allocated to stack - sp +1
                             59 ;------------------------------------------------------------
                             60 ;	../strndup.c: 33: char *strndup (const char *s, size_t n)
                             61 ;	-----------------------------------------
                             62 ;	 function strndup
                             63 ;	-----------------------------------------
                             64 ;	Register assignment is optimal.
                             65 ;	Stack space usage: 10 bytes.
   0000                      66 _strndup:
   0000 85*00         [ 3]   67 	sta	*(__TEMP+0)
   0002 8A            [ 2]   68 	txa
   0003 48            [ 3]   69 	pha
   0004 A5*00         [ 3]   70 	lda	*(__TEMP+0)
   0006 48            [ 3]   71 	pha
   0007 86*01         [ 3]   72 	stx	*(__TEMP+1)
   0009 BA            [ 2]   73 	tsx
   000A 8A            [ 2]   74 	txa
   000B 18            [ 2]   75 	clc
   000C 69 F8         [ 2]   76 	adc	#0xf8
   000E AA            [ 2]   77 	tax
   000F 9A            [ 2]   78 	txs
   0010 A6*01         [ 3]   79 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   80 	lda	*(__TEMP+0)
                             81 ;	../strndup.c: 35: size_t l = strlen (s);
   0014 BA            [ 2]   82 	tsx
   0015 BD 0A 01      [ 5]   83 	lda	0x10a,x
   0018 AA            [ 2]   84 	tax
   0019 86*00         [ 3]   85 	stx	*(__TEMP+0)
   001B BA            [ 2]   86 	tsx
   001C BD 09 01      [ 5]   87 	lda	0x109,x
   001F 08            [ 3]   88 	php
   0020 A6*00         [ 3]   89 	ldx	*(__TEMP+0)
   0022 28            [ 4]   90 	plp
   0023 20r00r00      [ 6]   91 	jsr	_strlen
   0026 86*00         [ 3]   92 	stx	*(__TEMP+0)
   0028 BA            [ 2]   93 	tsx
   0029 9D 07 01      [ 5]   94 	sta	0x107,x
   002C A6*00         [ 3]   95 	ldx	*(__TEMP+0)
   002E 8A            [ 2]   96 	txa
   002F BA            [ 2]   97 	tsx
   0030 9D 08 01      [ 5]   98 	sta	0x108,x
                             99 ;	../strndup.c: 36: if (l > n)
   0033 BA            [ 2]  100 	tsx
   0034 BD 0D 01      [ 5]  101 	lda	0x10d,x
   0037 38            [ 2]  102 	sec
   0038 FD 07 01      [ 5]  103 	sbc	0x107,x
   003B BD 0E 01      [ 5]  104 	lda	0x10e,x
   003E FD 08 01      [ 5]  105 	sbc	0x108,x
   0041 B0 0C         [ 4]  106 	bcs	00102$
                            107 ;	../strndup.c: 37: l = n;
   0043 BD 0D 01      [ 5]  108 	lda	0x10d,x
   0046 9D 07 01      [ 5]  109 	sta	0x107,x
   0049 BD 0E 01      [ 5]  110 	lda	0x10e,x
   004C 9D 08 01      [ 5]  111 	sta	0x108,x
   004F                     112 00102$:
                            113 ;	../strndup.c: 38: char *r = malloc (l + 1);
   004F BA            [ 2]  114 	tsx
   0050 BD 07 01      [ 5]  115 	lda	0x107,x
   0053 85*00         [ 3]  116 	sta	*(__TEMP+0)
   0055 BD 08 01      [ 5]  117 	lda	0x108,x
   0058 AA            [ 2]  118 	tax
   0059 A5*00         [ 3]  119 	lda	*(__TEMP+0)
   005B 18            [ 2]  120 	clc
   005C 69 01         [ 2]  121 	adc	#0x01
   005E 90 01         [ 4]  122 	bcc	00116$
   0060 E8            [ 2]  123 	inx
   0061                     124 00116$:
   0061 20r00r00      [ 6]  125 	jsr	_malloc
   0064 48            [ 3]  126 	pha
   0065 8A            [ 2]  127 	txa
   0066 BA            [ 2]  128 	tsx
   0067 9D 07 01      [ 5]  129 	sta	0x107,x
   006A 68            [ 4]  130 	pla
                            131 ;	../strndup.c: 39: if (r)
   006B 9D 06 01      [ 5]  132 	sta	0x106, x
   006E 1D 07 01      [ 5]  133 	ora	0x107,x
   0071 F0 5B         [ 4]  134 	beq	00104$
                            135 ;	../strndup.c: 41: memcpy (r, s, l);
   0073 BD 0A 01      [ 5]  136 	lda	0x10a,x
   0076 9D 04 01      [ 5]  137 	sta	0x104,x
   0079 BD 0B 01      [ 5]  138 	lda	0x10b,x
   007C 9D 05 01      [ 5]  139 	sta	0x105,x
   007F BD 06 01      [ 5]  140 	lda	0x106,x
   0082 9D 02 01      [ 5]  141 	sta	0x102,x
   0085 BD 07 01      [ 5]  142 	lda	0x107,x
   0088 9D 03 01      [ 5]  143 	sta	0x103,x
   008B BD 09 01      [ 5]  144 	lda	0x109,x
   008E 48            [ 3]  145 	pha
   008F BD 08 01      [ 5]  146 	lda	0x108,x
   0092 48            [ 3]  147 	pha
   0093 BD 05 01      [ 5]  148 	lda	0x105,x
   0096 48            [ 3]  149 	pha
   0097 BD 04 01      [ 5]  150 	lda	0x104,x
   009A 48            [ 3]  151 	pha
   009B BD 03 01      [ 5]  152 	lda	0x103,x
   009E AA            [ 2]  153 	tax
   009F 86*00         [ 3]  154 	stx	*(__TEMP+0)
   00A1 BA            [ 2]  155 	tsx
   00A2 BD 05 01      [ 5]  156 	lda	0x105,x
   00A5 08            [ 3]  157 	php
   00A6 A6*00         [ 3]  158 	ldx	*(__TEMP+0)
   00A8 28            [ 4]  159 	plp
   00A9 20r00r00      [ 6]  160 	jsr	___memcpy
   00AC 85*00         [ 3]  161 	sta	*(__TEMP+0)
   00AE 68            [ 4]  162 	pla
   00AF 68            [ 4]  163 	pla
   00B0 68            [ 4]  164 	pla
   00B1 68            [ 4]  165 	pla
   00B2 A5*00         [ 3]  166 	lda	*(__TEMP+0)
                            167 ;	../strndup.c: 42: r[l] = 0;
   00B4 BA            [ 2]  168 	tsx
   00B5 BD 05 01      [ 5]  169 	lda	0x105,x
   00B8 18            [ 2]  170 	clc
   00B9 7D 07 01      [ 5]  171 	adc	0x107,x
   00BC 48            [ 3]  172 	pha
   00BD BD 06 01      [ 5]  173 	lda	0x106,x
   00C0 7D 08 01      [ 5]  174 	adc	0x108,x
   00C3 AA            [ 2]  175 	tax
   00C4 68            [ 4]  176 	pla
   00C5 85*00         [ 3]  177 	sta	*(__DPTR+0)
   00C7 86*01         [ 3]  178 	stx	*(__DPTR+1)
   00C9 A9 00         [ 2]  179 	lda	#0x00
   00CB A8            [ 2]  180 	tay
   00CC 91*00         [ 6]  181 	sta	[__DPTR],y
   00CE                     182 00104$:
                            183 ;	../strndup.c: 44: return (r);
   00CE BA            [ 2]  184 	tsx
   00CF BD 06 01      [ 5]  185 	lda	0x106,x
   00D2 AA            [ 2]  186 	tax
   00D3 86*00         [ 3]  187 	stx	*(__TEMP+0)
   00D5 BA            [ 2]  188 	tsx
   00D6 BD 05 01      [ 5]  189 	lda	0x105,x
   00D9 08            [ 3]  190 	php
   00DA A6*00         [ 3]  191 	ldx	*(__TEMP+0)
   00DC 28            [ 4]  192 	plp
                            193 ;	../strndup.c: 45: }
   00DD 85*00         [ 3]  194 	sta	*(__TEMP+0)
   00DF 86*01         [ 3]  195 	stx	*(__TEMP+1)
   00E1 BA            [ 2]  196 	tsx
   00E2 8A            [ 2]  197 	txa
   00E3 18            [ 2]  198 	clc
   00E4 69 0A         [ 2]  199 	adc	#0x0a
   00E6 AA            [ 2]  200 	tax
   00E7 9A            [ 2]  201 	txs
   00E8 A6*01         [ 3]  202 	ldx	*(__TEMP+1)
   00EA A5*00         [ 3]  203 	lda	*(__TEMP+0)
   00EC 60            [ 6]  204 	rts
                            205 	.area CODE
                            206 	.area RODATA
                            207 	.area XINIT
                            208 	.area CABS    (ABS)
