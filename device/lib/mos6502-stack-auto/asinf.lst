                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module asinf
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _asincosf
                             12 	.globl _asinf
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'asinf'
                             50 ;------------------------------------------------------------
                             51 ;x                         Allocated to stack - sp +7
                             52 ;sloc0                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../asinf.c: 36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             55 ;	-----------------------------------------
                             56 ;	 function asinf
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 4 bytes.
   0000                      60 _asinf:
   0000 48            [ 3]   61 	pha
   0001 48            [ 3]   62 	pha
   0002 48            [ 3]   63 	pha
   0003 48            [ 3]   64 	pha
                             65 ;	../asinf.c: 38: if (x == 1.0) return  HALF_PI;
   0004 A9 3F         [ 2]   66 	lda	#0x3f
   0006 48            [ 3]   67 	pha
   0007 A9 80         [ 2]   68 	lda	#0x80
   0009 48            [ 3]   69 	pha
   000A A9 00         [ 2]   70 	lda	#0x00
   000C 48            [ 3]   71 	pha
   000D 48            [ 3]   72 	pha
   000E BA            [ 2]   73 	tsx
   000F BD 0E 01      [ 5]   74 	lda	0x10e,x
   0012 48            [ 3]   75 	pha
   0013 BD 0D 01      [ 5]   76 	lda	0x10d,x
   0016 48            [ 3]   77 	pha
   0017 BD 0C 01      [ 5]   78 	lda	0x10c,x
   001A 48            [ 3]   79 	pha
   001B BD 0B 01      [ 5]   80 	lda	0x10b,x
   001E 48            [ 3]   81 	pha
   001F 20r00r00      [ 6]   82 	jsr	___fseq
   0022 85*00         [ 3]   83 	sta	*(__TEMP+0)
   0024 86*01         [ 3]   84 	stx	*(__TEMP+1)
   0026 BA            [ 2]   85 	tsx
   0027 8A            [ 2]   86 	txa
   0028 18            [ 2]   87 	clc
   0029 69 08         [ 2]   88 	adc	#0x08
   002B AA            [ 2]   89 	tax
   002C 9A            [ 2]   90 	txs
   002D A6*01         [ 3]   91 	ldx	*(__TEMP+1)
   002F A5*00         [ 3]   92 	lda	*(__TEMP+0)
   0031 F0 0F         [ 4]   93 	beq	00108$
   0033 A9 DB         [ 2]   94 	lda	#0xdb
   0035 A2 0F         [ 2]   95 	ldx	#0x0f
   0037 A0 C9         [ 2]   96 	ldy	#0xc9
   0039 84*00         [ 3]   97 	sty	*___SDCC_m6502_ret2
   003B A0 3F         [ 2]   98 	ldy	#0x3f
   003D 84*00         [ 3]   99 	sty	*___SDCC_m6502_ret3
   003F 4CrEBr00      [ 3]  100 	jmp	00110$
   0042                     101 00108$:
                            102 ;	../asinf.c: 39: else if (x ==-1.0) return -HALF_PI;
   0042 A9 BF         [ 2]  103 	lda	#0xbf
   0044 48            [ 3]  104 	pha
   0045 A9 80         [ 2]  105 	lda	#0x80
   0047 48            [ 3]  106 	pha
   0048 A9 00         [ 2]  107 	lda	#0x00
   004A 48            [ 3]  108 	pha
   004B 48            [ 3]  109 	pha
   004C BA            [ 2]  110 	tsx
   004D BD 0E 01      [ 5]  111 	lda	0x10e,x
   0050 48            [ 3]  112 	pha
   0051 BD 0D 01      [ 5]  113 	lda	0x10d,x
   0054 48            [ 3]  114 	pha
   0055 BD 0C 01      [ 5]  115 	lda	0x10c,x
   0058 48            [ 3]  116 	pha
   0059 BD 0B 01      [ 5]  117 	lda	0x10b,x
   005C 48            [ 3]  118 	pha
   005D 20r00r00      [ 6]  119 	jsr	___fseq
   0060 85*00         [ 3]  120 	sta	*(__TEMP+0)
   0062 86*01         [ 3]  121 	stx	*(__TEMP+1)
   0064 BA            [ 2]  122 	tsx
   0065 8A            [ 2]  123 	txa
   0066 18            [ 2]  124 	clc
   0067 69 08         [ 2]  125 	adc	#0x08
   0069 AA            [ 2]  126 	tax
   006A 9A            [ 2]  127 	txs
   006B A6*01         [ 3]  128 	ldx	*(__TEMP+1)
   006D A5*00         [ 3]  129 	lda	*(__TEMP+0)
   006F F0 0F         [ 4]  130 	beq	00105$
   0071 A9 DB         [ 2]  131 	lda	#0xdb
   0073 A2 0F         [ 2]  132 	ldx	#0x0f
   0075 A0 C9         [ 2]  133 	ldy	#0xc9
   0077 84*00         [ 3]  134 	sty	*___SDCC_m6502_ret2
   0079 A0 BF         [ 2]  135 	ldy	#0xbf
   007B 84*00         [ 3]  136 	sty	*___SDCC_m6502_ret3
   007D 4CrEBr00      [ 3]  137 	jmp	00110$
   0080                     138 00105$:
                            139 ;	../asinf.c: 40: else if (x == 0.0) return 0.0;
   0080 BA            [ 2]  140 	tsx
   0081 BD 0A 01      [ 5]  141 	lda	0x10a,x
   0084 29 7F         [ 2]  142 	and	#0x7F
   0086 1D 09 01      [ 5]  143 	ora	0x109,x
   0089 1D 08 01      [ 5]  144 	ora	0x108,x
   008C 1D 07 01      [ 5]  145 	ora	0x107,x
   008F D0 0A         [ 4]  146 	bne	00102$
   0091 A9 00         [ 2]  147 	lda	#0x00
   0093 AA            [ 2]  148 	tax
   0094 85*00         [ 3]  149 	sta	*___SDCC_m6502_ret2
   0096 85*00         [ 3]  150 	sta	*___SDCC_m6502_ret3
   0098 4CrEBr00      [ 3]  151 	jmp	00110$
   009B                     152 00102$:
                            153 ;	../asinf.c: 41: else               return asincosf(x, false);
   009B A9 00         [ 2]  154 	lda	#0x00
   009D 48            [ 3]  155 	pha
   009E BA            [ 2]  156 	tsx
   009F BD 0B 01      [ 5]  157 	lda	0x10b,x
   00A2 48            [ 3]  158 	pha
   00A3 BD 0A 01      [ 5]  159 	lda	0x10a,x
   00A6 48            [ 3]  160 	pha
   00A7 BD 09 01      [ 5]  161 	lda	0x109,x
   00AA 48            [ 3]  162 	pha
   00AB BD 08 01      [ 5]  163 	lda	0x108,x
   00AE 48            [ 3]  164 	pha
   00AF 20r00r00      [ 6]  165 	jsr	_asincosf
   00B2 86*00         [ 3]  166 	stx	*(__TEMP+0)
   00B4 BA            [ 2]  167 	tsx
   00B5 9D 06 01      [ 5]  168 	sta	0x106,x
   00B8 A6*00         [ 3]  169 	ldx	*(__TEMP+0)
   00BA 8A            [ 2]  170 	txa
   00BB BA            [ 2]  171 	tsx
   00BC 9D 07 01      [ 5]  172 	sta	0x107,x
   00BF A6*00         [ 3]  173 	ldx	*(__TEMP+0)
   00C1 A5*00         [ 3]  174 	lda	*___SDCC_m6502_ret2
   00C3 BA            [ 2]  175 	tsx
   00C4 9D 08 01      [ 5]  176 	sta	0x108,x
   00C7 A5*00         [ 3]  177 	lda	*___SDCC_m6502_ret3
   00C9 9D 09 01      [ 5]  178 	sta	0x109,x
   00CC 85*00         [ 3]  179 	sta	*(__TEMP+0)
   00CE 68            [ 4]  180 	pla
   00CF 68            [ 4]  181 	pla
   00D0 68            [ 4]  182 	pla
   00D1 68            [ 4]  183 	pla
   00D2 68            [ 4]  184 	pla
   00D3 BD 09 01      [ 5]  185 	lda	0x109, x
   00D6 85*00         [ 3]  186 	sta	*___SDCC_m6502_ret3
   00D8 BD 08 01      [ 5]  187 	lda	0x108,x
   00DB 85*00         [ 3]  188 	sta	*___SDCC_m6502_ret2
   00DD BD 07 01      [ 5]  189 	lda	0x107,x
   00E0 AA            [ 2]  190 	tax
   00E1 86*00         [ 3]  191 	stx	*(__TEMP+0)
   00E3 BA            [ 2]  192 	tsx
   00E4 BD 01 01      [ 5]  193 	lda	0x101,x
   00E7 08            [ 3]  194 	php
   00E8 A6*00         [ 3]  195 	ldx	*(__TEMP+0)
   00EA 28            [ 4]  196 	plp
   00EB                     197 00110$:
                            198 ;	../asinf.c: 42: }
   00EB 85*00         [ 3]  199 	sta	*(__TEMP+0)
   00ED 68            [ 4]  200 	pla
   00EE 68            [ 4]  201 	pla
   00EF 68            [ 4]  202 	pla
   00F0 68            [ 4]  203 	pla
   00F1 A5*00         [ 3]  204 	lda	*(__TEMP+0)
   00F3 60            [ 6]  205 	rts
                            206 	.area CODE
                            207 	.area RODATA
                            208 	.area XINIT
                            209 	.area CABS    (ABS)
