                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module call_once
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _call_once
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'call_once'
                             49 ;------------------------------------------------------------
                             50 ;func                      Allocated to stack - sp +3
                             51 ;flag                      Allocated to registers a x 
                             52 ;------------------------------------------------------------
                             53 ;	../call_once.c: 36: void call_once(_Bool *flag, void (*func)(void))
                             54 ;	-----------------------------------------
                             55 ;	 function call_once
                             56 ;	-----------------------------------------
                             57 ;	Register assignment is optimal.
                             58 ;	Stack space usage: 0 bytes.
   0000                      59 _call_once:
                             60 ;	../call_once.c: 38: if (!*flag)
   0000 85*00         [ 3]   61 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   62 	stx	*(__TEMP+1)
   0004 85*00         [ 3]   63 	sta	*(__DPTR+0)
   0006 86*01         [ 3]   64 	stx	*(__DPTR+1)
   0008 A0 00         [ 2]   65 	ldy	#0x00
   000A B1*00         [ 6]   66 	lda	[__DPTR],y
   000C A8            [ 2]   67 	tay
   000D A6*01         [ 3]   68 	ldx	*(__TEMP+1)
   000F A5*00         [ 3]   69 	lda	*(__TEMP+0)
   0011 C0 00         [ 2]   70 	cpy	#0x00
   0013 D0 28         [ 4]   71 	bne	00103$
                             72 ;	../call_once.c: 40: func();
   0015 48            [ 3]   73 	pha
   0016 85*00         [ 3]   74 	sta	*(__TEMP+0)
   0018 8A            [ 2]   75 	txa
   0019 48            [ 3]   76 	pha
   001A A5*00         [ 3]   77 	lda	*(__TEMP+0)
   001C 48            [ 3]   78 	pha
   001D 8A            [ 2]   79 	txa
   001E 48            [ 3]   80 	pha
   001F BA            [ 2]   81 	tsx
   0020 BD 07 01      [ 5]   82 	lda	0x107,x
   0023 85*00         [ 3]   83 	sta	*(__TEMP+0)
   0025 BD 08 01      [ 5]   84 	lda	0x108,x
   0028 85*01         [ 3]   85 	sta	*(__TEMP+1)
   002A 68            [ 4]   86 	pla
   002B AA            [ 2]   87 	tax
   002C 68            [ 4]   88 	pla
   002D 20r00r00      [ 6]   89 	jsr	__sdcc_indirect_jsr
   0030 68            [ 4]   90 	pla
   0031 AA            [ 2]   91 	tax
   0032 68            [ 4]   92 	pla
                             93 ;	../call_once.c: 41: *flag = true;
   0033 85*00         [ 3]   94 	sta	*(__DPTR+0)
   0035 86*01         [ 3]   95 	stx	*(__DPTR+1)
   0037 A9 01         [ 2]   96 	lda	#0x01
   0039 A0 00         [ 2]   97 	ldy	#0x00
   003B 91*00         [ 6]   98 	sta	[__DPTR],y
   003D                      99 00103$:
                            100 ;	../call_once.c: 43: }
   003D 60            [ 6]  101 	rts
                            102 	.area CODE
                            103 	.area RODATA
                            104 	.area XINIT
                            105 	.area CABS    (ABS)
