                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strstr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strstr
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'strstr'
                             49 ;------------------------------------------------------------
                             50 ;str2                      Allocated to stack - sp +19
                             51 ;str1                      Allocated to stack - sp +15
                             52 ;cp                        Allocated to stack - sp +13
                             53 ;s1                        Allocated to stack - sp +11
                             54 ;s2                        Allocated to stack - sp +9
                             55 ;sloc0                     Allocated to stack - sp +7
                             56 ;sloc1                     Allocated to stack - sp +5
                             57 ;sloc2                     Allocated to stack - sp +3
                             58 ;sloc3                     Allocated to stack - sp +1
                             59 ;------------------------------------------------------------
                             60 ;	../_strstr.c: 31: char *strstr ( const char *str1, const char *str2 )
                             61 ;	-----------------------------------------
                             62 ;	 function strstr
                             63 ;	-----------------------------------------
                             64 ;	Register assignment is optimal.
                             65 ;	Stack space usage: 16 bytes.
   0000                      66 _strstr:
   0000 85*00         [ 3]   67 	sta	*(__TEMP+0)
   0002 8A            [ 2]   68 	txa
   0003 48            [ 3]   69 	pha
   0004 A5*00         [ 3]   70 	lda	*(__TEMP+0)
   0006 48            [ 3]   71 	pha
   0007 86*01         [ 3]   72 	stx	*(__TEMP+1)
   0009 BA            [ 2]   73 	tsx
   000A 8A            [ 2]   74 	txa
   000B 18            [ 2]   75 	clc
   000C 69 F2         [ 2]   76 	adc	#0xf2
   000E AA            [ 2]   77 	tax
   000F 9A            [ 2]   78 	txs
   0010 A6*01         [ 3]   79 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   80 	lda	*(__TEMP+0)
                             81 ;	../_strstr.c: 33: const char *cp = str1;
   0014 BA            [ 2]   82 	tsx
   0015 BD 0F 01      [ 5]   83 	lda	0x10f,x
   0018 9D 0D 01      [ 5]   84 	sta	0x10d,x
   001B BD 10 01      [ 5]   85 	lda	0x110,x
   001E 9D 0E 01      [ 5]   86 	sta	0x10e,x
                             87 ;	../_strstr.c: 37: if (!*str2)
   0021 BD 13 01      [ 5]   88 	lda	0x113,x
   0024 9D 09 01      [ 5]   89 	sta	0x109,x
   0027 BD 14 01      [ 5]   90 	lda	0x114,x
   002A 9D 0A 01      [ 5]   91 	sta	0x10a,x
   002D BD 09 01      [ 5]   92 	lda	0x109,x
   0030 85*00         [ 3]   93 	sta	*(__DPTR+0)
   0032 BD 0A 01      [ 5]   94 	lda	0x10a,x
   0035 85*01         [ 3]   95 	sta	*(__DPTR+1)
   0037 A0 00         [ 2]   96 	ldy	#0x00
   0039 B1*00         [ 6]   97 	lda	[__DPTR],y
   003B D0 11         [ 4]   98 	bne	00122$
                             99 ;	../_strstr.c: 38: return ((char*)str1);
   003D BD 10 01      [ 5]  100 	lda	0x110,x
   0040 AA            [ 2]  101 	tax
   0041 86*00         [ 3]  102 	stx	*(__TEMP+0)
   0043 BA            [ 2]  103 	tsx
   0044 BD 0F 01      [ 5]  104 	lda	0x10f,x
   0047 08            [ 3]  105 	php
   0048 A6*00         [ 3]  106 	ldx	*(__TEMP+0)
   004A 28            [ 4]  107 	plp
   004B 4Cr42r01      [ 3]  108 	jmp	00113$
                            109 ;	../_strstr.c: 40: while (*cp)
   004E                     110 00122$:
   004E BA            [ 2]  111 	tsx
   004F BD 0F 01      [ 5]  112 	lda	0x10f,x
   0052 9D 0B 01      [ 5]  113 	sta	0x10b,x
   0055 BD 10 01      [ 5]  114 	lda	0x110,x
   0058 9D 0C 01      [ 5]  115 	sta	0x10c,x
   005B                     116 00110$:
   005B BA            [ 2]  117 	tsx
   005C BD 0B 01      [ 5]  118 	lda	0x10b,x
   005F 85*00         [ 3]  119 	sta	*(__DPTR+0)
   0061 BD 0C 01      [ 5]  120 	lda	0x10c,x
   0064 85*01         [ 3]  121 	sta	*(__DPTR+1)
   0066 A0 00         [ 2]  122 	ldy	#0x00
   0068 B1*00         [ 6]  123 	lda	[__DPTR],y
   006A D0 03         [ 4]  124 	bne	00149$
   006C 4Cr3Fr01      [ 3]  125 	jmp	00112$
   006F                     126 00149$:
                            127 ;	../_strstr.c: 43: s2 = str2;
   006F BD 09 01      [ 5]  128 	lda	0x109,x
   0072 9D 07 01      [ 5]  129 	sta	0x107,x
   0075 BD 0A 01      [ 5]  130 	lda	0x10a,x
   0078 9D 08 01      [ 5]  131 	sta	0x108,x
                            132 ;	../_strstr.c: 45: while (*s1 && *s2 && !(*s1-*s2))
   007B BD 0B 01      [ 5]  133 	lda	0x10b,x
   007E 9D 05 01      [ 5]  134 	sta	0x105,x
   0081 BD 0C 01      [ 5]  135 	lda	0x10c,x
   0084 9D 06 01      [ 5]  136 	sta	0x106,x
   0087                     137 00105$:
   0087 BA            [ 2]  138 	tsx
   0088 BD 05 01      [ 5]  139 	lda	0x105,x
   008B 85*00         [ 3]  140 	sta	*(__DPTR+0)
   008D BD 06 01      [ 5]  141 	lda	0x106,x
   0090 85*01         [ 3]  142 	sta	*(__DPTR+1)
   0092 A0 00         [ 2]  143 	ldy	#0x00
   0094 B1*00         [ 6]  144 	lda	[__DPTR],y
   0096 F0 64         [ 4]  145 	beq	00107$
   0098 85*00         [ 3]  146 	sta	*(__TEMP+0)
   009A BD 07 01      [ 5]  147 	lda	0x107,x
   009D 85*00         [ 3]  148 	sta	*(__DPTR+0)
   009F BD 08 01      [ 5]  149 	lda	0x108,x
   00A2 85*01         [ 3]  150 	sta	*(__DPTR+1)
   00A4 B1*00         [ 6]  151 	lda	[__DPTR],y
   00A6 A8            [ 2]  152 	tay
   00A7 A5*00         [ 3]  153 	lda	*(__TEMP+0)
   00A9 C0 00         [ 2]  154 	cpy	#0x00
   00AB F0 4F         [ 4]  155 	beq	00107$
   00AD 9D 03 01      [ 5]  156 	sta	0x103,x
   00B0 48            [ 3]  157 	pha
   00B1 A9 00         [ 2]  158 	lda	#0x00
   00B3 9D 04 01      [ 5]  159 	sta	0x104,x
   00B6 68            [ 4]  160 	pla
   00B7 98            [ 2]  161 	tya
   00B8 9D 01 01      [ 5]  162 	sta	0x101,x
   00BB A9 00         [ 2]  163 	lda	#0x00
   00BD 9D 02 01      [ 5]  164 	sta	0x102,x
   00C0 BD 03 01      [ 5]  165 	lda	0x103,x
   00C3 38            [ 2]  166 	sec
   00C4 FD 01 01      [ 5]  167 	sbc	0x101,x
   00C7 48            [ 3]  168 	pha
   00C8 BD 04 01      [ 5]  169 	lda	0x104,x
   00CB FD 02 01      [ 5]  170 	sbc	0x102,x
   00CE AA            [ 2]  171 	tax
   00CF 68            [ 4]  172 	pla
   00D0 D0 02         [ 4]  173 	bne	00152$
   00D2 E0 00         [ 2]  174 	cpx	#0x00
   00D4                     175 00152$:
   00D4 D0 26         [ 4]  176 	bne	00107$
                            177 ;	../_strstr.c: 46: s1++, s2++;
   00D6 BA            [ 2]  178 	tsx
   00D7 BD 05 01      [ 5]  179 	lda	0x105,x
   00DA 18            [ 2]  180 	clc
   00DB 69 01         [ 2]  181 	adc	#0x01
   00DD 9D 05 01      [ 5]  182 	sta	0x105,x
   00E0 BD 06 01      [ 5]  183 	lda	0x106,x
   00E3 69 00         [ 2]  184 	adc	#0x00
   00E5 9D 06 01      [ 5]  185 	sta	0x106,x
   00E8 BD 07 01      [ 5]  186 	lda	0x107,x
   00EB 18            [ 2]  187 	clc
   00EC 69 01         [ 2]  188 	adc	#0x01
   00EE 9D 07 01      [ 5]  189 	sta	0x107,x
   00F1 BD 08 01      [ 5]  190 	lda	0x108,x
   00F4 69 00         [ 2]  191 	adc	#0x00
   00F6 9D 08 01      [ 5]  192 	sta	0x108,x
   00F9 4Cr87r00      [ 3]  193 	jmp	00105$
   00FC                     194 00107$:
                            195 ;	../_strstr.c: 48: if (!*s2)
   00FC BA            [ 2]  196 	tsx
   00FD BD 07 01      [ 5]  197 	lda	0x107,x
   0100 85*00         [ 3]  198 	sta	*(__DPTR+0)
   0102 BD 08 01      [ 5]  199 	lda	0x108,x
   0105 85*01         [ 3]  200 	sta	*(__DPTR+1)
   0107 A0 00         [ 2]  201 	ldy	#0x00
   0109 B1*00         [ 6]  202 	lda	[__DPTR],y
   010B D0 11         [ 4]  203 	bne	00109$
                            204 ;	../_strstr.c: 49: return ((char*)cp);
   010D BD 0E 01      [ 5]  205 	lda	0x10e,x
   0110 AA            [ 2]  206 	tax
   0111 86*00         [ 3]  207 	stx	*(__TEMP+0)
   0113 BA            [ 2]  208 	tsx
   0114 BD 0D 01      [ 5]  209 	lda	0x10d,x
   0117 08            [ 3]  210 	php
   0118 A6*00         [ 3]  211 	ldx	*(__TEMP+0)
   011A 28            [ 4]  212 	plp
   011B 4Cr42r01      [ 3]  213 	jmp	00113$
   011E                     214 00109$:
                            215 ;	../_strstr.c: 51: cp++;
   011E BA            [ 2]  216 	tsx
   011F BD 0B 01      [ 5]  217 	lda	0x10b,x
   0122 18            [ 2]  218 	clc
   0123 69 01         [ 2]  219 	adc	#0x01
   0125 9D 0B 01      [ 5]  220 	sta	0x10b,x
   0128 BD 0C 01      [ 5]  221 	lda	0x10c,x
   012B 69 00         [ 2]  222 	adc	#0x00
   012D 9D 0C 01      [ 5]  223 	sta	0x10c,x
   0130 BD 0B 01      [ 5]  224 	lda	0x10b,x
   0133 9D 0D 01      [ 5]  225 	sta	0x10d,x
   0136 BD 0C 01      [ 5]  226 	lda	0x10c,x
   0139 9D 0E 01      [ 5]  227 	sta	0x10e,x
   013C 4Cr5Br00      [ 3]  228 	jmp	00110$
   013F                     229 00112$:
                            230 ;	../_strstr.c: 54: return (NULL) ;
   013F A9 00         [ 2]  231 	lda	#0x00
   0141 AA            [ 2]  232 	tax
   0142                     233 00113$:
                            234 ;	../_strstr.c: 55: }
   0142 85*00         [ 3]  235 	sta	*(__TEMP+0)
   0144 86*01         [ 3]  236 	stx	*(__TEMP+1)
   0146 BA            [ 2]  237 	tsx
   0147 8A            [ 2]  238 	txa
   0148 18            [ 2]  239 	clc
   0149 69 10         [ 2]  240 	adc	#0x10
   014B AA            [ 2]  241 	tax
   014C 9A            [ 2]  242 	txs
   014D A6*01         [ 3]  243 	ldx	*(__TEMP+1)
   014F A5*00         [ 3]  244 	lda	*(__TEMP+0)
   0151 60            [ 6]  245 	rts
                            246 	.area CODE
                            247 	.area RODATA
                            248 	.area XINIT
                            249 	.area CABS    (ABS)
