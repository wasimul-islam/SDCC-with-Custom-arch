                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module atol
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _atol
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'atol'
                             49 ;------------------------------------------------------------
                             50 ;nptr                      Allocated to stack - sp +17
                             51 ;__1310720007              Allocated to registers 
                             52 ;__1310720004              Allocated to registers 
                             53 ;ret                       Allocated to stack - sp +1
                             54 ;neg                       Allocated to stack - sp +16
                             55 ;__1310720005              Allocated to registers 
                             56 ;c                         Allocated to registers 
                             57 ;__1310720008              Allocated to registers 
                             58 ;c                         Allocated to registers 
                             59 ;sloc0                     Allocated to stack - sp +14
                             60 ;sloc1                     Allocated to stack - sp +13
                             61 ;sloc2                     Allocated to stack - sp +9
                             62 ;sloc3                     Allocated to stack - sp +5
                             63 ;------------------------------------------------------------
                             64 ;	../atol.c: 34: long int atol(const char *nptr)
                             65 ;	-----------------------------------------
                             66 ;	 function atol
                             67 ;	-----------------------------------------
                             68 ;	Register assignment is optimal.
                             69 ;	Stack space usage: 18 bytes.
   0000                      70 _atol:
   0000 85*00         [ 3]   71 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   72 	stx	*(__TEMP+1)
   0004 BA            [ 2]   73 	tsx
   0005 8A            [ 2]   74 	txa
   0006 18            [ 2]   75 	clc
   0007 69 EE         [ 2]   76 	adc	#0xee
   0009 AA            [ 2]   77 	tax
   000A 9A            [ 2]   78 	txs
   000B A6*01         [ 3]   79 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   80 	lda	*(__TEMP+0)
   000F 86*00         [ 3]   81 	stx	*(__TEMP+0)
   0011 BA            [ 2]   82 	tsx
   0012 9D 0E 01      [ 5]   83 	sta	0x10e,x
   0015 A6*00         [ 3]   84 	ldx	*(__TEMP+0)
   0017 8A            [ 2]   85 	txa
   0018 BA            [ 2]   86 	tsx
   0019 9D 0F 01      [ 5]   87 	sta	0x10f,x
                             88 ;	../atol.c: 36: long int ret = 0;
   001C BA            [ 2]   89 	tsx
   001D A9 00         [ 2]   90 	lda	#0x00
   001F 9D 01 01      [ 5]   91 	sta	0x101,x
   0022 9D 02 01      [ 5]   92 	sta	0x102,x
   0025 9D 03 01      [ 5]   93 	sta	0x103,x
   0028 9D 04 01      [ 5]   94 	sta	0x104,x
                             95 ;	../atol.c: 39: while (isblank (*nptr))
   002B                      96 00101$:
   002B BA            [ 2]   97 	tsx
   002C BD 0E 01      [ 5]   98 	lda	0x10e,x
   002F 85*00         [ 3]   99 	sta	*(__DPTR+0)
   0031 BD 0F 01      [ 5]  100 	lda	0x10f,x
   0034 85*01         [ 3]  101 	sta	*(__DPTR+1)
   0036 A0 00         [ 2]  102 	ldy	#0x00
   0038 B1*00         [ 6]  103 	lda	[__DPTR],y
                            104 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   003A C9 20         [ 2]  105 	cmp	#0x20
   003C F0 04         [ 4]  106 	beq	00115$
   003E C9 09         [ 2]  107 	cmp	#0x09
   0040 D0 15         [ 4]  108 	bne	00131$
   0042                     109 00115$:
                            110 ;	../atol.c: 40: nptr++;
   0042 BA            [ 2]  111 	tsx
   0043 BD 0E 01      [ 5]  112 	lda	0x10e,x
   0046 18            [ 2]  113 	clc
   0047 69 01         [ 2]  114 	adc	#0x01
   0049 9D 0E 01      [ 5]  115 	sta	0x10e,x
   004C BD 0F 01      [ 5]  116 	lda	0x10f,x
   004F 69 00         [ 2]  117 	adc	#0x00
   0051 9D 0F 01      [ 5]  118 	sta	0x10f,x
   0054 4Cr2Br00      [ 3]  119 	jmp	00101$
   0057                     120 00131$:
   0057 BA            [ 2]  121 	tsx
   0058 BD 0E 01      [ 5]  122 	lda	0x10e,x
   005B 9D 11 01      [ 5]  123 	sta	0x111,x
   005E BD 0F 01      [ 5]  124 	lda	0x10f,x
   0061 9D 12 01      [ 5]  125 	sta	0x112,x
                            126 ;	../atol.c: 42: neg = (*nptr == '-');
   0064 BD 0E 01      [ 5]  127 	lda	0x10e,x
   0067 85*00         [ 3]  128 	sta	*(__DPTR+0)
   0069 BD 0F 01      [ 5]  129 	lda	0x10f,x
   006C 85*01         [ 3]  130 	sta	*(__DPTR+1)
   006E A0 00         [ 2]  131 	ldy	#0x00
   0070 B1*00         [ 6]  132 	lda	[__DPTR],y
   0072 A8            [ 2]  133 	tay
   0073 C0 2D         [ 2]  134 	cpy	#0x2d
   0075 F0 05         [ 4]  135 	beq	00164$
   0077 A9 00         [ 2]  136 	lda	#0x00
   0079 4Cr7Er00      [ 3]  137 	jmp	00163$
   007C                     138 00164$:
   007C A9 01         [ 2]  139 	lda	#0x01
   007E                     140 00163$:
   007E 9D 10 01      [ 5]  141 	sta	0x110,x
                            142 ;	../atol.c: 44: if (*nptr == '-' || *nptr == '+')
   0081 C0 2D         [ 2]  143 	cpy	#0x2d
   0083 F0 04         [ 4]  144 	beq	00104$
   0085 C0 2B         [ 2]  145 	cpy	#0x2b
   0087 D0 12         [ 4]  146 	bne	00129$
   0089                     147 00104$:
                            148 ;	../atol.c: 45: nptr++;
   0089 BA            [ 2]  149 	tsx
   008A BD 11 01      [ 5]  150 	lda	0x111,x
   008D 18            [ 2]  151 	clc
   008E 69 01         [ 2]  152 	adc	#0x01
   0090 9D 11 01      [ 5]  153 	sta	0x111,x
   0093 BD 12 01      [ 5]  154 	lda	0x112,x
   0096 69 00         [ 2]  155 	adc	#0x00
   0098 9D 12 01      [ 5]  156 	sta	0x112,x
                            157 ;	../atol.c: 47: while (isdigit (*nptr))
   009B                     158 00129$:
   009B BA            [ 2]  159 	tsx
   009C BD 11 01      [ 5]  160 	lda	0x111,x
   009F 9D 0E 01      [ 5]  161 	sta	0x10e,x
   00A2 BD 12 01      [ 5]  162 	lda	0x112,x
   00A5 9D 0F 01      [ 5]  163 	sta	0x10f,x
   00A8                     164 00107$:
   00A8 BA            [ 2]  165 	tsx
   00A9 BD 0E 01      [ 5]  166 	lda	0x10e,x
   00AC 85*00         [ 3]  167 	sta	*(__DPTR+0)
   00AE BD 0F 01      [ 5]  168 	lda	0x10f,x
   00B1 85*01         [ 3]  169 	sta	*(__DPTR+1)
   00B3 A0 00         [ 2]  170 	ldy	#0x00
   00B5 B1*00         [ 6]  171 	lda	[__DPTR],y
                            172 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
   00B7 C9 30         [ 2]  173 	cmp	#0x30
   00B9 B0 03         [ 4]  174 	bcs	00167$
   00BB 4Cr76r01      [ 3]  175 	jmp	00109$
   00BE                     176 00167$:
   00BE C9 39         [ 2]  177 	cmp	#0x39
   00C0 F0 05         [ 4]  178 	beq	00168$
   00C2 90 03         [ 4]  179 	bcc	00168$
   00C4 4Cr76r01      [ 3]  180 	jmp	00109$
   00C7                     181 00168$:
                            182 ;	../atol.c: 48: ret = ret * 10 + (*(nptr++) - '0');
   00C7 BD 04 01      [ 5]  183 	lda	0x104,x
   00CA 48            [ 3]  184 	pha
   00CB BD 03 01      [ 5]  185 	lda	0x103,x
   00CE 48            [ 3]  186 	pha
   00CF BD 02 01      [ 5]  187 	lda	0x102,x
   00D2 48            [ 3]  188 	pha
   00D3 BD 01 01      [ 5]  189 	lda	0x101,x
   00D6 48            [ 3]  190 	pha
   00D7 98            [ 2]  191 	tya
   00D8 48            [ 3]  192 	pha
   00D9 48            [ 3]  193 	pha
   00DA 48            [ 3]  194 	pha
   00DB A9 0A         [ 2]  195 	lda	#0x0a
   00DD 48            [ 3]  196 	pha
   00DE 20r00r00      [ 6]  197 	jsr	__mullong
   00E1 86*00         [ 3]  198 	stx	*(__TEMP+0)
   00E3 BA            [ 2]  199 	tsx
   00E4 9D 11 01      [ 5]  200 	sta	0x111,x
   00E7 A6*00         [ 3]  201 	ldx	*(__TEMP+0)
   00E9 8A            [ 2]  202 	txa
   00EA BA            [ 2]  203 	tsx
   00EB 9D 12 01      [ 5]  204 	sta	0x112,x
   00EE A6*00         [ 3]  205 	ldx	*(__TEMP+0)
   00F0 A5*00         [ 3]  206 	lda	*___SDCC_m6502_ret2
   00F2 BA            [ 2]  207 	tsx
   00F3 9D 13 01      [ 5]  208 	sta	0x113,x
   00F6 A5*00         [ 3]  209 	lda	*___SDCC_m6502_ret3
   00F8 9D 14 01      [ 5]  210 	sta	0x114,x
   00FB 85*00         [ 3]  211 	sta	*(__TEMP+0)
   00FD 86*01         [ 3]  212 	stx	*(__TEMP+1)
   00FF BA            [ 2]  213 	tsx
   0100 8A            [ 2]  214 	txa
   0101 18            [ 2]  215 	clc
   0102 69 08         [ 2]  216 	adc	#0x08
   0104 AA            [ 2]  217 	tax
   0105 9A            [ 2]  218 	txs
   0106 A6*01         [ 3]  219 	ldx	*(__TEMP+1)
   0108 A5*00         [ 3]  220 	lda	*(__TEMP+0)
   010A BA            [ 2]  221 	tsx
   010B BD 0E 01      [ 5]  222 	lda	0x10e,x
   010E 85*00         [ 3]  223 	sta	*(__DPTR+0)
   0110 BD 0F 01      [ 5]  224 	lda	0x10f,x
   0113 85*01         [ 3]  225 	sta	*(__DPTR+1)
   0115 A0 00         [ 2]  226 	ldy	#0x00
   0117 B1*00         [ 6]  227 	lda	[__DPTR],y
   0119 A8            [ 2]  228 	tay
   011A BD 0E 01      [ 5]  229 	lda	0x10e,x
   011D 18            [ 2]  230 	clc
   011E 69 01         [ 2]  231 	adc	#0x01
   0120 9D 0E 01      [ 5]  232 	sta	0x10e,x
   0123 BD 0F 01      [ 5]  233 	lda	0x10f,x
   0126 69 00         [ 2]  234 	adc	#0x00
   0128 9D 0F 01      [ 5]  235 	sta	0x10f,x
   012B 98            [ 2]  236 	tya
   012C A2 00         [ 2]  237 	ldx	#0x00
   012E 38            [ 2]  238 	sec
   012F E9 30         [ 2]  239 	sbc	#0x30
   0131 B0 01         [ 4]  240 	bcs	00170$
   0133 CA            [ 2]  241 	dex
   0134                     242 00170$:
   0134 48            [ 3]  243 	pha
   0135 8A            [ 2]  244 	txa
   0136 BA            [ 2]  245 	tsx
   0137 9D 07 01      [ 5]  246 	sta	0x107,x
   013A 68            [ 4]  247 	pla
   013B 9D 06 01      [ 5]  248 	sta	0x106,x
   013E BD 07 01      [ 5]  249 	lda	0x107,x
   0141 0A            [ 2]  250 	asl	a
   0142 A9 00         [ 2]  251 	lda	#0x00
   0144 69 FF         [ 2]  252 	adc	#0xff
   0146 49 FF         [ 2]  253 	eor	#0xff
   0148 9D 08 01      [ 5]  254 	sta	0x108,x
   014B 9D 09 01      [ 5]  255 	sta	0x109,x
   014E BD 0A 01      [ 5]  256 	lda	0x10a,x
   0151 18            [ 2]  257 	clc
   0152 7D 06 01      [ 5]  258 	adc	0x106,x
   0155 9D 02 01      [ 5]  259 	sta	0x102,x
   0158 BD 0B 01      [ 5]  260 	lda	0x10b,x
   015B 7D 07 01      [ 5]  261 	adc	0x107,x
   015E 9D 03 01      [ 5]  262 	sta	0x103,x
   0161 BD 0C 01      [ 5]  263 	lda	0x10c,x
   0164 7D 08 01      [ 5]  264 	adc	0x108,x
   0167 9D 04 01      [ 5]  265 	sta	0x104,x
   016A BD 0D 01      [ 5]  266 	lda	0x10d,x
   016D 7D 09 01      [ 5]  267 	adc	0x109,x
   0170 9D 05 01      [ 5]  268 	sta	0x105,x
   0173 4CrA8r00      [ 3]  269 	jmp	00107$
   0176                     270 00109$:
                            271 ;	../atol.c: 50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
   0176 BA            [ 2]  272 	tsx
   0177 BD 10 01      [ 5]  273 	lda	0x110,x
   017A F0 24         [ 4]  274 	beq	00120$
   017C A9 00         [ 2]  275 	lda	#0x00
   017E 38            [ 2]  276 	sec
   017F FD 01 01      [ 5]  277 	sbc	0x101,x
   0182 9D 05 01      [ 5]  278 	sta	0x105,x
   0185 A9 00         [ 2]  279 	lda	#0x00
   0187 FD 02 01      [ 5]  280 	sbc	0x102,x
   018A 9D 06 01      [ 5]  281 	sta	0x106,x
   018D A9 00         [ 2]  282 	lda	#0x00
   018F FD 03 01      [ 5]  283 	sbc	0x103,x
   0192 9D 07 01      [ 5]  284 	sta	0x107,x
   0195 A9 00         [ 2]  285 	lda	#0x00
   0197 FD 04 01      [ 5]  286 	sbc	0x104,x
   019A 9D 08 01      [ 5]  287 	sta	0x108,x
   019D 4CrB9r01      [ 3]  288 	jmp	00121$
   01A0                     289 00120$:
   01A0 BA            [ 2]  290 	tsx
   01A1 BD 01 01      [ 5]  291 	lda	0x101,x
   01A4 9D 05 01      [ 5]  292 	sta	0x105,x
   01A7 BD 02 01      [ 5]  293 	lda	0x102,x
   01AA 9D 06 01      [ 5]  294 	sta	0x106,x
   01AD BD 03 01      [ 5]  295 	lda	0x103,x
   01B0 9D 07 01      [ 5]  296 	sta	0x107,x
   01B3 BD 04 01      [ 5]  297 	lda	0x104,x
   01B6 9D 08 01      [ 5]  298 	sta	0x108,x
   01B9                     299 00121$:
   01B9 BA            [ 2]  300 	tsx
   01BA BD 08 01      [ 5]  301 	lda	0x108,x
   01BD 85*00         [ 3]  302 	sta	*___SDCC_m6502_ret3
   01BF BD 07 01      [ 5]  303 	lda	0x107,x
   01C2 85*00         [ 3]  304 	sta	*___SDCC_m6502_ret2
   01C4 BD 06 01      [ 5]  305 	lda	0x106,x
   01C7 AA            [ 2]  306 	tax
   01C8 86*00         [ 3]  307 	stx	*(__TEMP+0)
   01CA BA            [ 2]  308 	tsx
   01CB BD 05 01      [ 5]  309 	lda	0x105,x
   01CE 08            [ 3]  310 	php
   01CF A6*00         [ 3]  311 	ldx	*(__TEMP+0)
   01D1 28            [ 4]  312 	plp
                            313 ;	../atol.c: 51: }
   01D2 85*00         [ 3]  314 	sta	*(__TEMP+0)
   01D4 86*01         [ 3]  315 	stx	*(__TEMP+1)
   01D6 BA            [ 2]  316 	tsx
   01D7 8A            [ 2]  317 	txa
   01D8 18            [ 2]  318 	clc
   01D9 69 12         [ 2]  319 	adc	#0x12
   01DB AA            [ 2]  320 	tax
   01DC 9A            [ 2]  321 	txs
   01DD A6*01         [ 3]  322 	ldx	*(__TEMP+1)
   01DF A5*00         [ 3]  323 	lda	*(__TEMP+0)
   01E1 60            [ 6]  324 	rts
                            325 	.area CODE
                            326 	.area RODATA
                            327 	.area XINIT
                            328 	.area CABS    (ABS)
