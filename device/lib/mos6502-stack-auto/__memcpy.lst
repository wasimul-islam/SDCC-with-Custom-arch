                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module __memcpy
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___memcpy
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function '__memcpy'
                             49 ;------------------------------------------------------------
                             50 ;src                       Allocated to stack - sp +15
                             51 ;n                         Allocated to stack - sp +17
                             52 ;dst                       Allocated to stack - sp +11
                             53 ;ret                       Allocated to stack - sp +9
                             54 ;d                         Allocated to registers 
                             55 ;s                         Allocated to registers 
                             56 ;sloc0                     Allocated to stack - sp +7
                             57 ;sloc1                     Allocated to stack - sp +5
                             58 ;sloc2                     Allocated to stack - sp +3
                             59 ;sloc3                     Allocated to stack - sp +1
                             60 ;------------------------------------------------------------
                             61 ;	../__memcpy.c: 31: void *__memcpy (void *dst, const void *src, size_t n)
                             62 ;	-----------------------------------------
                             63 ;	 function __memcpy
                             64 ;	-----------------------------------------
                             65 ;	Register assignment is optimal.
                             66 ;	Stack space usage: 12 bytes.
   0000                      67 ___memcpy:
   0000 85*00         [ 3]   68 	sta	*(__TEMP+0)
   0002 8A            [ 2]   69 	txa
   0003 48            [ 3]   70 	pha
   0004 A5*00         [ 3]   71 	lda	*(__TEMP+0)
   0006 48            [ 3]   72 	pha
   0007 86*01         [ 3]   73 	stx	*(__TEMP+1)
   0009 BA            [ 2]   74 	tsx
   000A 8A            [ 2]   75 	txa
   000B 18            [ 2]   76 	clc
   000C 69 F6         [ 2]   77 	adc	#0xf6
   000E AA            [ 2]   78 	tax
   000F 9A            [ 2]   79 	txs
   0010 A6*01         [ 3]   80 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   81 	lda	*(__TEMP+0)
                             82 ;	../__memcpy.c: 33: void *ret = dst;
   0014 BA            [ 2]   83 	tsx
   0015 BD 0B 01      [ 5]   84 	lda	0x10b,x
   0018 9D 09 01      [ 5]   85 	sta	0x109,x
   001B BD 0C 01      [ 5]   86 	lda	0x10c,x
   001E 9D 0A 01      [ 5]   87 	sta	0x10a,x
                             88 ;	../__memcpy.c: 34: char *d = dst;
   0021 BD 0B 01      [ 5]   89 	lda	0x10b,x
   0024 9D 07 01      [ 5]   90 	sta	0x107,x
   0027 BD 0C 01      [ 5]   91 	lda	0x10c,x
   002A 9D 08 01      [ 5]   92 	sta	0x108,x
                             93 ;	../__memcpy.c: 35: const char *s = src;
   002D BD 0F 01      [ 5]   94 	lda	0x10f,x
   0030 9D 05 01      [ 5]   95 	sta	0x105,x
   0033 BD 10 01      [ 5]   96 	lda	0x110,x
   0036 9D 06 01      [ 5]   97 	sta	0x106,x
                             98 ;	../__memcpy.c: 37: while (n--)
   0039 BD 11 01      [ 5]   99 	lda	0x111,x
   003C 9D 03 01      [ 5]  100 	sta	0x103,x
   003F BD 12 01      [ 5]  101 	lda	0x112,x
   0042 9D 04 01      [ 5]  102 	sta	0x104,x
   0045                     103 00101$:
   0045 BA            [ 2]  104 	tsx
   0046 BD 03 01      [ 5]  105 	lda	0x103,x
   0049 9D 01 01      [ 5]  106 	sta	0x101,x
   004C BD 04 01      [ 5]  107 	lda	0x104,x
   004F 9D 02 01      [ 5]  108 	sta	0x102,x
   0052 BD 03 01      [ 5]  109 	lda	0x103,x
   0055 38            [ 2]  110 	sec
   0056 E9 01         [ 2]  111 	sbc	#0x01
   0058 9D 03 01      [ 5]  112 	sta	0x103,x
   005B BD 04 01      [ 5]  113 	lda	0x104,x
   005E E9 00         [ 2]  114 	sbc	#0x00
   0060 9D 04 01      [ 5]  115 	sta	0x104,x
   0063 BD 01 01      [ 5]  116 	lda	0x101,x
   0066 1D 02 01      [ 5]  117 	ora	0x102,x
   0069 F0 45         [ 4]  118 	beq	00103$
                            119 ;	../__memcpy.c: 38: *d++ = *s++;
   006B BD 05 01      [ 5]  120 	lda	0x105,x
   006E 85*00         [ 3]  121 	sta	*(__DPTR+0)
   0070 BD 06 01      [ 5]  122 	lda	0x106,x
   0073 85*01         [ 3]  123 	sta	*(__DPTR+1)
   0075 A0 00         [ 2]  124 	ldy	#0x00
   0077 B1*00         [ 6]  125 	lda	[__DPTR],y
   0079 9D 01 01      [ 5]  126 	sta	0x101,x
   007C BD 05 01      [ 5]  127 	lda	0x105,x
   007F 18            [ 2]  128 	clc
   0080 69 01         [ 2]  129 	adc	#0x01
   0082 9D 05 01      [ 5]  130 	sta	0x105,x
   0085 BD 06 01      [ 5]  131 	lda	0x106,x
   0088 69 00         [ 2]  132 	adc	#0x00
   008A 9D 06 01      [ 5]  133 	sta	0x106,x
   008D BD 07 01      [ 5]  134 	lda	0x107,x
   0090 85*00         [ 3]  135 	sta	*(__DPTR+0)
   0092 BD 08 01      [ 5]  136 	lda	0x108,x
   0095 85*01         [ 3]  137 	sta	*(__DPTR+1)
   0097 BD 01 01      [ 5]  138 	lda	0x101,x
   009A 91*00         [ 6]  139 	sta	[__DPTR],y
   009C BD 07 01      [ 5]  140 	lda	0x107,x
   009F 18            [ 2]  141 	clc
   00A0 69 01         [ 2]  142 	adc	#0x01
   00A2 9D 07 01      [ 5]  143 	sta	0x107,x
   00A5 BD 08 01      [ 5]  144 	lda	0x108,x
   00A8 69 00         [ 2]  145 	adc	#0x00
   00AA 9D 08 01      [ 5]  146 	sta	0x108,x
   00AD 4Cr45r00      [ 3]  147 	jmp	00101$
   00B0                     148 00103$:
                            149 ;	../__memcpy.c: 40: return(ret);
   00B0 BA            [ 2]  150 	tsx
   00B1 BD 0A 01      [ 5]  151 	lda	0x10a,x
   00B4 AA            [ 2]  152 	tax
   00B5 86*00         [ 3]  153 	stx	*(__TEMP+0)
   00B7 BA            [ 2]  154 	tsx
   00B8 BD 09 01      [ 5]  155 	lda	0x109,x
   00BB 08            [ 3]  156 	php
   00BC A6*00         [ 3]  157 	ldx	*(__TEMP+0)
   00BE 28            [ 4]  158 	plp
                            159 ;	../__memcpy.c: 41: }
   00BF 85*00         [ 3]  160 	sta	*(__TEMP+0)
   00C1 86*01         [ 3]  161 	stx	*(__TEMP+1)
   00C3 BA            [ 2]  162 	tsx
   00C4 8A            [ 2]  163 	txa
   00C5 18            [ 2]  164 	clc
   00C6 69 0C         [ 2]  165 	adc	#0x0c
   00C8 AA            [ 2]  166 	tax
   00C9 9A            [ 2]  167 	txs
   00CA A6*01         [ 3]  168 	ldx	*(__TEMP+1)
   00CC A5*00         [ 3]  169 	lda	*(__TEMP+0)
   00CE 60            [ 6]  170 	rts
                            171 	.area CODE
                            172 	.area RODATA
                            173 	.area XINIT
                            174 	.area CABS    (ABS)
