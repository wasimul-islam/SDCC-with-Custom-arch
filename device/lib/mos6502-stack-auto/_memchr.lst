                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _memchr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _memchr
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'memchr'
                             49 ;------------------------------------------------------------
                             50 ;c                         Allocated to stack - sp +9
                             51 ;n                         Allocated to stack - sp +11
                             52 ;s                         Allocated to registers a x 
                             53 ;p                         Allocated to stack - sp +5
                             54 ;end                       Allocated to stack - sp +3
                             55 ;sloc0                     Allocated to stack - sp +1
                             56 ;------------------------------------------------------------
                             57 ;	../_memchr.c: 31: void *memchr(const void *s, int c, size_t n)
                             58 ;	-----------------------------------------
                             59 ;	 function memchr
                             60 ;	-----------------------------------------
                             61 ;	Register assignment is optimal.
                             62 ;	Stack space usage: 6 bytes.
   0000                      63 _memchr:
   0000 48            [ 3]   64 	pha
   0001 48            [ 3]   65 	pha
   0002 48            [ 3]   66 	pha
   0003 48            [ 3]   67 	pha
   0004 48            [ 3]   68 	pha
   0005 48            [ 3]   69 	pha
                             70 ;	../_memchr.c: 33: unsigned char *p = (unsigned char *)s;
   0006 48            [ 3]   71 	pha
   0007 8A            [ 2]   72 	txa
   0008 BA            [ 2]   73 	tsx
   0009 9D 07 01      [ 5]   74 	sta	0x107,x
   000C 68            [ 4]   75 	pla
                             76 ;	../_memchr.c: 34: unsigned char *end = p + n;
   000D 9D 06 01      [ 5]   77 	sta	0x106, x
   0010 18            [ 2]   78 	clc
   0011 7D 0C 01      [ 5]   79 	adc	0x10c,x
   0014 9D 04 01      [ 5]   80 	sta	0x104,x
   0017 BD 07 01      [ 5]   81 	lda	0x107,x
   001A 7D 0D 01      [ 5]   82 	adc	0x10d,x
   001D 9D 05 01      [ 5]   83 	sta	0x105,x
                             84 ;	../_memchr.c: 38: return(0);
   0020 BD 06 01      [ 5]   85 	lda	0x106,x
   0023 9D 02 01      [ 5]   86 	sta	0x102,x
   0026 BD 07 01      [ 5]   87 	lda	0x107,x
   0029 9D 03 01      [ 5]   88 	sta	0x103,x
   002C                      89 00105$:
                             90 ;	../_memchr.c: 35: for(; p != end; p++)
   002C BA            [ 2]   91 	tsx
   002D BD 01 01      [ 5]   92 	lda	0x101,x
   0030 DD 03 01      [ 5]   93 	cmp	0x103,x
   0033 D0 08         [ 4]   94 	bne	00122$
   0035 BD 02 01      [ 5]   95 	lda	0x102,x
   0038 DD 04 01      [ 5]   96 	cmp	0x104,x
   003B F0 47         [ 4]   97 	beq	00103$
   003D                      98 00122$:
                             99 ;	../_memchr.c: 36: if(*p == (unsigned char)c)
   003D BD 01 01      [ 5]  100 	lda	0x101,x
   0040 85*00         [ 3]  101 	sta	*(__DPTR+0)
   0042 BD 02 01      [ 5]  102 	lda	0x102,x
   0045 85*01         [ 3]  103 	sta	*(__DPTR+1)
   0047 A0 00         [ 2]  104 	ldy	#0x00
   0049 B1*00         [ 6]  105 	lda	[__DPTR],y
   004B A8            [ 2]  106 	tay
   004C BD 09 01      [ 5]  107 	lda	0x109,x
   004F 84*00         [ 3]  108 	sty	*(__TEMP+0)
   0051 C5*00         [ 3]  109 	cmp	*(__TEMP+0)
   0053 D0 0E         [ 4]  110 	bne	00106$
                            111 ;	../_memchr.c: 37: return((void *)p);
   0055 BD 05 01      [ 5]  112 	lda	0x105,x
   0058 85*00         [ 3]  113 	sta	*(__TEMP+0)
   005A BD 06 01      [ 5]  114 	lda	0x106,x
   005D AA            [ 2]  115 	tax
   005E A5*00         [ 3]  116 	lda	*(__TEMP+0)
   0060 4Cr87r00      [ 3]  117 	jmp	00107$
   0063                     118 00106$:
                            119 ;	../_memchr.c: 35: for(; p != end; p++)
   0063 BA            [ 2]  120 	tsx
   0064 BD 01 01      [ 5]  121 	lda	0x101,x
   0067 18            [ 2]  122 	clc
   0068 69 01         [ 2]  123 	adc	#0x01
   006A 9D 01 01      [ 5]  124 	sta	0x101,x
   006D BD 02 01      [ 5]  125 	lda	0x102,x
   0070 69 00         [ 2]  126 	adc	#0x00
   0072 9D 02 01      [ 5]  127 	sta	0x102,x
   0075 BD 01 01      [ 5]  128 	lda	0x101,x
   0078 9D 05 01      [ 5]  129 	sta	0x105,x
   007B BD 02 01      [ 5]  130 	lda	0x102,x
   007E 9D 06 01      [ 5]  131 	sta	0x106,x
   0081 4Cr2Cr00      [ 3]  132 	jmp	00105$
   0084                     133 00103$:
                            134 ;	../_memchr.c: 38: return(0);
   0084 A9 00         [ 2]  135 	lda	#0x00
   0086 AA            [ 2]  136 	tax
   0087                     137 00107$:
                            138 ;	../_memchr.c: 39: }
   0087 85*00         [ 3]  139 	sta	*(__TEMP+0)
   0089 68            [ 4]  140 	pla
   008A 68            [ 4]  141 	pla
   008B 68            [ 4]  142 	pla
   008C 68            [ 4]  143 	pla
   008D 68            [ 4]  144 	pla
   008E 68            [ 4]  145 	pla
   008F A5*00         [ 3]  146 	lda	*(__TEMP+0)
   0091 60            [ 6]  147 	rts
                            148 	.area CODE
                            149 	.area RODATA
                            150 	.area XINIT
                            151 	.area CABS    (ABS)
