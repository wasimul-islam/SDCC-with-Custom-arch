                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module atoi
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _atoi
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'atoi'
                             49 ;------------------------------------------------------------
                             50 ;nptr                      Allocated to stack - sp +11
                             51 ;__1310720007              Allocated to registers 
                             52 ;__1310720004              Allocated to registers 
                             53 ;ret                       Allocated to stack - sp +9
                             54 ;neg                       Allocated to stack - sp +8
                             55 ;__1310720005              Allocated to registers 
                             56 ;c                         Allocated to registers 
                             57 ;__1310720008              Allocated to registers 
                             58 ;c                         Allocated to registers 
                             59 ;sloc0                     Allocated to stack - sp +6
                             60 ;sloc1                     Allocated to stack - sp +5
                             61 ;sloc2                     Allocated to stack - sp +3
                             62 ;sloc3                     Allocated to stack - sp +1
                             63 ;------------------------------------------------------------
                             64 ;	../atoi.c: 34: int atoi(const char *nptr)
                             65 ;	-----------------------------------------
                             66 ;	 function atoi
                             67 ;	-----------------------------------------
                             68 ;	Register assignment is optimal.
                             69 ;	Stack space usage: 12 bytes.
   0000                      70 _atoi:
   0000 85*00         [ 3]   71 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   72 	stx	*(__TEMP+1)
   0004 BA            [ 2]   73 	tsx
   0005 8A            [ 2]   74 	txa
   0006 18            [ 2]   75 	clc
   0007 69 F4         [ 2]   76 	adc	#0xf4
   0009 AA            [ 2]   77 	tax
   000A 9A            [ 2]   78 	txs
   000B A6*01         [ 3]   79 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   80 	lda	*(__TEMP+0)
                             81 ;	../atoi.c: 36: int ret = 0;
   000F 48            [ 3]   82 	pha
   0010 A9 00         [ 2]   83 	lda	#0x00
   0012 86*00         [ 3]   84 	stx	*(__TEMP+0)
   0014 BA            [ 2]   85 	tsx
   0015 9D 0A 01      [ 5]   86 	sta	0x10a,x
   0018 A6*00         [ 3]   87 	ldx	*(__TEMP+0)
   001A A9 00         [ 2]   88 	lda	#0x00
   001C 86*00         [ 3]   89 	stx	*(__TEMP+0)
   001E BA            [ 2]   90 	tsx
   001F 9D 0B 01      [ 5]   91 	sta	0x10b,x
   0022 A6*00         [ 3]   92 	ldx	*(__TEMP+0)
   0024 68            [ 4]   93 	pla
                             94 ;	../atoi.c: 39: while (isblank (*nptr))
   0025                      95 00101$:
   0025 85*00         [ 3]   96 	sta	*(__TEMP+0)
   0027 86*01         [ 3]   97 	stx	*(__TEMP+1)
   0029 85*00         [ 3]   98 	sta	*(__DPTR+0)
   002B 86*01         [ 3]   99 	stx	*(__DPTR+1)
   002D A0 00         [ 2]  100 	ldy	#0x00
   002F B1*00         [ 6]  101 	lda	[__DPTR],y
   0031 A8            [ 2]  102 	tay
   0032 A6*01         [ 3]  103 	ldx	*(__TEMP+1)
   0034 A5*00         [ 3]  104 	lda	*(__TEMP+0)
                            105 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   0036 C0 20         [ 2]  106 	cpy	#0x20
   0038 F0 04         [ 4]  107 	beq	00115$
   003A C0 09         [ 2]  108 	cpy	#0x09
   003C D0 09         [ 4]  109 	bne	00131$
   003E                     110 00115$:
                            111 ;	../atoi.c: 40: nptr++;
   003E 18            [ 2]  112 	clc
   003F 69 01         [ 2]  113 	adc	#0x01
   0041 90 E2         [ 4]  114 	bcc	00101$
   0043 E8            [ 2]  115 	inx
   0044 4Cr25r00      [ 3]  116 	jmp	00101$
   0047                     117 00131$:
   0047 48            [ 3]  118 	pha
   0048 86*00         [ 3]  119 	stx	*(__TEMP+0)
   004A 8A            [ 2]  120 	txa
   004B BA            [ 2]  121 	tsx
   004C 9D 0D 01      [ 5]  122 	sta	0x10d,x
   004F 68            [ 4]  123 	pla
   0050 9D 0C 01      [ 5]  124 	sta	0x10c,x
   0053 A6*00         [ 3]  125 	ldx	*(__TEMP+0)
                            126 ;	../atoi.c: 42: neg = (*nptr == '-');
   0055 85*00         [ 3]  127 	sta	*(__DPTR+0)
   0057 86*01         [ 3]  128 	stx	*(__DPTR+1)
   0059 A0 00         [ 2]  129 	ldy	#0x00
   005B B1*00         [ 6]  130 	lda	[__DPTR],y
   005D A8            [ 2]  131 	tay
   005E BA            [ 2]  132 	tsx
   005F C0 2D         [ 2]  133 	cpy	#0x2d
   0061 F0 05         [ 4]  134 	beq	00165$
   0063 A9 00         [ 2]  135 	lda	#0x00
   0065 4Cr6Ar00      [ 3]  136 	jmp	00164$
   0068                     137 00165$:
   0068 A9 01         [ 2]  138 	lda	#0x01
   006A                     139 00164$:
   006A 9D 08 01      [ 5]  140 	sta	0x108,x
                            141 ;	../atoi.c: 44: if (*nptr == '-' || *nptr == '+')
   006D C0 2D         [ 2]  142 	cpy	#0x2d
   006F F0 04         [ 4]  143 	beq	00104$
   0071 C0 2B         [ 2]  144 	cpy	#0x2b
   0073 D0 12         [ 4]  145 	bne	00129$
   0075                     146 00104$:
                            147 ;	../atoi.c: 45: nptr++;
   0075 BA            [ 2]  148 	tsx
   0076 BD 0B 01      [ 5]  149 	lda	0x10b,x
   0079 18            [ 2]  150 	clc
   007A 69 01         [ 2]  151 	adc	#0x01
   007C 9D 0B 01      [ 5]  152 	sta	0x10b,x
   007F BD 0C 01      [ 5]  153 	lda	0x10c,x
   0082 69 00         [ 2]  154 	adc	#0x00
   0084 9D 0C 01      [ 5]  155 	sta	0x10c,x
                            156 ;	../atoi.c: 47: while (isdigit (*nptr))
   0087                     157 00129$:
   0087 BA            [ 2]  158 	tsx
   0088 BD 0B 01      [ 5]  159 	lda	0x10b,x
   008B 9D 06 01      [ 5]  160 	sta	0x106,x
   008E BD 0C 01      [ 5]  161 	lda	0x10c,x
   0091 9D 07 01      [ 5]  162 	sta	0x107,x
   0094                     163 00107$:
   0094 BA            [ 2]  164 	tsx
   0095 BD 06 01      [ 5]  165 	lda	0x106,x
   0098 85*00         [ 3]  166 	sta	*(__DPTR+0)
   009A BD 07 01      [ 5]  167 	lda	0x107,x
   009D 85*01         [ 3]  168 	sta	*(__DPTR+1)
   009F A0 00         [ 2]  169 	ldy	#0x00
   00A1 B1*00         [ 6]  170 	lda	[__DPTR],y
                            171 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
   00A3 C9 30         [ 2]  172 	cmp	#0x30
   00A5 90 79         [ 4]  173 	bcc	00109$
   00A7 C9 39         [ 2]  174 	cmp	#0x39
   00A9 F0 02         [ 4]  175 	beq	00169$
   00AB B0 73         [ 4]  176 	bcs	00109$
   00AD                     177 00169$:
                            178 ;	../atoi.c: 48: ret = ret * 10 + (*(nptr++) - '0');
   00AD BD 0A 01      [ 5]  179 	lda	0x10a,x
   00B0 48            [ 3]  180 	pha
   00B1 BD 09 01      [ 5]  181 	lda	0x109,x
   00B4 48            [ 3]  182 	pha
   00B5 A2 00         [ 2]  183 	ldx	#0x00
   00B7 A9 0A         [ 2]  184 	lda	#0x0a
   00B9 20r00r00      [ 6]  185 	jsr	__mulint
   00BC 86*00         [ 3]  186 	stx	*(__TEMP+0)
   00BE BA            [ 2]  187 	tsx
   00BF 9D 05 01      [ 5]  188 	sta	0x105,x
   00C2 A6*00         [ 3]  189 	ldx	*(__TEMP+0)
   00C4 8A            [ 2]  190 	txa
   00C5 BA            [ 2]  191 	tsx
   00C6 9D 06 01      [ 5]  192 	sta	0x106,x
   00C9 A6*00         [ 3]  193 	ldx	*(__TEMP+0)
   00CB 85*00         [ 3]  194 	sta	*(__TEMP+0)
   00CD 68            [ 4]  195 	pla
   00CE 68            [ 4]  196 	pla
   00CF A5*00         [ 3]  197 	lda	*(__TEMP+0)
   00D1 BA            [ 2]  198 	tsx
   00D2 BD 06 01      [ 5]  199 	lda	0x106,x
   00D5 85*00         [ 3]  200 	sta	*(__DPTR+0)
   00D7 BD 07 01      [ 5]  201 	lda	0x107,x
   00DA 85*01         [ 3]  202 	sta	*(__DPTR+1)
   00DC A0 00         [ 2]  203 	ldy	#0x00
   00DE B1*00         [ 6]  204 	lda	[__DPTR],y
   00E0 A8            [ 2]  205 	tay
   00E1 BD 06 01      [ 5]  206 	lda	0x106,x
   00E4 18            [ 2]  207 	clc
   00E5 69 01         [ 2]  208 	adc	#0x01
   00E7 9D 06 01      [ 5]  209 	sta	0x106,x
   00EA BD 07 01      [ 5]  210 	lda	0x107,x
   00ED 69 00         [ 2]  211 	adc	#0x00
   00EF 9D 07 01      [ 5]  212 	sta	0x107,x
   00F2 98            [ 2]  213 	tya
   00F3 A2 00         [ 2]  214 	ldx	#0x00
   00F5 38            [ 2]  215 	sec
   00F6 E9 30         [ 2]  216 	sbc	#0x30
   00F8 86*00         [ 3]  217 	stx	*(__TEMP+0)
   00FA BA            [ 2]  218 	tsx
   00FB 9D 01 01      [ 5]  219 	sta	0x101,x
   00FE A2 00         [ 2]  220 	ldx	#0x00
   0100 8A            [ 2]  221 	txa
   0101 E9 00         [ 2]  222 	sbc	#0x00
   0103 86*00         [ 3]  223 	stx	*(__TEMP+0)
   0105 BA            [ 2]  224 	tsx
   0106 9D 02 01      [ 5]  225 	sta	0x102,x
   0109 BA            [ 2]  226 	tsx
   010A BD 03 01      [ 5]  227 	lda	0x103,x
   010D 18            [ 2]  228 	clc
   010E 7D 01 01      [ 5]  229 	adc	0x101,x
   0111 9D 09 01      [ 5]  230 	sta	0x109,x
   0114 BD 04 01      [ 5]  231 	lda	0x104,x
   0117 7D 02 01      [ 5]  232 	adc	0x102,x
   011A 9D 0A 01      [ 5]  233 	sta	0x10a,x
   011D 4Cr94r00      [ 3]  234 	jmp	00107$
   0120                     235 00109$:
                            236 ;	../atoi.c: 50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
   0120 BA            [ 2]  237 	tsx
   0121 BD 08 01      [ 5]  238 	lda	0x108,x
   0124 F0 11         [ 4]  239 	beq	00120$
   0126 A9 00         [ 2]  240 	lda	#0x00
   0128 38            [ 2]  241 	sec
   0129 FD 09 01      [ 5]  242 	sbc	0x109,x
   012C 48            [ 3]  243 	pha
   012D A9 00         [ 2]  244 	lda	#0x00
   012F FD 0A 01      [ 5]  245 	sbc	0x10a,x
   0132 AA            [ 2]  246 	tax
   0133 68            [ 4]  247 	pla
   0134 4Cr43r01      [ 3]  248 	jmp	00121$
   0137                     249 00120$:
   0137 BA            [ 2]  250 	tsx
   0138 BD 09 01      [ 5]  251 	lda	0x109,x
   013B 85*00         [ 3]  252 	sta	*(__TEMP+0)
   013D BD 0A 01      [ 5]  253 	lda	0x10a,x
   0140 AA            [ 2]  254 	tax
   0141 A5*00         [ 3]  255 	lda	*(__TEMP+0)
   0143                     256 00121$:
                            257 ;	../atoi.c: 51: }
   0143 85*00         [ 3]  258 	sta	*(__TEMP+0)
   0145 86*01         [ 3]  259 	stx	*(__TEMP+1)
   0147 BA            [ 2]  260 	tsx
   0148 8A            [ 2]  261 	txa
   0149 18            [ 2]  262 	clc
   014A 69 0C         [ 2]  263 	adc	#0x0c
   014C AA            [ 2]  264 	tax
   014D 9A            [ 2]  265 	txs
   014E A6*01         [ 3]  266 	ldx	*(__TEMP+1)
   0150 A5*00         [ 3]  267 	lda	*(__TEMP+0)
   0152 60            [ 6]  268 	rts
                            269 	.area CODE
                            270 	.area RODATA
                            271 	.area XINIT
                            272 	.area CABS    (ABS)
