                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module wcscmp
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wcscmp
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'wcscmp'
                             49 ;------------------------------------------------------------
                             50 ;s2                        Allocated to stack - sp +15
                             51 ;s1                        Allocated to registers 
                             52 ;sloc0                     Allocated to stack - sp +11
                             53 ;sloc1                     Allocated to stack - sp +9
                             54 ;sloc2                     Allocated to stack - sp +5
                             55 ;sloc3                     Allocated to stack - sp +1
                             56 ;------------------------------------------------------------
                             57 ;	../wcscmp.c: 31: int wcscmp(const wchar_t *s1, const wchar_t *s2)
                             58 ;	-----------------------------------------
                             59 ;	 function wcscmp
                             60 ;	-----------------------------------------
                             61 ;	Register assignment is optimal.
                             62 ;	Stack space usage: 12 bytes.
   0000                      63 _wcscmp:
   0000 85*00         [ 3]   64 	sta	*(__TEMP+0)
   0002 8A            [ 2]   65 	txa
   0003 48            [ 3]   66 	pha
   0004 A5*00         [ 3]   67 	lda	*(__TEMP+0)
   0006 48            [ 3]   68 	pha
   0007 86*01         [ 3]   69 	stx	*(__TEMP+1)
   0009 BA            [ 2]   70 	tsx
   000A 8A            [ 2]   71 	txa
   000B 18            [ 2]   72 	clc
   000C 69 F6         [ 2]   73 	adc	#0xf6
   000E AA            [ 2]   74 	tax
   000F 9A            [ 2]   75 	txs
   0010 A6*01         [ 3]   76 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   77 	lda	*(__TEMP+0)
                             78 ;	../wcscmp.c: 33: while(*s1 == *s2 && *s1)
   0014 BA            [ 2]   79 	tsx
   0015 BD 0F 01      [ 5]   80 	lda	0x10f,x
   0018 9D 09 01      [ 5]   81 	sta	0x109,x
   001B BD 10 01      [ 5]   82 	lda	0x110,x
   001E 9D 0A 01      [ 5]   83 	sta	0x10a,x
   0021                      84 00102$:
   0021 BA            [ 2]   85 	tsx
   0022 BD 0B 01      [ 5]   86 	lda	0x10b,x
   0025 85*00         [ 3]   87 	sta	*(__DPTR+0)
   0027 BD 0C 01      [ 5]   88 	lda	0x10c,x
   002A 85*01         [ 3]   89 	sta	*(__DPTR+1)
   002C A0 00         [ 2]   90 	ldy	#0x00
   002E B1*00         [ 6]   91 	lda	[__DPTR],y
   0030 9D 05 01      [ 5]   92 	sta	0x105,x
   0033 C8            [ 2]   93 	iny
   0034 B1*00         [ 6]   94 	lda	[__DPTR],y
   0036 9D 06 01      [ 5]   95 	sta	0x106,x
   0039 C8            [ 2]   96 	iny
   003A B1*00         [ 6]   97 	lda	[__DPTR],y
   003C 9D 07 01      [ 5]   98 	sta	0x107,x
   003F C8            [ 2]   99 	iny
   0040 B1*00         [ 6]  100 	lda	[__DPTR],y
   0042 9D 08 01      [ 5]  101 	sta	0x108,x
   0045 BD 09 01      [ 5]  102 	lda	0x109,x
   0048 85*00         [ 3]  103 	sta	*(__DPTR+0)
   004A BD 0A 01      [ 5]  104 	lda	0x10a,x
   004D 85*01         [ 3]  105 	sta	*(__DPTR+1)
   004F A0 00         [ 2]  106 	ldy	#0x00
   0051 B1*00         [ 6]  107 	lda	[__DPTR],y
   0053 9D 01 01      [ 5]  108 	sta	0x101,x
   0056 C8            [ 2]  109 	iny
   0057 B1*00         [ 6]  110 	lda	[__DPTR],y
   0059 9D 02 01      [ 5]  111 	sta	0x102,x
   005C C8            [ 2]  112 	iny
   005D B1*00         [ 6]  113 	lda	[__DPTR],y
   005F 9D 03 01      [ 5]  114 	sta	0x103,x
   0062 C8            [ 2]  115 	iny
   0063 B1*00         [ 6]  116 	lda	[__DPTR],y
   0065 9D 04 01      [ 5]  117 	sta	0x104,x
   0068 BD 05 01      [ 5]  118 	lda	0x105,x
   006B DD 01 01      [ 5]  119 	cmp	0x101,x
   006E D0 4B         [ 4]  120 	bne	00104$
   0070 BD 06 01      [ 5]  121 	lda	0x106,x
   0073 DD 02 01      [ 5]  122 	cmp	0x102,x
   0076 D0 43         [ 4]  123 	bne	00104$
   0078 BD 07 01      [ 5]  124 	lda	0x107,x
   007B DD 03 01      [ 5]  125 	cmp	0x103,x
   007E D0 3B         [ 4]  126 	bne	00104$
   0080 BD 08 01      [ 5]  127 	lda	0x108,x
   0083 DD 04 01      [ 5]  128 	cmp	0x104,x
   0086 D0 33         [ 4]  129 	bne	00104$
   0088 BD 08 01      [ 5]  130 	lda	0x108,x
   008B 1D 07 01      [ 5]  131 	ora	0x107,x
   008E 1D 06 01      [ 5]  132 	ora	0x106,x
   0091 1D 05 01      [ 5]  133 	ora	0x105,x
   0094 F0 25         [ 4]  134 	beq	00104$
                            135 ;	../wcscmp.c: 34: s1++, s2++;
   0096 BD 0B 01      [ 5]  136 	lda	0x10b,x
   0099 18            [ 2]  137 	clc
   009A 69 04         [ 2]  138 	adc	#0x04
   009C 9D 0B 01      [ 5]  139 	sta	0x10b,x
   009F BD 0C 01      [ 5]  140 	lda	0x10c,x
   00A2 69 00         [ 2]  141 	adc	#0x00
   00A4 9D 0C 01      [ 5]  142 	sta	0x10c,x
   00A7 BD 09 01      [ 5]  143 	lda	0x109,x
   00AA 18            [ 2]  144 	clc
   00AB 69 04         [ 2]  145 	adc	#0x04
   00AD 9D 09 01      [ 5]  146 	sta	0x109,x
   00B0 BD 0A 01      [ 5]  147 	lda	0x10a,x
   00B3 69 00         [ 2]  148 	adc	#0x00
   00B5 9D 0A 01      [ 5]  149 	sta	0x10a,x
   00B8 4Cr21r00      [ 3]  150 	jmp	00102$
   00BB                     151 00104$:
                            152 ;	../wcscmp.c: 36: if(*s1 < *s2)
   00BB BA            [ 2]  153 	tsx
   00BC BD 0B 01      [ 5]  154 	lda	0x10b,x
   00BF 85*00         [ 3]  155 	sta	*(__DPTR+0)
   00C1 BD 0C 01      [ 5]  156 	lda	0x10c,x
   00C4 85*01         [ 3]  157 	sta	*(__DPTR+1)
   00C6 A0 00         [ 2]  158 	ldy	#0x00
   00C8 B1*00         [ 6]  159 	lda	[__DPTR],y
   00CA 9D 01 01      [ 5]  160 	sta	0x101,x
   00CD C8            [ 2]  161 	iny
   00CE B1*00         [ 6]  162 	lda	[__DPTR],y
   00D0 9D 02 01      [ 5]  163 	sta	0x102,x
   00D3 C8            [ 2]  164 	iny
   00D4 B1*00         [ 6]  165 	lda	[__DPTR],y
   00D6 9D 03 01      [ 5]  166 	sta	0x103,x
   00D9 C8            [ 2]  167 	iny
   00DA B1*00         [ 6]  168 	lda	[__DPTR],y
   00DC 9D 04 01      [ 5]  169 	sta	0x104,x
   00DF BD 09 01      [ 5]  170 	lda	0x109,x
   00E2 85*00         [ 3]  171 	sta	*(__DPTR+0)
   00E4 BD 0A 01      [ 5]  172 	lda	0x10a,x
   00E7 85*01         [ 3]  173 	sta	*(__DPTR+1)
   00E9 A0 00         [ 2]  174 	ldy	#0x00
   00EB B1*00         [ 6]  175 	lda	[__DPTR],y
   00ED 9D 05 01      [ 5]  176 	sta	0x105,x
   00F0 C8            [ 2]  177 	iny
   00F1 B1*00         [ 6]  178 	lda	[__DPTR],y
   00F3 9D 06 01      [ 5]  179 	sta	0x106,x
   00F6 C8            [ 2]  180 	iny
   00F7 B1*00         [ 6]  181 	lda	[__DPTR],y
   00F9 9D 07 01      [ 5]  182 	sta	0x107,x
   00FC C8            [ 2]  183 	iny
   00FD B1*00         [ 6]  184 	lda	[__DPTR],y
   00FF 9D 08 01      [ 5]  185 	sta	0x108,x
   0102 BD 01 01      [ 5]  186 	lda	0x101,x
   0105 38            [ 2]  187 	sec
   0106 FD 05 01      [ 5]  188 	sbc	0x105,x
   0109 BD 02 01      [ 5]  189 	lda	0x102,x
   010C FD 06 01      [ 5]  190 	sbc	0x106,x
   010F BD 03 01      [ 5]  191 	lda	0x103,x
   0112 FD 07 01      [ 5]  192 	sbc	0x107,x
   0115 BD 04 01      [ 5]  193 	lda	0x104,x
   0118 FD 08 01      [ 5]  194 	sbc	0x108,x
   011B B0 06         [ 4]  195 	bcs	00106$
                            196 ;	../wcscmp.c: 37: return(-1);
   011D A9 FF         [ 2]  197 	lda	#0xff
   011F AA            [ 2]  198 	tax
   0120 4Cr49r01      [ 3]  199 	jmp	00109$
   0123                     200 00106$:
                            201 ;	../wcscmp.c: 38: if(*s1 > *s2)
   0123 BA            [ 2]  202 	tsx
   0124 BD 05 01      [ 5]  203 	lda	0x105,x
   0127 38            [ 2]  204 	sec
   0128 FD 01 01      [ 5]  205 	sbc	0x101,x
   012B BD 06 01      [ 5]  206 	lda	0x106,x
   012E FD 02 01      [ 5]  207 	sbc	0x102,x
   0131 BD 07 01      [ 5]  208 	lda	0x107,x
   0134 FD 03 01      [ 5]  209 	sbc	0x103,x
   0137 BD 08 01      [ 5]  210 	lda	0x108,x
   013A FD 04 01      [ 5]  211 	sbc	0x104,x
   013D B0 07         [ 4]  212 	bcs	00108$
                            213 ;	../wcscmp.c: 39: return(1);
   013F A9 01         [ 2]  214 	lda	#0x01
   0141 A2 00         [ 2]  215 	ldx	#0x00
   0143 4Cr49r01      [ 3]  216 	jmp	00109$
   0146                     217 00108$:
                            218 ;	../wcscmp.c: 40: return(0);
   0146 A9 00         [ 2]  219 	lda	#0x00
   0148 AA            [ 2]  220 	tax
   0149                     221 00109$:
                            222 ;	../wcscmp.c: 41: }
   0149 85*00         [ 3]  223 	sta	*(__TEMP+0)
   014B 86*01         [ 3]  224 	stx	*(__TEMP+1)
   014D BA            [ 2]  225 	tsx
   014E 8A            [ 2]  226 	txa
   014F 18            [ 2]  227 	clc
   0150 69 0C         [ 2]  228 	adc	#0x0c
   0152 AA            [ 2]  229 	tax
   0153 9A            [ 2]  230 	txs
   0154 A6*01         [ 3]  231 	ldx	*(__TEMP+1)
   0156 A5*00         [ 3]  232 	lda	*(__TEMP+0)
   0158 60            [ 6]  233 	rts
                            234 	.area CODE
                            235 	.area RODATA
                            236 	.area XINIT
                            237 	.area CABS    (ABS)
