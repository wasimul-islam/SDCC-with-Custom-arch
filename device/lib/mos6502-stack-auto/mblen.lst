                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mblen
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mblen
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'mblen'
                             49 ;------------------------------------------------------------
                             50 ;n                         Allocated to stack - sp +10
                             51 ;s                         Allocated to stack - sp +6
                             52 ;m                         Allocated to stack - sp +5
                             53 ;c                         Allocated to registers x 
                             54 ;sloc0                     Allocated to stack - sp +3
                             55 ;sloc1                     Allocated to stack - sp +1
                             56 ;------------------------------------------------------------
                             57 ;	../mblen.c: 31: int mblen(const char *s, size_t n)
                             58 ;	-----------------------------------------
                             59 ;	 function mblen
                             60 ;	-----------------------------------------
                             61 ;	Register assignment is optimal.
                             62 ;	Stack space usage: 7 bytes.
   0000                      63 _mblen:
   0000 85*00         [ 3]   64 	sta	*(__TEMP+0)
   0002 8A            [ 2]   65 	txa
   0003 48            [ 3]   66 	pha
   0004 A5*00         [ 3]   67 	lda	*(__TEMP+0)
   0006 48            [ 3]   68 	pha
   0007 48            [ 3]   69 	pha
   0008 48            [ 3]   70 	pha
   0009 48            [ 3]   71 	pha
   000A 48            [ 3]   72 	pha
   000B 48            [ 3]   73 	pha
                             74 ;	../mblen.c: 36: if(!s)
   000C BA            [ 2]   75 	tsx
   000D BD 06 01      [ 5]   76 	lda	0x106,x
   0010 1D 07 01      [ 5]   77 	ora	0x107,x
   0013 D0 06         [ 4]   78 	bne	00102$
                             79 ;	../mblen.c: 37: return(0);
   0015 A9 00         [ 2]   80 	lda	#0x00
   0017 AA            [ 2]   81 	tax
   0018 4CrDBr00      [ 3]   82 	jmp	00119$
   001B                      83 00102$:
                             84 ;	../mblen.c: 39: if(!n)
   001B BA            [ 2]   85 	tsx
   001C BD 0A 01      [ 5]   86 	lda	0x10a,x
   001F 1D 0B 01      [ 5]   87 	ora	0x10b,x
   0022 D0 06         [ 4]   88 	bne	00104$
                             89 ;	../mblen.c: 40: return(-1);
   0024 A9 FF         [ 2]   90 	lda	#0xff
   0026 AA            [ 2]   91 	tax
   0027 4CrDBr00      [ 3]   92 	jmp	00119$
   002A                      93 00104$:
                             94 ;	../mblen.c: 42: c = *s;
   002A BA            [ 2]   95 	tsx
   002B BD 06 01      [ 5]   96 	lda	0x106,x
   002E 85*00         [ 3]   97 	sta	*(__DPTR+0)
   0030 BD 07 01      [ 5]   98 	lda	0x107,x
   0033 85*01         [ 3]   99 	sta	*(__DPTR+1)
   0035 A0 00         [ 2]  100 	ldy	#0x00
   0037 B1*00         [ 6]  101 	lda	[__DPTR],y
                            102 ;	../mblen.c: 44: if(!c)
   0039 AA            [ 2]  103 	tax
   003A D0 05         [ 4]  104 	bne	00106$
                            105 ;	../mblen.c: 45: return(0);
   003C 98            [ 2]  106 	tya
   003D AA            [ 2]  107 	tax
   003E 4CrDBr00      [ 3]  108 	jmp	00119$
   0041                     109 00106$:
                            110 ;	../mblen.c: 47: if(c <= 0x7f)
   0041 E0 7F         [ 2]  111 	cpx	#0x7f
   0043 F0 02         [ 4]  112 	beq	00165$
   0045 B0 07         [ 4]  113 	bcs	00126$
   0047                     114 00165$:
                            115 ;	../mblen.c: 48: return(1);
   0047 A9 01         [ 2]  116 	lda	#0x01
   0049 A2 00         [ 2]  117 	ldx	#0x00
   004B 4CrDBr00      [ 3]  118 	jmp	00119$
                            119 ;	../mblen.c: 50: while(c & 0x80)
   004E                     120 00126$:
   004E A0 00         [ 2]  121 	ldy	#0x00
   0050                     122 00109$:
   0050 A9 80         [ 2]  123 	lda	#0x80
   0052 86*00         [ 3]  124 	stx	*(__TEMP+0)
   0054 25*00         [ 3]  125 	and	*(__TEMP+0)
   0056 F0 07         [ 4]  126 	beq	00111$
                            127 ;	../mblen.c: 52: c <<= 1;
   0058 8A            [ 2]  128 	txa
   0059 0A            [ 2]  129 	asl	a
   005A AA            [ 2]  130 	tax
                            131 ;	../mblen.c: 53: m++;
   005B C8            [ 2]  132 	iny
   005C 4Cr50r00      [ 3]  133 	jmp	00109$
   005F                     134 00111$:
                            135 ;	../mblen.c: 56: if(m > n)
   005F BA            [ 2]  136 	tsx
   0060 98            [ 2]  137 	tya
   0061 9D 03 01      [ 5]  138 	sta	0x103,x
   0064 A9 00         [ 2]  139 	lda	#0x00
   0066 9D 04 01      [ 5]  140 	sta	0x104,x
   0069 BD 0A 01      [ 5]  141 	lda	0x10a,x
   006C 38            [ 2]  142 	sec
   006D FD 03 01      [ 5]  143 	sbc	0x103,x
   0070 BD 0B 01      [ 5]  144 	lda	0x10b,x
   0073 FD 04 01      [ 5]  145 	sbc	0x104,x
   0076 B0 06         [ 4]  146 	bcs	00129$
                            147 ;	../mblen.c: 57: return(-1);
   0078 A9 FF         [ 2]  148 	lda	#0xff
   007A AA            [ 2]  149 	tax
   007B 4CrDBr00      [ 3]  150 	jmp	00119$
                            151 ;	../mblen.c: 60: while(--m)
   007E                     152 00129$:
   007E BA            [ 2]  153 	tsx
   007F BD 06 01      [ 5]  154 	lda	0x106,x
   0082 9D 01 01      [ 5]  155 	sta	0x101,x
   0085 BD 07 01      [ 5]  156 	lda	0x107,x
   0088 9D 02 01      [ 5]  157 	sta	0x102,x
   008B 98            [ 2]  158 	tya
   008C 9D 05 01      [ 5]  159 	sta	0x105,x
   008F                     160 00116$:
   008F BA            [ 2]  161 	tsx
   0090 BD 05 01      [ 5]  162 	lda	0x105,x
   0093 38            [ 2]  163 	sec
   0094 E9 01         [ 2]  164 	sbc	#0x01
   0096 9D 05 01      [ 5]  165 	sta	0x105, x
   0099 F0 31         [ 4]  166 	beq	00118$
                            167 ;	../mblen.c: 61: if((*++s & 0xc0) != 0x80)
   009B BD 01 01      [ 5]  168 	lda	0x101,x
   009E 18            [ 2]  169 	clc
   009F 69 01         [ 2]  170 	adc	#0x01
   00A1 9D 01 01      [ 5]  171 	sta	0x101,x
   00A4 BD 02 01      [ 5]  172 	lda	0x102,x
   00A7 69 00         [ 2]  173 	adc	#0x00
   00A9 9D 02 01      [ 5]  174 	sta	0x102,x
   00AC BD 01 01      [ 5]  175 	lda	0x101,x
   00AF 85*00         [ 3]  176 	sta	*(__DPTR+0)
   00B1 BD 02 01      [ 5]  177 	lda	0x102,x
   00B4 85*01         [ 3]  178 	sta	*(__DPTR+1)
   00B6 A0 00         [ 2]  179 	ldy	#0x00
   00B8 B1*00         [ 6]  180 	lda	[__DPTR],y
   00BA A2 00         [ 2]  181 	ldx	#0x00
   00BC 29 C0         [ 2]  182 	and	#0xc0
   00BE C9 80         [ 2]  183 	cmp	#0x80
   00C0 D0 04         [ 4]  184 	bne	00171$
   00C2 E0 00         [ 2]  185 	cpx	#0x00
   00C4 F0 C9         [ 4]  186 	beq	00116$
   00C6                     187 00171$:
                            188 ;	../mblen.c: 62: return(-1);
   00C6 A9 FF         [ 2]  189 	lda	#0xff
   00C8 AA            [ 2]  190 	tax
   00C9 4CrDBr00      [ 3]  191 	jmp	00119$
   00CC                     192 00118$:
                            193 ;	../mblen.c: 64: return(n);
   00CC BA            [ 2]  194 	tsx
   00CD BD 04 01      [ 5]  195 	lda	0x104,x
   00D0 AA            [ 2]  196 	tax
   00D1 86*00         [ 3]  197 	stx	*(__TEMP+0)
   00D3 BA            [ 2]  198 	tsx
   00D4 BD 03 01      [ 5]  199 	lda	0x103,x
   00D7 08            [ 3]  200 	php
   00D8 A6*00         [ 3]  201 	ldx	*(__TEMP+0)
   00DA 28            [ 4]  202 	plp
   00DB                     203 00119$:
                            204 ;	../mblen.c: 65: }
   00DB 85*00         [ 3]  205 	sta	*(__TEMP+0)
   00DD 68            [ 4]  206 	pla
   00DE 68            [ 4]  207 	pla
   00DF 68            [ 4]  208 	pla
   00E0 68            [ 4]  209 	pla
   00E1 68            [ 4]  210 	pla
   00E2 68            [ 4]  211 	pla
   00E3 68            [ 4]  212 	pla
   00E4 A5*00         [ 3]  213 	lda	*(__TEMP+0)
   00E6 60            [ 6]  214 	rts
                            215 	.area CODE
                            216 	.area RODATA
                            217 	.area XINIT
                            218 	.area CABS    (ABS)
