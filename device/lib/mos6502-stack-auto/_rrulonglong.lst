                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _rrulonglong
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl __rrulonglong
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function '_rrulonglong'
                             49 ;------------------------------------------------------------
                             50 ;l                         Allocated to stack - sp +15
                             51 ;s                         Allocated to stack - sp +23
                             52 ;b                         Allocated to stack - sp +11
                             53 ;shift                     Allocated to registers 
                             54 ;t1                        Allocated to registers y 
                             55 ;t2                        Allocated to stack - sp +5
                             56 ;zb                        Allocated to stack - sp +10
                             57 ;i                         Allocated to stack - sp +9
                             58 ;sloc0                     Allocated to stack - sp +7
                             59 ;sloc1                     Allocated to stack - sp +5
                             60 ;sloc2                     Allocated to stack - sp +3
                             61 ;sloc3                     Allocated to stack - sp +1
                             62 ;------------------------------------------------------------
                             63 ;	_rrulonglong.c: 8: unsigned long long _rrulonglong(unsigned long long l, char s)
                             64 ;	-----------------------------------------
                             65 ;	 function _rrulonglong
                             66 ;	-----------------------------------------
                             67 ;	Register assignment is optimal.
                             68 ;	Stack space usage: 12 bytes.
   0000                      69 __rrulonglong:
   0000 85*00         [ 3]   70 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   71 	stx	*(__TEMP+1)
   0004 BA            [ 2]   72 	tsx
   0005 8A            [ 2]   73 	txa
   0006 18            [ 2]   74 	clc
   0007 69 F4         [ 2]   75 	adc	#0xf4
   0009 AA            [ 2]   76 	tax
   000A 9A            [ 2]   77 	txs
   000B A6*01         [ 3]   78 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   79 	lda	*(__TEMP+0)
                             80 ;	_rrulonglong.c: 11: uint8_t *const b = (uint8_t *)(&l);
   000F BA            [ 2]   81 	tsx
   0010 8A            [ 2]   82 	txa
   0011 18            [ 2]   83 	clc
   0012 69 0F         [ 2]   84 	adc	#0x0f
   0014 A2 01         [ 2]   85 	ldx	#0x01
   0016 48            [ 3]   86 	pha
   0017 8A            [ 2]   87 	txa
   0018 BA            [ 2]   88 	tsx
   0019 9D 0D 01      [ 5]   89 	sta	0x10d,x
   001C 68            [ 4]   90 	pla
   001D 9D 0C 01      [ 5]   91 	sta	0x10c,x
                             92 ;	_rrulonglong.c: 15: zb=s>>3;
   0020 BD 18 01      [ 5]   93 	lda	0x118, x
   0023 C9 80         [ 2]   94 	cmp	#0x80
   0025 6A            [ 2]   95 	ror	a
   0026 C9 80         [ 2]   96 	cmp	#0x80
   0028 6A            [ 2]   97 	ror	a
   0029 C9 80         [ 2]   98 	cmp	#0x80
   002B 6A            [ 2]   99 	ror	a
                            100 ;	_rrulonglong.c: 16: if(zb) {
   002C 9D 0B 01      [ 5]  101 	sta	0x10b, x
   002F D0 03         [ 4]  102 	bne	00165$
   0031 4Cr1Cr01      [ 3]  103 	jmp	00104$
   0034                     104 00165$:
                            105 ;	_rrulonglong.c: 17: for(i=0;i<(8-zb);i++) {
   0034 A9 00         [ 2]  106 	lda	#0x00
   0036 9D 0A 01      [ 5]  107 	sta	0x10a,x
   0039                     108 00110$:
   0039 BA            [ 2]  109 	tsx
   003A BD 0A 01      [ 5]  110 	lda	0x10a,x
   003D 9D 07 01      [ 5]  111 	sta	0x107,x
   0040 0A            [ 2]  112 	asl	a
   0041 A9 00         [ 2]  113 	lda	#0x00
   0043 69 FF         [ 2]  114 	adc	#0xff
   0045 49 FF         [ 2]  115 	eor	#0xff
   0047 9D 08 01      [ 5]  116 	sta	0x108,x
   004A A9 08         [ 2]  117 	lda	#0x08
   004C 38            [ 2]  118 	sec
   004D FD 07 01      [ 5]  119 	sbc	0x107,x
   0050 9D 05 01      [ 5]  120 	sta	0x105,x
   0053 A9 00         [ 2]  121 	lda	#0x00
   0055 FD 08 01      [ 5]  122 	sbc	0x108,x
   0058 9D 06 01      [ 5]  123 	sta	0x106,x
   005B BD 09 01      [ 5]  124 	lda	0x109,x
   005E 9D 03 01      [ 5]  125 	sta	0x103,x
   0061 0A            [ 2]  126 	asl	a
   0062 A9 00         [ 2]  127 	lda	#0x00
   0064 69 FF         [ 2]  128 	adc	#0xff
   0066 49 FF         [ 2]  129 	eor	#0xff
   0068 9D 04 01      [ 5]  130 	sta	0x104,x
   006B BD 03 01      [ 5]  131 	lda	0x103,x
   006E 38            [ 2]  132 	sec
   006F FD 05 01      [ 5]  133 	sbc	0x105,x
   0072 BD 04 01      [ 5]  134 	lda	0x104,x
   0075 FD 06 01      [ 5]  135 	sbc	0x106,x
   0078 50 04         [ 4]  136 	bvc	00167$
   007A 10 04         [ 4]  137 	bpl	00166$
   007C 30 5D         [ 4]  138 	bmi	00126$
   007E                     139 00167$:
   007E 10 5B         [ 4]  140 	bpl	00126$
   0080                     141 00166$:
                            142 ;	_rrulonglong.c: 18: b[i]=b[zb+i];
   0080 BD 0B 01      [ 5]  143 	lda	0x10b,x
   0083 18            [ 2]  144 	clc
   0084 7D 03 01      [ 5]  145 	adc	0x103,x
   0087 9D 05 01      [ 5]  146 	sta	0x105,x
   008A BD 0C 01      [ 5]  147 	lda	0x10c,x
   008D 7D 04 01      [ 5]  148 	adc	0x104,x
   0090 9D 06 01      [ 5]  149 	sta	0x106,x
   0093 BD 07 01      [ 5]  150 	lda	0x107,x
   0096 18            [ 2]  151 	clc
   0097 7D 03 01      [ 5]  152 	adc	0x103,x
   009A 9D 03 01      [ 5]  153 	sta	0x103,x
   009D BD 08 01      [ 5]  154 	lda	0x108,x
   00A0 7D 04 01      [ 5]  155 	adc	0x104,x
   00A3 9D 04 01      [ 5]  156 	sta	0x104,x
   00A6 BD 0B 01      [ 5]  157 	lda	0x10b,x
   00A9 18            [ 2]  158 	clc
   00AA 7D 03 01      [ 5]  159 	adc	0x103,x
   00AD 48            [ 3]  160 	pha
   00AE BD 0C 01      [ 5]  161 	lda	0x10c,x
   00B1 7D 04 01      [ 5]  162 	adc	0x104,x
   00B4 AA            [ 2]  163 	tax
   00B5 68            [ 4]  164 	pla
   00B6 85*00         [ 3]  165 	sta	*(__DPTR+0)
   00B8 86*01         [ 3]  166 	stx	*(__DPTR+1)
   00BA A0 00         [ 2]  167 	ldy	#0x00
   00BC B1*00         [ 6]  168 	lda	[__DPTR],y
   00BE 85*00         [ 3]  169 	sta	*(__TEMP+0)
   00C0 BA            [ 2]  170 	tsx
   00C1 BD 05 01      [ 5]  171 	lda	0x105,x
   00C4 85*00         [ 3]  172 	sta	*(__DPTR+0)
   00C6 BD 06 01      [ 5]  173 	lda	0x106,x
   00C9 85*01         [ 3]  174 	sta	*(__DPTR+1)
   00CB A5*00         [ 3]  175 	lda	*(__TEMP+0)
   00CD 91*00         [ 6]  176 	sta	[__DPTR],y
                            177 ;	_rrulonglong.c: 17: for(i=0;i<(8-zb);i++) {
   00CF BD 09 01      [ 5]  178 	lda	0x109,x
   00D2 18            [ 2]  179 	clc
   00D3 69 01         [ 2]  180 	adc	#0x01
   00D5 9D 09 01      [ 5]  181 	sta	0x109,x
   00D8 4Cr39r00      [ 3]  182 	jmp	00110$
   00DB                     183 00126$:
   00DB BA            [ 2]  184 	tsx
   00DC BD 09 01      [ 5]  185 	lda	0x109,x
   00DF A8            [ 2]  186 	tay
   00E0                     187 00113$:
                            188 ;	_rrulonglong.c: 21: for(;i<8;i++)
   00E0 98            [ 2]  189 	tya
   00E1 38            [ 2]  190 	sec
   00E2 E9 08         [ 2]  191 	sbc	#0x08
   00E4 50 04         [ 4]  192 	bvc	00170$
   00E6 10 04         [ 4]  193 	bpl	00169$
   00E8 30 32         [ 4]  194 	bmi	00104$
   00EA                     195 00170$:
   00EA 10 30         [ 4]  196 	bpl	00104$
   00EC                     197 00169$:
                            198 ;	_rrulonglong.c: 22: b[i]=0;
   00EC BA            [ 2]  199 	tsx
   00ED 98            [ 2]  200 	tya
   00EE 9D 03 01      [ 5]  201 	sta	0x103,x
   00F1 0A            [ 2]  202 	asl	a
   00F2 A9 00         [ 2]  203 	lda	#0x00
   00F4 69 FF         [ 2]  204 	adc	#0xff
   00F6 49 FF         [ 2]  205 	eor	#0xff
   00F8 9D 04 01      [ 5]  206 	sta	0x104,x
   00FB BD 0B 01      [ 5]  207 	lda	0x10b,x
   00FE 18            [ 2]  208 	clc
   00FF 7D 03 01      [ 5]  209 	adc	0x103,x
   0102 48            [ 3]  210 	pha
   0103 BD 0C 01      [ 5]  211 	lda	0x10c,x
   0106 7D 04 01      [ 5]  212 	adc	0x104,x
   0109 AA            [ 2]  213 	tax
   010A 68            [ 4]  214 	pla
   010B 84*00         [ 3]  215 	sty	*(__TEMP+0)
   010D 85*00         [ 3]  216 	sta	*(__DPTR+0)
   010F 86*01         [ 3]  217 	stx	*(__DPTR+1)
   0111 A9 00         [ 2]  218 	lda	#0x00
   0113 A8            [ 2]  219 	tay
   0114 91*00         [ 6]  220 	sta	[__DPTR],y
   0116 A4*00         [ 3]  221 	ldy	*(__TEMP+0)
                            222 ;	_rrulonglong.c: 21: for(;i<8;i++)
   0118 C8            [ 2]  223 	iny
   0119 4CrE0r00      [ 3]  224 	jmp	00113$
   011C                     225 00104$:
                            226 ;	_rrulonglong.c: 25: shift=s&0x7;
   011C BA            [ 2]  227 	tsx
   011D BD 17 01      [ 5]  228 	lda	0x117,x
   0120 29 07         [ 2]  229 	and	#0x07
   0122 9D 03 01      [ 5]  230 	sta	0x103,x
                            231 ;	_rrulonglong.c: 26: while(shift--) {
   0125 A9 07         [ 2]  232 	lda	#0x07
   0127 38            [ 2]  233 	sec
   0128 FD 0A 01      [ 5]  234 	sbc	0x10a,x
   012B 9D 09 01      [ 5]  235 	sta	0x109,x
   012E                     236 00106$:
   012E BA            [ 2]  237 	tsx
   012F BD 03 01      [ 5]  238 	lda	0x103,x
   0132 9D 05 01      [ 5]  239 	sta	0x105,x
   0135 BD 03 01      [ 5]  240 	lda	0x103,x
   0138 38            [ 2]  241 	sec
   0139 E9 01         [ 2]  242 	sbc	#0x01
   013B 9D 03 01      [ 5]  243 	sta	0x103,x
   013E BD 05 01      [ 5]  244 	lda	0x105,x
   0141 D0 03         [ 4]  245 	bne	00172$
   0143 4CrD0r01      [ 3]  246 	jmp	00108$
   0146                     247 00172$:
                            248 ;	_rrulonglong.c: 27: t2=0;
   0146 A9 00         [ 2]  249 	lda	#0x00
   0148 9D 05 01      [ 5]  250 	sta	0x105,x
                            251 ;	_rrulonglong.c: 28: for(i=7-zb;i>=0;i--) {
   014B BD 09 01      [ 5]  252 	lda	0x109,x
   014E 9D 07 01      [ 5]  253 	sta	0x107,x
   0151                     254 00116$:
   0151 BA            [ 2]  255 	tsx
   0152 BD 07 01      [ 5]  256 	lda	0x107,x
   0155 38            [ 2]  257 	sec
   0156 E9 00         [ 2]  258 	sbc	#0x00
   0158 70 04         [ 4]  259 	bvs	00174$
   015A 10 04         [ 4]  260 	bpl	00173$
   015C 30 D0         [ 4]  261 	bmi	00106$
   015E                     262 00174$:
   015E 10 CE         [ 4]  263 	bpl	00106$
   0160                     264 00173$:
                            265 ;	_rrulonglong.c: 29: t1=b[i]&1;
   0160 BD 07 01      [ 5]  266 	lda	0x107,x
   0163 9D 01 01      [ 5]  267 	sta	0x101,x
   0166 0A            [ 2]  268 	asl	a
   0167 A9 00         [ 2]  269 	lda	#0x00
   0169 69 FF         [ 2]  270 	adc	#0xff
   016B 49 FF         [ 2]  271 	eor	#0xff
   016D 9D 02 01      [ 5]  272 	sta	0x102,x
   0170 BD 0B 01      [ 5]  273 	lda	0x10b,x
   0173 18            [ 2]  274 	clc
   0174 7D 01 01      [ 5]  275 	adc	0x101,x
   0177 9D 01 01      [ 5]  276 	sta	0x101,x
   017A BD 0C 01      [ 5]  277 	lda	0x10c,x
   017D 7D 02 01      [ 5]  278 	adc	0x102,x
   0180 9D 02 01      [ 5]  279 	sta	0x102,x
   0183 BD 01 01      [ 5]  280 	lda	0x101,x
   0186 85*00         [ 3]  281 	sta	*(__DPTR+0)
   0188 BD 02 01      [ 5]  282 	lda	0x102,x
   018B 85*01         [ 3]  283 	sta	*(__DPTR+1)
   018D A0 00         [ 2]  284 	ldy	#0x00
   018F B1*00         [ 6]  285 	lda	[__DPTR],y
   0191 AA            [ 2]  286 	tax
   0192 29 01         [ 2]  287 	and	#0x01
   0194 A8            [ 2]  288 	tay
                            289 ;	_rrulonglong.c: 30: b[i]=(b[i]>>1)|t2;
   0195 8A            [ 2]  290 	txa
   0196 4A            [ 2]  291 	lsr	a
   0197 BA            [ 2]  292 	tsx
   0198 1D 05 01      [ 5]  293 	ora	0x105,x
   019B 85*00         [ 3]  294 	sta	*(__TEMP+0)
   019D 84*01         [ 3]  295 	sty	*(__TEMP+1)
   019F BD 01 01      [ 5]  296 	lda	0x101,x
   01A2 85*00         [ 3]  297 	sta	*(__DPTR+0)
   01A4 BD 02 01      [ 5]  298 	lda	0x102,x
   01A7 85*01         [ 3]  299 	sta	*(__DPTR+1)
   01A9 A5*00         [ 3]  300 	lda	*(__TEMP+0)
   01AB A0 00         [ 2]  301 	ldy	#0x00
   01AD 91*00         [ 6]  302 	sta	[__DPTR],y
                            303 ;	_rrulonglong.c: 31: t2=t1?0x80:0;
   01AF A4*01         [ 3]  304 	ldy	*(__TEMP+1)
   01B1 F0 07         [ 4]  305 	beq	00120$
   01B3 A9 80         [ 2]  306 	lda	#0x80
   01B5 A2 00         [ 2]  307 	ldx	#0x00
   01B7 4CrBDr01      [ 3]  308 	jmp	00121$
   01BA                     309 00120$:
   01BA A9 00         [ 2]  310 	lda	#0x00
   01BC AA            [ 2]  311 	tax
   01BD                     312 00121$:
   01BD 86*00         [ 3]  313 	stx	*(__TEMP+0)
   01BF BA            [ 2]  314 	tsx
   01C0 9D 05 01      [ 5]  315 	sta	0x105,x
                            316 ;	_rrulonglong.c: 28: for(i=7-zb;i>=0;i--) {
   01C3 BA            [ 2]  317 	tsx
   01C4 BD 07 01      [ 5]  318 	lda	0x107,x
   01C7 38            [ 2]  319 	sec
   01C8 E9 01         [ 2]  320 	sbc	#0x01
   01CA 9D 07 01      [ 5]  321 	sta	0x107,x
   01CD 4Cr51r01      [ 3]  322 	jmp	00116$
   01D0                     323 00108$:
                            324 ;	_rrulonglong.c: 35: return(l);
   01D0 BA            [ 2]  325 	tsx
   01D1 BD 16 01      [ 5]  326 	lda	0x116,x
   01D4 85*00         [ 3]  327 	sta	*___SDCC_m6502_ret7
   01D6 BD 15 01      [ 5]  328 	lda	0x115,x
   01D9 85*00         [ 3]  329 	sta	*___SDCC_m6502_ret6
   01DB BD 14 01      [ 5]  330 	lda	0x114,x
   01DE 85*00         [ 3]  331 	sta	*___SDCC_m6502_ret5
   01E0 BD 13 01      [ 5]  332 	lda	0x113,x
   01E3 85*00         [ 3]  333 	sta	*___SDCC_m6502_ret4
   01E5 BD 12 01      [ 5]  334 	lda	0x112,x
   01E8 85*00         [ 3]  335 	sta	*___SDCC_m6502_ret3
   01EA BD 11 01      [ 5]  336 	lda	0x111,x
   01ED 85*00         [ 3]  337 	sta	*___SDCC_m6502_ret2
   01EF BD 10 01      [ 5]  338 	lda	0x110,x
   01F2 AA            [ 2]  339 	tax
   01F3 86*00         [ 3]  340 	stx	*(__TEMP+0)
   01F5 BA            [ 2]  341 	tsx
   01F6 BD 0F 01      [ 5]  342 	lda	0x10f,x
   01F9 08            [ 3]  343 	php
   01FA A6*00         [ 3]  344 	ldx	*(__TEMP+0)
   01FC 28            [ 4]  345 	plp
                            346 ;	_rrulonglong.c: 36: }
   01FD 85*00         [ 3]  347 	sta	*(__TEMP+0)
   01FF 86*01         [ 3]  348 	stx	*(__TEMP+1)
   0201 BA            [ 2]  349 	tsx
   0202 8A            [ 2]  350 	txa
   0203 18            [ 2]  351 	clc
   0204 69 0C         [ 2]  352 	adc	#0x0c
   0206 AA            [ 2]  353 	tax
   0207 9A            [ 2]  354 	txs
   0208 A6*01         [ 3]  355 	ldx	*(__TEMP+1)
   020A A5*00         [ 3]  356 	lda	*(__TEMP+0)
   020C 60            [ 6]  357 	rts
                            358 	.area CODE
                            359 	.area RODATA
                            360 	.area XINIT
                            361 	.area CABS    (ABS)
