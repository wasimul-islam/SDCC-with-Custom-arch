                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strchr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strchr
                             12 ;--------------------------------------------------------
                             13 ; ZP ram data
                             14 ;--------------------------------------------------------
                             15 	.area ZP      (PAG)
                             16 ;--------------------------------------------------------
                             17 ; overlayable items in ram
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; uninitialized external ram data
                             21 ;--------------------------------------------------------
                             22 	.area BSS
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area DABS    (ABS)
                             27 ;--------------------------------------------------------
                             28 ; initialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area DATA
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _CODE
                             35 	.area GSINIT
                             36 	.area GSFINAL
                             37 	.area GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 	.area _CODE
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area CODE
                             47 ;------------------------------------------------------------
                             48 ;Allocation info for local variables in function 'strchr'
                             49 ;------------------------------------------------------------
                             50 ;ch                        Allocated to stack - sp +5
                             51 ;string                    Allocated to registers 
                             52 ;sloc0                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../_strchr.c: 34: char * strchr ( const char * string, char ch )
                             55 ;	-----------------------------------------
                             56 ;	 function strchr
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 2 bytes.
   0000                      60 _strchr:
   0000 85*00         [ 3]   61 	sta	*(__TEMP+0)
   0002 8A            [ 2]   62 	txa
   0003 48            [ 3]   63 	pha
   0004 A5*00         [ 3]   64 	lda	*(__TEMP+0)
   0006 48            [ 3]   65 	pha
                             66 ;	../_strchr.c: 39: while (*string && *string != (char)ch)
   0007                      67 00102$:
   0007 BA            [ 2]   68 	tsx
   0008 BD 01 01      [ 5]   69 	lda	0x101,x
   000B 85*00         [ 3]   70 	sta	*(__DPTR+0)
   000D BD 02 01      [ 5]   71 	lda	0x102,x
   0010 85*01         [ 3]   72 	sta	*(__DPTR+1)
   0012 A0 00         [ 2]   73 	ldy	#0x00
   0014 B1*00         [ 6]   74 	lda	[__DPTR],y
   0016 F0 19         [ 4]   75 	beq	00104$
   0018 DD 05 01      [ 5]   76 	cmp	0x105,x
   001B F0 14         [ 4]   77 	beq	00104$
                             78 ;	../_strchr.c: 40: string++;
   001D BD 01 01      [ 5]   79 	lda	0x101,x
   0020 18            [ 2]   80 	clc
   0021 69 01         [ 2]   81 	adc	#0x01
   0023 9D 01 01      [ 5]   82 	sta	0x101,x
   0026 BD 02 01      [ 5]   83 	lda	0x102,x
   0029 69 00         [ 2]   84 	adc	#0x00
   002B 9D 02 01      [ 5]   85 	sta	0x102,x
   002E 4Cr07r00      [ 3]   86 	jmp	00102$
   0031                      87 00104$:
                             88 ;	../_strchr.c: 42: if (*string == (char)ch)
   0031 BA            [ 2]   89 	tsx
   0032 BD 01 01      [ 5]   90 	lda	0x101,x
   0035 85*00         [ 3]   91 	sta	*(__DPTR+0)
   0037 BD 02 01      [ 5]   92 	lda	0x102,x
   003A 85*01         [ 3]   93 	sta	*(__DPTR+1)
   003C A0 00         [ 2]   94 	ldy	#0x00
   003E B1*00         [ 6]   95 	lda	[__DPTR],y
   0040 DD 05 01      [ 5]   96 	cmp	0x105,x
   0043 D0 11         [ 4]   97 	bne	00106$
                             98 ;	../_strchr.c: 43: return((char *)string);
   0045 BD 02 01      [ 5]   99 	lda	0x102,x
   0048 AA            [ 2]  100 	tax
   0049 86*00         [ 3]  101 	stx	*(__TEMP+0)
   004B BA            [ 2]  102 	tsx
   004C BD 01 01      [ 5]  103 	lda	0x101,x
   004F 08            [ 3]  104 	php
   0050 A6*00         [ 3]  105 	ldx	*(__TEMP+0)
   0052 28            [ 4]  106 	plp
   0053 4Cr59r00      [ 3]  107 	jmp	00107$
   0056                     108 00106$:
                            109 ;	../_strchr.c: 44: return ( NULL );
   0056 A9 00         [ 2]  110 	lda	#0x00
   0058 AA            [ 2]  111 	tax
   0059                     112 00107$:
                            113 ;	../_strchr.c: 45: }
   0059 85*00         [ 3]  114 	sta	*(__TEMP+0)
   005B 68            [ 4]  115 	pla
   005C 68            [ 4]  116 	pla
   005D A5*00         [ 3]  117 	lda	*(__TEMP+0)
   005F 60            [ 6]  118 	rts
                            119 	.area CODE
                            120 	.area RODATA
                            121 	.area XINIT
                            122 	.area CABS    (ABS)
