                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module c16rtomb
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _wctomb
                             12 	.globl _c16rtomb
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
   0000                      24 _c16rtomb_sps_65536_43:
   0000                      25 	.ds 3
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area DABS    (ABS)
                             30 ;--------------------------------------------------------
                             31 ; initialized external ram data
                             32 ;--------------------------------------------------------
                             33 	.area DATA
                             34 ;--------------------------------------------------------
                             35 ; global & static initialisations
                             36 ;--------------------------------------------------------
                             37 	.area _CODE
                             38 	.area GSINIT
                             39 	.area GSFINAL
                             40 	.area GSINIT
                             41 ;--------------------------------------------------------
                             42 ; Home
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 	.area _CODE
                             46 ;--------------------------------------------------------
                             47 ; code
                             48 ;--------------------------------------------------------
                             49 	.area CODE
                             50 ;------------------------------------------------------------
                             51 ;Allocation info for local variables in function 'c16rtomb'
                             52 ;------------------------------------------------------------
                             53 ;c16                       Allocated to stack - sp +31
                             54 ;ps                        Allocated to stack - sp +33
                             55 ;s                         Allocated to stack - sp +27
                             56 ;codepoint                 Allocated to stack - sp +5
                             57 ;buf                       Allocated to stack - sp +1
                             58 ;high_surrogate            Allocated to stack - sp +25
                             59 ;sloc0                     Allocated to stack - sp +23
                             60 ;sloc1                     Allocated to stack - sp +21
                             61 ;sloc2                     Allocated to stack - sp +19
                             62 ;sloc3                     Allocated to stack - sp +17
                             63 ;sloc4                     Allocated to stack - sp +15
                             64 ;sloc5                     Allocated to stack - sp +13
                             65 ;sloc6                     Allocated to stack - sp +9
                             66 ;sps                       Allocated with name '_c16rtomb_sps_65536_43'
                             67 ;------------------------------------------------------------
                             68 ;	../c16rtomb.c: 35: size_t c16rtomb(char *restrict s, char16_t c16, mbstate_t *restrict ps)
                             69 ;	-----------------------------------------
                             70 ;	 function c16rtomb
                             71 ;	-----------------------------------------
                             72 ;	Register assignment is optimal.
                             73 ;	Stack space usage: 28 bytes.
   0000                      74 _c16rtomb:
   0000 85*00         [ 3]   75 	sta	*(__TEMP+0)
   0002 8A            [ 2]   76 	txa
   0003 48            [ 3]   77 	pha
   0004 A5*00         [ 3]   78 	lda	*(__TEMP+0)
   0006 48            [ 3]   79 	pha
   0007 86*01         [ 3]   80 	stx	*(__TEMP+1)
   0009 BA            [ 2]   81 	tsx
   000A 8A            [ 2]   82 	txa
   000B 18            [ 2]   83 	clc
   000C 69 E6         [ 2]   84 	adc	#0xe6
   000E AA            [ 2]   85 	tax
   000F 9A            [ 2]   86 	txs
   0010 A6*01         [ 3]   87 	ldx	*(__TEMP+1)
   0012 A5*00         [ 3]   88 	lda	*(__TEMP+0)
                             89 ;	../c16rtomb.c: 41: if(!s)
   0014 BA            [ 2]   90 	tsx
   0015 BD 1B 01      [ 5]   91 	lda	0x11b,x
   0018 1D 1C 01      [ 5]   92 	ora	0x11c,x
   001B D0 11         [ 4]   93 	bne	00102$
                             94 ;	../c16rtomb.c: 42: s = buf;
   001D E8            [ 2]   95 	inx
   001E 8A            [ 2]   96 	txa
   001F A2 01         [ 2]   97 	ldx	#0x01
   0021 48            [ 3]   98 	pha
   0022 8A            [ 2]   99 	txa
   0023 BA            [ 2]  100 	tsx
   0024 9D 1D 01      [ 5]  101 	sta	0x11d,x
   0027 68            [ 4]  102 	pla
   0028 9D 1C 01      [ 5]  103 	sta	0x11c,x
   002B BD 1D 01      [ 5]  104 	lda	0x11d,x
   002E                     105 00102$:
                            106 ;	../c16rtomb.c: 44: if(!ps)
   002E BA            [ 2]  107 	tsx
   002F BD 21 01      [ 5]  108 	lda	0x121,x
   0032 1D 22 01      [ 5]  109 	ora	0x122,x
   0035 D0 0A         [ 4]  110 	bne	00104$
                            111 ;	../c16rtomb.c: 45: ps = &sps;
   0037 A9r00         [ 2]  112 	lda	#_c16rtomb_sps_65536_43
   0039 9D 21 01      [ 5]  113 	sta	0x121,x
   003C A9s00         [ 2]  114 	lda	#>_c16rtomb_sps_65536_43
   003E 9D 22 01      [ 5]  115 	sta	0x122,x
   0041                     116 00104$:
                            117 ;	../c16rtomb.c: 47: if (!c16) // 0 always resets conversion state.
   0041 BA            [ 2]  118 	tsx
   0042 BD 1F 01      [ 5]  119 	lda	0x11f,x
   0045 1D 20 01      [ 5]  120 	ora	0x120,x
   0048 D0 46         [ 4]  121 	bne	00119$
                            122 ;	../c16rtomb.c: 49: ps->c[1] = ps->c[2] = 0;
   004A BD 21 01      [ 5]  123 	lda	0x121,x
   004D 9D 17 01      [ 5]  124 	sta	0x117,x
   0050 BD 22 01      [ 5]  125 	lda	0x122,x
   0053 9D 18 01      [ 5]  126 	sta	0x118,x
   0056 BD 17 01      [ 5]  127 	lda	0x117,x
   0059 9D 15 01      [ 5]  128 	sta	0x115,x
   005C BD 18 01      [ 5]  129 	lda	0x118,x
   005F 9D 16 01      [ 5]  130 	sta	0x116,x
   0062 BD 17 01      [ 5]  131 	lda	0x117,x
   0065 85*00         [ 3]  132 	sta	*(__DPTR+0)
   0067 BD 18 01      [ 5]  133 	lda	0x118,x
   006A 85*01         [ 3]  134 	sta	*(__DPTR+1)
   006C A9 00         [ 2]  135 	lda	#0x00
   006E A0 02         [ 2]  136 	ldy	#0x02
   0070 91*00         [ 6]  137 	sta	[__DPTR],y
   0072 BD 15 01      [ 5]  138 	lda	0x115,x
   0075 85*00         [ 3]  139 	sta	*(__DPTR+0)
   0077 BD 16 01      [ 5]  140 	lda	0x116,x
   007A 85*01         [ 3]  141 	sta	*(__DPTR+1)
   007C A9 00         [ 2]  142 	lda	#0x00
   007E 88            [ 2]  143 	dey
   007F 91*00         [ 6]  144 	sta	[__DPTR],y
                            145 ;	../c16rtomb.c: 50: codepoint = 0;
   0081 9D 05 01      [ 5]  146 	sta	0x105,x
   0084 9D 06 01      [ 5]  147 	sta	0x106,x
   0087 9D 07 01      [ 5]  148 	sta	0x107,x
   008A 9D 08 01      [ 5]  149 	sta	0x108,x
   008D 4Cr2Dr02      [ 3]  150 	jmp	00120$
   0090                     151 00119$:
                            152 ;	../c16rtomb.c: 52: else if(ps->c[1] || ps->c[2]) // We already have the high surrogate. Now get the low surrogate
   0090 BA            [ 2]  153 	tsx
   0091 BD 21 01      [ 5]  154 	lda	0x121,x
   0094 9D 15 01      [ 5]  155 	sta	0x115,x
   0097 BD 22 01      [ 5]  156 	lda	0x122,x
   009A 9D 16 01      [ 5]  157 	sta	0x116,x
   009D BD 15 01      [ 5]  158 	lda	0x115,x
   00A0 9D 17 01      [ 5]  159 	sta	0x117,x
   00A3 BD 16 01      [ 5]  160 	lda	0x116,x
   00A6 9D 18 01      [ 5]  161 	sta	0x118,x
   00A9 BD 17 01      [ 5]  162 	lda	0x117,x
   00AC 85*00         [ 3]  163 	sta	*(__DPTR+0)
   00AE BD 18 01      [ 5]  164 	lda	0x118,x
   00B1 85*01         [ 3]  165 	sta	*(__DPTR+1)
   00B3 A0 01         [ 2]  166 	ldy	#0x01
   00B5 B1*00         [ 6]  167 	lda	[__DPTR],y
   00B7 D0 12         [ 4]  168 	bne	00114$
   00B9 BD 15 01      [ 5]  169 	lda	0x115,x
   00BC 85*00         [ 3]  170 	sta	*(__DPTR+0)
   00BE BD 16 01      [ 5]  171 	lda	0x116,x
   00C1 85*01         [ 3]  172 	sta	*(__DPTR+1)
   00C3 C8            [ 2]  173 	iny
   00C4 B1*00         [ 6]  174 	lda	[__DPTR],y
   00C6 D0 03         [ 4]  175 	bne	00160$
   00C8 4CrC2r01      [ 3]  176 	jmp	00115$
   00CB                     177 00160$:
   00CB                     178 00114$:
                            179 ;	../c16rtomb.c: 56: if(c16 < 0xdc00 || c16 > 0xdfff)
   00CB BA            [ 2]  180 	tsx
   00CC BD 20 01      [ 5]  181 	lda	0x120,x
   00CF 38            [ 2]  182 	sec
   00D0 E9 DC         [ 2]  183 	sbc	#0xdc
   00D2 B0 03         [ 4]  184 	bcs	00161$
   00D4 4Cr5Ar02      [ 3]  185 	jmp	00121$
   00D7                     186 00161$:
   00D7 A9 FF         [ 2]  187 	lda	#0xff
   00D9 38            [ 2]  188 	sec
   00DA FD 1F 01      [ 5]  189 	sbc	0x11f,x
   00DD A9 DF         [ 2]  190 	lda	#0xdf
   00DF FD 20 01      [ 5]  191 	sbc	0x120,x
   00E2 B0 03         [ 4]  192 	bcs	00162$
   00E4 4Cr5Ar02      [ 3]  193 	jmp	00121$
   00E7                     194 00162$:
                            195 ;	../c16rtomb.c: 59: high_surrogate = ps->c[1] + (ps->c[2] << 8);
   00E7 BD 21 01      [ 5]  196 	lda	0x121,x
   00EA 9D 13 01      [ 5]  197 	sta	0x113,x
   00ED BD 22 01      [ 5]  198 	lda	0x122,x
   00F0 9D 14 01      [ 5]  199 	sta	0x114,x
   00F3 BD 13 01      [ 5]  200 	lda	0x113,x
   00F6 9D 11 01      [ 5]  201 	sta	0x111,x
   00F9 BD 14 01      [ 5]  202 	lda	0x114,x
   00FC 9D 12 01      [ 5]  203 	sta	0x112,x
   00FF BD 11 01      [ 5]  204 	lda	0x111,x
   0102 85*00         [ 3]  205 	sta	*(__DPTR+0)
   0104 BD 12 01      [ 5]  206 	lda	0x112,x
   0107 85*01         [ 3]  207 	sta	*(__DPTR+1)
   0109 A0 01         [ 2]  208 	ldy	#0x01
   010B B1*00         [ 6]  209 	lda	[__DPTR],y
   010D A8            [ 2]  210 	tay
   010E 9D 0F 01      [ 5]  211 	sta	0x10f,x
   0111 A9 00         [ 2]  212 	lda	#0x00
   0113 9D 10 01      [ 5]  213 	sta	0x110,x
   0116 BD 13 01      [ 5]  214 	lda	0x113,x
   0119 85*00         [ 3]  215 	sta	*(__DPTR+0)
   011B BD 14 01      [ 5]  216 	lda	0x114,x
   011E 85*01         [ 3]  217 	sta	*(__DPTR+1)
   0120 A0 02         [ 2]  218 	ldy	#0x02
   0122 B1*00         [ 6]  219 	lda	[__DPTR],y
   0124 A2 00         [ 2]  220 	ldx	#0x00
   0126 86*00         [ 3]  221 	stx	*(__TEMP+0)
   0128 BA            [ 2]  222 	tsx
   0129 9D 0E 01      [ 5]  223 	sta	0x10e,x
   012C A2 00         [ 2]  224 	ldx	#0x00
   012E 48            [ 3]  225 	pha
   012F 8A            [ 2]  226 	txa
   0130 86*00         [ 3]  227 	stx	*(__TEMP+0)
   0132 BA            [ 2]  228 	tsx
   0133 9D 0E 01      [ 5]  229 	sta	0x10e,x
   0136 AA            [ 2]  230 	tax
   0137 68            [ 4]  231 	pla
   0138 BA            [ 2]  232 	tsx
   0139 BD 0F 01      [ 5]  233 	lda	0x10f,x
   013C 18            [ 2]  234 	clc
   013D 7D 0D 01      [ 5]  235 	adc	0x10d,x
   0140 9D 19 01      [ 5]  236 	sta	0x119,x
   0143 BD 10 01      [ 5]  237 	lda	0x110,x
   0146 7D 0E 01      [ 5]  238 	adc	0x10e,x
   0149 9D 1A 01      [ 5]  239 	sta	0x11a,x
                            240 ;	../c16rtomb.c: 60: ps->c[1] = ps->c[2] = 0;
   014C BD 13 01      [ 5]  241 	lda	0x113,x
   014F 85*00         [ 3]  242 	sta	*(__DPTR+0)
   0151 BD 14 01      [ 5]  243 	lda	0x114,x
   0154 85*01         [ 3]  244 	sta	*(__DPTR+1)
   0156 A9 00         [ 2]  245 	lda	#0x00
   0158 91*00         [ 6]  246 	sta	[__DPTR],y
   015A BD 11 01      [ 5]  247 	lda	0x111,x
   015D 85*00         [ 3]  248 	sta	*(__DPTR+0)
   015F BD 12 01      [ 5]  249 	lda	0x112,x
   0162 85*01         [ 3]  250 	sta	*(__DPTR+1)
   0164 A9 00         [ 2]  251 	lda	#0x00
   0166 88            [ 2]  252 	dey
   0167 91*00         [ 6]  253 	sta	[__DPTR],y
                            254 ;	../c16rtomb.c: 61: codepoint = (high_surrogate << 10) - (0xd800 << 10) + c16 - 0xdc00 + 0x10000;
   0169 BD 19 01      [ 5]  255 	lda	0x119,x
   016C 0A            [ 2]  256 	asl	a
   016D 0A            [ 2]  257 	asl	a
   016E 9D 0E 01      [ 5]  258 	sta	0x10e,x
   0171 48            [ 3]  259 	pha
   0172 A9 00         [ 2]  260 	lda	#0x00
   0174 9D 0D 01      [ 5]  261 	sta	0x10d,x
   0177 68            [ 4]  262 	pla
   0178 BD 0D 01      [ 5]  263 	lda	0x10d,x
   017B 18            [ 2]  264 	clc
   017C 7D 1F 01      [ 5]  265 	adc	0x11f,x
   017F 9D 0D 01      [ 5]  266 	sta	0x10d,x
   0182 BD 0E 01      [ 5]  267 	lda	0x10e,x
   0185 7D 20 01      [ 5]  268 	adc	0x120,x
   0188 9D 0E 01      [ 5]  269 	sta	0x10e,x
   018B BD 0D 01      [ 5]  270 	lda	0x10d,x
   018E 9D 09 01      [ 5]  271 	sta	0x109,x
   0191 BD 0E 01      [ 5]  272 	lda	0x10e,x
   0194 9D 0A 01      [ 5]  273 	sta	0x10a,x
   0197 A9 00         [ 2]  274 	lda	#0x00
   0199 9D 0B 01      [ 5]  275 	sta	0x10b,x
   019C 9D 0C 01      [ 5]  276 	sta	0x10c,x
   019F BD 09 01      [ 5]  277 	lda	0x109,x
   01A2 18            [ 2]  278 	clc
   01A3 9D 05 01      [ 5]  279 	sta	0x105,x
   01A6 BD 0A 01      [ 5]  280 	lda	0x10a,x
   01A9 18            [ 2]  281 	clc
   01AA 69 24         [ 2]  282 	adc	#0x24
   01AC 9D 06 01      [ 5]  283 	sta	0x106,x
   01AF BD 0B 01      [ 5]  284 	lda	0x10b,x
   01B2 69 00         [ 2]  285 	adc	#0x00
   01B4 9D 07 01      [ 5]  286 	sta	0x107,x
   01B7 BD 0C 01      [ 5]  287 	lda	0x10c,x
   01BA 69 00         [ 2]  288 	adc	#0x00
   01BC 9D 08 01      [ 5]  289 	sta	0x108,x
   01BF 4Cr2Dr02      [ 3]  290 	jmp	00120$
   01C2                     291 00115$:
                            292 ;	../c16rtomb.c: 63: else if(c16 < 0xd7ff || c16 >= 0xe000) // Basic multilingual plane.
   01C2 BA            [ 2]  293 	tsx
   01C3 BD 1F 01      [ 5]  294 	lda	0x11f,x
   01C6 38            [ 2]  295 	sec
   01C7 E9 FF         [ 2]  296 	sbc	#0xff
   01C9 BD 20 01      [ 5]  297 	lda	0x120,x
   01CC E9 D7         [ 2]  298 	sbc	#0xd7
   01CE 90 08         [ 4]  299 	bcc	00110$
   01D0 BD 20 01      [ 5]  300 	lda	0x120,x
   01D3 38            [ 2]  301 	sec
   01D4 E9 E0         [ 2]  302 	sbc	#0xe0
   01D6 90 18         [ 4]  303 	bcc	00111$
   01D8                     304 00110$:
                            305 ;	../c16rtomb.c: 64: codepoint = c16;
   01D8 BA            [ 2]  306 	tsx
   01D9 BD 1F 01      [ 5]  307 	lda	0x11f,x
   01DC 9D 05 01      [ 5]  308 	sta	0x105,x
   01DF BD 20 01      [ 5]  309 	lda	0x120,x
   01E2 9D 06 01      [ 5]  310 	sta	0x106,x
   01E5 A9 00         [ 2]  311 	lda	#0x00
   01E7 9D 07 01      [ 5]  312 	sta	0x107,x
   01EA 9D 08 01      [ 5]  313 	sta	0x108,x
   01ED 4Cr2Dr02      [ 3]  314 	jmp	00120$
   01F0                     315 00111$:
                            316 ;	../c16rtomb.c: 67: if(c16 > 0xdbff)
   01F0 BA            [ 2]  317 	tsx
   01F1 A9 FF         [ 2]  318 	lda	#0xff
   01F3 38            [ 2]  319 	sec
   01F4 FD 1F 01      [ 5]  320 	sbc	0x11f,x
   01F7 A9 DB         [ 2]  321 	lda	#0xdb
   01F9 FD 20 01      [ 5]  322 	sbc	0x120,x
   01FC 90 5C         [ 4]  323 	bcc	00121$
                            324 ;	../c16rtomb.c: 70: ps->c[1] = c16 & 0xff;
   01FE BD 1F 01      [ 5]  325 	lda	0x11f,x
   0201 85*00         [ 3]  326 	sta	*(__TEMP+0)
   0203 BD 17 01      [ 5]  327 	lda	0x117,x
   0206 85*00         [ 3]  328 	sta	*(__DPTR+0)
   0208 BD 18 01      [ 5]  329 	lda	0x118,x
   020B 85*01         [ 3]  330 	sta	*(__DPTR+1)
   020D A5*00         [ 3]  331 	lda	*(__TEMP+0)
   020F A0 01         [ 2]  332 	ldy	#0x01
   0211 91*00         [ 6]  333 	sta	[__DPTR],y
                            334 ;	../c16rtomb.c: 71: ps->c[2] = c16 >> 8;
   0213 BD 20 01      [ 5]  335 	lda	0x120,x
   0216 85*00         [ 3]  336 	sta	*(__TEMP+0)
   0218 BD 15 01      [ 5]  337 	lda	0x115,x
   021B 85*00         [ 3]  338 	sta	*(__DPTR+0)
   021D BD 16 01      [ 5]  339 	lda	0x116,x
   0220 85*01         [ 3]  340 	sta	*(__DPTR+1)
   0222 A5*00         [ 3]  341 	lda	*(__TEMP+0)
   0224 C8            [ 2]  342 	iny
   0225 91*00         [ 6]  343 	sta	[__DPTR],y
                            344 ;	../c16rtomb.c: 72: return(0);
   0227 A9 00         [ 2]  345 	lda	#0x00
   0229 AA            [ 2]  346 	tax
   022A 4Cr67r02      [ 3]  347 	jmp	00122$
   022D                     348 00120$:
                            349 ;	../c16rtomb.c: 75: return(wctomb(s, codepoint));
   022D BA            [ 2]  350 	tsx
   022E BD 08 01      [ 5]  351 	lda	0x108,x
   0231 48            [ 3]  352 	pha
   0232 BD 07 01      [ 5]  353 	lda	0x107,x
   0235 48            [ 3]  354 	pha
   0236 BD 06 01      [ 5]  355 	lda	0x106,x
   0239 48            [ 3]  356 	pha
   023A BD 05 01      [ 5]  357 	lda	0x105,x
   023D 48            [ 3]  358 	pha
   023E BD 1C 01      [ 5]  359 	lda	0x11c,x
   0241 AA            [ 2]  360 	tax
   0242 86*00         [ 3]  361 	stx	*(__TEMP+0)
   0244 BA            [ 2]  362 	tsx
   0245 BD 1F 01      [ 5]  363 	lda	0x11f,x
   0248 08            [ 3]  364 	php
   0249 A6*00         [ 3]  365 	ldx	*(__TEMP+0)
   024B 28            [ 4]  366 	plp
   024C 20r00r00      [ 6]  367 	jsr	_wctomb
   024F 85*00         [ 3]  368 	sta	*(__TEMP+0)
   0251 68            [ 4]  369 	pla
   0252 68            [ 4]  370 	pla
   0253 68            [ 4]  371 	pla
   0254 68            [ 4]  372 	pla
   0255 A5*00         [ 3]  373 	lda	*(__TEMP+0)
   0257 4Cr67r02      [ 3]  374 	jmp	00122$
                            375 ;	../c16rtomb.c: 77: eilseq:
   025A                     376 00121$:
                            377 ;	../c16rtomb.c: 78: errno = EILSEQ;
   025A A2 54         [ 2]  378 	ldx	#0x54
   025C 8Er00r00      [ 4]  379 	stx	_errno
   025F A2 00         [ 2]  380 	ldx	#0x00
   0261 8Er01r00      [ 4]  381 	stx	(_errno + 1)
                            382 ;	../c16rtomb.c: 79: return(-1);
   0264 A9 FF         [ 2]  383 	lda	#0xff
   0266 AA            [ 2]  384 	tax
   0267                     385 00122$:
                            386 ;	../c16rtomb.c: 80: }
   0267 85*00         [ 3]  387 	sta	*(__TEMP+0)
   0269 86*01         [ 3]  388 	stx	*(__TEMP+1)
   026B BA            [ 2]  389 	tsx
   026C 8A            [ 2]  390 	txa
   026D 18            [ 2]  391 	clc
   026E 69 1C         [ 2]  392 	adc	#0x1c
   0270 AA            [ 2]  393 	tax
   0271 9A            [ 2]  394 	txs
   0272 A6*01         [ 3]  395 	ldx	*(__TEMP+1)
   0274 A5*00         [ 3]  396 	lda	*(__TEMP+0)
   0276 60            [ 6]  397 	rts
                            398 	.area CODE
                            399 	.area RODATA
                            400 	.area XINIT
                            401 	.area CABS    (ABS)
