                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module puts
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _putchar
                             12 	.globl _puts
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'puts'
                             50 ;------------------------------------------------------------
                             51 ;s                         Allocated to registers 
                             52 ;sloc0                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../puts.c: 31: int puts (const char *s)
                             55 ;	-----------------------------------------
                             56 ;	 function puts
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 2 bytes.
   0000                      60 _puts:
   0000 85*00         [ 3]   61 	sta	*(__TEMP+0)
   0002 8A            [ 2]   62 	txa
   0003 48            [ 3]   63 	pha
   0004 A5*00         [ 3]   64 	lda	*(__TEMP+0)
   0006 48            [ 3]   65 	pha
                             66 ;	../puts.c: 33: while (*s)
   0007                      67 00103$:
   0007 BA            [ 2]   68 	tsx
   0008 BD 01 01      [ 5]   69 	lda	0x101,x
   000B 85*00         [ 3]   70 	sta	*(__DPTR+0)
   000D BD 02 01      [ 5]   71 	lda	0x102,x
   0010 85*01         [ 3]   72 	sta	*(__DPTR+1)
   0012 A0 00         [ 2]   73 	ldy	#0x00
   0014 B1*00         [ 6]   74 	lda	[__DPTR],y
   0016 F0 26         [ 4]   75 	beq	00105$
                             76 ;	../puts.c: 34: if (putchar(*s++) == EOF)
   0018 A8            [ 2]   77 	tay
   0019 BD 01 01      [ 5]   78 	lda	0x101,x
   001C 18            [ 2]   79 	clc
   001D 69 01         [ 2]   80 	adc	#0x01
   001F 9D 01 01      [ 5]   81 	sta	0x101,x
   0022 BD 02 01      [ 5]   82 	lda	0x102,x
   0025 69 00         [ 2]   83 	adc	#0x00
   0027 9D 02 01      [ 5]   84 	sta	0x102,x
   002A 98            [ 2]   85 	tya
   002B A2 00         [ 2]   86 	ldx	#0x00
   002D 20r00r00      [ 6]   87 	jsr	_putchar
   0030 C9 FF         [ 2]   88 	cmp	#0xff
   0032 D0 D3         [ 4]   89 	bne	00103$
   0034 E0 FF         [ 2]   90 	cpx	#0xff
   0036 D0 CF         [ 4]   91 	bne	00103$
                             92 ;	../puts.c: 35: return EOF;
   0038 A9 FF         [ 2]   93 	lda	#0xff
   003A AA            [ 2]   94 	tax
   003B 4Cr45r00      [ 3]   95 	jmp	00106$
   003E                      96 00105$:
                             97 ;	../puts.c: 36: return putchar('\n');
   003E A2 00         [ 2]   98 	ldx	#0x00
   0040 A9 0A         [ 2]   99 	lda	#0x0a
   0042 20r00r00      [ 6]  100 	jsr	_putchar
   0045                     101 00106$:
                            102 ;	../puts.c: 37: }
   0045 85*00         [ 3]  103 	sta	*(__TEMP+0)
   0047 68            [ 4]  104 	pla
   0048 68            [ 4]  105 	pla
   0049 A5*00         [ 3]  106 	lda	*(__TEMP+0)
   004B 60            [ 6]  107 	rts
                            108 	.area CODE
                            109 	.area RODATA
                            110 	.area XINIT
                            111 	.area CABS    (ABS)
