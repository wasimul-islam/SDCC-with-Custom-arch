                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module vprintf
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _putchar
                             12 	.globl __print_format
                             13 	.globl _vprintf
                             14 	.globl _printf
                             15 ;--------------------------------------------------------
                             16 ; ZP ram data
                             17 ;--------------------------------------------------------
                             18 	.area ZP      (PAG)
                             19 ;--------------------------------------------------------
                             20 ; overlayable items in ram
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; uninitialized external ram data
                             24 ;--------------------------------------------------------
                             25 	.area BSS
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area DABS    (ABS)
                             30 ;--------------------------------------------------------
                             31 ; initialized external ram data
                             32 ;--------------------------------------------------------
                             33 	.area DATA
                             34 ;--------------------------------------------------------
                             35 ; global & static initialisations
                             36 ;--------------------------------------------------------
                             37 	.area _CODE
                             38 	.area GSINIT
                             39 	.area GSFINAL
                             40 	.area GSINIT
                             41 ;--------------------------------------------------------
                             42 ; Home
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 	.area _CODE
                             46 ;--------------------------------------------------------
                             47 ; code
                             48 ;--------------------------------------------------------
                             49 	.area CODE
                             50 ;------------------------------------------------------------
                             51 ;Allocation info for local variables in function 'put_char_to_stdout'
                             52 ;------------------------------------------------------------
                             53 ;p                         Allocated to stack - sp +3
                             54 ;c                         Allocated to registers a 
                             55 ;------------------------------------------------------------
                             56 ;	../vprintf.c: 34: put_char_to_stdout (char c, void* p) _REENTRANT
                             57 ;	-----------------------------------------
                             58 ;	 function put_char_to_stdout
                             59 ;	-----------------------------------------
                             60 ;	Register assignment is optimal.
                             61 ;	Stack space usage: 0 bytes.
   0000                      62 _put_char_to_stdout:
                             63 ;	../vprintf.c: 37: putchar (c);
   0000 A2 00         [ 2]   64 	ldx	#0x00
                             65 ;	../vprintf.c: 38: }
   0002 4Cr00r00      [ 3]   66 	jmp	_putchar
                             67 ;------------------------------------------------------------
                             68 ;Allocation info for local variables in function 'vprintf'
                             69 ;------------------------------------------------------------
                             70 ;ap                        Allocated to stack - sp +5
                             71 ;format                    Allocated to stack - sp +1
                             72 ;------------------------------------------------------------
                             73 ;	../vprintf.c: 41: vprintf (const char *format, va_list ap)
                             74 ;	-----------------------------------------
                             75 ;	 function vprintf
                             76 ;	-----------------------------------------
                             77 ;	Register assignment is optimal.
                             78 ;	Stack space usage: 2 bytes.
   0005                      79 _vprintf:
   0005 85*00         [ 3]   80 	sta	*(__TEMP+0)
   0007 8A            [ 2]   81 	txa
   0008 48            [ 3]   82 	pha
   0009 A5*00         [ 3]   83 	lda	*(__TEMP+0)
   000B 48            [ 3]   84 	pha
                             85 ;	../vprintf.c: 43: return _print_format (put_char_to_stdout, NULL, format, ap);
   000C BA            [ 2]   86 	tsx
   000D BD 06 01      [ 5]   87 	lda	0x106,x
   0010 48            [ 3]   88 	pha
   0011 BD 05 01      [ 5]   89 	lda	0x105,x
   0014 48            [ 3]   90 	pha
   0015 BD 02 01      [ 5]   91 	lda	0x102,x
   0018 48            [ 3]   92 	pha
   0019 BD 01 01      [ 5]   93 	lda	0x101,x
   001C 48            [ 3]   94 	pha
   001D A9 00         [ 2]   95 	lda	#0x00
   001F 48            [ 3]   96 	pha
   0020 48            [ 3]   97 	pha
   0021 A2s00         [ 2]   98 	ldx	#>(_put_char_to_stdout)
   0023 A9r00         [ 2]   99 	lda	#(_put_char_to_stdout)
   0025 20r00r00      [ 6]  100 	jsr	__print_format
   0028 85*00         [ 3]  101 	sta	*(__TEMP+0)
   002A 68            [ 4]  102 	pla
   002B 68            [ 4]  103 	pla
   002C 68            [ 4]  104 	pla
   002D 68            [ 4]  105 	pla
   002E 68            [ 4]  106 	pla
   002F 68            [ 4]  107 	pla
                            108 ;	../vprintf.c: 44: }
   0030 68            [ 4]  109 	pla
   0031 68            [ 4]  110 	pla
   0032 A5*00         [ 3]  111 	lda	*(__TEMP+0)
   0034 60            [ 6]  112 	rts
                            113 ;------------------------------------------------------------
                            114 ;Allocation info for local variables in function 'printf'
                            115 ;------------------------------------------------------------
                            116 ;format                    Allocated to stack - sp +3
                            117 ;arg                       Allocated to registers a x 
                            118 ;i                         Allocated to registers a x 
                            119 ;------------------------------------------------------------
                            120 ;	../vprintf.c: 47: printf (const char *format, ...)
                            121 ;	-----------------------------------------
                            122 ;	 function printf
                            123 ;	-----------------------------------------
                            124 ;	Register assignment is optimal.
                            125 ;	Stack space usage: 0 bytes.
   0035                     126 _printf:
                            127 ;	../vprintf.c: 52: va_start (arg, format);
   0035 BA            [ 2]  128 	tsx
   0036 E8            [ 2]  129 	inx
   0037 E8            [ 2]  130 	inx
   0038 E8            [ 2]  131 	inx
   0039 8A            [ 2]  132 	txa
   003A A2 01         [ 2]  133 	ldx	#0x01
   003C 18            [ 2]  134 	clc
   003D 69 02         [ 2]  135 	adc	#0x02
   003F 90 01         [ 4]  136 	bcc	00103$
   0041 E8            [ 2]  137 	inx
   0042                     138 00103$:
                            139 ;	../vprintf.c: 53: i = _print_format (put_char_to_stdout, NULL, format, arg);
   0042 85*00         [ 3]  140 	sta	*(__TEMP+0)
   0044 8A            [ 2]  141 	txa
   0045 48            [ 3]  142 	pha
   0046 A5*00         [ 3]  143 	lda	*(__TEMP+0)
   0048 48            [ 3]  144 	pha
   0049 BA            [ 2]  145 	tsx
   004A BD 06 01      [ 5]  146 	lda	0x106,x
   004D 48            [ 3]  147 	pha
   004E BD 05 01      [ 5]  148 	lda	0x105,x
   0051 48            [ 3]  149 	pha
   0052 A9 00         [ 2]  150 	lda	#0x00
   0054 48            [ 3]  151 	pha
   0055 48            [ 3]  152 	pha
   0056 A2s00         [ 2]  153 	ldx	#>(_put_char_to_stdout)
   0058 A9r00         [ 2]  154 	lda	#(_put_char_to_stdout)
   005A 20r00r00      [ 6]  155 	jsr	__print_format
   005D 85*00         [ 3]  156 	sta	*(__TEMP+0)
   005F 68            [ 4]  157 	pla
   0060 68            [ 4]  158 	pla
   0061 68            [ 4]  159 	pla
   0062 68            [ 4]  160 	pla
   0063 68            [ 4]  161 	pla
   0064 68            [ 4]  162 	pla
   0065 A5*00         [ 3]  163 	lda	*(__TEMP+0)
                            164 ;	../vprintf.c: 56: return i;
                            165 ;	../vprintf.c: 57: }
   0067 60            [ 6]  166 	rts
                            167 	.area CODE
                            168 	.area RODATA
                            169 	.area XINIT
                            170 	.area CABS    (ABS)
