                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module __ltoa
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___ultoa
                             12 	.globl ___ltoa
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function '__ultoa'
                             50 ;------------------------------------------------------------
                             51 ;value                     Allocated to stack - sp +46
                             52 ;string                    Allocated to stack - sp +50
                             53 ;radix                     Allocated to stack - sp +52
                             54 ;buffer                    Allocated to stack - sp +1
                             55 ;index                     Allocated to stack - sp +43
                             56 ;c                         Allocated to registers y 
                             57 ;sloc0                     Allocated to stack - sp +41
                             58 ;sloc1                     Allocated to stack - sp +37
                             59 ;sloc2                     Allocated to stack - sp +33
                             60 ;------------------------------------------------------------
                             61 ;	../__ltoa.c: 58: void __ultoa(unsigned long value, char* string, unsigned char radix)
                             62 ;	-----------------------------------------
                             63 ;	 function __ultoa
                             64 ;	-----------------------------------------
                             65 ;	Register assignment is optimal.
                             66 ;	Stack space usage: 43 bytes.
   0000                      67 ___ultoa:
   0000 85*00         [ 3]   68 	sta	*(__TEMP+0)
   0002 86*01         [ 3]   69 	stx	*(__TEMP+1)
   0004 BA            [ 2]   70 	tsx
   0005 8A            [ 2]   71 	txa
   0006 18            [ 2]   72 	clc
   0007 69 D5         [ 2]   73 	adc	#0xd5
   0009 AA            [ 2]   74 	tax
   000A 9A            [ 2]   75 	txs
   000B A6*01         [ 3]   76 	ldx	*(__TEMP+1)
   000D A5*00         [ 3]   77 	lda	*(__TEMP+0)
                             78 ;	../__ltoa.c: 63: do {
   000F BA            [ 2]   79 	tsx
   0010 E8            [ 2]   80 	inx
   0011 8A            [ 2]   81 	txa
   0012 9D 28 01      [ 5]   82 	sta	0x128,x
   0015 A9 01         [ 2]   83 	lda	#0x01
   0017 9D 29 01      [ 5]   84 	sta	0x129,x
   001A A9 20         [ 2]   85 	lda	#0x20
   001C 9D 2A 01      [ 5]   86 	sta	0x12a,x
   001F                      87 00103$:
                             88 ;	../__ltoa.c: 64: unsigned char c = '0' + (value % radix);
   001F BA            [ 2]   89 	tsx
   0020 BD 34 01      [ 5]   90 	lda	0x134,x
   0023 9D 25 01      [ 5]   91 	sta	0x125,x
   0026 A9 00         [ 2]   92 	lda	#0x00
   0028 9D 26 01      [ 5]   93 	sta	0x126,x
   002B 9D 27 01      [ 5]   94 	sta	0x127,x
   002E 9D 28 01      [ 5]   95 	sta	0x128, x
   0031 48            [ 3]   96 	pha
   0032 BD 27 01      [ 5]   97 	lda	0x127,x
   0035 48            [ 3]   98 	pha
   0036 BD 26 01      [ 5]   99 	lda	0x126,x
   0039 48            [ 3]  100 	pha
   003A BD 25 01      [ 5]  101 	lda	0x125,x
   003D 48            [ 3]  102 	pha
   003E BD 31 01      [ 5]  103 	lda	0x131,x
   0041 48            [ 3]  104 	pha
   0042 BD 30 01      [ 5]  105 	lda	0x130,x
   0045 48            [ 3]  106 	pha
   0046 BD 2F 01      [ 5]  107 	lda	0x12f,x
   0049 48            [ 3]  108 	pha
   004A BD 2E 01      [ 5]  109 	lda	0x12e,x
   004D 48            [ 3]  110 	pha
   004E 20r00r00      [ 6]  111 	jsr	__modulong
   0051 86*00         [ 3]  112 	stx	*(__TEMP+0)
   0053 BA            [ 2]  113 	tsx
   0054 9D 29 01      [ 5]  114 	sta	0x129,x
   0057 A6*00         [ 3]  115 	ldx	*(__TEMP+0)
   0059 8A            [ 2]  116 	txa
   005A BA            [ 2]  117 	tsx
   005B 9D 2A 01      [ 5]  118 	sta	0x12a,x
   005E A6*00         [ 3]  119 	ldx	*(__TEMP+0)
   0060 A5*00         [ 3]  120 	lda	*___SDCC_m6502_ret2
   0062 BA            [ 2]  121 	tsx
   0063 9D 2B 01      [ 5]  122 	sta	0x12b,x
   0066 A5*00         [ 3]  123 	lda	*___SDCC_m6502_ret3
   0068 9D 2C 01      [ 5]  124 	sta	0x12c,x
   006B 85*00         [ 3]  125 	sta	*(__TEMP+0)
   006D 86*01         [ 3]  126 	stx	*(__TEMP+1)
   006F BA            [ 2]  127 	tsx
   0070 8A            [ 2]  128 	txa
   0071 18            [ 2]  129 	clc
   0072 69 08         [ 2]  130 	adc	#0x08
   0074 AA            [ 2]  131 	tax
   0075 9A            [ 2]  132 	txs
   0076 A6*01         [ 3]  133 	ldx	*(__TEMP+1)
   0078 A5*00         [ 3]  134 	lda	*(__TEMP+0)
   007A BA            [ 2]  135 	tsx
   007B BD 21 01      [ 5]  136 	lda	0x121,x
   007E 18            [ 2]  137 	clc
   007F 69 30         [ 2]  138 	adc	#0x30
   0081 A8            [ 2]  139 	tay
                            140 ;	../__ltoa.c: 65: if (c > (unsigned char)'9')
   0082 C0 39         [ 2]  141 	cpy	#0x39
   0084 F0 07         [ 4]  142 	beq	00102$
   0086 90 05         [ 4]  143 	bcc	00102$
                            144 ;	../__ltoa.c: 66: c += 'A' - '9' - 1;
   0088 98            [ 2]  145 	tya
   0089 18            [ 2]  146 	clc
   008A 69 07         [ 2]  147 	adc	#0x07
   008C A8            [ 2]  148 	tay
   008D                     149 00102$:
                            150 ;	../__ltoa.c: 67: buffer[--index] = c;
   008D BA            [ 2]  151 	tsx
   008E BD 2B 01      [ 5]  152 	lda	0x12b,x
   0091 38            [ 2]  153 	sec
   0092 E9 01         [ 2]  154 	sbc	#0x01
   0094 9D 2B 01      [ 5]  155 	sta	0x12b,x
   0097 BD 29 01      [ 5]  156 	lda	0x129,x
   009A 18            [ 2]  157 	clc
   009B 7D 2B 01      [ 5]  158 	adc	0x12b,x
   009E 48            [ 3]  159 	pha
   009F BD 2A 01      [ 5]  160 	lda	0x12a,x
   00A2 69 00         [ 2]  161 	adc	#0x00
   00A4 AA            [ 2]  162 	tax
   00A5 68            [ 4]  163 	pla
   00A6 84*00         [ 3]  164 	sty	*(__TEMP+0)
   00A8 85*00         [ 3]  165 	sta	*(__DPTR+0)
   00AA 86*01         [ 3]  166 	stx	*(__DPTR+1)
   00AC A4*00         [ 3]  167 	ldy	*(__TEMP+0)
   00AE 98            [ 2]  168 	tya
   00AF A0 00         [ 2]  169 	ldy	#0x00
   00B1 91*00         [ 6]  170 	sta	[__DPTR],y
   00B3 A4*00         [ 3]  171 	ldy	*(__TEMP+0)
                            172 ;	../__ltoa.c: 68: value /= radix;
   00B5 BA            [ 2]  173 	tsx
   00B6 BD 28 01      [ 5]  174 	lda	0x128,x
   00B9 48            [ 3]  175 	pha
   00BA BD 27 01      [ 5]  176 	lda	0x127,x
   00BD 48            [ 3]  177 	pha
   00BE BD 26 01      [ 5]  178 	lda	0x126,x
   00C1 48            [ 3]  179 	pha
   00C2 BD 25 01      [ 5]  180 	lda	0x125,x
   00C5 48            [ 3]  181 	pha
   00C6 BD 31 01      [ 5]  182 	lda	0x131,x
   00C9 48            [ 3]  183 	pha
   00CA BD 30 01      [ 5]  184 	lda	0x130,x
   00CD 48            [ 3]  185 	pha
   00CE BD 2F 01      [ 5]  186 	lda	0x12f,x
   00D1 48            [ 3]  187 	pha
   00D2 BD 2E 01      [ 5]  188 	lda	0x12e,x
   00D5 48            [ 3]  189 	pha
   00D6 20r00r00      [ 6]  190 	jsr	__divulong
   00D9 86*00         [ 3]  191 	stx	*(__TEMP+0)
   00DB BA            [ 2]  192 	tsx
   00DC 9D 36 01      [ 5]  193 	sta	0x136,x
   00DF A6*00         [ 3]  194 	ldx	*(__TEMP+0)
   00E1 8A            [ 2]  195 	txa
   00E2 BA            [ 2]  196 	tsx
   00E3 9D 37 01      [ 5]  197 	sta	0x137,x
   00E6 A6*00         [ 3]  198 	ldx	*(__TEMP+0)
   00E8 A5*00         [ 3]  199 	lda	*___SDCC_m6502_ret2
   00EA BA            [ 2]  200 	tsx
   00EB 9D 38 01      [ 5]  201 	sta	0x138,x
   00EE A5*00         [ 3]  202 	lda	*___SDCC_m6502_ret3
   00F0 9D 39 01      [ 5]  203 	sta	0x139,x
   00F3 85*00         [ 3]  204 	sta	*(__TEMP+0)
   00F5 86*01         [ 3]  205 	stx	*(__TEMP+1)
   00F7 BA            [ 2]  206 	tsx
   00F8 8A            [ 2]  207 	txa
   00F9 18            [ 2]  208 	clc
   00FA 69 08         [ 2]  209 	adc	#0x08
   00FC AA            [ 2]  210 	tax
   00FD 9A            [ 2]  211 	txs
   00FE A6*01         [ 3]  212 	ldx	*(__TEMP+1)
   0100 A5*00         [ 3]  213 	lda	*(__TEMP+0)
                            214 ;	../__ltoa.c: 69: } while (value);
   0102 BA            [ 2]  215 	tsx
   0103 BD 31 01      [ 5]  216 	lda	0x131,x
   0106 1D 30 01      [ 5]  217 	ora	0x130,x
   0109 1D 2F 01      [ 5]  218 	ora	0x12f,x
   010C 1D 2E 01      [ 5]  219 	ora	0x12e,x
   010F F0 03         [ 4]  220 	beq	00134$
   0111 4Cr1Fr00      [ 3]  221 	jmp	00103$
   0114                     222 00134$:
                            223 ;	../__ltoa.c: 71: do {
   0114 BD 32 01      [ 5]  224 	lda	0x132,x
   0117 9D 21 01      [ 5]  225 	sta	0x121,x
   011A BD 33 01      [ 5]  226 	lda	0x133,x
   011D 9D 22 01      [ 5]  227 	sta	0x122,x
   0120                     228 00106$:
                            229 ;	../__ltoa.c: 72: *string++ = buffer[index];
   0120 BA            [ 2]  230 	tsx
   0121 BD 29 01      [ 5]  231 	lda	0x129,x
   0124 18            [ 2]  232 	clc
   0125 7D 2B 01      [ 5]  233 	adc	0x12b,x
   0128 48            [ 3]  234 	pha
   0129 BD 2A 01      [ 5]  235 	lda	0x12a,x
   012C 69 00         [ 2]  236 	adc	#0x00
   012E AA            [ 2]  237 	tax
   012F 68            [ 4]  238 	pla
   0130 85*00         [ 3]  239 	sta	*(__DPTR+0)
   0132 86*01         [ 3]  240 	stx	*(__DPTR+1)
   0134 A0 00         [ 2]  241 	ldy	#0x00
   0136 B1*00         [ 6]  242 	lda	[__DPTR],y
   0138 85*00         [ 3]  243 	sta	*(__TEMP+0)
   013A BA            [ 2]  244 	tsx
   013B BD 21 01      [ 5]  245 	lda	0x121,x
   013E 85*00         [ 3]  246 	sta	*(__DPTR+0)
   0140 BD 22 01      [ 5]  247 	lda	0x122,x
   0143 85*01         [ 3]  248 	sta	*(__DPTR+1)
   0145 A5*00         [ 3]  249 	lda	*(__TEMP+0)
   0147 91*00         [ 6]  250 	sta	[__DPTR],y
   0149 BD 21 01      [ 5]  251 	lda	0x121,x
   014C 18            [ 2]  252 	clc
   014D 69 01         [ 2]  253 	adc	#0x01
   014F 9D 21 01      [ 5]  254 	sta	0x121,x
   0152 BD 22 01      [ 5]  255 	lda	0x122,x
   0155 69 00         [ 2]  256 	adc	#0x00
   0157 9D 22 01      [ 5]  257 	sta	0x122,x
                            258 ;	../__ltoa.c: 73: } while ( ++index != NUMBER_OF_DIGITS );
   015A BD 2B 01      [ 5]  259 	lda	0x12b,x
   015D 18            [ 2]  260 	clc
   015E 69 01         [ 2]  261 	adc	#0x01
   0160 9D 2B 01      [ 5]  262 	sta	0x12b, x
   0163 C9 20         [ 2]  263 	cmp	#0x20
   0165 D0 B9         [ 4]  264 	bne	00106$
                            265 ;	../__ltoa.c: 75: *string = 0;  /* string terminator */
   0167 BD 21 01      [ 5]  266 	lda	0x121,x
   016A 85*00         [ 3]  267 	sta	*(__DPTR+0)
   016C BD 22 01      [ 5]  268 	lda	0x122,x
   016F 85*01         [ 3]  269 	sta	*(__DPTR+1)
   0171 98            [ 2]  270 	tya
   0172 91*00         [ 6]  271 	sta	[__DPTR],y
                            272 ;	../__ltoa.c: 76: }
   0174 85*00         [ 3]  273 	sta	*(__TEMP+0)
   0176 86*01         [ 3]  274 	stx	*(__TEMP+1)
   0178 BA            [ 2]  275 	tsx
   0179 8A            [ 2]  276 	txa
   017A 18            [ 2]  277 	clc
   017B 69 2B         [ 2]  278 	adc	#0x2b
   017D AA            [ 2]  279 	tax
   017E 9A            [ 2]  280 	txs
   017F A6*01         [ 3]  281 	ldx	*(__TEMP+1)
   0181 A5*00         [ 3]  282 	lda	*(__TEMP+0)
   0183 60            [ 6]  283 	rts
                            284 ;------------------------------------------------------------
                            285 ;Allocation info for local variables in function '__ltoa'
                            286 ;------------------------------------------------------------
                            287 ;value                     Allocated to stack - sp +5
                            288 ;string                    Allocated to stack - sp +9
                            289 ;radix                     Allocated to stack - sp +11
                            290 ;sloc0                     Allocated to stack - sp +1
                            291 ;------------------------------------------------------------
                            292 ;	../__ltoa.c: 78: void __ltoa(long value, char* string, unsigned char radix)
                            293 ;	-----------------------------------------
                            294 ;	 function __ltoa
                            295 ;	-----------------------------------------
                            296 ;	Register assignment is optimal.
                            297 ;	Stack space usage: 2 bytes.
   0184                     298 ___ltoa:
   0184 48            [ 3]  299 	pha
   0185 48            [ 3]  300 	pha
                            301 ;	../__ltoa.c: 80: if (value < 0 && radix == 10) {
   0186 BA            [ 2]  302 	tsx
   0187 BD 08 01      [ 5]  303 	lda	0x108,x
   018A 38            [ 2]  304 	sec
   018B E9 00         [ 2]  305 	sbc	#0x00
   018D 50 04         [ 4]  306 	bvc	00115$
   018F 10 04         [ 4]  307 	bpl	00114$
   0191 30 53         [ 4]  308 	bmi	00102$
   0193                     309 00115$:
   0193 10 51         [ 4]  310 	bpl	00102$
   0195                     311 00114$:
   0195 BD 0B 01      [ 5]  312 	lda	0x10b,x
   0198 C9 0A         [ 2]  313 	cmp	#0x0a
   019A D0 4A         [ 4]  314 	bne	00102$
                            315 ;	../__ltoa.c: 81: *string++ = '-';
   019C BD 09 01      [ 5]  316 	lda	0x109,x
   019F 9D 01 01      [ 5]  317 	sta	0x101,x
   01A2 BD 0A 01      [ 5]  318 	lda	0x10a,x
   01A5 9D 02 01      [ 5]  319 	sta	0x102,x
   01A8 BD 01 01      [ 5]  320 	lda	0x101,x
   01AB 85*00         [ 3]  321 	sta	*(__DPTR+0)
   01AD BD 02 01      [ 5]  322 	lda	0x102,x
   01B0 85*01         [ 3]  323 	sta	*(__DPTR+1)
   01B2 A9 2D         [ 2]  324 	lda	#0x2d
   01B4 A0 00         [ 2]  325 	ldy	#0x00
   01B6 91*00         [ 6]  326 	sta	[__DPTR],y
   01B8 BD 01 01      [ 5]  327 	lda	0x101,x
   01BB 18            [ 2]  328 	clc
   01BC 69 01         [ 2]  329 	adc	#0x01
   01BE 9D 09 01      [ 5]  330 	sta	0x109,x
   01C1 BD 02 01      [ 5]  331 	lda	0x102,x
   01C4 69 00         [ 2]  332 	adc	#0x00
   01C6 9D 0A 01      [ 5]  333 	sta	0x10a,x
                            334 ;	../__ltoa.c: 82: value = -value;
   01C9 98            [ 2]  335 	tya
   01CA 38            [ 2]  336 	sec
   01CB FD 05 01      [ 5]  337 	sbc	0x105,x
   01CE 9D 05 01      [ 5]  338 	sta	0x105,x
   01D1 98            [ 2]  339 	tya
   01D2 FD 06 01      [ 5]  340 	sbc	0x106,x
   01D5 9D 06 01      [ 5]  341 	sta	0x106,x
   01D8 98            [ 2]  342 	tya
   01D9 FD 07 01      [ 5]  343 	sbc	0x107,x
   01DC 9D 07 01      [ 5]  344 	sta	0x107,x
   01DF 98            [ 2]  345 	tya
   01E0 FD 08 01      [ 5]  346 	sbc	0x108,x
   01E3 9D 08 01      [ 5]  347 	sta	0x108,x
   01E6                     348 00102$:
                            349 ;	../__ltoa.c: 84: __ultoa(value, string, radix);
   01E6 BA            [ 2]  350 	tsx
   01E7 BD 0B 01      [ 5]  351 	lda	0x10b,x
   01EA 48            [ 3]  352 	pha
   01EB BD 0A 01      [ 5]  353 	lda	0x10a,x
   01EE 48            [ 3]  354 	pha
   01EF BD 09 01      [ 5]  355 	lda	0x109,x
   01F2 48            [ 3]  356 	pha
   01F3 BD 08 01      [ 5]  357 	lda	0x108,x
   01F6 48            [ 3]  358 	pha
   01F7 BD 07 01      [ 5]  359 	lda	0x107,x
   01FA 48            [ 3]  360 	pha
   01FB BD 06 01      [ 5]  361 	lda	0x106,x
   01FE 48            [ 3]  362 	pha
   01FF BD 05 01      [ 5]  363 	lda	0x105,x
   0202 48            [ 3]  364 	pha
   0203 20r00r00      [ 6]  365 	jsr	___ultoa
   0206 85*00         [ 3]  366 	sta	*(__TEMP+0)
   0208 68            [ 4]  367 	pla
   0209 68            [ 4]  368 	pla
   020A 68            [ 4]  369 	pla
   020B 68            [ 4]  370 	pla
   020C 68            [ 4]  371 	pla
   020D 68            [ 4]  372 	pla
   020E 68            [ 4]  373 	pla
                            374 ;	../__ltoa.c: 85: }
   020F 68            [ 4]  375 	pla
   0210 68            [ 4]  376 	pla
   0211 A5*00         [ 3]  377 	lda	*(__TEMP+0)
   0213 60            [ 6]  378 	rts
                            379 	.area CODE
                            380 	.area RODATA
                            381 	.area XINIT
                            382 	.area CABS    (ABS)
