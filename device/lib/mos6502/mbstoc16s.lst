                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbstoc16s
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mbtowc
                             12 	.globl ___mbstoc16s_PARM_3
                             13 	.globl ___mbstoc16s_PARM_2
                             14 	.globl ___mbstoc16s
                             15 ;--------------------------------------------------------
                             16 ; ZP ram data
                             17 ;--------------------------------------------------------
                             18 	.area ZP      (PAG)
   0000                      19 ___mbstoc16s_sloc0_1_0:
   0000                      20 	.ds 2
   0002                      21 ___mbstoc16s_sloc1_1_0:
   0002                      22 	.ds 4
                             23 ;--------------------------------------------------------
                             24 ; overlayable items in ram
                             25 ;--------------------------------------------------------
                             26 ;--------------------------------------------------------
                             27 ; uninitialized external ram data
                             28 ;--------------------------------------------------------
                             29 	.area BSS
   0000                      30 ___mbstoc16s_PARM_2:
   0000                      31 	.ds 2
   0002                      32 ___mbstoc16s_PARM_3:
   0002                      33 	.ds 2
   0004                      34 ___mbstoc16s_c16s_65536_50:
   0004                      35 	.ds 2
   0006                      36 ___mbstoc16s_m_65536_51:
   0006                      37 	.ds 2
   0008                      38 ___mbstoc16s_l_196608_53:
   0008                      39 	.ds 2
   000A                      40 ___mbstoc16s_codepoint_196608_53:
   000A                      41 	.ds 4
                             42 ;--------------------------------------------------------
                             43 ; absolute external ram data
                             44 ;--------------------------------------------------------
                             45 	.area DABS    (ABS)
                             46 ;--------------------------------------------------------
                             47 ; initialized external ram data
                             48 ;--------------------------------------------------------
                             49 	.area DATA
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area _CODE
                             54 	.area GSINIT
                             55 	.area GSFINAL
                             56 	.area GSINIT
                             57 ;--------------------------------------------------------
                             58 ; Home
                             59 ;--------------------------------------------------------
                             60 	.area _CODE
                             61 	.area _CODE
                             62 ;--------------------------------------------------------
                             63 ; code
                             64 ;--------------------------------------------------------
                             65 	.area CODE
                             66 ;------------------------------------------------------------
                             67 ;Allocation info for local variables in function '__mbstoc16s'
                             68 ;------------------------------------------------------------
                             69 ;sloc0                     Allocated with name '___mbstoc16s_sloc0_1_0'
                             70 ;sloc1                     Allocated with name '___mbstoc16s_sloc1_1_0'
                             71 ;s                         Allocated with name '___mbstoc16s_PARM_2'
                             72 ;n                         Allocated with name '___mbstoc16s_PARM_3'
                             73 ;c16s                      Allocated with name '___mbstoc16s_c16s_65536_50'
                             74 ;m                         Allocated with name '___mbstoc16s_m_65536_51'
                             75 ;l                         Allocated with name '___mbstoc16s_l_196608_53'
                             76 ;codepoint                 Allocated with name '___mbstoc16s_codepoint_196608_53'
                             77 ;------------------------------------------------------------
                             78 ;	../mbstoc16s.c: 44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                             79 ;	-----------------------------------------
                             80 ;	 function __mbstoc16s
                             81 ;	-----------------------------------------
                             82 ;	Register assignment is optimal.
                             83 ;	Stack space usage: 0 bytes.
   0000                      84 ___mbstoc16s:
   0000 85*00         [ 3]   85 	sta	*___mbstoc16s_sloc0_1_0
   0002 86*01         [ 3]   86 	stx	*(___mbstoc16s_sloc0_1_0 + 1)
                             87 ;	../mbstoc16s.c: 46: size_t m = 0;
   0004 A2 00         [ 2]   88 	ldx	#0x00
   0006 8Er06r00      [ 4]   89 	stx	___mbstoc16s_m_65536_51
   0009 8Er07r00      [ 4]   90 	stx	(___mbstoc16s_m_65536_51 + 1)
                             91 ;	../mbstoc16s.c: 85: return(m);
   000C                      92 00116$:
                             93 ;	../mbstoc16s.c: 53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
   000C ADr00r00      [ 4]   94 	lda	___mbstoc16s_PARM_2
   000F 8Dr00r00      [ 4]   95 	sta	_mbtowc_PARM_2
   0012 ADr01r00      [ 4]   96 	lda	(___mbstoc16s_PARM_2 + 1)
   0015 8Dr01r00      [ 4]   97 	sta	(_mbtowc_PARM_2 + 1)
   0018 A2 04         [ 2]   98 	ldx	#0x04
   001A 8Er00r00      [ 4]   99 	stx	_mbtowc_PARM_3
   001D A2 00         [ 2]  100 	ldx	#0x00
   001F 8Er01r00      [ 4]  101 	stx	(_mbtowc_PARM_3 + 1)
   0022 A2s00         [ 2]  102 	ldx	#>___mbstoc16s_codepoint_196608_53
   0024 A9r0A         [ 2]  103 	lda	#___mbstoc16s_codepoint_196608_53
   0026 20r00r00      [ 6]  104 	jsr	_mbtowc
   0029 8Dr08r00      [ 4]  105 	sta	___mbstoc16s_l_196608_53
   002C 8Er09r00      [ 4]  106 	stx	(___mbstoc16s_l_196608_53 + 1)
                            107 ;	../mbstoc16s.c: 55: if(l < 0)
   002F ADr09r00      [ 4]  108 	lda	(___mbstoc16s_l_196608_53 + 1)
   0032 38            [ 2]  109 	sec
   0033 E9 00         [ 2]  110 	sbc	#0x00
   0035 50 04         [ 4]  111 	bvc	00156$
   0037 10 04         [ 4]  112 	bpl	00155$
   0039 30 06         [ 4]  113 	bmi	00106$
   003B                     114 00156$:
   003B 10 04         [ 4]  115 	bpl	00106$
   003D                     116 00155$:
                            117 ;	../mbstoc16s.c: 56: return(-1);
   003D A9 FF         [ 2]  118 	lda	#0xff
   003F AA            [ 2]  119 	tax
   0040 60            [ 6]  120 	rts
   0041                     121 00106$:
                            122 ;	../mbstoc16s.c: 57: else if(!l)
   0041 ADr09r00      [ 4]  123 	lda	(___mbstoc16s_l_196608_53 + 1)
   0044 0Dr08r00      [ 4]  124 	ora	___mbstoc16s_l_196608_53
   0047 D0 1D         [ 4]  125 	bne	00107$
                            126 ;	../mbstoc16s.c: 59: if(m < n)
   0049 ADr06r00      [ 4]  127 	lda	___mbstoc16s_m_65536_51
   004C 38            [ 2]  128 	sec
   004D EDr02r00      [ 4]  129 	sbc	___mbstoc16s_PARM_3
   0050 ADr07r00      [ 4]  130 	lda	(___mbstoc16s_m_65536_51 + 1)
   0053 EDr03r00      [ 4]  131 	sbc	(___mbstoc16s_PARM_3 + 1)
   0056 90 03         [ 4]  132 	bcc	00159$
   0058 4CrA1r01      [ 3]  133 	jmp	00115$
   005B                     134 00159$:
                            135 ;	../mbstoc16s.c: 60: *c16s = 0;
   005B A9 00         [ 2]  136 	lda	#0x00
   005D A8            [ 2]  137 	tay
   005E 91*00         [ 6]  138 	sta	[*___mbstoc16s_sloc0_1_0],y
   0060 C8            [ 2]  139 	iny
   0061 91*00         [ 6]  140 	sta	[*___mbstoc16s_sloc0_1_0],y
                            141 ;	../mbstoc16s.c: 61: break;
   0063 4CrA1r01      [ 3]  142 	jmp	00115$
   0066                     143 00107$:
                            144 ;	../mbstoc16s.c: 64: if (codepoint <= 0xffff) // Basic multilingual plane
   0066 A9 FF         [ 2]  145 	lda	#0xff
   0068 38            [ 2]  146 	sec
   0069 EDr0Ar00      [ 4]  147 	sbc	___mbstoc16s_codepoint_196608_53
   006C A9 FF         [ 2]  148 	lda	#0xff
   006E EDr0Br00      [ 4]  149 	sbc	(___mbstoc16s_codepoint_196608_53 + 1)
   0071 A9 00         [ 2]  150 	lda	#0x00
   0073 EDr0Cr00      [ 4]  151 	sbc	(___mbstoc16s_codepoint_196608_53 + 2)
   0076 A9 00         [ 2]  152 	lda	#0x00
   0078 EDr0Dr00      [ 4]  153 	sbc	(___mbstoc16s_codepoint_196608_53 + 3)
   007B 90 36         [ 4]  154 	bcc	00113$
                            155 ;	../mbstoc16s.c: 66: if (m >= n)
   007D ADr06r00      [ 4]  156 	lda	___mbstoc16s_m_65536_51
   0080 38            [ 2]  157 	sec
   0081 EDr02r00      [ 4]  158 	sbc	___mbstoc16s_PARM_3
   0084 ADr07r00      [ 4]  159 	lda	(___mbstoc16s_m_65536_51 + 1)
   0087 EDr03r00      [ 4]  160 	sbc	(___mbstoc16s_PARM_3 + 1)
   008A 90 03         [ 4]  161 	bcc	00161$
   008C 4CrA1r01      [ 3]  162 	jmp	00115$
   008F                     163 00161$:
                            164 ;	../mbstoc16s.c: 69: *c16s++ = codepoint;
   008F ADr0Ar00      [ 4]  165 	lda	___mbstoc16s_codepoint_196608_53
   0092 AEr0Br00      [ 4]  166 	ldx	(___mbstoc16s_codepoint_196608_53 + 1)
   0095 A0 00         [ 2]  167 	ldy	#0x00
   0097 91*00         [ 6]  168 	sta	[*___mbstoc16s_sloc0_1_0],y
   0099 8A            [ 2]  169 	txa
   009A C8            [ 2]  170 	iny
   009B 91*00         [ 6]  171 	sta	[*___mbstoc16s_sloc0_1_0],y
   009D A5*00         [ 3]  172 	lda	*___mbstoc16s_sloc0_1_0
   009F 18            [ 2]  173 	clc
   00A0 69 02         [ 2]  174 	adc	#0x02
   00A2 85*00         [ 3]  175 	sta	*___mbstoc16s_sloc0_1_0
   00A4 90 02         [ 4]  176 	bcc	00162$
   00A6 E6*01         [ 5]  177 	inc	*(___mbstoc16s_sloc0_1_0 + 1)
   00A8                     178 00162$:
                            179 ;	../mbstoc16s.c: 70: m++;
   00A8 EEr06r00      [ 6]  180 	inc	___mbstoc16s_m_65536_51
   00AB D0 03         [ 4]  181 	bne	00163$
   00AD EEr07r00      [ 6]  182 	inc	(___mbstoc16s_m_65536_51 + 1)
   00B0                     183 00163$:
   00B0 4Cr8Br01      [ 3]  184 	jmp	00114$
   00B3                     185 00113$:
                            186 ;	../mbstoc16s.c: 74: if (m + 1 >= n)
   00B3 ADr06r00      [ 4]  187 	lda	___mbstoc16s_m_65536_51
   00B6 AEr07r00      [ 4]  188 	ldx	(___mbstoc16s_m_65536_51 + 1)
   00B9 18            [ 2]  189 	clc
   00BA 69 01         [ 2]  190 	adc	#0x01
   00BC 90 01         [ 4]  191 	bcc	00164$
   00BE E8            [ 2]  192 	inx
   00BF                     193 00164$:
   00BF 38            [ 2]  194 	sec
   00C0 EDr02r00      [ 4]  195 	sbc	___mbstoc16s_PARM_3
   00C3 8A            [ 2]  196 	txa
   00C4 EDr03r00      [ 4]  197 	sbc	(___mbstoc16s_PARM_3 + 1)
   00C7 90 03         [ 4]  198 	bcc	00165$
   00C9 4CrA1r01      [ 3]  199 	jmp	00115$
   00CC                     200 00165$:
                            201 ;	../mbstoc16s.c: 77: codepoint -= 0x100000;
   00CC ADr0Ar00      [ 4]  202 	lda	___mbstoc16s_codepoint_196608_53
   00CF 38            [ 2]  203 	sec
   00D0 E9 00         [ 2]  204 	sbc	#0x00
   00D2 8Dr0Ar00      [ 4]  205 	sta	___mbstoc16s_codepoint_196608_53
   00D5 ADr0Br00      [ 4]  206 	lda	(___mbstoc16s_codepoint_196608_53 + 1)
   00D8 E9 00         [ 2]  207 	sbc	#0x00
   00DA 8Dr0Br00      [ 4]  208 	sta	(___mbstoc16s_codepoint_196608_53 + 1)
   00DD ADr0Cr00      [ 4]  209 	lda	(___mbstoc16s_codepoint_196608_53 + 2)
   00E0 E9 10         [ 2]  210 	sbc	#0x10
   00E2 8Dr0Cr00      [ 4]  211 	sta	(___mbstoc16s_codepoint_196608_53 + 2)
   00E5 ADr0Dr00      [ 4]  212 	lda	(___mbstoc16s_codepoint_196608_53 + 3)
   00E8 E9 00         [ 2]  213 	sbc	#0x00
   00EA 8Dr0Dr00      [ 4]  214 	sta	(___mbstoc16s_codepoint_196608_53 + 3)
                            215 ;	../mbstoc16s.c: 78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
   00ED ADr0Br00      [ 4]  216 	lda	(___mbstoc16s_codepoint_196608_53 + 1)
   00F0 AEr0Cr00      [ 4]  217 	ldx	(___mbstoc16s_codepoint_196608_53 + 2)
   00F3 86*00         [ 3]  218 	stx	*(__TEMP+0)
   00F5 46*00         [ 5]  219 	lsr	*(__TEMP+0)
   00F7 6A            [ 2]  220 	ror	a
   00F8 46*00         [ 5]  221 	lsr	*(__TEMP+0)
   00FA 6A            [ 2]  222 	ror	a
   00FB A6*00         [ 3]  223 	ldx	*(__TEMP+0)
   00FD 85*02         [ 3]  224 	sta	*___mbstoc16s_sloc1_1_0
   00FF 86*03         [ 3]  225 	stx	*(___mbstoc16s_sloc1_1_0 + 1)
   0101 AEr0Dr00      [ 4]  226 	ldx	(___mbstoc16s_codepoint_196608_53 + 3)
   0104 A9 00         [ 2]  227 	lda	#0x00
   0106 86*00         [ 3]  228 	stx	*(__TEMP+0)
   0108 46*00         [ 5]  229 	lsr	*(__TEMP+0)
   010A 6A            [ 2]  230 	ror	a
   010B 46*00         [ 5]  231 	lsr	*(__TEMP+0)
   010D 6A            [ 2]  232 	ror	a
   010E A6*00         [ 3]  233 	ldx	*(__TEMP+0)
   0110 05*03         [ 3]  234 	ora	*(___mbstoc16s_sloc1_1_0 + 1)
   0112 85*03         [ 3]  235 	sta	*(___mbstoc16s_sloc1_1_0 + 1)
   0114 86*04         [ 3]  236 	stx	*(___mbstoc16s_sloc1_1_0 + 2)
   0116 A0 00         [ 2]  237 	ldy	#0x00
   0118 84*05         [ 3]  238 	sty	*(___mbstoc16s_sloc1_1_0 + 3)
   011A A5*02         [ 3]  239 	lda	*___mbstoc16s_sloc1_1_0
   011C A6*03         [ 3]  240 	ldx	*(___mbstoc16s_sloc1_1_0 + 1)
   011E 85*00         [ 3]  241 	sta	*(__TEMP+0)
   0120 8A            [ 2]  242 	txa
   0121 29 03         [ 2]  243 	and	#0x03
   0123 AA            [ 2]  244 	tax
   0124 A5*00         [ 3]  245 	lda	*(__TEMP+0)
   0126 18            [ 2]  246 	clc
   0127 48            [ 3]  247 	pha
   0128 8A            [ 2]  248 	txa
   0129 18            [ 2]  249 	clc
   012A 69 D8         [ 2]  250 	adc	#0xd8
   012C AA            [ 2]  251 	tax
   012D 68            [ 4]  252 	pla
   012E 91*00         [ 6]  253 	sta	[*___mbstoc16s_sloc0_1_0],y
   0130 8A            [ 2]  254 	txa
   0131 C8            [ 2]  255 	iny
   0132 91*00         [ 6]  256 	sta	[*___mbstoc16s_sloc0_1_0],y
   0134 A5*00         [ 3]  257 	lda	*___mbstoc16s_sloc0_1_0
   0136 18            [ 2]  258 	clc
   0137 69 02         [ 2]  259 	adc	#0x02
   0139 8Dr04r00      [ 4]  260 	sta	___mbstoc16s_c16s_65536_50
   013C A5*01         [ 3]  261 	lda	*(___mbstoc16s_sloc0_1_0 + 1)
   013E 69 00         [ 2]  262 	adc	#0x00
   0140 8Dr05r00      [ 4]  263 	sta	(___mbstoc16s_c16s_65536_50 + 1)
                            264 ;	../mbstoc16s.c: 79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
   0143 ADr0Ar00      [ 4]  265 	lda	___mbstoc16s_codepoint_196608_53
   0146 AEr0Br00      [ 4]  266 	ldx	(___mbstoc16s_codepoint_196608_53 + 1)
   0149 85*00         [ 3]  267 	sta	*(__TEMP+0)
   014B 8A            [ 2]  268 	txa
   014C 29 03         [ 2]  269 	and	#0x03
   014E AA            [ 2]  270 	tax
   014F A5*00         [ 3]  271 	lda	*(__TEMP+0)
   0151 18            [ 2]  272 	clc
   0152 48            [ 3]  273 	pha
   0153 8A            [ 2]  274 	txa
   0154 18            [ 2]  275 	clc
   0155 69 DC         [ 2]  276 	adc	#0xdc
   0157 AA            [ 2]  277 	tax
   0158 68            [ 4]  278 	pla
   0159 85*00         [ 3]  279 	sta	*(__TEMP+0)
   015B ADr04r00      [ 4]  280 	lda	___mbstoc16s_c16s_65536_50
   015E 85*00         [ 3]  281 	sta	*(__DPTR+0)
   0160 ADr05r00      [ 4]  282 	lda	(___mbstoc16s_c16s_65536_50 + 1)
   0163 85*01         [ 3]  283 	sta	*(__DPTR+1)
   0165 A5*00         [ 3]  284 	lda	*(__TEMP+0)
   0167 88            [ 2]  285 	dey
   0168 91*00         [ 6]  286 	sta	[__DPTR],y
   016A 8A            [ 2]  287 	txa
   016B C8            [ 2]  288 	iny
   016C 91*00         [ 6]  289 	sta	[__DPTR],y
   016E ADr04r00      [ 4]  290 	lda	___mbstoc16s_c16s_65536_50
   0171 18            [ 2]  291 	clc
   0172 69 02         [ 2]  292 	adc	#0x02
   0174 85*00         [ 3]  293 	sta	*___mbstoc16s_sloc0_1_0
   0176 ADr05r00      [ 4]  294 	lda	(___mbstoc16s_c16s_65536_50 + 1)
   0179 69 00         [ 2]  295 	adc	#0x00
   017B 85*01         [ 3]  296 	sta	*(___mbstoc16s_sloc0_1_0 + 1)
                            297 ;	../mbstoc16s.c: 80: m += 2;
   017D ADr06r00      [ 4]  298 	lda	___mbstoc16s_m_65536_51
   0180 18            [ 2]  299 	clc
   0181 69 02         [ 2]  300 	adc	#0x02
   0183 8Dr06r00      [ 4]  301 	sta	___mbstoc16s_m_65536_51
   0186 90 03         [ 4]  302 	bcc	00166$
   0188 EEr07r00      [ 6]  303 	inc	(___mbstoc16s_m_65536_51 + 1)
   018B                     304 00166$:
   018B                     305 00114$:
                            306 ;	../mbstoc16s.c: 82: s += l;
   018B ADr00r00      [ 4]  307 	lda	___mbstoc16s_PARM_2
   018E 18            [ 2]  308 	clc
   018F 6Dr08r00      [ 4]  309 	adc	___mbstoc16s_l_196608_53
   0192 8Dr00r00      [ 4]  310 	sta	___mbstoc16s_PARM_2
   0195 ADr01r00      [ 4]  311 	lda	(___mbstoc16s_PARM_2 + 1)
   0198 6Dr09r00      [ 4]  312 	adc	(___mbstoc16s_l_196608_53 + 1)
   019B 8Dr01r00      [ 4]  313 	sta	(___mbstoc16s_PARM_2 + 1)
   019E 4Cr0Cr00      [ 3]  314 	jmp	00116$
   01A1                     315 00115$:
                            316 ;	../mbstoc16s.c: 85: return(m);
   01A1 AEr07r00      [ 4]  317 	ldx	(___mbstoc16s_m_65536_51 + 1)
   01A4 ADr06r00      [ 4]  318 	lda	___mbstoc16s_m_65536_51
                            319 ;	../mbstoc16s.c: 86: }
   01A7 60            [ 6]  320 	rts
                            321 	.area CODE
                            322 	.area RODATA
                            323 	.area XINIT
                            324 	.area CABS    (ABS)
