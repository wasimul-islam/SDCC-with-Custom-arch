                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module malloc
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___sdcc_heap_init
                             12 	.globl ___sdcc_heap_free
                             13 	.globl _malloc
                             14 ;--------------------------------------------------------
                             15 ; ZP ram data
                             16 ;--------------------------------------------------------
                             17 	.area ZP      (PAG)
   0000                      18 _malloc_sloc0_1_0:
   0000                      19 	.ds 2
   0002                      20 _malloc_sloc1_1_0:
   0002                      21 	.ds 2
                             22 ;--------------------------------------------------------
                             23 ; overlayable items in ram
                             24 ;--------------------------------------------------------
                             25 ;--------------------------------------------------------
                             26 ; uninitialized external ram data
                             27 ;--------------------------------------------------------
                             28 	.area BSS
   0000                      29 ___sdcc_heap_free::
   0000                      30 	.ds 2
   0002                      31 _malloc_size_65536_39:
   0002                      32 	.ds 2
   0004                      33 _malloc_h_65536_40:
   0004                      34 	.ds 2
   0006                      35 _malloc_f_65536_40:
   0006                      36 	.ds 2
   0008                      37 _malloc_blocksize_196608_42:
   0008                      38 	.ds 2
   000A                      39 _malloc_newheader_327680_44:
   000A                      40 	.ds 2
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area DABS    (ABS)
                             45 ;--------------------------------------------------------
                             46 ; initialized external ram data
                             47 ;--------------------------------------------------------
                             48 	.area DATA
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area _CODE
                             53 	.area GSINIT
                             54 	.area GSFINAL
                             55 	.area GSINIT
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 	.area _CODE
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area CODE
                             65 ;------------------------------------------------------------
                             66 ;Allocation info for local variables in function '__sdcc_heap_init'
                             67 ;------------------------------------------------------------
                             68 ;	../malloc.c: 65: void __sdcc_heap_init(void)
                             69 ;	-----------------------------------------
                             70 ;	 function __sdcc_heap_init
                             71 ;	-----------------------------------------
                             72 ;	Register assignment is optimal.
                             73 ;	Stack space usage: 0 bytes.
   0000                      74 ___sdcc_heap_init:
                             75 ;	../malloc.c: 67: __sdcc_heap_free = HEAP_START;
   0000 A9r00         [ 2]   76 	lda	#___sdcc_heap
   0002 8Dr00r00      [ 4]   77 	sta	___sdcc_heap_free
   0005 A9s00         [ 2]   78 	lda	#>___sdcc_heap
   0007 8Dr01r00      [ 4]   79 	sta	(___sdcc_heap_free + 1)
                             80 ;	../malloc.c: 68: __sdcc_heap_free->next = HEAP_END;
   000A ADr00r00      [ 4]   81 	lda	___sdcc_heap_size
   000D AEr01r00      [ 4]   82 	ldx	(___sdcc_heap_size + 1)
   0010 38            [ 2]   83 	sec
   0011 E9 01         [ 2]   84 	sbc	#0x01
   0013 B0 01         [ 4]   85 	bcs	00103$
   0015 CA            [ 2]   86 	dex
   0016                      87 00103$:
   0016 18            [ 2]   88 	clc
   0017 69r00         [ 2]   89 	adc	#___sdcc_heap
   0019 48            [ 3]   90 	pha
   001A 8A            [ 2]   91 	txa
   001B 69s00         [ 2]   92 	adc	#>___sdcc_heap
   001D AA            [ 2]   93 	tax
   001E 68            [ 4]   94 	pla
   001F 8Er01r00      [ 4]   95 	stx	(___sdcc_heap + 1)
   0022 8Dr00r00      [ 4]   96 	sta	___sdcc_heap
                             97 ;	../malloc.c: 69: __sdcc_heap_free->next_free = 0;
   0025 ADr00r00      [ 4]   98 	lda	___sdcc_heap_free
   0028 AEr01r00      [ 4]   99 	ldx	(___sdcc_heap_free + 1)
   002B 85*00         [ 3]  100 	sta	*(__DPTR+0)
   002D 86*01         [ 3]  101 	stx	*(__DPTR+1)
   002F A9 00         [ 2]  102 	lda	#0x00
   0031 A0 02         [ 2]  103 	ldy	#0x02
   0033 91*00         [ 6]  104 	sta	[__DPTR],y
   0035 C8            [ 2]  105 	iny
   0036 91*00         [ 6]  106 	sta	[__DPTR],y
                            107 ;	../malloc.c: 70: }
   0038 60            [ 6]  108 	rts
                            109 ;------------------------------------------------------------
                            110 ;Allocation info for local variables in function 'malloc'
                            111 ;------------------------------------------------------------
                            112 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                            113 ;sloc1                     Allocated with name '_malloc_sloc1_1_0'
                            114 ;size                      Allocated with name '_malloc_size_65536_39'
                            115 ;h                         Allocated with name '_malloc_h_65536_40'
                            116 ;f                         Allocated with name '_malloc_f_65536_40'
                            117 ;blocksize                 Allocated with name '_malloc_blocksize_196608_42'
                            118 ;newheader                 Allocated with name '_malloc_newheader_327680_44'
                            119 ;------------------------------------------------------------
                            120 ;	../malloc.c: 75: void *malloc(size_t size)
                            121 ;	-----------------------------------------
                            122 ;	 function malloc
                            123 ;	-----------------------------------------
                            124 ;	Register assignment is optimal.
                            125 ;	Stack space usage: 0 bytes.
   0039                     126 _malloc:
   0039 85*00         [ 3]  127 	sta	*_malloc_sloc0_1_0
   003B 86*01         [ 3]  128 	stx	*(_malloc_sloc0_1_0 + 1)
                            129 ;	../malloc.c: 82: if(!__sdcc_heap_free)
   003D ADr01r00      [ 4]  130 	lda	(___sdcc_heap_free + 1)
   0040 0Dr00r00      [ 4]  131 	ora	___sdcc_heap_free
   0043 D0 03         [ 4]  132 	bne	00102$
                            133 ;	../malloc.c: 83: __sdcc_heap_init();
   0045 20r00r00      [ 6]  134 	jsr	___sdcc_heap_init
   0048                     135 00102$:
                            136 ;	../malloc.c: 86: if(!size || size + offsetof(struct header, next_free) < size)
   0048 A5*01         [ 3]  137 	lda	*(_malloc_sloc0_1_0 + 1)
   004A 05*00         [ 3]  138 	ora	*_malloc_sloc0_1_0
   004C F0 12         [ 4]  139 	beq	00103$
   004E A5*00         [ 3]  140 	lda	*_malloc_sloc0_1_0
   0050 A6*01         [ 3]  141 	ldx	*(_malloc_sloc0_1_0 + 1)
   0052 18            [ 2]  142 	clc
   0053 69 02         [ 2]  143 	adc	#0x02
   0055 90 01         [ 4]  144 	bcc	00156$
   0057 E8            [ 2]  145 	inx
   0058                     146 00156$:
   0058 38            [ 2]  147 	sec
   0059 E5*00         [ 3]  148 	sbc	*_malloc_sloc0_1_0
   005B 8A            [ 2]  149 	txa
   005C E5*01         [ 3]  150 	sbc	*(_malloc_sloc0_1_0 + 1)
   005E B0 04         [ 4]  151 	bcs	00104$
   0060                     152 00103$:
                            153 ;	../malloc.c: 87: return(0);
   0060 A9 00         [ 2]  154 	lda	#0x00
   0062 AA            [ 2]  155 	tax
   0063 60            [ 6]  156 	rts
   0064                     157 00104$:
                            158 ;	../malloc.c: 88: size += offsetof(struct header, next_free);
   0064 A5*00         [ 3]  159 	lda	*_malloc_sloc0_1_0
   0066 18            [ 2]  160 	clc
   0067 69 02         [ 2]  161 	adc	#0x02
   0069 8Dr02r00      [ 4]  162 	sta	_malloc_size_65536_39
   006C A5*01         [ 3]  163 	lda	*(_malloc_sloc0_1_0 + 1)
   006E 69 00         [ 2]  164 	adc	#0x00
   0070 8Dr03r00      [ 4]  165 	sta	(_malloc_size_65536_39 + 1)
                            166 ;	../malloc.c: 89: if(size < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
   0073 ADr02r00      [ 4]  167 	lda	_malloc_size_65536_39
   0076 38            [ 2]  168 	sec
   0077 E9 04         [ 2]  169 	sbc	#0x04
   0079 ADr03r00      [ 4]  170 	lda	(_malloc_size_65536_39 + 1)
   007C E9 00         [ 2]  171 	sbc	#0x00
   007E B0 0A         [ 4]  172 	bcs	00107$
                            173 ;	../malloc.c: 90: size = sizeof(struct header);
   0080 A2 04         [ 2]  174 	ldx	#0x04
   0082 8Er02r00      [ 4]  175 	stx	_malloc_size_65536_39
   0085 A2 00         [ 2]  176 	ldx	#0x00
   0087 8Er03r00      [ 4]  177 	stx	(_malloc_size_65536_39 + 1)
   008A                     178 00107$:
                            179 ;	../malloc.c: 92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   008A ADr00r00      [ 4]  180 	lda	___sdcc_heap_free
   008D 8Dr04r00      [ 4]  181 	sta	_malloc_h_65536_40
   0090 ADr01r00      [ 4]  182 	lda	(___sdcc_heap_free + 1)
   0093 8Dr05r00      [ 4]  183 	sta	(_malloc_h_65536_40 + 1)
   0096 A9r00         [ 2]  184 	lda	#___sdcc_heap_free
   0098 8Dr06r00      [ 4]  185 	sta	_malloc_f_65536_40
   009B A9s00         [ 2]  186 	lda	#>___sdcc_heap_free
   009D 8Dr07r00      [ 4]  187 	sta	(_malloc_f_65536_40 + 1)
   00A0                     188 00115$:
   00A0 ADr05r00      [ 4]  189 	lda	(_malloc_h_65536_40 + 1)
   00A3 0Dr04r00      [ 4]  190 	ora	_malloc_h_65536_40
   00A6 D0 03         [ 4]  191 	bne	00159$
   00A8 4CrD9r01      [ 3]  192 	jmp	00113$
   00AB                     193 00159$:
                            194 ;	../malloc.c: 94: size_t blocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
   00AB ADr04r00      [ 4]  195 	lda	_malloc_h_65536_40
   00AE 85*00         [ 3]  196 	sta	*(__DPTR+0)
   00B0 ADr05r00      [ 4]  197 	lda	(_malloc_h_65536_40 + 1)
   00B3 85*01         [ 3]  198 	sta	*(__DPTR+1)
   00B5 A0 00         [ 2]  199 	ldy	#0x00
   00B7 B1*00         [ 6]  200 	lda	[__DPTR],y
   00B9 85*00         [ 3]  201 	sta	*_malloc_sloc0_1_0
   00BB C8            [ 2]  202 	iny
   00BC B1*00         [ 6]  203 	lda	[__DPTR],y
   00BE 85*01         [ 3]  204 	sta	*(_malloc_sloc0_1_0 + 1)
   00C0 A5*00         [ 3]  205 	lda	*_malloc_sloc0_1_0
   00C2 A6*01         [ 3]  206 	ldx	*(_malloc_sloc0_1_0 + 1)
   00C4 ACr04r00      [ 4]  207 	ldy	_malloc_h_65536_40
   00C7 84*02         [ 3]  208 	sty	*_malloc_sloc1_1_0
   00C9 ACr05r00      [ 4]  209 	ldy	(_malloc_h_65536_40 + 1)
   00CC 84*03         [ 3]  210 	sty	*(_malloc_sloc1_1_0 + 1)
   00CE 38            [ 2]  211 	sec
   00CF E5*02         [ 3]  212 	sbc	*_malloc_sloc1_1_0
   00D1 8Dr08r00      [ 4]  213 	sta	_malloc_blocksize_196608_42
   00D4 8A            [ 2]  214 	txa
   00D5 E5*03         [ 3]  215 	sbc	*(_malloc_sloc1_1_0 + 1)
   00D7 8Dr09r00      [ 4]  216 	sta	(_malloc_blocksize_196608_42 + 1)
                            217 ;	../malloc.c: 95: if(blocksize >= size) // Found free block of sufficient size.
   00DA ADr08r00      [ 4]  218 	lda	_malloc_blocksize_196608_42
   00DD 38            [ 2]  219 	sec
   00DE EDr02r00      [ 4]  220 	sbc	_malloc_size_65536_39
   00E1 ADr09r00      [ 4]  221 	lda	(_malloc_blocksize_196608_42 + 1)
   00E4 EDr03r00      [ 4]  222 	sbc	(_malloc_size_65536_39 + 1)
   00E7 B0 03         [ 4]  223 	bcs	00160$
   00E9 4CrB3r01      [ 3]  224 	jmp	00116$
   00EC                     225 00160$:
                            226 ;	../malloc.c: 97: if(blocksize >= size + sizeof(struct header)) // It is worth creating a new free block
   00EC ADr02r00      [ 4]  227 	lda	_malloc_size_65536_39
   00EF AEr03r00      [ 4]  228 	ldx	(_malloc_size_65536_39 + 1)
   00F2 18            [ 2]  229 	clc
   00F3 69 04         [ 2]  230 	adc	#0x04
   00F5 90 01         [ 4]  231 	bcc	00161$
   00F7 E8            [ 2]  232 	inx
   00F8                     233 00161$:
   00F8 85*00         [ 3]  234 	sta	*(__TEMP+0)
   00FA ADr08r00      [ 4]  235 	lda	_malloc_blocksize_196608_42
   00FD 38            [ 2]  236 	sec
   00FE E5*00         [ 3]  237 	sbc	*(__TEMP+0)
   0100 ADr09r00      [ 4]  238 	lda	(_malloc_blocksize_196608_42 + 1)
   0103 86*00         [ 3]  239 	stx	*(__TEMP+0)
   0105 E5*00         [ 3]  240 	sbc	*(__TEMP+0)
   0107 90 75         [ 4]  241 	bcc	00109$
                            242 ;	../malloc.c: 99: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + size);
   0109 A5*02         [ 3]  243 	lda	*_malloc_sloc1_1_0
   010B 18            [ 2]  244 	clc
   010C 6Dr02r00      [ 4]  245 	adc	_malloc_size_65536_39
   010F 48            [ 3]  246 	pha
   0110 A5*03         [ 3]  247 	lda	*(_malloc_sloc1_1_0 + 1)
   0112 6Dr03r00      [ 4]  248 	adc	(_malloc_size_65536_39 + 1)
   0115 AA            [ 2]  249 	tax
   0116 68            [ 4]  250 	pla
                            251 ;	../malloc.c: 100: newheader->next = h->next;
   0117 8Dr0Ar00      [ 4]  252 	sta	_malloc_newheader_327680_44
   011A 8Er0Br00      [ 4]  253 	stx	(_malloc_newheader_327680_44 + 1)
   011D 85*00         [ 3]  254 	sta	*(__DPTR+0)
   011F 86*01         [ 3]  255 	stx	*(__DPTR+1)
   0121 A5*00         [ 3]  256 	lda	*_malloc_sloc0_1_0
   0123 A0 00         [ 2]  257 	ldy	#0x00
   0125 91*00         [ 6]  258 	sta	[__DPTR],y
   0127 A5*01         [ 3]  259 	lda	*(_malloc_sloc0_1_0 + 1)
   0129 C8            [ 2]  260 	iny
   012A 91*00         [ 6]  261 	sta	[__DPTR],y
                            262 ;	../malloc.c: 101: newheader->next_free = h->next_free;
   012C ADr0Ar00      [ 4]  263 	lda	_malloc_newheader_327680_44
   012F 85*02         [ 3]  264 	sta	*_malloc_sloc1_1_0
   0131 ADr0Br00      [ 4]  265 	lda	(_malloc_newheader_327680_44 + 1)
   0134 85*03         [ 3]  266 	sta	*(_malloc_sloc1_1_0 + 1)
   0136 ADr04r00      [ 4]  267 	lda	_malloc_h_65536_40
   0139 AEr05r00      [ 4]  268 	ldx	(_malloc_h_65536_40 + 1)
   013C 85*00         [ 3]  269 	sta	*(__DPTR+0)
   013E 86*01         [ 3]  270 	stx	*(__DPTR+1)
   0140 A0 03         [ 2]  271 	ldy	#0x03
   0142 B1*00         [ 6]  272 	lda	[__DPTR],y
   0144 AA            [ 2]  273 	tax
   0145 88            [ 2]  274 	dey
   0146 B1*00         [ 6]  275 	lda	[__DPTR],y
   0148 91*02         [ 6]  276 	sta	[*_malloc_sloc1_1_0],y
   014A 8A            [ 2]  277 	txa
   014B C8            [ 2]  278 	iny
   014C 91*02         [ 6]  279 	sta	[*_malloc_sloc1_1_0],y
                            280 ;	../malloc.c: 102: *f = newheader;
   014E ADr06r00      [ 4]  281 	lda	_malloc_f_65536_40
   0151 85*00         [ 3]  282 	sta	*(__DPTR+0)
   0153 ADr07r00      [ 4]  283 	lda	(_malloc_f_65536_40 + 1)
   0156 85*01         [ 3]  284 	sta	*(__DPTR+1)
   0158 ADr0Ar00      [ 4]  285 	lda	_malloc_newheader_327680_44
   015B A0 00         [ 2]  286 	ldy	#0x00
   015D 91*00         [ 6]  287 	sta	[__DPTR],y
   015F ADr0Br00      [ 4]  288 	lda	(_malloc_newheader_327680_44 + 1)
   0162 C8            [ 2]  289 	iny
   0163 91*00         [ 6]  290 	sta	[__DPTR],y
                            291 ;	../malloc.c: 103: h->next = newheader;
   0165 ADr04r00      [ 4]  292 	lda	_malloc_h_65536_40
   0168 85*00         [ 3]  293 	sta	*(__DPTR+0)
   016A ADr05r00      [ 4]  294 	lda	(_malloc_h_65536_40 + 1)
   016D 85*01         [ 3]  295 	sta	*(__DPTR+1)
   016F ADr0Ar00      [ 4]  296 	lda	_malloc_newheader_327680_44
   0172 88            [ 2]  297 	dey
   0173 91*00         [ 6]  298 	sta	[__DPTR],y
   0175 ADr0Br00      [ 4]  299 	lda	(_malloc_newheader_327680_44 + 1)
   0178 C8            [ 2]  300 	iny
   0179 91*00         [ 6]  301 	sta	[__DPTR],y
   017B 4CrA6r01      [ 3]  302 	jmp	00110$
   017E                     303 00109$:
                            304 ;	../malloc.c: 106: *f = h->next_free;
   017E ADr04r00      [ 4]  305 	lda	_malloc_h_65536_40
   0181 AEr05r00      [ 4]  306 	ldx	(_malloc_h_65536_40 + 1)
   0184 85*00         [ 3]  307 	sta	*(__DPTR+0)
   0186 86*01         [ 3]  308 	stx	*(__DPTR+1)
   0188 A0 03         [ 2]  309 	ldy	#0x03
   018A B1*00         [ 6]  310 	lda	[__DPTR],y
   018C AA            [ 2]  311 	tax
   018D 88            [ 2]  312 	dey
   018E B1*00         [ 6]  313 	lda	[__DPTR],y
   0190 85*00         [ 3]  314 	sta	*(__TEMP+0)
   0192 ADr06r00      [ 4]  315 	lda	_malloc_f_65536_40
   0195 85*00         [ 3]  316 	sta	*(__DPTR+0)
   0197 ADr07r00      [ 4]  317 	lda	(_malloc_f_65536_40 + 1)
   019A 85*01         [ 3]  318 	sta	*(__DPTR+1)
   019C A5*00         [ 3]  319 	lda	*(__TEMP+0)
   019E A0 00         [ 2]  320 	ldy	#0x00
   01A0 91*00         [ 6]  321 	sta	[__DPTR],y
   01A2 8A            [ 2]  322 	txa
   01A3 C8            [ 2]  323 	iny
   01A4 91*00         [ 6]  324 	sta	[__DPTR],y
   01A6                     325 00110$:
                            326 ;	../malloc.c: 108: return(&(h->next_free));
   01A6 ADr04r00      [ 4]  327 	lda	_malloc_h_65536_40
   01A9 AEr05r00      [ 4]  328 	ldx	(_malloc_h_65536_40 + 1)
   01AC 18            [ 2]  329 	clc
   01AD 69 02         [ 2]  330 	adc	#0x02
   01AF 90 2B         [ 4]  331 	bcc	00117$
   01B1 E8            [ 2]  332 	inx
   01B2 60            [ 6]  333 	rts
   01B3                     334 00116$:
                            335 ;	../malloc.c: 92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   01B3 ADr04r00      [ 4]  336 	lda	_malloc_h_65536_40
   01B6 AEr05r00      [ 4]  337 	ldx	(_malloc_h_65536_40 + 1)
   01B9 18            [ 2]  338 	clc
   01BA 69 02         [ 2]  339 	adc	#0x02
   01BC 90 01         [ 4]  340 	bcc	00164$
   01BE E8            [ 2]  341 	inx
   01BF                     342 00164$:
   01BF 8Dr06r00      [ 4]  343 	sta	_malloc_f_65536_40
   01C2 8Er07r00      [ 4]  344 	stx	(_malloc_f_65536_40 + 1)
   01C5 85*00         [ 3]  345 	sta	*(__DPTR+0)
   01C7 86*01         [ 3]  346 	stx	*(__DPTR+1)
   01C9 A0 00         [ 2]  347 	ldy	#0x00
   01CB B1*00         [ 6]  348 	lda	[__DPTR],y
   01CD 8Dr04r00      [ 4]  349 	sta	_malloc_h_65536_40
   01D0 C8            [ 2]  350 	iny
   01D1 B1*00         [ 6]  351 	lda	[__DPTR],y
   01D3 8Dr05r00      [ 4]  352 	sta	(_malloc_h_65536_40 + 1)
   01D6 4CrA0r00      [ 3]  353 	jmp	00115$
   01D9                     354 00113$:
                            355 ;	../malloc.c: 112: return(0);
   01D9 A9 00         [ 2]  356 	lda	#0x00
   01DB AA            [ 2]  357 	tax
   01DC                     358 00117$:
                            359 ;	../malloc.c: 113: }
   01DC 60            [ 6]  360 	rts
                            361 	.area CODE
                            362 	.area RODATA
                            363 	.area XINIT
                            364 	.area CABS    (ABS)
