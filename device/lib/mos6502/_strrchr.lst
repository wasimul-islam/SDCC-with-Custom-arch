                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strrchr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strrchr_PARM_2
                             12 	.globl _strrchr
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 	.area	OSEG    (PAG, OVR)
   0000                      21 _strrchr_sloc0_1_0:
   0000                      22 	.ds 2
                             23 ;--------------------------------------------------------
                             24 ; uninitialized external ram data
                             25 ;--------------------------------------------------------
                             26 	.area BSS
   0000                      27 _strrchr_PARM_2:
   0000                      28 	.ds 1
   0001                      29 _strrchr_start_65536_27:
   0001                      30 	.ds 2
                             31 ;--------------------------------------------------------
                             32 ; absolute external ram data
                             33 ;--------------------------------------------------------
                             34 	.area DABS    (ABS)
                             35 ;--------------------------------------------------------
                             36 ; initialized external ram data
                             37 ;--------------------------------------------------------
                             38 	.area DATA
                             39 ;--------------------------------------------------------
                             40 ; global & static initialisations
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area GSINIT
                             44 	.area GSFINAL
                             45 	.area GSINIT
                             46 ;--------------------------------------------------------
                             47 ; Home
                             48 ;--------------------------------------------------------
                             49 	.area _CODE
                             50 	.area _CODE
                             51 ;--------------------------------------------------------
                             52 ; code
                             53 ;--------------------------------------------------------
                             54 	.area CODE
                             55 ;------------------------------------------------------------
                             56 ;Allocation info for local variables in function 'strrchr'
                             57 ;------------------------------------------------------------
                             58 ;ch                        Allocated with name '_strrchr_PARM_2'
                             59 ;string                    Allocated to registers a x 
                             60 ;start                     Allocated with name '_strrchr_start_65536_27'
                             61 ;sloc0                     Allocated with name '_strrchr_sloc0_1_0'
                             62 ;------------------------------------------------------------
                             63 ;	../_strrchr.c: 32: char * strrchr ( const char * string, char ch )
                             64 ;	-----------------------------------------
                             65 ;	 function strrchr
                             66 ;	-----------------------------------------
                             67 ;	Register assignment is optimal.
                             68 ;	Stack space usage: 0 bytes.
   0000                      69 _strrchr:
                             70 ;	../_strrchr.c: 37: const char * start = string;
   0000 8Dr01r00      [ 4]   71 	sta	_strrchr_start_65536_27
   0003 8Er02r00      [ 4]   72 	stx	(_strrchr_start_65536_27 + 1)
                             73 ;	../_strrchr.c: 39: while (*string++)                       /* find end of string */
   0006 85*00         [ 3]   74 	sta	*_strrchr_sloc0_1_0
   0008 86*01         [ 3]   75 	stx	*(_strrchr_sloc0_1_0 + 1)
   000A                      76 00101$:
   000A A0 00         [ 2]   77 	ldy	#0x00
   000C B1*00         [ 6]   78 	lda	[*_strrchr_sloc0_1_0],y
   000E E6*00         [ 5]   79 	inc	*_strrchr_sloc0_1_0
   0010 D0 02         [ 4]   80 	bne	00133$
   0012 E6*01         [ 5]   81 	inc	*(_strrchr_sloc0_1_0 + 1)
   0014                      82 00133$:
   0014 C9 00         [ 2]   83 	cmp	#0x00
   0016 D0 F2         [ 4]   84 	bne	00101$
                             85 ;	../_strrchr.c: 42: while (--string != start && *string != ch)
   0018                      86 00105$:
   0018 38            [ 2]   87 	sec
   0019 A5*00         [ 3]   88 	lda	*_strrchr_sloc0_1_0
   001B E9 01         [ 2]   89 	sbc	#0x01
   001D 85*00         [ 3]   90 	sta	*_strrchr_sloc0_1_0
   001F B0 02         [ 4]   91 	bcs	00135$
   0021 C6*01         [ 5]   92 	dec	*(_strrchr_sloc0_1_0 + 1)
   0023                      93 00135$:
   0023 A5*00         [ 3]   94 	lda	*_strrchr_sloc0_1_0
   0025 CDr01r00      [ 4]   95 	cmp	_strrchr_start_65536_27
   0028 D0 07         [ 4]   96 	bne	00137$
   002A A5*01         [ 3]   97 	lda	*(_strrchr_sloc0_1_0 + 1)
   002C CDr02r00      [ 4]   98 	cmp	(_strrchr_start_65536_27 + 1)
   002F F0 09         [ 4]   99 	beq	00107$
   0031                     100 00137$:
   0031 A0 00         [ 2]  101 	ldy	#0x00
   0033 B1*00         [ 6]  102 	lda	[*_strrchr_sloc0_1_0],y
   0035 CDr00r00      [ 4]  103 	cmp	_strrchr_PARM_2
   0038 D0 DE         [ 4]  104 	bne	00105$
   003A                     105 00107$:
                            106 ;	../_strrchr.c: 45: if (*string == ch)                      /* char found ? */
   003A A0 00         [ 2]  107 	ldy	#0x00
   003C B1*00         [ 6]  108 	lda	[*_strrchr_sloc0_1_0],y
   003E CDr00r00      [ 4]  109 	cmp	_strrchr_PARM_2
   0041 D0 05         [ 4]  110 	bne	00109$
                            111 ;	../_strrchr.c: 46: return( (char *)string );
   0043 A6*01         [ 3]  112 	ldx	*(_strrchr_sloc0_1_0 + 1)
   0045 A5*00         [ 3]  113 	lda	*_strrchr_sloc0_1_0
   0047 60            [ 6]  114 	rts
   0048                     115 00109$:
                            116 ;	../_strrchr.c: 48: return (NULL) ;
   0048 A9 00         [ 2]  117 	lda	#0x00
   004A AA            [ 2]  118 	tax
                            119 ;	../_strrchr.c: 49: }
   004B 60            [ 6]  120 	rts
                            121 	.area CODE
                            122 	.area RODATA
                            123 	.area XINIT
                            124 	.area CABS    (ABS)
