                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module time
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___day
                             12 	.globl ___month
                             13 	.globl _RtcRead
                             14 	.globl _sprintf
                             15 	.globl _time
                             16 	.globl _asctime
                             17 	.globl _ctime
                             18 	.globl _localtime
                             19 	.globl _gmtime
                             20 	.globl _mktime
                             21 ;--------------------------------------------------------
                             22 ; ZP ram data
                             23 ;--------------------------------------------------------
                             24 	.area ZP      (PAG)
   0000                      25 _asctime_sloc0_1_0:
   0000                      26 	.ds 2
   0002                      27 _asctime_sloc1_1_0:
   0002                      28 	.ds 2
   0004                      29 _asctime_sloc2_1_0:
   0004                      30 	.ds 2
   0006                      31 _asctime_sloc3_1_0:
   0006                      32 	.ds 2
   0008                      33 _asctime_sloc4_1_0:
   0008                      34 	.ds 2
   000A                      35 _asctime_sloc5_1_0:
   000A                      36 	.ds 2
   000C                      37 _asctime_sloc6_1_0:
   000C                      38 	.ds 2
   000E                      39 _gmtime_sloc0_1_0:
   000E                      40 	.ds 4
   0012                      41 _gmtime_sloc1_1_0:
   0012                      42 	.ds 4
   0016                      43 _gmtime_sloc2_1_0:
   0016                      44 	.ds 2
   0018                      45 _gmtime_sloc3_1_0:
   0018                      46 	.ds 4
   001C                      47 _mktime_sloc0_1_0:
   001C                      48 	.ds 4
   0020                      49 _mktime_sloc1_1_0:
   0020                      50 	.ds 2
   0022                      51 _mktime_sloc2_1_0:
   0022                      52 	.ds 4
                             53 ;--------------------------------------------------------
                             54 ; overlayable items in ram
                             55 ;--------------------------------------------------------
                             56 	.area	OSEG    (PAG, OVR)
   0000                      57 _CheckTime_sloc0_1_0:
   0000                      58 	.ds 2
                             59 ;--------------------------------------------------------
                             60 ; uninitialized external ram data
                             61 ;--------------------------------------------------------
                             62 	.area BSS
   0000                      63 _time_timeptr_65536_19:
   0000                      64 	.ds 2
   0002                      65 _time_now_65536_20:
   0002                      66 	.ds 12
   000E                      67 _time_t_65536_20:
   000E                      68 	.ds 4
   0012                      69 _ascTimeBuffer:
   0012                      70 	.ds 32
   0032                      71 _CheckTime_timeptr_65536_23:
   0032                      72 	.ds 2
   0034                      73 _asctime_timeptr_65536_25:
   0034                      74 	.ds 2
   0036                      75 _lastTime:
   0036                      76 	.ds 12
   0042                      77 _gmtime_epoch_65536_32:
   0042                      78 	.ds 4
   0046                      79 _gmtime_days_65536_32:
   0046                      80 	.ds 4
   004A                      81 _mktime_timeptr_65536_42:
   004A                      82 	.ds 2
   004C                      83 _mktime_year_65536_43:
   004C                      84 	.ds 2
   004E                      85 _mktime_month_65536_43:
   004E                      86 	.ds 2
   0050                      87 _mktime_seconds_65536_43:
   0050                      88 	.ds 4
                             89 ;--------------------------------------------------------
                             90 ; absolute external ram data
                             91 ;--------------------------------------------------------
                             92 	.area DABS    (ABS)
                             93 ;--------------------------------------------------------
                             94 ; initialized external ram data
                             95 ;--------------------------------------------------------
                             96 	.area DATA
                             97 ;--------------------------------------------------------
                             98 ; global & static initialisations
                             99 ;--------------------------------------------------------
                            100 	.area _CODE
                            101 	.area GSINIT
                            102 	.area GSFINAL
                            103 	.area GSINIT
                            104 ;--------------------------------------------------------
                            105 ; Home
                            106 ;--------------------------------------------------------
                            107 	.area _CODE
                            108 	.area _CODE
                            109 ;--------------------------------------------------------
                            110 ; code
                            111 ;--------------------------------------------------------
                            112 	.area CODE
                            113 ;------------------------------------------------------------
                            114 ;Allocation info for local variables in function 'RtcRead'
                            115 ;------------------------------------------------------------
                            116 ;timeptr                   Allocated to registers 
                            117 ;------------------------------------------------------------
                            118 ;	../time.c: 42: unsigned char RtcRead(struct tm *timeptr) {
                            119 ;	-----------------------------------------
                            120 ;	 function RtcRead
                            121 ;	-----------------------------------------
                            122 ;	Register assignment is optimal.
                            123 ;	Stack space usage: 0 bytes.
   0000                     124 _RtcRead:
                            125 ;	../time.c: 45: return 0;
   0000 A9 00         [ 2]  126 	lda	#0x00
                            127 ;	../time.c: 46: }
   0002 60            [ 6]  128 	rts
                            129 ;------------------------------------------------------------
                            130 ;Allocation info for local variables in function 'time'
                            131 ;------------------------------------------------------------
                            132 ;timeptr                   Allocated with name '_time_timeptr_65536_19'
                            133 ;now                       Allocated with name '_time_now_65536_20'
                            134 ;t                         Allocated with name '_time_t_65536_20'
                            135 ;------------------------------------------------------------
                            136 ;	../time.c: 50: time_t time(time_t *timeptr) {
                            137 ;	-----------------------------------------
                            138 ;	 function time
                            139 ;	-----------------------------------------
                            140 ;	Register assignment is optimal.
                            141 ;	Stack space usage: 0 bytes.
   0003                     142 _time:
   0003 8Dr00r00      [ 4]  143 	sta	_time_timeptr_65536_19
   0006 8Er01r00      [ 4]  144 	stx	(_time_timeptr_65536_19 + 1)
                            145 ;	../time.c: 52: time_t t=(time_t) -1;
   0009 A2 FF         [ 2]  146 	ldx	#0xff
   000B 8Er0Er00      [ 4]  147 	stx	_time_t_65536_20
   000E 8Er0Fr00      [ 4]  148 	stx	(_time_t_65536_20 + 1)
   0011 8Er10r00      [ 4]  149 	stx	(_time_t_65536_20 + 2)
   0014 8Er11r00      [ 4]  150 	stx	(_time_t_65536_20 + 3)
                            151 ;	../time.c: 54: if (RtcRead(&now)) {
   0017 A2s00         [ 2]  152 	ldx	#>_time_now_65536_20
   0019 A9r02         [ 2]  153 	lda	#_time_now_65536_20
   001B 20r00r00      [ 6]  154 	jsr	_RtcRead
   001E C9 00         [ 2]  155 	cmp	#0x00
   0020 F0 17         [ 4]  156 	beq	00102$
                            157 ;	../time.c: 55: t=mktime(&now);
   0022 A2s00         [ 2]  158 	ldx	#>_time_now_65536_20
   0024 A9r02         [ 2]  159 	lda	#_time_now_65536_20
   0026 20rA0r05      [ 6]  160 	jsr	_mktime
   0029 8Dr0Er00      [ 4]  161 	sta	_time_t_65536_20
   002C 8Er0Fr00      [ 4]  162 	stx	(_time_t_65536_20 + 1)
   002F A5*00         [ 3]  163 	lda	*___SDCC_m6502_ret2
   0031 8Dr10r00      [ 4]  164 	sta	(_time_t_65536_20 + 2)
   0034 A5*00         [ 3]  165 	lda	*___SDCC_m6502_ret3
   0036 8Dr11r00      [ 4]  166 	sta	(_time_t_65536_20 + 3)
   0039                     167 00102$:
                            168 ;	../time.c: 57: if (timeptr) {
   0039 ADr01r00      [ 4]  169 	lda	(_time_timeptr_65536_19 + 1)
   003C 0Dr00r00      [ 4]  170 	ora	_time_timeptr_65536_19
   003F F0 23         [ 4]  171 	beq	00104$
                            172 ;	../time.c: 58: *timeptr=t;
   0041 ADr00r00      [ 4]  173 	lda	_time_timeptr_65536_19
   0044 85*00         [ 3]  174 	sta	*(__DPTR+0)
   0046 ADr01r00      [ 4]  175 	lda	(_time_timeptr_65536_19 + 1)
   0049 85*01         [ 3]  176 	sta	*(__DPTR+1)
   004B ADr0Er00      [ 4]  177 	lda	_time_t_65536_20
   004E A0 00         [ 2]  178 	ldy	#0x00
   0050 91*00         [ 6]  179 	sta	[__DPTR],y
   0052 ADr0Fr00      [ 4]  180 	lda	(_time_t_65536_20 + 1)
   0055 C8            [ 2]  181 	iny
   0056 91*00         [ 6]  182 	sta	[__DPTR],y
   0058 ADr10r00      [ 4]  183 	lda	(_time_t_65536_20 + 2)
   005B C8            [ 2]  184 	iny
   005C 91*00         [ 6]  185 	sta	[__DPTR],y
   005E ADr11r00      [ 4]  186 	lda	(_time_t_65536_20 + 3)
   0061 C8            [ 2]  187 	iny
   0062 91*00         [ 6]  188 	sta	[__DPTR],y
   0064                     189 00104$:
                            190 ;	../time.c: 60: return t;
   0064 ADr11r00      [ 4]  191 	lda	(_time_t_65536_20 + 3)
   0067 85*00         [ 3]  192 	sta	*___SDCC_m6502_ret3
   0069 ADr10r00      [ 4]  193 	lda	(_time_t_65536_20 + 2)
   006C 85*00         [ 3]  194 	sta	*___SDCC_m6502_ret2
   006E AEr0Fr00      [ 4]  195 	ldx	(_time_t_65536_20 + 1)
   0071 ADr0Er00      [ 4]  196 	lda	_time_t_65536_20
                            197 ;	../time.c: 61: }
   0074 60            [ 6]  198 	rts
                            199 ;------------------------------------------------------------
                            200 ;Allocation info for local variables in function 'CheckTime'
                            201 ;------------------------------------------------------------
                            202 ;timeptr                   Allocated with name '_CheckTime_timeptr_65536_23'
                            203 ;sloc0                     Allocated with name '_CheckTime_sloc0_1_0'
                            204 ;------------------------------------------------------------
                            205 ;	../time.c: 73: static void CheckTime(struct tm *timeptr) {
                            206 ;	-----------------------------------------
                            207 ;	 function CheckTime
                            208 ;	-----------------------------------------
                            209 ;	Register assignment is optimal.
                            210 ;	Stack space usage: 0 bytes.
   0075                     211 _CheckTime:
                            212 ;	../time.c: 84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
   0075 8Dr32r00      [ 4]  213 	sta	_CheckTime_timeptr_65536_23
   0078 8Er33r00      [ 4]  214 	stx	(_CheckTime_timeptr_65536_23 + 1)
   007B 85*00         [ 3]  215 	sta	*(__DPTR+0)
   007D 86*01         [ 3]  216 	stx	*(__DPTR+1)
   007F A0 00         [ 2]  217 	ldy	#0x00
   0081 B1*00         [ 6]  218 	lda	[__DPTR],y
   0083 C9 3B         [ 2]  219 	cmp	#0x3b
   0085 F0 10         [ 4]  220 	beq	00102$
   0087 90 0E         [ 4]  221 	bcc	00102$
   0089 ADr32r00      [ 4]  222 	lda	_CheckTime_timeptr_65536_23
   008C 85*00         [ 3]  223 	sta	*(__DPTR+0)
   008E ADr33r00      [ 4]  224 	lda	(_CheckTime_timeptr_65536_23 + 1)
   0091 85*01         [ 3]  225 	sta	*(__DPTR+1)
   0093 A9 3B         [ 2]  226 	lda	#0x3b
   0095 91*00         [ 6]  227 	sta	[__DPTR],y
   0097                     228 00102$:
                            229 ;	../time.c: 85: if (timeptr->tm_min>59) timeptr->tm_min=59;
   0097 ADr32r00      [ 4]  230 	lda	_CheckTime_timeptr_65536_23
   009A 85*00         [ 3]  231 	sta	*_CheckTime_sloc0_1_0
   009C ADr33r00      [ 4]  232 	lda	(_CheckTime_timeptr_65536_23 + 1)
   009F 85*01         [ 3]  233 	sta	*(_CheckTime_sloc0_1_0 + 1)
   00A1 A0 01         [ 2]  234 	ldy	#0x01
   00A3 B1*00         [ 6]  235 	lda	[*_CheckTime_sloc0_1_0],y
   00A5 C9 3B         [ 2]  236 	cmp	#0x3b
   00A7 F0 06         [ 4]  237 	beq	00104$
   00A9 90 04         [ 4]  238 	bcc	00104$
   00AB A9 3B         [ 2]  239 	lda	#0x3b
   00AD 91*00         [ 6]  240 	sta	[*_CheckTime_sloc0_1_0],y
   00AF                     241 00104$:
                            242 ;	../time.c: 86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
   00AF ADr32r00      [ 4]  243 	lda	_CheckTime_timeptr_65536_23
   00B2 85*00         [ 3]  244 	sta	*_CheckTime_sloc0_1_0
   00B4 ADr33r00      [ 4]  245 	lda	(_CheckTime_timeptr_65536_23 + 1)
   00B7 85*01         [ 3]  246 	sta	*(_CheckTime_sloc0_1_0 + 1)
   00B9 A0 02         [ 2]  247 	ldy	#0x02
   00BB B1*00         [ 6]  248 	lda	[*_CheckTime_sloc0_1_0],y
   00BD C9 17         [ 2]  249 	cmp	#0x17
   00BF F0 06         [ 4]  250 	beq	00106$
   00C1 90 04         [ 4]  251 	bcc	00106$
   00C3 A9 17         [ 2]  252 	lda	#0x17
   00C5 91*00         [ 6]  253 	sta	[*_CheckTime_sloc0_1_0],y
   00C7                     254 00106$:
                            255 ;	../time.c: 87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
   00C7 ADr32r00      [ 4]  256 	lda	_CheckTime_timeptr_65536_23
   00CA 85*00         [ 3]  257 	sta	*_CheckTime_sloc0_1_0
   00CC ADr33r00      [ 4]  258 	lda	(_CheckTime_timeptr_65536_23 + 1)
   00CF 85*01         [ 3]  259 	sta	*(_CheckTime_sloc0_1_0 + 1)
   00D1 A0 07         [ 2]  260 	ldy	#0x07
   00D3 B1*00         [ 6]  261 	lda	[*_CheckTime_sloc0_1_0],y
   00D5 C9 06         [ 2]  262 	cmp	#0x06
   00D7 F0 06         [ 4]  263 	beq	00108$
   00D9 90 04         [ 4]  264 	bcc	00108$
   00DB A9 06         [ 2]  265 	lda	#0x06
   00DD 91*00         [ 6]  266 	sta	[*_CheckTime_sloc0_1_0],y
   00DF                     267 00108$:
                            268 ;	../time.c: 88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
   00DF ADr32r00      [ 4]  269 	lda	_CheckTime_timeptr_65536_23
   00E2 85*00         [ 3]  270 	sta	*_CheckTime_sloc0_1_0
   00E4 ADr33r00      [ 4]  271 	lda	(_CheckTime_timeptr_65536_23 + 1)
   00E7 85*01         [ 3]  272 	sta	*(_CheckTime_sloc0_1_0 + 1)
   00E9 A0 03         [ 2]  273 	ldy	#0x03
   00EB B1*00         [ 6]  274 	lda	[*_CheckTime_sloc0_1_0],y
   00ED C9 01         [ 2]  275 	cmp	#0x01
   00EF B0 07         [ 4]  276 	bcs	00112$
   00F1 A9 01         [ 2]  277 	lda	#0x01
   00F3 91*00         [ 6]  278 	sta	[*_CheckTime_sloc0_1_0],y
   00F5 4Cr04r01      [ 3]  279 	jmp	00113$
   00F8                     280 00112$:
                            281 ;	../time.c: 89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
   00F8 C9 1F         [ 2]  282 	cmp	#0x1f
   00FA F0 08         [ 4]  283 	beq	00113$
   00FC 90 06         [ 4]  284 	bcc	00113$
   00FE A9 1F         [ 2]  285 	lda	#0x1f
   0100 A0 03         [ 2]  286 	ldy	#0x03
   0102 91*00         [ 6]  287 	sta	[*_CheckTime_sloc0_1_0],y
   0104                     288 00113$:
                            289 ;	../time.c: 90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
   0104 ADr32r00      [ 4]  290 	lda	_CheckTime_timeptr_65536_23
   0107 85*00         [ 3]  291 	sta	*_CheckTime_sloc0_1_0
   0109 ADr33r00      [ 4]  292 	lda	(_CheckTime_timeptr_65536_23 + 1)
   010C 85*01         [ 3]  293 	sta	*(_CheckTime_sloc0_1_0 + 1)
   010E A0 04         [ 2]  294 	ldy	#0x04
   0110 B1*00         [ 6]  295 	lda	[*_CheckTime_sloc0_1_0],y
   0112 C9 0B         [ 2]  296 	cmp	#0x0b
   0114 F0 06         [ 4]  297 	beq	00115$
   0116 90 04         [ 4]  298 	bcc	00115$
   0118 A9 0B         [ 2]  299 	lda	#0x0b
   011A 91*00         [ 6]  300 	sta	[*_CheckTime_sloc0_1_0],y
   011C                     301 00115$:
                            302 ;	../time.c: 91: if (timeptr->tm_year<0) timeptr->tm_year=0;
   011C ADr32r00      [ 4]  303 	lda	_CheckTime_timeptr_65536_23
   011F 85*00         [ 3]  304 	sta	*_CheckTime_sloc0_1_0
   0121 ADr33r00      [ 4]  305 	lda	(_CheckTime_timeptr_65536_23 + 1)
   0124 85*01         [ 3]  306 	sta	*(_CheckTime_sloc0_1_0 + 1)
   0126 A0 06         [ 2]  307 	ldy	#0x06
   0128 B1*00         [ 6]  308 	lda	[*_CheckTime_sloc0_1_0],y
   012A AA            [ 2]  309 	tax
   012B 88            [ 2]  310 	dey
   012C B1*00         [ 6]  311 	lda	[*_CheckTime_sloc0_1_0],y
   012E 8A            [ 2]  312 	txa
   012F 38            [ 2]  313 	sec
   0130 E9 00         [ 2]  314 	sbc	#0x00
   0132 50 04         [ 4]  315 	bvc	00166$
   0134 10 05         [ 4]  316 	bpl	00165$
   0136 30 0A         [ 4]  317 	bmi	00118$
   0138                     318 00166$:
   0138 30 01         [ 4]  319 	bmi	00165$
   013A 60            [ 6]  320 	rts
   013B                     321 00165$:
   013B A9 00         [ 2]  322 	lda	#0x00
   013D 91*00         [ 6]  323 	sta	[*_CheckTime_sloc0_1_0],y
   013F C8            [ 2]  324 	iny
   0140 91*00         [ 6]  325 	sta	[*_CheckTime_sloc0_1_0],y
   0142                     326 00118$:
                            327 ;	../time.c: 92: }
   0142 60            [ 6]  328 	rts
                            329 ;------------------------------------------------------------
                            330 ;Allocation info for local variables in function 'asctime'
                            331 ;------------------------------------------------------------
                            332 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                            333 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                            334 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                            335 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                            336 ;sloc4                     Allocated with name '_asctime_sloc4_1_0'
                            337 ;sloc5                     Allocated with name '_asctime_sloc5_1_0'
                            338 ;sloc6                     Allocated with name '_asctime_sloc6_1_0'
                            339 ;timeptr                   Allocated with name '_asctime_timeptr_65536_25'
                            340 ;------------------------------------------------------------
                            341 ;	../time.c: 95: char *asctime(struct tm *timeptr) {
                            342 ;	-----------------------------------------
                            343 ;	 function asctime
                            344 ;	-----------------------------------------
                            345 ;	Register assignment is optimal.
                            346 ;	Stack space usage: 0 bytes.
   0143                     347 _asctime:
   0143 8Dr34r00      [ 4]  348 	sta	_asctime_timeptr_65536_25
                            349 ;	../time.c: 96: CheckTime(timeptr);
   0146 8Er35r00      [ 4]  350 	stx	(_asctime_timeptr_65536_25 + 1)
   0149 ADr34r00      [ 4]  351 	lda	_asctime_timeptr_65536_25
   014C 20r75r00      [ 6]  352 	jsr	_CheckTime
                            353 ;	../time.c: 100: timeptr->tm_year+1900);
   014F ADr34r00      [ 4]  354 	lda	_asctime_timeptr_65536_25
   0152 AEr35r00      [ 4]  355 	ldx	(_asctime_timeptr_65536_25 + 1)
   0155 85*00         [ 3]  356 	sta	*(__DPTR+0)
   0157 86*01         [ 3]  357 	stx	*(__DPTR+1)
   0159 A0 06         [ 2]  358 	ldy	#0x06
   015B B1*00         [ 6]  359 	lda	[__DPTR],y
   015D AA            [ 2]  360 	tax
   015E 88            [ 2]  361 	dey
   015F B1*00         [ 6]  362 	lda	[__DPTR],y
   0161 18            [ 2]  363 	clc
   0162 69 6C         [ 2]  364 	adc	#0x6c
   0164 85*00         [ 3]  365 	sta	*_asctime_sloc0_1_0
   0166 8A            [ 2]  366 	txa
   0167 69 07         [ 2]  367 	adc	#0x07
   0169 85*01         [ 3]  368 	sta	*(_asctime_sloc0_1_0 + 1)
                            369 ;	../time.c: 99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
   016B ADr34r00      [ 4]  370 	lda	_asctime_timeptr_65536_25
   016E 85*00         [ 3]  371 	sta	*(__DPTR+0)
   0170 ADr35r00      [ 4]  372 	lda	(_asctime_timeptr_65536_25 + 1)
   0173 85*01         [ 3]  373 	sta	*(__DPTR+1)
   0175 A0 00         [ 2]  374 	ldy	#0x00
   0177 B1*00         [ 6]  375 	lda	[__DPTR],y
   0179 85*02         [ 3]  376 	sta	*_asctime_sloc1_1_0
   017B 84*03         [ 3]  377 	sty	*(_asctime_sloc1_1_0 + 1)
   017D ADr34r00      [ 4]  378 	lda	_asctime_timeptr_65536_25
   0180 AEr35r00      [ 4]  379 	ldx	(_asctime_timeptr_65536_25 + 1)
   0183 85*00         [ 3]  380 	sta	*(__DPTR+0)
   0185 86*01         [ 3]  381 	stx	*(__DPTR+1)
   0187 C8            [ 2]  382 	iny
   0188 B1*00         [ 6]  383 	lda	[__DPTR],y
   018A 85*04         [ 3]  384 	sta	*_asctime_sloc2_1_0
   018C A2 00         [ 2]  385 	ldx	#0x00
   018E 86*05         [ 3]  386 	stx	*(_asctime_sloc2_1_0 + 1)
   0190 ADr34r00      [ 4]  387 	lda	_asctime_timeptr_65536_25
   0193 AEr35r00      [ 4]  388 	ldx	(_asctime_timeptr_65536_25 + 1)
   0196 85*00         [ 3]  389 	sta	*(__DPTR+0)
   0198 86*01         [ 3]  390 	stx	*(__DPTR+1)
   019A C8            [ 2]  391 	iny
   019B B1*00         [ 6]  392 	lda	[__DPTR],y
   019D 85*06         [ 3]  393 	sta	*_asctime_sloc3_1_0
   019F A2 00         [ 2]  394 	ldx	#0x00
   01A1 86*07         [ 3]  395 	stx	*(_asctime_sloc3_1_0 + 1)
                            396 ;	../time.c: 98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
   01A3 ADr34r00      [ 4]  397 	lda	_asctime_timeptr_65536_25
   01A6 AEr35r00      [ 4]  398 	ldx	(_asctime_timeptr_65536_25 + 1)
   01A9 85*00         [ 3]  399 	sta	*(__DPTR+0)
   01AB 86*01         [ 3]  400 	stx	*(__DPTR+1)
   01AD C8            [ 2]  401 	iny
   01AE B1*00         [ 6]  402 	lda	[__DPTR],y
   01B0 85*08         [ 3]  403 	sta	*_asctime_sloc4_1_0
   01B2 A2 00         [ 2]  404 	ldx	#0x00
   01B4 86*09         [ 3]  405 	stx	*(_asctime_sloc4_1_0 + 1)
   01B6 ADr34r00      [ 4]  406 	lda	_asctime_timeptr_65536_25
   01B9 AEr35r00      [ 4]  407 	ldx	(_asctime_timeptr_65536_25 + 1)
   01BC 85*00         [ 3]  408 	sta	*(__DPTR+0)
   01BE 86*01         [ 3]  409 	stx	*(__DPTR+1)
   01C0 C8            [ 2]  410 	iny
   01C1 B1*00         [ 6]  411 	lda	[__DPTR],y
   01C3 A2 00         [ 2]  412 	ldx	#0x00
   01C5 86*00         [ 3]  413 	stx	*(__TEMP+0)
   01C7 0A            [ 2]  414 	asl	a
   01C8 26*00         [ 5]  415 	rol	*(__TEMP+0)
   01CA A6*00         [ 3]  416 	ldx	*(__TEMP+0)
   01CC 18            [ 2]  417 	clc
   01CD 69r0C         [ 2]  418 	adc	#<(___month+0)
   01CF 85*00         [ 3]  419 	sta	*(__DPTR+0)
   01D1 8A            [ 2]  420 	txa
   01D2 69s00         [ 2]  421 	adc	#>(___month+0)
   01D4 85*01         [ 3]  422 	sta	*(__DPTR+1)
   01D6 A0 00         [ 2]  423 	ldy	#0x00
   01D8 B1*00         [ 6]  424 	lda	[__DPTR],y
   01DA 85*0A         [ 3]  425 	sta	*_asctime_sloc5_1_0
   01DC C8            [ 2]  426 	iny
   01DD B1*00         [ 6]  427 	lda	[__DPTR],y
   01DF 85*0B         [ 3]  428 	sta	*(_asctime_sloc5_1_0 + 1)
   01E1 ADr34r00      [ 4]  429 	lda	_asctime_timeptr_65536_25
   01E4 AEr35r00      [ 4]  430 	ldx	(_asctime_timeptr_65536_25 + 1)
   01E7 85*00         [ 3]  431 	sta	*(__DPTR+0)
   01E9 86*01         [ 3]  432 	stx	*(__DPTR+1)
   01EB A0 07         [ 2]  433 	ldy	#0x07
   01ED B1*00         [ 6]  434 	lda	[__DPTR],y
   01EF A2 00         [ 2]  435 	ldx	#0x00
   01F1 86*00         [ 3]  436 	stx	*(__TEMP+0)
   01F3 0A            [ 2]  437 	asl	a
   01F4 26*00         [ 5]  438 	rol	*(__TEMP+0)
   01F6 A6*00         [ 3]  439 	ldx	*(__TEMP+0)
   01F8 18            [ 2]  440 	clc
   01F9 69r24         [ 2]  441 	adc	#<(___day+0)
   01FB 85*00         [ 3]  442 	sta	*(__DPTR+0)
   01FD 8A            [ 2]  443 	txa
   01FE 69s00         [ 2]  444 	adc	#>(___day+0)
   0200 85*01         [ 3]  445 	sta	*(__DPTR+1)
   0202 A0 00         [ 2]  446 	ldy	#0x00
   0204 B1*00         [ 6]  447 	lda	[__DPTR],y
   0206 85*0C         [ 3]  448 	sta	*_asctime_sloc6_1_0
   0208 C8            [ 2]  449 	iny
   0209 B1*00         [ 6]  450 	lda	[__DPTR],y
   020B 85*0D         [ 3]  451 	sta	*(_asctime_sloc6_1_0 + 1)
                            452 ;	../time.c: 97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
   020D A5*01         [ 3]  453 	lda	*(_asctime_sloc0_1_0 + 1)
   020F 48            [ 3]  454 	pha
   0210 A5*00         [ 3]  455 	lda	*_asctime_sloc0_1_0
   0212 48            [ 3]  456 	pha
   0213 A5*03         [ 3]  457 	lda	*(_asctime_sloc1_1_0 + 1)
   0215 48            [ 3]  458 	pha
   0216 A5*02         [ 3]  459 	lda	*_asctime_sloc1_1_0
   0218 48            [ 3]  460 	pha
   0219 A5*05         [ 3]  461 	lda	*(_asctime_sloc2_1_0 + 1)
   021B 48            [ 3]  462 	pha
   021C A5*04         [ 3]  463 	lda	*_asctime_sloc2_1_0
   021E 48            [ 3]  464 	pha
   021F A5*07         [ 3]  465 	lda	*(_asctime_sloc3_1_0 + 1)
   0221 48            [ 3]  466 	pha
   0222 A5*06         [ 3]  467 	lda	*_asctime_sloc3_1_0
   0224 48            [ 3]  468 	pha
   0225 A5*09         [ 3]  469 	lda	*(_asctime_sloc4_1_0 + 1)
   0227 48            [ 3]  470 	pha
   0228 A5*08         [ 3]  471 	lda	*_asctime_sloc4_1_0
   022A 48            [ 3]  472 	pha
   022B A5*0B         [ 3]  473 	lda	*(_asctime_sloc5_1_0 + 1)
   022D 48            [ 3]  474 	pha
   022E A5*0A         [ 3]  475 	lda	*_asctime_sloc5_1_0
   0230 48            [ 3]  476 	pha
   0231 A5*0D         [ 3]  477 	lda	*(_asctime_sloc6_1_0 + 1)
   0233 48            [ 3]  478 	pha
   0234 A5*0C         [ 3]  479 	lda	*_asctime_sloc6_1_0
   0236 48            [ 3]  480 	pha
   0237 A9s00         [ 2]  481 	lda	#>___str_0
   0239 48            [ 3]  482 	pha
   023A A9r32         [ 2]  483 	lda	#___str_0
   023C 48            [ 3]  484 	pha
   023D A9s00         [ 2]  485 	lda	#>_ascTimeBuffer
   023F 48            [ 3]  486 	pha
   0240 A9r12         [ 2]  487 	lda	#_ascTimeBuffer
   0242 48            [ 3]  488 	pha
   0243 20r00r00      [ 6]  489 	jsr	_sprintf
   0246 85*00         [ 3]  490 	sta	*(__TEMP+0)
   0248 86*01         [ 3]  491 	stx	*(__TEMP+1)
   024A BA            [ 2]  492 	tsx
   024B 8A            [ 2]  493 	txa
   024C 18            [ 2]  494 	clc
   024D 69 12         [ 2]  495 	adc	#0x12
   024F AA            [ 2]  496 	tax
   0250 9A            [ 2]  497 	txs
                            498 ;	../time.c: 101: return ascTimeBuffer;
   0251 A2s00         [ 2]  499 	ldx	#>_ascTimeBuffer
   0253 A9r12         [ 2]  500 	lda	#_ascTimeBuffer
                            501 ;	../time.c: 102: }
   0255 60            [ 6]  502 	rts
                            503 ;------------------------------------------------------------
                            504 ;Allocation info for local variables in function 'ctime'
                            505 ;------------------------------------------------------------
                            506 ;timep                     Allocated to registers a x 
                            507 ;------------------------------------------------------------
                            508 ;	../time.c: 104: char *ctime(time_t *timep) {
                            509 ;	-----------------------------------------
                            510 ;	 function ctime
                            511 ;	-----------------------------------------
                            512 ;	Register assignment is optimal.
                            513 ;	Stack space usage: 0 bytes.
   0256                     514 _ctime:
                            515 ;	../time.c: 105: return asctime(localtime(timep));
   0256 20r5Cr02      [ 6]  516 	jsr	_localtime
                            517 ;	../time.c: 106: }
   0259 4Cr43r01      [ 3]  518 	jmp	_asctime
                            519 ;------------------------------------------------------------
                            520 ;Allocation info for local variables in function 'localtime'
                            521 ;------------------------------------------------------------
                            522 ;timep                     Allocated to registers a x 
                            523 ;------------------------------------------------------------
                            524 ;	../time.c: 121: struct tm *localtime(time_t *timep) {
                            525 ;	-----------------------------------------
                            526 ;	 function localtime
                            527 ;	-----------------------------------------
                            528 ;	Register assignment is optimal.
                            529 ;	Stack space usage: 0 bytes.
   025C                     530 _localtime:
                            531 ;	../time.c: 122: return gmtime(timep);
                            532 ;	../time.c: 123: }
   025C 4Cr5Fr02      [ 3]  533 	jmp	_gmtime
                            534 ;------------------------------------------------------------
                            535 ;Allocation info for local variables in function 'gmtime'
                            536 ;------------------------------------------------------------
                            537 ;sloc0                     Allocated with name '_gmtime_sloc0_1_0'
                            538 ;sloc1                     Allocated with name '_gmtime_sloc1_1_0'
                            539 ;sloc2                     Allocated with name '_gmtime_sloc2_1_0'
                            540 ;sloc3                     Allocated with name '_gmtime_sloc3_1_0'
                            541 ;timep                     Allocated to registers a x 
                            542 ;epoch                     Allocated with name '_gmtime_epoch_65536_32'
                            543 ;year                      Allocated to registers 
                            544 ;month                     Allocated to registers 
                            545 ;monthLength               Allocated to registers a 
                            546 ;days                      Allocated with name '_gmtime_days_65536_32'
                            547 ;------------------------------------------------------------
                            548 ;	../time.c: 125: struct tm *gmtime(time_t *timep) {
                            549 ;	-----------------------------------------
                            550 ;	 function gmtime
                            551 ;	-----------------------------------------
                            552 ;	Register assignment is optimal.
                            553 ;	Stack space usage: 0 bytes.
   025F                     554 _gmtime:
                            555 ;	../time.c: 126: unsigned long epoch=*timep;
   025F 85*00         [ 3]  556 	sta	*(__DPTR+0)
   0261 86*01         [ 3]  557 	stx	*(__DPTR+1)
   0263 A0 00         [ 2]  558 	ldy	#0x00
   0265 B1*00         [ 6]  559 	lda	[__DPTR],y
   0267 85*0E         [ 3]  560 	sta	*_gmtime_sloc0_1_0
   0269 C8            [ 2]  561 	iny
   026A B1*00         [ 6]  562 	lda	[__DPTR],y
   026C 85*0F         [ 3]  563 	sta	*(_gmtime_sloc0_1_0 + 1)
   026E C8            [ 2]  564 	iny
   026F B1*00         [ 6]  565 	lda	[__DPTR],y
   0271 85*10         [ 3]  566 	sta	*(_gmtime_sloc0_1_0 + 2)
   0273 C8            [ 2]  567 	iny
   0274 B1*00         [ 6]  568 	lda	[__DPTR],y
   0276 85*11         [ 3]  569 	sta	*(_gmtime_sloc0_1_0 + 3)
                            570 ;	../time.c: 131: lastTime.tm_sec=epoch%60;
   0278 A5*0E         [ 3]  571 	lda	*_gmtime_sloc0_1_0
   027A 8Dr00r00      [ 4]  572 	sta	__modulong_PARM_1
   027D A5*0F         [ 3]  573 	lda	*(_gmtime_sloc0_1_0 + 1)
   027F 8Dr01r00      [ 4]  574 	sta	(__modulong_PARM_1 + 1)
   0282 A5*10         [ 3]  575 	lda	*(_gmtime_sloc0_1_0 + 2)
   0284 8Dr02r00      [ 4]  576 	sta	(__modulong_PARM_1 + 2)
   0287 A5*11         [ 3]  577 	lda	*(_gmtime_sloc0_1_0 + 3)
   0289 8Dr03r00      [ 4]  578 	sta	(__modulong_PARM_1 + 3)
   028C A2 3C         [ 2]  579 	ldx	#0x3c
   028E 8Er00r00      [ 4]  580 	stx	__modulong_PARM_2
   0291 A2 00         [ 2]  581 	ldx	#0x00
   0293 8Er01r00      [ 4]  582 	stx	(__modulong_PARM_2 + 1)
   0296 8Er02r00      [ 4]  583 	stx	(__modulong_PARM_2 + 2)
   0299 8Er03r00      [ 4]  584 	stx	(__modulong_PARM_2 + 3)
   029C 20r00r00      [ 6]  585 	jsr	__modulong
   029F 85*12         [ 3]  586 	sta	*_gmtime_sloc1_1_0
   02A1 86*13         [ 3]  587 	stx	*(_gmtime_sloc1_1_0 + 1)
   02A3 A5*00         [ 3]  588 	lda	*___SDCC_m6502_ret2
   02A5 85*14         [ 3]  589 	sta	*(_gmtime_sloc1_1_0 + 2)
   02A7 A5*00         [ 3]  590 	lda	*___SDCC_m6502_ret3
   02A9 85*15         [ 3]  591 	sta	*(_gmtime_sloc1_1_0 + 3)
   02AB A5*12         [ 3]  592 	lda	*_gmtime_sloc1_1_0
   02AD 8Dr36r00      [ 4]  593 	sta	_lastTime
                            594 ;	../time.c: 132: epoch/=60; // now it is minutes
   02B0 A5*0E         [ 3]  595 	lda	*_gmtime_sloc0_1_0
   02B2 8Dr00r00      [ 4]  596 	sta	__divulong_PARM_1
   02B5 A5*0F         [ 3]  597 	lda	*(_gmtime_sloc0_1_0 + 1)
   02B7 8Dr01r00      [ 4]  598 	sta	(__divulong_PARM_1 + 1)
   02BA A5*10         [ 3]  599 	lda	*(_gmtime_sloc0_1_0 + 2)
   02BC 8Dr02r00      [ 4]  600 	sta	(__divulong_PARM_1 + 2)
   02BF A5*11         [ 3]  601 	lda	*(_gmtime_sloc0_1_0 + 3)
   02C1 8Dr03r00      [ 4]  602 	sta	(__divulong_PARM_1 + 3)
   02C4 A2 3C         [ 2]  603 	ldx	#0x3c
   02C6 8Er00r00      [ 4]  604 	stx	__divulong_PARM_2
   02C9 A2 00         [ 2]  605 	ldx	#0x00
   02CB 8Er01r00      [ 4]  606 	stx	(__divulong_PARM_2 + 1)
   02CE 8Er02r00      [ 4]  607 	stx	(__divulong_PARM_2 + 2)
   02D1 8Er03r00      [ 4]  608 	stx	(__divulong_PARM_2 + 3)
                            609 ;	../time.c: 133: lastTime.tm_min=epoch%60;
   02D4 20r00r00      [ 6]  610 	jsr	__divulong
   02D7 85*12         [ 3]  611 	sta	*_gmtime_sloc1_1_0
   02D9 86*13         [ 3]  612 	stx	*(_gmtime_sloc1_1_0 + 1)
   02DB A5*00         [ 3]  613 	lda	*___SDCC_m6502_ret2
   02DD 85*14         [ 3]  614 	sta	*(_gmtime_sloc1_1_0 + 2)
   02DF A5*00         [ 3]  615 	lda	*___SDCC_m6502_ret3
   02E1 85*15         [ 3]  616 	sta	*(_gmtime_sloc1_1_0 + 3)
   02E3 A5*12         [ 3]  617 	lda	*_gmtime_sloc1_1_0
   02E5 8Dr00r00      [ 4]  618 	sta	__modulong_PARM_1
   02E8 A5*13         [ 3]  619 	lda	*(_gmtime_sloc1_1_0 + 1)
   02EA 8Dr01r00      [ 4]  620 	sta	(__modulong_PARM_1 + 1)
   02ED A5*14         [ 3]  621 	lda	*(_gmtime_sloc1_1_0 + 2)
   02EF 8Dr02r00      [ 4]  622 	sta	(__modulong_PARM_1 + 2)
   02F2 A5*15         [ 3]  623 	lda	*(_gmtime_sloc1_1_0 + 3)
   02F4 8Dr03r00      [ 4]  624 	sta	(__modulong_PARM_1 + 3)
   02F7 A2 3C         [ 2]  625 	ldx	#0x3c
   02F9 8Er00r00      [ 4]  626 	stx	__modulong_PARM_2
   02FC A2 00         [ 2]  627 	ldx	#0x00
   02FE 8Er01r00      [ 4]  628 	stx	(__modulong_PARM_2 + 1)
   0301 8Er02r00      [ 4]  629 	stx	(__modulong_PARM_2 + 2)
   0304 8Er03r00      [ 4]  630 	stx	(__modulong_PARM_2 + 3)
   0307 20r00r00      [ 6]  631 	jsr	__modulong
   030A 85*0E         [ 3]  632 	sta	*_gmtime_sloc0_1_0
   030C 86*0F         [ 3]  633 	stx	*(_gmtime_sloc0_1_0 + 1)
   030E A5*00         [ 3]  634 	lda	*___SDCC_m6502_ret2
   0310 85*10         [ 3]  635 	sta	*(_gmtime_sloc0_1_0 + 2)
   0312 A5*00         [ 3]  636 	lda	*___SDCC_m6502_ret3
   0314 85*11         [ 3]  637 	sta	*(_gmtime_sloc0_1_0 + 3)
   0316 A5*0E         [ 3]  638 	lda	*_gmtime_sloc0_1_0
   0318 8Dr37r00      [ 4]  639 	sta	(_lastTime + 0x0001)
                            640 ;	../time.c: 134: epoch/=60; // now it is hours
   031B A5*12         [ 3]  641 	lda	*_gmtime_sloc1_1_0
   031D 8Dr00r00      [ 4]  642 	sta	__divulong_PARM_1
   0320 A5*13         [ 3]  643 	lda	*(_gmtime_sloc1_1_0 + 1)
   0322 8Dr01r00      [ 4]  644 	sta	(__divulong_PARM_1 + 1)
   0325 A5*14         [ 3]  645 	lda	*(_gmtime_sloc1_1_0 + 2)
   0327 8Dr02r00      [ 4]  646 	sta	(__divulong_PARM_1 + 2)
   032A A5*15         [ 3]  647 	lda	*(_gmtime_sloc1_1_0 + 3)
   032C 8Dr03r00      [ 4]  648 	sta	(__divulong_PARM_1 + 3)
   032F A2 3C         [ 2]  649 	ldx	#0x3c
   0331 8Er00r00      [ 4]  650 	stx	__divulong_PARM_2
   0334 A2 00         [ 2]  651 	ldx	#0x00
   0336 8Er01r00      [ 4]  652 	stx	(__divulong_PARM_2 + 1)
   0339 8Er02r00      [ 4]  653 	stx	(__divulong_PARM_2 + 2)
   033C 8Er03r00      [ 4]  654 	stx	(__divulong_PARM_2 + 3)
                            655 ;	../time.c: 135: lastTime.tm_hour=epoch%24;
   033F 20r00r00      [ 6]  656 	jsr	__divulong
   0342 85*12         [ 3]  657 	sta	*_gmtime_sloc1_1_0
   0344 86*13         [ 3]  658 	stx	*(_gmtime_sloc1_1_0 + 1)
   0346 A5*00         [ 3]  659 	lda	*___SDCC_m6502_ret2
   0348 85*14         [ 3]  660 	sta	*(_gmtime_sloc1_1_0 + 2)
   034A A5*00         [ 3]  661 	lda	*___SDCC_m6502_ret3
   034C 85*15         [ 3]  662 	sta	*(_gmtime_sloc1_1_0 + 3)
   034E A5*12         [ 3]  663 	lda	*_gmtime_sloc1_1_0
   0350 8Dr00r00      [ 4]  664 	sta	__modulong_PARM_1
   0353 A5*13         [ 3]  665 	lda	*(_gmtime_sloc1_1_0 + 1)
   0355 8Dr01r00      [ 4]  666 	sta	(__modulong_PARM_1 + 1)
   0358 A5*14         [ 3]  667 	lda	*(_gmtime_sloc1_1_0 + 2)
   035A 8Dr02r00      [ 4]  668 	sta	(__modulong_PARM_1 + 2)
   035D A5*15         [ 3]  669 	lda	*(_gmtime_sloc1_1_0 + 3)
   035F 8Dr03r00      [ 4]  670 	sta	(__modulong_PARM_1 + 3)
   0362 A2 18         [ 2]  671 	ldx	#0x18
   0364 8Er00r00      [ 4]  672 	stx	__modulong_PARM_2
   0367 A2 00         [ 2]  673 	ldx	#0x00
   0369 8Er01r00      [ 4]  674 	stx	(__modulong_PARM_2 + 1)
   036C 8Er02r00      [ 4]  675 	stx	(__modulong_PARM_2 + 2)
   036F 8Er03r00      [ 4]  676 	stx	(__modulong_PARM_2 + 3)
   0372 20r00r00      [ 6]  677 	jsr	__modulong
   0375 85*0E         [ 3]  678 	sta	*_gmtime_sloc0_1_0
   0377 86*0F         [ 3]  679 	stx	*(_gmtime_sloc0_1_0 + 1)
   0379 A5*00         [ 3]  680 	lda	*___SDCC_m6502_ret2
   037B 85*10         [ 3]  681 	sta	*(_gmtime_sloc0_1_0 + 2)
   037D A5*00         [ 3]  682 	lda	*___SDCC_m6502_ret3
   037F 85*11         [ 3]  683 	sta	*(_gmtime_sloc0_1_0 + 3)
   0381 A5*0E         [ 3]  684 	lda	*_gmtime_sloc0_1_0
   0383 8Dr38r00      [ 4]  685 	sta	(_lastTime + 0x0002)
                            686 ;	../time.c: 136: epoch/=24; // now it is days
   0386 A5*12         [ 3]  687 	lda	*_gmtime_sloc1_1_0
   0388 8Dr00r00      [ 4]  688 	sta	__divulong_PARM_1
   038B A5*13         [ 3]  689 	lda	*(_gmtime_sloc1_1_0 + 1)
   038D 8Dr01r00      [ 4]  690 	sta	(__divulong_PARM_1 + 1)
   0390 A5*14         [ 3]  691 	lda	*(_gmtime_sloc1_1_0 + 2)
   0392 8Dr02r00      [ 4]  692 	sta	(__divulong_PARM_1 + 2)
   0395 A5*15         [ 3]  693 	lda	*(_gmtime_sloc1_1_0 + 3)
   0397 8Dr03r00      [ 4]  694 	sta	(__divulong_PARM_1 + 3)
   039A A2 18         [ 2]  695 	ldx	#0x18
   039C 8Er00r00      [ 4]  696 	stx	__divulong_PARM_2
   039F A2 00         [ 2]  697 	ldx	#0x00
   03A1 8Er01r00      [ 4]  698 	stx	(__divulong_PARM_2 + 1)
   03A4 8Er02r00      [ 4]  699 	stx	(__divulong_PARM_2 + 2)
   03A7 8Er03r00      [ 4]  700 	stx	(__divulong_PARM_2 + 3)
                            701 ;	../time.c: 137: lastTime.tm_wday=(epoch+4)%7;
   03AA 20r00r00      [ 6]  702 	jsr	__divulong
   03AD 85*12         [ 3]  703 	sta	*_gmtime_sloc1_1_0
   03AF 86*13         [ 3]  704 	stx	*(_gmtime_sloc1_1_0 + 1)
   03B1 A5*00         [ 3]  705 	lda	*___SDCC_m6502_ret2
   03B3 85*14         [ 3]  706 	sta	*(_gmtime_sloc1_1_0 + 2)
   03B5 A5*00         [ 3]  707 	lda	*___SDCC_m6502_ret3
   03B7 85*15         [ 3]  708 	sta	*(_gmtime_sloc1_1_0 + 3)
   03B9 A5*12         [ 3]  709 	lda	*_gmtime_sloc1_1_0
   03BB 18            [ 2]  710 	clc
   03BC 69 04         [ 2]  711 	adc	#0x04
   03BE 8Dr00r00      [ 4]  712 	sta	__modulong_PARM_1
   03C1 A5*13         [ 3]  713 	lda	*(_gmtime_sloc1_1_0 + 1)
   03C3 69 00         [ 2]  714 	adc	#0x00
   03C5 8Dr01r00      [ 4]  715 	sta	(__modulong_PARM_1 + 1)
   03C8 A5*14         [ 3]  716 	lda	*(_gmtime_sloc1_1_0 + 2)
   03CA 69 00         [ 2]  717 	adc	#0x00
   03CC 8Dr02r00      [ 4]  718 	sta	(__modulong_PARM_1 + 2)
   03CF A5*15         [ 3]  719 	lda	*(_gmtime_sloc1_1_0 + 3)
   03D1 69 00         [ 2]  720 	adc	#0x00
   03D3 8Dr03r00      [ 4]  721 	sta	(__modulong_PARM_1 + 3)
   03D6 A2 07         [ 2]  722 	ldx	#0x07
   03D8 8Er00r00      [ 4]  723 	stx	__modulong_PARM_2
   03DB A2 00         [ 2]  724 	ldx	#0x00
   03DD 8Er01r00      [ 4]  725 	stx	(__modulong_PARM_2 + 1)
   03E0 8Er02r00      [ 4]  726 	stx	(__modulong_PARM_2 + 2)
   03E3 8Er03r00      [ 4]  727 	stx	(__modulong_PARM_2 + 3)
   03E6 20r00r00      [ 6]  728 	jsr	__modulong
   03E9 85*0E         [ 3]  729 	sta	*_gmtime_sloc0_1_0
   03EB 86*0F         [ 3]  730 	stx	*(_gmtime_sloc0_1_0 + 1)
   03ED A5*00         [ 3]  731 	lda	*___SDCC_m6502_ret2
   03EF 85*10         [ 3]  732 	sta	*(_gmtime_sloc0_1_0 + 2)
   03F1 A5*00         [ 3]  733 	lda	*___SDCC_m6502_ret3
   03F3 85*11         [ 3]  734 	sta	*(_gmtime_sloc0_1_0 + 3)
   03F5 A5*0E         [ 3]  735 	lda	*_gmtime_sloc0_1_0
   03F7 8Dr3Dr00      [ 4]  736 	sta	(_lastTime + 0x0007)
                            737 ;	../time.c: 140: days=0;
   03FA A2 00         [ 2]  738 	ldx	#0x00
   03FC 8Er46r00      [ 4]  739 	stx	_gmtime_days_65536_32
   03FF 8Er47r00      [ 4]  740 	stx	(_gmtime_days_65536_32 + 1)
   0402 8Er48r00      [ 4]  741 	stx	(_gmtime_days_65536_32 + 2)
   0405 8Er49r00      [ 4]  742 	stx	(_gmtime_days_65536_32 + 3)
                            743 ;	../time.c: 141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
   0408 A2 B2         [ 2]  744 	ldx	#0xb2
   040A 86*0E         [ 3]  745 	stx	*_gmtime_sloc0_1_0
   040C A2 07         [ 2]  746 	ldx	#0x07
   040E 86*0F         [ 3]  747 	stx	*(_gmtime_sloc0_1_0 + 1)
   0410                     748 00101$:
   0410 A9 03         [ 2]  749 	lda	#0x03
   0412 25*0E         [ 3]  750 	and	*_gmtime_sloc0_1_0
   0414 D0 07         [ 4]  751 	bne	00118$
   0416 A9 6E         [ 2]  752 	lda	#0x6e
   0418 A2 01         [ 2]  753 	ldx	#0x01
   041A 4Cr21r04      [ 3]  754 	jmp	00119$
   041D                     755 00118$:
   041D A9 6D         [ 2]  756 	lda	#0x6d
   041F A2 01         [ 2]  757 	ldx	#0x01
   0421                     758 00119$:
   0421 85*18         [ 3]  759 	sta	*_gmtime_sloc3_1_0
   0423 86*19         [ 3]  760 	stx	*(_gmtime_sloc3_1_0 + 1)
   0425 8A            [ 2]  761 	txa
   0426 0A            [ 2]  762 	asl	a
   0427 A9 00         [ 2]  763 	lda	#0x00
   0429 69 FF         [ 2]  764 	adc	#0xff
   042B 49 FF         [ 2]  765 	eor	#0xff
   042D 85*1A         [ 3]  766 	sta	*(_gmtime_sloc3_1_0 + 2)
   042F 85*1B         [ 3]  767 	sta	*(_gmtime_sloc3_1_0 + 3)
   0431 ADr46r00      [ 4]  768 	lda	_gmtime_days_65536_32
   0434 18            [ 2]  769 	clc
   0435 65*18         [ 3]  770 	adc	*_gmtime_sloc3_1_0
   0437 85*18         [ 3]  771 	sta	*_gmtime_sloc3_1_0
   0439 ADr47r00      [ 4]  772 	lda	(_gmtime_days_65536_32 + 1)
   043C 65*19         [ 3]  773 	adc	*(_gmtime_sloc3_1_0 + 1)
   043E 85*19         [ 3]  774 	sta	*(_gmtime_sloc3_1_0 + 1)
   0440 ADr48r00      [ 4]  775 	lda	(_gmtime_days_65536_32 + 2)
   0443 65*1A         [ 3]  776 	adc	*(_gmtime_sloc3_1_0 + 2)
   0445 85*1A         [ 3]  777 	sta	*(_gmtime_sloc3_1_0 + 2)
   0447 ADr49r00      [ 4]  778 	lda	(_gmtime_days_65536_32 + 3)
   044A 65*1B         [ 3]  779 	adc	*(_gmtime_sloc3_1_0 + 3)
   044C 85*1B         [ 3]  780 	sta	*(_gmtime_sloc3_1_0 + 3)
   044E A5*18         [ 3]  781 	lda	*_gmtime_sloc3_1_0
   0450 8Dr46r00      [ 4]  782 	sta	_gmtime_days_65536_32
   0453 A5*19         [ 3]  783 	lda	*(_gmtime_sloc3_1_0 + 1)
   0455 8Dr47r00      [ 4]  784 	sta	(_gmtime_days_65536_32 + 1)
   0458 A5*1A         [ 3]  785 	lda	*(_gmtime_sloc3_1_0 + 2)
   045A 8Dr48r00      [ 4]  786 	sta	(_gmtime_days_65536_32 + 2)
   045D A5*1B         [ 3]  787 	lda	*(_gmtime_sloc3_1_0 + 3)
   045F 8Dr49r00      [ 4]  788 	sta	(_gmtime_days_65536_32 + 3)
   0462 A5*12         [ 3]  789 	lda	*_gmtime_sloc1_1_0
   0464 38            [ 2]  790 	sec
   0465 E5*18         [ 3]  791 	sbc	*_gmtime_sloc3_1_0
   0467 A5*13         [ 3]  792 	lda	*(_gmtime_sloc1_1_0 + 1)
   0469 E5*19         [ 3]  793 	sbc	*(_gmtime_sloc3_1_0 + 1)
   046B A5*14         [ 3]  794 	lda	*(_gmtime_sloc1_1_0 + 2)
   046D E5*1A         [ 3]  795 	sbc	*(_gmtime_sloc3_1_0 + 2)
   046F A5*15         [ 3]  796 	lda	*(_gmtime_sloc1_1_0 + 3)
   0471 E5*1B         [ 3]  797 	sbc	*(_gmtime_sloc3_1_0 + 3)
   0473 90 09         [ 4]  798 	bcc	00103$
                            799 ;	../time.c: 142: year++;
   0475 E6*0E         [ 5]  800 	inc	*_gmtime_sloc0_1_0
   0477 D0 97         [ 4]  801 	bne	00101$
   0479 E6*0F         [ 5]  802 	inc	*(_gmtime_sloc0_1_0 + 1)
   047B 4Cr10r04      [ 3]  803 	jmp	00101$
   047E                     804 00103$:
                            805 ;	../time.c: 144: lastTime.tm_year=year-1900;
   047E A5*0E         [ 3]  806 	lda	*_gmtime_sloc0_1_0
   0480 38            [ 2]  807 	sec
   0481 E9 6C         [ 2]  808 	sbc	#0x6c
   0483 48            [ 3]  809 	pha
   0484 A5*0F         [ 3]  810 	lda	*(_gmtime_sloc0_1_0 + 1)
   0486 E9 07         [ 2]  811 	sbc	#0x07
   0488 AA            [ 2]  812 	tax
   0489 68            [ 4]  813 	pla
   048A 8Er3Cr00      [ 4]  814 	stx	((_lastTime + 0x0005) + 1)
   048D 8Dr3Br00      [ 4]  815 	sta	(_lastTime + 0x0005)
                            816 ;	../time.c: 146: days -= LEAP_YEAR(year) ? 366 : 365;
   0490 A5*0E         [ 3]  817 	lda	*_gmtime_sloc0_1_0
   0492 29 03         [ 2]  818 	and	#0x03
   0494 85*18         [ 3]  819 	sta	*_gmtime_sloc3_1_0
   0496 A2 00         [ 2]  820 	ldx	#0x00
   0498 86*19         [ 3]  821 	stx	*(_gmtime_sloc3_1_0 + 1)
   049A A5*19         [ 3]  822 	lda	*(_gmtime_sloc3_1_0 + 1)
   049C 05*18         [ 3]  823 	ora	*_gmtime_sloc3_1_0
   049E D0 06         [ 4]  824 	bne	00120$
   04A0 A9 6E         [ 2]  825 	lda	#0x6e
   04A2 E8            [ 2]  826 	inx
   04A3 4CrAAr04      [ 3]  827 	jmp	00121$
   04A6                     828 00120$:
   04A6 A9 6D         [ 2]  829 	lda	#0x6d
   04A8 A2 01         [ 2]  830 	ldx	#0x01
   04AA                     831 00121$:
   04AA 85*0E         [ 3]  832 	sta	*_gmtime_sloc0_1_0
   04AC 86*0F         [ 3]  833 	stx	*(_gmtime_sloc0_1_0 + 1)
   04AE 8A            [ 2]  834 	txa
   04AF 0A            [ 2]  835 	asl	a
   04B0 A9 00         [ 2]  836 	lda	#0x00
   04B2 69 FF         [ 2]  837 	adc	#0xff
   04B4 49 FF         [ 2]  838 	eor	#0xff
   04B6 85*10         [ 3]  839 	sta	*(_gmtime_sloc0_1_0 + 2)
   04B8 85*11         [ 3]  840 	sta	*(_gmtime_sloc0_1_0 + 3)
   04BA ADr46r00      [ 4]  841 	lda	_gmtime_days_65536_32
   04BD 38            [ 2]  842 	sec
   04BE E5*0E         [ 3]  843 	sbc	*_gmtime_sloc0_1_0
   04C0 8Dr46r00      [ 4]  844 	sta	_gmtime_days_65536_32
   04C3 ADr47r00      [ 4]  845 	lda	(_gmtime_days_65536_32 + 1)
   04C6 E5*0F         [ 3]  846 	sbc	*(_gmtime_sloc0_1_0 + 1)
   04C8 8Dr47r00      [ 4]  847 	sta	(_gmtime_days_65536_32 + 1)
   04CB ADr48r00      [ 4]  848 	lda	(_gmtime_days_65536_32 + 2)
   04CE E5*10         [ 3]  849 	sbc	*(_gmtime_sloc0_1_0 + 2)
   04D0 8Dr48r00      [ 4]  850 	sta	(_gmtime_days_65536_32 + 2)
   04D3 ADr49r00      [ 4]  851 	lda	(_gmtime_days_65536_32 + 3)
   04D6 E5*11         [ 3]  852 	sbc	*(_gmtime_sloc0_1_0 + 3)
   04D8 8Dr49r00      [ 4]  853 	sta	(_gmtime_days_65536_32 + 3)
                            854 ;	../time.c: 147: epoch -= days; // now it is days in this year, starting at 0
   04DB A5*12         [ 3]  855 	lda	*_gmtime_sloc1_1_0
   04DD 38            [ 2]  856 	sec
   04DE EDr46r00      [ 4]  857 	sbc	_gmtime_days_65536_32
   04E1 85*12         [ 3]  858 	sta	*_gmtime_sloc1_1_0
   04E3 A5*13         [ 3]  859 	lda	*(_gmtime_sloc1_1_0 + 1)
   04E5 EDr47r00      [ 4]  860 	sbc	(_gmtime_days_65536_32 + 1)
   04E8 85*13         [ 3]  861 	sta	*(_gmtime_sloc1_1_0 + 1)
   04EA A5*14         [ 3]  862 	lda	*(_gmtime_sloc1_1_0 + 2)
   04EC EDr48r00      [ 4]  863 	sbc	(_gmtime_days_65536_32 + 2)
   04EF 85*14         [ 3]  864 	sta	*(_gmtime_sloc1_1_0 + 2)
   04F1 A5*15         [ 3]  865 	lda	*(_gmtime_sloc1_1_0 + 3)
   04F3 EDr49r00      [ 4]  866 	sbc	(_gmtime_days_65536_32 + 3)
   04F6 85*15         [ 3]  867 	sta	*(_gmtime_sloc1_1_0 + 3)
   04F8 A5*12         [ 3]  868 	lda	*_gmtime_sloc1_1_0
   04FA 8Dr42r00      [ 4]  869 	sta	_gmtime_epoch_65536_32
   04FD A5*13         [ 3]  870 	lda	*(_gmtime_sloc1_1_0 + 1)
   04FF 8Dr43r00      [ 4]  871 	sta	(_gmtime_epoch_65536_32 + 1)
   0502 A5*14         [ 3]  872 	lda	*(_gmtime_sloc1_1_0 + 2)
   0504 8Dr44r00      [ 4]  873 	sta	(_gmtime_epoch_65536_32 + 2)
   0507 A5*15         [ 3]  874 	lda	*(_gmtime_sloc1_1_0 + 3)
   0509 8Dr45r00      [ 4]  875 	sta	(_gmtime_epoch_65536_32 + 3)
                            876 ;	../time.c: 148: lastTime.tm_yday=epoch;
   050C A5*12         [ 3]  877 	lda	*_gmtime_sloc1_1_0
   050E A6*13         [ 3]  878 	ldx	*(_gmtime_sloc1_1_0 + 1)
   0510 8Er3Fr00      [ 4]  879 	stx	((_lastTime + 0x0008) + 1)
   0513 8Dr3Er00      [ 4]  880 	sta	(_lastTime + 0x0008)
                            881 ;	../time.c: 153: for (month=0; month<12; month++) {
   0516 A2 00         [ 2]  882 	ldx	#0x00
   0518                     883 00114$:
                            884 ;	../time.c: 154: if (month==1) { // februari
   0518 E0 01         [ 2]  885 	cpx	#0x01
   051A D0 10         [ 4]  886 	bne	00108$
                            887 ;	../time.c: 155: if (LEAP_YEAR(year)) {
   051C A5*19         [ 3]  888 	lda	*(_gmtime_sloc3_1_0 + 1)
   051E 05*18         [ 3]  889 	ora	*_gmtime_sloc3_1_0
   0520 D0 05         [ 4]  890 	bne	00105$
                            891 ;	../time.c: 156: monthLength=29;
   0522 A9 1D         [ 2]  892 	lda	#0x1d
   0524 4Cr45r05      [ 3]  893 	jmp	00109$
   0527                     894 00105$:
                            895 ;	../time.c: 158: monthLength=28;
   0527 A9 1C         [ 2]  896 	lda	#0x1c
   0529 4Cr45r05      [ 3]  897 	jmp	00109$
   052C                     898 00108$:
                            899 ;	../time.c: 161: monthLength = monthDays[month];
   052C 86*16         [ 3]  900 	stx	*_gmtime_sloc2_1_0
   052E A0 00         [ 2]  901 	ldy	#0x00
   0530 84*17         [ 3]  902 	sty	*(_gmtime_sloc2_1_0 + 1)
   0532 86*00         [ 3]  903 	stx	*(__TEMP+0)
   0534 18            [ 2]  904 	clc
   0535 A5*16         [ 3]  905 	lda	*_gmtime_sloc2_1_0
   0537 69r00         [ 2]  906 	adc	#<(_monthDays+0)
   0539 85*00         [ 3]  907 	sta	*(__DPTR+0)
   053B A5*17         [ 3]  908 	lda	*(_gmtime_sloc2_1_0 + 1)
   053D 69s00         [ 2]  909 	adc	#>(_monthDays+0)
   053F 85*01         [ 3]  910 	sta	*(__DPTR+1)
   0541 B1*00         [ 6]  911 	lda	[__DPTR],y
   0543 A6*00         [ 3]  912 	ldx	*(__TEMP+0)
   0545                     913 00109$:
                            914 ;	../time.c: 164: if (epoch>=monthLength) {
   0545 85*12         [ 3]  915 	sta	*_gmtime_sloc1_1_0
   0547 A0 00         [ 2]  916 	ldy	#0x00
   0549 84*13         [ 3]  917 	sty	*(_gmtime_sloc1_1_0 + 1)
   054B 84*14         [ 3]  918 	sty	*(_gmtime_sloc1_1_0 + 2)
   054D 84*15         [ 3]  919 	sty	*(_gmtime_sloc1_1_0 + 3)
   054F ADr42r00      [ 4]  920 	lda	_gmtime_epoch_65536_32
   0552 38            [ 2]  921 	sec
   0553 E5*12         [ 3]  922 	sbc	*_gmtime_sloc1_1_0
   0555 ADr43r00      [ 4]  923 	lda	(_gmtime_epoch_65536_32 + 1)
   0558 E5*13         [ 3]  924 	sbc	*(_gmtime_sloc1_1_0 + 1)
   055A ADr44r00      [ 4]  925 	lda	(_gmtime_epoch_65536_32 + 2)
   055D E5*14         [ 3]  926 	sbc	*(_gmtime_sloc1_1_0 + 2)
   055F ADr45r00      [ 4]  927 	lda	(_gmtime_epoch_65536_32 + 3)
   0562 E5*15         [ 3]  928 	sbc	*(_gmtime_sloc1_1_0 + 3)
   0564 90 26         [ 4]  929 	bcc	00113$
                            930 ;	../time.c: 165: epoch-=monthLength;
   0566 ADr42r00      [ 4]  931 	lda	_gmtime_epoch_65536_32
   0569 38            [ 2]  932 	sec
   056A E5*12         [ 3]  933 	sbc	*_gmtime_sloc1_1_0
   056C 8Dr42r00      [ 4]  934 	sta	_gmtime_epoch_65536_32
   056F ADr43r00      [ 4]  935 	lda	(_gmtime_epoch_65536_32 + 1)
   0572 E5*13         [ 3]  936 	sbc	*(_gmtime_sloc1_1_0 + 1)
   0574 8Dr43r00      [ 4]  937 	sta	(_gmtime_epoch_65536_32 + 1)
   0577 ADr44r00      [ 4]  938 	lda	(_gmtime_epoch_65536_32 + 2)
   057A E5*14         [ 3]  939 	sbc	*(_gmtime_sloc1_1_0 + 2)
   057C 8Dr44r00      [ 4]  940 	sta	(_gmtime_epoch_65536_32 + 2)
   057F ADr45r00      [ 4]  941 	lda	(_gmtime_epoch_65536_32 + 3)
   0582 E5*15         [ 3]  942 	sbc	*(_gmtime_sloc1_1_0 + 3)
   0584 8Dr45r00      [ 4]  943 	sta	(_gmtime_epoch_65536_32 + 3)
                            944 ;	../time.c: 153: for (month=0; month<12; month++) {
   0587 E8            [ 2]  945 	inx
   0588 E0 0C         [ 2]  946 	cpx	#0x0c
   058A 90 8C         [ 4]  947 	bcc	00114$
   058C                     948 00113$:
                            949 ;	../time.c: 170: lastTime.tm_mon=month;
   058C 8Er3Ar00      [ 4]  950 	stx	(_lastTime + 0x0004)
                            951 ;	../time.c: 171: lastTime.tm_mday=epoch+1;
   058F AEr42r00      [ 4]  952 	ldx	_gmtime_epoch_65536_32
   0592 E8            [ 2]  953 	inx
   0593 8Er39r00      [ 4]  954 	stx	(_lastTime + 0x0003)
                            955 ;	../time.c: 173: lastTime.tm_isdst=0;
   0596 A2 00         [ 2]  956 	ldx	#0x00
   0598 8Er40r00      [ 4]  957 	stx	(_lastTime + 0x000a)
                            958 ;	../time.c: 175: return &lastTime;
   059B A2s00         [ 2]  959 	ldx	#>_lastTime
   059D A9r36         [ 2]  960 	lda	#_lastTime
                            961 ;	../time.c: 176: }
   059F 60            [ 6]  962 	rts
                            963 ;------------------------------------------------------------
                            964 ;Allocation info for local variables in function 'mktime'
                            965 ;------------------------------------------------------------
                            966 ;sloc0                     Allocated with name '_mktime_sloc0_1_0'
                            967 ;sloc1                     Allocated with name '_mktime_sloc1_1_0'
                            968 ;sloc2                     Allocated with name '_mktime_sloc2_1_0'
                            969 ;timeptr                   Allocated with name '_mktime_timeptr_65536_42'
                            970 ;year                      Allocated with name '_mktime_year_65536_43'
                            971 ;month                     Allocated with name '_mktime_month_65536_43'
                            972 ;i                         Allocated to registers 
                            973 ;seconds                   Allocated with name '_mktime_seconds_65536_43'
                            974 ;------------------------------------------------------------
                            975 ;	../time.c: 179: time_t mktime(struct tm *timeptr) {
                            976 ;	-----------------------------------------
                            977 ;	 function mktime
                            978 ;	-----------------------------------------
                            979 ;	Register assignment is optimal.
                            980 ;	Stack space usage: 0 bytes.
   05A0                     981 _mktime:
                            982 ;	../time.c: 180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
   05A0 8Dr4Ar00      [ 4]  983 	sta	_mktime_timeptr_65536_42
   05A3 8Er4Br00      [ 4]  984 	stx	(_mktime_timeptr_65536_42 + 1)
   05A6 85*00         [ 3]  985 	sta	*(__DPTR+0)
   05A8 86*01         [ 3]  986 	stx	*(__DPTR+1)
   05AA A0 06         [ 2]  987 	ldy	#0x06
   05AC B1*00         [ 6]  988 	lda	[__DPTR],y
   05AE AA            [ 2]  989 	tax
   05AF 88            [ 2]  990 	dey
   05B0 B1*00         [ 6]  991 	lda	[__DPTR],y
   05B2 18            [ 2]  992 	clc
   05B3 69 6C         [ 2]  993 	adc	#0x6c
   05B5 8Dr4Cr00      [ 4]  994 	sta	_mktime_year_65536_43
   05B8 8A            [ 2]  995 	txa
   05B9 69 07         [ 2]  996 	adc	#0x07
   05BB 8Dr4Dr00      [ 4]  997 	sta	(_mktime_year_65536_43 + 1)
   05BE ADr4Ar00      [ 4]  998 	lda	_mktime_timeptr_65536_42
   05C1 AEr4Br00      [ 4]  999 	ldx	(_mktime_timeptr_65536_42 + 1)
   05C4 85*00         [ 3] 1000 	sta	*(__DPTR+0)
   05C6 86*01         [ 3] 1001 	stx	*(__DPTR+1)
   05C8 88            [ 2] 1002 	dey
   05C9 B1*00         [ 6] 1003 	lda	[__DPTR],y
   05CB 8Dr4Er00      [ 4] 1004 	sta	_mktime_month_65536_43
   05CE A2 00         [ 2] 1005 	ldx	#0x00
   05D0 8Er4Fr00      [ 4] 1006 	stx	(_mktime_month_65536_43 + 1)
                           1007 ;	../time.c: 183: CheckTime(timeptr);
   05D3 AEr4Br00      [ 4] 1008 	ldx	(_mktime_timeptr_65536_42 + 1)
   05D6 ADr4Ar00      [ 4] 1009 	lda	_mktime_timeptr_65536_42
   05D9 20r75r00      [ 6] 1010 	jsr	_CheckTime
                           1011 ;	../time.c: 186: seconds= (year-1970)*(60*60*24L*365);
   05DC ADr4Cr00      [ 4] 1012 	lda	_mktime_year_65536_43
   05DF 38            [ 2] 1013 	sec
   05E0 E9 B2         [ 2] 1014 	sbc	#0xb2
   05E2 48            [ 3] 1015 	pha
   05E3 ADr4Dr00      [ 4] 1016 	lda	(_mktime_year_65536_43 + 1)
   05E6 E9 07         [ 2] 1017 	sbc	#0x07
   05E8 AA            [ 2] 1018 	tax
   05E9 68            [ 4] 1019 	pla
   05EA 8Dr00r00      [ 4] 1020 	sta	__mullong_PARM_2
   05ED 8Er01r00      [ 4] 1021 	stx	(__mullong_PARM_2 + 1)
   05F0 8A            [ 2] 1022 	txa
   05F1 0A            [ 2] 1023 	asl	a
   05F2 A9 00         [ 2] 1024 	lda	#0x00
   05F4 69 FF         [ 2] 1025 	adc	#0xff
   05F6 49 FF         [ 2] 1026 	eor	#0xff
   05F8 8Dr02r00      [ 4] 1027 	sta	(__mullong_PARM_2 + 2)
   05FB 8Dr03r00      [ 4] 1028 	sta	(__mullong_PARM_2 + 3)
   05FE A2 80         [ 2] 1029 	ldx	#0x80
   0600 8Er00r00      [ 4] 1030 	stx	__mullong_PARM_1
   0603 A2 33         [ 2] 1031 	ldx	#0x33
   0605 8Er01r00      [ 4] 1032 	stx	(__mullong_PARM_1 + 1)
   0608 A2 E1         [ 2] 1033 	ldx	#0xe1
   060A 8Er02r00      [ 4] 1034 	stx	(__mullong_PARM_1 + 2)
   060D A2 01         [ 2] 1035 	ldx	#0x01
   060F 8Er03r00      [ 4] 1036 	stx	(__mullong_PARM_1 + 3)
                           1037 ;	../time.c: 189: for (i=1970; i<year; i++) {
   0612 20r00r00      [ 6] 1038 	jsr	__mullong
   0615 85*1C         [ 3] 1039 	sta	*_mktime_sloc0_1_0
   0617 86*1D         [ 3] 1040 	stx	*(_mktime_sloc0_1_0 + 1)
   0619 A5*00         [ 3] 1041 	lda	*___SDCC_m6502_ret2
   061B 85*1E         [ 3] 1042 	sta	*(_mktime_sloc0_1_0 + 2)
   061D A5*00         [ 3] 1043 	lda	*___SDCC_m6502_ret3
   061F 85*1F         [ 3] 1044 	sta	*(_mktime_sloc0_1_0 + 3)
   0621 A2 B2         [ 2] 1045 	ldx	#0xb2
   0623 86*20         [ 3] 1046 	stx	*_mktime_sloc1_1_0
   0625 A2 07         [ 2] 1047 	ldx	#0x07
   0627 86*21         [ 3] 1048 	stx	*(_mktime_sloc1_1_0 + 1)
   0629                    1049 00110$:
   0629 A5*20         [ 3] 1050 	lda	*_mktime_sloc1_1_0
   062B 38            [ 2] 1051 	sec
   062C EDr4Cr00      [ 4] 1052 	sbc	_mktime_year_65536_43
   062F A5*21         [ 3] 1053 	lda	*(_mktime_sloc1_1_0 + 1)
   0631 EDr4Dr00      [ 4] 1054 	sbc	(_mktime_year_65536_43 + 1)
   0634 50 04         [ 4] 1055 	bvc	00148$
   0636 10 04         [ 4] 1056 	bpl	00147$
   0638 30 3D         [ 4] 1057 	bmi	00124$
   063A                    1058 00148$:
   063A 10 3B         [ 4] 1059 	bpl	00124$
   063C                    1060 00147$:
                           1061 ;	../time.c: 190: if (LEAP_YEAR(i)) {
   063C A2 04         [ 2] 1062 	ldx	#0x04
   063E 8Er00r00      [ 4] 1063 	stx	__modsint_PARM_2
   0641 A2 00         [ 2] 1064 	ldx	#0x00
   0643 8Er01r00      [ 4] 1065 	stx	(__modsint_PARM_2 + 1)
   0646 A6*21         [ 3] 1066 	ldx	*(_mktime_sloc1_1_0 + 1)
   0648 A5*20         [ 3] 1067 	lda	*_mktime_sloc1_1_0
   064A 20r00r00      [ 6] 1068 	jsr	__modsint
   064D C9 00         [ 2] 1069 	cmp	#0x00
   064F D0 02         [ 4] 1070 	bne	00150$
   0651 E0 00         [ 2] 1071 	cpx	#0x00
   0653                    1072 00150$:
   0653 D0 19         [ 4] 1073 	bne	00111$
                           1074 ;	../time.c: 191: seconds+= 60*60*24L;
   0655 A5*1C         [ 3] 1075 	lda	*_mktime_sloc0_1_0
   0657 18            [ 2] 1076 	clc
   0658 69 80         [ 2] 1077 	adc	#0x80
   065A 85*1C         [ 3] 1078 	sta	*_mktime_sloc0_1_0
   065C A5*1D         [ 3] 1079 	lda	*(_mktime_sloc0_1_0 + 1)
   065E 69 51         [ 2] 1080 	adc	#0x51
   0660 85*1D         [ 3] 1081 	sta	*(_mktime_sloc0_1_0 + 1)
   0662 A5*1E         [ 3] 1082 	lda	*(_mktime_sloc0_1_0 + 2)
   0664 69 01         [ 2] 1083 	adc	#0x01
   0666 85*1E         [ 3] 1084 	sta	*(_mktime_sloc0_1_0 + 2)
   0668 A5*1F         [ 3] 1085 	lda	*(_mktime_sloc0_1_0 + 3)
   066A 69 00         [ 2] 1086 	adc	#0x00
   066C 85*1F         [ 3] 1087 	sta	*(_mktime_sloc0_1_0 + 3)
   066E                    1088 00111$:
                           1089 ;	../time.c: 189: for (i=1970; i<year; i++) {
   066E E6*20         [ 5] 1090 	inc	*_mktime_sloc1_1_0
   0670 D0 B7         [ 4] 1091 	bne	00110$
   0672 E6*21         [ 5] 1092 	inc	*(_mktime_sloc1_1_0 + 1)
   0674 4Cr29r06      [ 3] 1093 	jmp	00110$
   0677                    1094 00124$:
   0677 A5*1C         [ 3] 1095 	lda	*_mktime_sloc0_1_0
   0679 8Dr50r00      [ 4] 1096 	sta	_mktime_seconds_65536_43
   067C A5*1D         [ 3] 1097 	lda	*(_mktime_sloc0_1_0 + 1)
   067E 8Dr51r00      [ 4] 1098 	sta	(_mktime_seconds_65536_43 + 1)
   0681 A5*1E         [ 3] 1099 	lda	*(_mktime_sloc0_1_0 + 2)
   0683 8Dr52r00      [ 4] 1100 	sta	(_mktime_seconds_65536_43 + 2)
   0686 A5*1F         [ 3] 1101 	lda	*(_mktime_sloc0_1_0 + 3)
   0688 8Dr53r00      [ 4] 1102 	sta	(_mktime_seconds_65536_43 + 3)
                           1103 ;	../time.c: 196: for (i=0; i<month; i++) {
   068B A2 04         [ 2] 1104 	ldx	#0x04
   068D 8Er00r00      [ 4] 1105 	stx	__modsint_PARM_2
   0690 A2 00         [ 2] 1106 	ldx	#0x00
   0692 8Er01r00      [ 4] 1107 	stx	(__modsint_PARM_2 + 1)
   0695 AEr4Dr00      [ 4] 1108 	ldx	(_mktime_year_65536_43 + 1)
   0698 ADr4Cr00      [ 4] 1109 	lda	_mktime_year_65536_43
   069B 20r00r00      [ 6] 1110 	jsr	__modsint
   069E 85*20         [ 3] 1111 	sta	*_mktime_sloc1_1_0
   06A0 86*21         [ 3] 1112 	stx	*(_mktime_sloc1_1_0 + 1)
   06A2 A2 00         [ 2] 1113 	ldx	#0x00
   06A4 86*1C         [ 3] 1114 	stx	*_mktime_sloc0_1_0
   06A6 86*1D         [ 3] 1115 	stx	*(_mktime_sloc0_1_0 + 1)
   06A8                    1116 00113$:
   06A8 A5*1C         [ 3] 1117 	lda	*_mktime_sloc0_1_0
   06AA 38            [ 2] 1118 	sec
   06AB EDr4Er00      [ 4] 1119 	sbc	_mktime_month_65536_43
   06AE A5*1D         [ 3] 1120 	lda	*(_mktime_sloc0_1_0 + 1)
   06B0 EDr4Fr00      [ 4] 1121 	sbc	(_mktime_month_65536_43 + 1)
   06B3 50 04         [ 4] 1122 	bvc	00154$
   06B5 10 07         [ 4] 1123 	bpl	00153$
   06B7 30 02         [ 4] 1124 	bmi	00155$
   06B9                    1125 00154$:
   06B9 30 03         [ 4] 1126 	bmi	00153$
   06BB                    1127 00155$:
   06BB 4Cr5Br07      [ 3] 1128 	jmp	00108$
   06BE                    1129 00153$:
                           1130 ;	../time.c: 197: if (i==1 && LEAP_YEAR(year)) { 
   06BE A5*1C         [ 3] 1131 	lda	*_mktime_sloc0_1_0
   06C0 C9 01         [ 2] 1132 	cmp	#0x01
   06C2 D0 2E         [ 4] 1133 	bne	00105$
   06C4 A5*1D         [ 3] 1134 	lda	*(_mktime_sloc0_1_0 + 1)
   06C6 D0 2A         [ 4] 1135 	bne	00105$
   06C8 A5*21         [ 3] 1136 	lda	*(_mktime_sloc1_1_0 + 1)
   06CA 05*20         [ 3] 1137 	ora	*_mktime_sloc1_1_0
   06CC D0 24         [ 4] 1138 	bne	00105$
                           1139 ;	../time.c: 198: seconds+= 60*60*24L*29;
   06CE ADr50r00      [ 4] 1140 	lda	_mktime_seconds_65536_43
   06D1 18            [ 2] 1141 	clc
   06D2 69 80         [ 2] 1142 	adc	#0x80
   06D4 8Dr50r00      [ 4] 1143 	sta	_mktime_seconds_65536_43
   06D7 ADr51r00      [ 4] 1144 	lda	(_mktime_seconds_65536_43 + 1)
   06DA 69 3B         [ 2] 1145 	adc	#0x3b
   06DC 8Dr51r00      [ 4] 1146 	sta	(_mktime_seconds_65536_43 + 1)
   06DF ADr52r00      [ 4] 1147 	lda	(_mktime_seconds_65536_43 + 2)
   06E2 69 26         [ 2] 1148 	adc	#0x26
   06E4 8Dr52r00      [ 4] 1149 	sta	(_mktime_seconds_65536_43 + 2)
   06E7 ADr53r00      [ 4] 1150 	lda	(_mktime_seconds_65536_43 + 3)
   06EA 69 00         [ 2] 1151 	adc	#0x00
   06EC 8Dr53r00      [ 4] 1152 	sta	(_mktime_seconds_65536_43 + 3)
   06EF 4Cr52r07      [ 3] 1153 	jmp	00114$
   06F2                    1154 00105$:
                           1155 ;	../time.c: 200: seconds+= 60*60*24L*monthDays[i];
   06F2 A5*1C         [ 3] 1156 	lda	*_mktime_sloc0_1_0
   06F4 A6*1D         [ 3] 1157 	ldx	*(_mktime_sloc0_1_0 + 1)
   06F6 18            [ 2] 1158 	clc
   06F7 69r00         [ 2] 1159 	adc	#<(_monthDays+0)
   06F9 85*00         [ 3] 1160 	sta	*(__DPTR+0)
   06FB 8A            [ 2] 1161 	txa
   06FC 69s00         [ 2] 1162 	adc	#>(_monthDays+0)
   06FE 85*01         [ 3] 1163 	sta	*(__DPTR+1)
   0700 A0 00         [ 2] 1164 	ldy	#0x00
   0702 B1*00         [ 6] 1165 	lda	[__DPTR],y
   0704 8Dr00r00      [ 4] 1166 	sta	__mullong_PARM_2
   0707 8Cr01r00      [ 4] 1167 	sty	(__mullong_PARM_2 + 1)
   070A 8Cr02r00      [ 4] 1168 	sty	(__mullong_PARM_2 + 2)
   070D 8Cr03r00      [ 4] 1169 	sty	(__mullong_PARM_2 + 3)
   0710 A2 80         [ 2] 1170 	ldx	#0x80
   0712 8Er00r00      [ 4] 1171 	stx	__mullong_PARM_1
   0715 A2 51         [ 2] 1172 	ldx	#0x51
   0717 8Er01r00      [ 4] 1173 	stx	(__mullong_PARM_1 + 1)
   071A A2 01         [ 2] 1174 	ldx	#0x01
   071C 8Er02r00      [ 4] 1175 	stx	(__mullong_PARM_1 + 2)
   071F 8Cr03r00      [ 4] 1176 	sty	(__mullong_PARM_1 + 3)
   0722 20r00r00      [ 6] 1177 	jsr	__mullong
   0725 85*22         [ 3] 1178 	sta	*_mktime_sloc2_1_0
   0727 86*23         [ 3] 1179 	stx	*(_mktime_sloc2_1_0 + 1)
   0729 A5*00         [ 3] 1180 	lda	*___SDCC_m6502_ret2
   072B 85*24         [ 3] 1181 	sta	*(_mktime_sloc2_1_0 + 2)
   072D A5*00         [ 3] 1182 	lda	*___SDCC_m6502_ret3
   072F 85*25         [ 3] 1183 	sta	*(_mktime_sloc2_1_0 + 3)
   0731 ADr50r00      [ 4] 1184 	lda	_mktime_seconds_65536_43
   0734 18            [ 2] 1185 	clc
   0735 65*22         [ 3] 1186 	adc	*_mktime_sloc2_1_0
   0737 8Dr50r00      [ 4] 1187 	sta	_mktime_seconds_65536_43
   073A ADr51r00      [ 4] 1188 	lda	(_mktime_seconds_65536_43 + 1)
   073D 65*23         [ 3] 1189 	adc	*(_mktime_sloc2_1_0 + 1)
   073F 8Dr51r00      [ 4] 1190 	sta	(_mktime_seconds_65536_43 + 1)
   0742 ADr52r00      [ 4] 1191 	lda	(_mktime_seconds_65536_43 + 2)
   0745 65*24         [ 3] 1192 	adc	*(_mktime_sloc2_1_0 + 2)
   0747 8Dr52r00      [ 4] 1193 	sta	(_mktime_seconds_65536_43 + 2)
   074A ADr53r00      [ 4] 1194 	lda	(_mktime_seconds_65536_43 + 3)
   074D 65*25         [ 3] 1195 	adc	*(_mktime_sloc2_1_0 + 3)
   074F 8Dr53r00      [ 4] 1196 	sta	(_mktime_seconds_65536_43 + 3)
   0752                    1197 00114$:
                           1198 ;	../time.c: 196: for (i=0; i<month; i++) {
   0752 E6*1C         [ 5] 1199 	inc	*_mktime_sloc0_1_0
   0754 D0 02         [ 4] 1200 	bne	00160$
   0756 E6*1D         [ 5] 1201 	inc	*(_mktime_sloc0_1_0 + 1)
   0758                    1202 00160$:
   0758 4CrA8r06      [ 3] 1203 	jmp	00113$
   075B                    1204 00108$:
                           1205 ;	../time.c: 204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
   075B ADr4Ar00      [ 4] 1206 	lda	_mktime_timeptr_65536_42
   075E AEr4Br00      [ 4] 1207 	ldx	(_mktime_timeptr_65536_42 + 1)
   0761 85*00         [ 3] 1208 	sta	*(__DPTR+0)
   0763 86*01         [ 3] 1209 	stx	*(__DPTR+1)
   0765 A0 03         [ 2] 1210 	ldy	#0x03
   0767 B1*00         [ 6] 1211 	lda	[__DPTR],y
   0769 A2 00         [ 2] 1212 	ldx	#0x00
   076B 38            [ 2] 1213 	sec
   076C E9 01         [ 2] 1214 	sbc	#0x01
   076E B0 01         [ 4] 1215 	bcs	00161$
   0770 CA            [ 2] 1216 	dex
   0771                    1217 00161$:
   0771 8Dr00r00      [ 4] 1218 	sta	__mullong_PARM_2
   0774 8Er01r00      [ 4] 1219 	stx	(__mullong_PARM_2 + 1)
   0777 8A            [ 2] 1220 	txa
   0778 0A            [ 2] 1221 	asl	a
   0779 A9 00         [ 2] 1222 	lda	#0x00
   077B 69 FF         [ 2] 1223 	adc	#0xff
   077D 49 FF         [ 2] 1224 	eor	#0xff
   077F 8Dr02r00      [ 4] 1225 	sta	(__mullong_PARM_2 + 2)
   0782 8Dr03r00      [ 4] 1226 	sta	(__mullong_PARM_2 + 3)
   0785 A2 80         [ 2] 1227 	ldx	#0x80
   0787 8Er00r00      [ 4] 1228 	stx	__mullong_PARM_1
   078A A2 51         [ 2] 1229 	ldx	#0x51
   078C 8Er01r00      [ 4] 1230 	stx	(__mullong_PARM_1 + 1)
   078F A2 01         [ 2] 1231 	ldx	#0x01
   0791 8Er02r00      [ 4] 1232 	stx	(__mullong_PARM_1 + 2)
   0794 CA            [ 2] 1233 	dex
   0795 8Er03r00      [ 4] 1234 	stx	(__mullong_PARM_1 + 3)
   0798 20r00r00      [ 6] 1235 	jsr	__mullong
   079B 85*22         [ 3] 1236 	sta	*_mktime_sloc2_1_0
   079D 86*23         [ 3] 1237 	stx	*(_mktime_sloc2_1_0 + 1)
   079F A5*00         [ 3] 1238 	lda	*___SDCC_m6502_ret2
   07A1 85*24         [ 3] 1239 	sta	*(_mktime_sloc2_1_0 + 2)
   07A3 A5*00         [ 3] 1240 	lda	*___SDCC_m6502_ret3
   07A5 85*25         [ 3] 1241 	sta	*(_mktime_sloc2_1_0 + 3)
   07A7 ADr50r00      [ 4] 1242 	lda	_mktime_seconds_65536_43
   07AA 18            [ 2] 1243 	clc
   07AB 65*22         [ 3] 1244 	adc	*_mktime_sloc2_1_0
   07AD 8Dr50r00      [ 4] 1245 	sta	_mktime_seconds_65536_43
   07B0 ADr51r00      [ 4] 1246 	lda	(_mktime_seconds_65536_43 + 1)
   07B3 65*23         [ 3] 1247 	adc	*(_mktime_sloc2_1_0 + 1)
   07B5 8Dr51r00      [ 4] 1248 	sta	(_mktime_seconds_65536_43 + 1)
   07B8 ADr52r00      [ 4] 1249 	lda	(_mktime_seconds_65536_43 + 2)
   07BB 65*24         [ 3] 1250 	adc	*(_mktime_sloc2_1_0 + 2)
   07BD 8Dr52r00      [ 4] 1251 	sta	(_mktime_seconds_65536_43 + 2)
   07C0 ADr53r00      [ 4] 1252 	lda	(_mktime_seconds_65536_43 + 3)
   07C3 65*25         [ 3] 1253 	adc	*(_mktime_sloc2_1_0 + 3)
   07C5 8Dr53r00      [ 4] 1254 	sta	(_mktime_seconds_65536_43 + 3)
                           1255 ;	../time.c: 205: seconds+= timeptr->tm_hour*60*60L;
   07C8 ADr4Ar00      [ 4] 1256 	lda	_mktime_timeptr_65536_42
   07CB AEr4Br00      [ 4] 1257 	ldx	(_mktime_timeptr_65536_42 + 1)
   07CE 85*00         [ 3] 1258 	sta	*(__DPTR+0)
   07D0 86*01         [ 3] 1259 	stx	*(__DPTR+1)
   07D2 A0 02         [ 2] 1260 	ldy	#0x02
   07D4 B1*00         [ 6] 1261 	lda	[__DPTR],y
   07D6 8Dr00r00      [ 4] 1262 	sta	__mullong_PARM_2
   07D9 A2 00         [ 2] 1263 	ldx	#0x00
   07DB 8Er01r00      [ 4] 1264 	stx	(__mullong_PARM_2 + 1)
   07DE 8Er02r00      [ 4] 1265 	stx	(__mullong_PARM_2 + 2)
   07E1 8Er03r00      [ 4] 1266 	stx	(__mullong_PARM_2 + 3)
   07E4 A2 10         [ 2] 1267 	ldx	#0x10
   07E6 8Er00r00      [ 4] 1268 	stx	__mullong_PARM_1
   07E9 A2 0E         [ 2] 1269 	ldx	#0x0e
   07EB 8Er01r00      [ 4] 1270 	stx	(__mullong_PARM_1 + 1)
   07EE A2 00         [ 2] 1271 	ldx	#0x00
   07F0 8Er02r00      [ 4] 1272 	stx	(__mullong_PARM_1 + 2)
   07F3 8Er03r00      [ 4] 1273 	stx	(__mullong_PARM_1 + 3)
   07F6 20r00r00      [ 6] 1274 	jsr	__mullong
   07F9 85*22         [ 3] 1275 	sta	*_mktime_sloc2_1_0
   07FB 86*23         [ 3] 1276 	stx	*(_mktime_sloc2_1_0 + 1)
   07FD A5*00         [ 3] 1277 	lda	*___SDCC_m6502_ret2
   07FF 85*24         [ 3] 1278 	sta	*(_mktime_sloc2_1_0 + 2)
   0801 A5*00         [ 3] 1279 	lda	*___SDCC_m6502_ret3
   0803 85*25         [ 3] 1280 	sta	*(_mktime_sloc2_1_0 + 3)
   0805 ADr50r00      [ 4] 1281 	lda	_mktime_seconds_65536_43
   0808 18            [ 2] 1282 	clc
   0809 65*22         [ 3] 1283 	adc	*_mktime_sloc2_1_0
   080B 8Dr50r00      [ 4] 1284 	sta	_mktime_seconds_65536_43
   080E ADr51r00      [ 4] 1285 	lda	(_mktime_seconds_65536_43 + 1)
   0811 65*23         [ 3] 1286 	adc	*(_mktime_sloc2_1_0 + 1)
   0813 8Dr51r00      [ 4] 1287 	sta	(_mktime_seconds_65536_43 + 1)
   0816 ADr52r00      [ 4] 1288 	lda	(_mktime_seconds_65536_43 + 2)
   0819 65*24         [ 3] 1289 	adc	*(_mktime_sloc2_1_0 + 2)
   081B 8Dr52r00      [ 4] 1290 	sta	(_mktime_seconds_65536_43 + 2)
   081E ADr53r00      [ 4] 1291 	lda	(_mktime_seconds_65536_43 + 3)
   0821 65*25         [ 3] 1292 	adc	*(_mktime_sloc2_1_0 + 3)
   0823 8Dr53r00      [ 4] 1293 	sta	(_mktime_seconds_65536_43 + 3)
                           1294 ;	../time.c: 206: seconds+= timeptr->tm_min*60;
   0826 ADr4Ar00      [ 4] 1295 	lda	_mktime_timeptr_65536_42
   0829 AEr4Br00      [ 4] 1296 	ldx	(_mktime_timeptr_65536_42 + 1)
   082C 85*00         [ 3] 1297 	sta	*(__DPTR+0)
   082E 86*01         [ 3] 1298 	stx	*(__DPTR+1)
   0830 A0 01         [ 2] 1299 	ldy	#0x01
   0832 B1*00         [ 6] 1300 	lda	[__DPTR],y
   0834 8Dr00r00      [ 4] 1301 	sta	__mulint_PARM_2
   0837 A2 00         [ 2] 1302 	ldx	#0x00
   0839 8Er01r00      [ 4] 1303 	stx	(__mulint_PARM_2 + 1)
   083C A9 3C         [ 2] 1304 	lda	#0x3c
   083E 20r00r00      [ 6] 1305 	jsr	__mulint
   0841 85*22         [ 3] 1306 	sta	*_mktime_sloc2_1_0
   0843 86*23         [ 3] 1307 	stx	*(_mktime_sloc2_1_0 + 1)
   0845 8A            [ 2] 1308 	txa
   0846 0A            [ 2] 1309 	asl	a
   0847 A9 00         [ 2] 1310 	lda	#0x00
   0849 69 FF         [ 2] 1311 	adc	#0xff
   084B 49 FF         [ 2] 1312 	eor	#0xff
   084D 85*24         [ 3] 1313 	sta	*(_mktime_sloc2_1_0 + 2)
   084F 85*25         [ 3] 1314 	sta	*(_mktime_sloc2_1_0 + 3)
   0851 ADr50r00      [ 4] 1315 	lda	_mktime_seconds_65536_43
   0854 18            [ 2] 1316 	clc
   0855 65*22         [ 3] 1317 	adc	*_mktime_sloc2_1_0
   0857 8Dr50r00      [ 4] 1318 	sta	_mktime_seconds_65536_43
   085A ADr51r00      [ 4] 1319 	lda	(_mktime_seconds_65536_43 + 1)
   085D 65*23         [ 3] 1320 	adc	*(_mktime_sloc2_1_0 + 1)
   085F 8Dr51r00      [ 4] 1321 	sta	(_mktime_seconds_65536_43 + 1)
   0862 ADr52r00      [ 4] 1322 	lda	(_mktime_seconds_65536_43 + 2)
   0865 65*24         [ 3] 1323 	adc	*(_mktime_sloc2_1_0 + 2)
   0867 8Dr52r00      [ 4] 1324 	sta	(_mktime_seconds_65536_43 + 2)
   086A ADr53r00      [ 4] 1325 	lda	(_mktime_seconds_65536_43 + 3)
   086D 65*25         [ 3] 1326 	adc	*(_mktime_sloc2_1_0 + 3)
   086F 8Dr53r00      [ 4] 1327 	sta	(_mktime_seconds_65536_43 + 3)
                           1328 ;	../time.c: 207: seconds+= timeptr->tm_sec;
   0872 ADr4Ar00      [ 4] 1329 	lda	_mktime_timeptr_65536_42
   0875 85*00         [ 3] 1330 	sta	*(__DPTR+0)
   0877 ADr4Br00      [ 4] 1331 	lda	(_mktime_timeptr_65536_42 + 1)
   087A 85*01         [ 3] 1332 	sta	*(__DPTR+1)
   087C A0 00         [ 2] 1333 	ldy	#0x00
   087E B1*00         [ 6] 1334 	lda	[__DPTR],y
   0880 A2 00         [ 2] 1335 	ldx	#0x00
   0882 85*22         [ 3] 1336 	sta	*_mktime_sloc2_1_0
   0884 86*23         [ 3] 1337 	stx	*(_mktime_sloc2_1_0 + 1)
   0886 8A            [ 2] 1338 	txa
   0887 0A            [ 2] 1339 	asl	a
   0888 98            [ 2] 1340 	tya
   0889 69 FF         [ 2] 1341 	adc	#0xff
   088B 49 FF         [ 2] 1342 	eor	#0xff
   088D 85*24         [ 3] 1343 	sta	*(_mktime_sloc2_1_0 + 2)
   088F 85*25         [ 3] 1344 	sta	*(_mktime_sloc2_1_0 + 3)
   0891 ADr50r00      [ 4] 1345 	lda	_mktime_seconds_65536_43
   0894 18            [ 2] 1346 	clc
   0895 65*22         [ 3] 1347 	adc	*_mktime_sloc2_1_0
   0897 8Dr50r00      [ 4] 1348 	sta	_mktime_seconds_65536_43
   089A ADr51r00      [ 4] 1349 	lda	(_mktime_seconds_65536_43 + 1)
   089D 65*23         [ 3] 1350 	adc	*(_mktime_sloc2_1_0 + 1)
   089F 8Dr51r00      [ 4] 1351 	sta	(_mktime_seconds_65536_43 + 1)
   08A2 ADr52r00      [ 4] 1352 	lda	(_mktime_seconds_65536_43 + 2)
   08A5 65*24         [ 3] 1353 	adc	*(_mktime_sloc2_1_0 + 2)
   08A7 8Dr52r00      [ 4] 1354 	sta	(_mktime_seconds_65536_43 + 2)
   08AA ADr53r00      [ 4] 1355 	lda	(_mktime_seconds_65536_43 + 3)
   08AD 65*25         [ 3] 1356 	adc	*(_mktime_sloc2_1_0 + 3)
                           1357 ;	../time.c: 208: return seconds;
   08AF 8Dr53r00      [ 4] 1358 	sta	(_mktime_seconds_65536_43 + 3)
   08B2 85*00         [ 3] 1359 	sta	*___SDCC_m6502_ret3
   08B4 ADr52r00      [ 4] 1360 	lda	(_mktime_seconds_65536_43 + 2)
   08B7 85*00         [ 3] 1361 	sta	*___SDCC_m6502_ret2
   08B9 AEr51r00      [ 4] 1362 	ldx	(_mktime_seconds_65536_43 + 1)
   08BC ADr50r00      [ 4] 1363 	lda	_mktime_seconds_65536_43
                           1364 ;	../time.c: 209: }
   08BF 60            [ 6] 1365 	rts
                           1366 	.area CODE
                           1367 	.area RODATA
   0000                    1368 _monthDays:
   0000 1F                 1369 	.db #0x1f	; 31
   0001 1C                 1370 	.db #0x1c	; 28
   0002 1F                 1371 	.db #0x1f	; 31
   0003 1E                 1372 	.db #0x1e	; 30
   0004 1F                 1373 	.db #0x1f	; 31
   0005 1E                 1374 	.db #0x1e	; 30
   0006 1F                 1375 	.db #0x1f	; 31
   0007 1F                 1376 	.db #0x1f	; 31
   0008 1E                 1377 	.db #0x1e	; 30
   0009 1F                 1378 	.db #0x1f	; 31
   000A 1E                 1379 	.db #0x1e	; 30
   000B 1F                 1380 	.db #0x1f	; 31
   000C                    1381 ___month:
   000Cr51r00              1382 	.dw __str_1
   000Er55r00              1383 	.dw __str_2
   0010r59r00              1384 	.dw __str_3
   0012r5Dr00              1385 	.dw __str_4
   0014r61r00              1386 	.dw __str_5
   0016r65r00              1387 	.dw __str_6
   0018r69r00              1388 	.dw __str_7
   001Ar6Dr00              1389 	.dw __str_8
   001Cr71r00              1390 	.dw __str_9
   001Er75r00              1391 	.dw __str_10
   0020r79r00              1392 	.dw __str_11
   0022r7Dr00              1393 	.dw __str_12
   0024                    1394 ___day:
   0024r81r00              1395 	.dw __str_13
   0026r85r00              1396 	.dw __str_14
   0028r89r00              1397 	.dw __str_15
   002Ar8Dr00              1398 	.dw __str_16
   002Cr91r00              1399 	.dw __str_17
   002Er95r00              1400 	.dw __str_18
   0030r99r00              1401 	.dw __str_19
                           1402 	.area RODATA
   0032                    1403 ___str_0:
   0032 25 73 20 25 73 20  1404 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
        25 32 64 20 25 30
        32 64 3A 25 30 32
        64 3A 25 30 32 64
        20 25 30 34 64
   004F 0A                 1405 	.db 0x0a
   0050 00                 1406 	.db 0x00
                           1407 	.area CODE
                           1408 	.area RODATA
   0051                    1409 __str_1:
   0051 4A 61 6E           1410 	.ascii "Jan"
   0054 00                 1411 	.db 0x00
                           1412 	.area CODE
                           1413 	.area RODATA
   0055                    1414 __str_2:
   0055 46 65 62           1415 	.ascii "Feb"
   0058 00                 1416 	.db 0x00
                           1417 	.area CODE
                           1418 	.area RODATA
   0059                    1419 __str_3:
   0059 4D 61 72           1420 	.ascii "Mar"
   005C 00                 1421 	.db 0x00
                           1422 	.area CODE
                           1423 	.area RODATA
   005D                    1424 __str_4:
   005D 41 70 72           1425 	.ascii "Apr"
   0060 00                 1426 	.db 0x00
                           1427 	.area CODE
                           1428 	.area RODATA
   0061                    1429 __str_5:
   0061 4D 61 79           1430 	.ascii "May"
   0064 00                 1431 	.db 0x00
                           1432 	.area CODE
                           1433 	.area RODATA
   0065                    1434 __str_6:
   0065 4A 75 6E           1435 	.ascii "Jun"
   0068 00                 1436 	.db 0x00
                           1437 	.area CODE
                           1438 	.area RODATA
   0069                    1439 __str_7:
   0069 4A 75 6C           1440 	.ascii "Jul"
   006C 00                 1441 	.db 0x00
                           1442 	.area CODE
                           1443 	.area RODATA
   006D                    1444 __str_8:
   006D 41 75 67           1445 	.ascii "Aug"
   0070 00                 1446 	.db 0x00
                           1447 	.area CODE
                           1448 	.area RODATA
   0071                    1449 __str_9:
   0071 53 65 70           1450 	.ascii "Sep"
   0074 00                 1451 	.db 0x00
                           1452 	.area CODE
                           1453 	.area RODATA
   0075                    1454 __str_10:
   0075 4F 63 74           1455 	.ascii "Oct"
   0078 00                 1456 	.db 0x00
                           1457 	.area CODE
                           1458 	.area RODATA
   0079                    1459 __str_11:
   0079 4E 6F 76           1460 	.ascii "Nov"
   007C 00                 1461 	.db 0x00
                           1462 	.area CODE
                           1463 	.area RODATA
   007D                    1464 __str_12:
   007D 44 65 63           1465 	.ascii "Dec"
   0080 00                 1466 	.db 0x00
                           1467 	.area CODE
                           1468 	.area RODATA
   0081                    1469 __str_13:
   0081 53 75 6E           1470 	.ascii "Sun"
   0084 00                 1471 	.db 0x00
                           1472 	.area CODE
                           1473 	.area RODATA
   0085                    1474 __str_14:
   0085 4D 6F 6E           1475 	.ascii "Mon"
   0088 00                 1476 	.db 0x00
                           1477 	.area CODE
                           1478 	.area RODATA
   0089                    1479 __str_15:
   0089 54 75 65           1480 	.ascii "Tue"
   008C 00                 1481 	.db 0x00
                           1482 	.area CODE
                           1483 	.area RODATA
   008D                    1484 __str_16:
   008D 57 65 64           1485 	.ascii "Wed"
   0090 00                 1486 	.db 0x00
                           1487 	.area CODE
                           1488 	.area RODATA
   0091                    1489 __str_17:
   0091 54 68 75           1490 	.ascii "Thu"
   0094 00                 1491 	.db 0x00
                           1492 	.area CODE
                           1493 	.area RODATA
   0095                    1494 __str_18:
   0095 46 72 69           1495 	.ascii "Fri"
   0098 00                 1496 	.db 0x00
                           1497 	.area CODE
                           1498 	.area RODATA
   0099                    1499 __str_19:
   0099 53 61 74           1500 	.ascii "Sat"
   009C 00                 1501 	.db 0x00
                           1502 	.area CODE
                           1503 	.area XINIT
                           1504 	.area CABS    (ABS)
