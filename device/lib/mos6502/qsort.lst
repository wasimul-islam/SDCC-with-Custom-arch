                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module qsort
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _qsort_PARM_4
                             12 	.globl _qsort_PARM_3
                             13 	.globl _qsort_PARM_2
                             14 	.globl _qsort
                             15 ;--------------------------------------------------------
                             16 ; ZP ram data
                             17 ;--------------------------------------------------------
                             18 	.area ZP      (PAG)
   0000                      19 _qsort_sloc0_1_0:
   0000                      20 	.ds 2
   0002                      21 _qsort_sloc1_1_0:
   0002                      22 	.ds 2
   0004                      23 _qsort_sloc2_1_0:
   0004                      24 	.ds 2
   0006                      25 _qsort_sloc3_1_0:
   0006                      26 	.ds 2
                             27 ;--------------------------------------------------------
                             28 ; overlayable items in ram
                             29 ;--------------------------------------------------------
                             30 	.area	OSEG    (PAG, OVR)
   0000                      31 _swap_sloc0_1_0:
   0000                      32 	.ds 2
   0002                      33 _swap_sloc1_1_0:
   0002                      34 	.ds 2
   0004                      35 _swap_sloc2_1_0:
   0004                      36 	.ds 2
                             37 ;--------------------------------------------------------
                             38 ; uninitialized external ram data
                             39 ;--------------------------------------------------------
                             40 	.area BSS
   0000                      41 _swap_PARM_2:
   0000                      42 	.ds 2
   0002                      43 _swap_PARM_3:
   0002                      44 	.ds 2
   0004                      45 _qsort_PARM_2:
   0004                      46 	.ds 2
   0006                      47 _qsort_PARM_3:
   0006                      48 	.ds 2
   0008                      49 _qsort_PARM_4:
   0008                      50 	.ds 2
   000A                      51 _qsort_b_65536_41:
   000A                      52 	.ds 2
   000C                      53 _qsort_i_131072_42:
   000C                      54 	.ds 2
   000E                      55 _qsort_j_262144_44:
   000E                      56 	.ds 2
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area DABS    (ABS)
                             61 ;--------------------------------------------------------
                             62 ; initialized external ram data
                             63 ;--------------------------------------------------------
                             64 	.area DATA
                             65 ;--------------------------------------------------------
                             66 ; global & static initialisations
                             67 ;--------------------------------------------------------
                             68 	.area _CODE
                             69 	.area GSINIT
                             70 	.area GSFINAL
                             71 	.area GSINIT
                             72 ;--------------------------------------------------------
                             73 ; Home
                             74 ;--------------------------------------------------------
                             75 	.area _CODE
                             76 	.area _CODE
                             77 ;--------------------------------------------------------
                             78 ; code
                             79 ;--------------------------------------------------------
                             80 	.area CODE
                             81 ;------------------------------------------------------------
                             82 ;Allocation info for local variables in function 'swap'
                             83 ;------------------------------------------------------------
                             84 ;src                       Allocated with name '_swap_PARM_2'
                             85 ;n                         Allocated with name '_swap_PARM_3'
                             86 ;dst                       Allocated to registers a x 
                             87 ;d                         Allocated to registers 
                             88 ;s                         Allocated to registers 
                             89 ;tmp                       Allocated to registers x 
                             90 ;sloc0                     Allocated with name '_swap_sloc0_1_0'
                             91 ;sloc1                     Allocated with name '_swap_sloc1_1_0'
                             92 ;sloc2                     Allocated with name '_swap_sloc2_1_0'
                             93 ;------------------------------------------------------------
                             94 ;	../qsort.c: 33: static void swap(void *restrict dst, void *restrict src, size_t n)
                             95 ;	-----------------------------------------
                             96 ;	 function swap
                             97 ;	-----------------------------------------
                             98 ;	Register assignment is optimal.
                             99 ;	Stack space usage: 0 bytes.
   0000                     100 _swap:
                            101 ;	../qsort.c: 35: unsigned char *restrict d = dst;
   0000 85*00         [ 3]  102 	sta	*_swap_sloc0_1_0
   0002 86*01         [ 3]  103 	stx	*(_swap_sloc0_1_0 + 1)
                            104 ;	../qsort.c: 36: unsigned char *restrict s = src;
   0004 ADr00r00      [ 4]  105 	lda	_swap_PARM_2
   0007 85*02         [ 3]  106 	sta	*_swap_sloc1_1_0
   0009 ADr01r00      [ 4]  107 	lda	(_swap_PARM_2 + 1)
   000C 85*03         [ 3]  108 	sta	*(_swap_sloc1_1_0 + 1)
                            109 ;	../qsort.c: 38: while(n--)
   000E ADr02r00      [ 4]  110 	lda	_swap_PARM_3
   0011 85*04         [ 3]  111 	sta	*_swap_sloc2_1_0
   0013 ADr03r00      [ 4]  112 	lda	(_swap_PARM_3 + 1)
   0016 85*05         [ 3]  113 	sta	*(_swap_sloc2_1_0 + 1)
   0018                     114 00101$:
   0018 A5*04         [ 3]  115 	lda	*_swap_sloc2_1_0
   001A A6*05         [ 3]  116 	ldx	*(_swap_sloc2_1_0 + 1)
   001C 48            [ 3]  117 	pha
   001D 38            [ 2]  118 	sec
   001E A5*04         [ 3]  119 	lda	*_swap_sloc2_1_0
   0020 E9 01         [ 2]  120 	sbc	#0x01
   0022 85*04         [ 3]  121 	sta	*_swap_sloc2_1_0
   0024 B0 02         [ 4]  122 	bcs	00115$
   0026 C6*05         [ 5]  123 	dec	*(_swap_sloc2_1_0 + 1)
   0028                     124 00115$:
   0028 68            [ 4]  125 	pla
   0029 D0 02         [ 4]  126 	bne	00116$
   002B E0 00         [ 2]  127 	cpx	#0x00
   002D                     128 00116$:
   002D F0 1B         [ 4]  129 	beq	00104$
                            130 ;	../qsort.c: 40: unsigned char tmp = *d;
   002F A0 00         [ 2]  131 	ldy	#0x00
   0031 B1*00         [ 6]  132 	lda	[*_swap_sloc0_1_0],y
   0033 AA            [ 2]  133 	tax
                            134 ;	../qsort.c: 41: *d = *s;
   0034 B1*02         [ 6]  135 	lda	[*_swap_sloc1_1_0],y
   0036 91*00         [ 6]  136 	sta	[*_swap_sloc0_1_0],y
                            137 ;	../qsort.c: 42: *s = tmp;
   0038 8A            [ 2]  138 	txa
   0039 91*02         [ 6]  139 	sta	[*_swap_sloc1_1_0],y
                            140 ;	../qsort.c: 43: d++;
   003B E6*00         [ 5]  141 	inc	*_swap_sloc0_1_0
   003D D0 02         [ 4]  142 	bne	00118$
   003F E6*01         [ 5]  143 	inc	*(_swap_sloc0_1_0 + 1)
   0041                     144 00118$:
                            145 ;	../qsort.c: 44: s++;
   0041 E6*02         [ 5]  146 	inc	*_swap_sloc1_1_0
   0043 D0 D3         [ 4]  147 	bne	00101$
   0045 E6*03         [ 5]  148 	inc	*(_swap_sloc1_1_0 + 1)
   0047 4Cr18r00      [ 3]  149 	jmp	00101$
   004A                     150 00104$:
                            151 ;	../qsort.c: 46: }
   004A 60            [ 6]  152 	rts
                            153 ;------------------------------------------------------------
                            154 ;Allocation info for local variables in function 'qsort'
                            155 ;------------------------------------------------------------
                            156 ;sloc0                     Allocated with name '_qsort_sloc0_1_0'
                            157 ;sloc1                     Allocated with name '_qsort_sloc1_1_0'
                            158 ;sloc2                     Allocated with name '_qsort_sloc2_1_0'
                            159 ;sloc3                     Allocated with name '_qsort_sloc3_1_0'
                            160 ;nmemb                     Allocated with name '_qsort_PARM_2'
                            161 ;size                      Allocated with name '_qsort_PARM_3'
                            162 ;compar                    Allocated with name '_qsort_PARM_4'
                            163 ;base                      Allocated to registers a x 
                            164 ;b                         Allocated with name '_qsort_b_65536_41'
                            165 ;i                         Allocated with name '_qsort_i_131072_42'
                            166 ;j                         Allocated with name '_qsort_j_262144_44'
                            167 ;------------------------------------------------------------
                            168 ;	../qsort.c: 48: void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                            169 ;	-----------------------------------------
                            170 ;	 function qsort
                            171 ;	-----------------------------------------
                            172 ;	Register assignment is optimal.
                            173 ;	Stack space usage: 0 bytes.
   004B                     174 _qsort:
                            175 ;	../qsort.c: 50: unsigned char *b = base;
   004B 8Dr0Ar00      [ 4]  176 	sta	_qsort_b_65536_41
   004E 8Er0Br00      [ 4]  177 	stx	(_qsort_b_65536_41 + 1)
                            178 ;	../qsort.c: 52: if(nmemb <= 1)
   0051 85*00         [ 3]  179 	sta	*(__TEMP+0)
   0053 A9 01         [ 2]  180 	lda	#0x01
   0055 38            [ 2]  181 	sec
   0056 EDr04r00      [ 4]  182 	sbc	_qsort_PARM_2
   0059 A9 00         [ 2]  183 	lda	#0x00
   005B EDr05r00      [ 4]  184 	sbc	(_qsort_PARM_2 + 1)
   005E 08            [ 3]  185 	php
   005F A5*00         [ 3]  186 	lda	*(__TEMP+0)
   0061 28            [ 4]  187 	plp
   0062 90 01         [ 4]  188 	bcc	00102$
                            189 ;	../qsort.c: 53: return;
   0064 60            [ 6]  190 	rts
   0065                     191 00102$:
                            192 ;	../qsort.c: 55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
   0065 8Dr0Cr00      [ 4]  193 	sta	_qsort_i_131072_42
   0068 8Er0Dr00      [ 4]  194 	stx	(_qsort_i_131072_42 + 1)
   006B ADr06r00      [ 4]  195 	lda	_qsort_PARM_3
   006E 85*00         [ 3]  196 	sta	*_qsort_sloc0_1_0
   0070 ADr07r00      [ 4]  197 	lda	(_qsort_PARM_3 + 1)
   0073 85*01         [ 3]  198 	sta	*(_qsort_sloc0_1_0 + 1)
   0075 A5*00         [ 3]  199 	lda	*_qsort_sloc0_1_0
   0077 8Dr00r00      [ 4]  200 	sta	__mulint_PARM_2
   007A A5*01         [ 3]  201 	lda	*(_qsort_sloc0_1_0 + 1)
   007C 8Dr01r00      [ 4]  202 	sta	(__mulint_PARM_2 + 1)
   007F AEr05r00      [ 4]  203 	ldx	(_qsort_PARM_2 + 1)
   0082 ADr04r00      [ 4]  204 	lda	_qsort_PARM_2
   0085 20r00r00      [ 6]  205 	jsr	__mulint
   0088 18            [ 2]  206 	clc
   0089 6Dr0Ar00      [ 4]  207 	adc	_qsort_b_65536_41
   008C 85*02         [ 3]  208 	sta	*_qsort_sloc1_1_0
   008E 8A            [ 2]  209 	txa
   008F 6Dr0Br00      [ 4]  210 	adc	(_qsort_b_65536_41 + 1)
   0092 85*03         [ 3]  211 	sta	*(_qsort_sloc1_1_0 + 1)
   0094                     212 00110$:
   0094 ADr0Cr00      [ 4]  213 	lda	_qsort_i_131072_42
   0097 38            [ 2]  214 	sec
   0098 E5*02         [ 3]  215 	sbc	*_qsort_sloc1_1_0
   009A ADr0Dr00      [ 4]  216 	lda	(_qsort_i_131072_42 + 1)
   009D E5*03         [ 3]  217 	sbc	*(_qsort_sloc1_1_0 + 1)
   009F 90 01         [ 4]  218 	bcc	00139$
   00A1 60            [ 6]  219 	rts
   00A2                     220 00139$:
                            221 ;	../qsort.c: 57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
   00A2 ADr0Cr00      [ 4]  222 	lda	_qsort_i_131072_42
   00A5 8Dr0Er00      [ 4]  223 	sta	_qsort_j_262144_44
   00A8 ADr0Dr00      [ 4]  224 	lda	(_qsort_i_131072_42 + 1)
   00AB 8Dr0Fr00      [ 4]  225 	sta	(_qsort_j_262144_44 + 1)
   00AE                     226 00107$:
   00AE ADr0Ar00      [ 4]  227 	lda	_qsort_b_65536_41
   00B1 38            [ 2]  228 	sec
   00B2 EDr0Er00      [ 4]  229 	sbc	_qsort_j_262144_44
   00B5 ADr0Br00      [ 4]  230 	lda	(_qsort_b_65536_41 + 1)
   00B8 EDr0Fr00      [ 4]  231 	sbc	(_qsort_j_262144_44 + 1)
   00BB B0 77         [ 4]  232 	bcs	00111$
   00BD ADr0Er00      [ 4]  233 	lda	_qsort_j_262144_44
   00C0 38            [ 2]  234 	sec
   00C1 E5*00         [ 3]  235 	sbc	*_qsort_sloc0_1_0
   00C3 85*04         [ 3]  236 	sta	*_qsort_sloc2_1_0
   00C5 ADr0Fr00      [ 4]  237 	lda	(_qsort_j_262144_44 + 1)
   00C8 E5*01         [ 3]  238 	sbc	*(_qsort_sloc0_1_0 + 1)
   00CA 85*05         [ 3]  239 	sta	*(_qsort_sloc2_1_0 + 1)
   00CC A5*04         [ 3]  240 	lda	*_qsort_sloc2_1_0
   00CE A6*05         [ 3]  241 	ldx	*(_qsort_sloc2_1_0 + 1)
   00D0 ACr0Er00      [ 4]  242 	ldy	_qsort_j_262144_44
   00D3 84*06         [ 3]  243 	sty	*_qsort_sloc3_1_0
   00D5 ACr0Fr00      [ 4]  244 	ldy	(_qsort_j_262144_44 + 1)
   00D8 84*07         [ 3]  245 	sty	*(_qsort_sloc3_1_0 + 1)
   00DA 85*00         [ 3]  246 	sta	*(__TEMP+0)
   00DC 8A            [ 2]  247 	txa
   00DD 48            [ 3]  248 	pha
   00DE A5*00         [ 3]  249 	lda	*(__TEMP+0)
   00E0 48            [ 3]  250 	pha
   00E1 ADr08r00      [ 4]  251 	lda	_qsort_PARM_4
   00E4 85*00         [ 3]  252 	sta	*(__TEMP+0)
   00E6 ADr09r00      [ 4]  253 	lda	(_qsort_PARM_4 + 1)
   00E9 85*01         [ 3]  254 	sta	*(__TEMP+1)
   00EB A6*07         [ 3]  255 	ldx	*(_qsort_sloc3_1_0 + 1)
   00ED A5*06         [ 3]  256 	lda	*_qsort_sloc3_1_0
   00EF 20r00r00      [ 6]  257 	jsr	__sdcc_indirect_jsr
   00F2 85*00         [ 3]  258 	sta	*(__TEMP+0)
   00F4 68            [ 4]  259 	pla
   00F5 68            [ 4]  260 	pla
   00F6 8A            [ 2]  261 	txa
   00F7 38            [ 2]  262 	sec
   00F8 E9 00         [ 2]  263 	sbc	#0x00
   00FA 50 04         [ 4]  264 	bvc	00142$
   00FC 10 04         [ 4]  265 	bpl	00141$
   00FE 30 34         [ 4]  266 	bmi	00111$
   0100                     267 00142$:
   0100 10 32         [ 4]  268 	bpl	00111$
   0102                     269 00141$:
                            270 ;	../qsort.c: 58: swap(j, j - size, size);
   0102 ADr0Er00      [ 4]  271 	lda	_qsort_j_262144_44
   0105 AEr0Fr00      [ 4]  272 	ldx	(_qsort_j_262144_44 + 1)
   0108 A4*04         [ 3]  273 	ldy	*_qsort_sloc2_1_0
   010A 84*06         [ 3]  274 	sty	*_qsort_sloc3_1_0
   010C A4*05         [ 3]  275 	ldy	*(_qsort_sloc2_1_0 + 1)
   010E 84*07         [ 3]  276 	sty	*(_qsort_sloc3_1_0 + 1)
   0110 A4*06         [ 3]  277 	ldy	*_qsort_sloc3_1_0
   0112 8Cr00r00      [ 4]  278 	sty	_swap_PARM_2
   0115 A4*07         [ 3]  279 	ldy	*(_qsort_sloc3_1_0 + 1)
   0117 8Cr01r00      [ 4]  280 	sty	(_swap_PARM_2 + 1)
   011A A4*00         [ 3]  281 	ldy	*_qsort_sloc0_1_0
   011C 8Cr02r00      [ 4]  282 	sty	_swap_PARM_3
   011F A4*01         [ 3]  283 	ldy	*(_qsort_sloc0_1_0 + 1)
   0121 8Cr03r00      [ 4]  284 	sty	(_swap_PARM_3 + 1)
   0124 20r00r00      [ 6]  285 	jsr	_swap
                            286 ;	../qsort.c: 57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
   0127 A5*04         [ 3]  287 	lda	*_qsort_sloc2_1_0
   0129 8Dr0Er00      [ 4]  288 	sta	_qsort_j_262144_44
   012C A5*05         [ 3]  289 	lda	*(_qsort_sloc2_1_0 + 1)
   012E 8Dr0Fr00      [ 4]  290 	sta	(_qsort_j_262144_44 + 1)
   0131 4CrAEr00      [ 3]  291 	jmp	00107$
   0134                     292 00111$:
                            293 ;	../qsort.c: 55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
   0134 ADr0Cr00      [ 4]  294 	lda	_qsort_i_131072_42
   0137 18            [ 2]  295 	clc
   0138 65*00         [ 3]  296 	adc	*_qsort_sloc0_1_0
   013A 8Dr0Cr00      [ 4]  297 	sta	_qsort_i_131072_42
   013D ADr0Dr00      [ 4]  298 	lda	(_qsort_i_131072_42 + 1)
   0140 65*01         [ 3]  299 	adc	*(_qsort_sloc0_1_0 + 1)
   0142 8Dr0Dr00      [ 4]  300 	sta	(_qsort_i_131072_42 + 1)
   0145 4Cr94r00      [ 3]  301 	jmp	00110$
                            302 ;	../qsort.c: 60: }
   0148 60            [ 6]  303 	rts
                            304 	.area CODE
                            305 	.area RODATA
                            306 	.area XINIT
                            307 	.area CABS    (ABS)
