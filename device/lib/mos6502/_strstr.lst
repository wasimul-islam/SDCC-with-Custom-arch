                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strstr
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strstr_PARM_2
                             12 	.globl _strstr
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 	.area	OSEG    (PAG, OVR)
   0000                      21 _strstr_sloc0_1_0:
   0000                      22 	.ds 2
   0002                      23 _strstr_sloc1_1_0:
   0002                      24 	.ds 2
   0004                      25 _strstr_sloc2_1_0:
   0004                      26 	.ds 2
   0006                      27 _strstr_sloc3_1_0:
   0006                      28 	.ds 2
   0008                      29 _strstr_sloc4_1_0:
   0008                      30 	.ds 2
                             31 ;--------------------------------------------------------
                             32 ; uninitialized external ram data
                             33 ;--------------------------------------------------------
                             34 	.area BSS
   0000                      35 _strstr_PARM_2:
   0000                      36 	.ds 2
   0002                      37 _strstr_cp_65536_27:
   0002                      38 	.ds 2
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area DABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; initialized external ram data
                             45 ;--------------------------------------------------------
                             46 	.area DATA
                             47 ;--------------------------------------------------------
                             48 ; global & static initialisations
                             49 ;--------------------------------------------------------
                             50 	.area _CODE
                             51 	.area GSINIT
                             52 	.area GSFINAL
                             53 	.area GSINIT
                             54 ;--------------------------------------------------------
                             55 ; Home
                             56 ;--------------------------------------------------------
                             57 	.area _CODE
                             58 	.area _CODE
                             59 ;--------------------------------------------------------
                             60 ; code
                             61 ;--------------------------------------------------------
                             62 	.area CODE
                             63 ;------------------------------------------------------------
                             64 ;Allocation info for local variables in function 'strstr'
                             65 ;------------------------------------------------------------
                             66 ;str2                      Allocated with name '_strstr_PARM_2'
                             67 ;str1                      Allocated to registers a x 
                             68 ;cp                        Allocated with name '_strstr_cp_65536_27'
                             69 ;s1                        Allocated to registers 
                             70 ;s2                        Allocated to registers 
                             71 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                             72 ;sloc1                     Allocated with name '_strstr_sloc1_1_0'
                             73 ;sloc2                     Allocated with name '_strstr_sloc2_1_0'
                             74 ;sloc3                     Allocated with name '_strstr_sloc3_1_0'
                             75 ;sloc4                     Allocated with name '_strstr_sloc4_1_0'
                             76 ;------------------------------------------------------------
                             77 ;	../_strstr.c: 31: char *strstr ( const char *str1, const char *str2 )
                             78 ;	-----------------------------------------
                             79 ;	 function strstr
                             80 ;	-----------------------------------------
                             81 ;	Register assignment is optimal.
                             82 ;	Stack space usage: 0 bytes.
   0000                      83 _strstr:
                             84 ;	../_strstr.c: 33: const char *cp = str1;
   0000 8Dr02r00      [ 4]   85 	sta	_strstr_cp_65536_27
   0003 8Er03r00      [ 4]   86 	stx	(_strstr_cp_65536_27 + 1)
                             87 ;	../_strstr.c: 37: if (!*str2)
   0006 ACr00r00      [ 4]   88 	ldy	_strstr_PARM_2
   0009 84*00         [ 3]   89 	sty	*_strstr_sloc0_1_0
   000B ACr01r00      [ 4]   90 	ldy	(_strstr_PARM_2 + 1)
   000E 84*01         [ 3]   91 	sty	*(_strstr_sloc0_1_0 + 1)
   0010 85*00         [ 3]   92 	sta	*(__TEMP+0)
   0012 A0 00         [ 2]   93 	ldy	#0x00
   0014 B1*00         [ 6]   94 	lda	[*_strstr_sloc0_1_0],y
   0016 A8            [ 2]   95 	tay
   0017 A5*00         [ 3]   96 	lda	*(__TEMP+0)
   0019 C0 00         [ 2]   97 	cpy	#0x00
   001B D0 01         [ 4]   98 	bne	00122$
                             99 ;	../_strstr.c: 38: return ((char*)str1);
   001D 60            [ 6]  100 	rts
                            101 ;	../_strstr.c: 40: while (*cp)
   001E                     102 00122$:
   001E 85*02         [ 3]  103 	sta	*_strstr_sloc1_1_0
   0020 86*03         [ 3]  104 	stx	*(_strstr_sloc1_1_0 + 1)
   0022                     105 00110$:
   0022 A0 00         [ 2]  106 	ldy	#0x00
   0024 B1*02         [ 6]  107 	lda	[*_strstr_sloc1_1_0],y
   0026 F0 65         [ 4]  108 	beq	00112$
                            109 ;	../_strstr.c: 43: s2 = str2;
   0028 A5*00         [ 3]  110 	lda	*_strstr_sloc0_1_0
   002A 85*04         [ 3]  111 	sta	*_strstr_sloc2_1_0
   002C A5*01         [ 3]  112 	lda	*(_strstr_sloc0_1_0 + 1)
   002E 85*05         [ 3]  113 	sta	*(_strstr_sloc2_1_0 + 1)
                            114 ;	../_strstr.c: 45: while (*s1 && *s2 && !(*s1-*s2))
   0030 A5*02         [ 3]  115 	lda	*_strstr_sloc1_1_0
   0032 85*06         [ 3]  116 	sta	*_strstr_sloc3_1_0
   0034 A5*03         [ 3]  117 	lda	*(_strstr_sloc1_1_0 + 1)
   0036 85*07         [ 3]  118 	sta	*(_strstr_sloc3_1_0 + 1)
   0038                     119 00105$:
   0038 A0 00         [ 2]  120 	ldy	#0x00
   003A B1*06         [ 6]  121 	lda	[*_strstr_sloc3_1_0],y
   003C AA            [ 2]  122 	tax
   003D F0 2E         [ 4]  123 	beq	00107$
   003F B1*04         [ 6]  124 	lda	[*_strstr_sloc2_1_0],y
   0041 F0 2A         [ 4]  125 	beq	00107$
   0043 86*08         [ 3]  126 	stx	*_strstr_sloc4_1_0
   0045 84*09         [ 3]  127 	sty	*(_strstr_sloc4_1_0 + 1)
   0047 A2 00         [ 2]  128 	ldx	#0x00
   0049 85*00         [ 3]  129 	sta	*(__TEMP+0)
   004B A5*08         [ 3]  130 	lda	*_strstr_sloc4_1_0
   004D 38            [ 2]  131 	sec
   004E E5*00         [ 3]  132 	sbc	*(__TEMP+0)
   0050 85*08         [ 3]  133 	sta	*_strstr_sloc4_1_0
   0052 A5*09         [ 3]  134 	lda	*(_strstr_sloc4_1_0 + 1)
   0054 86*00         [ 3]  135 	stx	*(__TEMP+0)
   0056 E5*00         [ 3]  136 	sbc	*(__TEMP+0)
   0058 85*09         [ 3]  137 	sta	*(_strstr_sloc4_1_0 + 1)
   005A 05*08         [ 3]  138 	ora	*_strstr_sloc4_1_0
   005C D0 0F         [ 4]  139 	bne	00107$
                            140 ;	../_strstr.c: 46: s1++, s2++;
   005E E6*06         [ 5]  141 	inc	*_strstr_sloc3_1_0
   0060 D0 02         [ 4]  142 	bne	00153$
   0062 E6*07         [ 5]  143 	inc	*(_strstr_sloc3_1_0 + 1)
   0064                     144 00153$:
   0064 E6*04         [ 5]  145 	inc	*_strstr_sloc2_1_0
   0066 D0 D0         [ 4]  146 	bne	00105$
   0068 E6*05         [ 5]  147 	inc	*(_strstr_sloc2_1_0 + 1)
   006A 4Cr38r00      [ 3]  148 	jmp	00105$
   006D                     149 00107$:
                            150 ;	../_strstr.c: 48: if (!*s2)
   006D A0 00         [ 2]  151 	ldy	#0x00
   006F B1*04         [ 6]  152 	lda	[*_strstr_sloc2_1_0],y
   0071 D0 07         [ 4]  153 	bne	00109$
                            154 ;	../_strstr.c: 49: return ((char*)cp);
   0073 AEr03r00      [ 4]  155 	ldx	(_strstr_cp_65536_27 + 1)
   0076 ADr02r00      [ 4]  156 	lda	_strstr_cp_65536_27
   0079 60            [ 6]  157 	rts
   007A                     158 00109$:
                            159 ;	../_strstr.c: 51: cp++;
   007A E6*02         [ 5]  160 	inc	*_strstr_sloc1_1_0
   007C D0 02         [ 4]  161 	bne	00156$
   007E E6*03         [ 5]  162 	inc	*(_strstr_sloc1_1_0 + 1)
   0080                     163 00156$:
   0080 A5*02         [ 3]  164 	lda	*_strstr_sloc1_1_0
   0082 8Dr02r00      [ 4]  165 	sta	_strstr_cp_65536_27
   0085 A5*03         [ 3]  166 	lda	*(_strstr_sloc1_1_0 + 1)
   0087 8Dr03r00      [ 4]  167 	sta	(_strstr_cp_65536_27 + 1)
   008A 4Cr22r00      [ 3]  168 	jmp	00110$
   008D                     169 00112$:
                            170 ;	../_strstr.c: 54: return (NULL) ;
   008D A9 00         [ 2]  171 	lda	#0x00
   008F AA            [ 2]  172 	tax
                            173 ;	../_strstr.c: 55: }
   0090 60            [ 6]  174 	rts
                            175 	.area CODE
                            176 	.area RODATA
                            177 	.area XINIT
                            178 	.area CABS    (ABS)
