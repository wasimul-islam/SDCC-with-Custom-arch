                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module asinf
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _asincosf
                             12 	.globl _asinf
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; uninitialized external ram data
                             22 ;--------------------------------------------------------
                             23 	.area BSS
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area DABS    (ABS)
                             28 ;--------------------------------------------------------
                             29 ; initialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area DATA
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _CODE
                             36 	.area GSINIT
                             37 	.area GSFINAL
                             38 	.area GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 	.area _CODE
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area CODE
                             48 ;------------------------------------------------------------
                             49 ;Allocation info for local variables in function 'asinf'
                             50 ;------------------------------------------------------------
                             51 ;x                         Allocated to stack - sp +7
                             52 ;sloc0                     Allocated to stack - sp +1
                             53 ;------------------------------------------------------------
                             54 ;	../asinf.c: 36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             55 ;	-----------------------------------------
                             56 ;	 function asinf
                             57 ;	-----------------------------------------
                             58 ;	Register assignment is optimal.
                             59 ;	Stack space usage: 4 bytes.
   0000                      60 _asinf:
   0000 48            [ 3]   61 	pha
   0001 48            [ 3]   62 	pha
   0002 48            [ 3]   63 	pha
   0003 48            [ 3]   64 	pha
                             65 ;	../asinf.c: 38: if (x == 1.0) return  HALF_PI;
   0004 BA            [ 2]   66 	tsx
   0005 BD 07 01      [ 5]   67 	lda	0x107,x
   0008 8Dr00r00      [ 4]   68 	sta	___fseq_PARM_1
   000B BD 08 01      [ 5]   69 	lda	0x108,x
   000E 8Dr01r00      [ 4]   70 	sta	(___fseq_PARM_1 + 1)
   0011 BD 09 01      [ 5]   71 	lda	0x109,x
   0014 8Dr02r00      [ 4]   72 	sta	(___fseq_PARM_1 + 2)
   0017 BD 0A 01      [ 5]   73 	lda	0x10a,x
   001A 8Dr03r00      [ 4]   74 	sta	(___fseq_PARM_1 + 3)
   001D A2 00         [ 2]   75 	ldx	#0x00
   001F 8Er00r00      [ 4]   76 	stx	___fseq_PARM_2
   0022 8Er01r00      [ 4]   77 	stx	(___fseq_PARM_2 + 1)
   0025 A2 80         [ 2]   78 	ldx	#0x80
   0027 8Er02r00      [ 4]   79 	stx	(___fseq_PARM_2 + 2)
   002A A2 3F         [ 2]   80 	ldx	#0x3f
   002C 8Er03r00      [ 4]   81 	stx	(___fseq_PARM_2 + 3)
   002F 20r00r00      [ 6]   82 	jsr	___fseq
   0032 C9 00         [ 2]   83 	cmp	#0x00
   0034 F0 0F         [ 4]   84 	beq	00108$
   0036 A9 DB         [ 2]   85 	lda	#0xdb
   0038 A2 0F         [ 2]   86 	ldx	#0x0f
   003A A0 C9         [ 2]   87 	ldy	#0xc9
   003C 84*00         [ 3]   88 	sty	*___SDCC_m6502_ret2
   003E A0 3F         [ 2]   89 	ldy	#0x3f
   0040 84*00         [ 3]   90 	sty	*___SDCC_m6502_ret3
   0042 4CrF1r00      [ 3]   91 	jmp	00110$
   0045                      92 00108$:
                             93 ;	../asinf.c: 39: else if (x ==-1.0) return -HALF_PI;
   0045 BA            [ 2]   94 	tsx
   0046 BD 07 01      [ 5]   95 	lda	0x107,x
   0049 8Dr00r00      [ 4]   96 	sta	___fseq_PARM_1
   004C BD 08 01      [ 5]   97 	lda	0x108,x
   004F 8Dr01r00      [ 4]   98 	sta	(___fseq_PARM_1 + 1)
   0052 BD 09 01      [ 5]   99 	lda	0x109,x
   0055 8Dr02r00      [ 4]  100 	sta	(___fseq_PARM_1 + 2)
   0058 BD 0A 01      [ 5]  101 	lda	0x10a,x
   005B 8Dr03r00      [ 4]  102 	sta	(___fseq_PARM_1 + 3)
   005E A2 00         [ 2]  103 	ldx	#0x00
   0060 8Er00r00      [ 4]  104 	stx	___fseq_PARM_2
   0063 8Er01r00      [ 4]  105 	stx	(___fseq_PARM_2 + 1)
   0066 A2 80         [ 2]  106 	ldx	#0x80
   0068 8Er02r00      [ 4]  107 	stx	(___fseq_PARM_2 + 2)
   006B A2 BF         [ 2]  108 	ldx	#0xbf
   006D 8Er03r00      [ 4]  109 	stx	(___fseq_PARM_2 + 3)
   0070 20r00r00      [ 6]  110 	jsr	___fseq
   0073 C9 00         [ 2]  111 	cmp	#0x00
   0075 F0 0F         [ 4]  112 	beq	00105$
   0077 A9 DB         [ 2]  113 	lda	#0xdb
   0079 A2 0F         [ 2]  114 	ldx	#0x0f
   007B A0 C9         [ 2]  115 	ldy	#0xc9
   007D 84*00         [ 3]  116 	sty	*___SDCC_m6502_ret2
   007F A0 BF         [ 2]  117 	ldy	#0xbf
   0081 84*00         [ 3]  118 	sty	*___SDCC_m6502_ret3
   0083 4CrF1r00      [ 3]  119 	jmp	00110$
   0086                     120 00105$:
                            121 ;	../asinf.c: 40: else if (x == 0.0) return 0.0;
   0086 BA            [ 2]  122 	tsx
   0087 BD 0A 01      [ 5]  123 	lda	0x10a,x
   008A 29 7F         [ 2]  124 	and	#0x7F
   008C 1D 09 01      [ 5]  125 	ora	0x109,x
   008F 1D 08 01      [ 5]  126 	ora	0x108,x
   0092 1D 07 01      [ 5]  127 	ora	0x107,x
   0095 D0 0A         [ 4]  128 	bne	00102$
   0097 A9 00         [ 2]  129 	lda	#0x00
   0099 AA            [ 2]  130 	tax
   009A 85*00         [ 3]  131 	sta	*___SDCC_m6502_ret2
   009C 85*00         [ 3]  132 	sta	*___SDCC_m6502_ret3
   009E 4CrF1r00      [ 3]  133 	jmp	00110$
   00A1                     134 00102$:
                            135 ;	../asinf.c: 41: else               return asincosf(x, false);
   00A1 BA            [ 2]  136 	tsx
   00A2 BD 07 01      [ 5]  137 	lda	0x107,x
   00A5 8Dr00r00      [ 4]  138 	sta	_asincosf_PARM_1
   00A8 BD 08 01      [ 5]  139 	lda	0x108,x
   00AB 8Dr01r00      [ 4]  140 	sta	(_asincosf_PARM_1 + 1)
   00AE BD 09 01      [ 5]  141 	lda	0x109,x
   00B1 8Dr02r00      [ 4]  142 	sta	(_asincosf_PARM_1 + 2)
   00B4 BD 0A 01      [ 5]  143 	lda	0x10a,x
   00B7 8Dr03r00      [ 4]  144 	sta	(_asincosf_PARM_1 + 3)
   00BA A2 00         [ 2]  145 	ldx	#0x00
   00BC 8Er00r00      [ 4]  146 	stx	_asincosf_PARM_2
   00BF 20r00r00      [ 6]  147 	jsr	_asincosf
   00C2 86*00         [ 3]  148 	stx	*(__TEMP+0)
   00C4 BA            [ 2]  149 	tsx
   00C5 9D 01 01      [ 5]  150 	sta	0x101,x
   00C8 A6*00         [ 3]  151 	ldx	*(__TEMP+0)
   00CA 8A            [ 2]  152 	txa
   00CB BA            [ 2]  153 	tsx
   00CC 9D 02 01      [ 5]  154 	sta	0x102,x
   00CF A6*00         [ 3]  155 	ldx	*(__TEMP+0)
   00D1 A5*00         [ 3]  156 	lda	*___SDCC_m6502_ret2
   00D3 BA            [ 2]  157 	tsx
   00D4 9D 03 01      [ 5]  158 	sta	0x103,x
   00D7 A5*00         [ 3]  159 	lda	*___SDCC_m6502_ret3
   00D9 9D 04 01      [ 5]  160 	sta	0x104, x
   00DC 85*00         [ 3]  161 	sta	*___SDCC_m6502_ret3
   00DE BD 03 01      [ 5]  162 	lda	0x103,x
   00E1 85*00         [ 3]  163 	sta	*___SDCC_m6502_ret2
   00E3 BD 02 01      [ 5]  164 	lda	0x102,x
   00E6 AA            [ 2]  165 	tax
   00E7 86*00         [ 3]  166 	stx	*(__TEMP+0)
   00E9 BA            [ 2]  167 	tsx
   00EA BD 01 01      [ 5]  168 	lda	0x101,x
   00ED 08            [ 3]  169 	php
   00EE A6*00         [ 3]  170 	ldx	*(__TEMP+0)
   00F0 28            [ 4]  171 	plp
   00F1                     172 00110$:
                            173 ;	../asinf.c: 42: }
   00F1 85*00         [ 3]  174 	sta	*(__TEMP+0)
   00F3 68            [ 4]  175 	pla
   00F4 68            [ 4]  176 	pla
   00F5 68            [ 4]  177 	pla
   00F6 68            [ 4]  178 	pla
   00F7 A5*00         [ 3]  179 	lda	*(__TEMP+0)
   00F9 60            [ 6]  180 	rts
                            181 	.area CODE
                            182 	.area RODATA
                            183 	.area XINIT
                            184 	.area CABS    (ABS)
