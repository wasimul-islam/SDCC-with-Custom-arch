                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbtowc
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mbtowc_PARM_3
                             12 	.globl _mbtowc_PARM_2
                             13 	.globl _mbtowc
                             14 ;--------------------------------------------------------
                             15 ; ZP ram data
                             16 ;--------------------------------------------------------
                             17 	.area ZP      (PAG)
                             18 ;--------------------------------------------------------
                             19 ; overlayable items in ram
                             20 ;--------------------------------------------------------
                             21 	.area	OSEG    (PAG, OVR)
   0000                      22 _mbtowc_sloc0_1_0:
   0000                      23 	.ds 2
   0002                      24 _mbtowc_sloc1_1_0:
   0002                      25 	.ds 2
   0004                      26 _mbtowc_sloc2_1_0:
   0004                      27 	.ds 2
   0006                      28 _mbtowc_sloc3_1_0:
   0006                      29 	.ds 4
                             30 ;--------------------------------------------------------
                             31 ; uninitialized external ram data
                             32 ;--------------------------------------------------------
                             33 	.area BSS
   0000                      34 _mbtowc_PARM_2:
   0000                      35 	.ds 2
   0002                      36 _mbtowc_PARM_3:
   0002                      37 	.ds 2
   0004                      38 _mbtowc_pwc_65536_36:
   0004                      39 	.ds 2
   0006                      40 _mbtowc_codepoint_65536_37:
   0006                      41 	.ds 4
   000A                      42 _mbtowc_seqlen_65536_37:
   000A                      43 	.ds 1
   000B                      44 _mbtowc_first_byte_65536_37:
   000B                      45 	.ds 1
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area DABS    (ABS)
                             50 ;--------------------------------------------------------
                             51 ; initialized external ram data
                             52 ;--------------------------------------------------------
                             53 	.area DATA
                             54 ;--------------------------------------------------------
                             55 ; global & static initialisations
                             56 ;--------------------------------------------------------
                             57 	.area _CODE
                             58 	.area GSINIT
                             59 	.area GSFINAL
                             60 	.area GSINIT
                             61 ;--------------------------------------------------------
                             62 ; Home
                             63 ;--------------------------------------------------------
                             64 	.area _CODE
                             65 	.area _CODE
                             66 ;--------------------------------------------------------
                             67 ; code
                             68 ;--------------------------------------------------------
                             69 	.area CODE
                             70 ;------------------------------------------------------------
                             71 ;Allocation info for local variables in function 'mbtowc'
                             72 ;------------------------------------------------------------
                             73 ;s                         Allocated with name '_mbtowc_PARM_2'
                             74 ;n                         Allocated with name '_mbtowc_PARM_3'
                             75 ;pwc                       Allocated with name '_mbtowc_pwc_65536_36'
                             76 ;codepoint                 Allocated with name '_mbtowc_codepoint_65536_37'
                             77 ;seqlen                    Allocated with name '_mbtowc_seqlen_65536_37'
                             78 ;i                         Allocated to registers 
                             79 ;first_byte                Allocated with name '_mbtowc_first_byte_65536_37'
                             80 ;sloc0                     Allocated with name '_mbtowc_sloc0_1_0'
                             81 ;sloc1                     Allocated with name '_mbtowc_sloc1_1_0'
                             82 ;sloc2                     Allocated with name '_mbtowc_sloc2_1_0'
                             83 ;sloc3                     Allocated with name '_mbtowc_sloc3_1_0'
                             84 ;------------------------------------------------------------
                             85 ;	../mbtowc.c: 31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                             86 ;	-----------------------------------------
                             87 ;	 function mbtowc
                             88 ;	-----------------------------------------
                             89 ;	Register assignment is optimal.
                             90 ;	Stack space usage: 0 bytes.
   0000                      91 _mbtowc:
   0000 8Dr04r00      [ 4]   92 	sta	_mbtowc_pwc_65536_36
   0003 8Er05r00      [ 4]   93 	stx	(_mbtowc_pwc_65536_36 + 1)
                             94 ;	../mbtowc.c: 37: if(!s)
   0006 ADr01r00      [ 4]   95 	lda	(_mbtowc_PARM_2 + 1)
   0009 0Dr00r00      [ 4]   96 	ora	_mbtowc_PARM_2
   000C D0 04         [ 4]   97 	bne	00102$
                             98 ;	../mbtowc.c: 38: return(0);
   000E A9 00         [ 2]   99 	lda	#0x00
   0010 AA            [ 2]  100 	tax
   0011 60            [ 6]  101 	rts
   0012                     102 00102$:
                            103 ;	../mbtowc.c: 40: seqlen = 1;
   0012 A2 01         [ 2]  104 	ldx	#0x01
   0014 8Er0Ar00      [ 4]  105 	stx	_mbtowc_seqlen_65536_37
                            106 ;	../mbtowc.c: 41: first_byte = *s;
   0017 ADr00r00      [ 4]  107 	lda	_mbtowc_PARM_2
   001A 85*00         [ 3]  108 	sta	*_mbtowc_sloc0_1_0
   001C ADr01r00      [ 4]  109 	lda	(_mbtowc_PARM_2 + 1)
   001F 85*01         [ 3]  110 	sta	*(_mbtowc_sloc0_1_0 + 1)
   0021 A0 00         [ 2]  111 	ldy	#0x00
   0023 B1*00         [ 6]  112 	lda	[*_mbtowc_sloc0_1_0],y
   0025 8Dr0Br00      [ 4]  113 	sta	_mbtowc_first_byte_65536_37
                            114 ;	../mbtowc.c: 43: if(first_byte & 0x80)
   0028 A9 80         [ 2]  115 	lda	#0x80
   002A 2Dr0Br00      [ 4]  116 	and	_mbtowc_first_byte_65536_37
   002D F0 4E         [ 4]  117 	beq	00107$
                            118 ;	../mbtowc.c: 45: while (first_byte & (0x80 >> seqlen))
   002F C8            [ 2]  119 	iny
   0030                     120 00103$:
   0030 98            [ 2]  121 	tya
   0031 AA            [ 2]  122 	tax
   0032 A9 80         [ 2]  123 	lda	#0x80
   0034 85*02         [ 3]  124 	sta	*_mbtowc_sloc1_1_0
   0036 A9 00         [ 2]  125 	lda	#0x00
   0038 85*03         [ 3]  126 	sta	*(_mbtowc_sloc1_1_0 + 1)
   003A E0 00         [ 2]  127 	cpx	#0x00
   003C F0 0D         [ 4]  128 	beq	00190$
   003E                     129 00189$:
   003E 48            [ 3]  130 	pha
   003F A5*03         [ 3]  131 	lda	*(_mbtowc_sloc1_1_0 + 1)
   0041 C9 80         [ 2]  132 	cmp	#0x80
   0043 68            [ 4]  133 	pla
   0044 66*03         [ 5]  134 	ror	*(_mbtowc_sloc1_1_0 + 1)
   0046 66*02         [ 5]  135 	ror	*_mbtowc_sloc1_1_0
   0048 CA            [ 2]  136 	dex
   0049 D0 F3         [ 4]  137 	bne	00189$
   004B                     138 00190$:
   004B ADr0Br00      [ 4]  139 	lda	_mbtowc_first_byte_65536_37
   004E A2 00         [ 2]  140 	ldx	#0x00
   0050 25*02         [ 3]  141 	and	*_mbtowc_sloc1_1_0
   0052 D0 06         [ 4]  142 	bne	00191$
   0054 A5*03         [ 3]  143 	lda	*(_mbtowc_sloc1_1_0 + 1)
   0056 86*00         [ 3]  144 	stx	*(__TEMP+0)
   0058 25*00         [ 3]  145 	and	*(__TEMP+0)
   005A                     146 00191$:
   005A F0 04         [ 4]  147 	beq	00143$
                            148 ;	../mbtowc.c: 46: seqlen++;
   005C C8            [ 2]  149 	iny
   005D 4Cr30r00      [ 3]  150 	jmp	00103$
   0060                     151 00143$:
   0060 8Cr0Ar00      [ 4]  152 	sty	_mbtowc_seqlen_65536_37
                            153 ;	../mbtowc.c: 47: first_byte &= (0xff >> (seqlen + 1));
   0063 C8            [ 2]  154 	iny
   0064 A9 FF         [ 2]  155 	lda	#0xff
   0066 A2 00         [ 2]  156 	ldx	#0x00
   0068 C0 00         [ 2]  157 	cpy	#0x00
   006A F0 0B         [ 4]  158 	beq	00194$
   006C                     159 00193$:
   006C 48            [ 3]  160 	pha
   006D 8A            [ 2]  161 	txa
   006E C9 80         [ 2]  162 	cmp	#0x80
   0070 6A            [ 2]  163 	ror	a
   0071 AA            [ 2]  164 	tax
   0072 68            [ 4]  165 	pla
   0073 6A            [ 2]  166 	ror	a
   0074 88            [ 2]  167 	dey
   0075 D0 F5         [ 4]  168 	bne	00193$
   0077                     169 00194$:
   0077 2Dr0Br00      [ 4]  170 	and	_mbtowc_first_byte_65536_37
   007A 8Dr0Br00      [ 4]  171 	sta	_mbtowc_first_byte_65536_37
   007D                     172 00107$:
                            173 ;	../mbtowc.c: 50: if(seqlen > 4 || n < seqlen)
   007D ADr0Ar00      [ 4]  174 	lda	_mbtowc_seqlen_65536_37
   0080 C9 04         [ 2]  175 	cmp	#0x04
   0082 F0 02         [ 4]  176 	beq	00195$
   0084 B0 16         [ 4]  177 	bcs	00108$
   0086                     178 00195$:
   0086 ADr0Ar00      [ 4]  179 	lda	_mbtowc_seqlen_65536_37
   0089 A2 00         [ 2]  180 	ldx	#0x00
   008B 85*00         [ 3]  181 	sta	*(__TEMP+0)
   008D ADr02r00      [ 4]  182 	lda	_mbtowc_PARM_3
   0090 38            [ 2]  183 	sec
   0091 E5*00         [ 3]  184 	sbc	*(__TEMP+0)
   0093 ADr03r00      [ 4]  185 	lda	(_mbtowc_PARM_3 + 1)
   0096 86*00         [ 3]  186 	stx	*(__TEMP+0)
   0098 E5*00         [ 3]  187 	sbc	*(__TEMP+0)
   009A B0 04         [ 4]  188 	bcs	00136$
   009C                     189 00108$:
                            190 ;	../mbtowc.c: 51: return(-1);
   009C A9 FF         [ 2]  191 	lda	#0xff
   009E AA            [ 2]  192 	tax
   009F 60            [ 6]  193 	rts
                            194 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
   00A0                     195 00136$:
   00A0 A2 01         [ 2]  196 	ldx	#0x01
   00A2 86*02         [ 3]  197 	stx	*_mbtowc_sloc1_1_0
   00A4                     198 00121$:
   00A4 A5*02         [ 3]  199 	lda	*_mbtowc_sloc1_1_0
   00A6 CDr0Ar00      [ 4]  200 	cmp	_mbtowc_seqlen_65536_37
   00A9 B0 26         [ 4]  201 	bcs	00113$
                            202 ;	../mbtowc.c: 54: if((s[i] & 0xc0) != 0x80)
   00AB A5*00         [ 3]  203 	lda	*_mbtowc_sloc0_1_0
   00AD 18            [ 2]  204 	clc
   00AE 65*02         [ 3]  205 	adc	*_mbtowc_sloc1_1_0
   00B0 85*04         [ 3]  206 	sta	*_mbtowc_sloc2_1_0
   00B2 A5*01         [ 3]  207 	lda	*(_mbtowc_sloc0_1_0 + 1)
   00B4 69 00         [ 2]  208 	adc	#0x00
   00B6 85*05         [ 3]  209 	sta	*(_mbtowc_sloc2_1_0 + 1)
   00B8 A0 00         [ 2]  210 	ldy	#0x00
   00BA B1*04         [ 6]  211 	lda	[*_mbtowc_sloc2_1_0],y
   00BC A2 00         [ 2]  212 	ldx	#0x00
   00BE 29 C0         [ 2]  213 	and	#0xc0
   00C0 C9 80         [ 2]  214 	cmp	#0x80
   00C2 D0 04         [ 4]  215 	bne	00200$
   00C4 E0 00         [ 2]  216 	cpx	#0x00
   00C6 F0 04         [ 4]  217 	beq	00122$
   00C8                     218 00200$:
                            219 ;	../mbtowc.c: 55: return(-1);
   00C8 A9 FF         [ 2]  220 	lda	#0xff
   00CA AA            [ 2]  221 	tax
   00CB 60            [ 6]  222 	rts
   00CC                     223 00122$:
                            224 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
   00CC E6*02         [ 5]  225 	inc	*_mbtowc_sloc1_1_0
   00CE 4CrA4r00      [ 3]  226 	jmp	00121$
   00D1                     227 00113$:
                            228 ;	../mbtowc.c: 57: codepoint = first_byte;
   00D1 ADr0Br00      [ 4]  229 	lda	_mbtowc_first_byte_65536_37
   00D4 8Dr06r00      [ 4]  230 	sta	_mbtowc_codepoint_65536_37
   00D7 A2 00         [ 2]  231 	ldx	#0x00
   00D9 8Er07r00      [ 4]  232 	stx	(_mbtowc_codepoint_65536_37 + 1)
   00DC 8Er08r00      [ 4]  233 	stx	(_mbtowc_codepoint_65536_37 + 2)
   00DF 8Er09r00      [ 4]  234 	stx	(_mbtowc_codepoint_65536_37 + 3)
                            235 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
   00E2 A5*00         [ 3]  236 	lda	*_mbtowc_sloc0_1_0
   00E4 18            [ 2]  237 	clc
   00E5 69 01         [ 2]  238 	adc	#0x01
   00E7 8Dr00r00      [ 4]  239 	sta	_mbtowc_PARM_2
   00EA A5*01         [ 3]  240 	lda	*(_mbtowc_sloc0_1_0 + 1)
   00EC 69 00         [ 2]  241 	adc	#0x00
   00EE 8Dr01r00      [ 4]  242 	sta	(_mbtowc_PARM_2 + 1)
   00F1 ADr0Ar00      [ 4]  243 	lda	_mbtowc_seqlen_65536_37
   00F4 38            [ 2]  244 	sec
   00F5 E9 01         [ 2]  245 	sbc	#0x01
   00F7 85*04         [ 3]  246 	sta	*_mbtowc_sloc2_1_0
   00F9 ADr00r00      [ 4]  247 	lda	_mbtowc_PARM_2
   00FC 85*02         [ 3]  248 	sta	*_mbtowc_sloc1_1_0
   00FE ADr01r00      [ 4]  249 	lda	(_mbtowc_PARM_2 + 1)
   0101 85*03         [ 3]  250 	sta	*(_mbtowc_sloc1_1_0 + 1)
   0103                     251 00124$:
   0103 A5*04         [ 3]  252 	lda	*_mbtowc_sloc2_1_0
   0105 D0 03         [ 4]  253 	bne	00201$
   0107 4Cr97r01      [ 3]  254 	jmp	00114$
   010A                     255 00201$:
                            256 ;	../mbtowc.c: 61: codepoint <<= 6;
   010A 0Er06r00      [ 6]  257 	asl	_mbtowc_codepoint_65536_37
   010D 2Er07r00      [ 6]  258 	rol	(_mbtowc_codepoint_65536_37 + 1)
   0110 2Er08r00      [ 6]  259 	rol	(_mbtowc_codepoint_65536_37 + 2)
   0113 2Er09r00      [ 6]  260 	rol	(_mbtowc_codepoint_65536_37 + 3)
   0116 0Er06r00      [ 6]  261 	asl	_mbtowc_codepoint_65536_37
   0119 2Er07r00      [ 6]  262 	rol	(_mbtowc_codepoint_65536_37 + 1)
   011C 2Er08r00      [ 6]  263 	rol	(_mbtowc_codepoint_65536_37 + 2)
   011F 2Er09r00      [ 6]  264 	rol	(_mbtowc_codepoint_65536_37 + 3)
   0122 0Er06r00      [ 6]  265 	asl	_mbtowc_codepoint_65536_37
   0125 2Er07r00      [ 6]  266 	rol	(_mbtowc_codepoint_65536_37 + 1)
   0128 2Er08r00      [ 6]  267 	rol	(_mbtowc_codepoint_65536_37 + 2)
   012B 2Er09r00      [ 6]  268 	rol	(_mbtowc_codepoint_65536_37 + 3)
   012E 0Er06r00      [ 6]  269 	asl	_mbtowc_codepoint_65536_37
   0131 2Er07r00      [ 6]  270 	rol	(_mbtowc_codepoint_65536_37 + 1)
   0134 2Er08r00      [ 6]  271 	rol	(_mbtowc_codepoint_65536_37 + 2)
   0137 2Er09r00      [ 6]  272 	rol	(_mbtowc_codepoint_65536_37 + 3)
   013A 0Er06r00      [ 6]  273 	asl	_mbtowc_codepoint_65536_37
   013D 2Er07r00      [ 6]  274 	rol	(_mbtowc_codepoint_65536_37 + 1)
   0140 2Er08r00      [ 6]  275 	rol	(_mbtowc_codepoint_65536_37 + 2)
   0143 2Er09r00      [ 6]  276 	rol	(_mbtowc_codepoint_65536_37 + 3)
   0146 0Er06r00      [ 6]  277 	asl	_mbtowc_codepoint_65536_37
   0149 2Er07r00      [ 6]  278 	rol	(_mbtowc_codepoint_65536_37 + 1)
   014C 2Er08r00      [ 6]  279 	rol	(_mbtowc_codepoint_65536_37 + 2)
   014F 2Er09r00      [ 6]  280 	rol	(_mbtowc_codepoint_65536_37 + 3)
   0152 ADr09r00      [ 4]  281 	lda	(_mbtowc_codepoint_65536_37 + 3)
                            282 ;	../mbtowc.c: 62: codepoint |= (*s & 0x3f);
   0155 A0 00         [ 2]  283 	ldy	#0x00
   0157 B1*02         [ 6]  284 	lda	[*_mbtowc_sloc1_1_0],y
   0159 A2 00         [ 2]  285 	ldx	#0x00
   015B 29 3F         [ 2]  286 	and	#0x3f
   015D 85*06         [ 3]  287 	sta	*_mbtowc_sloc3_1_0
   015F 86*07         [ 3]  288 	stx	*(_mbtowc_sloc3_1_0 + 1)
   0161 8A            [ 2]  289 	txa
   0162 0A            [ 2]  290 	asl	a
   0163 98            [ 2]  291 	tya
   0164 69 FF         [ 2]  292 	adc	#0xff
   0166 49 FF         [ 2]  293 	eor	#0xff
   0168 85*08         [ 3]  294 	sta	*(_mbtowc_sloc3_1_0 + 2)
   016A 85*09         [ 3]  295 	sta	*(_mbtowc_sloc3_1_0 + 3)
   016C ADr06r00      [ 4]  296 	lda	_mbtowc_codepoint_65536_37
   016F 05*06         [ 3]  297 	ora	*_mbtowc_sloc3_1_0
   0171 8Dr06r00      [ 4]  298 	sta	_mbtowc_codepoint_65536_37
   0174 ADr07r00      [ 4]  299 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0177 05*07         [ 3]  300 	ora	*(_mbtowc_sloc3_1_0 + 1)
   0179 8Dr07r00      [ 4]  301 	sta	(_mbtowc_codepoint_65536_37 + 1)
   017C ADr08r00      [ 4]  302 	lda	(_mbtowc_codepoint_65536_37 + 2)
   017F 05*08         [ 3]  303 	ora	*(_mbtowc_sloc3_1_0 + 2)
   0181 8Dr08r00      [ 4]  304 	sta	(_mbtowc_codepoint_65536_37 + 2)
   0184 ADr09r00      [ 4]  305 	lda	(_mbtowc_codepoint_65536_37 + 3)
   0187 05*09         [ 3]  306 	ora	*(_mbtowc_sloc3_1_0 + 3)
   0189 8Dr09r00      [ 4]  307 	sta	(_mbtowc_codepoint_65536_37 + 3)
                            308 ;	../mbtowc.c: 63: s++;
   018C E6*02         [ 5]  309 	inc	*_mbtowc_sloc1_1_0
   018E D0 02         [ 4]  310 	bne	00202$
   0190 E6*03         [ 5]  311 	inc	*(_mbtowc_sloc1_1_0 + 1)
   0192                     312 00202$:
                            313 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
   0192 C6*04         [ 5]  314 	dec	*_mbtowc_sloc2_1_0
   0194 4Cr03r01      [ 3]  315 	jmp	00124$
   0197                     316 00114$:
                            317 ;	../mbtowc.c: 66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
   0197 ADr07r00      [ 4]  318 	lda	(_mbtowc_codepoint_65536_37 + 1)
   019A 38            [ 2]  319 	sec
   019B E9 D8         [ 2]  320 	sbc	#0xd8
   019D ADr08r00      [ 4]  321 	lda	(_mbtowc_codepoint_65536_37 + 2)
   01A0 E9 00         [ 2]  322 	sbc	#0x00
   01A2 ADr09r00      [ 4]  323 	lda	(_mbtowc_codepoint_65536_37 + 3)
   01A5 E9 00         [ 2]  324 	sbc	#0x00
   01A7 90 1B         [ 4]  325 	bcc	00116$
   01A9 A9 FF         [ 2]  326 	lda	#0xff
   01AB 38            [ 2]  327 	sec
   01AC EDr06r00      [ 4]  328 	sbc	_mbtowc_codepoint_65536_37
   01AF A9 DF         [ 2]  329 	lda	#0xdf
   01B1 EDr07r00      [ 4]  330 	sbc	(_mbtowc_codepoint_65536_37 + 1)
   01B4 A9 00         [ 2]  331 	lda	#0x00
   01B6 EDr08r00      [ 4]  332 	sbc	(_mbtowc_codepoint_65536_37 + 2)
   01B9 A9 00         [ 2]  333 	lda	#0x00
   01BB EDr09r00      [ 4]  334 	sbc	(_mbtowc_codepoint_65536_37 + 3)
   01BE 90 04         [ 4]  335 	bcc	00116$
                            336 ;	../mbtowc.c: 67: return(-1);
   01C0 A9 FF         [ 2]  337 	lda	#0xff
   01C2 AA            [ 2]  338 	tax
   01C3 60            [ 6]  339 	rts
   01C4                     340 00116$:
                            341 ;	../mbtowc.c: 69: if(pwc)
   01C4 ADr05r00      [ 4]  342 	lda	(_mbtowc_pwc_65536_36 + 1)
   01C7 0Dr04r00      [ 4]  343 	ora	_mbtowc_pwc_65536_36
   01CA F0 23         [ 4]  344 	beq	00119$
                            345 ;	../mbtowc.c: 70: *pwc = codepoint;
   01CC ADr04r00      [ 4]  346 	lda	_mbtowc_pwc_65536_36
   01CF 85*00         [ 3]  347 	sta	*(__DPTR+0)
   01D1 ADr05r00      [ 4]  348 	lda	(_mbtowc_pwc_65536_36 + 1)
   01D4 85*01         [ 3]  349 	sta	*(__DPTR+1)
   01D6 ADr06r00      [ 4]  350 	lda	_mbtowc_codepoint_65536_37
   01D9 A0 00         [ 2]  351 	ldy	#0x00
   01DB 91*00         [ 6]  352 	sta	[__DPTR],y
   01DD ADr07r00      [ 4]  353 	lda	(_mbtowc_codepoint_65536_37 + 1)
   01E0 C8            [ 2]  354 	iny
   01E1 91*00         [ 6]  355 	sta	[__DPTR],y
   01E3 ADr08r00      [ 4]  356 	lda	(_mbtowc_codepoint_65536_37 + 2)
   01E6 C8            [ 2]  357 	iny
   01E7 91*00         [ 6]  358 	sta	[__DPTR],y
   01E9 ADr09r00      [ 4]  359 	lda	(_mbtowc_codepoint_65536_37 + 3)
   01EC C8            [ 2]  360 	iny
   01ED 91*00         [ 6]  361 	sta	[__DPTR],y
   01EF                     362 00119$:
                            363 ;	../mbtowc.c: 71: return(codepoint ? seqlen : 0);
   01EF ADr09r00      [ 4]  364 	lda	(_mbtowc_codepoint_65536_37 + 3)
   01F2 0Dr08r00      [ 4]  365 	ora	(_mbtowc_codepoint_65536_37 + 2)
   01F5 0Dr07r00      [ 4]  366 	ora	(_mbtowc_codepoint_65536_37 + 1)
   01F8 0Dr06r00      [ 4]  367 	ora	_mbtowc_codepoint_65536_37
   01FB F0 06         [ 4]  368 	beq	00128$
   01FD ADr0Ar00      [ 4]  369 	lda	_mbtowc_seqlen_65536_37
   0200 A2 00         [ 2]  370 	ldx	#0x00
   0202 60            [ 6]  371 	rts
   0203                     372 00128$:
   0203 A9 00         [ 2]  373 	lda	#0x00
   0205 AA            [ 2]  374 	tax
                            375 ;	../mbtowc.c: 72: }
   0206 60            [ 6]  376 	rts
                            377 	.area CODE
                            378 	.area RODATA
                            379 	.area XINIT
                            380 	.area CABS    (ABS)
