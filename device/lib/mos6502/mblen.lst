                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mblen
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _mblen_PARM_2
                             12 	.globl _mblen
                             13 ;--------------------------------------------------------
                             14 ; ZP ram data
                             15 ;--------------------------------------------------------
                             16 	.area ZP      (PAG)
                             17 ;--------------------------------------------------------
                             18 ; overlayable items in ram
                             19 ;--------------------------------------------------------
                             20 	.area	OSEG    (PAG, OVR)
   0000                      21 _mblen_sloc0_1_0:
   0000                      22 	.ds 2
   0002                      23 _mblen_sloc1_1_0:
   0002                      24 	.ds 2
   0004                      25 _mblen_sloc2_1_0:
   0004                      26 	.ds 1
                             27 ;--------------------------------------------------------
                             28 ; uninitialized external ram data
                             29 ;--------------------------------------------------------
                             30 	.area BSS
   0000                      31 _mblen_PARM_2:
   0000                      32 	.ds 2
   0002                      33 _mblen_s_65536_36:
   0002                      34 	.ds 2
                             35 ;--------------------------------------------------------
                             36 ; absolute external ram data
                             37 ;--------------------------------------------------------
                             38 	.area DABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; initialized external ram data
                             41 ;--------------------------------------------------------
                             42 	.area DATA
                             43 ;--------------------------------------------------------
                             44 ; global & static initialisations
                             45 ;--------------------------------------------------------
                             46 	.area _CODE
                             47 	.area GSINIT
                             48 	.area GSFINAL
                             49 	.area GSINIT
                             50 ;--------------------------------------------------------
                             51 ; Home
                             52 ;--------------------------------------------------------
                             53 	.area _CODE
                             54 	.area _CODE
                             55 ;--------------------------------------------------------
                             56 ; code
                             57 ;--------------------------------------------------------
                             58 	.area CODE
                             59 ;------------------------------------------------------------
                             60 ;Allocation info for local variables in function 'mblen'
                             61 ;------------------------------------------------------------
                             62 ;n                         Allocated with name '_mblen_PARM_2'
                             63 ;s                         Allocated with name '_mblen_s_65536_36'
                             64 ;m                         Allocated to registers 
                             65 ;c                         Allocated to registers x 
                             66 ;sloc0                     Allocated with name '_mblen_sloc0_1_0'
                             67 ;sloc1                     Allocated with name '_mblen_sloc1_1_0'
                             68 ;sloc2                     Allocated with name '_mblen_sloc2_1_0'
                             69 ;------------------------------------------------------------
                             70 ;	../mblen.c: 31: int mblen(const char *s, size_t n)
                             71 ;	-----------------------------------------
                             72 ;	 function mblen
                             73 ;	-----------------------------------------
                             74 ;	Register assignment is optimal.
                             75 ;	Stack space usage: 0 bytes.
   0000                      76 _mblen:
   0000 8Dr02r00      [ 4]   77 	sta	_mblen_s_65536_36
   0003 8Er03r00      [ 4]   78 	stx	(_mblen_s_65536_36 + 1)
                             79 ;	../mblen.c: 36: if(!s)
   0006 ADr03r00      [ 4]   80 	lda	(_mblen_s_65536_36 + 1)
   0009 0Dr02r00      [ 4]   81 	ora	_mblen_s_65536_36
   000C D0 04         [ 4]   82 	bne	00102$
                             83 ;	../mblen.c: 37: return(0);
   000E A9 00         [ 2]   84 	lda	#0x00
   0010 AA            [ 2]   85 	tax
   0011 60            [ 6]   86 	rts
   0012                      87 00102$:
                             88 ;	../mblen.c: 39: if(!n)
   0012 ADr01r00      [ 4]   89 	lda	(_mblen_PARM_2 + 1)
   0015 0Dr00r00      [ 4]   90 	ora	_mblen_PARM_2
   0018 D0 04         [ 4]   91 	bne	00104$
                             92 ;	../mblen.c: 40: return(-1);
   001A A9 FF         [ 2]   93 	lda	#0xff
   001C AA            [ 2]   94 	tax
   001D 60            [ 6]   95 	rts
   001E                      96 00104$:
                             97 ;	../mblen.c: 42: c = *s;
   001E ADr02r00      [ 4]   98 	lda	_mblen_s_65536_36
   0021 85*00         [ 3]   99 	sta	*(__DPTR+0)
   0023 ADr03r00      [ 4]  100 	lda	(_mblen_s_65536_36 + 1)
   0026 85*01         [ 3]  101 	sta	*(__DPTR+1)
   0028 A0 00         [ 2]  102 	ldy	#0x00
   002A B1*00         [ 6]  103 	lda	[__DPTR],y
                            104 ;	../mblen.c: 44: if(!c)
   002C AA            [ 2]  105 	tax
   002D D0 03         [ 4]  106 	bne	00106$
                            107 ;	../mblen.c: 45: return(0);
   002F 98            [ 2]  108 	tya
   0030 AA            [ 2]  109 	tax
   0031 60            [ 6]  110 	rts
   0032                     111 00106$:
                            112 ;	../mblen.c: 47: if(c <= 0x7f)
   0032 E0 7F         [ 2]  113 	cpx	#0x7f
   0034 F0 02         [ 4]  114 	beq	00165$
   0036 B0 05         [ 4]  115 	bcs	00126$
   0038                     116 00165$:
                            117 ;	../mblen.c: 48: return(1);
   0038 A9 01         [ 2]  118 	lda	#0x01
   003A A2 00         [ 2]  119 	ldx	#0x00
   003C 60            [ 6]  120 	rts
                            121 ;	../mblen.c: 50: while(c & 0x80)
   003D                     122 00126$:
   003D A0 00         [ 2]  123 	ldy	#0x00
   003F                     124 00109$:
   003F A9 80         [ 2]  125 	lda	#0x80
   0041 86*00         [ 3]  126 	stx	*(__TEMP+0)
   0043 25*00         [ 3]  127 	and	*(__TEMP+0)
   0045 F0 07         [ 4]  128 	beq	00111$
                            129 ;	../mblen.c: 52: c <<= 1;
   0047 8A            [ 2]  130 	txa
   0048 0A            [ 2]  131 	asl	a
   0049 AA            [ 2]  132 	tax
                            133 ;	../mblen.c: 53: m++;
   004A C8            [ 2]  134 	iny
   004B 4Cr3Fr00      [ 3]  135 	jmp	00109$
   004E                     136 00111$:
                            137 ;	../mblen.c: 56: if(m > n)
   004E 84*00         [ 3]  138 	sty	*_mblen_sloc0_1_0
   0050 A2 00         [ 2]  139 	ldx	#0x00
   0052 86*01         [ 3]  140 	stx	*(_mblen_sloc0_1_0 + 1)
   0054 ADr00r00      [ 4]  141 	lda	_mblen_PARM_2
   0057 38            [ 2]  142 	sec
   0058 E5*00         [ 3]  143 	sbc	*_mblen_sloc0_1_0
   005A ADr01r00      [ 4]  144 	lda	(_mblen_PARM_2 + 1)
   005D E5*01         [ 3]  145 	sbc	*(_mblen_sloc0_1_0 + 1)
   005F B0 04         [ 4]  146 	bcs	00129$
                            147 ;	../mblen.c: 57: return(-1);
   0061 A9 FF         [ 2]  148 	lda	#0xff
   0063 AA            [ 2]  149 	tax
   0064 60            [ 6]  150 	rts
                            151 ;	../mblen.c: 60: while(--m)
   0065                     152 00129$:
   0065 ADr02r00      [ 4]  153 	lda	_mblen_s_65536_36
   0068 85*02         [ 3]  154 	sta	*_mblen_sloc1_1_0
   006A ADr03r00      [ 4]  155 	lda	(_mblen_s_65536_36 + 1)
   006D 85*03         [ 3]  156 	sta	*(_mblen_sloc1_1_0 + 1)
   006F 84*04         [ 3]  157 	sty	*_mblen_sloc2_1_0
   0071                     158 00116$:
   0071 C6*04         [ 5]  159 	dec	*_mblen_sloc2_1_0
   0073 A5*04         [ 3]  160 	lda	*_mblen_sloc2_1_0
   0075 F0 1A         [ 4]  161 	beq	00118$
                            162 ;	../mblen.c: 61: if((*++s & 0xc0) != 0x80)
   0077 E6*02         [ 5]  163 	inc	*_mblen_sloc1_1_0
   0079 D0 02         [ 4]  164 	bne	00170$
   007B E6*03         [ 5]  165 	inc	*(_mblen_sloc1_1_0 + 1)
   007D                     166 00170$:
   007D A0 00         [ 2]  167 	ldy	#0x00
   007F B1*02         [ 6]  168 	lda	[*_mblen_sloc1_1_0],y
   0081 A2 00         [ 2]  169 	ldx	#0x00
   0083 29 C0         [ 2]  170 	and	#0xc0
   0085 C9 80         [ 2]  171 	cmp	#0x80
   0087 D0 04         [ 4]  172 	bne	00172$
   0089 E0 00         [ 2]  173 	cpx	#0x00
   008B F0 E4         [ 4]  174 	beq	00116$
   008D                     175 00172$:
                            176 ;	../mblen.c: 62: return(-1);
   008D A9 FF         [ 2]  177 	lda	#0xff
   008F AA            [ 2]  178 	tax
   0090 60            [ 6]  179 	rts
   0091                     180 00118$:
                            181 ;	../mblen.c: 64: return(n);
   0091 A6*01         [ 3]  182 	ldx	*(_mblen_sloc0_1_0 + 1)
   0093 A5*00         [ 3]  183 	lda	*_mblen_sloc0_1_0
                            184 ;	../mblen.c: 65: }
   0095 60            [ 6]  185 	rts
                            186 	.area CODE
                            187 	.area RODATA
                            188 	.area XINIT
                            189 	.area CABS    (ABS)
