                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module cotf
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _tancotf
                             12 	.globl _fabsf
                             13 	.globl _cotf
                             14 ;--------------------------------------------------------
                             15 ; ZP ram data
                             16 ;--------------------------------------------------------
                             17 	.area ZP      (PAG)
                             18 ;--------------------------------------------------------
                             19 ; overlayable items in ram
                             20 ;--------------------------------------------------------
                             21 ;--------------------------------------------------------
                             22 ; uninitialized external ram data
                             23 ;--------------------------------------------------------
                             24 	.area BSS
                             25 ;--------------------------------------------------------
                             26 ; absolute external ram data
                             27 ;--------------------------------------------------------
                             28 	.area DABS    (ABS)
                             29 ;--------------------------------------------------------
                             30 ; initialized external ram data
                             31 ;--------------------------------------------------------
                             32 	.area DATA
                             33 ;--------------------------------------------------------
                             34 ; global & static initialisations
                             35 ;--------------------------------------------------------
                             36 	.area _CODE
                             37 	.area GSINIT
                             38 	.area GSFINAL
                             39 	.area GSINIT
                             40 ;--------------------------------------------------------
                             41 ; Home
                             42 ;--------------------------------------------------------
                             43 	.area _CODE
                             44 	.area _CODE
                             45 ;--------------------------------------------------------
                             46 ; code
                             47 ;--------------------------------------------------------
                             48 	.area CODE
                             49 ;------------------------------------------------------------
                             50 ;Allocation info for local variables in function 'cotf'
                             51 ;------------------------------------------------------------
                             52 ;x                         Allocated to stack - sp +7
                             53 ;y                         Allocated to stack - sp +1
                             54 ;sloc0                     Allocated to stack - sp +1
                             55 ;------------------------------------------------------------
                             56 ;	../cotf.c: 37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                             57 ;	-----------------------------------------
                             58 ;	 function cotf
                             59 ;	-----------------------------------------
                             60 ;	Register assignment is optimal.
                             61 ;	Stack space usage: 4 bytes.
   0000                      62 _cotf:
   0000 48            [ 3]   63 	pha
   0001 48            [ 3]   64 	pha
   0002 48            [ 3]   65 	pha
   0003 48            [ 3]   66 	pha
                             67 ;	../cotf.c: 41: y=fabsf(x);
   0004 BA            [ 2]   68 	tsx
   0005 BD 0A 01      [ 5]   69 	lda	0x10a,x
   0008 48            [ 3]   70 	pha
   0009 BD 09 01      [ 5]   71 	lda	0x109,x
   000C 48            [ 3]   72 	pha
   000D BD 08 01      [ 5]   73 	lda	0x108,x
   0010 48            [ 3]   74 	pha
   0011 BD 07 01      [ 5]   75 	lda	0x107,x
   0014 48            [ 3]   76 	pha
   0015 20r00r00      [ 6]   77 	jsr	_fabsf
   0018 8Dr00r00      [ 4]   78 	sta	___fslt_PARM_1
   001B 8Er01r00      [ 4]   79 	stx	(___fslt_PARM_1 + 1)
   001E A5*00         [ 3]   80 	lda	*___SDCC_m6502_ret2
   0020 8Dr02r00      [ 4]   81 	sta	(___fslt_PARM_1 + 2)
   0023 A5*00         [ 3]   82 	lda	*___SDCC_m6502_ret3
   0025 8Dr03r00      [ 4]   83 	sta	(___fslt_PARM_1 + 3)
   0028 85*00         [ 3]   84 	sta	*(__TEMP+0)
   002A 68            [ 4]   85 	pla
   002B 68            [ 4]   86 	pla
   002C 68            [ 4]   87 	pla
   002D 68            [ 4]   88 	pla
   002E A5*00         [ 3]   89 	lda	*(__TEMP+0)
                             90 ;	../cotf.c: 42: if (y<1.0E-30) //This one requires more thinking...
   0030 A2 60         [ 2]   91 	ldx	#0x60
   0032 8Er00r00      [ 4]   92 	stx	___fslt_PARM_2
   0035 A2 42         [ 2]   93 	ldx	#0x42
   0037 8Er01r00      [ 4]   94 	stx	(___fslt_PARM_2 + 1)
   003A A2 A2         [ 2]   95 	ldx	#0xa2
   003C 8Er02r00      [ 4]   96 	stx	(___fslt_PARM_2 + 2)
   003F A2 0D         [ 2]   97 	ldx	#0x0d
   0041 8Er03r00      [ 4]   98 	stx	(___fslt_PARM_2 + 3)
   0044 20r00r00      [ 6]   99 	jsr	___fslt
   0047 C9 00         [ 2]  100 	cmp	#0x00
   0049 F0 50         [ 4]  101 	beq	00105$
                            102 ;	../cotf.c: 44: errno = ERANGE;
   004B A2 22         [ 2]  103 	ldx	#0x22
   004D 8Er00r00      [ 4]  104 	stx	_errno
   0050 A2 00         [ 2]  105 	ldx	#0x00
   0052 8Er01r00      [ 4]  106 	stx	(_errno + 1)
                            107 ;	../cotf.c: 45: if (x<0.0)
   0055 BA            [ 2]  108 	tsx
   0056 BD 07 01      [ 5]  109 	lda	0x107,x
   0059 8Dr00r00      [ 4]  110 	sta	___fslt_PARM_1
   005C BD 08 01      [ 5]  111 	lda	0x108,x
   005F 8Dr01r00      [ 4]  112 	sta	(___fslt_PARM_1 + 1)
   0062 BD 09 01      [ 5]  113 	lda	0x109,x
   0065 8Dr02r00      [ 4]  114 	sta	(___fslt_PARM_1 + 2)
   0068 BD 0A 01      [ 5]  115 	lda	0x10a,x
   006B 8Dr03r00      [ 4]  116 	sta	(___fslt_PARM_1 + 3)
   006E A2 00         [ 2]  117 	ldx	#0x00
   0070 8Er00r00      [ 4]  118 	stx	___fslt_PARM_2
   0073 8Er01r00      [ 4]  119 	stx	(___fslt_PARM_2 + 1)
   0076 8Er02r00      [ 4]  120 	stx	(___fslt_PARM_2 + 2)
   0079 8Er03r00      [ 4]  121 	stx	(___fslt_PARM_2 + 3)
   007C 20r00r00      [ 6]  122 	jsr	___fslt
   007F C9 00         [ 2]  123 	cmp	#0x00
   0081 F0 0C         [ 4]  124 	beq	00102$
                            125 ;	../cotf.c: 46: return -HUGE_VALF;
   0083 A9 FF         [ 2]  126 	lda	#0xff
   0085 AA            [ 2]  127 	tax
   0086 A0 7F         [ 2]  128 	ldy	#0x7f
   0088 84*00         [ 3]  129 	sty	*___SDCC_m6502_ret2
   008A 85*00         [ 3]  130 	sta	*___SDCC_m6502_ret3
   008C 4CrEBr00      [ 3]  131 	jmp	00106$
   008F                     132 00102$:
                            133 ;	../cotf.c: 48: return +HUGE_VALF;
   008F A9 FF         [ 2]  134 	lda	#0xff
   0091 AA            [ 2]  135 	tax
   0092 A0 7F         [ 2]  136 	ldy	#0x7f
   0094 84*00         [ 3]  137 	sty	*___SDCC_m6502_ret2
   0096 84*00         [ 3]  138 	sty	*___SDCC_m6502_ret3
   0098 4CrEBr00      [ 3]  139 	jmp	00106$
   009B                     140 00105$:
                            141 ;	../cotf.c: 50: return tancotf(x, 1);
   009B BA            [ 2]  142 	tsx
   009C BD 07 01      [ 5]  143 	lda	0x107,x
   009F 8Dr00r00      [ 4]  144 	sta	_tancotf_PARM_1
   00A2 BD 08 01      [ 5]  145 	lda	0x108,x
   00A5 8Dr01r00      [ 4]  146 	sta	(_tancotf_PARM_1 + 1)
   00A8 BD 09 01      [ 5]  147 	lda	0x109,x
   00AB 8Dr02r00      [ 4]  148 	sta	(_tancotf_PARM_1 + 2)
   00AE BD 0A 01      [ 5]  149 	lda	0x10a,x
   00B1 8Dr03r00      [ 4]  150 	sta	(_tancotf_PARM_1 + 3)
   00B4 A2 01         [ 2]  151 	ldx	#0x01
   00B6 8Er00r00      [ 4]  152 	stx	_tancotf_PARM_2
   00B9 20r00r00      [ 6]  153 	jsr	_tancotf
   00BC 86*00         [ 3]  154 	stx	*(__TEMP+0)
   00BE BA            [ 2]  155 	tsx
   00BF 9D 01 01      [ 5]  156 	sta	0x101,x
   00C2 A6*00         [ 3]  157 	ldx	*(__TEMP+0)
   00C4 8A            [ 2]  158 	txa
   00C5 BA            [ 2]  159 	tsx
   00C6 9D 02 01      [ 5]  160 	sta	0x102,x
   00C9 A6*00         [ 3]  161 	ldx	*(__TEMP+0)
   00CB A5*00         [ 3]  162 	lda	*___SDCC_m6502_ret2
   00CD BA            [ 2]  163 	tsx
   00CE 9D 03 01      [ 5]  164 	sta	0x103,x
   00D1 A5*00         [ 3]  165 	lda	*___SDCC_m6502_ret3
   00D3 9D 04 01      [ 5]  166 	sta	0x104, x
   00D6 85*00         [ 3]  167 	sta	*___SDCC_m6502_ret3
   00D8 BD 03 01      [ 5]  168 	lda	0x103,x
   00DB 85*00         [ 3]  169 	sta	*___SDCC_m6502_ret2
   00DD BD 02 01      [ 5]  170 	lda	0x102,x
   00E0 AA            [ 2]  171 	tax
   00E1 86*00         [ 3]  172 	stx	*(__TEMP+0)
   00E3 BA            [ 2]  173 	tsx
   00E4 BD 01 01      [ 5]  174 	lda	0x101,x
   00E7 08            [ 3]  175 	php
   00E8 A6*00         [ 3]  176 	ldx	*(__TEMP+0)
   00EA 28            [ 4]  177 	plp
   00EB                     178 00106$:
                            179 ;	../cotf.c: 51: }
   00EB 85*00         [ 3]  180 	sta	*(__TEMP+0)
   00ED 68            [ 4]  181 	pla
   00EE 68            [ 4]  182 	pla
   00EF 68            [ 4]  183 	pla
   00F0 68            [ 4]  184 	pla
   00F1 A5*00         [ 3]  185 	lda	*(__TEMP+0)
   00F3 60            [ 6]  186 	rts
                            187 	.area CODE
                            188 	.area RODATA
                            189 	.area XINIT
                            190 	.area CABS    (ABS)
