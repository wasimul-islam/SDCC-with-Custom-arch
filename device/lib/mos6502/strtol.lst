                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module strtol
                              6 	.optsdcc -mmos6502
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _strtoul
                             12 	.globl _strtol_PARM_3
                             13 	.globl _strtol_PARM_2
                             14 	.globl _strtol
                             15 ;--------------------------------------------------------
                             16 ; ZP ram data
                             17 ;--------------------------------------------------------
                             18 	.area ZP      (PAG)
   0000                      19 _strtol_sloc0_1_0:
   0000                      20 	.ds 2
   0002                      21 _strtol_sloc1_1_0:
   0002                      22 	.ds 4
   0006                      23 _strtol_sloc2_1_0:
   0006                      24 	.ds 4
                             25 ;--------------------------------------------------------
                             26 ; overlayable items in ram
                             27 ;--------------------------------------------------------
                             28 ;--------------------------------------------------------
                             29 ; uninitialized external ram data
                             30 ;--------------------------------------------------------
                             31 	.area BSS
   0000                      32 _strtol_PARM_2:
   0000                      33 	.ds 2
   0002                      34 _strtol_PARM_3:
   0002                      35 	.ds 2
   0004                      36 _strtol_nptr_65536_56:
   0004                      37 	.ds 2
   0006                      38 _strtol_ptr_65536_57:
   0006                      39 	.ds 2
   0008                      40 _strtol_rptr_65536_57:
   0008                      41 	.ds 2
   000A                      42 _strtol_neg_65536_57:
   000A                      43 	.ds 1
                             44 ;--------------------------------------------------------
                             45 ; absolute external ram data
                             46 ;--------------------------------------------------------
                             47 	.area DABS    (ABS)
                             48 ;--------------------------------------------------------
                             49 ; initialized external ram data
                             50 ;--------------------------------------------------------
                             51 	.area DATA
                             52 ;--------------------------------------------------------
                             53 ; global & static initialisations
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 	.area GSINIT
                             57 	.area GSFINAL
                             58 	.area GSINIT
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area _CODE
                             63 	.area _CODE
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area CODE
                             68 ;------------------------------------------------------------
                             69 ;Allocation info for local variables in function 'strtol'
                             70 ;------------------------------------------------------------
                             71 ;sloc0                     Allocated with name '_strtol_sloc0_1_0'
                             72 ;sloc1                     Allocated with name '_strtol_sloc1_1_0'
                             73 ;sloc2                     Allocated with name '_strtol_sloc2_1_0'
                             74 ;endptr                    Allocated with name '_strtol_PARM_2'
                             75 ;base                      Allocated with name '_strtol_PARM_3'
                             76 ;nptr                      Allocated with name '_strtol_nptr_65536_56'
                             77 ;__1310720007              Allocated to registers 
                             78 ;__1310720004              Allocated to registers 
                             79 ;ptr                       Allocated with name '_strtol_ptr_65536_57'
                             80 ;rptr                      Allocated with name '_strtol_rptr_65536_57'
                             81 ;u                         Allocated with name '_strtol_u_65536_57'
                             82 ;neg                       Allocated with name '_strtol_neg_65536_57'
                             83 ;__1310720005              Allocated to registers 
                             84 ;c                         Allocated to registers 
                             85 ;__1310720008              Allocated to registers 
                             86 ;c                         Allocated to registers 
                             87 ;------------------------------------------------------------
                             88 ;	../strtol.c: 38: long int strtol(const char *nptr, char **endptr, int base)
                             89 ;	-----------------------------------------
                             90 ;	 function strtol
                             91 ;	-----------------------------------------
                             92 ;	Register assignment is optimal.
                             93 ;	Stack space usage: 0 bytes.
   0000                      94 _strtol:
                             95 ;	../strtol.c: 45: while (isblank (*ptr))
   0000 8Dr04r00      [ 4]   96 	sta	_strtol_nptr_65536_56
   0003 8Er05r00      [ 4]   97 	stx	(_strtol_nptr_65536_56 + 1)
   0006 85*00         [ 3]   98 	sta	*_strtol_sloc0_1_0
   0008 86*01         [ 3]   99 	stx	*(_strtol_sloc0_1_0 + 1)
   000A                     100 00101$:
   000A A0 00         [ 2]  101 	ldy	#0x00
   000C B1*00         [ 6]  102 	lda	[*_strtol_sloc0_1_0],y
                            103 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   000E C9 20         [ 2]  104 	cmp	#0x20
   0010 F0 04         [ 4]  105 	beq	00132$
   0012 C9 09         [ 2]  106 	cmp	#0x09
   0014 D0 09         [ 4]  107 	bne	00158$
   0016                     108 00132$:
                            109 ;	../strtol.c: 46: ptr++;
   0016 E6*00         [ 5]  110 	inc	*_strtol_sloc0_1_0
   0018 D0 F0         [ 4]  111 	bne	00101$
   001A E6*01         [ 5]  112 	inc	*(_strtol_sloc0_1_0 + 1)
   001C 4Cr0Ar00      [ 3]  113 	jmp	00101$
   001F                     114 00158$:
   001F A5*00         [ 3]  115 	lda	*_strtol_sloc0_1_0
   0021 8Dr06r00      [ 4]  116 	sta	_strtol_ptr_65536_57
   0024 A5*01         [ 3]  117 	lda	*(_strtol_sloc0_1_0 + 1)
   0026 8Dr07r00      [ 4]  118 	sta	(_strtol_ptr_65536_57 + 1)
                            119 ;	../strtol.c: 50: if (*ptr == '-')
   0029 A0 00         [ 2]  120 	ldy	#0x00
   002B B1*00         [ 6]  121 	lda	[*_strtol_sloc0_1_0],y
   002D C9 2D         [ 2]  122 	cmp	#0x2d
   002F D0 17         [ 4]  123 	bne	00105$
                            124 ;	../strtol.c: 52: neg = true;
   0031 A2 01         [ 2]  125 	ldx	#0x01
   0033 8Er0Ar00      [ 4]  126 	stx	_strtol_neg_65536_57
                            127 ;	../strtol.c: 53: ptr++;
   0036 A5*00         [ 3]  128 	lda	*_strtol_sloc0_1_0
   0038 18            [ 2]  129 	clc
   0039 69 01         [ 2]  130 	adc	#0x01
   003B 8Dr06r00      [ 4]  131 	sta	_strtol_ptr_65536_57
   003E A5*01         [ 3]  132 	lda	*(_strtol_sloc0_1_0 + 1)
   0040 69 00         [ 2]  133 	adc	#0x00
   0042 8Dr07r00      [ 4]  134 	sta	(_strtol_ptr_65536_57 + 1)
   0045 4Cr4Dr00      [ 3]  135 	jmp	00106$
   0048                     136 00105$:
                            137 ;	../strtol.c: 56: neg = false;
   0048 A2 00         [ 2]  138 	ldx	#0x00
   004A 8Er0Ar00      [ 4]  139 	stx	_strtol_neg_65536_57
   004D                     140 00106$:
                            141 ;	../strtol.c: 59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
   004D ADr0Ar00      [ 4]  142 	lda	_strtol_neg_65536_57
   0050 F0 46         [ 4]  143 	beq	00110$
   0052 ADr06r00      [ 4]  144 	lda	_strtol_ptr_65536_57
   0055 85*00         [ 3]  145 	sta	*(__DPTR+0)
   0057 ADr07r00      [ 4]  146 	lda	(_strtol_ptr_65536_57 + 1)
   005A 85*01         [ 3]  147 	sta	*(__DPTR+1)
   005C A0 00         [ 2]  148 	ldy	#0x00
   005E B1*00         [ 6]  149 	lda	[__DPTR],y
   0060 AA            [ 2]  150 	tax
                            151 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   0061 E0 20         [ 2]  152 	cpx	#0x20
   0063 F0 0C         [ 4]  153 	beq	00109$
   0065 E0 09         [ 2]  154 	cpx	#0x09
   0067 F0 08         [ 4]  155 	beq	00109$
                            156 ;	../strtol.c: 59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
   0069 C9 2D         [ 2]  157 	cmp	#0x2d
   006B F0 04         [ 4]  158 	beq	00109$
   006D C9 2B         [ 2]  159 	cmp	#0x2b
   006F D0 27         [ 4]  160 	bne	00110$
   0071                     161 00109$:
                            162 ;	../strtol.c: 61: if (endptr)
   0071 ADr01r00      [ 4]  163 	lda	(_strtol_PARM_2 + 1)
   0074 0Dr00r00      [ 4]  164 	ora	_strtol_PARM_2
   0077 F0 17         [ 4]  165 	beq	00108$
                            166 ;	../strtol.c: 62: *endptr = nptr;
   0079 ADr00r00      [ 4]  167 	lda	_strtol_PARM_2
   007C AEr01r00      [ 4]  168 	ldx	(_strtol_PARM_2 + 1)
   007F 85*00         [ 3]  169 	sta	*(__DPTR+0)
   0081 86*01         [ 3]  170 	stx	*(__DPTR+1)
   0083 ADr04r00      [ 4]  171 	lda	_strtol_nptr_65536_56
   0086 A0 00         [ 2]  172 	ldy	#0x00
   0088 91*00         [ 6]  173 	sta	[__DPTR],y
   008A ADr05r00      [ 4]  174 	lda	(_strtol_nptr_65536_56 + 1)
   008D C8            [ 2]  175 	iny
   008E 91*00         [ 6]  176 	sta	[__DPTR],y
   0090                     177 00108$:
                            178 ;	../strtol.c: 63: return (0);
   0090 A9 00         [ 2]  179 	lda	#0x00
   0092 AA            [ 2]  180 	tax
   0093 85*00         [ 3]  181 	sta	*___SDCC_m6502_ret2
   0095 85*00         [ 3]  182 	sta	*___SDCC_m6502_ret3
   0097 60            [ 6]  183 	rts
   0098                     184 00110$:
                            185 ;	../strtol.c: 66: u = strtoul(ptr, &rptr, base);
   0098 A9r08         [ 2]  186 	lda	#_strtol_rptr_65536_57
   009A 8Dr00r00      [ 4]  187 	sta	_strtoul_PARM_2
   009D A9s00         [ 2]  188 	lda	#>_strtol_rptr_65536_57
   009F 8Dr01r00      [ 4]  189 	sta	(_strtoul_PARM_2 + 1)
   00A2 ADr02r00      [ 4]  190 	lda	_strtol_PARM_3
   00A5 8Dr00r00      [ 4]  191 	sta	_strtoul_PARM_3
   00A8 ADr03r00      [ 4]  192 	lda	(_strtol_PARM_3 + 1)
   00AB 8Dr01r00      [ 4]  193 	sta	(_strtoul_PARM_3 + 1)
   00AE AEr07r00      [ 4]  194 	ldx	(_strtol_ptr_65536_57 + 1)
   00B1 ADr06r00      [ 4]  195 	lda	_strtol_ptr_65536_57
   00B4 20r00r00      [ 6]  196 	jsr	_strtoul
   00B7 85*02         [ 3]  197 	sta	*_strtol_sloc1_1_0
   00B9 86*03         [ 3]  198 	stx	*(_strtol_sloc1_1_0 + 1)
   00BB A5*00         [ 3]  199 	lda	*___SDCC_m6502_ret2
   00BD 85*04         [ 3]  200 	sta	*(_strtol_sloc1_1_0 + 2)
   00BF A5*00         [ 3]  201 	lda	*___SDCC_m6502_ret3
   00C1 85*05         [ 3]  202 	sta	*(_strtol_sloc1_1_0 + 3)
                            203 ;	../strtol.c: 69: if (rptr == ptr)
   00C3 ADr08r00      [ 4]  204 	lda	_strtol_rptr_65536_57
   00C6 CDr06r00      [ 4]  205 	cmp	_strtol_ptr_65536_57
   00C9 D0 2F         [ 4]  206 	bne	00117$
   00CB ADr09r00      [ 4]  207 	lda	(_strtol_rptr_65536_57 + 1)
   00CE CDr07r00      [ 4]  208 	cmp	(_strtol_ptr_65536_57 + 1)
   00D1 D0 27         [ 4]  209 	bne	00117$
                            210 ;	../strtol.c: 71: if (endptr)
   00D3 ADr01r00      [ 4]  211 	lda	(_strtol_PARM_2 + 1)
   00D6 0Dr00r00      [ 4]  212 	ora	_strtol_PARM_2
   00D9 F0 17         [ 4]  213 	beq	00115$
                            214 ;	../strtol.c: 72: *endptr = nptr;
   00DB ADr00r00      [ 4]  215 	lda	_strtol_PARM_2
   00DE AEr01r00      [ 4]  216 	ldx	(_strtol_PARM_2 + 1)
   00E1 85*00         [ 3]  217 	sta	*(__DPTR+0)
   00E3 86*01         [ 3]  218 	stx	*(__DPTR+1)
   00E5 ADr04r00      [ 4]  219 	lda	_strtol_nptr_65536_56
   00E8 A0 00         [ 2]  220 	ldy	#0x00
   00EA 91*00         [ 6]  221 	sta	[__DPTR],y
   00EC ADr05r00      [ 4]  222 	lda	(_strtol_nptr_65536_56 + 1)
   00EF C8            [ 2]  223 	iny
   00F0 91*00         [ 6]  224 	sta	[__DPTR],y
   00F2                     225 00115$:
                            226 ;	../strtol.c: 73: return (0);
   00F2 A9 00         [ 2]  227 	lda	#0x00
   00F4 AA            [ 2]  228 	tax
   00F5 85*00         [ 3]  229 	sta	*___SDCC_m6502_ret2
   00F7 85*00         [ 3]  230 	sta	*___SDCC_m6502_ret3
   00F9 60            [ 6]  231 	rts
   00FA                     232 00117$:
                            233 ;	../strtol.c: 76: if (endptr)
   00FA ADr01r00      [ 4]  234 	lda	(_strtol_PARM_2 + 1)
   00FD 0Dr00r00      [ 4]  235 	ora	_strtol_PARM_2
   0100 F0 17         [ 4]  236 	beq	00119$
                            237 ;	../strtol.c: 77: *endptr = rptr;
   0102 ADr00r00      [ 4]  238 	lda	_strtol_PARM_2
   0105 AEr01r00      [ 4]  239 	ldx	(_strtol_PARM_2 + 1)
   0108 85*00         [ 3]  240 	sta	*(__DPTR+0)
   010A 86*01         [ 3]  241 	stx	*(__DPTR+1)
   010C ADr08r00      [ 4]  242 	lda	_strtol_rptr_65536_57
   010F A0 00         [ 2]  243 	ldy	#0x00
   0111 91*00         [ 6]  244 	sta	[__DPTR],y
   0113 ADr09r00      [ 4]  245 	lda	(_strtol_rptr_65536_57 + 1)
   0116 C8            [ 2]  246 	iny
   0117 91*00         [ 6]  247 	sta	[__DPTR],y
   0119                     248 00119$:
                            249 ;	../strtol.c: 80: if (!neg && u > LONG_MAX)
   0119 ADr0Ar00      [ 4]  250 	lda	_strtol_neg_65536_57
   011C D0 27         [ 4]  251 	bne	00124$
   011E A9 FF         [ 2]  252 	lda	#0xff
   0120 38            [ 2]  253 	sec
   0121 E5*02         [ 3]  254 	sbc	*_strtol_sloc1_1_0
   0123 A9 FF         [ 2]  255 	lda	#0xff
   0125 E5*03         [ 3]  256 	sbc	*(_strtol_sloc1_1_0 + 1)
   0127 A9 FF         [ 2]  257 	lda	#0xff
   0129 E5*04         [ 3]  258 	sbc	*(_strtol_sloc1_1_0 + 2)
   012B A9 7F         [ 2]  259 	lda	#0x7f
   012D E5*05         [ 3]  260 	sbc	*(_strtol_sloc1_1_0 + 3)
   012F B0 14         [ 4]  261 	bcs	00124$
                            262 ;	../strtol.c: 82: errno = ERANGE;
   0131 A2 22         [ 2]  263 	ldx	#0x22
   0133 8Er00r00      [ 4]  264 	stx	_errno
   0136 A2 00         [ 2]  265 	ldx	#0x00
   0138 8Er01r00      [ 4]  266 	stx	(_errno + 1)
                            267 ;	../strtol.c: 83: return (LONG_MAX);
   013B A9 FF         [ 2]  268 	lda	#0xff
   013D AA            [ 2]  269 	tax
   013E 85*00         [ 3]  270 	sta	*___SDCC_m6502_ret2
   0140 A0 7F         [ 2]  271 	ldy	#0x7f
   0142 84*00         [ 3]  272 	sty	*___SDCC_m6502_ret3
   0144 60            [ 6]  273 	rts
   0145                     274 00124$:
                            275 ;	../strtol.c: 85: else if (neg && u > -LONG_MIN)
   0145 ADr0Ar00      [ 4]  276 	lda	_strtol_neg_65536_57
   0148 F0 26         [ 4]  277 	beq	00125$
   014A A9 00         [ 2]  278 	lda	#0x00
   014C 38            [ 2]  279 	sec
   014D E5*02         [ 3]  280 	sbc	*_strtol_sloc1_1_0
   014F A9 00         [ 2]  281 	lda	#0x00
   0151 E5*03         [ 3]  282 	sbc	*(_strtol_sloc1_1_0 + 1)
   0153 A9 00         [ 2]  283 	lda	#0x00
   0155 E5*04         [ 3]  284 	sbc	*(_strtol_sloc1_1_0 + 2)
   0157 A9 80         [ 2]  285 	lda	#0x80
   0159 E5*05         [ 3]  286 	sbc	*(_strtol_sloc1_1_0 + 3)
   015B B0 13         [ 4]  287 	bcs	00125$
                            288 ;	../strtol.c: 87: errno = ERANGE;
   015D A2 22         [ 2]  289 	ldx	#0x22
   015F 8Er00r00      [ 4]  290 	stx	_errno
   0162 A2 00         [ 2]  291 	ldx	#0x00
   0164 8Er01r00      [ 4]  292 	stx	(_errno + 1)
                            293 ;	../strtol.c: 88: return (LONG_MIN);
   0167 8A            [ 2]  294 	txa
   0168 AA            [ 2]  295 	tax
   0169 85*00         [ 3]  296 	sta	*___SDCC_m6502_ret2
   016B A0 80         [ 2]  297 	ldy	#0x80
   016D 84*00         [ 3]  298 	sty	*___SDCC_m6502_ret3
   016F 60            [ 6]  299 	rts
   0170                     300 00125$:
                            301 ;	../strtol.c: 91: return (neg ? -u : u);
   0170 ADr0Ar00      [ 4]  302 	lda	_strtol_neg_65536_57
   0173 F0 1C         [ 4]  303 	beq	00137$
   0175 A9 00         [ 2]  304 	lda	#0x00
   0177 38            [ 2]  305 	sec
   0178 E5*02         [ 3]  306 	sbc	*_strtol_sloc1_1_0
   017A 85*06         [ 3]  307 	sta	*_strtol_sloc2_1_0
   017C A9 00         [ 2]  308 	lda	#0x00
   017E E5*03         [ 3]  309 	sbc	*(_strtol_sloc1_1_0 + 1)
   0180 85*07         [ 3]  310 	sta	*(_strtol_sloc2_1_0 + 1)
   0182 A9 00         [ 2]  311 	lda	#0x00
   0184 E5*04         [ 3]  312 	sbc	*(_strtol_sloc1_1_0 + 2)
   0186 85*08         [ 3]  313 	sta	*(_strtol_sloc2_1_0 + 2)
   0188 A9 00         [ 2]  314 	lda	#0x00
   018A E5*05         [ 3]  315 	sbc	*(_strtol_sloc1_1_0 + 3)
   018C 85*09         [ 3]  316 	sta	*(_strtol_sloc2_1_0 + 3)
   018E 4CrA1r01      [ 3]  317 	jmp	00138$
   0191                     318 00137$:
   0191 A5*02         [ 3]  319 	lda	*_strtol_sloc1_1_0
   0193 85*06         [ 3]  320 	sta	*_strtol_sloc2_1_0
   0195 A5*03         [ 3]  321 	lda	*(_strtol_sloc1_1_0 + 1)
   0197 85*07         [ 3]  322 	sta	*(_strtol_sloc2_1_0 + 1)
   0199 A5*04         [ 3]  323 	lda	*(_strtol_sloc1_1_0 + 2)
   019B 85*08         [ 3]  324 	sta	*(_strtol_sloc2_1_0 + 2)
   019D A5*05         [ 3]  325 	lda	*(_strtol_sloc1_1_0 + 3)
   019F 85*09         [ 3]  326 	sta	*(_strtol_sloc2_1_0 + 3)
   01A1                     327 00138$:
   01A1 A5*09         [ 3]  328 	lda	*(_strtol_sloc2_1_0 + 3)
   01A3 85*00         [ 3]  329 	sta	*___SDCC_m6502_ret3
   01A5 A5*08         [ 3]  330 	lda	*(_strtol_sloc2_1_0 + 2)
   01A7 85*00         [ 3]  331 	sta	*___SDCC_m6502_ret2
   01A9 A6*07         [ 3]  332 	ldx	*(_strtol_sloc2_1_0 + 1)
   01AB A5*06         [ 3]  333 	lda	*_strtol_sloc2_1_0
                            334 ;	../strtol.c: 92: }
   01AD 60            [ 6]  335 	rts
                            336 	.area CODE
                            337 	.area RODATA
                            338 	.area XINIT
                            339 	.area CABS    (ABS)
