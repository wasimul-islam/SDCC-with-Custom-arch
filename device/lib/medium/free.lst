                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module free
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _free
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 	.area	OSEG    (OVR,DATA)
      000000                         35 _free_sloc0_1_0:
      000000                         36 	.ds 2
      000002                         37 _free_sloc1_1_0:
      000002                         38 	.ds 2
      000004                         39 _free_sloc2_1_0:
      000004                         40 	.ds 2
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
      000000                         58 _free_next_free_65536_41:
      000000                         59 	.ds 2
                                     60 ;--------------------------------------------------------
                                     61 ; uninitialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XSEG    (XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; absolute external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XABS    (ABS,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; initialized external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XISEG   (XDATA)
                                     72 	.area HOME    (CODE)
                                     73 	.area GSINIT0 (CODE)
                                     74 	.area GSINIT1 (CODE)
                                     75 	.area GSINIT2 (CODE)
                                     76 	.area GSINIT3 (CODE)
                                     77 	.area GSINIT4 (CODE)
                                     78 	.area GSINIT5 (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area CSEG    (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; global & static initialisations
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; Home
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area HOME    (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; code
                                     96 ;--------------------------------------------------------
                                     97 	.area CSEG    (CODE)
                                     98 ;------------------------------------------------------------
                                     99 ;Allocation info for local variables in function 'free'
                                    100 ;------------------------------------------------------------
                                    101 ;sloc0                     Allocated with name '_free_sloc0_1_0'
                                    102 ;sloc1                     Allocated with name '_free_sloc1_1_0'
                                    103 ;sloc2                     Allocated with name '_free_sloc2_1_0'
                                    104 ;------------------------------------------------------------
                                    105 ;	free.c:50: void free(void *ptr)
                                    106 ;	-----------------------------------------
                                    107 ;	 function free
                                    108 ;	-----------------------------------------
      000000                        109 _free:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 AD 82            [24]  118 	mov	r5,dpl
      000002 AE 83            [24]  119 	mov	r6,dph
      000004 AF F0            [24]  120 	mov	r7,b
                                    121 ;	free.c:55: if(!ptr)
      000006 ED               [12]  122 	mov	a,r5
      000007 4E               [12]  123 	orl	a,r6
      000008 70 01            [24]  124 	jnz	00102$
                                    125 ;	free.c:56: return;
      00000A 22               [24]  126 	ret
      00000B                        127 00102$:
                                    128 ;	free.c:58: prev_free = 0;
      00000B 7B 00            [12]  129 	mov	r3,#0x00
      00000D 7C 00            [12]  130 	mov	r4,#0x00
                                    131 ;	free.c:59: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h && h < ptr; prev_free = h, f = &(h->next_free), h = h->next_free); // Find adjacent blocks in free list
      00000F 90r00r00         [24]  132 	mov	dptr,#___sdcc_heap_free
      000012 E0               [24]  133 	movx	a,@dptr
      000013 F5*04            [12]  134 	mov	_free_sloc2_1_0,a
      000015 A3               [24]  135 	inc	dptr
      000016 E0               [24]  136 	movx	a,@dptr
      000017 F5*05            [12]  137 	mov	(_free_sloc2_1_0 + 1),a
      000019 75*00r00         [24]  138 	mov	_free_sloc0_1_0,#___sdcc_heap_free
      00001C 75*01s00         [24]  139 	mov	(_free_sloc0_1_0 + 1),#(___sdcc_heap_free >> 8)
      00001F                        140 00111$:
      00001F E5*04            [12]  141 	mov	a,_free_sloc2_1_0
      000021 45*05            [12]  142 	orl	a,(_free_sloc2_1_0 + 1)
      000023 60 39            [24]  143 	jz	00103$
      000025 8D*02            [24]  144 	mov	_free_sloc1_1_0,r5
      000027 8E*03            [24]  145 	mov	(_free_sloc1_1_0 + 1),r6
      000029 C3               [12]  146 	clr	c
      00002A E5*04            [12]  147 	mov	a,_free_sloc2_1_0
      00002C 95*02            [12]  148 	subb	a,_free_sloc1_1_0
      00002E E5*05            [12]  149 	mov	a,(_free_sloc2_1_0 + 1)
      000030 95*03            [12]  150 	subb	a,(_free_sloc1_1_0 + 1)
      000032 50 2A            [24]  151 	jnc	00103$
      000034 C0 05            [24]  152 	push	ar5
      000036 C0 06            [24]  153 	push	ar6
      000038 C0 07            [24]  154 	push	ar7
      00003A AB*04            [24]  155 	mov	r3,_free_sloc2_1_0
      00003C AC*05            [24]  156 	mov	r4,(_free_sloc2_1_0 + 1)
      00003E 74 02            [12]  157 	mov	a,#0x02
      000040 25*04            [12]  158 	add	a,_free_sloc2_1_0
      000042 FA               [12]  159 	mov	r2,a
      000043 E4               [12]  160 	clr	a
      000044 35*05            [12]  161 	addc	a,(_free_sloc2_1_0 + 1)
      000046 FF               [12]  162 	mov	r7,a
      000047 8A*00            [24]  163 	mov	_free_sloc0_1_0,r2
      000049 8F*01            [24]  164 	mov	(_free_sloc0_1_0 + 1),r7
      00004B 8A 82            [24]  165 	mov	dpl,r2
      00004D 8F 83            [24]  166 	mov	dph,r7
      00004F E0               [24]  167 	movx	a,@dptr
      000050 F5*04            [12]  168 	mov	_free_sloc2_1_0,a
      000052 A3               [24]  169 	inc	dptr
      000053 E0               [24]  170 	movx	a,@dptr
      000054 F5*05            [12]  171 	mov	(_free_sloc2_1_0 + 1),a
      000056 D0 07            [24]  172 	pop	ar7
      000058 D0 06            [24]  173 	pop	ar6
      00005A D0 05            [24]  174 	pop	ar5
      00005C 80 C1            [24]  175 	sjmp	00111$
      00005E                        176 00103$:
                                    177 ;	free.c:60: next_free = h;
      00005E 78r00            [12]  178 	mov	r0,#_free_next_free_65536_41
      000060 E5*04            [12]  179 	mov	a,_free_sloc2_1_0
      000062 F2               [24]  180 	movx	@r0,a
      000063 E5*05            [12]  181 	mov	a,(_free_sloc2_1_0 + 1)
      000065 08               [12]  182 	inc	r0
      000066 F2               [24]  183 	movx	@r0,a
                                    184 ;	free.c:62: h = (void HEAPSPACE *)((char HEAPSPACE *)(ptr) - offsetof(struct header, next_free));
      000067 ED               [12]  185 	mov	a,r5
      000068 24 FE            [12]  186 	add	a,#0xfe
      00006A FD               [12]  187 	mov	r5,a
      00006B EE               [12]  188 	mov	a,r6
      00006C 34 FF            [12]  189 	addc	a,#0xff
      00006E FE               [12]  190 	mov	r6,a
                                    191 ;	free.c:65: h->next_free = next_free;
      00006F 74 02            [12]  192 	mov	a,#0x02
      000071 2D               [12]  193 	add	a,r5
      000072 FA               [12]  194 	mov	r2,a
      000073 E4               [12]  195 	clr	a
      000074 3E               [12]  196 	addc	a,r6
      000075 FF               [12]  197 	mov	r7,a
      000076 8A 82            [24]  198 	mov	dpl,r2
      000078 8F 83            [24]  199 	mov	dph,r7
      00007A 78r00            [12]  200 	mov	r0,#_free_next_free_65536_41
      00007C E2               [24]  201 	movx	a,@r0
      00007D F0               [24]  202 	movx	@dptr,a
      00007E 08               [12]  203 	inc	r0
      00007F E2               [24]  204 	movx	a,@r0
      000080 A3               [24]  205 	inc	dptr
      000081 F0               [24]  206 	movx	@dptr,a
                                    207 ;	free.c:66: *f = h;
      000082 85*00 82         [24]  208 	mov	dpl,_free_sloc0_1_0
      000085 85*01 83         [24]  209 	mov	dph,(_free_sloc0_1_0 + 1)
      000088 ED               [12]  210 	mov	a,r5
      000089 F0               [24]  211 	movx	@dptr,a
      00008A EE               [12]  212 	mov	a,r6
      00008B A3               [24]  213 	inc	dptr
      00008C F0               [24]  214 	movx	@dptr,a
                                    215 ;	free.c:68: if(next_free == h->next) // Merge with next block
      00008D 8D 82            [24]  216 	mov	dpl,r5
      00008F 8E 83            [24]  217 	mov	dph,r6
      000091 E0               [24]  218 	movx	a,@dptr
      000092 F5*04            [12]  219 	mov	_free_sloc2_1_0,a
      000094 A3               [24]  220 	inc	dptr
      000095 E0               [24]  221 	movx	a,@dptr
      000096 F5*05            [12]  222 	mov	(_free_sloc2_1_0 + 1),a
      000098 78r00            [12]  223 	mov	r0,#_free_next_free_65536_41
      00009A E2               [24]  224 	movx	a,@r0
      00009B B5*04 07         [24]  225 	cjne	a,_free_sloc2_1_0,00153$
      00009E 08               [12]  226 	inc	r0
      00009F E2               [24]  227 	movx	a,@r0
      0000A0 B5*05 02         [24]  228 	cjne	a,(_free_sloc2_1_0 + 1),00153$
      0000A3 80 02            [24]  229 	sjmp	00154$
      0000A5                        230 00153$:
      0000A5 80 39            [24]  231 	sjmp	00105$
      0000A7                        232 00154$:
                                    233 ;	free.c:70: h->next_free = h->next->next_free;
      0000A7 C0 03            [24]  234 	push	ar3
      0000A9 C0 04            [24]  235 	push	ar4
      0000AB 85*04 82         [24]  236 	mov	dpl,_free_sloc2_1_0
      0000AE 85*05 83         [24]  237 	mov	dph,(_free_sloc2_1_0 + 1)
      0000B1 A3               [24]  238 	inc	dptr
      0000B2 A3               [24]  239 	inc	dptr
      0000B3 E0               [24]  240 	movx	a,@dptr
      0000B4 FB               [12]  241 	mov	r3,a
      0000B5 A3               [24]  242 	inc	dptr
      0000B6 E0               [24]  243 	movx	a,@dptr
      0000B7 FC               [12]  244 	mov	r4,a
      0000B8 8A 82            [24]  245 	mov	dpl,r2
      0000BA 8F 83            [24]  246 	mov	dph,r7
      0000BC EB               [12]  247 	mov	a,r3
      0000BD F0               [24]  248 	movx	@dptr,a
      0000BE EC               [12]  249 	mov	a,r4
      0000BF A3               [24]  250 	inc	dptr
      0000C0 F0               [24]  251 	movx	@dptr,a
                                    252 ;	free.c:71: h->next = h->next->next;
      0000C1 8D 82            [24]  253 	mov	dpl,r5
      0000C3 8E 83            [24]  254 	mov	dph,r6
      0000C5 E0               [24]  255 	movx	a,@dptr
      0000C6 FB               [12]  256 	mov	r3,a
      0000C7 A3               [24]  257 	inc	dptr
      0000C8 E0               [24]  258 	movx	a,@dptr
      0000C9 FC               [12]  259 	mov	r4,a
      0000CA 8B 82            [24]  260 	mov	dpl,r3
      0000CC 8C 83            [24]  261 	mov	dph,r4
      0000CE E0               [24]  262 	movx	a,@dptr
      0000CF FB               [12]  263 	mov	r3,a
      0000D0 A3               [24]  264 	inc	dptr
      0000D1 E0               [24]  265 	movx	a,@dptr
      0000D2 FC               [12]  266 	mov	r4,a
      0000D3 8D 82            [24]  267 	mov	dpl,r5
      0000D5 8E 83            [24]  268 	mov	dph,r6
      0000D7 EB               [12]  269 	mov	a,r3
      0000D8 F0               [24]  270 	movx	@dptr,a
      0000D9 EC               [12]  271 	mov	a,r4
      0000DA A3               [24]  272 	inc	dptr
      0000DB F0               [24]  273 	movx	@dptr,a
                                    274 ;	free.c:77: prev_free->next_free = h->next_free;
      0000DC D0 04            [24]  275 	pop	ar4
      0000DE D0 03            [24]  276 	pop	ar3
                                    277 ;	free.c:71: h->next = h->next->next;
      0000E0                        278 00105$:
                                    279 ;	free.c:74: if (prev_free && prev_free->next == h) // Merge with previous block
      0000E0 EB               [12]  280 	mov	a,r3
      0000E1 4C               [12]  281 	orl	a,r4
      0000E2 60 4B            [24]  282 	jz	00113$
      0000E4 C0 02            [24]  283 	push	ar2
      0000E6 C0 07            [24]  284 	push	ar7
      0000E8 8B 82            [24]  285 	mov	dpl,r3
      0000EA 8C 83            [24]  286 	mov	dph,r4
      0000EC E0               [24]  287 	movx	a,@dptr
      0000ED FA               [12]  288 	mov	r2,a
      0000EE A3               [24]  289 	inc	dptr
      0000EF E0               [24]  290 	movx	a,@dptr
      0000F0 FF               [12]  291 	mov	r7,a
      0000F1 EA               [12]  292 	mov	a,r2
      0000F2 B5 05 06         [24]  293 	cjne	a,ar5,00156$
      0000F5 EF               [12]  294 	mov	a,r7
      0000F6 B5 06 02         [24]  295 	cjne	a,ar6,00156$
      0000F9 80 05            [24]  296 	sjmp	00157$
      0000FB                        297 00156$:
      0000FB D0 07            [24]  298 	pop	ar7
      0000FD D0 02            [24]  299 	pop	ar2
      0000FF 22               [24]  300 	ret
      000100                        301 00157$:
      000100 D0 07            [24]  302 	pop	ar7
      000102 D0 02            [24]  303 	pop	ar2
                                    304 ;	free.c:76: prev_free->next = h->next;
      000104 8D 82            [24]  305 	mov	dpl,r5
      000106 8E 83            [24]  306 	mov	dph,r6
      000108 E0               [24]  307 	movx	a,@dptr
      000109 FD               [12]  308 	mov	r5,a
      00010A A3               [24]  309 	inc	dptr
      00010B E0               [24]  310 	movx	a,@dptr
      00010C FE               [12]  311 	mov	r6,a
      00010D 8B 82            [24]  312 	mov	dpl,r3
      00010F 8C 83            [24]  313 	mov	dph,r4
      000111 ED               [12]  314 	mov	a,r5
      000112 F0               [24]  315 	movx	@dptr,a
      000113 EE               [12]  316 	mov	a,r6
      000114 A3               [24]  317 	inc	dptr
      000115 F0               [24]  318 	movx	@dptr,a
                                    319 ;	free.c:77: prev_free->next_free = h->next_free;
      000116 74 02            [12]  320 	mov	a,#0x02
      000118 2B               [12]  321 	add	a,r3
      000119 FB               [12]  322 	mov	r3,a
      00011A E4               [12]  323 	clr	a
      00011B 3C               [12]  324 	addc	a,r4
      00011C FC               [12]  325 	mov	r4,a
      00011D 8A 82            [24]  326 	mov	dpl,r2
      00011F 8F 83            [24]  327 	mov	dph,r7
      000121 E0               [24]  328 	movx	a,@dptr
      000122 FA               [12]  329 	mov	r2,a
      000123 A3               [24]  330 	inc	dptr
      000124 E0               [24]  331 	movx	a,@dptr
      000125 FF               [12]  332 	mov	r7,a
      000126 8B 82            [24]  333 	mov	dpl,r3
      000128 8C 83            [24]  334 	mov	dph,r4
      00012A EA               [12]  335 	mov	a,r2
      00012B F0               [24]  336 	movx	@dptr,a
      00012C EF               [12]  337 	mov	a,r7
      00012D A3               [24]  338 	inc	dptr
      00012E F0               [24]  339 	movx	@dptr,a
      00012F                        340 00113$:
                                    341 ;	free.c:79: }
      00012F 22               [24]  342 	ret
                                    343 	.area CSEG    (CODE)
                                    344 	.area CONST   (CODE)
                                    345 	.area XINIT   (CODE)
                                    346 	.area CABS    (ABS,CODE)
