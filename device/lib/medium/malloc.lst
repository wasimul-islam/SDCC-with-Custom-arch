                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module malloc
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_init
                                     12 	.globl ___sdcc_heap_free
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
      000000                         33 _malloc_sloc0_1_0:
      000000                         34 	.ds 2
      000002                         35 _malloc_sloc1_1_0:
      000002                         36 	.ds 2
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
      000000                         57 _malloc_h_65536_43:
      000000                         58 	.ds 2
      000002                         59 _malloc_newheader_327680_47:
      000002                         60 	.ds 2
                                     61 ;--------------------------------------------------------
                                     62 ; uninitialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
      000000                         65 ___sdcc_heap_free::
      000000                         66 	.ds 2
                                     67 ;--------------------------------------------------------
                                     68 ; absolute external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XABS    (ABS,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; initialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XISEG   (XDATA)
                                     75 	.area HOME    (CODE)
                                     76 	.area GSINIT0 (CODE)
                                     77 	.area GSINIT1 (CODE)
                                     78 	.area GSINIT2 (CODE)
                                     79 	.area GSINIT3 (CODE)
                                     80 	.area GSINIT4 (CODE)
                                     81 	.area GSINIT5 (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area CSEG    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function '__sdcc_heap_init'
                                    103 ;------------------------------------------------------------
                                    104 ;	malloc.c:65: void __sdcc_heap_init(void)
                                    105 ;	-----------------------------------------
                                    106 ;	 function __sdcc_heap_init
                                    107 ;	-----------------------------------------
      000000                        108 ___sdcc_heap_init:
                           000007   109 	ar7 = 0x07
                           000006   110 	ar6 = 0x06
                           000005   111 	ar5 = 0x05
                           000004   112 	ar4 = 0x04
                           000003   113 	ar3 = 0x03
                           000002   114 	ar2 = 0x02
                           000001   115 	ar1 = 0x01
                           000000   116 	ar0 = 0x00
                                    117 ;	malloc.c:67: __sdcc_heap_free = HEAP_START;
      000000 90r00r00         [24]  118 	mov	dptr,#___sdcc_heap_free
      000003 74r00            [12]  119 	mov	a,#___sdcc_heap
      000005 F0               [24]  120 	movx	@dptr,a
      000006 74s00            [12]  121 	mov	a,#(___sdcc_heap >> 8)
      000008 A3               [24]  122 	inc	dptr
      000009 F0               [24]  123 	movx	@dptr,a
                                    124 ;	malloc.c:68: __sdcc_heap_free->next = HEAP_END;
      00000A 90r00r00         [24]  125 	mov	dptr,#___sdcc_heap_size
      00000D E4               [12]  126 	clr	a
      00000E 93               [24]  127 	movc	a,@a+dptr
      00000F FE               [12]  128 	mov	r6,a
      000010 74 01            [12]  129 	mov	a,#0x01
      000012 93               [24]  130 	movc	a,@a+dptr
      000013 FF               [12]  131 	mov	r7,a
      000014 1E               [12]  132 	dec	r6
      000015 BE FF 01         [24]  133 	cjne	r6,#0xff,00103$
      000018 1F               [12]  134 	dec	r7
      000019                        135 00103$:
      000019 EE               [12]  136 	mov	a,r6
      00001A 24r00            [12]  137 	add	a,#___sdcc_heap
      00001C FE               [12]  138 	mov	r6,a
      00001D EF               [12]  139 	mov	a,r7
      00001E 34s00            [12]  140 	addc	a,#(___sdcc_heap >> 8)
      000020 FF               [12]  141 	mov	r7,a
      000021 90r00r00         [24]  142 	mov	dptr,#___sdcc_heap
      000024 EE               [12]  143 	mov	a,r6
      000025 F0               [24]  144 	movx	@dptr,a
      000026 EF               [12]  145 	mov	a,r7
      000027 A3               [24]  146 	inc	dptr
      000028 F0               [24]  147 	movx	@dptr,a
                                    148 ;	malloc.c:69: __sdcc_heap_free->next_free = 0;
      000029 90r00r00         [24]  149 	mov	dptr,#___sdcc_heap_free
      00002C E0               [24]  150 	movx	a,@dptr
      00002D FE               [12]  151 	mov	r6,a
      00002E A3               [24]  152 	inc	dptr
      00002F E0               [24]  153 	movx	a,@dptr
      000030 FF               [12]  154 	mov	r7,a
      000031 8E 82            [24]  155 	mov	dpl,r6
      000033 8F 83            [24]  156 	mov	dph,r7
      000035 A3               [24]  157 	inc	dptr
      000036 A3               [24]  158 	inc	dptr
      000037 E4               [12]  159 	clr	a
      000038 F0               [24]  160 	movx	@dptr,a
      000039 A3               [24]  161 	inc	dptr
      00003A F0               [24]  162 	movx	@dptr,a
                                    163 ;	malloc.c:70: }
      00003B 22               [24]  164 	ret
                                    165 ;------------------------------------------------------------
                                    166 ;Allocation info for local variables in function 'malloc'
                                    167 ;------------------------------------------------------------
                                    168 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                                    169 ;sloc1                     Allocated with name '_malloc_sloc1_1_0'
                                    170 ;------------------------------------------------------------
                                    171 ;	malloc.c:73: void HEAPSPACE *malloc(size_t size)
                                    172 ;	-----------------------------------------
                                    173 ;	 function malloc
                                    174 ;	-----------------------------------------
      00003C                        175 _malloc:
      00003C AE 82            [24]  176 	mov	r6,dpl
      00003E AF 83            [24]  177 	mov	r7,dph
                                    178 ;	malloc.c:82: if(!__sdcc_heap_free)
      000040 90r00r00         [24]  179 	mov	dptr,#___sdcc_heap_free
      000043 E0               [24]  180 	movx	a,@dptr
      000044 F5 F0            [12]  181 	mov	b,a
      000046 A3               [24]  182 	inc	dptr
      000047 E0               [24]  183 	movx	a,@dptr
      000048 45 F0            [12]  184 	orl	a,b
      00004A 70 0B            [24]  185 	jnz	00102$
                                    186 ;	malloc.c:83: __sdcc_heap_init();
      00004C C0 07            [24]  187 	push	ar7
      00004E C0 06            [24]  188 	push	ar6
      000050 12r00r00         [24]  189 	lcall	___sdcc_heap_init
      000053 D0 06            [24]  190 	pop	ar6
      000055 D0 07            [24]  191 	pop	ar7
      000057                        192 00102$:
                                    193 ;	malloc.c:86: if(!size || size + offsetof(struct header, next_free) < size)
      000057 EE               [12]  194 	mov	a,r6
      000058 4F               [12]  195 	orl	a,r7
      000059 60 0E            [24]  196 	jz	00103$
      00005B 74 02            [12]  197 	mov	a,#0x02
      00005D 2E               [12]  198 	add	a,r6
      00005E FC               [12]  199 	mov	r4,a
      00005F E4               [12]  200 	clr	a
      000060 3F               [12]  201 	addc	a,r7
      000061 FD               [12]  202 	mov	r5,a
      000062 C3               [12]  203 	clr	c
      000063 EC               [12]  204 	mov	a,r4
      000064 9E               [12]  205 	subb	a,r6
      000065 ED               [12]  206 	mov	a,r5
      000066 9F               [12]  207 	subb	a,r7
      000067 50 04            [24]  208 	jnc	00104$
      000069                        209 00103$:
                                    210 ;	malloc.c:87: return(0);
      000069 90 00 00         [24]  211 	mov	dptr,#0x0000
      00006C 22               [24]  212 	ret
      00006D                        213 00104$:
                                    214 ;	malloc.c:88: size += offsetof(struct header, next_free);
      00006D 74 02            [12]  215 	mov	a,#0x02
      00006F 2E               [12]  216 	add	a,r6
      000070 FD               [12]  217 	mov	r5,a
      000071 E4               [12]  218 	clr	a
      000072 3F               [12]  219 	addc	a,r7
      000073 FC               [12]  220 	mov	r4,a
                                    221 ;	malloc.c:89: if(size < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
      000074 C3               [12]  222 	clr	c
      000075 ED               [12]  223 	mov	a,r5
      000076 94 04            [12]  224 	subb	a,#0x04
      000078 EC               [12]  225 	mov	a,r4
      000079 94 00            [12]  226 	subb	a,#0x00
      00007B 50 04            [24]  227 	jnc	00107$
                                    228 ;	malloc.c:90: size = sizeof(struct header);
      00007D 7D 04            [12]  229 	mov	r5,#0x04
      00007F 7C 00            [12]  230 	mov	r4,#0x00
      000081                        231 00107$:
                                    232 ;	malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
      000081 90r00r00         [24]  233 	mov	dptr,#___sdcc_heap_free
      000084 78r00            [12]  234 	mov	r0,#_malloc_h_65536_43
      000086 E0               [24]  235 	movx	a,@dptr
      000087 F2               [24]  236 	movx	@r0,a
      000088 A3               [24]  237 	inc	dptr
      000089 E0               [24]  238 	movx	a,@dptr
      00008A 08               [12]  239 	inc	r0
      00008B F2               [24]  240 	movx	@r0,a
      00008C 7Ar00            [12]  241 	mov	r2,#___sdcc_heap_free
      00008E 7Bs00            [12]  242 	mov	r3,#(___sdcc_heap_free >> 8)
      000090                        243 00115$:
      000090 78r00            [12]  244 	mov	r0,#_malloc_h_65536_43
      000092 E2               [24]  245 	movx	a,@r0
      000093 F5 F0            [12]  246 	mov	b,a
      000095 08               [12]  247 	inc	r0
      000096 E2               [24]  248 	movx	a,@r0
      000097 45 F0            [12]  249 	orl	a,b
      000099 70 03            [24]  250 	jnz	00158$
      00009B 02r01r99         [24]  251 	ljmp	00113$
      00009E                        252 00158$:
                                    253 ;	malloc.c:94: size_t blocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
      00009E C0 02            [24]  254 	push	ar2
      0000A0 C0 03            [24]  255 	push	ar3
      0000A2 78r00            [12]  256 	mov	r0,#_malloc_h_65536_43
      0000A4 E2               [24]  257 	movx	a,@r0
      0000A5 F5 82            [12]  258 	mov	dpl,a
      0000A7 08               [12]  259 	inc	r0
      0000A8 E2               [24]  260 	movx	a,@r0
      0000A9 F5 83            [12]  261 	mov	dph,a
      0000AB E0               [24]  262 	movx	a,@dptr
      0000AC F5*02            [12]  263 	mov	_malloc_sloc1_1_0,a
      0000AE A3               [24]  264 	inc	dptr
      0000AF E0               [24]  265 	movx	a,@dptr
      0000B0 F5*03            [12]  266 	mov	(_malloc_sloc1_1_0 + 1),a
      0000B2 AA*02            [24]  267 	mov	r2,_malloc_sloc1_1_0
      0000B4 AB*03            [24]  268 	mov	r3,(_malloc_sloc1_1_0 + 1)
      0000B6 78r00            [12]  269 	mov	r0,#_malloc_h_65536_43
      0000B8 E2               [24]  270 	movx	a,@r0
      0000B9 F5*00            [12]  271 	mov	_malloc_sloc0_1_0,a
      0000BB 08               [12]  272 	inc	r0
      0000BC E2               [24]  273 	movx	a,@r0
      0000BD F5*01            [12]  274 	mov	(_malloc_sloc0_1_0 + 1),a
      0000BF EA               [12]  275 	mov	a,r2
      0000C0 C3               [12]  276 	clr	c
      0000C1 95*00            [12]  277 	subb	a,_malloc_sloc0_1_0
      0000C3 FF               [12]  278 	mov	r7,a
      0000C4 EB               [12]  279 	mov	a,r3
      0000C5 95*01            [12]  280 	subb	a,(_malloc_sloc0_1_0 + 1)
      0000C7 FE               [12]  281 	mov	r6,a
                                    282 ;	malloc.c:95: if(blocksize >= size) // Found free block of sufficient size.
      0000C8 C3               [12]  283 	clr	c
      0000C9 EF               [12]  284 	mov	a,r7
      0000CA 9D               [12]  285 	subb	a,r5
      0000CB EE               [12]  286 	mov	a,r6
      0000CC 9C               [12]  287 	subb	a,r4
      0000CD D0 03            [24]  288 	pop	ar3
      0000CF D0 02            [24]  289 	pop	ar2
      0000D1 50 03            [24]  290 	jnc	00159$
      0000D3 02r01r7B         [24]  291 	ljmp	00116$
      0000D6                        292 00159$:
                                    293 ;	malloc.c:97: if(blocksize >= size + sizeof(struct header)) // It is worth creating a new free block
      0000D6 C0 02            [24]  294 	push	ar2
      0000D8 C0 03            [24]  295 	push	ar3
      0000DA 74 04            [12]  296 	mov	a,#0x04
      0000DC 2D               [12]  297 	add	a,r5
      0000DD FA               [12]  298 	mov	r2,a
      0000DE E4               [12]  299 	clr	a
      0000DF 3C               [12]  300 	addc	a,r4
      0000E0 FB               [12]  301 	mov	r3,a
      0000E1 C3               [12]  302 	clr	c
      0000E2 EF               [12]  303 	mov	a,r7
      0000E3 9A               [12]  304 	subb	a,r2
      0000E4 EE               [12]  305 	mov	a,r6
      0000E5 9B               [12]  306 	subb	a,r3
      0000E6 D0 03            [24]  307 	pop	ar3
      0000E8 D0 02            [24]  308 	pop	ar2
      0000EA 40 64            [24]  309 	jc	00109$
                                    310 ;	malloc.c:99: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + size);
      0000EC ED               [12]  311 	mov	a,r5
      0000ED 25*00            [12]  312 	add	a,_malloc_sloc0_1_0
      0000EF FE               [12]  313 	mov	r6,a
      0000F0 EC               [12]  314 	mov	a,r4
      0000F1 35*01            [12]  315 	addc	a,(_malloc_sloc0_1_0 + 1)
      0000F3 FF               [12]  316 	mov	r7,a
      0000F4 78r02            [12]  317 	mov	r0,#_malloc_newheader_327680_47
      0000F6 EE               [12]  318 	mov	a,r6
      0000F7 F2               [24]  319 	movx	@r0,a
      0000F8 EF               [12]  320 	mov	a,r7
      0000F9 08               [12]  321 	inc	r0
      0000FA F2               [24]  322 	movx	@r0,a
                                    323 ;	malloc.c:100: newheader->next = h->next;
      0000FB 78r02            [12]  324 	mov	r0,#_malloc_newheader_327680_47
      0000FD E2               [24]  325 	movx	a,@r0
      0000FE F5 82            [12]  326 	mov	dpl,a
      000100 08               [12]  327 	inc	r0
      000101 E2               [24]  328 	movx	a,@r0
      000102 F5 83            [12]  329 	mov	dph,a
      000104 E5*02            [12]  330 	mov	a,_malloc_sloc1_1_0
      000106 F0               [24]  331 	movx	@dptr,a
      000107 E5*03            [12]  332 	mov	a,(_malloc_sloc1_1_0 + 1)
      000109 A3               [24]  333 	inc	dptr
      00010A F0               [24]  334 	movx	@dptr,a
                                    335 ;	malloc.c:101: newheader->next_free = h->next_free;
      00010B 78r02            [12]  336 	mov	r0,#_malloc_newheader_327680_47
      00010D E2               [24]  337 	movx	a,@r0
      00010E 24 02            [12]  338 	add	a,#0x02
      000110 FE               [12]  339 	mov	r6,a
      000111 08               [12]  340 	inc	r0
      000112 E2               [24]  341 	movx	a,@r0
      000113 34 00            [12]  342 	addc	a,#0x00
      000115 FF               [12]  343 	mov	r7,a
      000116 78r00            [12]  344 	mov	r0,#_malloc_h_65536_43
      000118 E2               [24]  345 	movx	a,@r0
      000119 24 02            [12]  346 	add	a,#0x02
      00011B F5 82            [12]  347 	mov	dpl,a
      00011D 08               [12]  348 	inc	r0
      00011E E2               [24]  349 	movx	a,@r0
      00011F 34 00            [12]  350 	addc	a,#0x00
      000121 F5 83            [12]  351 	mov	dph,a
      000123 E0               [24]  352 	movx	a,@dptr
      000124 FC               [12]  353 	mov	r4,a
      000125 A3               [24]  354 	inc	dptr
      000126 E0               [24]  355 	movx	a,@dptr
      000127 FD               [12]  356 	mov	r5,a
      000128 8E 82            [24]  357 	mov	dpl,r6
      00012A 8F 83            [24]  358 	mov	dph,r7
      00012C EC               [12]  359 	mov	a,r4
      00012D F0               [24]  360 	movx	@dptr,a
      00012E ED               [12]  361 	mov	a,r5
      00012F A3               [24]  362 	inc	dptr
      000130 F0               [24]  363 	movx	@dptr,a
                                    364 ;	malloc.c:102: *f = newheader;
      000131 8A 82            [24]  365 	mov	dpl,r2
      000133 8B 83            [24]  366 	mov	dph,r3
      000135 78r02            [12]  367 	mov	r0,#_malloc_newheader_327680_47
      000137 E2               [24]  368 	movx	a,@r0
      000138 F0               [24]  369 	movx	@dptr,a
      000139 08               [12]  370 	inc	r0
      00013A E2               [24]  371 	movx	a,@r0
      00013B A3               [24]  372 	inc	dptr
      00013C F0               [24]  373 	movx	@dptr,a
                                    374 ;	malloc.c:103: h->next = newheader;
      00013D 78r00            [12]  375 	mov	r0,#_malloc_h_65536_43
      00013F E2               [24]  376 	movx	a,@r0
      000140 F5 82            [12]  377 	mov	dpl,a
      000142 08               [12]  378 	inc	r0
      000143 E2               [24]  379 	movx	a,@r0
      000144 F5 83            [12]  380 	mov	dph,a
      000146 79r02            [12]  381 	mov	r1,#_malloc_newheader_327680_47
      000148 E3               [24]  382 	movx	a,@r1
      000149 F0               [24]  383 	movx	@dptr,a
      00014A 09               [12]  384 	inc	r1
      00014B E3               [24]  385 	movx	a,@r1
      00014C A3               [24]  386 	inc	dptr
      00014D F0               [24]  387 	movx	@dptr,a
      00014E 80 1B            [24]  388 	sjmp	00110$
      000150                        389 00109$:
                                    390 ;	malloc.c:106: *f = h->next_free;
      000150 78r00            [12]  391 	mov	r0,#_malloc_h_65536_43
      000152 E2               [24]  392 	movx	a,@r0
      000153 24 02            [12]  393 	add	a,#0x02
      000155 F5 82            [12]  394 	mov	dpl,a
      000157 08               [12]  395 	inc	r0
      000158 E2               [24]  396 	movx	a,@r0
      000159 34 00            [12]  397 	addc	a,#0x00
      00015B F5 83            [12]  398 	mov	dph,a
      00015D E0               [24]  399 	movx	a,@dptr
      00015E FE               [12]  400 	mov	r6,a
      00015F A3               [24]  401 	inc	dptr
      000160 E0               [24]  402 	movx	a,@dptr
      000161 FF               [12]  403 	mov	r7,a
      000162 8A 82            [24]  404 	mov	dpl,r2
      000164 8B 83            [24]  405 	mov	dph,r3
      000166 EE               [12]  406 	mov	a,r6
      000167 F0               [24]  407 	movx	@dptr,a
      000168 EF               [12]  408 	mov	a,r7
      000169 A3               [24]  409 	inc	dptr
      00016A F0               [24]  410 	movx	@dptr,a
      00016B                        411 00110$:
                                    412 ;	malloc.c:108: return(&(h->next_free));
      00016B 78r00            [12]  413 	mov	r0,#_malloc_h_65536_43
      00016D E2               [24]  414 	movx	a,@r0
      00016E 24 02            [12]  415 	add	a,#0x02
      000170 FE               [12]  416 	mov	r6,a
      000171 08               [12]  417 	inc	r0
      000172 E2               [24]  418 	movx	a,@r0
      000173 34 00            [12]  419 	addc	a,#0x00
      000175 FF               [12]  420 	mov	r7,a
      000176 8E 82            [24]  421 	mov	dpl,r6
      000178 8F 83            [24]  422 	mov	dph,r7
      00017A 22               [24]  423 	ret
      00017B                        424 00116$:
                                    425 ;	malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
      00017B 78r00            [12]  426 	mov	r0,#_malloc_h_65536_43
      00017D E2               [24]  427 	movx	a,@r0
      00017E 24 02            [12]  428 	add	a,#0x02
      000180 FE               [12]  429 	mov	r6,a
      000181 08               [12]  430 	inc	r0
      000182 E2               [24]  431 	movx	a,@r0
      000183 34 00            [12]  432 	addc	a,#0x00
      000185 FF               [12]  433 	mov	r7,a
      000186 8E 02            [24]  434 	mov	ar2,r6
      000188 8F 03            [24]  435 	mov	ar3,r7
      00018A 8E 82            [24]  436 	mov	dpl,r6
      00018C 8F 83            [24]  437 	mov	dph,r7
      00018E 78r00            [12]  438 	mov	r0,#_malloc_h_65536_43
      000190 E0               [24]  439 	movx	a,@dptr
      000191 F2               [24]  440 	movx	@r0,a
      000192 A3               [24]  441 	inc	dptr
      000193 E0               [24]  442 	movx	a,@dptr
      000194 08               [12]  443 	inc	r0
      000195 F2               [24]  444 	movx	@r0,a
      000196 02r00r90         [24]  445 	ljmp	00115$
      000199                        446 00113$:
                                    447 ;	malloc.c:112: return(0);
      000199 90 00 00         [24]  448 	mov	dptr,#0x0000
                                    449 ;	malloc.c:113: }
      00019C 22               [24]  450 	ret
                                    451 	.area CSEG    (CODE)
                                    452 	.area CONST   (CODE)
                                    453 	.area XINIT   (CODE)
                                    454 	.area CABS    (ABS,CODE)
