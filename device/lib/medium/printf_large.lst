                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl __print_format_PARM_4
                                     13 	.globl __print_format_PARM_3
                                     14 	.globl __print_format_PARM_2
                                     15 	.globl __print_format
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 __print_format_sloc0_1_0:
      000000                         36 	.ds 3
      000003                         37 __print_format_sloc1_1_0:
      000003                         38 	.ds 1
      000004                         39 __print_format_sloc2_1_0:
      000004                         40 	.ds 2
      000006                         41 __print_format_sloc3_1_0:
      000006                         42 	.ds 4
      00000A                         43 __print_format_sloc4_1_0:
      00000A                         44 	.ds 2
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram
                                     47 ;--------------------------------------------------------
                                     48 	.area	OSEG    (OVR,DATA)
      000000                         49 _calculate_digit_ul_65536_74:
      000000                         50 	.ds 4
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
      000000                         68 _lower_case:
      000000                         69 	.ds 1
      000001                         70 _output_char:
      000001                         71 	.ds 2
      000003                         72 _p:
      000003                         73 	.ds 3
      000006                         74 _value:
      000006                         75 	.ds 5
      00000B                         76 _charsOutputted:
      00000B                         77 	.ds 2
      00000D                         78 __print_format_PARM_2:
      00000D                         79 	.ds 3
      000010                         80 __print_format_PARM_3:
      000010                         81 	.ds 3
      000013                         82 __print_format_PARM_4:
      000013                         83 	.ds 1
      000014                         84 __print_format_left_justify_65536_78:
      000014                         85 	.ds 1
      000015                         86 __print_format_zero_padding_65536_78:
      000015                         87 	.ds 1
      000016                         88 __print_format_prefix_sign_65536_78:
      000016                         89 	.ds 1
      000017                         90 __print_format_prefix_space_65536_78:
      000017                         91 	.ds 1
      000018                         92 __print_format_signed_argument_65536_78:
      000018                         93 	.ds 1
      000019                         94 __print_format_char_argument_65536_78:
      000019                         95 	.ds 1
      00001A                         96 __print_format_long_argument_65536_78:
      00001A                         97 	.ds 1
      00001B                         98 __print_format_float_argument_65536_78:
      00001B                         99 	.ds 1
      00001C                        100 __print_format_lsd_65536_78:
      00001C                        101 	.ds 1
      00001D                        102 __print_format_radix_65536_78:
      00001D                        103 	.ds 1
      00001E                        104 __print_format_length_65536_78:
      00001E                        105 	.ds 2
      000020                        106 __print_format_store_262144_99:
      000020                        107 	.ds 6
                                    108 ;--------------------------------------------------------
                                    109 ; uninitialized external ram data
                                    110 ;--------------------------------------------------------
                                    111 	.area XSEG    (XDATA)
                                    112 ;--------------------------------------------------------
                                    113 ; absolute external ram data
                                    114 ;--------------------------------------------------------
                                    115 	.area XABS    (ABS,XDATA)
                                    116 ;--------------------------------------------------------
                                    117 ; initialized external ram data
                                    118 ;--------------------------------------------------------
                                    119 	.area XISEG   (XDATA)
                                    120 	.area HOME    (CODE)
                                    121 	.area GSINIT0 (CODE)
                                    122 	.area GSINIT1 (CODE)
                                    123 	.area GSINIT2 (CODE)
                                    124 	.area GSINIT3 (CODE)
                                    125 	.area GSINIT4 (CODE)
                                    126 	.area GSINIT5 (CODE)
                                    127 	.area GSINIT  (CODE)
                                    128 	.area GSFINAL (CODE)
                                    129 	.area CSEG    (CODE)
                                    130 ;--------------------------------------------------------
                                    131 ; global & static initialisations
                                    132 ;--------------------------------------------------------
                                    133 	.area HOME    (CODE)
                                    134 	.area GSINIT  (CODE)
                                    135 	.area GSFINAL (CODE)
                                    136 	.area GSINIT  (CODE)
                                    137 ;--------------------------------------------------------
                                    138 ; Home
                                    139 ;--------------------------------------------------------
                                    140 	.area HOME    (CODE)
                                    141 	.area HOME    (CODE)
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CSEG    (CODE)
                                    146 ;------------------------------------------------------------
                                    147 ;Allocation info for local variables in function '_output_char'
                                    148 ;------------------------------------------------------------
                                    149 ;	printf_large.c:105: _output_char (unsigned char c)
                                    150 ;	-----------------------------------------
                                    151 ;	 function _output_char
                                    152 ;	-----------------------------------------
      000000                        153 __output_char:
                           000007   154 	ar7 = 0x07
                           000006   155 	ar6 = 0x06
                           000005   156 	ar5 = 0x05
                           000004   157 	ar4 = 0x04
                           000003   158 	ar3 = 0x03
                           000002   159 	ar2 = 0x02
                           000001   160 	ar1 = 0x01
                           000000   161 	ar0 = 0x00
      000000 AF 82            [24]  162 	mov	r7,dpl
                                    163 ;	printf_large.c:107: output_char( c, p );
      000002 78r03            [12]  164 	mov	r0,#_p
      000004 E2               [24]  165 	movx	a,@r0
      000005 C0 E0            [24]  166 	push	acc
      000007 08               [12]  167 	inc	r0
      000008 E2               [24]  168 	movx	a,@r0
      000009 C0 E0            [24]  169 	push	acc
      00000B 08               [12]  170 	inc	r0
      00000C E2               [24]  171 	movx	a,@r0
      00000D C0 E0            [24]  172 	push	acc
      00000F 12r00r14         [24]  173 	lcall	00103$
      000012 80 0C            [24]  174 	sjmp	00104$
      000014                        175 00103$:
      000014 78r01            [12]  176 	mov	r0,#_output_char
      000016 E2               [24]  177 	movx	a,@r0
      000017 C0 E0            [24]  178 	push	acc
      000019 08               [12]  179 	inc	r0
      00001A E2               [24]  180 	movx	a,@r0
      00001B C0 E0            [24]  181 	push	acc
      00001D 8F 82            [24]  182 	mov	dpl,r7
      00001F 22               [24]  183 	ret
      000020                        184 00104$:
      000020 15 81            [12]  185 	dec	sp
      000022 15 81            [12]  186 	dec	sp
      000024 15 81            [12]  187 	dec	sp
                                    188 ;	printf_large.c:108: charsOutputted++;
      000026 78r0B            [12]  189 	mov	r0,#_charsOutputted
      000028 E2               [24]  190 	movx	a,@r0
      000029 24 01            [12]  191 	add	a,#0x01
      00002B F2               [24]  192 	movx	@r0,a
      00002C 08               [12]  193 	inc	r0
      00002D E2               [24]  194 	movx	a,@r0
      00002E 34 00            [12]  195 	addc	a,#0x00
      000030 F2               [24]  196 	movx	@r0,a
                                    197 ;	printf_large.c:109: }
      000031 22               [24]  198 	ret
                                    199 ;------------------------------------------------------------
                                    200 ;Allocation info for local variables in function 'output_digit'
                                    201 ;------------------------------------------------------------
                                    202 ;c                         Allocated to registers r7 
                                    203 ;------------------------------------------------------------
                                    204 ;	printf_large.c:130: output_digit (unsigned char n)
                                    205 ;	-----------------------------------------
                                    206 ;	 function output_digit
                                    207 ;	-----------------------------------------
      000032                        208 _output_digit:
      000032 AF 82            [24]  209 	mov	r7,dpl
                                    210 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000034 74 30            [12]  211 	mov	a,#0x30
      000036 2F               [12]  212 	add	a,r7
                                    213 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000037 FF               [12]  214 	mov  r7,a
      000038 24 C6            [12]  215 	add	a,#0xff - 0x39
      00003A 50 0C            [24]  216 	jnc	00104$
                                    217 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      00003C 74 07            [12]  218 	mov	a,#0x07
      00003E 2F               [12]  219 	add	a,r7
      00003F FF               [12]  220 	mov	r7,a
                                    221 ;	printf_large.c:137: if (lower_case)
      000040 78r00            [12]  222 	mov	r0,#_lower_case
      000042 E2               [24]  223 	movx	a,@r0
      000043 60 03            [24]  224 	jz	00104$
                                    225 ;	printf_large.c:138: c = tolower(c);
      000045 43 07 20         [24]  226 	orl	ar7,#0x20
      000048                        227 00104$:
                                    228 ;	printf_large.c:140: _output_char( c );
      000048 8F 82            [24]  229 	mov	dpl,r7
                                    230 ;	printf_large.c:141: }
      00004A 02r00r00         [24]  231 	ljmp	__output_char
                                    232 ;------------------------------------------------------------
                                    233 ;Allocation info for local variables in function 'output_2digits'
                                    234 ;------------------------------------------------------------
                                    235 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    236 ;	-----------------------------------------
                                    237 ;	 function output_2digits
                                    238 ;	-----------------------------------------
      00004D                        239 _output_2digits:
                                    240 ;	printf_large.c:159: output_digit( b>>4   );
      00004D E5 82            [12]  241 	mov	a,dpl
      00004F FF               [12]  242 	mov	r7,a
      000050 C4               [12]  243 	swap	a
      000051 54 0F            [12]  244 	anl	a,#0x0f
      000053 F5 82            [12]  245 	mov	dpl,a
      000055 C0 07            [24]  246 	push	ar7
      000057 12r00r32         [24]  247 	lcall	_output_digit
      00005A D0 07            [24]  248 	pop	ar7
                                    249 ;	printf_large.c:160: output_digit( b&0x0F );
      00005C 74 0F            [12]  250 	mov	a,#0x0f
      00005E 5F               [12]  251 	anl	a,r7
      00005F F5 82            [12]  252 	mov	dpl,a
                                    253 ;	printf_large.c:161: }
      000061 02r00r32         [24]  254 	ljmp	_output_digit
                                    255 ;------------------------------------------------------------
                                    256 ;Allocation info for local variables in function 'calculate_digit'
                                    257 ;------------------------------------------------------------
                                    258 ;ul                        Allocated with name '_calculate_digit_ul_65536_74'
                                    259 ;b4                        Allocated to registers r5 
                                    260 ;i                         Allocated to registers r6 
                                    261 ;------------------------------------------------------------
                                    262 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    263 ;	-----------------------------------------
                                    264 ;	 function calculate_digit
                                    265 ;	-----------------------------------------
      000064                        266 _calculate_digit:
      000064 AF 82            [24]  267 	mov	r7,dpl
                                    268 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000066 78r06            [12]  269 	mov	r0,#_value
      000068 E2               [24]  270 	movx	a,@r0
      000069 F5*00            [12]  271 	mov	_calculate_digit_ul_65536_74,a
      00006B 08               [12]  272 	inc	r0
      00006C E2               [24]  273 	movx	a,@r0
      00006D F5*01            [12]  274 	mov	(_calculate_digit_ul_65536_74 + 1),a
      00006F 08               [12]  275 	inc	r0
      000070 E2               [24]  276 	movx	a,@r0
      000071 F5*02            [12]  277 	mov	(_calculate_digit_ul_65536_74 + 2),a
      000073 08               [12]  278 	inc	r0
      000074 E2               [24]  279 	movx	a,@r0
      000075 F5*03            [12]  280 	mov	(_calculate_digit_ul_65536_74 + 3),a
                                    281 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000077 78r0A            [12]  282 	mov	r0,#(_value + 0x0004)
      000079 E2               [24]  283 	movx	a,@r0
      00007A FA               [12]  284 	mov	r2,a
                                    285 ;	printf_large.c:195: do
      00007B 7E 20            [12]  286 	mov	r6,#0x20
      00007D                        287 00103$:
                                    288 ;	printf_large.c:197: b4 = (b4 << 1);
      00007D 8A 05            [24]  289 	mov	ar5,r2
      00007F ED               [12]  290 	mov	a,r5
      000080 2D               [12]  291 	add	a,r5
      000081 FD               [12]  292 	mov	r5,a
                                    293 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      000082 E5*03            [12]  294 	mov	a,(_calculate_digit_ul_65536_74 + 3)
      000084 23               [12]  295 	rl	a
      000085 54 01            [12]  296 	anl	a,#0x01
      000087 4D               [12]  297 	orl	a,r5
      000088 FA               [12]  298 	mov	r2,a
                                    299 ;	printf_large.c:199: ul <<= 1;
      000089 E5*00            [12]  300 	mov	a,_calculate_digit_ul_65536_74
      00008B 25*00            [12]  301 	add	a,_calculate_digit_ul_65536_74
      00008D F5*00            [12]  302 	mov	_calculate_digit_ul_65536_74,a
      00008F E5*01            [12]  303 	mov	a,(_calculate_digit_ul_65536_74 + 1)
      000091 33               [12]  304 	rlc	a
      000092 F5*01            [12]  305 	mov	(_calculate_digit_ul_65536_74 + 1),a
      000094 E5*02            [12]  306 	mov	a,(_calculate_digit_ul_65536_74 + 2)
      000096 33               [12]  307 	rlc	a
      000097 F5*02            [12]  308 	mov	(_calculate_digit_ul_65536_74 + 2),a
      000099 E5*03            [12]  309 	mov	a,(_calculate_digit_ul_65536_74 + 3)
      00009B 33               [12]  310 	rlc	a
      00009C F5*03            [12]  311 	mov	(_calculate_digit_ul_65536_74 + 3),a
                                    312 ;	printf_large.c:201: if (radix <= b4 )
      00009E C3               [12]  313 	clr	c
      00009F EA               [12]  314 	mov	a,r2
      0000A0 9F               [12]  315 	subb	a,r7
      0000A1 40 07            [24]  316 	jc	00104$
                                    317 ;	printf_large.c:203: b4 -= radix;
      0000A3 EA               [12]  318 	mov	a,r2
      0000A4 C3               [12]  319 	clr	c
      0000A5 9F               [12]  320 	subb	a,r7
      0000A6 FA               [12]  321 	mov	r2,a
                                    322 ;	printf_large.c:204: ul |= 1;
      0000A7 43*00 01         [24]  323 	orl	_calculate_digit_ul_65536_74,#0x01
      0000AA                        324 00104$:
                                    325 ;	printf_large.c:206: } while (--i);
      0000AA DE D1            [24]  326 	djnz	r6,00103$
                                    327 ;	printf_large.c:207: value.ul = ul;
      0000AC 78r06            [12]  328 	mov	r0,#_value
      0000AE E5*00            [12]  329 	mov	a,_calculate_digit_ul_65536_74
      0000B0 F2               [24]  330 	movx	@r0,a
      0000B1 08               [12]  331 	inc	r0
      0000B2 E5*01            [12]  332 	mov	a,(_calculate_digit_ul_65536_74 + 1)
      0000B4 F2               [24]  333 	movx	@r0,a
      0000B5 08               [12]  334 	inc	r0
      0000B6 E5*02            [12]  335 	mov	a,(_calculate_digit_ul_65536_74 + 2)
      0000B8 F2               [24]  336 	movx	@r0,a
      0000B9 08               [12]  337 	inc	r0
      0000BA E5*03            [12]  338 	mov	a,(_calculate_digit_ul_65536_74 + 3)
      0000BC F2               [24]  339 	movx	@r0,a
                                    340 ;	printf_large.c:208: value.byte[4] = b4;
      0000BD 78r0A            [12]  341 	mov	r0,#(_value + 0x0004)
      0000BF EA               [12]  342 	mov	a,r2
      0000C0 F2               [24]  343 	movx	@r0,a
                                    344 ;	printf_large.c:209: }
      0000C1 22               [24]  345 	ret
                                    346 ;------------------------------------------------------------
                                    347 ;Allocation info for local variables in function '_print_format'
                                    348 ;------------------------------------------------------------
                                    349 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                    350 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                    351 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                    352 ;sloc3                     Allocated with name '__print_format_sloc3_1_0'
                                    353 ;sloc4                     Allocated with name '__print_format_sloc4_1_0'
                                    354 ;------------------------------------------------------------
                                    355 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    356 ;	-----------------------------------------
                                    357 ;	 function _print_format
                                    358 ;	-----------------------------------------
      0000C2                        359 __print_format:
      0000C2 AE 82            [24]  360 	mov	r6,dpl
      0000C4 AF 83            [24]  361 	mov	r7,dph
                                    362 ;	printf_large.c:461: output_char = pfn;
      0000C6 78r01            [12]  363 	mov	r0,#_output_char
      0000C8 EE               [12]  364 	mov	a,r6
      0000C9 F2               [24]  365 	movx	@r0,a
      0000CA EF               [12]  366 	mov	a,r7
      0000CB 08               [12]  367 	inc	r0
      0000CC F2               [24]  368 	movx	@r0,a
                                    369 ;	printf_large.c:462: p = pvoid;
      0000CD 78r0D            [12]  370 	mov	r0,#__print_format_PARM_2
      0000CF E2               [24]  371 	movx	a,@r0
      0000D0 FD               [12]  372 	mov	r5,a
      0000D1 08               [12]  373 	inc	r0
      0000D2 E2               [24]  374 	movx	a,@r0
      0000D3 FE               [12]  375 	mov	r6,a
      0000D4 08               [12]  376 	inc	r0
      0000D5 E2               [24]  377 	movx	a,@r0
      0000D6 FF               [12]  378 	mov	r7,a
      0000D7 78r03            [12]  379 	mov	r0,#_p
      0000D9 ED               [12]  380 	mov	a,r5
      0000DA F2               [24]  381 	movx	@r0,a
      0000DB EE               [12]  382 	mov	a,r6
      0000DC 08               [12]  383 	inc	r0
      0000DD F2               [24]  384 	movx	@r0,a
      0000DE EF               [12]  385 	mov	a,r7
      0000DF 08               [12]  386 	inc	r0
      0000E0 F2               [24]  387 	movx	@r0,a
                                    388 ;	printf_large.c:466: charsOutputted = 0;
      0000E1 78r0B            [12]  389 	mov	r0,#_charsOutputted
      0000E3 E4               [12]  390 	clr	a
      0000E4 F2               [24]  391 	movx	@r0,a
      0000E5 08               [12]  392 	inc	r0
      0000E6 F2               [24]  393 	movx	@r0,a
                                    394 ;	printf_large.c:475: while( c=*format++ )
      0000E7                        395 00243$:
      0000E7 78r10            [12]  396 	mov	r0,#__print_format_PARM_3
      0000E9 E2               [24]  397 	movx	a,@r0
      0000EA FD               [12]  398 	mov	r5,a
      0000EB 08               [12]  399 	inc	r0
      0000EC E2               [24]  400 	movx	a,@r0
      0000ED FE               [12]  401 	mov	r6,a
      0000EE 08               [12]  402 	inc	r0
      0000EF E2               [24]  403 	movx	a,@r0
      0000F0 FF               [12]  404 	mov	r7,a
      0000F1 8D 82            [24]  405 	mov	dpl,r5
      0000F3 8E 83            [24]  406 	mov	dph,r6
      0000F5 8F F0            [24]  407 	mov	b,r7
      0000F7 12r00r00         [24]  408 	lcall	__gptrget
      0000FA FC               [12]  409 	mov	r4,a
      0000FB 78r10            [12]  410 	mov	r0,#__print_format_PARM_3
      0000FD 74 01            [12]  411 	mov	a,#0x01
      0000FF 2D               [12]  412 	add	a,r5
      000100 F2               [24]  413 	movx	@r0,a
      000101 E4               [12]  414 	clr	a
      000102 3E               [12]  415 	addc	a,r6
      000103 08               [12]  416 	inc	r0
      000104 F2               [24]  417 	movx	@r0,a
      000105 EF               [12]  418 	mov	a,r7
      000106 08               [12]  419 	inc	r0
      000107 F2               [24]  420 	movx	@r0,a
      000108 EC               [12]  421 	mov	a,r4
      000109 FF               [12]  422 	mov	r7,a
      00010A 70 03            [24]  423 	jnz	00664$
      00010C 02r08r4A         [24]  424 	ljmp	00245$
      00010F                        425 00664$:
                                    426 ;	printf_large.c:477: if ( c=='%' )
      00010F BF 25 02         [24]  427 	cjne	r7,#0x25,00665$
      000112 80 03            [24]  428 	sjmp	00666$
      000114                        429 00665$:
      000114 02r08r42         [24]  430 	ljmp	00241$
      000117                        431 00666$:
                                    432 ;	printf_large.c:479: left_justify    = 0;
      000117 78r14            [12]  433 	mov	r0,#__print_format_left_justify_65536_78
      000119 E4               [12]  434 	clr	a
      00011A F2               [24]  435 	movx	@r0,a
                                    436 ;	printf_large.c:480: zero_padding    = 0;
      00011B 78r15            [12]  437 	mov	r0,#__print_format_zero_padding_65536_78
      00011D F2               [24]  438 	movx	@r0,a
                                    439 ;	printf_large.c:481: prefix_sign     = 0;
      00011E 78r16            [12]  440 	mov	r0,#__print_format_prefix_sign_65536_78
      000120 F2               [24]  441 	movx	@r0,a
                                    442 ;	printf_large.c:482: prefix_space    = 0;
      000121 78r17            [12]  443 	mov	r0,#__print_format_prefix_space_65536_78
      000123 F2               [24]  444 	movx	@r0,a
                                    445 ;	printf_large.c:483: signed_argument = 0;
      000124 78r18            [12]  446 	mov	r0,#__print_format_signed_argument_65536_78
      000126 F2               [24]  447 	movx	@r0,a
                                    448 ;	printf_large.c:484: char_argument   = 0;
      000127 78r19            [12]  449 	mov	r0,#__print_format_char_argument_65536_78
      000129 F2               [24]  450 	movx	@r0,a
                                    451 ;	printf_large.c:485: long_argument   = 0;
      00012A 78r1A            [12]  452 	mov	r0,#__print_format_long_argument_65536_78
      00012C F2               [24]  453 	movx	@r0,a
                                    454 ;	printf_large.c:486: float_argument  = 0;
      00012D 78r1B            [12]  455 	mov	r0,#__print_format_float_argument_65536_78
      00012F F2               [24]  456 	movx	@r0,a
                                    457 ;	printf_large.c:487: radix           = 0;
      000130 78r1D            [12]  458 	mov	r0,#__print_format_radix_65536_78
      000132 F2               [24]  459 	movx	@r0,a
                                    460 ;	printf_large.c:488: width           = 0;
      000133 F5*0A            [12]  461 	mov	__print_format_sloc4_1_0,a
      000135 F5*0B            [12]  462 	mov	(__print_format_sloc4_1_0 + 1),a
                                    463 ;	printf_large.c:489: decimals        = -1;
      000137 7F FF            [12]  464 	mov	r7,#0xff
      000139 7D FF            [12]  465 	mov	r5,#0xff
                                    466 ;	printf_large.c:491: get_conversion_spec:
      00013B 78r10            [12]  467 	mov	r0,#__print_format_PARM_3
      00013D E2               [24]  468 	movx	a,@r0
      00013E F5*00            [12]  469 	mov	__print_format_sloc0_1_0,a
      000140 08               [12]  470 	inc	r0
      000141 E2               [24]  471 	movx	a,@r0
      000142 F5*01            [12]  472 	mov	(__print_format_sloc0_1_0 + 1),a
      000144 08               [12]  473 	inc	r0
      000145 E2               [24]  474 	movx	a,@r0
      000146 F5*02            [12]  475 	mov	(__print_format_sloc0_1_0 + 2),a
      000148                        476 00101$:
                                    477 ;	printf_large.c:493: c = *format++;
      000148 85*00 82         [24]  478 	mov	dpl,__print_format_sloc0_1_0
      00014B 85*01 83         [24]  479 	mov	dph,(__print_format_sloc0_1_0 + 1)
      00014E 85*02 F0         [24]  480 	mov	b,(__print_format_sloc0_1_0 + 2)
      000151 12r00r00         [24]  481 	lcall	__gptrget
      000154 F5*03            [12]  482 	mov	__print_format_sloc1_1_0,a
      000156 A3               [24]  483 	inc	dptr
      000157 85 82*00         [24]  484 	mov	__print_format_sloc0_1_0,dpl
      00015A 85 83*01         [24]  485 	mov	(__print_format_sloc0_1_0 + 1),dph
      00015D 78r10            [12]  486 	mov	r0,#__print_format_PARM_3
      00015F E5*00            [12]  487 	mov	a,__print_format_sloc0_1_0
      000161 F2               [24]  488 	movx	@r0,a
      000162 E5*01            [12]  489 	mov	a,(__print_format_sloc0_1_0 + 1)
      000164 08               [12]  490 	inc	r0
      000165 F2               [24]  491 	movx	@r0,a
      000166 E5*02            [12]  492 	mov	a,(__print_format_sloc0_1_0 + 2)
      000168 08               [12]  493 	inc	r0
      000169 F2               [24]  494 	movx	@r0,a
                                    495 ;	printf_large.c:495: if (c=='%')
      00016A 74 25            [12]  496 	mov	a,#0x25
      00016C B5*03 09         [24]  497 	cjne	a,__print_format_sloc1_1_0,00103$
                                    498 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      00016F 85*03 82         [24]  499 	mov	dpl,__print_format_sloc1_1_0
      000172 12r00r00         [24]  500 	lcall	__output_char
                                    501 ;	printf_large.c:498: continue;
      000175 02r00rE7         [24]  502 	ljmp	00243$
      000178                        503 00103$:
                                    504 ;	printf_large.c:501: if (isdigit(c))
      000178 74 D0            [12]  505 	mov	a,#0x100 - 0x30
      00017A 25*03            [12]  506 	add	a,__print_format_sloc1_1_0
      00017C 50 77            [24]  507 	jnc	00110$
      00017E E5*03            [12]  508 	mov	a,__print_format_sloc1_1_0
      000180 24 C6            [12]  509 	add	a,#0xff - 0x39
      000182 40 71            [24]  510 	jc	00110$
                                    511 ;	printf_large.c:503: if (decimals==-1)
      000184 BF FF 44         [24]  512 	cjne	r7,#0xff,00107$
      000187 BD FF 41         [24]  513 	cjne	r5,#0xff,00107$
                                    514 ;	printf_large.c:505: width = 10*width + c - '0';
      00018A 78r00            [12]  515 	mov	r0,#__mulint_PARM_2
      00018C E5*0A            [12]  516 	mov	a,__print_format_sloc4_1_0
      00018E F2               [24]  517 	movx	@r0,a
      00018F E5*0B            [12]  518 	mov	a,(__print_format_sloc4_1_0 + 1)
      000191 08               [12]  519 	inc	r0
      000192 F2               [24]  520 	movx	@r0,a
      000193 90 00 0A         [24]  521 	mov	dptr,#0x000a
      000196 C0 07            [24]  522 	push	ar7
      000198 C0 05            [24]  523 	push	ar5
      00019A 12r00r00         [24]  524 	lcall	__mulint
      00019D 85 82*04         [24]  525 	mov	__print_format_sloc2_1_0,dpl
      0001A0 85 83*05         [24]  526 	mov	(__print_format_sloc2_1_0 + 1),dph
      0001A3 D0 05            [24]  527 	pop	ar5
      0001A5 D0 07            [24]  528 	pop	ar7
      0001A7 AA*03            [24]  529 	mov	r2,__print_format_sloc1_1_0
      0001A9 7E 00            [12]  530 	mov	r6,#0x00
      0001AB EA               [12]  531 	mov	a,r2
      0001AC 25*04            [12]  532 	add	a,__print_format_sloc2_1_0
      0001AE FA               [12]  533 	mov	r2,a
      0001AF EE               [12]  534 	mov	a,r6
      0001B0 35*05            [12]  535 	addc	a,(__print_format_sloc2_1_0 + 1)
      0001B2 FE               [12]  536 	mov	r6,a
      0001B3 EA               [12]  537 	mov	a,r2
      0001B4 24 D0            [12]  538 	add	a,#0xd0
      0001B6 F5*0A            [12]  539 	mov	__print_format_sloc4_1_0,a
      0001B8 EE               [12]  540 	mov	a,r6
      0001B9 34 FF            [12]  541 	addc	a,#0xff
      0001BB F5*0B            [12]  542 	mov	(__print_format_sloc4_1_0 + 1),a
                                    543 ;	printf_large.c:506: if (width == 0)
      0001BD E5*0A            [12]  544 	mov	a,__print_format_sloc4_1_0
      0001BF 45*0B            [12]  545 	orl	a,(__print_format_sloc4_1_0 + 1)
      0001C1 70 85            [24]  546 	jnz	00101$
                                    547 ;	printf_large.c:509: zero_padding = 1;
      0001C3 78r15            [12]  548 	mov	r0,#__print_format_zero_padding_65536_78
      0001C5 74 01            [12]  549 	mov	a,#0x01
      0001C7 F2               [24]  550 	movx	@r0,a
      0001C8 02r01r48         [24]  551 	ljmp	00101$
      0001CB                        552 00107$:
                                    553 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      0001CB 78r00            [12]  554 	mov	r0,#__mulint_PARM_2
      0001CD EF               [12]  555 	mov	a,r7
      0001CE F2               [24]  556 	movx	@r0,a
      0001CF ED               [12]  557 	mov	a,r5
      0001D0 08               [12]  558 	inc	r0
      0001D1 F2               [24]  559 	movx	@r0,a
      0001D2 90 00 0A         [24]  560 	mov	dptr,#0x000a
      0001D5 12r00r00         [24]  561 	lcall	__mulint
      0001D8 85 82*04         [24]  562 	mov	__print_format_sloc2_1_0,dpl
      0001DB 85 83*05         [24]  563 	mov	(__print_format_sloc2_1_0 + 1),dph
      0001DE AB*03            [24]  564 	mov	r3,__print_format_sloc1_1_0
      0001E0 7E 00            [12]  565 	mov	r6,#0x00
      0001E2 EB               [12]  566 	mov	a,r3
      0001E3 25*04            [12]  567 	add	a,__print_format_sloc2_1_0
      0001E5 FB               [12]  568 	mov	r3,a
      0001E6 EE               [12]  569 	mov	a,r6
      0001E7 35*05            [12]  570 	addc	a,(__print_format_sloc2_1_0 + 1)
      0001E9 FE               [12]  571 	mov	r6,a
      0001EA EB               [12]  572 	mov	a,r3
      0001EB 24 D0            [12]  573 	add	a,#0xd0
      0001ED FF               [12]  574 	mov	r7,a
      0001EE EE               [12]  575 	mov	a,r6
      0001EF 34 FF            [12]  576 	addc	a,#0xff
      0001F1 FD               [12]  577 	mov	r5,a
                                    578 ;	printf_large.c:516: goto get_conversion_spec;
      0001F2 02r01r48         [24]  579 	ljmp	00101$
      0001F5                        580 00110$:
                                    581 ;	printf_large.c:519: if (c=='.')
      0001F5 74 2E            [12]  582 	mov	a,#0x2e
      0001F7 B5*03 12         [24]  583 	cjne	a,__print_format_sloc1_1_0,00115$
                                    584 ;	printf_large.c:521: if (decimals==-1)
      0001FA BF FF 05         [24]  585 	cjne	r7,#0xff,00676$
      0001FD BD FF 02         [24]  586 	cjne	r5,#0xff,00676$
      000200 80 03            [24]  587 	sjmp	00677$
      000202                        588 00676$:
      000202 02r01r48         [24]  589 	ljmp	00101$
      000205                        590 00677$:
                                    591 ;	printf_large.c:522: decimals=0;
      000205 7F 00            [12]  592 	mov	r7,#0x00
      000207 7D 00            [12]  593 	mov	r5,#0x00
                                    594 ;	printf_large.c:525: goto get_conversion_spec;
      000209 02r01r48         [24]  595 	ljmp	00101$
      00020C                        596 00115$:
                                    597 ;	printf_large.c:528: if (islower(c))
      00020C 74 9F            [12]  598 	mov	a,#0x100 - 0x61
      00020E 25*03            [12]  599 	add	a,__print_format_sloc1_1_0
      000210 50 10            [24]  600 	jnc	00117$
      000212 E5*03            [12]  601 	mov	a,__print_format_sloc1_1_0
      000214 24 85            [12]  602 	add	a,#0xff - 0x7a
      000216 40 0A            [24]  603 	jc	00117$
                                    604 ;	printf_large.c:530: c = toupper(c);
      000218 53*03 DF         [24]  605 	anl	__print_format_sloc1_1_0,#0xdf
                                    606 ;	printf_large.c:531: lower_case = 1;
      00021B 78r00            [12]  607 	mov	r0,#_lower_case
      00021D 74 01            [12]  608 	mov	a,#0x01
      00021F F2               [24]  609 	movx	@r0,a
      000220 80 04            [24]  610 	sjmp	00118$
      000222                        611 00117$:
                                    612 ;	printf_large.c:534: lower_case = 0;
      000222 78r00            [12]  613 	mov	r0,#_lower_case
      000224 E4               [12]  614 	clr	a
      000225 F2               [24]  615 	movx	@r0,a
      000226                        616 00118$:
                                    617 ;	printf_large.c:536: switch( c )
      000226 74 20            [12]  618 	mov	a,#0x20
      000228 B5*03 03         [24]  619 	cjne	a,__print_format_sloc1_1_0,00680$
      00022B 02r02rC6         [24]  620 	ljmp	00122$
      00022E                        621 00680$:
      00022E 74 2B            [12]  622 	mov	a,#0x2b
      000230 B5*03 03         [24]  623 	cjne	a,__print_format_sloc1_1_0,00681$
      000233 02r02rBE         [24]  624 	ljmp	00121$
      000236                        625 00681$:
      000236 74 2D            [12]  626 	mov	a,#0x2d
      000238 B5*03 02         [24]  627 	cjne	a,__print_format_sloc1_1_0,00682$
      00023B 80 79            [24]  628 	sjmp	00120$
      00023D                        629 00682$:
      00023D 74 42            [12]  630 	mov	a,#0x42
      00023F B5*03 03         [24]  631 	cjne	a,__print_format_sloc1_1_0,00683$
      000242 02r02rCE         [24]  632 	ljmp	00123$
      000245                        633 00683$:
      000245 74 43            [12]  634 	mov	a,#0x43
      000247 B5*03 03         [24]  635 	cjne	a,__print_format_sloc1_1_0,00684$
      00024A 02r02rDE         [24]  636 	ljmp	00129$
      00024D                        637 00684$:
      00024D 74 44            [12]  638 	mov	a,#0x44
      00024F B5*03 03         [24]  639 	cjne	a,__print_format_sloc1_1_0,00685$
      000252 02r04r9D         [24]  640 	ljmp	00166$
      000255                        641 00685$:
      000255 74 46            [12]  642 	mov	a,#0x46
      000257 B5*03 03         [24]  643 	cjne	a,__print_format_sloc1_1_0,00686$
      00025A 02r04rBE         [24]  644 	ljmp	00170$
      00025D                        645 00686$:
      00025D 74 48            [12]  646 	mov	a,#0x48
      00025F B5*03 03         [24]  647 	cjne	a,__print_format_sloc1_1_0,00687$
      000262 02r01r48         [24]  648 	ljmp	00101$
      000265                        649 00687$:
      000265 74 49            [12]  650 	mov	a,#0x49
      000267 B5*03 03         [24]  651 	cjne	a,__print_format_sloc1_1_0,00688$
      00026A 02r04r9D         [24]  652 	ljmp	00166$
      00026D                        653 00688$:
      00026D 74 4A            [12]  654 	mov	a,#0x4a
      00026F B5*03 03         [24]  655 	cjne	a,__print_format_sloc1_1_0,00689$
      000272 02r01r48         [24]  656 	ljmp	00101$
      000275                        657 00689$:
      000275 74 4C            [12]  658 	mov	a,#0x4c
      000277 B5*03 02         [24]  659 	cjne	a,__print_format_sloc1_1_0,00690$
      00027A 80 5A            [24]  660 	sjmp	00128$
      00027C                        661 00690$:
      00027C 74 4F            [12]  662 	mov	a,#0x4f
      00027E B5*03 03         [24]  663 	cjne	a,__print_format_sloc1_1_0,00691$
      000281 02r04rA9         [24]  664 	ljmp	00167$
      000284                        665 00691$:
      000284 74 50            [12]  666 	mov	a,#0x50
      000286 B5*03 03         [24]  667 	cjne	a,__print_format_sloc1_1_0,00692$
      000289 02r04r26         [24]  668 	ljmp	00152$
      00028C                        669 00692$:
      00028C 74 53            [12]  670 	mov	a,#0x53
      00028E B5*03 02         [24]  671 	cjne	a,__print_format_sloc1_1_0,00693$
      000291 80 71            [24]  672 	sjmp	00133$
      000293                        673 00693$:
      000293 74 54            [12]  674 	mov	a,#0x54
      000295 B5*03 03         [24]  675 	cjne	a,__print_format_sloc1_1_0,00694$
      000298 02r01r48         [24]  676 	ljmp	00101$
      00029B                        677 00694$:
      00029B 74 55            [12]  678 	mov	a,#0x55
      00029D B5*03 03         [24]  679 	cjne	a,__print_format_sloc1_1_0,00695$
      0002A0 02r04rB0         [24]  680 	ljmp	00168$
      0002A3                        681 00695$:
      0002A3 74 58            [12]  682 	mov	a,#0x58
      0002A5 B5*03 03         [24]  683 	cjne	a,__print_format_sloc1_1_0,00696$
      0002A8 02r04rB7         [24]  684 	ljmp	00169$
      0002AB                        685 00696$:
      0002AB 74 5A            [12]  686 	mov	a,#0x5a
      0002AD B5*03 03         [24]  687 	cjne	a,__print_format_sloc1_1_0,00697$
      0002B0 02r01r48         [24]  688 	ljmp	00101$
      0002B3                        689 00697$:
      0002B3 02r04rC5         [24]  690 	ljmp	00171$
                                    691 ;	printf_large.c:538: case '-':
      0002B6                        692 00120$:
                                    693 ;	printf_large.c:539: left_justify = 1;
      0002B6 78r14            [12]  694 	mov	r0,#__print_format_left_justify_65536_78
      0002B8 74 01            [12]  695 	mov	a,#0x01
      0002BA F2               [24]  696 	movx	@r0,a
                                    697 ;	printf_large.c:540: goto get_conversion_spec;
      0002BB 02r01r48         [24]  698 	ljmp	00101$
                                    699 ;	printf_large.c:541: case '+':
      0002BE                        700 00121$:
                                    701 ;	printf_large.c:542: prefix_sign = 1;
      0002BE 78r16            [12]  702 	mov	r0,#__print_format_prefix_sign_65536_78
      0002C0 74 01            [12]  703 	mov	a,#0x01
      0002C2 F2               [24]  704 	movx	@r0,a
                                    705 ;	printf_large.c:543: goto get_conversion_spec;
      0002C3 02r01r48         [24]  706 	ljmp	00101$
                                    707 ;	printf_large.c:544: case ' ':
      0002C6                        708 00122$:
                                    709 ;	printf_large.c:545: prefix_space = 1;
      0002C6 78r17            [12]  710 	mov	r0,#__print_format_prefix_space_65536_78
      0002C8 74 01            [12]  711 	mov	a,#0x01
      0002CA F2               [24]  712 	movx	@r0,a
                                    713 ;	printf_large.c:546: goto get_conversion_spec;
      0002CB 02r01r48         [24]  714 	ljmp	00101$
                                    715 ;	printf_large.c:547: case 'B': /* byte */
      0002CE                        716 00123$:
                                    717 ;	printf_large.c:548: char_argument = 1;
      0002CE 78r19            [12]  718 	mov	r0,#__print_format_char_argument_65536_78
      0002D0 74 01            [12]  719 	mov	a,#0x01
      0002D2 F2               [24]  720 	movx	@r0,a
                                    721 ;	printf_large.c:549: goto get_conversion_spec;
      0002D3 02r01r48         [24]  722 	ljmp	00101$
                                    723 ;	printf_large.c:556: case 'L': /* long */
      0002D6                        724 00128$:
                                    725 ;	printf_large.c:557: long_argument = 1;
      0002D6 78r1A            [12]  726 	mov	r0,#__print_format_long_argument_65536_78
      0002D8 74 01            [12]  727 	mov	a,#0x01
      0002DA F2               [24]  728 	movx	@r0,a
                                    729 ;	printf_large.c:558: goto get_conversion_spec;
      0002DB 02r01r48         [24]  730 	ljmp	00101$
                                    731 ;	printf_large.c:560: case 'C':
      0002DE                        732 00129$:
                                    733 ;	printf_large.c:561: if( char_argument )
      0002DE 78r19            [12]  734 	mov	r0,#__print_format_char_argument_65536_78
      0002E0 E2               [24]  735 	movx	a,@r0
      0002E1 60 0C            [24]  736 	jz	00131$
                                    737 ;	printf_large.c:562: c = va_arg(ap,char);
      0002E3 78r13            [12]  738 	mov	r0,#__print_format_PARM_4
      0002E5 E2               [24]  739 	movx	a,@r0
      0002E6 14               [12]  740 	dec	a
      0002E7 F9               [12]  741 	mov	r1,a
      0002E8 78r13            [12]  742 	mov	r0,#__print_format_PARM_4
      0002EA F2               [24]  743 	movx	@r0,a
      0002EB 87 03            [24]  744 	mov	ar3,@r1
      0002ED 80 0D            [24]  745 	sjmp	00132$
      0002EF                        746 00131$:
                                    747 ;	printf_large.c:564: c = va_arg(ap,int);
      0002EF 78r13            [12]  748 	mov	r0,#__print_format_PARM_4
      0002F1 E2               [24]  749 	movx	a,@r0
      0002F2 24 FE            [12]  750 	add	a,#0xfe
      0002F4 FA               [12]  751 	mov	r2,a
      0002F5 78r13            [12]  752 	mov	r0,#__print_format_PARM_4
      0002F7 F2               [24]  753 	movx	@r0,a
      0002F8 8A 01            [24]  754 	mov	ar1,r2
      0002FA 87 03            [24]  755 	mov	ar3,@r1
      0002FC                        756 00132$:
                                    757 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      0002FC 8B 82            [24]  758 	mov	dpl,r3
      0002FE 12r00r00         [24]  759 	lcall	__output_char
                                    760 ;	printf_large.c:566: break;
      000301 02r04rD3         [24]  761 	ljmp	00172$
                                    762 ;	printf_large.c:568: case 'S':
      000304                        763 00133$:
                                    764 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000304 78r13            [12]  765 	mov	r0,#__print_format_PARM_4
      000306 E2               [24]  766 	movx	a,@r0
      000307 24 FD            [12]  767 	add	a,#0xfd
      000309 FB               [12]  768 	mov	r3,a
      00030A 78r13            [12]  769 	mov	r0,#__print_format_PARM_4
      00030C F2               [24]  770 	movx	@r0,a
      00030D 8B 01            [24]  771 	mov	ar1,r3
      00030F 87 02            [24]  772 	mov	ar2,@r1
      000311 09               [12]  773 	inc	r1
      000312 87 03            [24]  774 	mov	ar3,@r1
      000314 09               [12]  775 	inc	r1
      000315 87 06            [24]  776 	mov	ar6,@r1
      000317 19               [12]  777 	dec	r1
      000318 19               [12]  778 	dec	r1
      000319 78r06            [12]  779 	mov	r0,#_value
      00031B EA               [12]  780 	mov	a,r2
      00031C F2               [24]  781 	movx	@r0,a
      00031D 08               [12]  782 	inc	r0
      00031E EB               [12]  783 	mov	a,r3
      00031F F2               [24]  784 	movx	@r0,a
      000320 08               [12]  785 	inc	r0
      000321 EE               [12]  786 	mov	a,r6
      000322 F2               [24]  787 	movx	@r0,a
                                    788 ;	printf_large.c:582: length = strlen(PTR);
      000323 8A 82            [24]  789 	mov	dpl,r2
      000325 8B 83            [24]  790 	mov	dph,r3
      000327 8E F0            [24]  791 	mov	b,r6
      000329 C0 07            [24]  792 	push	ar7
      00032B C0 05            [24]  793 	push	ar5
      00032D 12r00r00         [24]  794 	lcall	_strlen
      000330 85 82*04         [24]  795 	mov	__print_format_sloc2_1_0,dpl
      000333 85 83*05         [24]  796 	mov	(__print_format_sloc2_1_0 + 1),dph
      000336 D0 05            [24]  797 	pop	ar5
      000338 D0 07            [24]  798 	pop	ar7
                                    799 ;	printf_large.c:584: if ( decimals == -1 )
      00033A BF FF 07         [24]  800 	cjne	r7,#0xff,00135$
      00033D BD FF 04         [24]  801 	cjne	r5,#0xff,00135$
                                    802 ;	printf_large.c:586: decimals = length;
      000340 AF*04            [24]  803 	mov	r7,__print_format_sloc2_1_0
      000342 AD*05            [24]  804 	mov	r5,(__print_format_sloc2_1_0 + 1)
      000344                        805 00135$:
                                    806 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000344 78r14            [12]  807 	mov	r0,#__print_format_left_justify_65536_78
      000346 E2               [24]  808 	movx	a,@r0
      000347 70 3F            [24]  809 	jnz	00289$
      000349 C3               [12]  810 	clr	c
      00034A E5*04            [12]  811 	mov	a,__print_format_sloc2_1_0
      00034C 95*0A            [12]  812 	subb	a,__print_format_sloc4_1_0
      00034E E5*05            [12]  813 	mov	a,(__print_format_sloc2_1_0 + 1)
      000350 95*0B            [12]  814 	subb	a,(__print_format_sloc4_1_0 + 1)
      000352 50 34            [24]  815 	jnc	00289$
                                    816 ;	printf_large.c:590: width -= length;
      000354 E5*0A            [12]  817 	mov	a,__print_format_sloc4_1_0
      000356 C3               [12]  818 	clr	c
      000357 95*04            [12]  819 	subb	a,__print_format_sloc2_1_0
      000359 F5*00            [12]  820 	mov	__print_format_sloc0_1_0,a
      00035B E5*0B            [12]  821 	mov	a,(__print_format_sloc4_1_0 + 1)
      00035D 95*05            [12]  822 	subb	a,(__print_format_sloc2_1_0 + 1)
      00035F F5*01            [12]  823 	mov	(__print_format_sloc0_1_0 + 1),a
                                    824 ;	printf_large.c:591: while( width-- != 0 )
      000361                        825 00136$:
      000361 AB*00            [24]  826 	mov	r3,__print_format_sloc0_1_0
      000363 AE*01            [24]  827 	mov	r6,(__print_format_sloc0_1_0 + 1)
      000365 15*00            [12]  828 	dec	__print_format_sloc0_1_0
      000367 74 FF            [12]  829 	mov	a,#0xff
      000369 B5*00 02         [24]  830 	cjne	a,__print_format_sloc0_1_0,00703$
      00036C 15*01            [12]  831 	dec	(__print_format_sloc0_1_0 + 1)
      00036E                        832 00703$:
      00036E EB               [12]  833 	mov	a,r3
      00036F 4E               [12]  834 	orl	a,r6
      000370 60 10            [24]  835 	jz	00329$
                                    836 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000372 75 82 20         [24]  837 	mov	dpl,#0x20
      000375 C0 07            [24]  838 	push	ar7
      000377 C0 05            [24]  839 	push	ar5
      000379 12r00r00         [24]  840 	lcall	__output_char
      00037C D0 05            [24]  841 	pop	ar5
      00037E D0 07            [24]  842 	pop	ar7
                                    843 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000380 80 DF            [24]  844 	sjmp	00136$
      000382                        845 00329$:
      000382 85*00*0A         [24]  846 	mov	__print_format_sloc4_1_0,__print_format_sloc0_1_0
      000385 85*01*0B         [24]  847 	mov	(__print_format_sloc4_1_0 + 1),(__print_format_sloc0_1_0 + 1)
      000388                        848 00289$:
      000388 8F 03            [24]  849 	mov	ar3,r7
      00038A 8D 06            [24]  850 	mov	ar6,r5
      00038C                        851 00143$:
      00038C C0 03            [24]  852 	push	ar3
      00038E C0 06            [24]  853 	push	ar6
      000390 78r06            [12]  854 	mov	r0,#_value
      000392 E2               [24]  855 	movx	a,@r0
      000393 FA               [12]  856 	mov	r2,a
      000394 08               [12]  857 	inc	r0
      000395 E2               [24]  858 	movx	a,@r0
      000396 FB               [12]  859 	mov	r3,a
      000397 08               [12]  860 	inc	r0
      000398 E2               [24]  861 	movx	a,@r0
      000399 FE               [12]  862 	mov	r6,a
      00039A 8A 82            [24]  863 	mov	dpl,r2
      00039C 8B 83            [24]  864 	mov	dph,r3
      00039E 8E F0            [24]  865 	mov	b,r6
      0003A0 12r00r00         [24]  866 	lcall	__gptrget
      0003A3 FA               [12]  867 	mov	r2,a
      0003A4 FF               [12]  868 	mov	r7,a
      0003A5 D0 06            [24]  869 	pop	ar6
      0003A7 D0 03            [24]  870 	pop	ar3
      0003A9 EA               [12]  871 	mov	a,r2
      0003AA 60 3B            [24]  872 	jz	00145$
      0003AC C3               [12]  873 	clr	c
      0003AD E4               [12]  874 	clr	a
      0003AE 9B               [12]  875 	subb	a,r3
      0003AF 74 80            [12]  876 	mov	a,#(0x00 ^ 0x80)
      0003B1 8E F0            [24]  877 	mov	b,r6
      0003B3 63 F0 80         [24]  878 	xrl	b,#0x80
      0003B6 95 F0            [12]  879 	subb	a,b
      0003B8 50 2D            [24]  880 	jnc	00145$
      0003BA 1B               [12]  881 	dec	r3
      0003BB BB FF 01         [24]  882 	cjne	r3,#0xff,00707$
      0003BE 1E               [12]  883 	dec	r6
      0003BF                        884 00707$:
                                    885 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      0003BF 8F 82            [24]  886 	mov	dpl,r7
      0003C1 C0 06            [24]  887 	push	ar6
      0003C3 C0 03            [24]  888 	push	ar3
      0003C5 12r00r00         [24]  889 	lcall	__output_char
      0003C8 D0 03            [24]  890 	pop	ar3
      0003CA D0 06            [24]  891 	pop	ar6
                                    892 ;	printf_large.c:600: PTR++;
      0003CC 78r06            [12]  893 	mov	r0,#_value
      0003CE E2               [24]  894 	movx	a,@r0
      0003CF FA               [12]  895 	mov	r2,a
      0003D0 08               [12]  896 	inc	r0
      0003D1 E2               [24]  897 	movx	a,@r0
      0003D2 FC               [12]  898 	mov	r4,a
      0003D3 08               [12]  899 	inc	r0
      0003D4 E2               [24]  900 	movx	a,@r0
      0003D5 FD               [12]  901 	mov	r5,a
      0003D6 0A               [12]  902 	inc	r2
      0003D7 BA 00 01         [24]  903 	cjne	r2,#0x00,00708$
      0003DA 0C               [12]  904 	inc	r4
      0003DB                        905 00708$:
      0003DB 78r06            [12]  906 	mov	r0,#_value
      0003DD EA               [12]  907 	mov	a,r2
      0003DE F2               [24]  908 	movx	@r0,a
      0003DF 08               [12]  909 	inc	r0
      0003E0 EC               [12]  910 	mov	a,r4
      0003E1 F2               [24]  911 	movx	@r0,a
      0003E2 08               [12]  912 	inc	r0
      0003E3 ED               [12]  913 	mov	a,r5
      0003E4 F2               [24]  914 	movx	@r0,a
      0003E5 80 A5            [24]  915 	sjmp	00143$
      0003E7                        916 00145$:
                                    917 ;	printf_large.c:603: if ( left_justify && (length < width))
      0003E7 78r14            [12]  918 	mov	r0,#__print_format_left_justify_65536_78
      0003E9 E2               [24]  919 	movx	a,@r0
      0003EA 70 03            [24]  920 	jnz	00709$
      0003EC 02r04rD3         [24]  921 	ljmp	00172$
      0003EF                        922 00709$:
      0003EF C3               [12]  923 	clr	c
      0003F0 E5*04            [12]  924 	mov	a,__print_format_sloc2_1_0
      0003F2 95*0A            [12]  925 	subb	a,__print_format_sloc4_1_0
      0003F4 E5*05            [12]  926 	mov	a,(__print_format_sloc2_1_0 + 1)
      0003F6 95*0B            [12]  927 	subb	a,(__print_format_sloc4_1_0 + 1)
      0003F8 40 03            [24]  928 	jc	00710$
      0003FA 02r04rD3         [24]  929 	ljmp	00172$
      0003FD                        930 00710$:
                                    931 ;	printf_large.c:605: width -= length;
      0003FD E5*0A            [12]  932 	mov	a,__print_format_sloc4_1_0
      0003FF C3               [12]  933 	clr	c
      000400 95*04            [12]  934 	subb	a,__print_format_sloc2_1_0
      000402 F5*04            [12]  935 	mov	__print_format_sloc2_1_0,a
      000404 E5*0B            [12]  936 	mov	a,(__print_format_sloc4_1_0 + 1)
      000406 95*05            [12]  937 	subb	a,(__print_format_sloc2_1_0 + 1)
      000408 F5*05            [12]  938 	mov	(__print_format_sloc2_1_0 + 1),a
                                    939 ;	printf_large.c:606: while( width-- != 0 )
      00040A                        940 00146$:
      00040A AA*04            [24]  941 	mov	r2,__print_format_sloc2_1_0
      00040C AE*05            [24]  942 	mov	r6,(__print_format_sloc2_1_0 + 1)
      00040E 15*04            [12]  943 	dec	__print_format_sloc2_1_0
      000410 74 FF            [12]  944 	mov	a,#0xff
      000412 B5*04 02         [24]  945 	cjne	a,__print_format_sloc2_1_0,00711$
      000415 15*05            [12]  946 	dec	(__print_format_sloc2_1_0 + 1)
      000417                        947 00711$:
      000417 EA               [12]  948 	mov	a,r2
      000418 4E               [12]  949 	orl	a,r6
      000419 70 03            [24]  950 	jnz	00712$
      00041B 02r04rCD         [24]  951 	ljmp	00331$
      00041E                        952 00712$:
                                    953 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      00041E 75 82 20         [24]  954 	mov	dpl,#0x20
      000421 12r00r00         [24]  955 	lcall	__output_char
                                    956 ;	printf_large.c:613: case 'P':
      000424 80 E4            [24]  957 	sjmp	00146$
      000426                        958 00152$:
                                    959 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000426 78r13            [12]  960 	mov	r0,#__print_format_PARM_4
      000428 E2               [24]  961 	movx	a,@r0
      000429 24 FD            [12]  962 	add	a,#0xfd
      00042B FE               [12]  963 	mov	r6,a
      00042C 78r13            [12]  964 	mov	r0,#__print_format_PARM_4
      00042E F2               [24]  965 	movx	@r0,a
      00042F 8E 01            [24]  966 	mov	ar1,r6
      000431 87 02            [24]  967 	mov	ar2,@r1
      000433 09               [12]  968 	inc	r1
      000434 87 03            [24]  969 	mov	ar3,@r1
      000436 09               [12]  970 	inc	r1
      000437 87 06            [24]  971 	mov	ar6,@r1
      000439 19               [12]  972 	dec	r1
      00043A 19               [12]  973 	dec	r1
      00043B 78r06            [12]  974 	mov	r0,#_value
      00043D EA               [12]  975 	mov	a,r2
      00043E F2               [24]  976 	movx	@r0,a
      00043F 08               [12]  977 	inc	r0
      000440 EB               [12]  978 	mov	a,r3
      000441 F2               [24]  979 	movx	@r0,a
      000442 08               [12]  980 	inc	r0
      000443 EE               [12]  981 	mov	a,r6
      000444 F2               [24]  982 	movx	@r0,a
                                    983 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000445 78r08            [12]  984 	mov	r0,#(_value + 0x0002)
      000447 E2               [24]  985 	movx	a,@r0
      000448 FE               [12]  986 	mov	r6,a
                                    987 ;	printf_large.c:638: if (memtype >= 0x80)
      000449 BE 80 00         [24]  988 	cjne	r6,#0x80,00713$
      00044C                        989 00713$:
      00044C 40 04            [24]  990 	jc	00160$
                                    991 ;	printf_large.c:639: c = 'C';
      00044E 7B 43            [12]  992 	mov	r3,#0x43
      000450 80 14            [24]  993 	sjmp	00161$
      000452                        994 00160$:
                                    995 ;	printf_large.c:640: else if (memtype >= 0x60)
      000452 BE 60 00         [24]  996 	cjne	r6,#0x60,00715$
      000455                        997 00715$:
      000455 40 04            [24]  998 	jc	00157$
                                    999 ;	printf_large.c:641: c = 'P';
      000457 7B 50            [12] 1000 	mov	r3,#0x50
      000459 80 0B            [24] 1001 	sjmp	00161$
      00045B                       1002 00157$:
                                   1003 ;	printf_large.c:642: else if (memtype >= 0x40)
      00045B BE 40 00         [24] 1004 	cjne	r6,#0x40,00717$
      00045E                       1005 00717$:
      00045E 40 04            [24] 1006 	jc	00154$
                                   1007 ;	printf_large.c:643: c = 'I';
      000460 7B 49            [12] 1008 	mov	r3,#0x49
      000462 80 02            [24] 1009 	sjmp	00161$
      000464                       1010 00154$:
                                   1011 ;	printf_large.c:645: c = 'X';
      000464 7B 58            [12] 1012 	mov	r3,#0x58
      000466                       1013 00161$:
                                   1014 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000466 8B 82            [24] 1015 	mov	dpl,r3
      000468 C0 03            [24] 1016 	push	ar3
      00046A 12r00r00         [24] 1017 	lcall	__output_char
                                   1018 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      00046D 75 82 3A         [24] 1019 	mov	dpl,#0x3a
      000470 12r00r00         [24] 1020 	lcall	__output_char
                                   1021 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000473 75 82 30         [24] 1022 	mov	dpl,#0x30
      000476 12r00r00         [24] 1023 	lcall	__output_char
                                   1024 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      000479 75 82 78         [24] 1025 	mov	dpl,#0x78
      00047C 12r00r00         [24] 1026 	lcall	__output_char
      00047F D0 03            [24] 1027 	pop	ar3
                                   1028 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000481 BB 49 02         [24] 1029 	cjne	r3,#0x49,00719$
      000484 80 0D            [24] 1030 	sjmp	00163$
      000486                       1031 00719$:
                                   1032 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000486 BB 50 02         [24] 1033 	cjne	r3,#0x50,00720$
      000489 80 08            [24] 1034 	sjmp	00163$
      00048B                       1035 00720$:
                                   1036 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00048B 78r07            [12] 1037 	mov	r0,#(_value + 0x0001)
      00048D E2               [24] 1038 	movx	a,@r0
      00048E F5 82            [12] 1039 	mov	dpl,a
      000490 12r00r4D         [24] 1040 	lcall	_output_2digits
      000493                       1041 00163$:
                                   1042 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000493 78r06            [12] 1043 	mov	r0,#_value
      000495 E2               [24] 1044 	movx	a,@r0
      000496 F5 82            [12] 1045 	mov	dpl,a
      000498 12r00r4D         [24] 1046 	lcall	_output_2digits
                                   1047 ;	printf_large.c:668: break;
                                   1048 ;	printf_large.c:671: case 'I':
      00049B 80 36            [24] 1049 	sjmp	00172$
      00049D                       1050 00166$:
                                   1051 ;	printf_large.c:672: signed_argument = 1;
      00049D 78r18            [12] 1052 	mov	r0,#__print_format_signed_argument_65536_78
      00049F 74 01            [12] 1053 	mov	a,#0x01
      0004A1 F2               [24] 1054 	movx	@r0,a
                                   1055 ;	printf_large.c:673: radix = 10;
      0004A2 78r1D            [12] 1056 	mov	r0,#__print_format_radix_65536_78
      0004A4 74 0A            [12] 1057 	mov	a,#0x0a
      0004A6 F2               [24] 1058 	movx	@r0,a
                                   1059 ;	printf_large.c:674: break;
                                   1060 ;	printf_large.c:676: case 'O':
      0004A7 80 2A            [24] 1061 	sjmp	00172$
      0004A9                       1062 00167$:
                                   1063 ;	printf_large.c:677: radix = 8;
      0004A9 78r1D            [12] 1064 	mov	r0,#__print_format_radix_65536_78
      0004AB 74 08            [12] 1065 	mov	a,#0x08
      0004AD F2               [24] 1066 	movx	@r0,a
                                   1067 ;	printf_large.c:678: break;
                                   1068 ;	printf_large.c:680: case 'U':
      0004AE 80 23            [24] 1069 	sjmp	00172$
      0004B0                       1070 00168$:
                                   1071 ;	printf_large.c:681: radix = 10;
      0004B0 78r1D            [12] 1072 	mov	r0,#__print_format_radix_65536_78
      0004B2 74 0A            [12] 1073 	mov	a,#0x0a
      0004B4 F2               [24] 1074 	movx	@r0,a
                                   1075 ;	printf_large.c:682: break;
                                   1076 ;	printf_large.c:684: case 'X':
      0004B5 80 1C            [24] 1077 	sjmp	00172$
      0004B7                       1078 00169$:
                                   1079 ;	printf_large.c:685: radix = 16;
      0004B7 78r1D            [12] 1080 	mov	r0,#__print_format_radix_65536_78
      0004B9 74 10            [12] 1081 	mov	a,#0x10
      0004BB F2               [24] 1082 	movx	@r0,a
                                   1083 ;	printf_large.c:686: break;
                                   1084 ;	printf_large.c:688: case 'F':
      0004BC 80 15            [24] 1085 	sjmp	00172$
      0004BE                       1086 00170$:
                                   1087 ;	printf_large.c:689: float_argument=1;
      0004BE 78r1B            [12] 1088 	mov	r0,#__print_format_float_argument_65536_78
      0004C0 74 01            [12] 1089 	mov	a,#0x01
      0004C2 F2               [24] 1090 	movx	@r0,a
                                   1091 ;	printf_large.c:690: break;
                                   1092 ;	printf_large.c:692: default:
      0004C3 80 0E            [24] 1093 	sjmp	00172$
      0004C5                       1094 00171$:
                                   1095 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      0004C5 85*03 82         [24] 1096 	mov	dpl,__print_format_sloc1_1_0
      0004C8 12r00r00         [24] 1097 	lcall	__output_char
                                   1098 ;	printf_large.c:877: return charsOutputted;
                                   1099 ;	printf_large.c:696: }
      0004CB 80 06            [24] 1100 	sjmp	00172$
      0004CD                       1101 00331$:
      0004CD 85*04*0A         [24] 1102 	mov	__print_format_sloc4_1_0,__print_format_sloc2_1_0
      0004D0 85*05*0B         [24] 1103 	mov	(__print_format_sloc4_1_0 + 1),(__print_format_sloc2_1_0 + 1)
      0004D3                       1104 00172$:
                                   1105 ;	printf_large.c:698: if (float_argument)
      0004D3 78r1B            [12] 1106 	mov	r0,#__print_format_float_argument_65536_78
      0004D5 E2               [24] 1107 	movx	a,@r0
      0004D6 60 73            [24] 1108 	jz	00238$
                                   1109 ;	printf_large.c:700: value.f = va_arg(ap, float);
      0004D8 78r13            [12] 1110 	mov	r0,#__print_format_PARM_4
      0004DA E2               [24] 1111 	movx	a,@r0
      0004DB 24 FC            [12] 1112 	add	a,#0xfc
      0004DD FE               [12] 1113 	mov	r6,a
      0004DE 78r13            [12] 1114 	mov	r0,#__print_format_PARM_4
      0004E0 F2               [24] 1115 	movx	@r0,a
      0004E1 8E 01            [24] 1116 	mov	ar1,r6
      0004E3 87*06            [24] 1117 	mov	__print_format_sloc3_1_0,@r1
      0004E5 09               [12] 1118 	inc	r1
      0004E6 87*07            [24] 1119 	mov	(__print_format_sloc3_1_0 + 1),@r1
      0004E8 09               [12] 1120 	inc	r1
      0004E9 87*08            [24] 1121 	mov	(__print_format_sloc3_1_0 + 2),@r1
      0004EB 09               [12] 1122 	inc	r1
      0004EC 87*09            [24] 1123 	mov	(__print_format_sloc3_1_0 + 3),@r1
      0004EE 19               [12] 1124 	dec	r1
      0004EF 19               [12] 1125 	dec	r1
      0004F0 19               [12] 1126 	dec	r1
      0004F1 78r06            [12] 1127 	mov	r0,#_value
      0004F3 E5*06            [12] 1128 	mov	a,__print_format_sloc3_1_0
      0004F5 F2               [24] 1129 	movx	@r0,a
      0004F6 08               [12] 1130 	inc	r0
      0004F7 E5*07            [12] 1131 	mov	a,(__print_format_sloc3_1_0 + 1)
      0004F9 F2               [24] 1132 	movx	@r0,a
      0004FA 08               [12] 1133 	inc	r0
      0004FB E5*08            [12] 1134 	mov	a,(__print_format_sloc3_1_0 + 2)
      0004FD F2               [24] 1135 	movx	@r0,a
      0004FE 08               [12] 1136 	inc	r0
      0004FF E5*09            [12] 1137 	mov	a,(__print_format_sloc3_1_0 + 3)
      000501 F2               [24] 1138 	movx	@r0,a
                                   1139 ;	printf_large.c:702: PTR="<NO FLOAT>";
      000502 78r06            [12] 1140 	mov	r0,#_value
      000504 74r00            [12] 1141 	mov	a,#___str_0
      000506 F2               [24] 1142 	movx	@r0,a
      000507 08               [12] 1143 	inc	r0
      000508 74s00            [12] 1144 	mov	a,#(___str_0 >> 8)
      00050A F2               [24] 1145 	movx	@r0,a
      00050B 08               [12] 1146 	inc	r0
      00050C 74 80            [12] 1147 	mov	a,#0x80
      00050E F2               [24] 1148 	movx	@r0,a
                                   1149 ;	printf_large.c:703: while (c=*PTR++)
      00050F                       1150 00173$:
      00050F 78r06            [12] 1151 	mov	r0,#_value
      000511 E2               [24] 1152 	movx	a,@r0
      000512 F5*06            [12] 1153 	mov	__print_format_sloc3_1_0,a
      000514 08               [12] 1154 	inc	r0
      000515 E2               [24] 1155 	movx	a,@r0
      000516 F5*07            [12] 1156 	mov	(__print_format_sloc3_1_0 + 1),a
      000518 08               [12] 1157 	inc	r0
      000519 E2               [24] 1158 	movx	a,@r0
      00051A F5*08            [12] 1159 	mov	(__print_format_sloc3_1_0 + 2),a
      00051C 74 01            [12] 1160 	mov	a,#0x01
      00051E 25*06            [12] 1161 	add	a,__print_format_sloc3_1_0
      000520 FA               [12] 1162 	mov	r2,a
      000521 E4               [12] 1163 	clr	a
      000522 35*07            [12] 1164 	addc	a,(__print_format_sloc3_1_0 + 1)
      000524 FB               [12] 1165 	mov	r3,a
      000525 AE*08            [24] 1166 	mov	r6,(__print_format_sloc3_1_0 + 2)
      000527 78r06            [12] 1167 	mov	r0,#_value
      000529 EA               [12] 1168 	mov	a,r2
      00052A F2               [24] 1169 	movx	@r0,a
      00052B 08               [12] 1170 	inc	r0
      00052C EB               [12] 1171 	mov	a,r3
      00052D F2               [24] 1172 	movx	@r0,a
      00052E 08               [12] 1173 	inc	r0
      00052F EE               [12] 1174 	mov	a,r6
      000530 F2               [24] 1175 	movx	@r0,a
      000531 85*06 82         [24] 1176 	mov	dpl,__print_format_sloc3_1_0
      000534 85*07 83         [24] 1177 	mov	dph,(__print_format_sloc3_1_0 + 1)
      000537 85*08 F0         [24] 1178 	mov	b,(__print_format_sloc3_1_0 + 2)
      00053A 12r00r00         [24] 1179 	lcall	__gptrget
      00053D FE               [12] 1180 	mov	r6,a
      00053E FB               [12] 1181 	mov	r3,a
      00053F 70 03            [24] 1182 	jnz	00722$
      000541 02r00rE7         [24] 1183 	ljmp	00243$
      000544                       1184 00722$:
                                   1185 ;	printf_large.c:705: OUTPUT_CHAR (c, p);
      000544 8B 82            [24] 1186 	mov	dpl,r3
      000546 12r00r00         [24] 1187 	lcall	__output_char
      000549 80 C4            [24] 1188 	sjmp	00173$
      00054B                       1189 00238$:
                                   1190 ;	printf_large.c:723: else if (radix != 0)
      00054B 78r1D            [12] 1191 	mov	r0,#__print_format_radix_65536_78
      00054D E2               [24] 1192 	movx	a,@r0
      00054E 70 03            [24] 1193 	jnz	00723$
      000550 02r00rE7         [24] 1194 	ljmp	00243$
      000553                       1195 00723$:
                                   1196 ;	printf_large.c:728: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                                   1197 ;	printf_large.c:731: if (char_argument)
      000553 78r19            [12] 1198 	mov	r0,#__print_format_char_argument_65536_78
      000555 E2               [24] 1199 	movx	a,@r0
      000556 60 46            [24] 1200 	jz	00184$
                                   1201 ;	printf_large.c:733: value.l = va_arg(ap, char);
      000558 78r13            [12] 1202 	mov	r0,#__print_format_PARM_4
      00055A E2               [24] 1203 	movx	a,@r0
      00055B 14               [12] 1204 	dec	a
      00055C F9               [12] 1205 	mov	r1,a
      00055D 78r13            [12] 1206 	mov	r0,#__print_format_PARM_4
      00055F F2               [24] 1207 	movx	@r0,a
      000560 87 06            [24] 1208 	mov	ar6,@r1
      000562 8E 02            [24] 1209 	mov	ar2,r6
      000564 7B 00            [12] 1210 	mov	r3,#0x00
      000566 7D 00            [12] 1211 	mov	r5,#0x00
      000568 7E 00            [12] 1212 	mov	r6,#0x00
      00056A 78r06            [12] 1213 	mov	r0,#_value
      00056C EA               [12] 1214 	mov	a,r2
      00056D F2               [24] 1215 	movx	@r0,a
      00056E 08               [12] 1216 	inc	r0
      00056F EB               [12] 1217 	mov	a,r3
      000570 F2               [24] 1218 	movx	@r0,a
      000571 08               [12] 1219 	inc	r0
      000572 ED               [12] 1220 	mov	a,r5
      000573 F2               [24] 1221 	movx	@r0,a
      000574 08               [12] 1222 	inc	r0
      000575 EE               [12] 1223 	mov	a,r6
      000576 F2               [24] 1224 	movx	@r0,a
                                   1225 ;	printf_large.c:734: if (!signed_argument)
      000577 78r18            [12] 1226 	mov	r0,#__print_format_signed_argument_65536_78
      000579 E2               [24] 1227 	movx	a,@r0
      00057A 60 03            [24] 1228 	jz	00725$
      00057C 02r06r11         [24] 1229 	ljmp	00185$
      00057F                       1230 00725$:
                                   1231 ;	printf_large.c:736: value.l &= 0xFF;
      00057F 78r06            [12] 1232 	mov	r0,#_value
      000581 E2               [24] 1233 	movx	a,@r0
      000582 FA               [12] 1234 	mov	r2,a
      000583 08               [12] 1235 	inc	r0
      000584 E2               [24] 1236 	movx	a,@r0
      000585 08               [12] 1237 	inc	r0
      000586 E2               [24] 1238 	movx	a,@r0
      000587 08               [12] 1239 	inc	r0
      000588 E2               [24] 1240 	movx	a,@r0
      000589 7B 00            [12] 1241 	mov	r3,#0x00
      00058B 7D 00            [12] 1242 	mov	r5,#0x00
      00058D 7E 00            [12] 1243 	mov	r6,#0x00
      00058F 78r06            [12] 1244 	mov	r0,#_value
      000591 EA               [12] 1245 	mov	a,r2
      000592 F2               [24] 1246 	movx	@r0,a
      000593 08               [12] 1247 	inc	r0
      000594 EB               [12] 1248 	mov	a,r3
      000595 F2               [24] 1249 	movx	@r0,a
      000596 08               [12] 1250 	inc	r0
      000597 ED               [12] 1251 	mov	a,r5
      000598 F2               [24] 1252 	movx	@r0,a
      000599 08               [12] 1253 	inc	r0
      00059A EE               [12] 1254 	mov	a,r6
      00059B F2               [24] 1255 	movx	@r0,a
      00059C 80 73            [24] 1256 	sjmp	00185$
      00059E                       1257 00184$:
                                   1258 ;	printf_large.c:739: else if (long_argument)
      00059E 78r1A            [12] 1259 	mov	r0,#__print_format_long_argument_65536_78
      0005A0 E2               [24] 1260 	movx	a,@r0
      0005A1 60 28            [24] 1261 	jz	00181$
                                   1262 ;	printf_large.c:741: value.l = va_arg(ap, long);
      0005A3 78r13            [12] 1263 	mov	r0,#__print_format_PARM_4
      0005A5 E2               [24] 1264 	movx	a,@r0
      0005A6 24 FC            [12] 1265 	add	a,#0xfc
      0005A8 FE               [12] 1266 	mov	r6,a
      0005A9 78r13            [12] 1267 	mov	r0,#__print_format_PARM_4
      0005AB F2               [24] 1268 	movx	@r0,a
      0005AC 8E 01            [24] 1269 	mov	ar1,r6
      0005AE 87 02            [24] 1270 	mov	ar2,@r1
      0005B0 09               [12] 1271 	inc	r1
      0005B1 87 03            [24] 1272 	mov	ar3,@r1
      0005B3 09               [12] 1273 	inc	r1
      0005B4 87 05            [24] 1274 	mov	ar5,@r1
      0005B6 09               [12] 1275 	inc	r1
      0005B7 87 06            [24] 1276 	mov	ar6,@r1
      0005B9 19               [12] 1277 	dec	r1
      0005BA 19               [12] 1278 	dec	r1
      0005BB 19               [12] 1279 	dec	r1
      0005BC 78r06            [12] 1280 	mov	r0,#_value
      0005BE EA               [12] 1281 	mov	a,r2
      0005BF F2               [24] 1282 	movx	@r0,a
      0005C0 08               [12] 1283 	inc	r0
      0005C1 EB               [12] 1284 	mov	a,r3
      0005C2 F2               [24] 1285 	movx	@r0,a
      0005C3 08               [12] 1286 	inc	r0
      0005C4 ED               [12] 1287 	mov	a,r5
      0005C5 F2               [24] 1288 	movx	@r0,a
      0005C6 08               [12] 1289 	inc	r0
      0005C7 EE               [12] 1290 	mov	a,r6
      0005C8 F2               [24] 1291 	movx	@r0,a
      0005C9 80 46            [24] 1292 	sjmp	00185$
      0005CB                       1293 00181$:
                                   1294 ;	printf_large.c:745: value.l = va_arg(ap, int);
      0005CB 78r13            [12] 1295 	mov	r0,#__print_format_PARM_4
      0005CD E2               [24] 1296 	movx	a,@r0
      0005CE 24 FE            [12] 1297 	add	a,#0xfe
      0005D0 FE               [12] 1298 	mov	r6,a
      0005D1 78r13            [12] 1299 	mov	r0,#__print_format_PARM_4
      0005D3 F2               [24] 1300 	movx	@r0,a
      0005D4 8E 01            [24] 1301 	mov	ar1,r6
      0005D6 87 03            [24] 1302 	mov	ar3,@r1
      0005D8 09               [12] 1303 	inc	r1
      0005D9 87 06            [24] 1304 	mov	ar6,@r1
      0005DB 19               [12] 1305 	dec	r1
      0005DC EE               [12] 1306 	mov	a,r6
      0005DD FA               [12] 1307 	mov	r2,a
      0005DE 33               [12] 1308 	rlc	a
      0005DF 95 E0            [12] 1309 	subb	a,acc
      0005E1 FD               [12] 1310 	mov	r5,a
      0005E2 FE               [12] 1311 	mov	r6,a
      0005E3 78r06            [12] 1312 	mov	r0,#_value
      0005E5 EB               [12] 1313 	mov	a,r3
      0005E6 F2               [24] 1314 	movx	@r0,a
      0005E7 08               [12] 1315 	inc	r0
      0005E8 EA               [12] 1316 	mov	a,r2
      0005E9 F2               [24] 1317 	movx	@r0,a
      0005EA 08               [12] 1318 	inc	r0
      0005EB ED               [12] 1319 	mov	a,r5
      0005EC F2               [24] 1320 	movx	@r0,a
      0005ED 08               [12] 1321 	inc	r0
      0005EE EE               [12] 1322 	mov	a,r6
      0005EF F2               [24] 1323 	movx	@r0,a
                                   1324 ;	printf_large.c:746: if (!signed_argument)
      0005F0 78r18            [12] 1325 	mov	r0,#__print_format_signed_argument_65536_78
      0005F2 E2               [24] 1326 	movx	a,@r0
      0005F3 70 1C            [24] 1327 	jnz	00185$
                                   1328 ;	printf_large.c:748: value.l &= 0xFFFF;
      0005F5 78r06            [12] 1329 	mov	r0,#_value
      0005F7 E2               [24] 1330 	movx	a,@r0
      0005F8 FA               [12] 1331 	mov	r2,a
      0005F9 08               [12] 1332 	inc	r0
      0005FA E2               [24] 1333 	movx	a,@r0
      0005FB FB               [12] 1334 	mov	r3,a
      0005FC 08               [12] 1335 	inc	r0
      0005FD E2               [24] 1336 	movx	a,@r0
      0005FE 08               [12] 1337 	inc	r0
      0005FF E2               [24] 1338 	movx	a,@r0
      000600 7D 00            [12] 1339 	mov	r5,#0x00
      000602 7E 00            [12] 1340 	mov	r6,#0x00
      000604 78r06            [12] 1341 	mov	r0,#_value
      000606 EA               [12] 1342 	mov	a,r2
      000607 F2               [24] 1343 	movx	@r0,a
      000608 08               [12] 1344 	inc	r0
      000609 EB               [12] 1345 	mov	a,r3
      00060A F2               [24] 1346 	movx	@r0,a
      00060B 08               [12] 1347 	inc	r0
      00060C ED               [12] 1348 	mov	a,r5
      00060D F2               [24] 1349 	movx	@r0,a
      00060E 08               [12] 1350 	inc	r0
      00060F EE               [12] 1351 	mov	a,r6
      000610 F2               [24] 1352 	movx	@r0,a
                                   1353 ;	printf_large.c:877: return charsOutputted;
                                   1354 ;	printf_large.c:748: value.l &= 0xFFFF;
      000611                       1355 00185$:
                                   1356 ;	printf_large.c:752: if ( signed_argument )
      000611 78r18            [12] 1357 	mov	r0,#__print_format_signed_argument_65536_78
      000613 E2               [24] 1358 	movx	a,@r0
      000614 60 3D            [24] 1359 	jz	00190$
                                   1360 ;	printf_large.c:754: if (value.l < 0)
      000616 78r06            [12] 1361 	mov	r0,#_value
      000618 E2               [24] 1362 	movx	a,@r0
      000619 FA               [12] 1363 	mov	r2,a
      00061A 08               [12] 1364 	inc	r0
      00061B E2               [24] 1365 	movx	a,@r0
      00061C FB               [12] 1366 	mov	r3,a
      00061D 08               [12] 1367 	inc	r0
      00061E E2               [24] 1368 	movx	a,@r0
      00061F FD               [12] 1369 	mov	r5,a
      000620 08               [12] 1370 	inc	r0
      000621 E2               [24] 1371 	movx	a,@r0
      000622 FE               [12] 1372 	mov	r6,a
      000623 30 E7 29         [24] 1373 	jnb	acc.7,00187$
                                   1374 ;	printf_large.c:755: value.l = -value.l;
      000626 78r06            [12] 1375 	mov	r0,#_value
      000628 E2               [24] 1376 	movx	a,@r0
      000629 FA               [12] 1377 	mov	r2,a
      00062A 08               [12] 1378 	inc	r0
      00062B E2               [24] 1379 	movx	a,@r0
      00062C FB               [12] 1380 	mov	r3,a
      00062D 08               [12] 1381 	inc	r0
      00062E E2               [24] 1382 	movx	a,@r0
      00062F FD               [12] 1383 	mov	r5,a
      000630 08               [12] 1384 	inc	r0
      000631 E2               [24] 1385 	movx	a,@r0
      000632 FE               [12] 1386 	mov	r6,a
      000633 C3               [12] 1387 	clr	c
      000634 E4               [12] 1388 	clr	a
      000635 9A               [12] 1389 	subb	a,r2
      000636 FA               [12] 1390 	mov	r2,a
      000637 E4               [12] 1391 	clr	a
      000638 9B               [12] 1392 	subb	a,r3
      000639 FB               [12] 1393 	mov	r3,a
      00063A E4               [12] 1394 	clr	a
      00063B 9D               [12] 1395 	subb	a,r5
      00063C FD               [12] 1396 	mov	r5,a
      00063D E4               [12] 1397 	clr	a
      00063E 9E               [12] 1398 	subb	a,r6
      00063F FE               [12] 1399 	mov	r6,a
      000640 78r06            [12] 1400 	mov	r0,#_value
      000642 EA               [12] 1401 	mov	a,r2
      000643 F2               [24] 1402 	movx	@r0,a
      000644 08               [12] 1403 	inc	r0
      000645 EB               [12] 1404 	mov	a,r3
      000646 F2               [24] 1405 	movx	@r0,a
      000647 08               [12] 1406 	inc	r0
      000648 ED               [12] 1407 	mov	a,r5
      000649 F2               [24] 1408 	movx	@r0,a
      00064A 08               [12] 1409 	inc	r0
      00064B EE               [12] 1410 	mov	a,r6
      00064C F2               [24] 1411 	movx	@r0,a
      00064D 80 04            [24] 1412 	sjmp	00190$
      00064F                       1413 00187$:
                                   1414 ;	printf_large.c:757: signed_argument = 0;
      00064F 78r18            [12] 1415 	mov	r0,#__print_format_signed_argument_65536_78
      000651 E4               [12] 1416 	clr	a
      000652 F2               [24] 1417 	movx	@r0,a
      000653                       1418 00190$:
                                   1419 ;	printf_large.c:761: lsd = 1;
      000653 78r1C            [12] 1420 	mov	r0,#__print_format_lsd_65536_78
      000655 74 01            [12] 1421 	mov	a,#0x01
      000657 F2               [24] 1422 	movx	@r0,a
                                   1423 ;	printf_large.c:763: do {
      000658 79r25            [12] 1424 	mov	r1,#(__print_format_store_262144_99 + 0x0005)
      00065A E4               [12] 1425 	clr	a
      00065B F5*06            [12] 1426 	mov	__print_format_sloc3_1_0,a
      00065D F5*07            [12] 1427 	mov	(__print_format_sloc3_1_0 + 1),a
      00065F                       1428 00194$:
                                   1429 ;	printf_large.c:764: value.byte[4] = 0;
      00065F 78r0A            [12] 1430 	mov	r0,#(_value + 0x0004)
      000661 E4               [12] 1431 	clr	a
      000662 F2               [24] 1432 	movx	@r0,a
                                   1433 ;	printf_large.c:768: calculate_digit(radix);
      000663 78r1D            [12] 1434 	mov	r0,#__print_format_radix_65536_78
      000665 E2               [24] 1435 	movx	a,@r0
      000666 F5 82            [12] 1436 	mov	dpl,a
      000668 C0 01            [24] 1437 	push	ar1
      00066A 12r00r64         [24] 1438 	lcall	_calculate_digit
      00066D D0 01            [24] 1439 	pop	ar1
                                   1440 ;	printf_large.c:770: if (!lsd)
      00066F 78r1C            [12] 1441 	mov	r0,#__print_format_lsd_65536_78
      000671 E2               [24] 1442 	movx	a,@r0
      000672 70 16            [24] 1443 	jnz	00192$
                                   1444 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000674 78r0A            [12] 1445 	mov	r0,#(_value + 0x0004)
      000676 E2               [24] 1446 	movx	a,@r0
      000677 C4               [12] 1447 	swap	a
      000678 54 F0            [12] 1448 	anl	a,#0xf0
      00067A FA               [12] 1449 	mov	r2,a
      00067B 78r0A            [12] 1450 	mov	r0,#(_value + 0x0004)
      00067D E2               [24] 1451 	movx	a,@r0
      00067E C4               [12] 1452 	swap	a
      00067F 54 0F            [12] 1453 	anl	a,#0x0f
      000681 42 02            [12] 1454 	orl	ar2,a
      000683 E3               [24] 1455 	movx	a,@r1
      000684 FE               [12] 1456 	mov	r6,a
      000685 4A               [12] 1457 	orl	a,r2
      000686 F3               [24] 1458 	movx	@r1,a
                                   1459 ;	printf_large.c:773: pstore--;
      000687 19               [12] 1460 	dec	r1
      000688 80 05            [24] 1461 	sjmp	00193$
      00068A                       1462 00192$:
                                   1463 ;	printf_large.c:777: *pstore = value.byte[4];
      00068A 78r0A            [12] 1464 	mov	r0,#(_value + 0x0004)
      00068C E2               [24] 1465 	movx	a,@r0
      00068D FA               [12] 1466 	mov	r2,a
      00068E F3               [24] 1467 	movx	@r1,a
      00068F                       1468 00193$:
                                   1469 ;	printf_large.c:779: length++;
      00068F 05*06            [12] 1470 	inc	__print_format_sloc3_1_0
      000691 E4               [12] 1471 	clr	a
      000692 B5*06 02         [24] 1472 	cjne	a,__print_format_sloc3_1_0,00731$
      000695 05*07            [12] 1473 	inc	(__print_format_sloc3_1_0 + 1)
      000697                       1474 00731$:
                                   1475 ;	printf_large.c:780: lsd = !lsd;
      000697 78r1C            [12] 1476 	mov	r0,#__print_format_lsd_65536_78
      000699 E2               [24] 1477 	movx	a,@r0
      00069A B4 01 00         [24] 1478 	cjne	a,#0x01,00732$
      00069D                       1479 00732$:
      00069D E4               [12] 1480 	clr	a
      00069E 33               [12] 1481 	rlc	a
      00069F F2               [24] 1482 	movx	@r0,a
                                   1483 ;	printf_large.c:781: } while( value.ul );
      0006A0 78r06            [12] 1484 	mov	r0,#_value
      0006A2 E2               [24] 1485 	movx	a,@r0
      0006A3 FA               [12] 1486 	mov	r2,a
      0006A4 08               [12] 1487 	inc	r0
      0006A5 E2               [24] 1488 	movx	a,@r0
      0006A6 FB               [12] 1489 	mov	r3,a
      0006A7 08               [12] 1490 	inc	r0
      0006A8 E2               [24] 1491 	movx	a,@r0
      0006A9 FD               [12] 1492 	mov	r5,a
      0006AA 08               [12] 1493 	inc	r0
      0006AB E2               [24] 1494 	movx	a,@r0
      0006AC FE               [12] 1495 	mov	r6,a
      0006AD EA               [12] 1496 	mov	a,r2
      0006AE 4B               [12] 1497 	orl	a,r3
      0006AF 4D               [12] 1498 	orl	a,r5
      0006B0 4E               [12] 1499 	orl	a,r6
      0006B1 70 AC            [24] 1500 	jnz	00194$
                                   1501 ;	printf_large.c:783: if (width == 0)
      0006B3 89 06            [24] 1502 	mov	ar6,r1
      0006B5 78r1E            [12] 1503 	mov	r0,#__print_format_length_65536_78
      0006B7 E5*06            [12] 1504 	mov	a,__print_format_sloc3_1_0
      0006B9 F2               [24] 1505 	movx	@r0,a
      0006BA E5*07            [12] 1506 	mov	a,(__print_format_sloc3_1_0 + 1)
      0006BC 08               [12] 1507 	inc	r0
      0006BD F2               [24] 1508 	movx	@r0,a
      0006BE E5*0A            [12] 1509 	mov	a,__print_format_sloc4_1_0
      0006C0 45*0B            [12] 1510 	orl	a,(__print_format_sloc4_1_0 + 1)
                                   1511 ;	printf_large.c:788: width = 1;
      0006C2 70 05            [24] 1512 	jnz	00198$
      0006C4 75*0A 01         [24] 1513 	mov	__print_format_sloc4_1_0,#0x01
      0006C7 F5*0B            [12] 1514 	mov	(__print_format_sloc4_1_0 + 1),a
      0006C9                       1515 00198$:
                                   1516 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      0006C9 78r15            [12] 1517 	mov	r0,#__print_format_zero_padding_65536_78
      0006CB E2               [24] 1518 	movx	a,@r0
      0006CC 70 3A            [24] 1519 	jnz	00203$
      0006CE 78r14            [12] 1520 	mov	r0,#__print_format_left_justify_65536_78
      0006D0 E2               [24] 1521 	movx	a,@r0
      0006D1 70 35            [24] 1522 	jnz	00203$
                                   1523 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      0006D3 AA*0A            [24] 1524 	mov	r2,__print_format_sloc4_1_0
      0006D5 AB*0B            [24] 1525 	mov	r3,(__print_format_sloc4_1_0 + 1)
      0006D7                       1526 00199$:
      0006D7 C0 06            [24] 1527 	push	ar6
      0006D9 78r1E            [12] 1528 	mov	r0,#__print_format_length_65536_78
      0006DB E2               [24] 1529 	movx	a,@r0
      0006DC FE               [12] 1530 	mov	r6,a
      0006DD 0E               [12] 1531 	inc	r6
      0006DE 8E 05            [24] 1532 	mov	ar5,r6
      0006E0 7E 00            [12] 1533 	mov	r6,#0x00
      0006E2 C3               [12] 1534 	clr	c
      0006E3 ED               [12] 1535 	mov	a,r5
      0006E4 9A               [12] 1536 	subb	a,r2
      0006E5 EE               [12] 1537 	mov	a,r6
      0006E6 9B               [12] 1538 	subb	a,r3
      0006E7 D0 06            [24] 1539 	pop	ar6
      0006E9 50 19            [24] 1540 	jnc	00333$
                                   1541 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      0006EB 75 82 20         [24] 1542 	mov	dpl,#0x20
      0006EE C0 06            [24] 1543 	push	ar6
      0006F0 C0 03            [24] 1544 	push	ar3
      0006F2 C0 02            [24] 1545 	push	ar2
      0006F4 12r00r00         [24] 1546 	lcall	__output_char
      0006F7 D0 02            [24] 1547 	pop	ar2
      0006F9 D0 03            [24] 1548 	pop	ar3
      0006FB D0 06            [24] 1549 	pop	ar6
                                   1550 ;	printf_large.c:797: width--;
      0006FD 1A               [12] 1551 	dec	r2
      0006FE BA FF 01         [24] 1552 	cjne	r2,#0xff,00738$
      000701 1B               [12] 1553 	dec	r3
      000702                       1554 00738$:
      000702 80 D3            [24] 1555 	sjmp	00199$
      000704                       1556 00333$:
      000704 8A*0A            [24] 1557 	mov	__print_format_sloc4_1_0,r2
      000706 8B*0B            [24] 1558 	mov	(__print_format_sloc4_1_0 + 1),r3
      000708                       1559 00203$:
                                   1560 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      000708 78r18            [12] 1561 	mov	r0,#__print_format_signed_argument_65536_78
      00070A E2               [24] 1562 	movx	a,@r0
      00070B 60 15            [24] 1563 	jz	00213$
                                   1564 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      00070D 75 82 2D         [24] 1565 	mov	dpl,#0x2d
      000710 C0 06            [24] 1566 	push	ar6
      000712 12r00r00         [24] 1567 	lcall	__output_char
      000715 D0 06            [24] 1568 	pop	ar6
                                   1569 ;	printf_large.c:805: width--;
      000717 15*0A            [12] 1570 	dec	__print_format_sloc4_1_0
      000719 74 FF            [12] 1571 	mov	a,#0xff
      00071B B5*0A 02         [24] 1572 	cjne	a,__print_format_sloc4_1_0,00740$
      00071E 15*0B            [12] 1573 	dec	(__print_format_sloc4_1_0 + 1)
      000720                       1574 00740$:
      000720 80 3D            [24] 1575 	sjmp	00214$
      000722                       1576 00213$:
                                   1577 ;	printf_large.c:807: else if (length != 0)
      000722 78r1E            [12] 1578 	mov	r0,#__print_format_length_65536_78
      000724 E2               [24] 1579 	movx	a,@r0
      000725 F5 F0            [12] 1580 	mov	b,a
      000727 08               [12] 1581 	inc	r0
      000728 E2               [24] 1582 	movx	a,@r0
      000729 45 F0            [12] 1583 	orl	a,b
      00072B 60 32            [24] 1584 	jz	00214$
                                   1585 ;	printf_large.c:810: if (prefix_sign)
      00072D 78r16            [12] 1586 	mov	r0,#__print_format_prefix_sign_65536_78
      00072F E2               [24] 1587 	movx	a,@r0
      000730 60 15            [24] 1588 	jz	00208$
                                   1589 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      000732 75 82 2B         [24] 1590 	mov	dpl,#0x2b
      000735 C0 06            [24] 1591 	push	ar6
      000737 12r00r00         [24] 1592 	lcall	__output_char
      00073A D0 06            [24] 1593 	pop	ar6
                                   1594 ;	printf_large.c:814: width--;
      00073C 15*0A            [12] 1595 	dec	__print_format_sloc4_1_0
      00073E 74 FF            [12] 1596 	mov	a,#0xff
      000740 B5*0A 02         [24] 1597 	cjne	a,__print_format_sloc4_1_0,00743$
      000743 15*0B            [12] 1598 	dec	(__print_format_sloc4_1_0 + 1)
      000745                       1599 00743$:
      000745 80 18            [24] 1600 	sjmp	00214$
      000747                       1601 00208$:
                                   1602 ;	printf_large.c:816: else if (prefix_space)
      000747 78r17            [12] 1603 	mov	r0,#__print_format_prefix_space_65536_78
      000749 E2               [24] 1604 	movx	a,@r0
      00074A 60 13            [24] 1605 	jz	00214$
                                   1606 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      00074C 75 82 20         [24] 1607 	mov	dpl,#0x20
      00074F C0 06            [24] 1608 	push	ar6
      000751 12r00r00         [24] 1609 	lcall	__output_char
      000754 D0 06            [24] 1610 	pop	ar6
                                   1611 ;	printf_large.c:820: width--;
      000756 15*0A            [12] 1612 	dec	__print_format_sloc4_1_0
      000758 74 FF            [12] 1613 	mov	a,#0xff
      00075A B5*0A 02         [24] 1614 	cjne	a,__print_format_sloc4_1_0,00745$
      00075D 15*0B            [12] 1615 	dec	(__print_format_sloc4_1_0 + 1)
      00075F                       1616 00745$:
      00075F                       1617 00214$:
                                   1618 ;	printf_large.c:825: if (!left_justify)
      00075F 78r14            [12] 1619 	mov	r0,#__print_format_left_justify_65536_78
      000761 E2               [24] 1620 	movx	a,@r0
      000762 70 39            [24] 1621 	jnz	00222$
                                   1622 ;	printf_large.c:827: while ( width-- > length )
      000764 AC*0A            [24] 1623 	mov	r4,__print_format_sloc4_1_0
      000766 AD*0B            [24] 1624 	mov	r5,(__print_format_sloc4_1_0 + 1)
      000768                       1625 00215$:
      000768 8C 02            [24] 1626 	mov	ar2,r4
      00076A 8D 03            [24] 1627 	mov	ar3,r5
      00076C 1C               [12] 1628 	dec	r4
      00076D BC FF 01         [24] 1629 	cjne	r4,#0xff,00747$
      000770 1D               [12] 1630 	dec	r5
      000771                       1631 00747$:
      000771 78r1E            [12] 1632 	mov	r0,#__print_format_length_65536_78
      000773 C3               [12] 1633 	clr	c
      000774 E2               [24] 1634 	movx	a,@r0
      000775 9A               [12] 1635 	subb	a,r2
      000776 08               [12] 1636 	inc	r0
      000777 E2               [24] 1637 	movx	a,@r0
      000778 9B               [12] 1638 	subb	a,r3
      000779 50 49            [24] 1639 	jnc	00334$
                                   1640 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      00077B 78r15            [12] 1641 	mov	r0,#__print_format_zero_padding_65536_78
      00077D E2               [24] 1642 	movx	a,@r0
      00077E 60 06            [24] 1643 	jz	00248$
      000780 7A 30            [12] 1644 	mov	r2,#0x30
      000782 7B 00            [12] 1645 	mov	r3,#0x00
      000784 80 04            [24] 1646 	sjmp	00249$
      000786                       1647 00248$:
      000786 7A 20            [12] 1648 	mov	r2,#0x20
      000788 7B 00            [12] 1649 	mov	r3,#0x00
      00078A                       1650 00249$:
      00078A 8A 82            [24] 1651 	mov	dpl,r2
      00078C C0 06            [24] 1652 	push	ar6
      00078E C0 05            [24] 1653 	push	ar5
      000790 C0 04            [24] 1654 	push	ar4
      000792 12r00r00         [24] 1655 	lcall	__output_char
      000795 D0 04            [24] 1656 	pop	ar4
      000797 D0 05            [24] 1657 	pop	ar5
      000799 D0 06            [24] 1658 	pop	ar6
      00079B 80 CB            [24] 1659 	sjmp	00215$
      00079D                       1660 00222$:
                                   1661 ;	printf_large.c:835: if (width > length)
      00079D 78r1E            [12] 1662 	mov	r0,#__print_format_length_65536_78
      00079F C3               [12] 1663 	clr	c
      0007A0 E2               [24] 1664 	movx	a,@r0
      0007A1 95*0A            [12] 1665 	subb	a,__print_format_sloc4_1_0
      0007A3 08               [12] 1666 	inc	r0
      0007A4 E2               [24] 1667 	movx	a,@r0
      0007A5 95*0B            [12] 1668 	subb	a,(__print_format_sloc4_1_0 + 1)
      0007A7 50 14            [24] 1669 	jnc	00219$
                                   1670 ;	printf_large.c:836: width -= length;
      0007A9 78r1E            [12] 1671 	mov	r0,#__print_format_length_65536_78
      0007AB D3               [12] 1672 	setb	c
      0007AC E2               [24] 1673 	movx	a,@r0
      0007AD 95*0A            [12] 1674 	subb	a,__print_format_sloc4_1_0
      0007AF F4               [12] 1675 	cpl	a
      0007B0 B3               [12] 1676 	cpl	c
      0007B1 F5*0A            [12] 1677 	mov	__print_format_sloc4_1_0,a
      0007B3 B3               [12] 1678 	cpl	c
      0007B4 08               [12] 1679 	inc	r0
      0007B5 E2               [24] 1680 	movx	a,@r0
      0007B6 95*0B            [12] 1681 	subb	a,(__print_format_sloc4_1_0 + 1)
      0007B8 F4               [12] 1682 	cpl	a
      0007B9 F5*0B            [12] 1683 	mov	(__print_format_sloc4_1_0 + 1),a
      0007BB 80 0B            [24] 1684 	sjmp	00326$
      0007BD                       1685 00219$:
                                   1686 ;	printf_large.c:838: width = 0;
      0007BD E4               [12] 1687 	clr	a
      0007BE F5*0A            [12] 1688 	mov	__print_format_sloc4_1_0,a
      0007C0 F5*0B            [12] 1689 	mov	(__print_format_sloc4_1_0 + 1),a
                                   1690 ;	printf_large.c:877: return charsOutputted;
                                   1691 ;	printf_large.c:842: while( length-- )
      0007C2 80 04            [24] 1692 	sjmp	00326$
      0007C4                       1693 00334$:
      0007C4 8C*0A            [24] 1694 	mov	__print_format_sloc4_1_0,r4
      0007C6 8D*0B            [24] 1695 	mov	(__print_format_sloc4_1_0 + 1),r5
      0007C8                       1696 00326$:
      0007C8 8E 01            [24] 1697 	mov	ar1,r6
      0007CA 78r1E            [12] 1698 	mov	r0,#__print_format_length_65536_78
      0007CC E2               [24] 1699 	movx	a,@r0
      0007CD FD               [12] 1700 	mov	r5,a
      0007CE 08               [12] 1701 	inc	r0
      0007CF E2               [24] 1702 	movx	a,@r0
      0007D0 FE               [12] 1703 	mov	r6,a
      0007D1                       1704 00227$:
      0007D1 8D 03            [24] 1705 	mov	ar3,r5
      0007D3 8E 04            [24] 1706 	mov	ar4,r6
      0007D5 1D               [12] 1707 	dec	r5
      0007D6 BD FF 01         [24] 1708 	cjne	r5,#0xff,00751$
      0007D9 1E               [12] 1709 	dec	r6
      0007DA                       1710 00751$:
      0007DA EB               [12] 1711 	mov	a,r3
      0007DB 4C               [12] 1712 	orl	a,r4
      0007DC 60 38            [24] 1713 	jz	00229$
                                   1714 ;	printf_large.c:844: lsd = !lsd;
      0007DE 78r1C            [12] 1715 	mov	r0,#__print_format_lsd_65536_78
      0007E0 E2               [24] 1716 	movx	a,@r0
      0007E1 B4 01 00         [24] 1717 	cjne	a,#0x01,00753$
      0007E4                       1718 00753$:
      0007E4 E4               [12] 1719 	clr	a
      0007E5 33               [12] 1720 	rlc	a
      0007E6 F2               [24] 1721 	movx	@r0,a
                                   1722 ;	printf_large.c:845: if (!lsd)
      0007E7 78r1C            [12] 1723 	mov	r0,#__print_format_lsd_65536_78
      0007E9 E2               [24] 1724 	movx	a,@r0
      0007EA 70 0B            [24] 1725 	jnz	00225$
                                   1726 ;	printf_large.c:847: pstore++;
      0007EC 09               [12] 1727 	inc	r1
                                   1728 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      0007ED E3               [24] 1729 	movx	a,@r1
      0007EE C4               [12] 1730 	swap	a
      0007EF 54 0F            [12] 1731 	anl	a,#0x0f
      0007F1 FC               [12] 1732 	mov	r4,a
      0007F2 78r0A            [12] 1733 	mov	r0,#(_value + 0x0004)
      0007F4 F2               [24] 1734 	movx	@r0,a
      0007F5 80 09            [24] 1735 	sjmp	00226$
      0007F7                       1736 00225$:
                                   1737 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      0007F7 E3               [24] 1738 	movx	a,@r1
      0007F8 FC               [12] 1739 	mov	r4,a
      0007F9 53 04 0F         [24] 1740 	anl	ar4,#0x0f
      0007FC 78r0A            [12] 1741 	mov	r0,#(_value + 0x0004)
      0007FE EC               [12] 1742 	mov	a,r4
      0007FF F2               [24] 1743 	movx	@r0,a
      000800                       1744 00226$:
                                   1745 ;	printf_large.c:858: output_digit( value.byte[4] );
      000800 78r0A            [12] 1746 	mov	r0,#(_value + 0x0004)
      000802 E2               [24] 1747 	movx	a,@r0
      000803 F5 82            [12] 1748 	mov	dpl,a
      000805 C0 06            [24] 1749 	push	ar6
      000807 C0 05            [24] 1750 	push	ar5
      000809 C0 01            [24] 1751 	push	ar1
      00080B 12r00r32         [24] 1752 	lcall	_output_digit
      00080E D0 01            [24] 1753 	pop	ar1
      000810 D0 05            [24] 1754 	pop	ar5
      000812 D0 06            [24] 1755 	pop	ar6
      000814 80 BB            [24] 1756 	sjmp	00227$
      000816                       1757 00229$:
                                   1758 ;	printf_large.c:861: if (left_justify)
      000816 78r14            [12] 1759 	mov	r0,#__print_format_left_justify_65536_78
      000818 E2               [24] 1760 	movx	a,@r0
      000819 70 03            [24] 1761 	jnz	00755$
      00081B 02r00rE7         [24] 1762 	ljmp	00243$
      00081E                       1763 00755$:
                                   1764 ;	printf_large.c:863: while (width-- > 0)
      00081E AD*0A            [24] 1765 	mov	r5,__print_format_sloc4_1_0
      000820 AE*0B            [24] 1766 	mov	r6,(__print_format_sloc4_1_0 + 1)
      000822                       1767 00230$:
      000822 8D 03            [24] 1768 	mov	ar3,r5
      000824 8E 04            [24] 1769 	mov	ar4,r6
      000826 1D               [12] 1770 	dec	r5
      000827 BD FF 01         [24] 1771 	cjne	r5,#0xff,00756$
      00082A 1E               [12] 1772 	dec	r6
      00082B                       1773 00756$:
      00082B EB               [12] 1774 	mov	a,r3
      00082C 4C               [12] 1775 	orl	a,r4
      00082D 70 03            [24] 1776 	jnz	00757$
      00082F 02r00rE7         [24] 1777 	ljmp	00243$
      000832                       1778 00757$:
                                   1779 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      000832 75 82 20         [24] 1780 	mov	dpl,#0x20
      000835 C0 06            [24] 1781 	push	ar6
      000837 C0 05            [24] 1782 	push	ar5
      000839 12r00r00         [24] 1783 	lcall	__output_char
      00083C D0 05            [24] 1784 	pop	ar5
      00083E D0 06            [24] 1785 	pop	ar6
      000840 80 E0            [24] 1786 	sjmp	00230$
      000842                       1787 00241$:
                                   1788 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      000842 8F 82            [24] 1789 	mov	dpl,r7
      000844 12r00r00         [24] 1790 	lcall	__output_char
      000847 02r00rE7         [24] 1791 	ljmp	00243$
      00084A                       1792 00245$:
                                   1793 ;	printf_large.c:877: return charsOutputted;
      00084A 78r0B            [12] 1794 	mov	r0,#_charsOutputted
      00084C E2               [24] 1795 	movx	a,@r0
      00084D F5 82            [12] 1796 	mov	dpl,a
      00084F 08               [12] 1797 	inc	r0
      000850 E2               [24] 1798 	movx	a,@r0
      000851 F5 83            [12] 1799 	mov	dph,a
                                   1800 ;	printf_large.c:878: }
      000853 22               [24] 1801 	ret
                                   1802 	.area CSEG    (CODE)
                                   1803 	.area CONST   (CODE)
                                   1804 	.area CONST   (CODE)
      000000                       1805 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  1806 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    1807 	.db 0x00
                                   1808 	.area CSEG    (CODE)
                                   1809 	.area XINIT   (CODE)
                                   1810 	.area CABS    (ABS,CODE)
