                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module qsort
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _qsort_PARM_4
                                     12 	.globl _qsort_PARM_3
                                     13 	.globl _qsort_PARM_2
                                     14 	.globl _qsort
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _qsort_sloc0_1_0:
      000000                         35 	.ds 3
      000003                         36 _qsort_sloc1_1_0:
      000003                         37 	.ds 3
      000006                         38 _qsort_sloc2_1_0:
      000006                         39 	.ds 3
                                     40 ;--------------------------------------------------------
                                     41 ; overlayable items in internal ram
                                     42 ;--------------------------------------------------------
                                     43 	.area	OSEG    (OVR,DATA)
      000000                         44 _swap_sloc0_1_0:
      000000                         45 	.ds 2
      000002                         46 _swap_sloc1_1_0:
      000002                         47 	.ds 3
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
                                     61 ;--------------------------------------------------------
                                     62 ; paged external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area PSEG    (PAG,XDATA)
      000000                         65 _swap_PARM_2:
      000000                         66 	.ds 3
      000003                         67 _swap_PARM_3:
      000003                         68 	.ds 2
      000005                         69 _qsort_PARM_2:
      000005                         70 	.ds 2
      000007                         71 _qsort_PARM_3:
      000007                         72 	.ds 2
      000009                         73 _qsort_PARM_4:
      000009                         74 	.ds 2
      00000B                         75 _qsort_b_65536_44:
      00000B                         76 	.ds 3
      00000E                         77 _qsort_i_131072_45:
      00000E                         78 	.ds 3
      000011                         79 _qsort_j_262144_47:
      000011                         80 	.ds 3
                                     81 ;--------------------------------------------------------
                                     82 ; uninitialized external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XSEG    (XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; absolute external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XABS    (ABS,XDATA)
                                     89 ;--------------------------------------------------------
                                     90 ; initialized external ram data
                                     91 ;--------------------------------------------------------
                                     92 	.area XISEG   (XDATA)
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT0 (CODE)
                                     95 	.area GSINIT1 (CODE)
                                     96 	.area GSINIT2 (CODE)
                                     97 	.area GSINIT3 (CODE)
                                     98 	.area GSINIT4 (CODE)
                                     99 	.area GSINIT5 (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 	.area GSFINAL (CODE)
                                    102 	.area CSEG    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME    (CODE)
                                    107 	.area GSINIT  (CODE)
                                    108 	.area GSFINAL (CODE)
                                    109 	.area GSINIT  (CODE)
                                    110 ;--------------------------------------------------------
                                    111 ; Home
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME    (CODE)
                                    114 	.area HOME    (CODE)
                                    115 ;--------------------------------------------------------
                                    116 ; code
                                    117 ;--------------------------------------------------------
                                    118 	.area CSEG    (CODE)
                                    119 ;------------------------------------------------------------
                                    120 ;Allocation info for local variables in function 'swap'
                                    121 ;------------------------------------------------------------
                                    122 ;sloc0                     Allocated with name '_swap_sloc0_1_0'
                                    123 ;sloc1                     Allocated with name '_swap_sloc1_1_0'
                                    124 ;------------------------------------------------------------
                                    125 ;	qsort.c:33: static void swap(void *restrict dst, void *restrict src, size_t n)
                                    126 ;	-----------------------------------------
                                    127 ;	 function swap
                                    128 ;	-----------------------------------------
      000000                        129 _swap:
                           000007   130 	ar7 = 0x07
                           000006   131 	ar6 = 0x06
                           000005   132 	ar5 = 0x05
                           000004   133 	ar4 = 0x04
                           000003   134 	ar3 = 0x03
                           000002   135 	ar2 = 0x02
                           000001   136 	ar1 = 0x01
                           000000   137 	ar0 = 0x00
      000000 AD 82            [24]  138 	mov	r5,dpl
      000002 AE 83            [24]  139 	mov	r6,dph
      000004 AF F0            [24]  140 	mov	r7,b
                                    141 ;	qsort.c:35: unsigned char *restrict d = dst;
                                    142 ;	qsort.c:36: unsigned char *restrict s = src;
      000006 78r00            [12]  143 	mov	r0,#_swap_PARM_2
      000008 E2               [24]  144 	movx	a,@r0
      000009 F5*02            [12]  145 	mov	_swap_sloc1_1_0,a
      00000B 08               [12]  146 	inc	r0
      00000C E2               [24]  147 	movx	a,@r0
      00000D F5*03            [12]  148 	mov	(_swap_sloc1_1_0 + 1),a
      00000F 08               [12]  149 	inc	r0
      000010 E2               [24]  150 	movx	a,@r0
      000011 F5*04            [12]  151 	mov	(_swap_sloc1_1_0 + 2),a
                                    152 ;	qsort.c:38: while(n--)
      000013 78r03            [12]  153 	mov	r0,#_swap_PARM_3
      000015 E2               [24]  154 	movx	a,@r0
      000016 F5*00            [12]  155 	mov	_swap_sloc0_1_0,a
      000018 08               [12]  156 	inc	r0
      000019 E2               [24]  157 	movx	a,@r0
      00001A F5*01            [12]  158 	mov	(_swap_sloc0_1_0 + 1),a
      00001C                        159 00101$:
      00001C AB*00            [24]  160 	mov	r3,_swap_sloc0_1_0
      00001E AC*01            [24]  161 	mov	r4,(_swap_sloc0_1_0 + 1)
      000020 15*00            [12]  162 	dec	_swap_sloc0_1_0
      000022 74 FF            [12]  163 	mov	a,#0xff
      000024 B5*00 02         [24]  164 	cjne	a,_swap_sloc0_1_0,00115$
      000027 15*01            [12]  165 	dec	(_swap_sloc0_1_0 + 1)
      000029                        166 00115$:
      000029 EB               [12]  167 	mov	a,r3
      00002A 4C               [12]  168 	orl	a,r4
      00002B 60 3B            [24]  169 	jz	00104$
                                    170 ;	qsort.c:40: unsigned char tmp = *d;
      00002D 8D 82            [24]  171 	mov	dpl,r5
      00002F 8E 83            [24]  172 	mov	dph,r6
      000031 8F F0            [24]  173 	mov	b,r7
      000033 12r00r00         [24]  174 	lcall	__gptrget
      000036 FC               [12]  175 	mov	r4,a
                                    176 ;	qsort.c:41: *d = *s;
      000037 85*02 82         [24]  177 	mov	dpl,_swap_sloc1_1_0
      00003A 85*03 83         [24]  178 	mov	dph,(_swap_sloc1_1_0 + 1)
      00003D 85*04 F0         [24]  179 	mov	b,(_swap_sloc1_1_0 + 2)
      000040 12r00r00         [24]  180 	lcall	__gptrget
      000043 FB               [12]  181 	mov	r3,a
      000044 8D 82            [24]  182 	mov	dpl,r5
      000046 8E 83            [24]  183 	mov	dph,r6
      000048 8F F0            [24]  184 	mov	b,r7
      00004A 12r00r00         [24]  185 	lcall	__gptrput
      00004D A3               [24]  186 	inc	dptr
      00004E AD 82            [24]  187 	mov	r5,dpl
      000050 AE 83            [24]  188 	mov	r6,dph
                                    189 ;	qsort.c:42: *s = tmp;
      000052 85*02 82         [24]  190 	mov	dpl,_swap_sloc1_1_0
      000055 85*03 83         [24]  191 	mov	dph,(_swap_sloc1_1_0 + 1)
      000058 85*04 F0         [24]  192 	mov	b,(_swap_sloc1_1_0 + 2)
      00005B EC               [12]  193 	mov	a,r4
      00005C 12r00r00         [24]  194 	lcall	__gptrput
      00005F A3               [24]  195 	inc	dptr
      000060 85 82*02         [24]  196 	mov	_swap_sloc1_1_0,dpl
      000063 85 83*03         [24]  197 	mov	(_swap_sloc1_1_0 + 1),dph
                                    198 ;	qsort.c:43: d++;
                                    199 ;	qsort.c:44: s++;
      000066 80 B4            [24]  200 	sjmp	00101$
      000068                        201 00104$:
                                    202 ;	qsort.c:46: }
      000068 22               [24]  203 	ret
                                    204 ;------------------------------------------------------------
                                    205 ;Allocation info for local variables in function 'qsort'
                                    206 ;------------------------------------------------------------
                                    207 ;sloc0                     Allocated with name '_qsort_sloc0_1_0'
                                    208 ;sloc1                     Allocated with name '_qsort_sloc1_1_0'
                                    209 ;sloc2                     Allocated with name '_qsort_sloc2_1_0'
                                    210 ;------------------------------------------------------------
                                    211 ;	qsort.c:48: void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                                    212 ;	-----------------------------------------
                                    213 ;	 function qsort
                                    214 ;	-----------------------------------------
      000069                        215 _qsort:
      000069 AD 82            [24]  216 	mov	r5,dpl
      00006B AE 83            [24]  217 	mov	r6,dph
      00006D AF F0            [24]  218 	mov	r7,b
                                    219 ;	qsort.c:50: unsigned char *b = base;
      00006F 78r0B            [12]  220 	mov	r0,#_qsort_b_65536_44
      000071 ED               [12]  221 	mov	a,r5
      000072 F2               [24]  222 	movx	@r0,a
      000073 EE               [12]  223 	mov	a,r6
      000074 08               [12]  224 	inc	r0
      000075 F2               [24]  225 	movx	@r0,a
      000076 EF               [12]  226 	mov	a,r7
      000077 08               [12]  227 	inc	r0
      000078 F2               [24]  228 	movx	@r0,a
                                    229 ;	qsort.c:52: if(nmemb <= 1)
      000079 78r05            [12]  230 	mov	r0,#_qsort_PARM_2
      00007B C3               [12]  231 	clr	c
      00007C E2               [24]  232 	movx	a,@r0
      00007D F5 F0            [12]  233 	mov	b,a
      00007F 74 01            [12]  234 	mov	a,#0x01
      000081 95 F0            [12]  235 	subb	a,b
      000083 08               [12]  236 	inc	r0
      000084 E2               [24]  237 	movx	a,@r0
      000085 F5 F0            [12]  238 	mov	b,a
      000087 E4               [12]  239 	clr	a
      000088 95 F0            [12]  240 	subb	a,b
      00008A 40 01            [24]  241 	jc	00102$
                                    242 ;	qsort.c:53: return;
      00008C 22               [24]  243 	ret
      00008D                        244 00102$:
                                    245 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      00008D 78r0E            [12]  246 	mov	r0,#_qsort_i_131072_45
      00008F ED               [12]  247 	mov	a,r5
      000090 F2               [24]  248 	movx	@r0,a
      000091 EE               [12]  249 	mov	a,r6
      000092 08               [12]  250 	inc	r0
      000093 F2               [24]  251 	movx	@r0,a
      000094 EF               [12]  252 	mov	a,r7
      000095 08               [12]  253 	inc	r0
      000096 F2               [24]  254 	movx	@r0,a
      000097 78r07            [12]  255 	mov	r0,#_qsort_PARM_3
      000099 E2               [24]  256 	movx	a,@r0
      00009A FB               [12]  257 	mov	r3,a
      00009B 08               [12]  258 	inc	r0
      00009C E2               [24]  259 	movx	a,@r0
      00009D FC               [12]  260 	mov	r4,a
      00009E 78r00            [12]  261 	mov	r0,#__mulint_PARM_2
      0000A0 EB               [12]  262 	mov	a,r3
      0000A1 F2               [24]  263 	movx	@r0,a
      0000A2 EC               [12]  264 	mov	a,r4
      0000A3 08               [12]  265 	inc	r0
      0000A4 F2               [24]  266 	movx	@r0,a
      0000A5 78r05            [12]  267 	mov	r0,#_qsort_PARM_2
      0000A7 E2               [24]  268 	movx	a,@r0
      0000A8 F5 82            [12]  269 	mov	dpl,a
      0000AA 08               [12]  270 	inc	r0
      0000AB E2               [24]  271 	movx	a,@r0
      0000AC F5 83            [12]  272 	mov	dph,a
      0000AE C0 04            [24]  273 	push	ar4
      0000B0 C0 03            [24]  274 	push	ar3
      0000B2 12r00r00         [24]  275 	lcall	__mulint
      0000B5 AA 82            [24]  276 	mov	r2,dpl
      0000B7 AF 83            [24]  277 	mov	r7,dph
      0000B9 D0 03            [24]  278 	pop	ar3
      0000BB D0 04            [24]  279 	pop	ar4
      0000BD 78r0B            [12]  280 	mov	r0,#_qsort_b_65536_44
      0000BF E2               [24]  281 	movx	a,@r0
      0000C0 2A               [12]  282 	add	a,r2
      0000C1 F5*00            [12]  283 	mov	_qsort_sloc0_1_0,a
      0000C3 08               [12]  284 	inc	r0
      0000C4 E2               [24]  285 	movx	a,@r0
      0000C5 3F               [12]  286 	addc	a,r7
      0000C6 F5*01            [12]  287 	mov	(_qsort_sloc0_1_0 + 1),a
      0000C8 08               [12]  288 	inc	r0
      0000C9 E2               [24]  289 	movx	a,@r0
      0000CA F5*02            [12]  290 	mov	(_qsort_sloc0_1_0 + 2),a
      0000CC                        291 00110$:
      0000CC 78r0E            [12]  292 	mov	r0,#_qsort_i_131072_45
      0000CE C0*00            [24]  293 	push	_qsort_sloc0_1_0
      0000D0 C0*01            [24]  294 	push	(_qsort_sloc0_1_0 + 1)
      0000D2 C0*02            [24]  295 	push	(_qsort_sloc0_1_0 + 2)
      0000D4 E2               [24]  296 	movx	a,@r0
      0000D5 F5 82            [12]  297 	mov	dpl,a
      0000D7 08               [12]  298 	inc	r0
      0000D8 E2               [24]  299 	movx	a,@r0
      0000D9 F5 83            [12]  300 	mov	dph,a
      0000DB 08               [12]  301 	inc	r0
      0000DC E2               [24]  302 	movx	a,@r0
      0000DD F5 F0            [12]  303 	mov	b,a
      0000DF 12r00r00         [24]  304 	lcall	___gptr_cmp
      0000E2 15 81            [12]  305 	dec	sp
      0000E4 15 81            [12]  306 	dec	sp
      0000E6 15 81            [12]  307 	dec	sp
      0000E8 40 01            [24]  308 	jc	00139$
      0000EA 22               [24]  309 	ret
      0000EB                        310 00139$:
                                    311 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      0000EB 78r0E            [12]  312 	mov	r0,#_qsort_i_131072_45
      0000ED 79r11            [12]  313 	mov	r1,#_qsort_j_262144_47
      0000EF E2               [24]  314 	movx	a,@r0
      0000F0 F3               [24]  315 	movx	@r1,a
      0000F1 08               [12]  316 	inc	r0
      0000F2 E2               [24]  317 	movx	a,@r0
      0000F3 09               [12]  318 	inc	r1
      0000F4 F3               [24]  319 	movx	@r1,a
      0000F5 08               [12]  320 	inc	r0
      0000F6 E2               [24]  321 	movx	a,@r0
      0000F7 09               [12]  322 	inc	r1
      0000F8 F3               [24]  323 	movx	@r1,a
      0000F9                        324 00107$:
      0000F9 78r11            [12]  325 	mov	r0,#_qsort_j_262144_47
      0000FB 79r0B            [12]  326 	mov	r1,#_qsort_b_65536_44
      0000FD E2               [24]  327 	movx	a,@r0
      0000FE C0 E0            [24]  328 	push	acc
      000100 08               [12]  329 	inc	r0
      000101 E2               [24]  330 	movx	a,@r0
      000102 C0 E0            [24]  331 	push	acc
      000104 08               [12]  332 	inc	r0
      000105 E2               [24]  333 	movx	a,@r0
      000106 C0 E0            [24]  334 	push	acc
      000108 E3               [24]  335 	movx	a,@r1
      000109 F5 82            [12]  336 	mov	dpl,a
      00010B 09               [12]  337 	inc	r1
      00010C E3               [24]  338 	movx	a,@r1
      00010D F5 83            [12]  339 	mov	dph,a
      00010F 09               [12]  340 	inc	r1
      000110 E3               [24]  341 	movx	a,@r1
      000111 F5 F0            [12]  342 	mov	b,a
      000113 12r00r00         [24]  343 	lcall	___gptr_cmp
      000116 15 81            [12]  344 	dec	sp
      000118 15 81            [12]  345 	dec	sp
      00011A 15 81            [12]  346 	dec	sp
      00011C 40 03            [24]  347 	jc	00140$
      00011E 02r01rC2         [24]  348 	ljmp	00111$
      000121                        349 00140$:
      000121 78r11            [12]  350 	mov	r0,#_qsort_j_262144_47
      000123 E2               [24]  351 	movx	a,@r0
      000124 C3               [12]  352 	clr	c
      000125 9B               [12]  353 	subb	a,r3
      000126 F5*03            [12]  354 	mov	_qsort_sloc1_1_0,a
      000128 08               [12]  355 	inc	r0
      000129 E2               [24]  356 	movx	a,@r0
      00012A 9C               [12]  357 	subb	a,r4
      00012B F5*04            [12]  358 	mov	(_qsort_sloc1_1_0 + 1),a
      00012D 08               [12]  359 	inc	r0
      00012E E2               [24]  360 	movx	a,@r0
      00012F F5*05            [12]  361 	mov	(_qsort_sloc1_1_0 + 2),a
      000131 C0 03            [24]  362 	push	ar3
      000133 C0 04            [24]  363 	push	ar4
      000135 AB*03            [24]  364 	mov	r3,_qsort_sloc1_1_0
      000137 AC*04            [24]  365 	mov	r4,(_qsort_sloc1_1_0 + 1)
      000139 AD*05            [24]  366 	mov	r5,(_qsort_sloc1_1_0 + 2)
      00013B 78r11            [12]  367 	mov	r0,#_qsort_j_262144_47
      00013D E2               [24]  368 	movx	a,@r0
      00013E FA               [12]  369 	mov	r2,a
      00013F 08               [12]  370 	inc	r0
      000140 E2               [24]  371 	movx	a,@r0
      000141 FE               [12]  372 	mov	r6,a
      000142 08               [12]  373 	inc	r0
      000143 E2               [24]  374 	movx	a,@r0
      000144 FF               [12]  375 	mov	r7,a
      000145 C0 04            [24]  376 	push	ar4
      000147 C0 03            [24]  377 	push	ar3
      000149 C0 03            [24]  378 	push	ar3
      00014B C0 04            [24]  379 	push	ar4
      00014D C0 05            [24]  380 	push	ar5
      00014F 12r01r54         [24]  381 	lcall	00141$
      000152 80 10            [24]  382 	sjmp	00142$
      000154                        383 00141$:
      000154 78r09            [12]  384 	mov	r0,#_qsort_PARM_4
      000156 E2               [24]  385 	movx	a,@r0
      000157 C0 E0            [24]  386 	push	acc
      000159 08               [12]  387 	inc	r0
      00015A E2               [24]  388 	movx	a,@r0
      00015B C0 E0            [24]  389 	push	acc
      00015D 8A 82            [24]  390 	mov	dpl,r2
      00015F 8E 83            [24]  391 	mov	dph,r6
      000161 8F F0            [24]  392 	mov	b,r7
      000163 22               [24]  393 	ret
      000164                        394 00142$:
      000164 AE 82            [24]  395 	mov	r6,dpl
      000166 AF 83            [24]  396 	mov	r7,dph
      000168 15 81            [12]  397 	dec	sp
      00016A 15 81            [12]  398 	dec	sp
      00016C 15 81            [12]  399 	dec	sp
      00016E D0 03            [24]  400 	pop	ar3
      000170 D0 04            [24]  401 	pop	ar4
      000172 EF               [12]  402 	mov	a,r7
      000173 D0 04            [24]  403 	pop	ar4
      000175 D0 03            [24]  404 	pop	ar3
      000177 30 E7 48         [24]  405 	jnb	acc.7,00111$
                                    406 ;	qsort.c:58: swap(j, j - size, size);
      00017A 78r11            [12]  407 	mov	r0,#_qsort_j_262144_47
      00017C E2               [24]  408 	movx	a,@r0
      00017D F5*06            [12]  409 	mov	_qsort_sloc2_1_0,a
      00017F 08               [12]  410 	inc	r0
      000180 E2               [24]  411 	movx	a,@r0
      000181 F5*07            [12]  412 	mov	(_qsort_sloc2_1_0 + 1),a
      000183 08               [12]  413 	inc	r0
      000184 E2               [24]  414 	movx	a,@r0
      000185 F5*08            [12]  415 	mov	(_qsort_sloc2_1_0 + 2),a
      000187 AD*03            [24]  416 	mov	r5,_qsort_sloc1_1_0
      000189 AE*04            [24]  417 	mov	r6,(_qsort_sloc1_1_0 + 1)
      00018B AF*05            [24]  418 	mov	r7,(_qsort_sloc1_1_0 + 2)
      00018D 78r00            [12]  419 	mov	r0,#_swap_PARM_2
      00018F ED               [12]  420 	mov	a,r5
      000190 F2               [24]  421 	movx	@r0,a
      000191 EE               [12]  422 	mov	a,r6
      000192 08               [12]  423 	inc	r0
      000193 F2               [24]  424 	movx	@r0,a
      000194 EF               [12]  425 	mov	a,r7
      000195 08               [12]  426 	inc	r0
      000196 F2               [24]  427 	movx	@r0,a
      000197 78r03            [12]  428 	mov	r0,#_swap_PARM_3
      000199 EB               [12]  429 	mov	a,r3
      00019A F2               [24]  430 	movx	@r0,a
      00019B EC               [12]  431 	mov	a,r4
      00019C 08               [12]  432 	inc	r0
      00019D F2               [24]  433 	movx	@r0,a
      00019E 85*06 82         [24]  434 	mov	dpl,_qsort_sloc2_1_0
      0001A1 85*07 83         [24]  435 	mov	dph,(_qsort_sloc2_1_0 + 1)
      0001A4 85*08 F0         [24]  436 	mov	b,(_qsort_sloc2_1_0 + 2)
      0001A7 C0 04            [24]  437 	push	ar4
      0001A9 C0 03            [24]  438 	push	ar3
      0001AB 12r00r00         [24]  439 	lcall	_swap
      0001AE D0 03            [24]  440 	pop	ar3
      0001B0 D0 04            [24]  441 	pop	ar4
                                    442 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      0001B2 78r11            [12]  443 	mov	r0,#_qsort_j_262144_47
      0001B4 E5*03            [12]  444 	mov	a,_qsort_sloc1_1_0
      0001B6 F2               [24]  445 	movx	@r0,a
      0001B7 E5*04            [12]  446 	mov	a,(_qsort_sloc1_1_0 + 1)
      0001B9 08               [12]  447 	inc	r0
      0001BA F2               [24]  448 	movx	@r0,a
      0001BB E5*05            [12]  449 	mov	a,(_qsort_sloc1_1_0 + 2)
      0001BD 08               [12]  450 	inc	r0
      0001BE F2               [24]  451 	movx	@r0,a
      0001BF 02r00rF9         [24]  452 	ljmp	00107$
      0001C2                        453 00111$:
                                    454 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      0001C2 78r0E            [12]  455 	mov	r0,#_qsort_i_131072_45
      0001C4 E2               [24]  456 	movx	a,@r0
      0001C5 2B               [12]  457 	add	a,r3
      0001C6 F2               [24]  458 	movx	@r0,a
      0001C7 08               [12]  459 	inc	r0
      0001C8 E2               [24]  460 	movx	a,@r0
      0001C9 3C               [12]  461 	addc	a,r4
      0001CA F2               [24]  462 	movx	@r0,a
                                    463 ;	qsort.c:60: }
      0001CB 02r00rCC         [24]  464 	ljmp	00110$
                                    465 	.area CSEG    (CODE)
                                    466 	.area CONST   (CODE)
                                    467 	.area XINIT   (CODE)
                                    468 	.area CABS    (ABS,CODE)
