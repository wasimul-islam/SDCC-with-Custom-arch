                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf_PARM_3
                                     13 	.globl _vsprintf_PARM_2
                                     14 	.globl _vsprintf
                                     15 	.globl _sprintf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
                                     35 ;--------------------------------------------------------
                                     36 ; overlayable items in internal ram
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
      000000                         55 _vsprintf_PARM_2:
      000000                         56 	.ds 3
      000003                         57 _vsprintf_PARM_3:
      000003                         58 	.ds 1
      000004                         59 _vsprintf_buf_65536_16:
      000004                         60 	.ds 3
                                     61 ;--------------------------------------------------------
                                     62 ; uninitialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XABS    (ABS,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; initialized external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XISEG   (XDATA)
                                     73 	.area HOME    (CODE)
                                     74 	.area GSINIT0 (CODE)
                                     75 	.area GSINIT1 (CODE)
                                     76 	.area GSINIT2 (CODE)
                                     77 	.area GSINIT3 (CODE)
                                     78 	.area GSINIT4 (CODE)
                                     79 	.area GSINIT5 (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area CSEG    (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'put_char_to_string'
                                    101 ;------------------------------------------------------------
                                    102 ;p                         Allocated to stack - _bp -5
                                    103 ;c                         Allocated to stack - _bp +1
                                    104 ;buf                       Allocated to stack - _bp +2
                                    105 ;------------------------------------------------------------
                                    106 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function put_char_to_string
                                    109 ;	-----------------------------------------
      000000                        110 _put_char_to_string:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
      000000 C0*00            [24]  119 	push	_bp
      000002 85 81*00         [24]  120 	mov	_bp,sp
      000005 C0 82            [24]  121 	push	dpl
      000007 05 81            [12]  122 	inc	sp
      000009 05 81            [12]  123 	inc	sp
      00000B 05 81            [12]  124 	inc	sp
                                    125 ;	sprintf.c:36: char **buf = (char **)p;
      00000D E5*00            [12]  126 	mov	a,_bp
      00000F 24 FB            [12]  127 	add	a,#0xfb
      000011 F8               [12]  128 	mov	r0,a
      000012 A9*00            [24]  129 	mov	r1,_bp
      000014 09               [12]  130 	inc	r1
      000015 09               [12]  131 	inc	r1
      000016 E6               [12]  132 	mov	a,@r0
      000017 F7               [12]  133 	mov	@r1,a
      000018 08               [12]  134 	inc	r0
      000019 E6               [12]  135 	mov	a,@r0
      00001A 09               [12]  136 	inc	r1
      00001B F7               [12]  137 	mov	@r1,a
      00001C 08               [12]  138 	inc	r0
      00001D E6               [12]  139 	mov	a,@r0
      00001E 09               [12]  140 	inc	r1
      00001F F7               [12]  141 	mov	@r1,a
                                    142 ;	sprintf.c:37: *(*buf)++ = c;
      000020 A8*00            [24]  143 	mov	r0,_bp
      000022 08               [12]  144 	inc	r0
      000023 08               [12]  145 	inc	r0
      000024 86 82            [24]  146 	mov	dpl,@r0
      000026 08               [12]  147 	inc	r0
      000027 86 83            [24]  148 	mov	dph,@r0
      000029 08               [12]  149 	inc	r0
      00002A 86 F0            [24]  150 	mov	b,@r0
      00002C 12r00r00         [24]  151 	lcall	__gptrget
      00002F FA               [12]  152 	mov	r2,a
      000030 A3               [24]  153 	inc	dptr
      000031 12r00r00         [24]  154 	lcall	__gptrget
      000034 FB               [12]  155 	mov	r3,a
      000035 A3               [24]  156 	inc	dptr
      000036 12r00r00         [24]  157 	lcall	__gptrget
      000039 FF               [12]  158 	mov	r7,a
      00003A 74 01            [12]  159 	mov	a,#0x01
      00003C 2A               [12]  160 	add	a,r2
      00003D FC               [12]  161 	mov	r4,a
      00003E E4               [12]  162 	clr	a
      00003F 3B               [12]  163 	addc	a,r3
      000040 FD               [12]  164 	mov	r5,a
      000041 8F 06            [24]  165 	mov	ar6,r7
      000043 A8*00            [24]  166 	mov	r0,_bp
      000045 08               [12]  167 	inc	r0
      000046 08               [12]  168 	inc	r0
      000047 86 82            [24]  169 	mov	dpl,@r0
      000049 08               [12]  170 	inc	r0
      00004A 86 83            [24]  171 	mov	dph,@r0
      00004C 08               [12]  172 	inc	r0
      00004D 86 F0            [24]  173 	mov	b,@r0
      00004F EC               [12]  174 	mov	a,r4
      000050 12r00r00         [24]  175 	lcall	__gptrput
      000053 A3               [24]  176 	inc	dptr
      000054 ED               [12]  177 	mov	a,r5
      000055 12r00r00         [24]  178 	lcall	__gptrput
      000058 A3               [24]  179 	inc	dptr
      000059 EE               [12]  180 	mov	a,r6
      00005A 12r00r00         [24]  181 	lcall	__gptrput
      00005D 8A 82            [24]  182 	mov	dpl,r2
      00005F 8B 83            [24]  183 	mov	dph,r3
      000061 8F F0            [24]  184 	mov	b,r7
      000063 A8*00            [24]  185 	mov	r0,_bp
      000065 08               [12]  186 	inc	r0
      000066 E6               [12]  187 	mov	a,@r0
      000067 12r00r00         [24]  188 	lcall	__gptrput
                                    189 ;	sprintf.c:38: }
      00006A 85*00 81         [24]  190 	mov	sp,_bp
      00006D D0*00            [24]  191 	pop	_bp
      00006F 22               [24]  192 	ret
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'vsprintf'
                                    195 ;------------------------------------------------------------
                                    196 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    197 ;	-----------------------------------------
                                    198 ;	 function vsprintf
                                    199 ;	-----------------------------------------
      000070                        200 _vsprintf:
      000070 AF F0            [24]  201 	mov	r7,b
      000072 AE 83            [24]  202 	mov	r6,dph
      000074 E5 82            [12]  203 	mov	a,dpl
      000076 78r04            [12]  204 	mov	r0,#_vsprintf_buf_65536_16
      000078 F2               [24]  205 	movx	@r0,a
      000079 EE               [12]  206 	mov	a,r6
      00007A 08               [12]  207 	inc	r0
      00007B F2               [24]  208 	movx	@r0,a
      00007C EF               [12]  209 	mov	a,r7
      00007D 08               [12]  210 	inc	r0
      00007E F2               [24]  211 	movx	@r0,a
                                    212 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      00007F 78r00            [12]  213 	mov	r0,#__print_format_PARM_2
      000081 74r04            [12]  214 	mov	a,#_vsprintf_buf_65536_16
      000083 F2               [24]  215 	movx	@r0,a
      000084 E4               [12]  216 	clr	a
      000085 08               [12]  217 	inc	r0
      000086 F2               [24]  218 	movx	@r0,a
      000087 74 60            [12]  219 	mov	a,#0x60
      000089 08               [12]  220 	inc	r0
      00008A F2               [24]  221 	movx	@r0,a
      00008B 78r00            [12]  222 	mov	r0,#_vsprintf_PARM_2
      00008D 79r00            [12]  223 	mov	r1,#__print_format_PARM_3
      00008F E2               [24]  224 	movx	a,@r0
      000090 F3               [24]  225 	movx	@r1,a
      000091 08               [12]  226 	inc	r0
      000092 E2               [24]  227 	movx	a,@r0
      000093 09               [12]  228 	inc	r1
      000094 F3               [24]  229 	movx	@r1,a
      000095 08               [12]  230 	inc	r0
      000096 E2               [24]  231 	movx	a,@r0
      000097 09               [12]  232 	inc	r1
      000098 F3               [24]  233 	movx	@r1,a
      000099 78r03            [12]  234 	mov	r0,#_vsprintf_PARM_3
      00009B 79r00            [12]  235 	mov	r1,#__print_format_PARM_4
      00009D E2               [24]  236 	movx	a,@r0
      00009E F3               [24]  237 	movx	@r1,a
      00009F 90r00r00         [24]  238 	mov	dptr,#_put_char_to_string
      0000A2 12r00r00         [24]  239 	lcall	__print_format
      0000A5 AE 82            [24]  240 	mov	r6,dpl
      0000A7 AF 83            [24]  241 	mov	r7,dph
                                    242 ;	sprintf.c:45: *buf = 0;
      0000A9 78r04            [12]  243 	mov	r0,#_vsprintf_buf_65536_16
      0000AB E2               [24]  244 	movx	a,@r0
      0000AC FB               [12]  245 	mov	r3,a
      0000AD 08               [12]  246 	inc	r0
      0000AE E2               [24]  247 	movx	a,@r0
      0000AF FC               [12]  248 	mov	r4,a
      0000B0 08               [12]  249 	inc	r0
      0000B1 E2               [24]  250 	movx	a,@r0
      0000B2 FD               [12]  251 	mov	r5,a
      0000B3 8B 82            [24]  252 	mov	dpl,r3
      0000B5 8C 83            [24]  253 	mov	dph,r4
      0000B7 8D F0            [24]  254 	mov	b,r5
      0000B9 E4               [12]  255 	clr	a
      0000BA 12r00r00         [24]  256 	lcall	__gptrput
                                    257 ;	sprintf.c:46: return i;
      0000BD 8E 82            [24]  258 	mov	dpl,r6
      0000BF 8F 83            [24]  259 	mov	dph,r7
                                    260 ;	sprintf.c:47: }
      0000C1 22               [24]  261 	ret
                                    262 ;------------------------------------------------------------
                                    263 ;Allocation info for local variables in function 'sprintf'
                                    264 ;------------------------------------------------------------
                                    265 ;buf                       Allocated to stack - _bp -5
                                    266 ;format                    Allocated to stack - _bp -8
                                    267 ;arg                       Allocated to registers 
                                    268 ;i                         Allocated to registers r6 r7 
                                    269 ;------------------------------------------------------------
                                    270 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    271 ;	-----------------------------------------
                                    272 ;	 function sprintf
                                    273 ;	-----------------------------------------
      0000C2                        274 _sprintf:
      0000C2 C0*00            [24]  275 	push	_bp
                                    276 ;	sprintf.c:55: va_start (arg, format);
      0000C4 E5 81            [12]  277 	mov	a,sp
      0000C6 F5*00            [12]  278 	mov	_bp,a
      0000C8 24 F8            [12]  279 	add	a,#0xf8
      0000CA 78r00            [12]  280 	mov	r0,#__print_format_PARM_4
      0000CC F2               [24]  281 	movx	@r0,a
                                    282 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      0000CD E5*00            [12]  283 	mov	a,_bp
      0000CF 24 FB            [12]  284 	add	a,#0xfb
      0000D1 78r00            [12]  285 	mov	r0,#__print_format_PARM_2
      0000D3 F2               [24]  286 	movx	@r0,a
      0000D4 E4               [12]  287 	clr	a
      0000D5 08               [12]  288 	inc	r0
      0000D6 F2               [24]  289 	movx	@r0,a
      0000D7 74 40            [12]  290 	mov	a,#0x40
      0000D9 08               [12]  291 	inc	r0
      0000DA F2               [24]  292 	movx	@r0,a
      0000DB E5*00            [12]  293 	mov	a,_bp
      0000DD 24 F8            [12]  294 	add	a,#0xf8
      0000DF F8               [12]  295 	mov	r0,a
      0000E0 79r00            [12]  296 	mov	r1,#__print_format_PARM_3
      0000E2 E6               [12]  297 	mov	a,@r0
      0000E3 F3               [24]  298 	movx	@r1,a
      0000E4 08               [12]  299 	inc	r0
      0000E5 E6               [12]  300 	mov	a,@r0
      0000E6 09               [12]  301 	inc	r1
      0000E7 F3               [24]  302 	movx	@r1,a
      0000E8 08               [12]  303 	inc	r0
      0000E9 E6               [12]  304 	mov	a,@r0
      0000EA 09               [12]  305 	inc	r1
      0000EB F3               [24]  306 	movx	@r1,a
      0000EC 90r00r00         [24]  307 	mov	dptr,#_put_char_to_string
      0000EF 12r00r00         [24]  308 	lcall	__print_format
      0000F2 AE 82            [24]  309 	mov	r6,dpl
      0000F4 AF 83            [24]  310 	mov	r7,dph
                                    311 ;	sprintf.c:57: *buf = 0;
      0000F6 E5*00            [12]  312 	mov	a,_bp
      0000F8 24 FB            [12]  313 	add	a,#0xfb
      0000FA F8               [12]  314 	mov	r0,a
      0000FB 86 03            [24]  315 	mov	ar3,@r0
      0000FD 08               [12]  316 	inc	r0
      0000FE 86 04            [24]  317 	mov	ar4,@r0
      000100 08               [12]  318 	inc	r0
      000101 86 05            [24]  319 	mov	ar5,@r0
      000103 8B 82            [24]  320 	mov	dpl,r3
      000105 8C 83            [24]  321 	mov	dph,r4
      000107 8D F0            [24]  322 	mov	b,r5
      000109 E4               [12]  323 	clr	a
      00010A 12r00r00         [24]  324 	lcall	__gptrput
                                    325 ;	sprintf.c:60: return i;
      00010D 8E 82            [24]  326 	mov	dpl,r6
      00010F 8F 83            [24]  327 	mov	dph,r7
                                    328 ;	sprintf.c:61: }
      000111 D0*00            [24]  329 	pop	_bp
      000113 22               [24]  330 	ret
                                    331 	.area CSEG    (CODE)
                                    332 	.area CONST   (CODE)
                                    333 	.area XINIT   (CODE)
                                    334 	.area CABS    (ABS,CODE)
