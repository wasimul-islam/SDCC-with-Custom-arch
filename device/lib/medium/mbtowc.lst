                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbtowc
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc_PARM_3
                                     12 	.globl _mbtowc_PARM_2
                                     13 	.globl _mbtowc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _mbtowc_sloc0_1_0:
      000000                         38 	.ds 3
      000003                         39 _mbtowc_sloc1_1_0:
      000003                         40 	.ds 4
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
      000000                         58 _mbtowc_PARM_2:
      000000                         59 	.ds 3
      000003                         60 _mbtowc_PARM_3:
      000003                         61 	.ds 2
      000005                         62 _mbtowc_codepoint_65536_40:
      000005                         63 	.ds 4
      000009                         64 _mbtowc_first_byte_65536_40:
      000009                         65 	.ds 1
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'mbtowc'
                                    106 ;------------------------------------------------------------
                                    107 ;sloc0                     Allocated with name '_mbtowc_sloc0_1_0'
                                    108 ;sloc1                     Allocated with name '_mbtowc_sloc1_1_0'
                                    109 ;------------------------------------------------------------
                                    110 ;	mbtowc.c:31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                                    111 ;	-----------------------------------------
                                    112 ;	 function mbtowc
                                    113 ;	-----------------------------------------
      000000                        114 _mbtowc:
                           000007   115 	ar7 = 0x07
                           000006   116 	ar6 = 0x06
                           000005   117 	ar5 = 0x05
                           000004   118 	ar4 = 0x04
                           000003   119 	ar3 = 0x03
                           000002   120 	ar2 = 0x02
                           000001   121 	ar1 = 0x01
                           000000   122 	ar0 = 0x00
      000000 AD 82            [24]  123 	mov	r5,dpl
      000002 AE 83            [24]  124 	mov	r6,dph
      000004 AF F0            [24]  125 	mov	r7,b
                                    126 ;	mbtowc.c:37: if(!s)
      000006 78r00            [12]  127 	mov	r0,#_mbtowc_PARM_2
      000008 E2               [24]  128 	movx	a,@r0
      000009 F5 F0            [12]  129 	mov	b,a
      00000B 08               [12]  130 	inc	r0
      00000C E2               [24]  131 	movx	a,@r0
      00000D 45 F0            [12]  132 	orl	a,b
      00000F 70 04            [24]  133 	jnz	00102$
                                    134 ;	mbtowc.c:38: return(0);
      000011 90 00 00         [24]  135 	mov	dptr,#0x0000
      000014 22               [24]  136 	ret
      000015                        137 00102$:
                                    138 ;	mbtowc.c:40: seqlen = 1;
      000015 7C 01            [12]  139 	mov	r4,#0x01
                                    140 ;	mbtowc.c:41: first_byte = *s;
      000017 78r00            [12]  141 	mov	r0,#_mbtowc_PARM_2
      000019 E2               [24]  142 	movx	a,@r0
      00001A F5*00            [12]  143 	mov	_mbtowc_sloc0_1_0,a
      00001C 08               [12]  144 	inc	r0
      00001D E2               [24]  145 	movx	a,@r0
      00001E F5*01            [12]  146 	mov	(_mbtowc_sloc0_1_0 + 1),a
      000020 08               [12]  147 	inc	r0
      000021 E2               [24]  148 	movx	a,@r0
      000022 F5*02            [12]  149 	mov	(_mbtowc_sloc0_1_0 + 2),a
      000024 85*00 82         [24]  150 	mov	dpl,_mbtowc_sloc0_1_0
      000027 85*01 83         [24]  151 	mov	dph,(_mbtowc_sloc0_1_0 + 1)
      00002A 85*02 F0         [24]  152 	mov	b,(_mbtowc_sloc0_1_0 + 2)
      00002D 78r09            [12]  153 	mov	r0,#_mbtowc_first_byte_65536_40
      00002F 12r00r00         [24]  154 	lcall	__gptrget
      000032 F2               [24]  155 	movx	@r0,a
                                    156 ;	mbtowc.c:43: if(first_byte & 0x80)
      000033 78r09            [12]  157 	mov	r0,#_mbtowc_first_byte_65536_40
      000035 E2               [24]  158 	movx	a,@r0
      000036 54 80            [12]  159 	anl	a,#0x80
      000038 60 58            [24]  160 	jz	00107$
                                    161 ;	mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
      00003A 7A 01            [12]  162 	mov	r2,#0x01
      00003C                        163 00103$:
      00003C C0 05            [24]  164 	push	ar5
      00003E C0 06            [24]  165 	push	ar6
      000040 C0 07            [24]  166 	push	ar7
      000042 8A F0            [24]  167 	mov	b,r2
      000044 05 F0            [12]  168 	inc	b
      000046 7E 80            [12]  169 	mov	r6,#0x80
      000048 E4               [12]  170 	clr	a
      000049 FF               [12]  171 	mov	r7,a
      00004A 33               [12]  172 	rlc	a
      00004B 92 D2            [24]  173 	mov	ov,c
      00004D 80 08            [24]  174 	sjmp	00204$
      00004F                        175 00203$:
      00004F A2 D2            [12]  176 	mov	c,ov
      000051 EF               [12]  177 	mov	a,r7
      000052 13               [12]  178 	rrc	a
      000053 FF               [12]  179 	mov	r7,a
      000054 EE               [12]  180 	mov	a,r6
      000055 13               [12]  181 	rrc	a
      000056 FE               [12]  182 	mov	r6,a
      000057                        183 00204$:
      000057 D5 F0 F5         [24]  184 	djnz	b,00203$
      00005A 78r09            [12]  185 	mov	r0,#_mbtowc_first_byte_65536_40
      00005C E2               [24]  186 	movx	a,@r0
      00005D FB               [12]  187 	mov	r3,a
      00005E 7D 00            [12]  188 	mov	r5,#0x00
      000060 52 06            [12]  189 	anl	ar6,a
      000062 ED               [12]  190 	mov	a,r5
      000063 52 07            [12]  191 	anl	ar7,a
      000065 EE               [12]  192 	mov	a,r6
      000066 4F               [12]  193 	orl	a,r7
      000067 D0 07            [24]  194 	pop	ar7
      000069 D0 06            [24]  195 	pop	ar6
      00006B D0 05            [24]  196 	pop	ar5
      00006D 60 03            [24]  197 	jz	00143$
                                    198 ;	mbtowc.c:46: seqlen++;
      00006F 0A               [12]  199 	inc	r2
      000070 80 CA            [24]  200 	sjmp	00103$
      000072                        201 00143$:
      000072 8A 04            [24]  202 	mov	ar4,r2
                                    203 ;	mbtowc.c:47: first_byte &= (0xff >> (seqlen + 1));
      000074 0A               [12]  204 	inc	r2
      000075 8A F0            [24]  205 	mov	b,r2
      000077 05 F0            [12]  206 	inc	b
      000079 7A FF            [12]  207 	mov	r2,#0xff
      00007B E4               [12]  208 	clr	a
      00007C FB               [12]  209 	mov	r3,a
      00007D 33               [12]  210 	rlc	a
      00007E 92 D2            [24]  211 	mov	ov,c
      000080 80 08            [24]  212 	sjmp	00207$
      000082                        213 00206$:
      000082 A2 D2            [12]  214 	mov	c,ov
      000084 EB               [12]  215 	mov	a,r3
      000085 13               [12]  216 	rrc	a
      000086 FB               [12]  217 	mov	r3,a
      000087 EA               [12]  218 	mov	a,r2
      000088 13               [12]  219 	rrc	a
      000089 FA               [12]  220 	mov	r2,a
      00008A                        221 00207$:
      00008A D5 F0 F5         [24]  222 	djnz	b,00206$
      00008D 78r09            [12]  223 	mov	r0,#_mbtowc_first_byte_65536_40
      00008F E2               [24]  224 	movx	a,@r0
      000090 5A               [12]  225 	anl	a,r2
      000091 F2               [24]  226 	movx	@r0,a
      000092                        227 00107$:
                                    228 ;	mbtowc.c:50: if(seqlen > 4 || n < seqlen)
      000092 EC               [12]  229 	mov	a,r4
      000093 24 FB            [12]  230 	add	a,#0xff - 0x04
      000095 40 0E            [24]  231 	jc	00108$
      000097 8C 02            [24]  232 	mov	ar2,r4
      000099 7B 00            [12]  233 	mov	r3,#0x00
      00009B 78r03            [12]  234 	mov	r0,#_mbtowc_PARM_3
      00009D C3               [12]  235 	clr	c
      00009E E2               [24]  236 	movx	a,@r0
      00009F 9A               [12]  237 	subb	a,r2
      0000A0 08               [12]  238 	inc	r0
      0000A1 E2               [24]  239 	movx	a,@r0
      0000A2 9B               [12]  240 	subb	a,r3
      0000A3 50 04            [24]  241 	jnc	00136$
      0000A5                        242 00108$:
                                    243 ;	mbtowc.c:51: return(-1);
      0000A5 90 FF FF         [24]  244 	mov	dptr,#0xffff
      0000A8 22               [24]  245 	ret
                                    246 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      0000A9                        247 00136$:
      0000A9 7B 01            [12]  248 	mov	r3,#0x01
      0000AB                        249 00121$:
      0000AB C3               [12]  250 	clr	c
      0000AC EB               [12]  251 	mov	a,r3
      0000AD 9C               [12]  252 	subb	a,r4
      0000AE 50 3A            [24]  253 	jnc	00113$
                                    254 ;	mbtowc.c:54: if((s[i] & 0xc0) != 0x80)
      0000B0 C0 05            [24]  255 	push	ar5
      0000B2 C0 06            [24]  256 	push	ar6
      0000B4 C0 07            [24]  257 	push	ar7
      0000B6 EB               [12]  258 	mov	a,r3
      0000B7 25*00            [12]  259 	add	a,_mbtowc_sloc0_1_0
      0000B9 FA               [12]  260 	mov	r2,a
      0000BA E4               [12]  261 	clr	a
      0000BB 35*01            [12]  262 	addc	a,(_mbtowc_sloc0_1_0 + 1)
      0000BD FE               [12]  263 	mov	r6,a
      0000BE AF*02            [24]  264 	mov	r7,(_mbtowc_sloc0_1_0 + 2)
      0000C0 8A 82            [24]  265 	mov	dpl,r2
      0000C2 8E 83            [24]  266 	mov	dph,r6
      0000C4 8F F0            [24]  267 	mov	b,r7
      0000C6 12r00r00         [24]  268 	lcall	__gptrget
      0000C9 FA               [12]  269 	mov	r2,a
      0000CA 53 02 C0         [24]  270 	anl	ar2,#0xc0
      0000CD 7F 00            [12]  271 	mov	r7,#0x00
      0000CF BA 80 0B         [24]  272 	cjne	r2,#0x80,00211$
      0000D2 BF 00 08         [24]  273 	cjne	r7,#0x00,00211$
      0000D5 D0 07            [24]  274 	pop	ar7
      0000D7 D0 06            [24]  275 	pop	ar6
      0000D9 D0 05            [24]  276 	pop	ar5
      0000DB 80 0A            [24]  277 	sjmp	00122$
      0000DD                        278 00211$:
      0000DD D0 07            [24]  279 	pop	ar7
      0000DF D0 06            [24]  280 	pop	ar6
      0000E1 D0 05            [24]  281 	pop	ar5
                                    282 ;	mbtowc.c:55: return(-1);
      0000E3 90 FF FF         [24]  283 	mov	dptr,#0xffff
      0000E6 22               [24]  284 	ret
      0000E7                        285 00122$:
                                    286 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      0000E7 0B               [12]  287 	inc	r3
      0000E8 80 C1            [24]  288 	sjmp	00121$
      0000EA                        289 00113$:
                                    290 ;	mbtowc.c:57: codepoint = first_byte;
      0000EA 78r09            [12]  291 	mov	r0,#_mbtowc_first_byte_65536_40
      0000EC E2               [24]  292 	movx	a,@r0
      0000ED F5*03            [12]  293 	mov	_mbtowc_sloc1_1_0,a
      0000EF 75*04 00         [24]  294 	mov	(_mbtowc_sloc1_1_0 + 1),#0x00
      0000F2 75*05 00         [24]  295 	mov	(_mbtowc_sloc1_1_0 + 2),#0x00
      0000F5 75*06 00         [24]  296 	mov	(_mbtowc_sloc1_1_0 + 3),#0x00
                                    297 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      0000F8 78r00            [12]  298 	mov	r0,#_mbtowc_PARM_2
      0000FA 74 01            [12]  299 	mov	a,#0x01
      0000FC 25*00            [12]  300 	add	a,_mbtowc_sloc0_1_0
      0000FE F2               [24]  301 	movx	@r0,a
      0000FF E4               [12]  302 	clr	a
      000100 35*01            [12]  303 	addc	a,(_mbtowc_sloc0_1_0 + 1)
      000102 08               [12]  304 	inc	r0
      000103 F2               [24]  305 	movx	@r0,a
      000104 E5*02            [12]  306 	mov	a,(_mbtowc_sloc0_1_0 + 2)
      000106 08               [12]  307 	inc	r0
      000107 F2               [24]  308 	movx	@r0,a
      000108 8C 03            [24]  309 	mov	ar3,r4
      00010A 1B               [12]  310 	dec	r3
      00010B 78r00            [12]  311 	mov	r0,#_mbtowc_PARM_2
      00010D E2               [24]  312 	movx	a,@r0
      00010E F5*00            [12]  313 	mov	_mbtowc_sloc0_1_0,a
      000110 08               [12]  314 	inc	r0
      000111 E2               [24]  315 	movx	a,@r0
      000112 F5*01            [12]  316 	mov	(_mbtowc_sloc0_1_0 + 1),a
      000114 08               [12]  317 	inc	r0
      000115 E2               [24]  318 	movx	a,@r0
      000116 F5*02            [12]  319 	mov	(_mbtowc_sloc0_1_0 + 2),a
      000118                        320 00124$:
      000118 EB               [12]  321 	mov	a,r3
      000119 70 03            [24]  322 	jnz	00212$
      00011B 02r01rB4         [24]  323 	ljmp	00114$
      00011E                        324 00212$:
                                    325 ;	mbtowc.c:61: codepoint <<= 6;
      00011E C0 05            [24]  326 	push	ar5
      000120 C0 06            [24]  327 	push	ar6
      000122 C0 07            [24]  328 	push	ar7
      000124 78r05            [12]  329 	mov	r0,#_mbtowc_codepoint_65536_40
      000126 E5*05            [12]  330 	mov	a,(_mbtowc_sloc1_1_0 + 2)
      000128 08               [12]  331 	inc	r0
      000129 08               [12]  332 	inc	r0
      00012A F2               [24]  333 	movx	@r0,a
      00012B 85*06 F0         [24]  334 	mov	b,(_mbtowc_sloc1_1_0 + 3)
      00012E E2               [24]  335 	movx	a,@r0
      00012F C5 F0            [12]  336 	xch	a,b
      000131 54 03            [12]  337 	anl	a,#0x03
      000133 A2 E0            [12]  338 	mov	c,acc.0
      000135 C5 F0            [12]  339 	xch	a,b
      000137 13               [12]  340 	rrc	a
      000138 C5 F0            [12]  341 	xch	a,b
      00013A 13               [12]  342 	rrc	a
      00013B A2 E0            [12]  343 	mov	c,acc.0
      00013D C5 F0            [12]  344 	xch	a,b
      00013F 13               [12]  345 	rrc	a
      000140 C5 F0            [12]  346 	xch	a,b
      000142 13               [12]  347 	rrc	a
      000143 F2               [24]  348 	movx	@r0,a
      000144 E5 F0            [12]  349 	mov	a,b
      000146 08               [12]  350 	inc	r0
      000147 F2               [24]  351 	movx	@r0,a
      000148 E5*04            [12]  352 	mov	a,(_mbtowc_sloc1_1_0 + 1)
      00014A 03               [12]  353 	rr	a
      00014B 03               [12]  354 	rr	a
      00014C 54 3F            [12]  355 	anl	a,#0x3f
      00014E C5 F0            [12]  356 	xch	a,b
      000150 18               [12]  357 	dec	r0
      000151 E2               [24]  358 	movx	a,@r0
      000152 45 F0            [12]  359 	orl	a,b
      000154 F2               [24]  360 	movx	@r0,a
      000155 E5*03            [12]  361 	mov	a,_mbtowc_sloc1_1_0
      000157 18               [12]  362 	dec	r0
      000158 18               [12]  363 	dec	r0
      000159 F2               [24]  364 	movx	@r0,a
      00015A 85*04 F0         [24]  365 	mov	b,(_mbtowc_sloc1_1_0 + 1)
      00015D E2               [24]  366 	movx	a,@r0
      00015E C5 F0            [12]  367 	xch	a,b
      000160 54 03            [12]  368 	anl	a,#0x03
      000162 A2 E0            [12]  369 	mov	c,acc.0
      000164 C5 F0            [12]  370 	xch	a,b
      000166 13               [12]  371 	rrc	a
      000167 C5 F0            [12]  372 	xch	a,b
      000169 13               [12]  373 	rrc	a
      00016A A2 E0            [12]  374 	mov	c,acc.0
      00016C C5 F0            [12]  375 	xch	a,b
      00016E 13               [12]  376 	rrc	a
      00016F C5 F0            [12]  377 	xch	a,b
      000171 13               [12]  378 	rrc	a
      000172 F2               [24]  379 	movx	@r0,a
      000173 E5 F0            [12]  380 	mov	a,b
      000175 08               [12]  381 	inc	r0
      000176 F2               [24]  382 	movx	@r0,a
                                    383 ;	mbtowc.c:62: codepoint |= (*s & 0x3f);
      000177 85*00 82         [24]  384 	mov	dpl,_mbtowc_sloc0_1_0
      00017A 85*01 83         [24]  385 	mov	dph,(_mbtowc_sloc0_1_0 + 1)
      00017D 85*02 F0         [24]  386 	mov	b,(_mbtowc_sloc0_1_0 + 2)
      000180 12r00r00         [24]  387 	lcall	__gptrget
      000183 FF               [12]  388 	mov	r7,a
      000184 A3               [24]  389 	inc	dptr
      000185 85 82*00         [24]  390 	mov	_mbtowc_sloc0_1_0,dpl
      000188 85 83*01         [24]  391 	mov	(_mbtowc_sloc0_1_0 + 1),dph
      00018B 53 07 3F         [24]  392 	anl	ar7,#0x3f
      00018E E4               [12]  393 	clr	a
      00018F FE               [12]  394 	mov	r6,a
      000190 33               [12]  395 	rlc	a
      000191 95 E0            [12]  396 	subb	a,acc
      000193 FD               [12]  397 	mov	r5,a
      000194 FA               [12]  398 	mov	r2,a
      000195 78r05            [12]  399 	mov	r0,#_mbtowc_codepoint_65536_40
      000197 E2               [24]  400 	movx	a,@r0
      000198 4F               [12]  401 	orl	a,r7
      000199 F5*03            [12]  402 	mov	_mbtowc_sloc1_1_0,a
      00019B 08               [12]  403 	inc	r0
      00019C E2               [24]  404 	movx	a,@r0
      00019D 4E               [12]  405 	orl	a,r6
      00019E F5*04            [12]  406 	mov	(_mbtowc_sloc1_1_0 + 1),a
      0001A0 08               [12]  407 	inc	r0
      0001A1 E2               [24]  408 	movx	a,@r0
      0001A2 4D               [12]  409 	orl	a,r5
      0001A3 F5*05            [12]  410 	mov	(_mbtowc_sloc1_1_0 + 2),a
      0001A5 08               [12]  411 	inc	r0
      0001A6 E2               [24]  412 	movx	a,@r0
      0001A7 4A               [12]  413 	orl	a,r2
      0001A8 F5*06            [12]  414 	mov	(_mbtowc_sloc1_1_0 + 3),a
                                    415 ;	mbtowc.c:63: s++;
                                    416 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      0001AA 1B               [12]  417 	dec	r3
      0001AB D0 07            [24]  418 	pop	ar7
      0001AD D0 06            [24]  419 	pop	ar6
      0001AF D0 05            [24]  420 	pop	ar5
      0001B1 02r01r18         [24]  421 	ljmp	00124$
      0001B4                        422 00114$:
                                    423 ;	mbtowc.c:66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      0001B4 C3               [12]  424 	clr	c
      0001B5 E5*04            [12]  425 	mov	a,(_mbtowc_sloc1_1_0 + 1)
      0001B7 94 D8            [12]  426 	subb	a,#0xd8
      0001B9 E5*05            [12]  427 	mov	a,(_mbtowc_sloc1_1_0 + 2)
      0001BB 94 00            [12]  428 	subb	a,#0x00
      0001BD E5*06            [12]  429 	mov	a,(_mbtowc_sloc1_1_0 + 3)
      0001BF 94 00            [12]  430 	subb	a,#0x00
      0001C1 40 14            [24]  431 	jc	00116$
      0001C3 74 FF            [12]  432 	mov	a,#0xff
      0001C5 95*03            [12]  433 	subb	a,_mbtowc_sloc1_1_0
      0001C7 74 DF            [12]  434 	mov	a,#0xdf
      0001C9 95*04            [12]  435 	subb	a,(_mbtowc_sloc1_1_0 + 1)
      0001CB E4               [12]  436 	clr	a
      0001CC 95*05            [12]  437 	subb	a,(_mbtowc_sloc1_1_0 + 2)
      0001CE E4               [12]  438 	clr	a
      0001CF 95*06            [12]  439 	subb	a,(_mbtowc_sloc1_1_0 + 3)
      0001D1 40 04            [24]  440 	jc	00116$
                                    441 ;	mbtowc.c:67: return(-1);
      0001D3 90 FF FF         [24]  442 	mov	dptr,#0xffff
      0001D6 22               [24]  443 	ret
      0001D7                        444 00116$:
                                    445 ;	mbtowc.c:69: if(pwc)
      0001D7 ED               [12]  446 	mov	a,r5
      0001D8 4E               [12]  447 	orl	a,r6
      0001D9 60 1D            [24]  448 	jz	00119$
                                    449 ;	mbtowc.c:70: *pwc = codepoint;
      0001DB 8D 82            [24]  450 	mov	dpl,r5
      0001DD 8E 83            [24]  451 	mov	dph,r6
      0001DF 8F F0            [24]  452 	mov	b,r7
      0001E1 E5*03            [12]  453 	mov	a,_mbtowc_sloc1_1_0
      0001E3 12r00r00         [24]  454 	lcall	__gptrput
      0001E6 A3               [24]  455 	inc	dptr
      0001E7 E5*04            [12]  456 	mov	a,(_mbtowc_sloc1_1_0 + 1)
      0001E9 12r00r00         [24]  457 	lcall	__gptrput
      0001EC A3               [24]  458 	inc	dptr
      0001ED E5*05            [12]  459 	mov	a,(_mbtowc_sloc1_1_0 + 2)
      0001EF 12r00r00         [24]  460 	lcall	__gptrput
      0001F2 A3               [24]  461 	inc	dptr
      0001F3 E5*06            [12]  462 	mov	a,(_mbtowc_sloc1_1_0 + 3)
      0001F5 12r00r00         [24]  463 	lcall	__gptrput
      0001F8                        464 00119$:
                                    465 ;	mbtowc.c:71: return(codepoint ? seqlen : 0);
      0001F8 E5*03            [12]  466 	mov	a,_mbtowc_sloc1_1_0
      0001FA 45*04            [12]  467 	orl	a,(_mbtowc_sloc1_1_0 + 1)
      0001FC 45*05            [12]  468 	orl	a,(_mbtowc_sloc1_1_0 + 2)
      0001FE 45*06            [12]  469 	orl	a,(_mbtowc_sloc1_1_0 + 3)
      000200 60 04            [24]  470 	jz	00128$
      000202 7F 00            [12]  471 	mov	r7,#0x00
      000204 80 04            [24]  472 	sjmp	00129$
      000206                        473 00128$:
      000206 7C 00            [12]  474 	mov	r4,#0x00
      000208 7F 00            [12]  475 	mov	r7,#0x00
      00020A                        476 00129$:
      00020A 8C 82            [24]  477 	mov	dpl,r4
      00020C 8F 83            [24]  478 	mov	dph,r7
                                    479 ;	mbtowc.c:72: }
      00020E 22               [24]  480 	ret
                                    481 	.area CSEG    (CODE)
                                    482 	.area CONST   (CODE)
                                    483 	.area XINIT   (CODE)
                                    484 	.area CABS    (ABS,CODE)
