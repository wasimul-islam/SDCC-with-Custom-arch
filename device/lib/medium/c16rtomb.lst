                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16rtomb
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wctomb
                                     12 	.globl _c16rtomb_PARM_3
                                     13 	.globl _c16rtomb_PARM_2
                                     14 	.globl _c16rtomb
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _c16rtomb_sloc0_1_0:
      000000                         35 	.ds 4
      000004                         36 _c16rtomb_sloc1_1_0:
      000004                         37 	.ds 3
      000007                         38 _c16rtomb_sloc2_1_0:
      000007                         39 	.ds 3
      00000A                         40 _c16rtomb_sloc3_1_0:
      00000A                         41 	.ds 3
      00000D                         42 _c16rtomb_sloc4_1_0:
      00000D                         43 	.ds 2
      00000F                         44 _c16rtomb_sloc5_1_0:
      00000F                         45 	.ds 4
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
      000000                         66 _c16rtomb_PARM_2:
      000000                         67 	.ds 2
      000002                         68 _c16rtomb_PARM_3:
      000002                         69 	.ds 3
      000005                         70 _c16rtomb_buf_65536_46:
      000005                         71 	.ds 4
      000009                         72 _c16rtomb_sps_65536_46:
      000009                         73 	.ds 3
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; absolute external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XABS    (ABS,XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; initialized external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XISEG   (XDATA)
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT0 (CODE)
                                     88 	.area GSINIT1 (CODE)
                                     89 	.area GSINIT2 (CODE)
                                     90 	.area GSINIT3 (CODE)
                                     91 	.area GSINIT4 (CODE)
                                     92 	.area GSINIT5 (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area CSEG    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; global & static initialisations
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 	.area GSFINAL (CODE)
                                    102 	.area GSINIT  (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; Home
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME    (CODE)
                                    107 	.area HOME    (CODE)
                                    108 ;--------------------------------------------------------
                                    109 ; code
                                    110 ;--------------------------------------------------------
                                    111 	.area CSEG    (CODE)
                                    112 ;------------------------------------------------------------
                                    113 ;Allocation info for local variables in function 'c16rtomb'
                                    114 ;------------------------------------------------------------
                                    115 ;sloc0                     Allocated with name '_c16rtomb_sloc0_1_0'
                                    116 ;sloc1                     Allocated with name '_c16rtomb_sloc1_1_0'
                                    117 ;sloc2                     Allocated with name '_c16rtomb_sloc2_1_0'
                                    118 ;sloc3                     Allocated with name '_c16rtomb_sloc3_1_0'
                                    119 ;sloc4                     Allocated with name '_c16rtomb_sloc4_1_0'
                                    120 ;sloc5                     Allocated with name '_c16rtomb_sloc5_1_0'
                                    121 ;------------------------------------------------------------
                                    122 ;	c16rtomb.c:35: size_t c16rtomb(char *restrict s, char16_t c16, mbstate_t *restrict ps)
                                    123 ;	-----------------------------------------
                                    124 ;	 function c16rtomb
                                    125 ;	-----------------------------------------
      000000                        126 _c16rtomb:
                           000007   127 	ar7 = 0x07
                           000006   128 	ar6 = 0x06
                           000005   129 	ar5 = 0x05
                           000004   130 	ar4 = 0x04
                           000003   131 	ar3 = 0x03
                           000002   132 	ar2 = 0x02
                           000001   133 	ar1 = 0x01
                           000000   134 	ar0 = 0x00
      000000 AD 82            [24]  135 	mov	r5,dpl
      000002 AE 83            [24]  136 	mov	r6,dph
      000004 AF F0            [24]  137 	mov	r7,b
                                    138 ;	c16rtomb.c:41: if(!s)
      000006 ED               [12]  139 	mov	a,r5
      000007 4E               [12]  140 	orl	a,r6
                                    141 ;	c16rtomb.c:42: s = buf;
      000008 70 05            [24]  142 	jnz	00102$
      00000A 7Dr05            [12]  143 	mov	r5,#_c16rtomb_buf_65536_46
      00000C FE               [12]  144 	mov	r6,a
      00000D 7F 60            [12]  145 	mov	r7,#0x60
      00000F                        146 00102$:
                                    147 ;	c16rtomb.c:44: if(!ps)
      00000F 78r02            [12]  148 	mov	r0,#_c16rtomb_PARM_3
      000011 E2               [24]  149 	movx	a,@r0
      000012 F5 F0            [12]  150 	mov	b,a
      000014 08               [12]  151 	inc	r0
      000015 E2               [24]  152 	movx	a,@r0
      000016 45 F0            [12]  153 	orl	a,b
      000018 70 0C            [24]  154 	jnz	00104$
                                    155 ;	c16rtomb.c:45: ps = &sps;
      00001A 78r02            [12]  156 	mov	r0,#_c16rtomb_PARM_3
      00001C 74r09            [12]  157 	mov	a,#_c16rtomb_sps_65536_46
      00001E F2               [24]  158 	movx	@r0,a
      00001F E4               [12]  159 	clr	a
      000020 08               [12]  160 	inc	r0
      000021 F2               [24]  161 	movx	@r0,a
      000022 74 60            [12]  162 	mov	a,#0x60
      000024 08               [12]  163 	inc	r0
      000025 F2               [24]  164 	movx	@r0,a
      000026                        165 00104$:
                                    166 ;	c16rtomb.c:47: if (!c16) // 0 always resets conversion state.
      000026 78r00            [12]  167 	mov	r0,#_c16rtomb_PARM_2
      000028 E2               [24]  168 	movx	a,@r0
      000029 F5 F0            [12]  169 	mov	b,a
      00002B 08               [12]  170 	inc	r0
      00002C E2               [24]  171 	movx	a,@r0
      00002D 45 F0            [12]  172 	orl	a,b
      00002F 70 44            [24]  173 	jnz	00119$
                                    174 ;	c16rtomb.c:49: ps->c[1] = ps->c[2] = 0;
      000031 C0 05            [24]  175 	push	ar5
      000033 C0 06            [24]  176 	push	ar6
      000035 C0 07            [24]  177 	push	ar7
      000037 78r02            [12]  178 	mov	r0,#_c16rtomb_PARM_3
      000039 E2               [24]  179 	movx	a,@r0
      00003A FA               [12]  180 	mov	r2,a
      00003B 08               [12]  181 	inc	r0
      00003C E2               [24]  182 	movx	a,@r0
      00003D FB               [12]  183 	mov	r3,a
      00003E 08               [12]  184 	inc	r0
      00003F E2               [24]  185 	movx	a,@r0
      000040 FC               [12]  186 	mov	r4,a
      000041 74 01            [12]  187 	mov	a,#0x01
      000043 2A               [12]  188 	add	a,r2
      000044 FD               [12]  189 	mov	r5,a
      000045 E4               [12]  190 	clr	a
      000046 3B               [12]  191 	addc	a,r3
      000047 FE               [12]  192 	mov	r6,a
      000048 8C 07            [24]  193 	mov	ar7,r4
      00004A 74 02            [12]  194 	mov	a,#0x02
      00004C 2A               [12]  195 	add	a,r2
      00004D FA               [12]  196 	mov	r2,a
      00004E E4               [12]  197 	clr	a
      00004F 3B               [12]  198 	addc	a,r3
      000050 FB               [12]  199 	mov	r3,a
      000051 8A 82            [24]  200 	mov	dpl,r2
      000053 8B 83            [24]  201 	mov	dph,r3
      000055 8C F0            [24]  202 	mov	b,r4
      000057 E4               [12]  203 	clr	a
      000058 12r00r00         [24]  204 	lcall	__gptrput
      00005B 8D 82            [24]  205 	mov	dpl,r5
      00005D 8E 83            [24]  206 	mov	dph,r6
      00005F 8F F0            [24]  207 	mov	b,r7
      000061 12r00r00         [24]  208 	lcall	__gptrput
                                    209 ;	c16rtomb.c:50: codepoint = 0;
      000064 F5*00            [12]  210 	mov	_c16rtomb_sloc0_1_0,a
      000066 F5*01            [12]  211 	mov	(_c16rtomb_sloc0_1_0 + 1),a
      000068 F5*02            [12]  212 	mov	(_c16rtomb_sloc0_1_0 + 2),a
      00006A F5*03            [12]  213 	mov	(_c16rtomb_sloc0_1_0 + 3),a
      00006C D0 07            [24]  214 	pop	ar7
      00006E D0 06            [24]  215 	pop	ar6
      000070 D0 05            [24]  216 	pop	ar5
      000072 02r01rD3         [24]  217 	ljmp	00120$
      000075                        218 00119$:
                                    219 ;	c16rtomb.c:52: else if(ps->c[1] || ps->c[2]) // We already have the high surrogate. Now get the low surrogate
      000075 78r02            [12]  220 	mov	r0,#_c16rtomb_PARM_3
      000077 E2               [24]  221 	movx	a,@r0
      000078 FA               [12]  222 	mov	r2,a
      000079 08               [12]  223 	inc	r0
      00007A E2               [24]  224 	movx	a,@r0
      00007B FB               [12]  225 	mov	r3,a
      00007C 08               [12]  226 	inc	r0
      00007D E2               [24]  227 	movx	a,@r0
      00007E FC               [12]  228 	mov	r4,a
      00007F 74 01            [12]  229 	mov	a,#0x01
      000081 2A               [12]  230 	add	a,r2
      000082 F5*04            [12]  231 	mov	_c16rtomb_sloc1_1_0,a
      000084 E4               [12]  232 	clr	a
      000085 3B               [12]  233 	addc	a,r3
      000086 F5*05            [12]  234 	mov	(_c16rtomb_sloc1_1_0 + 1),a
      000088 8C*06            [24]  235 	mov	(_c16rtomb_sloc1_1_0 + 2),r4
      00008A 85*04 82         [24]  236 	mov	dpl,_c16rtomb_sloc1_1_0
      00008D 85*05 83         [24]  237 	mov	dph,(_c16rtomb_sloc1_1_0 + 1)
      000090 85*06 F0         [24]  238 	mov	b,(_c16rtomb_sloc1_1_0 + 2)
      000093 12r00r00         [24]  239 	lcall	__gptrget
      000096 70 1C            [24]  240 	jnz	00114$
      000098 74 02            [12]  241 	mov	a,#0x02
      00009A 2A               [12]  242 	add	a,r2
      00009B F5*0F            [12]  243 	mov	_c16rtomb_sloc5_1_0,a
      00009D E4               [12]  244 	clr	a
      00009E 3B               [12]  245 	addc	a,r3
      00009F F5*10            [12]  246 	mov	(_c16rtomb_sloc5_1_0 + 1),a
      0000A1 8C*11            [24]  247 	mov	(_c16rtomb_sloc5_1_0 + 2),r4
      0000A3 85*0F 82         [24]  248 	mov	dpl,_c16rtomb_sloc5_1_0
      0000A6 85*10 83         [24]  249 	mov	dph,(_c16rtomb_sloc5_1_0 + 1)
      0000A9 85*11 F0         [24]  250 	mov	b,(_c16rtomb_sloc5_1_0 + 2)
      0000AC 12r00r00         [24]  251 	lcall	__gptrget
      0000AF 70 03            [24]  252 	jnz	00160$
      0000B1 02r01r77         [24]  253 	ljmp	00115$
      0000B4                        254 00160$:
      0000B4                        255 00114$:
                                    256 ;	c16rtomb.c:56: if(c16 < 0xdc00 || c16 > 0xdfff)
      0000B4 78r00            [12]  257 	mov	r0,#_c16rtomb_PARM_2
      0000B6 C3               [12]  258 	clr	c
      0000B7 08               [12]  259 	inc	r0
      0000B8 E2               [24]  260 	movx	a,@r0
      0000B9 94 DC            [12]  261 	subb	a,#0xdc
      0000BB 50 03            [24]  262 	jnc	00161$
      0000BD 02r01rED         [24]  263 	ljmp	00121$
      0000C0                        264 00161$:
      0000C0 78r00            [12]  265 	mov	r0,#_c16rtomb_PARM_2
      0000C2 C3               [12]  266 	clr	c
      0000C3 E2               [24]  267 	movx	a,@r0
      0000C4 F5 F0            [12]  268 	mov	b,a
      0000C6 74 FF            [12]  269 	mov	a,#0xff
      0000C8 95 F0            [12]  270 	subb	a,b
      0000CA 08               [12]  271 	inc	r0
      0000CB E2               [24]  272 	movx	a,@r0
      0000CC F5 F0            [12]  273 	mov	b,a
      0000CE 74 DF            [12]  274 	mov	a,#0xdf
      0000D0 95 F0            [12]  275 	subb	a,b
      0000D2 50 03            [24]  276 	jnc	00162$
      0000D4 02r01rED         [24]  277 	ljmp	00121$
      0000D7                        278 00162$:
                                    279 ;	c16rtomb.c:59: high_surrogate = ps->c[1] + (ps->c[2] << 8);
      0000D7 C0 05            [24]  280 	push	ar5
      0000D9 C0 06            [24]  281 	push	ar6
      0000DB C0 07            [24]  282 	push	ar7
      0000DD 78r02            [12]  283 	mov	r0,#_c16rtomb_PARM_3
      0000DF E2               [24]  284 	movx	a,@r0
      0000E0 F5*07            [12]  285 	mov	_c16rtomb_sloc2_1_0,a
      0000E2 08               [12]  286 	inc	r0
      0000E3 E2               [24]  287 	movx	a,@r0
      0000E4 F5*08            [12]  288 	mov	(_c16rtomb_sloc2_1_0 + 1),a
      0000E6 08               [12]  289 	inc	r0
      0000E7 E2               [24]  290 	movx	a,@r0
      0000E8 F5*09            [12]  291 	mov	(_c16rtomb_sloc2_1_0 + 2),a
      0000EA 74 01            [12]  292 	mov	a,#0x01
      0000EC 25*07            [12]  293 	add	a,_c16rtomb_sloc2_1_0
      0000EE F5*0A            [12]  294 	mov	_c16rtomb_sloc3_1_0,a
      0000F0 E4               [12]  295 	clr	a
      0000F1 35*08            [12]  296 	addc	a,(_c16rtomb_sloc2_1_0 + 1)
      0000F3 F5*0B            [12]  297 	mov	(_c16rtomb_sloc3_1_0 + 1),a
      0000F5 85*09*0C         [24]  298 	mov	(_c16rtomb_sloc3_1_0 + 2),(_c16rtomb_sloc2_1_0 + 2)
      0000F8 85*0A 82         [24]  299 	mov	dpl,_c16rtomb_sloc3_1_0
      0000FB 85*0B 83         [24]  300 	mov	dph,(_c16rtomb_sloc3_1_0 + 1)
      0000FE 85*0C F0         [24]  301 	mov	b,(_c16rtomb_sloc3_1_0 + 2)
      000101 12r00r00         [24]  302 	lcall	__gptrget
      000104 FF               [12]  303 	mov	r7,a
      000105 8F*0D            [24]  304 	mov	_c16rtomb_sloc4_1_0,r7
      000107 75*0E 00         [24]  305 	mov	(_c16rtomb_sloc4_1_0 + 1),#0x00
      00010A 74 02            [12]  306 	mov	a,#0x02
      00010C 25*07            [12]  307 	add	a,_c16rtomb_sloc2_1_0
      00010E F5*07            [12]  308 	mov	_c16rtomb_sloc2_1_0,a
      000110 E4               [12]  309 	clr	a
      000111 35*08            [12]  310 	addc	a,(_c16rtomb_sloc2_1_0 + 1)
      000113 F5*08            [12]  311 	mov	(_c16rtomb_sloc2_1_0 + 1),a
      000115 85*07 82         [24]  312 	mov	dpl,_c16rtomb_sloc2_1_0
      000118 85*08 83         [24]  313 	mov	dph,(_c16rtomb_sloc2_1_0 + 1)
      00011B 85*09 F0         [24]  314 	mov	b,(_c16rtomb_sloc2_1_0 + 2)
      00011E 12r00r00         [24]  315 	lcall	__gptrget
      000121 FE               [12]  316 	mov	r6,a
      000122 E4               [12]  317 	clr	a
      000123 25*0D            [12]  318 	add	a,_c16rtomb_sloc4_1_0
      000125 FF               [12]  319 	mov	r7,a
      000126 EE               [12]  320 	mov	a,r6
      000127 35*0E            [12]  321 	addc	a,(_c16rtomb_sloc4_1_0 + 1)
                                    322 ;	c16rtomb.c:60: ps->c[1] = ps->c[2] = 0;
      000129 85*07 82         [24]  323 	mov	dpl,_c16rtomb_sloc2_1_0
      00012C 85*08 83         [24]  324 	mov	dph,(_c16rtomb_sloc2_1_0 + 1)
      00012F 85*09 F0         [24]  325 	mov	b,(_c16rtomb_sloc2_1_0 + 2)
      000132 E4               [12]  326 	clr	a
      000133 12r00r00         [24]  327 	lcall	__gptrput
      000136 85*0A 82         [24]  328 	mov	dpl,_c16rtomb_sloc3_1_0
      000139 85*0B 83         [24]  329 	mov	dph,(_c16rtomb_sloc3_1_0 + 1)
      00013C 85*0C F0         [24]  330 	mov	b,(_c16rtomb_sloc3_1_0 + 2)
      00013F 12r00r00         [24]  331 	lcall	__gptrput
                                    332 ;	c16rtomb.c:61: codepoint = (high_surrogate << 10) - (0xd800 << 10) + c16 - 0xdc00 + 0x10000;
      000142 EF               [12]  333 	mov	a,r7
      000143 2F               [12]  334 	add	a,r7
      000144 25 E0            [12]  335 	add	a,acc
      000146 FE               [12]  336 	mov	r6,a
      000147 7F 00            [12]  337 	mov	r7,#0x00
      000149 78r00            [12]  338 	mov	r0,#_c16rtomb_PARM_2
      00014B E2               [24]  339 	movx	a,@r0
      00014C 2F               [12]  340 	add	a,r7
      00014D FF               [12]  341 	mov	r7,a
      00014E 08               [12]  342 	inc	r0
      00014F E2               [24]  343 	movx	a,@r0
      000150 3E               [12]  344 	addc	a,r6
      000151 FE               [12]  345 	mov	r6,a
      000152 8F*0F            [24]  346 	mov	_c16rtomb_sloc5_1_0,r7
      000154 8E*10            [24]  347 	mov	(_c16rtomb_sloc5_1_0 + 1),r6
      000156 75*11 00         [24]  348 	mov	(_c16rtomb_sloc5_1_0 + 2),#0x00
      000159 75*12 00         [24]  349 	mov	(_c16rtomb_sloc5_1_0 + 3),#0x00
      00015C 85*0F*00         [24]  350 	mov	_c16rtomb_sloc0_1_0,_c16rtomb_sloc5_1_0
      00015F 74 24            [12]  351 	mov	a,#0x24
      000161 25*10            [12]  352 	add	a,(_c16rtomb_sloc5_1_0 + 1)
      000163 F5*01            [12]  353 	mov	(_c16rtomb_sloc0_1_0 + 1),a
      000165 E4               [12]  354 	clr	a
      000166 35*11            [12]  355 	addc	a,(_c16rtomb_sloc5_1_0 + 2)
      000168 F5*02            [12]  356 	mov	(_c16rtomb_sloc0_1_0 + 2),a
      00016A E4               [12]  357 	clr	a
      00016B 35*12            [12]  358 	addc	a,(_c16rtomb_sloc5_1_0 + 3)
      00016D F5*03            [12]  359 	mov	(_c16rtomb_sloc0_1_0 + 3),a
      00016F D0 07            [24]  360 	pop	ar7
      000171 D0 06            [24]  361 	pop	ar6
      000173 D0 05            [24]  362 	pop	ar5
      000175 80 5C            [24]  363 	sjmp	00120$
      000177                        364 00115$:
                                    365 ;	c16rtomb.c:63: else if(c16 < 0xd7ff || c16 >= 0xe000) // Basic multilingual plane.
      000177 78r00            [12]  366 	mov	r0,#_c16rtomb_PARM_2
      000179 C3               [12]  367 	clr	c
      00017A E2               [24]  368 	movx	a,@r0
      00017B 94 FF            [12]  369 	subb	a,#0xff
      00017D 08               [12]  370 	inc	r0
      00017E E2               [24]  371 	movx	a,@r0
      00017F 94 D7            [12]  372 	subb	a,#0xd7
      000181 40 09            [24]  373 	jc	00110$
      000183 78r00            [12]  374 	mov	r0,#_c16rtomb_PARM_2
      000185 C3               [12]  375 	clr	c
      000186 08               [12]  376 	inc	r0
      000187 E2               [24]  377 	movx	a,@r0
      000188 94 E0            [12]  378 	subb	a,#0xe0
      00018A 40 11            [24]  379 	jc	00111$
      00018C                        380 00110$:
                                    381 ;	c16rtomb.c:64: codepoint = c16;
      00018C 78r00            [12]  382 	mov	r0,#_c16rtomb_PARM_2
      00018E E2               [24]  383 	movx	a,@r0
      00018F F5*00            [12]  384 	mov	_c16rtomb_sloc0_1_0,a
      000191 08               [12]  385 	inc	r0
      000192 E2               [24]  386 	movx	a,@r0
      000193 F5*01            [12]  387 	mov	(_c16rtomb_sloc0_1_0 + 1),a
      000195 75*02 00         [24]  388 	mov	(_c16rtomb_sloc0_1_0 + 2),#0x00
      000198 75*03 00         [24]  389 	mov	(_c16rtomb_sloc0_1_0 + 3),#0x00
      00019B 80 36            [24]  390 	sjmp	00120$
      00019D                        391 00111$:
                                    392 ;	c16rtomb.c:67: if(c16 > 0xdbff)
      00019D 78r00            [12]  393 	mov	r0,#_c16rtomb_PARM_2
      00019F C3               [12]  394 	clr	c
      0001A0 E2               [24]  395 	movx	a,@r0
      0001A1 F5 F0            [12]  396 	mov	b,a
      0001A3 74 FF            [12]  397 	mov	a,#0xff
      0001A5 95 F0            [12]  398 	subb	a,b
      0001A7 08               [12]  399 	inc	r0
      0001A8 E2               [24]  400 	movx	a,@r0
      0001A9 F5 F0            [12]  401 	mov	b,a
      0001AB 74 DB            [12]  402 	mov	a,#0xdb
      0001AD 95 F0            [12]  403 	subb	a,b
      0001AF 40 3C            [24]  404 	jc	00121$
                                    405 ;	c16rtomb.c:70: ps->c[1] = c16 & 0xff;
      0001B1 78r00            [12]  406 	mov	r0,#_c16rtomb_PARM_2
      0001B3 E2               [24]  407 	movx	a,@r0
      0001B4 85*04 82         [24]  408 	mov	dpl,_c16rtomb_sloc1_1_0
      0001B7 85*05 83         [24]  409 	mov	dph,(_c16rtomb_sloc1_1_0 + 1)
      0001BA 85*06 F0         [24]  410 	mov	b,(_c16rtomb_sloc1_1_0 + 2)
      0001BD 12r00r00         [24]  411 	lcall	__gptrput
                                    412 ;	c16rtomb.c:71: ps->c[2] = c16 >> 8;
      0001C0 78r01            [12]  413 	mov	r0,#(_c16rtomb_PARM_2 + 1)
      0001C2 E2               [24]  414 	movx	a,@r0
      0001C3 85*0F 82         [24]  415 	mov	dpl,_c16rtomb_sloc5_1_0
      0001C6 85*10 83         [24]  416 	mov	dph,(_c16rtomb_sloc5_1_0 + 1)
      0001C9 85*11 F0         [24]  417 	mov	b,(_c16rtomb_sloc5_1_0 + 2)
      0001CC 12r00r00         [24]  418 	lcall	__gptrput
                                    419 ;	c16rtomb.c:72: return(0);
      0001CF 90 00 00         [24]  420 	mov	dptr,#0x0000
      0001D2 22               [24]  421 	ret
      0001D3                        422 00120$:
                                    423 ;	c16rtomb.c:75: return(wctomb(s, codepoint));
      0001D3 78r00            [12]  424 	mov	r0,#_wctomb_PARM_2
      0001D5 E5*00            [12]  425 	mov	a,_c16rtomb_sloc0_1_0
      0001D7 F2               [24]  426 	movx	@r0,a
      0001D8 E5*01            [12]  427 	mov	a,(_c16rtomb_sloc0_1_0 + 1)
      0001DA 08               [12]  428 	inc	r0
      0001DB F2               [24]  429 	movx	@r0,a
      0001DC E5*02            [12]  430 	mov	a,(_c16rtomb_sloc0_1_0 + 2)
      0001DE 08               [12]  431 	inc	r0
      0001DF F2               [24]  432 	movx	@r0,a
      0001E0 E5*03            [12]  433 	mov	a,(_c16rtomb_sloc0_1_0 + 3)
      0001E2 08               [12]  434 	inc	r0
      0001E3 F2               [24]  435 	movx	@r0,a
      0001E4 8D 82            [24]  436 	mov	dpl,r5
      0001E6 8E 83            [24]  437 	mov	dph,r6
      0001E8 8F F0            [24]  438 	mov	b,r7
                                    439 ;	c16rtomb.c:77: eilseq:
      0001EA 02r00r00         [24]  440 	ljmp	_wctomb
      0001ED                        441 00121$:
                                    442 ;	c16rtomb.c:78: errno = EILSEQ;
      0001ED 78r00            [12]  443 	mov	r0,#_errno
      0001EF 74 54            [12]  444 	mov	a,#0x54
      0001F1 F2               [24]  445 	movx	@r0,a
      0001F2 E4               [12]  446 	clr	a
      0001F3 08               [12]  447 	inc	r0
      0001F4 F2               [24]  448 	movx	@r0,a
                                    449 ;	c16rtomb.c:79: return(-1);
      0001F5 90 FF FF         [24]  450 	mov	dptr,#0xffff
                                    451 ;	c16rtomb.c:80: }
      0001F8 22               [24]  452 	ret
                                    453 	.area CSEG    (CODE)
                                    454 	.area CONST   (CODE)
                                    455 	.area XINIT   (CODE)
                                    456 	.area CABS    (ABS,CODE)
