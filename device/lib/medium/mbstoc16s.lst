                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbstoc16s
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 	.globl ___mbstoc16s_PARM_3
                                     13 	.globl ___mbstoc16s_PARM_2
                                     14 	.globl ___mbstoc16s
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 ___mbstoc16s_sloc0_1_0:
      000000                         35 	.ds 3
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
      000000                         56 ___mbstoc16s_PARM_2:
      000000                         57 	.ds 3
      000003                         58 ___mbstoc16s_PARM_3:
      000003                         59 	.ds 2
      000005                         60 ___mbstoc16s_m_65536_54:
      000005                         61 	.ds 2
      000007                         62 ___mbstoc16s_l_196608_56:
      000007                         63 	.ds 2
      000009                         64 ___mbstoc16s_codepoint_196608_56:
      000009                         65 	.ds 4
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function '__mbstoc16s'
                                    106 ;------------------------------------------------------------
                                    107 ;sloc0                     Allocated with name '___mbstoc16s_sloc0_1_0'
                                    108 ;------------------------------------------------------------
                                    109 ;	mbstoc16s.c:44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                                    110 ;	-----------------------------------------
                                    111 ;	 function __mbstoc16s
                                    112 ;	-----------------------------------------
      000000                        113 ___mbstoc16s:
                           000007   114 	ar7 = 0x07
                           000006   115 	ar6 = 0x06
                           000005   116 	ar5 = 0x05
                           000004   117 	ar4 = 0x04
                           000003   118 	ar3 = 0x03
                           000002   119 	ar2 = 0x02
                           000001   120 	ar1 = 0x01
                           000000   121 	ar0 = 0x00
      000000 85 82*00         [24]  122 	mov	___mbstoc16s_sloc0_1_0,dpl
      000003 85 83*01         [24]  123 	mov	(___mbstoc16s_sloc0_1_0 + 1),dph
      000006 85 F0*02         [24]  124 	mov	(___mbstoc16s_sloc0_1_0 + 2),b
                                    125 ;	mbstoc16s.c:46: size_t m = 0;
      000009 78r05            [12]  126 	mov	r0,#___mbstoc16s_m_65536_54
      00000B E4               [12]  127 	clr	a
      00000C F2               [24]  128 	movx	@r0,a
      00000D 08               [12]  129 	inc	r0
      00000E F2               [24]  130 	movx	@r0,a
                                    131 ;	mbstoc16s.c:85: return(m);
      00000F                        132 00116$:
                                    133 ;	mbstoc16s.c:53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
      00000F 78r00            [12]  134 	mov	r0,#___mbstoc16s_PARM_2
      000011 79r00            [12]  135 	mov	r1,#_mbtowc_PARM_2
      000013 E2               [24]  136 	movx	a,@r0
      000014 F3               [24]  137 	movx	@r1,a
      000015 08               [12]  138 	inc	r0
      000016 E2               [24]  139 	movx	a,@r0
      000017 09               [12]  140 	inc	r1
      000018 F3               [24]  141 	movx	@r1,a
      000019 08               [12]  142 	inc	r0
      00001A E2               [24]  143 	movx	a,@r0
      00001B 09               [12]  144 	inc	r1
      00001C F3               [24]  145 	movx	@r1,a
      00001D 78r00            [12]  146 	mov	r0,#_mbtowc_PARM_3
      00001F 74 04            [12]  147 	mov	a,#0x04
      000021 F2               [24]  148 	movx	@r0,a
      000022 E4               [12]  149 	clr	a
      000023 08               [12]  150 	inc	r0
      000024 F2               [24]  151 	movx	@r0,a
      000025 90r00r09         [24]  152 	mov	dptr,#___mbstoc16s_codepoint_196608_56
      000028 75 F0 60         [24]  153 	mov	b,#0x60
      00002B 12r00r00         [24]  154 	lcall	_mbtowc
      00002E 78r07            [12]  155 	mov	r0,#___mbstoc16s_l_196608_56
      000030 E5 82            [12]  156 	mov	a,dpl
      000032 F2               [24]  157 	movx	@r0,a
      000033 E5 83            [12]  158 	mov	a,dph
      000035 08               [12]  159 	inc	r0
      000036 F2               [24]  160 	movx	@r0,a
                                    161 ;	mbstoc16s.c:55: if(l < 0)
      000037 78r08            [12]  162 	mov	r0,#(___mbstoc16s_l_196608_56 + 1)
      000039 E2               [24]  163 	movx	a,@r0
      00003A 30 E7 04         [24]  164 	jnb	acc.7,00106$
                                    165 ;	mbstoc16s.c:56: return(-1);
      00003D 90 FF FF         [24]  166 	mov	dptr,#0xffff
      000040 22               [24]  167 	ret
      000041                        168 00106$:
                                    169 ;	mbstoc16s.c:57: else if(!l)
      000041 78r07            [12]  170 	mov	r0,#___mbstoc16s_l_196608_56
      000043 E2               [24]  171 	movx	a,@r0
      000044 F5 F0            [12]  172 	mov	b,a
      000046 08               [12]  173 	inc	r0
      000047 E2               [24]  174 	movx	a,@r0
      000048 45 F0            [12]  175 	orl	a,b
      00004A 70 2C            [24]  176 	jnz	00107$
                                    177 ;	mbstoc16s.c:59: if(m < n)
      00004C 78r05            [12]  178 	mov	r0,#___mbstoc16s_m_65536_54
      00004E 79r03            [12]  179 	mov	r1,#___mbstoc16s_PARM_3
      000050 C3               [12]  180 	clr	c
      000051 E3               [24]  181 	movx	a,@r1
      000052 F5 F0            [12]  182 	mov	b,a
      000054 E2               [24]  183 	movx	a,@r0
      000055 95 F0            [12]  184 	subb	a,b
      000057 09               [12]  185 	inc	r1
      000058 E3               [24]  186 	movx	a,@r1
      000059 F5 F0            [12]  187 	mov	b,a
      00005B 08               [12]  188 	inc	r0
      00005C E2               [24]  189 	movx	a,@r0
      00005D 95 F0            [12]  190 	subb	a,b
      00005F 40 03            [24]  191 	jc	00157$
      000061 02r01r97         [24]  192 	ljmp	00115$
      000064                        193 00157$:
                                    194 ;	mbstoc16s.c:60: *c16s = 0;
      000064 85*00 82         [24]  195 	mov	dpl,___mbstoc16s_sloc0_1_0
      000067 85*01 83         [24]  196 	mov	dph,(___mbstoc16s_sloc0_1_0 + 1)
      00006A 85*02 F0         [24]  197 	mov	b,(___mbstoc16s_sloc0_1_0 + 2)
      00006D E4               [12]  198 	clr	a
      00006E 12r00r00         [24]  199 	lcall	__gptrput
      000071 A3               [24]  200 	inc	dptr
      000072 12r00r00         [24]  201 	lcall	__gptrput
                                    202 ;	mbstoc16s.c:61: break;
      000075 02r01r97         [24]  203 	ljmp	00115$
      000078                        204 00107$:
                                    205 ;	mbstoc16s.c:64: if (codepoint <= 0xffff) // Basic multilingual plane
      000078 78r09            [12]  206 	mov	r0,#___mbstoc16s_codepoint_196608_56
      00007A C3               [12]  207 	clr	c
      00007B E2               [24]  208 	movx	a,@r0
      00007C F5 F0            [12]  209 	mov	b,a
      00007E 74 FF            [12]  210 	mov	a,#0xff
      000080 95 F0            [12]  211 	subb	a,b
      000082 08               [12]  212 	inc	r0
      000083 E2               [24]  213 	movx	a,@r0
      000084 F5 F0            [12]  214 	mov	b,a
      000086 74 FF            [12]  215 	mov	a,#0xff
      000088 95 F0            [12]  216 	subb	a,b
      00008A 08               [12]  217 	inc	r0
      00008B E2               [24]  218 	movx	a,@r0
      00008C F5 F0            [12]  219 	mov	b,a
      00008E E4               [12]  220 	clr	a
      00008F 95 F0            [12]  221 	subb	a,b
      000091 08               [12]  222 	inc	r0
      000092 E2               [24]  223 	movx	a,@r0
      000093 F5 F0            [12]  224 	mov	b,a
      000095 E4               [12]  225 	clr	a
      000096 95 F0            [12]  226 	subb	a,b
      000098 40 46            [24]  227 	jc	00113$
                                    228 ;	mbstoc16s.c:66: if (m >= n)
      00009A 78r05            [12]  229 	mov	r0,#___mbstoc16s_m_65536_54
      00009C 79r03            [12]  230 	mov	r1,#___mbstoc16s_PARM_3
      00009E C3               [12]  231 	clr	c
      00009F E3               [24]  232 	movx	a,@r1
      0000A0 F5 F0            [12]  233 	mov	b,a
      0000A2 E2               [24]  234 	movx	a,@r0
      0000A3 95 F0            [12]  235 	subb	a,b
      0000A5 09               [12]  236 	inc	r1
      0000A6 E3               [24]  237 	movx	a,@r1
      0000A7 F5 F0            [12]  238 	mov	b,a
      0000A9 08               [12]  239 	inc	r0
      0000AA E2               [24]  240 	movx	a,@r0
      0000AB 95 F0            [12]  241 	subb	a,b
      0000AD 40 03            [24]  242 	jc	00159$
      0000AF 02r01r97         [24]  243 	ljmp	00115$
      0000B2                        244 00159$:
                                    245 ;	mbstoc16s.c:69: *c16s++ = codepoint;
      0000B2 78r09            [12]  246 	mov	r0,#___mbstoc16s_codepoint_196608_56
      0000B4 E2               [24]  247 	movx	a,@r0
      0000B5 FA               [12]  248 	mov	r2,a
      0000B6 08               [12]  249 	inc	r0
      0000B7 E2               [24]  250 	movx	a,@r0
      0000B8 FC               [12]  251 	mov	r4,a
      0000B9 85*00 82         [24]  252 	mov	dpl,___mbstoc16s_sloc0_1_0
      0000BC 85*01 83         [24]  253 	mov	dph,(___mbstoc16s_sloc0_1_0 + 1)
      0000BF 85*02 F0         [24]  254 	mov	b,(___mbstoc16s_sloc0_1_0 + 2)
      0000C2 EA               [12]  255 	mov	a,r2
      0000C3 12r00r00         [24]  256 	lcall	__gptrput
      0000C6 A3               [24]  257 	inc	dptr
      0000C7 EC               [12]  258 	mov	a,r4
      0000C8 12r00r00         [24]  259 	lcall	__gptrput
      0000CB A3               [24]  260 	inc	dptr
      0000CC 85 82*00         [24]  261 	mov	___mbstoc16s_sloc0_1_0,dpl
      0000CF 85 83*01         [24]  262 	mov	(___mbstoc16s_sloc0_1_0 + 1),dph
                                    263 ;	mbstoc16s.c:70: m++;
      0000D2 78r05            [12]  264 	mov	r0,#___mbstoc16s_m_65536_54
      0000D4 E2               [24]  265 	movx	a,@r0
      0000D5 24 01            [12]  266 	add	a,#0x01
      0000D7 F2               [24]  267 	movx	@r0,a
      0000D8 08               [12]  268 	inc	r0
      0000D9 E2               [24]  269 	movx	a,@r0
      0000DA 34 00            [12]  270 	addc	a,#0x00
      0000DC F2               [24]  271 	movx	@r0,a
      0000DD 02r01r80         [24]  272 	ljmp	00114$
      0000E0                        273 00113$:
                                    274 ;	mbstoc16s.c:74: if (m + 1 >= n)
      0000E0 78r05            [12]  275 	mov	r0,#___mbstoc16s_m_65536_54
      0000E2 E2               [24]  276 	movx	a,@r0
      0000E3 24 01            [12]  277 	add	a,#0x01
      0000E5 FB               [12]  278 	mov	r3,a
      0000E6 08               [12]  279 	inc	r0
      0000E7 E2               [24]  280 	movx	a,@r0
      0000E8 34 00            [12]  281 	addc	a,#0x00
      0000EA FC               [12]  282 	mov	r4,a
      0000EB 78r03            [12]  283 	mov	r0,#___mbstoc16s_PARM_3
      0000ED C3               [12]  284 	clr	c
      0000EE E2               [24]  285 	movx	a,@r0
      0000EF F5 F0            [12]  286 	mov	b,a
      0000F1 EB               [12]  287 	mov	a,r3
      0000F2 95 F0            [12]  288 	subb	a,b
      0000F4 08               [12]  289 	inc	r0
      0000F5 E2               [24]  290 	movx	a,@r0
      0000F6 F5 F0            [12]  291 	mov	b,a
      0000F8 EC               [12]  292 	mov	a,r4
      0000F9 95 F0            [12]  293 	subb	a,b
      0000FB 40 03            [24]  294 	jc	00160$
      0000FD 02r01r97         [24]  295 	ljmp	00115$
      000100                        296 00160$:
                                    297 ;	mbstoc16s.c:77: codepoint -= 0x100000;
      000100 78r0B            [12]  298 	mov	r0,#(___mbstoc16s_codepoint_196608_56 + 2)
      000102 E2               [24]  299 	movx	a,@r0
      000103 24 F0            [12]  300 	add	a,#0xf0
      000105 F2               [24]  301 	movx	@r0,a
      000106 08               [12]  302 	inc	r0
      000107 E2               [24]  303 	movx	a,@r0
      000108 34 FF            [12]  304 	addc	a,#0xff
      00010A F2               [24]  305 	movx	@r0,a
                                    306 ;	mbstoc16s.c:78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
      00010B 78r0A            [12]  307 	mov	r0,#(___mbstoc16s_codepoint_196608_56 + 1)
      00010D E2               [24]  308 	movx	a,@r0
      00010E FA               [12]  309 	mov	r2,a
      00010F 08               [12]  310 	inc	r0
      000110 E2               [24]  311 	movx	a,@r0
      000111 C3               [12]  312 	clr	c
      000112 13               [12]  313 	rrc	a
      000113 CA               [12]  314 	xch	a,r2
      000114 13               [12]  315 	rrc	a
      000115 CA               [12]  316 	xch	a,r2
      000116 C3               [12]  317 	clr	c
      000117 13               [12]  318 	rrc	a
      000118 CA               [12]  319 	xch	a,r2
      000119 13               [12]  320 	rrc	a
      00011A CA               [12]  321 	xch	a,r2
      00011B FB               [12]  322 	mov	r3,a
      00011C 08               [12]  323 	inc	r0
      00011D E2               [24]  324 	movx	a,@r0
      00011E 03               [12]  325 	rr	a
      00011F 03               [12]  326 	rr	a
      000120 54 C0            [12]  327 	anl	a,#0xc0
      000122 4B               [12]  328 	orl	a,r3
      000123 FB               [12]  329 	mov	r3,a
      000124 E2               [24]  330 	movx	a,@r0
      000125 03               [12]  331 	rr	a
      000126 03               [12]  332 	rr	a
      000127 54 3F            [12]  333 	anl	a,#0x3f
      000129 53 03 03         [24]  334 	anl	ar3,#0x03
      00012C 74 D8            [12]  335 	mov	a,#0xd8
      00012E 2B               [12]  336 	add	a,r3
      00012F FB               [12]  337 	mov	r3,a
      000130 85*00 82         [24]  338 	mov	dpl,___mbstoc16s_sloc0_1_0
      000133 85*01 83         [24]  339 	mov	dph,(___mbstoc16s_sloc0_1_0 + 1)
      000136 85*02 F0         [24]  340 	mov	b,(___mbstoc16s_sloc0_1_0 + 2)
      000139 EA               [12]  341 	mov	a,r2
      00013A 12r00r00         [24]  342 	lcall	__gptrput
      00013D A3               [24]  343 	inc	dptr
      00013E EB               [12]  344 	mov	a,r3
      00013F 12r00r00         [24]  345 	lcall	__gptrput
      000142 74 02            [12]  346 	mov	a,#0x02
      000144 25*00            [12]  347 	add	a,___mbstoc16s_sloc0_1_0
      000146 FD               [12]  348 	mov	r5,a
      000147 E4               [12]  349 	clr	a
      000148 35*01            [12]  350 	addc	a,(___mbstoc16s_sloc0_1_0 + 1)
      00014A FE               [12]  351 	mov	r6,a
      00014B AF*02            [24]  352 	mov	r7,(___mbstoc16s_sloc0_1_0 + 2)
                                    353 ;	mbstoc16s.c:79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
      00014D 78r09            [12]  354 	mov	r0,#___mbstoc16s_codepoint_196608_56
      00014F E2               [24]  355 	movx	a,@r0
      000150 FB               [12]  356 	mov	r3,a
      000151 08               [12]  357 	inc	r0
      000152 E2               [24]  358 	movx	a,@r0
      000153 FC               [12]  359 	mov	r4,a
      000154 53 04 03         [24]  360 	anl	ar4,#0x03
      000157 74 DC            [12]  361 	mov	a,#0xdc
      000159 2C               [12]  362 	add	a,r4
      00015A FC               [12]  363 	mov	r4,a
      00015B 8D 82            [24]  364 	mov	dpl,r5
      00015D 8E 83            [24]  365 	mov	dph,r6
      00015F 8F F0            [24]  366 	mov	b,r7
      000161 EB               [12]  367 	mov	a,r3
      000162 12r00r00         [24]  368 	lcall	__gptrput
      000165 A3               [24]  369 	inc	dptr
      000166 EC               [12]  370 	mov	a,r4
      000167 12r00r00         [24]  371 	lcall	__gptrput
      00016A 74 02            [12]  372 	mov	a,#0x02
      00016C 2D               [12]  373 	add	a,r5
      00016D F5*00            [12]  374 	mov	___mbstoc16s_sloc0_1_0,a
      00016F E4               [12]  375 	clr	a
      000170 3E               [12]  376 	addc	a,r6
      000171 F5*01            [12]  377 	mov	(___mbstoc16s_sloc0_1_0 + 1),a
      000173 8F*02            [24]  378 	mov	(___mbstoc16s_sloc0_1_0 + 2),r7
                                    379 ;	mbstoc16s.c:80: m += 2;
      000175 78r05            [12]  380 	mov	r0,#___mbstoc16s_m_65536_54
      000177 E2               [24]  381 	movx	a,@r0
      000178 24 02            [12]  382 	add	a,#0x02
      00017A F2               [24]  383 	movx	@r0,a
      00017B 08               [12]  384 	inc	r0
      00017C E2               [24]  385 	movx	a,@r0
      00017D 34 00            [12]  386 	addc	a,#0x00
      00017F F2               [24]  387 	movx	@r0,a
      000180                        388 00114$:
                                    389 ;	mbstoc16s.c:82: s += l;
      000180 78r00            [12]  390 	mov	r0,#___mbstoc16s_PARM_2
      000182 79r07            [12]  391 	mov	r1,#___mbstoc16s_l_196608_56
      000184 E3               [24]  392 	movx	a,@r1
      000185 C5 F0            [12]  393 	xch	a,b
      000187 E2               [24]  394 	movx	a,@r0
      000188 25 F0            [12]  395 	add	a,b
      00018A F2               [24]  396 	movx	@r0,a
      00018B 09               [12]  397 	inc	r1
      00018C E3               [24]  398 	movx	a,@r1
      00018D C5 F0            [12]  399 	xch	a,b
      00018F 08               [12]  400 	inc	r0
      000190 E2               [24]  401 	movx	a,@r0
      000191 35 F0            [12]  402 	addc	a,b
      000193 F2               [24]  403 	movx	@r0,a
      000194 02r00r0F         [24]  404 	ljmp	00116$
      000197                        405 00115$:
                                    406 ;	mbstoc16s.c:85: return(m);
      000197 78r05            [12]  407 	mov	r0,#___mbstoc16s_m_65536_54
      000199 E2               [24]  408 	movx	a,@r0
      00019A F5 82            [12]  409 	mov	dpl,a
      00019C 08               [12]  410 	inc	r0
      00019D E2               [24]  411 	movx	a,@r0
      00019E F5 83            [12]  412 	mov	dph,a
                                    413 ;	mbstoc16s.c:86: }
      0001A0 22               [24]  414 	ret
                                    415 	.area CSEG    (CODE)
                                    416 	.area CONST   (CODE)
                                    417 	.area XINIT   (CODE)
                                    418 	.area CABS    (ABS,CODE)
