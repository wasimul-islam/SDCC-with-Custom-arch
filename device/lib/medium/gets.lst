                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mmcs51 --model-medium
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'gets'
                                     93 ;------------------------------------------------------------
                                     94 ;	gets.c:32: gets (char *s)
                                     95 ;	-----------------------------------------
                                     96 ;	 function gets
                                     97 ;	-----------------------------------------
      000000                         98 _gets:
                           000007    99 	ar7 = 0x07
                           000006   100 	ar6 = 0x06
                           000005   101 	ar5 = 0x05
                           000004   102 	ar4 = 0x04
                           000003   103 	ar3 = 0x03
                           000002   104 	ar2 = 0x02
                           000001   105 	ar1 = 0x01
                           000000   106 	ar0 = 0x00
      000000 AD 82            [24]  107 	mov	r5,dpl
      000002 AE 83            [24]  108 	mov	r6,dph
      000004 AF F0            [24]  109 	mov	r7,b
                                    110 ;	gets.c:35: unsigned int count = 0;
      000006 7B 00            [12]  111 	mov	r3,#0x00
      000008 7C 00            [12]  112 	mov	r4,#0x00
                                    113 ;	gets.c:37: while (1)
      00000A                        114 00109$:
                                    115 ;	gets.c:39: c = getchar ();
      00000A C0 07            [24]  116 	push	ar7
      00000C C0 06            [24]  117 	push	ar6
      00000E C0 05            [24]  118 	push	ar5
      000010 C0 04            [24]  119 	push	ar4
      000012 C0 03            [24]  120 	push	ar3
      000014 12r00r00         [24]  121 	lcall	_getchar
      000017 A9 82            [24]  122 	mov	r1,dpl
      000019 AA 83            [24]  123 	mov	r2,dph
      00001B D0 03            [24]  124 	pop	ar3
      00001D D0 04            [24]  125 	pop	ar4
      00001F D0 05            [24]  126 	pop	ar5
      000021 D0 06            [24]  127 	pop	ar6
      000023 D0 07            [24]  128 	pop	ar7
                                    129 ;	gets.c:40: switch(c)
      000025 B9 08 02         [24]  130 	cjne	r1,#0x08,00133$
      000028 80 0A            [24]  131 	sjmp	00101$
      00002A                        132 00133$:
      00002A B9 0A 02         [24]  133 	cjne	r1,#0x0a,00134$
      00002D 80 3B            [24]  134 	sjmp	00105$
      00002F                        135 00134$:
                                    136 ;	gets.c:42: case '\b': /* backspace */
      00002F B9 0D 61         [24]  137 	cjne	r1,#0x0d,00106$
      000032 80 36            [24]  138 	sjmp	00105$
      000034                        139 00101$:
                                    140 ;	gets.c:43: if (count)
      000034 EB               [12]  141 	mov	a,r3
      000035 4C               [12]  142 	orl	a,r4
      000036 60 D2            [24]  143 	jz	00109$
                                    144 ;	gets.c:45: putchar ('\b');
      000038 90 00 08         [24]  145 	mov	dptr,#0x0008
      00003B C0 07            [24]  146 	push	ar7
      00003D C0 06            [24]  147 	push	ar6
      00003F C0 05            [24]  148 	push	ar5
      000041 C0 04            [24]  149 	push	ar4
      000043 C0 03            [24]  150 	push	ar3
      000045 12r00r00         [24]  151 	lcall	_putchar
                                    152 ;	gets.c:46: putchar (' ');
      000048 90 00 20         [24]  153 	mov	dptr,#0x0020
      00004B 12r00r00         [24]  154 	lcall	_putchar
                                    155 ;	gets.c:47: putchar ('\b');
      00004E 90 00 08         [24]  156 	mov	dptr,#0x0008
      000051 12r00r00         [24]  157 	lcall	_putchar
      000054 D0 03            [24]  158 	pop	ar3
      000056 D0 04            [24]  159 	pop	ar4
      000058 D0 05            [24]  160 	pop	ar5
      00005A D0 06            [24]  161 	pop	ar6
      00005C D0 07            [24]  162 	pop	ar7
                                    163 ;	gets.c:48: --s;
      00005E 1D               [12]  164 	dec	r5
      00005F BD FF 01         [24]  165 	cjne	r5,#0xff,00137$
      000062 1E               [12]  166 	dec	r6
      000063                        167 00137$:
                                    168 ;	gets.c:49: --count;
      000063 1B               [12]  169 	dec	r3
      000064 BB FF 01         [24]  170 	cjne	r3,#0xff,00138$
      000067 1C               [12]  171 	dec	r4
      000068                        172 00138$:
                                    173 ;	gets.c:51: break;
                                    174 ;	gets.c:54: case '\r': /* CR or LF */
      000068 80 A0            [24]  175 	sjmp	00109$
      00006A                        176 00105$:
                                    177 ;	gets.c:55: putchar ('\r');
      00006A 90 00 0D         [24]  178 	mov	dptr,#0x000d
      00006D C0 07            [24]  179 	push	ar7
      00006F C0 06            [24]  180 	push	ar6
      000071 C0 05            [24]  181 	push	ar5
      000073 12r00r00         [24]  182 	lcall	_putchar
                                    183 ;	gets.c:56: putchar ('\n');
      000076 90 00 0A         [24]  184 	mov	dptr,#0x000a
      000079 12r00r00         [24]  185 	lcall	_putchar
      00007C D0 05            [24]  186 	pop	ar5
      00007E D0 06            [24]  187 	pop	ar6
      000080 D0 07            [24]  188 	pop	ar7
                                    189 ;	gets.c:57: *s = 0;
      000082 8D 82            [24]  190 	mov	dpl,r5
      000084 8E 83            [24]  191 	mov	dph,r6
      000086 8F F0            [24]  192 	mov	b,r7
      000088 E4               [12]  193 	clr	a
      000089 12r00r00         [24]  194 	lcall	__gptrput
                                    195 ;	gets.c:58: return s;
      00008C 8D 82            [24]  196 	mov	dpl,r5
      00008E 8E 83            [24]  197 	mov	dph,r6
      000090 8F F0            [24]  198 	mov	b,r7
                                    199 ;	gets.c:60: default:
      000092 22               [24]  200 	ret
      000093                        201 00106$:
                                    202 ;	gets.c:61: *s++ = c;
      000093 8D 82            [24]  203 	mov	dpl,r5
      000095 8E 83            [24]  204 	mov	dph,r6
      000097 8F F0            [24]  205 	mov	b,r7
      000099 E9               [12]  206 	mov	a,r1
      00009A 12r00r00         [24]  207 	lcall	__gptrput
      00009D A3               [24]  208 	inc	dptr
      00009E AD 82            [24]  209 	mov	r5,dpl
      0000A0 AE 83            [24]  210 	mov	r6,dph
                                    211 ;	gets.c:62: ++count;
      0000A2 0B               [12]  212 	inc	r3
      0000A3 BB 00 01         [24]  213 	cjne	r3,#0x00,00139$
      0000A6 0C               [12]  214 	inc	r4
      0000A7                        215 00139$:
                                    216 ;	gets.c:63: putchar (c);
      0000A7 7A 00            [12]  217 	mov	r2,#0x00
      0000A9 89 82            [24]  218 	mov	dpl,r1
      0000AB 8A 83            [24]  219 	mov	dph,r2
      0000AD C0 07            [24]  220 	push	ar7
      0000AF C0 06            [24]  221 	push	ar6
      0000B1 C0 05            [24]  222 	push	ar5
      0000B3 C0 04            [24]  223 	push	ar4
      0000B5 C0 03            [24]  224 	push	ar3
      0000B7 12r00r00         [24]  225 	lcall	_putchar
      0000BA D0 03            [24]  226 	pop	ar3
      0000BC D0 04            [24]  227 	pop	ar4
      0000BE D0 05            [24]  228 	pop	ar5
      0000C0 D0 06            [24]  229 	pop	ar6
      0000C2 D0 07            [24]  230 	pop	ar7
                                    231 ;	gets.c:65: }
                                    232 ;	gets.c:67: }
      0000C4 02r00r0A         [24]  233 	ljmp	00109$
                                    234 	.area CSEG    (CODE)
                                    235 	.area CONST   (CODE)
                                    236 	.area XINIT   (CODE)
                                    237 	.area CABS    (ABS,CODE)
