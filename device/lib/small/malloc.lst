                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module malloc
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___sdcc_heap_init
                                     12 	.globl ___sdcc_heap_free
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
      000000                         33 _malloc_size_65536_42:
      000000                         34 	.ds 2
      000002                         35 _malloc_blocksize_196608_45:
      000002                         36 	.ds 2
      000004                         37 _malloc_newheader_327680_47:
      000004                         38 	.ds 2
      000006                         39 _malloc_sloc0_1_0:
      000006                         40 	.ds 2
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable items in internal ram
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; uninitialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
      000000                         65 ___sdcc_heap_free::
      000000                         66 	.ds 2
                                     67 ;--------------------------------------------------------
                                     68 ; absolute external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XABS    (ABS,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; initialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XISEG   (XDATA)
                                     75 	.area HOME    (CODE)
                                     76 	.area GSINIT0 (CODE)
                                     77 	.area GSINIT1 (CODE)
                                     78 	.area GSINIT2 (CODE)
                                     79 	.area GSINIT3 (CODE)
                                     80 	.area GSINIT4 (CODE)
                                     81 	.area GSINIT5 (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area CSEG    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function '__sdcc_heap_init'
                                    103 ;------------------------------------------------------------
                                    104 ;	malloc.c:65: void __sdcc_heap_init(void)
                                    105 ;	-----------------------------------------
                                    106 ;	 function __sdcc_heap_init
                                    107 ;	-----------------------------------------
      000000                        108 ___sdcc_heap_init:
                           000007   109 	ar7 = 0x07
                           000006   110 	ar6 = 0x06
                           000005   111 	ar5 = 0x05
                           000004   112 	ar4 = 0x04
                           000003   113 	ar3 = 0x03
                           000002   114 	ar2 = 0x02
                           000001   115 	ar1 = 0x01
                           000000   116 	ar0 = 0x00
                                    117 ;	malloc.c:67: __sdcc_heap_free = HEAP_START;
      000000 90r00r00         [24]  118 	mov	dptr,#___sdcc_heap_free
      000003 74r00            [12]  119 	mov	a,#___sdcc_heap
      000005 F0               [24]  120 	movx	@dptr,a
      000006 74s00            [12]  121 	mov	a,#(___sdcc_heap >> 8)
      000008 A3               [24]  122 	inc	dptr
      000009 F0               [24]  123 	movx	@dptr,a
                                    124 ;	malloc.c:68: __sdcc_heap_free->next = HEAP_END;
      00000A 90r00r00         [24]  125 	mov	dptr,#___sdcc_heap_size
      00000D E4               [12]  126 	clr	a
      00000E 93               [24]  127 	movc	a,@a+dptr
      00000F FE               [12]  128 	mov	r6,a
      000010 74 01            [12]  129 	mov	a,#0x01
      000012 93               [24]  130 	movc	a,@a+dptr
      000013 FF               [12]  131 	mov	r7,a
      000014 1E               [12]  132 	dec	r6
      000015 BE FF 01         [24]  133 	cjne	r6,#0xff,00103$
      000018 1F               [12]  134 	dec	r7
      000019                        135 00103$:
      000019 EE               [12]  136 	mov	a,r6
      00001A 24r00            [12]  137 	add	a,#___sdcc_heap
      00001C FE               [12]  138 	mov	r6,a
      00001D EF               [12]  139 	mov	a,r7
      00001E 34s00            [12]  140 	addc	a,#(___sdcc_heap >> 8)
      000020 FF               [12]  141 	mov	r7,a
      000021 90r00r00         [24]  142 	mov	dptr,#___sdcc_heap
      000024 EE               [12]  143 	mov	a,r6
      000025 F0               [24]  144 	movx	@dptr,a
      000026 EF               [12]  145 	mov	a,r7
      000027 A3               [24]  146 	inc	dptr
      000028 F0               [24]  147 	movx	@dptr,a
                                    148 ;	malloc.c:69: __sdcc_heap_free->next_free = 0;
      000029 90r00r00         [24]  149 	mov	dptr,#___sdcc_heap_free
      00002C E0               [24]  150 	movx	a,@dptr
      00002D FE               [12]  151 	mov	r6,a
      00002E A3               [24]  152 	inc	dptr
      00002F E0               [24]  153 	movx	a,@dptr
      000030 FF               [12]  154 	mov	r7,a
      000031 8E 82            [24]  155 	mov	dpl,r6
      000033 8F 83            [24]  156 	mov	dph,r7
      000035 A3               [24]  157 	inc	dptr
      000036 A3               [24]  158 	inc	dptr
      000037 E4               [12]  159 	clr	a
      000038 F0               [24]  160 	movx	@dptr,a
      000039 A3               [24]  161 	inc	dptr
      00003A F0               [24]  162 	movx	@dptr,a
                                    163 ;	malloc.c:70: }
      00003B 22               [24]  164 	ret
                                    165 ;------------------------------------------------------------
                                    166 ;Allocation info for local variables in function 'malloc'
                                    167 ;------------------------------------------------------------
                                    168 ;size                      Allocated with name '_malloc_size_65536_42'
                                    169 ;h                         Allocated to registers r4 r5 
                                    170 ;f                         Allocated to registers r2 r3 
                                    171 ;blocksize                 Allocated with name '_malloc_blocksize_196608_45'
                                    172 ;newheader                 Allocated with name '_malloc_newheader_327680_47'
                                    173 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                                    174 ;------------------------------------------------------------
                                    175 ;	malloc.c:73: void HEAPSPACE *malloc(size_t size)
                                    176 ;	-----------------------------------------
                                    177 ;	 function malloc
                                    178 ;	-----------------------------------------
      00003C                        179 _malloc:
      00003C AE 82            [24]  180 	mov	r6,dpl
      00003E AF 83            [24]  181 	mov	r7,dph
                                    182 ;	malloc.c:82: if(!__sdcc_heap_free)
      000040 90r00r00         [24]  183 	mov	dptr,#___sdcc_heap_free
      000043 E0               [24]  184 	movx	a,@dptr
      000044 F5 F0            [12]  185 	mov	b,a
      000046 A3               [24]  186 	inc	dptr
      000047 E0               [24]  187 	movx	a,@dptr
      000048 45 F0            [12]  188 	orl	a,b
      00004A 70 0B            [24]  189 	jnz	00102$
                                    190 ;	malloc.c:83: __sdcc_heap_init();
      00004C C0 07            [24]  191 	push	ar7
      00004E C0 06            [24]  192 	push	ar6
      000050 12r00r00         [24]  193 	lcall	___sdcc_heap_init
      000053 D0 06            [24]  194 	pop	ar6
      000055 D0 07            [24]  195 	pop	ar7
      000057                        196 00102$:
                                    197 ;	malloc.c:86: if(!size || size + offsetof(struct header, next_free) < size)
      000057 EE               [12]  198 	mov	a,r6
      000058 4F               [12]  199 	orl	a,r7
      000059 60 0E            [24]  200 	jz	00103$
      00005B 74 02            [12]  201 	mov	a,#0x02
      00005D 2E               [12]  202 	add	a,r6
      00005E FC               [12]  203 	mov	r4,a
      00005F E4               [12]  204 	clr	a
      000060 3F               [12]  205 	addc	a,r7
      000061 FD               [12]  206 	mov	r5,a
      000062 C3               [12]  207 	clr	c
      000063 EC               [12]  208 	mov	a,r4
      000064 9E               [12]  209 	subb	a,r6
      000065 ED               [12]  210 	mov	a,r5
      000066 9F               [12]  211 	subb	a,r7
      000067 50 04            [24]  212 	jnc	00104$
      000069                        213 00103$:
                                    214 ;	malloc.c:87: return(0);
      000069 90 00 00         [24]  215 	mov	dptr,#0x0000
      00006C 22               [24]  216 	ret
      00006D                        217 00104$:
                                    218 ;	malloc.c:88: size += offsetof(struct header, next_free);
      00006D 74 02            [12]  219 	mov	a,#0x02
      00006F 2E               [12]  220 	add	a,r6
      000070 F5*00            [12]  221 	mov	_malloc_size_65536_42,a
      000072 E4               [12]  222 	clr	a
      000073 3F               [12]  223 	addc	a,r7
      000074 F5*01            [12]  224 	mov	(_malloc_size_65536_42 + 1),a
                                    225 ;	malloc.c:89: if(size < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
      000076 C3               [12]  226 	clr	c
      000077 E5*00            [12]  227 	mov	a,_malloc_size_65536_42
      000079 94 04            [12]  228 	subb	a,#0x04
      00007B E5*01            [12]  229 	mov	a,(_malloc_size_65536_42 + 1)
      00007D 94 00            [12]  230 	subb	a,#0x00
      00007F 50 06            [24]  231 	jnc	00107$
                                    232 ;	malloc.c:90: size = sizeof(struct header);
      000081 75*00 04         [24]  233 	mov	_malloc_size_65536_42,#0x04
      000084 75*01 00         [24]  234 	mov	(_malloc_size_65536_42 + 1),#0x00
      000087                        235 00107$:
                                    236 ;	malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
      000087 90r00r00         [24]  237 	mov	dptr,#___sdcc_heap_free
      00008A E0               [24]  238 	movx	a,@dptr
      00008B FC               [12]  239 	mov	r4,a
      00008C A3               [24]  240 	inc	dptr
      00008D E0               [24]  241 	movx	a,@dptr
      00008E FD               [12]  242 	mov	r5,a
      00008F 7Ar00            [12]  243 	mov	r2,#___sdcc_heap_free
      000091 7Bs00            [12]  244 	mov	r3,#(___sdcc_heap_free >> 8)
      000093                        245 00115$:
      000093 EC               [12]  246 	mov	a,r4
      000094 4D               [12]  247 	orl	a,r5
      000095 70 03            [24]  248 	jnz	00158$
      000097 02r01r5B         [24]  249 	ljmp	00113$
      00009A                        250 00158$:
                                    251 ;	malloc.c:94: size_t blocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
      00009A 8C 82            [24]  252 	mov	dpl,r4
      00009C 8D 83            [24]  253 	mov	dph,r5
      00009E E0               [24]  254 	movx	a,@dptr
      00009F F8               [12]  255 	mov	r0,a
      0000A0 A3               [24]  256 	inc	dptr
      0000A1 E0               [24]  257 	movx	a,@dptr
      0000A2 F9               [12]  258 	mov	r1,a
      0000A3 88 06            [24]  259 	mov	ar6,r0
      0000A5 89 07            [24]  260 	mov	ar7,r1
      0000A7 8C*06            [24]  261 	mov	_malloc_sloc0_1_0,r4
      0000A9 8D*07            [24]  262 	mov	(_malloc_sloc0_1_0 + 1),r5
      0000AB EE               [12]  263 	mov	a,r6
      0000AC C3               [12]  264 	clr	c
      0000AD 95*06            [12]  265 	subb	a,_malloc_sloc0_1_0
      0000AF F5*02            [12]  266 	mov	_malloc_blocksize_196608_45,a
      0000B1 EF               [12]  267 	mov	a,r7
      0000B2 95*07            [12]  268 	subb	a,(_malloc_sloc0_1_0 + 1)
      0000B4 F5*03            [12]  269 	mov	(_malloc_blocksize_196608_45 + 1),a
                                    270 ;	malloc.c:95: if(blocksize >= size) // Found free block of sufficient size.
      0000B6 C3               [12]  271 	clr	c
      0000B7 E5*02            [12]  272 	mov	a,_malloc_blocksize_196608_45
      0000B9 95*00            [12]  273 	subb	a,_malloc_size_65536_42
      0000BB E5*03            [12]  274 	mov	a,(_malloc_blocksize_196608_45 + 1)
      0000BD 95*01            [12]  275 	subb	a,(_malloc_size_65536_42 + 1)
      0000BF 50 03            [24]  276 	jnc	00159$
      0000C1 02r01r44         [24]  277 	ljmp	00116$
      0000C4                        278 00159$:
                                    279 ;	malloc.c:97: if(blocksize >= size + sizeof(struct header)) // It is worth creating a new free block
      0000C4 74 04            [12]  280 	mov	a,#0x04
      0000C6 25*00            [12]  281 	add	a,_malloc_size_65536_42
      0000C8 FE               [12]  282 	mov	r6,a
      0000C9 E4               [12]  283 	clr	a
      0000CA 35*01            [12]  284 	addc	a,(_malloc_size_65536_42 + 1)
      0000CC FF               [12]  285 	mov	r7,a
      0000CD C3               [12]  286 	clr	c
      0000CE E5*02            [12]  287 	mov	a,_malloc_blocksize_196608_45
      0000D0 9E               [12]  288 	subb	a,r6
      0000D1 E5*03            [12]  289 	mov	a,(_malloc_blocksize_196608_45 + 1)
      0000D3 9F               [12]  290 	subb	a,r7
      0000D4 40 4E            [24]  291 	jc	00109$
                                    292 ;	malloc.c:99: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + size);
      0000D6 E5*00            [12]  293 	mov	a,_malloc_size_65536_42
      0000D8 25*06            [12]  294 	add	a,_malloc_sloc0_1_0
      0000DA FE               [12]  295 	mov	r6,a
      0000DB E5*01            [12]  296 	mov	a,(_malloc_size_65536_42 + 1)
      0000DD 35*07            [12]  297 	addc	a,(_malloc_sloc0_1_0 + 1)
      0000DF FF               [12]  298 	mov	r7,a
      0000E0 8E*04            [24]  299 	mov	_malloc_newheader_327680_47,r6
      0000E2 8F*05            [24]  300 	mov	(_malloc_newheader_327680_47 + 1),r7
                                    301 ;	malloc.c:100: newheader->next = h->next;
      0000E4 85*04 82         [24]  302 	mov	dpl,_malloc_newheader_327680_47
      0000E7 85*05 83         [24]  303 	mov	dph,(_malloc_newheader_327680_47 + 1)
      0000EA E8               [12]  304 	mov	a,r0
      0000EB F0               [24]  305 	movx	@dptr,a
      0000EC E9               [12]  306 	mov	a,r1
      0000ED A3               [24]  307 	inc	dptr
      0000EE F0               [24]  308 	movx	@dptr,a
                                    309 ;	malloc.c:101: newheader->next_free = h->next_free;
      0000EF 74 02            [12]  310 	mov	a,#0x02
      0000F1 25*04            [12]  311 	add	a,_malloc_newheader_327680_47
      0000F3 F8               [12]  312 	mov	r0,a
      0000F4 E4               [12]  313 	clr	a
      0000F5 35*05            [12]  314 	addc	a,(_malloc_newheader_327680_47 + 1)
      0000F7 F9               [12]  315 	mov	r1,a
      0000F8 8C 82            [24]  316 	mov	dpl,r4
      0000FA 8D 83            [24]  317 	mov	dph,r5
      0000FC A3               [24]  318 	inc	dptr
      0000FD A3               [24]  319 	inc	dptr
      0000FE E0               [24]  320 	movx	a,@dptr
      0000FF FE               [12]  321 	mov	r6,a
      000100 A3               [24]  322 	inc	dptr
      000101 E0               [24]  323 	movx	a,@dptr
      000102 FF               [12]  324 	mov	r7,a
      000103 88 82            [24]  325 	mov	dpl,r0
      000105 89 83            [24]  326 	mov	dph,r1
      000107 EE               [12]  327 	mov	a,r6
      000108 F0               [24]  328 	movx	@dptr,a
      000109 EF               [12]  329 	mov	a,r7
      00010A A3               [24]  330 	inc	dptr
      00010B F0               [24]  331 	movx	@dptr,a
                                    332 ;	malloc.c:102: *f = newheader;
      00010C 8A 82            [24]  333 	mov	dpl,r2
      00010E 8B 83            [24]  334 	mov	dph,r3
      000110 E5*04            [12]  335 	mov	a,_malloc_newheader_327680_47
      000112 F0               [24]  336 	movx	@dptr,a
      000113 E5*05            [12]  337 	mov	a,(_malloc_newheader_327680_47 + 1)
      000115 A3               [24]  338 	inc	dptr
      000116 F0               [24]  339 	movx	@dptr,a
                                    340 ;	malloc.c:103: h->next = newheader;
      000117 8C 82            [24]  341 	mov	dpl,r4
      000119 8D 83            [24]  342 	mov	dph,r5
      00011B E5*04            [12]  343 	mov	a,_malloc_newheader_327680_47
      00011D F0               [24]  344 	movx	@dptr,a
      00011E E5*05            [12]  345 	mov	a,(_malloc_newheader_327680_47 + 1)
      000120 A3               [24]  346 	inc	dptr
      000121 F0               [24]  347 	movx	@dptr,a
      000122 80 14            [24]  348 	sjmp	00110$
      000124                        349 00109$:
                                    350 ;	malloc.c:106: *f = h->next_free;
      000124 8C 82            [24]  351 	mov	dpl,r4
      000126 8D 83            [24]  352 	mov	dph,r5
      000128 A3               [24]  353 	inc	dptr
      000129 A3               [24]  354 	inc	dptr
      00012A E0               [24]  355 	movx	a,@dptr
      00012B FE               [12]  356 	mov	r6,a
      00012C A3               [24]  357 	inc	dptr
      00012D E0               [24]  358 	movx	a,@dptr
      00012E FF               [12]  359 	mov	r7,a
      00012F 8A 82            [24]  360 	mov	dpl,r2
      000131 8B 83            [24]  361 	mov	dph,r3
      000133 EE               [12]  362 	mov	a,r6
      000134 F0               [24]  363 	movx	@dptr,a
      000135 EF               [12]  364 	mov	a,r7
      000136 A3               [24]  365 	inc	dptr
      000137 F0               [24]  366 	movx	@dptr,a
      000138                        367 00110$:
                                    368 ;	malloc.c:108: return(&(h->next_free));
      000138 74 02            [12]  369 	mov	a,#0x02
      00013A 2C               [12]  370 	add	a,r4
      00013B FE               [12]  371 	mov	r6,a
      00013C E4               [12]  372 	clr	a
      00013D 3D               [12]  373 	addc	a,r5
      00013E FF               [12]  374 	mov	r7,a
      00013F 8E 82            [24]  375 	mov	dpl,r6
      000141 8F 83            [24]  376 	mov	dph,r7
      000143 22               [24]  377 	ret
      000144                        378 00116$:
                                    379 ;	malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
      000144 74 02            [12]  380 	mov	a,#0x02
      000146 2C               [12]  381 	add	a,r4
      000147 FE               [12]  382 	mov	r6,a
      000148 E4               [12]  383 	clr	a
      000149 3D               [12]  384 	addc	a,r5
      00014A FF               [12]  385 	mov	r7,a
      00014B 8E 02            [24]  386 	mov	ar2,r6
      00014D 8F 03            [24]  387 	mov	ar3,r7
      00014F 8E 82            [24]  388 	mov	dpl,r6
      000151 8F 83            [24]  389 	mov	dph,r7
      000153 E0               [24]  390 	movx	a,@dptr
      000154 FC               [12]  391 	mov	r4,a
      000155 A3               [24]  392 	inc	dptr
      000156 E0               [24]  393 	movx	a,@dptr
      000157 FD               [12]  394 	mov	r5,a
      000158 02r00r93         [24]  395 	ljmp	00115$
      00015B                        396 00113$:
                                    397 ;	malloc.c:112: return(0);
      00015B 90 00 00         [24]  398 	mov	dptr,#0x0000
                                    399 ;	malloc.c:113: }
      00015E 22               [24]  400 	ret
                                    401 	.area CSEG    (CODE)
                                    402 	.area CONST   (CODE)
                                    403 	.area XINIT   (CODE)
                                    404 	.area CABS    (ABS,CODE)
