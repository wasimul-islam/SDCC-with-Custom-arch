                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16stombs
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___memcpy
                                     12 	.globl _wctomb
                                     13 	.globl ___c16stombs_PARM_3
                                     14 	.globl ___c16stombs_PARM_2
                                     15 	.globl ___c16stombs
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 ___c16stombs_PARM_2:
      000000                         36 	.ds 3
      000003                         37 ___c16stombs_PARM_3:
      000003                         38 	.ds 2
      000005                         39 ___c16stombs_s_65536_78:
      000005                         40 	.ds 3
      000008                         41 ___c16stombs_m_65536_79:
      000008                         42 	.ds 2
      00000A                         43 ___c16stombs_b_65536_79:
      00000A                         44 	.ds 4
      00000E                         45 ___c16stombs_sloc0_1_0:
      00000E                         46 	.ds 2
      000010                         47 ___c16stombs_sloc1_1_0:
      000010                         48 	.ds 3
      000013                         49 ___c16stombs_sloc2_1_0:
      000013                         50 	.ds 2
      000015                         51 ___c16stombs_sloc3_1_0:
      000015                         52 	.ds 4
                                     53 ;--------------------------------------------------------
                                     54 ; overlayable items in internal ram
                                     55 ;--------------------------------------------------------
                                     56 ;--------------------------------------------------------
                                     57 ; indirectly addressable internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area ISEG    (DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area IABS    (ABS,DATA)
                                     64 	.area IABS    (ABS,DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; bit data
                                     67 ;--------------------------------------------------------
                                     68 	.area BSEG    (BIT)
                                     69 ;--------------------------------------------------------
                                     70 ; paged external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area PSEG    (PAG,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; uninitialized external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XSEG    (XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XABS    (ABS,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; initialized external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XISEG   (XDATA)
                                     85 	.area HOME    (CODE)
                                     86 	.area GSINIT0 (CODE)
                                     87 	.area GSINIT1 (CODE)
                                     88 	.area GSINIT2 (CODE)
                                     89 	.area GSINIT3 (CODE)
                                     90 	.area GSINIT4 (CODE)
                                     91 	.area GSINIT5 (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area CSEG    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; global & static initialisations
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area GSINIT  (CODE)
                                    100 	.area GSFINAL (CODE)
                                    101 	.area GSINIT  (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; Home
                                    104 ;--------------------------------------------------------
                                    105 	.area HOME    (CODE)
                                    106 	.area HOME    (CODE)
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CSEG    (CODE)
                                    111 ;------------------------------------------------------------
                                    112 ;Allocation info for local variables in function '__c16stombs'
                                    113 ;------------------------------------------------------------
                                    114 ;c16s                      Allocated with name '___c16stombs_PARM_2'
                                    115 ;n                         Allocated with name '___c16stombs_PARM_3'
                                    116 ;s                         Allocated with name '___c16stombs_s_65536_78'
                                    117 ;m                         Allocated with name '___c16stombs_m_65536_79'
                                    118 ;b                         Allocated with name '___c16stombs_b_65536_79'
                                    119 ;l                         Allocated to registers r7 r6 
                                    120 ;codepoint                 Allocated to registers r3 r4 r6 r7 
                                    121 ;sloc0                     Allocated with name '___c16stombs_sloc0_1_0'
                                    122 ;sloc1                     Allocated with name '___c16stombs_sloc1_1_0'
                                    123 ;sloc2                     Allocated with name '___c16stombs_sloc2_1_0'
                                    124 ;sloc3                     Allocated with name '___c16stombs_sloc3_1_0'
                                    125 ;------------------------------------------------------------
                                    126 ;	c16stombs.c:44: size_t __c16stombs(char *restrict s, const char16_t *restrict c16s, size_t n)
                                    127 ;	-----------------------------------------
                                    128 ;	 function __c16stombs
                                    129 ;	-----------------------------------------
      000000                        130 ___c16stombs:
                           000007   131 	ar7 = 0x07
                           000006   132 	ar6 = 0x06
                           000005   133 	ar5 = 0x05
                           000004   134 	ar4 = 0x04
                           000003   135 	ar3 = 0x03
                           000002   136 	ar2 = 0x02
                           000001   137 	ar1 = 0x01
                           000000   138 	ar0 = 0x00
      000000 85 82*05         [24]  139 	mov	___c16stombs_s_65536_78,dpl
      000003 85 83*06         [24]  140 	mov	(___c16stombs_s_65536_78 + 1),dph
      000006 85 F0*07         [24]  141 	mov	(___c16stombs_s_65536_78 + 2),b
                                    142 ;	c16stombs.c:46: size_t m = 0;
      000009 E4               [12]  143 	clr	a
      00000A F5*08            [12]  144 	mov	___c16stombs_m_65536_79,a
      00000C F5*09            [12]  145 	mov	(___c16stombs_m_65536_79 + 1),a
                                    146 ;	c16stombs.c:87: return(m);
      00000E                        147 00119$:
                                    148 ;	c16stombs.c:54: if(c16s[0] < 0xd800 || c16s[0] >= 0xe000) // Basic multilingual plane
      00000E 85*00*10         [24]  149 	mov	___c16stombs_sloc1_1_0,___c16stombs_PARM_2
      000011 85*01*11         [24]  150 	mov	(___c16stombs_sloc1_1_0 + 1),(___c16stombs_PARM_2 + 1)
      000014 85*02*12         [24]  151 	mov	(___c16stombs_sloc1_1_0 + 2),(___c16stombs_PARM_2 + 2)
      000017 85*10 82         [24]  152 	mov	dpl,___c16stombs_sloc1_1_0
      00001A 85*11 83         [24]  153 	mov	dph,(___c16stombs_sloc1_1_0 + 1)
      00001D 85*12 F0         [24]  154 	mov	b,(___c16stombs_sloc1_1_0 + 2)
      000020 12r00r00         [24]  155 	lcall	__gptrget
      000023 F5*0E            [12]  156 	mov	___c16stombs_sloc0_1_0,a
      000025 A3               [24]  157 	inc	dptr
      000026 12r00r00         [24]  158 	lcall	__gptrget
      000029 F5*0F            [12]  159 	mov	(___c16stombs_sloc0_1_0 + 1),a
      00002B C3               [12]  160 	clr	c
      00002C 94 D8            [12]  161 	subb	a,#0xd8
      00002E 40 06            [24]  162 	jc	00106$
      000030 74 20            [12]  163 	mov	a,#0x100 - 0xe0
      000032 25*0F            [12]  164 	add	a,(___c16stombs_sloc0_1_0 + 1)
      000034 50 2F            [24]  165 	jnc	00107$
      000036                        166 00106$:
                                    167 ;	c16stombs.c:56: codepoint = c16s[0];
      000036 85*00*10         [24]  168 	mov	___c16stombs_sloc1_1_0,___c16stombs_PARM_2
      000039 85*01*11         [24]  169 	mov	(___c16stombs_sloc1_1_0 + 1),(___c16stombs_PARM_2 + 1)
      00003C 85*02*12         [24]  170 	mov	(___c16stombs_sloc1_1_0 + 2),(___c16stombs_PARM_2 + 2)
      00003F 85*10 82         [24]  171 	mov	dpl,___c16stombs_sloc1_1_0
      000042 85*11 83         [24]  172 	mov	dph,(___c16stombs_sloc1_1_0 + 1)
      000045 85*12 F0         [24]  173 	mov	b,(___c16stombs_sloc1_1_0 + 2)
      000048 12r00r00         [24]  174 	lcall	__gptrget
      00004B FB               [12]  175 	mov	r3,a
      00004C A3               [24]  176 	inc	dptr
      00004D 12r00r00         [24]  177 	lcall	__gptrget
      000050 FC               [12]  178 	mov	r4,a
                                    179 ;	c16stombs.c:57: c16s++;
      000051 E4               [12]  180 	clr	a
      000052 FE               [12]  181 	mov	r6,a
      000053 FF               [12]  182 	mov	r7,a
      000054 74 02            [12]  183 	mov	a,#0x02
      000056 25*10            [12]  184 	add	a,___c16stombs_sloc1_1_0
      000058 F5*00            [12]  185 	mov	___c16stombs_PARM_2,a
      00005A E4               [12]  186 	clr	a
      00005B 35*11            [12]  187 	addc	a,(___c16stombs_sloc1_1_0 + 1)
      00005D F5*01            [12]  188 	mov	(___c16stombs_PARM_2 + 1),a
      00005F 85*12*02         [24]  189 	mov	(___c16stombs_PARM_2 + 2),(___c16stombs_sloc1_1_0 + 2)
      000062 02r00rFD         [24]  190 	ljmp	00108$
      000065                        191 00107$:
                                    192 ;	c16stombs.c:59: else if(c16s[0] > 0xdbff || c16s[1] < 0xdc00 || c16s[1] > 0xdfff) // Unpaired surrogate
      000065 C3               [12]  193 	clr	c
      000066 74 FF            [12]  194 	mov	a,#0xff
      000068 95*0E            [12]  195 	subb	a,___c16stombs_sloc0_1_0
      00006A 74 DB            [12]  196 	mov	a,#0xdb
      00006C 95*0F            [12]  197 	subb	a,(___c16stombs_sloc0_1_0 + 1)
      00006E 40 2B            [24]  198 	jc	00101$
      000070 74 02            [12]  199 	mov	a,#0x02
      000072 25*10            [12]  200 	add	a,___c16stombs_sloc1_1_0
      000074 FA               [12]  201 	mov	r2,a
      000075 E4               [12]  202 	clr	a
      000076 35*11            [12]  203 	addc	a,(___c16stombs_sloc1_1_0 + 1)
      000078 F9               [12]  204 	mov	r1,a
      000079 AD*12            [24]  205 	mov	r5,(___c16stombs_sloc1_1_0 + 2)
      00007B 8A 82            [24]  206 	mov	dpl,r2
      00007D 89 83            [24]  207 	mov	dph,r1
      00007F 8D F0            [24]  208 	mov	b,r5
      000081 12r00r00         [24]  209 	lcall	__gptrget
      000084 F5*13            [12]  210 	mov	___c16stombs_sloc2_1_0,a
      000086 A3               [24]  211 	inc	dptr
      000087 12r00r00         [24]  212 	lcall	__gptrget
      00008A F5*14            [12]  213 	mov	(___c16stombs_sloc2_1_0 + 1),a
      00008C C3               [12]  214 	clr	c
      00008D 94 DC            [12]  215 	subb	a,#0xdc
      00008F 40 0A            [24]  216 	jc	00101$
      000091 74 FF            [12]  217 	mov	a,#0xff
      000093 95*13            [12]  218 	subb	a,___c16stombs_sloc2_1_0
      000095 74 DF            [12]  219 	mov	a,#0xdf
      000097 95*14            [12]  220 	subb	a,(___c16stombs_sloc2_1_0 + 1)
      000099 50 04            [24]  221 	jnc	00102$
      00009B                        222 00101$:
                                    223 ;	c16stombs.c:60: return(-1);
      00009B 90 FF FF         [24]  224 	mov	dptr,#0xffff
      00009E 22               [24]  225 	ret
      00009F                        226 00102$:
                                    227 ;	c16stombs.c:63: codepoint = ((unsigned long)(c16s[0]) << 10) -(0xd800ul << 10) + (unsigned long)(c16s[1]) - 0xdc00ul + 0x10000ul;
      00009F A8*0E            [24]  228 	mov	r0,___c16stombs_sloc0_1_0
      0000A1 A9*0F            [24]  229 	mov	r1,(___c16stombs_sloc0_1_0 + 1)
      0000A3 7A 00            [12]  230 	mov	r2,#0x00
      0000A5 89*17            [24]  231 	mov	(___c16stombs_sloc3_1_0 + 2),r1
      0000A7 EA               [12]  232 	mov	a,r2
      0000A8 C5*17            [12]  233 	xch	a,(___c16stombs_sloc3_1_0 + 2)
      0000AA 25 E0            [12]  234 	add	a,acc
      0000AC C5*17            [12]  235 	xch	a,(___c16stombs_sloc3_1_0 + 2)
      0000AE 33               [12]  236 	rlc	a
      0000AF C5*17            [12]  237 	xch	a,(___c16stombs_sloc3_1_0 + 2)
      0000B1 25 E0            [12]  238 	add	a,acc
      0000B3 C5*17            [12]  239 	xch	a,(___c16stombs_sloc3_1_0 + 2)
      0000B5 33               [12]  240 	rlc	a
      0000B6 F5*18            [12]  241 	mov	(___c16stombs_sloc3_1_0 + 3),a
      0000B8 E8               [12]  242 	mov	a,r0
      0000B9 23               [12]  243 	rl	a
      0000BA 23               [12]  244 	rl	a
      0000BB 54 03            [12]  245 	anl	a,#0x03
      0000BD 45*17            [12]  246 	orl	a,(___c16stombs_sloc3_1_0 + 2)
      0000BF F5*17            [12]  247 	mov	(___c16stombs_sloc3_1_0 + 2),a
      0000C1 E8               [12]  248 	mov	a,r0
      0000C2 28               [12]  249 	add	a,r0
      0000C3 25 E0            [12]  250 	add	a,acc
      0000C5 F5*16            [12]  251 	mov	(___c16stombs_sloc3_1_0 + 1),a
      0000C7 75*15 00         [24]  252 	mov	___c16stombs_sloc3_1_0,#0x00
      0000CA A8*13            [24]  253 	mov	r0,___c16stombs_sloc2_1_0
      0000CC A9*14            [24]  254 	mov	r1,(___c16stombs_sloc2_1_0 + 1)
      0000CE E4               [12]  255 	clr	a
      0000CF FA               [12]  256 	mov	r2,a
      0000D0 FD               [12]  257 	mov	r5,a
      0000D1 E8               [12]  258 	mov	a,r0
      0000D2 25*15            [12]  259 	add	a,___c16stombs_sloc3_1_0
      0000D4 F8               [12]  260 	mov	r0,a
      0000D5 E9               [12]  261 	mov	a,r1
      0000D6 35*16            [12]  262 	addc	a,(___c16stombs_sloc3_1_0 + 1)
      0000D8 F9               [12]  263 	mov	r1,a
      0000D9 EA               [12]  264 	mov	a,r2
      0000DA 35*17            [12]  265 	addc	a,(___c16stombs_sloc3_1_0 + 2)
      0000DC FA               [12]  266 	mov	r2,a
      0000DD ED               [12]  267 	mov	a,r5
      0000DE 35*18            [12]  268 	addc	a,(___c16stombs_sloc3_1_0 + 3)
      0000E0 FD               [12]  269 	mov	r5,a
      0000E1 88 03            [24]  270 	mov	ar3,r0
      0000E3 74 24            [12]  271 	mov	a,#0x24
      0000E5 29               [12]  272 	add	a,r1
      0000E6 FC               [12]  273 	mov	r4,a
      0000E7 74 A0            [12]  274 	mov	a,#0xa0
      0000E9 3A               [12]  275 	addc	a,r2
      0000EA FE               [12]  276 	mov	r6,a
      0000EB 74 FC            [12]  277 	mov	a,#0xfc
      0000ED 3D               [12]  278 	addc	a,r5
      0000EE FF               [12]  279 	mov	r7,a
                                    280 ;	c16stombs.c:64: c16s += 2;
      0000EF 74 04            [12]  281 	mov	a,#0x04
      0000F1 25*10            [12]  282 	add	a,___c16stombs_sloc1_1_0
      0000F3 F5*00            [12]  283 	mov	___c16stombs_PARM_2,a
      0000F5 E4               [12]  284 	clr	a
      0000F6 35*11            [12]  285 	addc	a,(___c16stombs_sloc1_1_0 + 1)
      0000F8 F5*01            [12]  286 	mov	(___c16stombs_PARM_2 + 1),a
      0000FA 85*12*02         [24]  287 	mov	(___c16stombs_PARM_2 + 2),(___c16stombs_sloc1_1_0 + 2)
      0000FD                        288 00108$:
                                    289 ;	c16stombs.c:67: if(!codepoint)
      0000FD EB               [12]  290 	mov	a,r3
      0000FE 4C               [12]  291 	orl	a,r4
      0000FF 4E               [12]  292 	orl	a,r6
      000100 4F               [12]  293 	orl	a,r7
      000101 70 1D            [24]  294 	jnz	00113$
                                    295 ;	c16stombs.c:69: if(m < n)
      000103 C3               [12]  296 	clr	c
      000104 E5*08            [12]  297 	mov	a,___c16stombs_m_65536_79
      000106 95*03            [12]  298 	subb	a,___c16stombs_PARM_3
      000108 E5*09            [12]  299 	mov	a,(___c16stombs_m_65536_79 + 1)
      00010A 95*04            [12]  300 	subb	a,(___c16stombs_PARM_3 + 1)
      00010C 40 03            [24]  301 	jc	00161$
      00010E 02r01r95         [24]  302 	ljmp	00118$
      000111                        303 00161$:
                                    304 ;	c16stombs.c:70: *s = 0;
      000111 85*05 82         [24]  305 	mov	dpl,___c16stombs_s_65536_78
      000114 85*06 83         [24]  306 	mov	dph,(___c16stombs_s_65536_78 + 1)
      000117 85*07 F0         [24]  307 	mov	b,(___c16stombs_s_65536_78 + 2)
      00011A E4               [12]  308 	clr	a
      00011B 12r00r00         [24]  309 	lcall	__gptrput
                                    310 ;	c16stombs.c:71: break;
      00011E 80 75            [24]  311 	sjmp	00118$
      000120                        312 00113$:
                                    313 ;	c16stombs.c:74: l = wctomb(b, codepoint);
      000120 8B*00            [24]  314 	mov	_wctomb_PARM_2,r3
      000122 8C*01            [24]  315 	mov	(_wctomb_PARM_2 + 1),r4
      000124 8E*02            [24]  316 	mov	(_wctomb_PARM_2 + 2),r6
      000126 8F*03            [24]  317 	mov	(_wctomb_PARM_2 + 3),r7
      000128 90r00r0A         [24]  318 	mov	dptr,#___c16stombs_b_65536_79
      00012B 75 F0 40         [24]  319 	mov	b,#0x40
      00012E 12r00r00         [24]  320 	lcall	_wctomb
      000131 AF 82            [24]  321 	mov	r7,dpl
                                    322 ;	c16stombs.c:76: if(l < 0)
      000133 E5 83            [12]  323 	mov	a,dph
      000135 FE               [12]  324 	mov	r6,a
      000136 30 E7 04         [24]  325 	jnb	acc.7,00115$
                                    326 ;	c16stombs.c:77: return(-1);
      000139 90 FF FF         [24]  327 	mov	dptr,#0xffff
      00013C 22               [24]  328 	ret
      00013D                        329 00115$:
                                    330 ;	c16stombs.c:79: if(m + l > n)
      00013D 8F 05            [24]  331 	mov	ar5,r7
      00013F 8E 04            [24]  332 	mov	ar4,r6
      000141 ED               [12]  333 	mov	a,r5
      000142 25*08            [12]  334 	add	a,___c16stombs_m_65536_79
      000144 FA               [12]  335 	mov	r2,a
      000145 EC               [12]  336 	mov	a,r4
      000146 35*09            [12]  337 	addc	a,(___c16stombs_m_65536_79 + 1)
      000148 FB               [12]  338 	mov	r3,a
      000149 C3               [12]  339 	clr	c
      00014A E5*03            [12]  340 	mov	a,___c16stombs_PARM_3
      00014C 9A               [12]  341 	subb	a,r2
      00014D E5*04            [12]  342 	mov	a,(___c16stombs_PARM_3 + 1)
      00014F 9B               [12]  343 	subb	a,r3
      000150 40 43            [24]  344 	jc	00118$
                                    345 ;	c16stombs.c:82: memcpy(s, b, l);
      000152 A9*05            [24]  346 	mov	r1,___c16stombs_s_65536_78
      000154 AA*06            [24]  347 	mov	r2,(___c16stombs_s_65536_78 + 1)
      000156 AB*07            [24]  348 	mov	r3,(___c16stombs_s_65536_78 + 2)
      000158 75*00r0A         [24]  349 	mov	___memcpy_PARM_2,#___c16stombs_b_65536_79
      00015B 75*01 00         [24]  350 	mov	(___memcpy_PARM_2 + 1),#0x00
      00015E 75*02 40         [24]  351 	mov	(___memcpy_PARM_2 + 2),#0x40
      000161 8F*00            [24]  352 	mov	___memcpy_PARM_3,r7
      000163 8E*01            [24]  353 	mov	(___memcpy_PARM_3 + 1),r6
      000165 89 82            [24]  354 	mov	dpl,r1
      000167 8A 83            [24]  355 	mov	dph,r2
      000169 8B F0            [24]  356 	mov	b,r3
      00016B C0 07            [24]  357 	push	ar7
      00016D C0 06            [24]  358 	push	ar6
      00016F C0 05            [24]  359 	push	ar5
      000171 C0 04            [24]  360 	push	ar4
      000173 12r00r00         [24]  361 	lcall	___memcpy
      000176 D0 04            [24]  362 	pop	ar4
      000178 D0 05            [24]  363 	pop	ar5
      00017A D0 06            [24]  364 	pop	ar6
      00017C D0 07            [24]  365 	pop	ar7
                                    366 ;	c16stombs.c:83: s += l;
      00017E EF               [12]  367 	mov	a,r7
      00017F 25*05            [12]  368 	add	a,___c16stombs_s_65536_78
      000181 F5*05            [12]  369 	mov	___c16stombs_s_65536_78,a
      000183 EE               [12]  370 	mov	a,r6
      000184 35*06            [12]  371 	addc	a,(___c16stombs_s_65536_78 + 1)
      000186 F5*06            [12]  372 	mov	(___c16stombs_s_65536_78 + 1),a
                                    373 ;	c16stombs.c:84: m += l;
      000188 ED               [12]  374 	mov	a,r5
      000189 25*08            [12]  375 	add	a,___c16stombs_m_65536_79
      00018B F5*08            [12]  376 	mov	___c16stombs_m_65536_79,a
      00018D EC               [12]  377 	mov	a,r4
      00018E 35*09            [12]  378 	addc	a,(___c16stombs_m_65536_79 + 1)
      000190 F5*09            [12]  379 	mov	(___c16stombs_m_65536_79 + 1),a
      000192 02r00r0E         [24]  380 	ljmp	00119$
      000195                        381 00118$:
                                    382 ;	c16stombs.c:87: return(m);
      000195 85*08 82         [24]  383 	mov	dpl,___c16stombs_m_65536_79
      000198 85*09 83         [24]  384 	mov	dph,(___c16stombs_m_65536_79 + 1)
                                    385 ;	c16stombs.c:88: }
      00019B 22               [24]  386 	ret
                                    387 	.area CSEG    (CODE)
                                    388 	.area CONST   (CODE)
                                    389 	.area XINIT   (CODE)
                                    390 	.area CABS    (ABS,CODE)
