                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _rrslonglong
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __rrslonglong_PARM_2
                                     12 	.globl __rrslonglong
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (OVR,DATA)
      000000                         36 __rrslonglong_PARM_2:
      000000                         37 	.ds 1
      000001                         38 __rrslonglong_l_65536_1:
      000001                         39 	.ds 8
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; uninitialized external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XSEG    (XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; initialized external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function '_rrslonglong'
                                     97 ;------------------------------------------------------------
                                     98 ;s                         Allocated with name '__rrslonglong_PARM_2'
                                     99 ;l                         Allocated with name '__rrslonglong_l_65536_1'
                                    100 ;top                       Allocated to registers 
                                    101 ;middle                    Allocated to registers 
                                    102 ;bottom                    Allocated to registers 
                                    103 ;b                         Allocated to registers 
                                    104 ;------------------------------------------------------------
                                    105 ;	_rrslonglong.c:41: long long _rrslonglong(long long l, char s) __SDCC_NONBANKED
                                    106 ;	-----------------------------------------
                                    107 ;	 function _rrslonglong
                                    108 ;	-----------------------------------------
      000000                        109 __rrslonglong:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 85 82*01         [24]  118 	mov	__rrslonglong_l_65536_1,dpl
      000003 85 83*02         [24]  119 	mov	(__rrslonglong_l_65536_1 + 1),dph
      000006 85 F0*03         [24]  120 	mov	(__rrslonglong_l_65536_1 + 2),b
      000009 F5*04            [12]  121 	mov	(__rrslonglong_l_65536_1 + 3),a
      00000B 8C*05            [24]  122 	mov	(__rrslonglong_l_65536_1 + 4),r4
      00000D 8D*06            [24]  123 	mov	(__rrslonglong_l_65536_1 + 5),r5
      00000F 8E*07            [24]  124 	mov	(__rrslonglong_l_65536_1 + 6),r6
      000011 8F*08            [24]  125 	mov	(__rrslonglong_l_65536_1 + 7),r7
                                    126 ;	_rrslonglong.c:43: int32_t *top = (uint32_t *)((char *)(&l) + 0);
                                    127 ;	_rrslonglong.c:44: uint32_t *middle = (uint16_t *)((char *)(&l) + 2);
                                    128 ;	_rrslonglong.c:45: uint32_t *bottom = (uint32_t *)((char *)(&l) + 4);
                                    129 ;	_rrslonglong.c:46: uint16_t *b = (uint16_t *)(&l);
                                    130 ;	_rrslonglong.c:56: (*bottom) >>= s;
      000013                        131 00103$:
                                    132 ;	_rrslonglong.c:48: for(;s >= 16; s-= 16)
      000013 74 F0            [12]  133 	mov	a,#0x100 - 0x10
      000015 25*00            [12]  134 	add	a,__rrslonglong_PARM_2
      000017 50 70            [24]  135 	jnc	00101$
                                    136 ;	_rrslonglong.c:50: b[3] = b[2];
      000019 90r00r05         [24]  137 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0004)
      00001C 75 F0 40         [24]  138 	mov	b,#0x40
      00001F 12r00r00         [24]  139 	lcall	__gptrget
      000022 FE               [12]  140 	mov	r6,a
      000023 A3               [24]  141 	inc	dptr
      000024 12r00r00         [24]  142 	lcall	__gptrget
      000027 FF               [12]  143 	mov	r7,a
      000028 90r00r07         [24]  144 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0006)
      00002B EE               [12]  145 	mov	a,r6
      00002C 12r00r00         [24]  146 	lcall	__gptrput
      00002F A3               [24]  147 	inc	dptr
      000030 EF               [12]  148 	mov	a,r7
      000031 12r00r00         [24]  149 	lcall	__gptrput
                                    150 ;	_rrslonglong.c:51: b[2] = b[1];
      000034 90r00r03         [24]  151 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0002)
      000037 12r00r00         [24]  152 	lcall	__gptrget
      00003A FE               [12]  153 	mov	r6,a
      00003B A3               [24]  154 	inc	dptr
      00003C 12r00r00         [24]  155 	lcall	__gptrget
      00003F FF               [12]  156 	mov	r7,a
      000040 90r00r05         [24]  157 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0004)
      000043 EE               [12]  158 	mov	a,r6
      000044 12r00r00         [24]  159 	lcall	__gptrput
      000047 A3               [24]  160 	inc	dptr
      000048 EF               [12]  161 	mov	a,r7
      000049 12r00r00         [24]  162 	lcall	__gptrput
                                    163 ;	_rrslonglong.c:52: b[1] = b[0];
      00004C AE*01            [24]  164 	mov	r6,(__rrslonglong_l_65536_1 + 0)
      00004E AF*02            [24]  165 	mov	r7,(__rrslonglong_l_65536_1 + 1)
      000050 90r00r03         [24]  166 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0002)
      000053 EE               [12]  167 	mov	a,r6
      000054 12r00r00         [24]  168 	lcall	__gptrput
      000057 A3               [24]  169 	inc	dptr
      000058 EF               [12]  170 	mov	a,r7
      000059 12r00r00         [24]  171 	lcall	__gptrput
                                    172 ;	_rrslonglong.c:53: b[0] = (b[0] & 0x8000) ? 0xffff : 0x000000;
      00005C 7Dr01            [12]  173 	mov	r5,#__rrslonglong_l_65536_1
      00005E 7Es00            [12]  174 	mov	r6,#(__rrslonglong_l_65536_1 >> 8)
      000060 7F 40            [12]  175 	mov	r7,#0x40
      000062 E5*02            [12]  176 	mov	a,(__rrslonglong_l_65536_1 + 1)
      000064 30 E7 06         [24]  177 	jnb	acc.7,00107$
      000067 7B FF            [12]  178 	mov	r3,#0xff
      000069 7C FF            [12]  179 	mov	r4,#0xff
      00006B 80 04            [24]  180 	sjmp	00108$
      00006D                        181 00107$:
      00006D 7B 00            [12]  182 	mov	r3,#0x00
      00006F 7C 00            [12]  183 	mov	r4,#0x00
      000071                        184 00108$:
      000071 8D 82            [24]  185 	mov	dpl,r5
      000073 8E 83            [24]  186 	mov	dph,r6
      000075 8F F0            [24]  187 	mov	b,r7
      000077 EB               [12]  188 	mov	a,r3
      000078 12r00r00         [24]  189 	lcall	__gptrput
      00007B A3               [24]  190 	inc	dptr
      00007C EC               [12]  191 	mov	a,r4
      00007D 12r00r00         [24]  192 	lcall	__gptrput
                                    193 ;	_rrslonglong.c:48: for(;s >= 16; s-= 16)
      000080 E5*00            [12]  194 	mov	a,__rrslonglong_PARM_2
      000082 FF               [12]  195 	mov	r7,a
      000083 24 F0            [12]  196 	add	a,#0xf0
      000085 F5*00            [12]  197 	mov	__rrslonglong_PARM_2,a
      000087 80 8A            [24]  198 	sjmp	00103$
      000089                        199 00101$:
                                    200 ;	_rrslonglong.c:56: (*bottom) >>= s;
      000089 90r00r05         [24]  201 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0004)
      00008C 75 F0 40         [24]  202 	mov	b,#0x40
      00008F 12r00r00         [24]  203 	lcall	__gptrget
      000092 FC               [12]  204 	mov	r4,a
      000093 A3               [24]  205 	inc	dptr
      000094 12r00r00         [24]  206 	lcall	__gptrget
      000097 FD               [12]  207 	mov	r5,a
      000098 A3               [24]  208 	inc	dptr
      000099 12r00r00         [24]  209 	lcall	__gptrget
      00009C FE               [12]  210 	mov	r6,a
      00009D A3               [24]  211 	inc	dptr
      00009E 12r00r00         [24]  212 	lcall	__gptrget
      0000A1 FF               [12]  213 	mov	r7,a
      0000A2 85*00 F0         [24]  214 	mov	b,__rrslonglong_PARM_2
      0000A5 05 F0            [12]  215 	inc	b
      0000A7 80 0D            [24]  216 	sjmp	00124$
      0000A9                        217 00123$:
      0000A9 C3               [12]  218 	clr	c
      0000AA EF               [12]  219 	mov	a,r7
      0000AB 13               [12]  220 	rrc	a
      0000AC FF               [12]  221 	mov	r7,a
      0000AD EE               [12]  222 	mov	a,r6
      0000AE 13               [12]  223 	rrc	a
      0000AF FE               [12]  224 	mov	r6,a
      0000B0 ED               [12]  225 	mov	a,r5
      0000B1 13               [12]  226 	rrc	a
      0000B2 FD               [12]  227 	mov	r5,a
      0000B3 EC               [12]  228 	mov	a,r4
      0000B4 13               [12]  229 	rrc	a
      0000B5 FC               [12]  230 	mov	r4,a
      0000B6                        231 00124$:
      0000B6 D5 F0 F0         [24]  232 	djnz	b,00123$
      0000B9 90r00r05         [24]  233 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0004)
      0000BC 75 F0 40         [24]  234 	mov	b,#0x40
      0000BF EC               [12]  235 	mov	a,r4
      0000C0 12r00r00         [24]  236 	lcall	__gptrput
      0000C3 A3               [24]  237 	inc	dptr
      0000C4 ED               [12]  238 	mov	a,r5
      0000C5 12r00r00         [24]  239 	lcall	__gptrput
      0000C8 A3               [24]  240 	inc	dptr
      0000C9 EE               [12]  241 	mov	a,r6
      0000CA 12r00r00         [24]  242 	lcall	__gptrput
      0000CD A3               [24]  243 	inc	dptr
      0000CE EF               [12]  244 	mov	a,r7
      0000CF 12r00r00         [24]  245 	lcall	__gptrput
                                    246 ;	_rrslonglong.c:57: (*middle) |= (((*middle & 0xffff0000ul) >> s) & 0x0000fffful);
      0000D2 90r00r03         [24]  247 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0002)
      0000D5 12r00r00         [24]  248 	lcall	__gptrget
      0000D8 FC               [12]  249 	mov	r4,a
      0000D9 A3               [24]  250 	inc	dptr
      0000DA 12r00r00         [24]  251 	lcall	__gptrget
      0000DD FD               [12]  252 	mov	r5,a
      0000DE A3               [24]  253 	inc	dptr
      0000DF 12r00r00         [24]  254 	lcall	__gptrget
      0000E2 FE               [12]  255 	mov	r6,a
      0000E3 A3               [24]  256 	inc	dptr
      0000E4 12r00r00         [24]  257 	lcall	__gptrget
      0000E7 FF               [12]  258 	mov	r7,a
      0000E8 78 00            [12]  259 	mov	r0,#0x00
      0000EA 79 00            [12]  260 	mov	r1,#0x00
      0000EC 8E 02            [24]  261 	mov	ar2,r6
      0000EE 8F 03            [24]  262 	mov	ar3,r7
      0000F0 85*00 F0         [24]  263 	mov	b,__rrslonglong_PARM_2
      0000F3 05 F0            [12]  264 	inc	b
      0000F5 80 0D            [24]  265 	sjmp	00126$
      0000F7                        266 00125$:
      0000F7 C3               [12]  267 	clr	c
      0000F8 EB               [12]  268 	mov	a,r3
      0000F9 13               [12]  269 	rrc	a
      0000FA FB               [12]  270 	mov	r3,a
      0000FB EA               [12]  271 	mov	a,r2
      0000FC 13               [12]  272 	rrc	a
      0000FD FA               [12]  273 	mov	r2,a
      0000FE E9               [12]  274 	mov	a,r1
      0000FF 13               [12]  275 	rrc	a
      000100 F9               [12]  276 	mov	r1,a
      000101 E8               [12]  277 	mov	a,r0
      000102 13               [12]  278 	rrc	a
      000103 F8               [12]  279 	mov	r0,a
      000104                        280 00126$:
      000104 D5 F0 F0         [24]  281 	djnz	b,00125$
      000107 E4               [12]  282 	clr	a
      000108 FA               [12]  283 	mov	r2,a
      000109 FB               [12]  284 	mov	r3,a
      00010A E8               [12]  285 	mov	a,r0
      00010B 42 04            [12]  286 	orl	ar4,a
      00010D E9               [12]  287 	mov	a,r1
      00010E 42 05            [12]  288 	orl	ar5,a
      000110 EA               [12]  289 	mov	a,r2
      000111 42 06            [12]  290 	orl	ar6,a
      000113 EB               [12]  291 	mov	a,r3
      000114 42 07            [12]  292 	orl	ar7,a
      000116 90r00r03         [24]  293 	mov	dptr,#(__rrslonglong_l_65536_1 + 0x0002)
      000119 75 F0 40         [24]  294 	mov	b,#0x40
      00011C EC               [12]  295 	mov	a,r4
      00011D 12r00r00         [24]  296 	lcall	__gptrput
      000120 A3               [24]  297 	inc	dptr
      000121 ED               [12]  298 	mov	a,r5
      000122 12r00r00         [24]  299 	lcall	__gptrput
      000125 A3               [24]  300 	inc	dptr
      000126 EE               [12]  301 	mov	a,r6
      000127 12r00r00         [24]  302 	lcall	__gptrput
      00012A A3               [24]  303 	inc	dptr
      00012B EF               [12]  304 	mov	a,r7
      00012C 12r00r00         [24]  305 	lcall	__gptrput
                                    306 ;	_rrslonglong.c:58: (*top) >>= s;
      00012F AC*01            [24]  307 	mov	r4,(__rrslonglong_l_65536_1 + 0)
      000131 AD*02            [24]  308 	mov	r5,(__rrslonglong_l_65536_1 + 1)
      000133 AE*03            [24]  309 	mov	r6,(__rrslonglong_l_65536_1 + 2)
      000135 AF*04            [24]  310 	mov	r7,(__rrslonglong_l_65536_1 + 3)
      000137 85*00 F0         [24]  311 	mov	b,__rrslonglong_PARM_2
      00013A 05 F0            [12]  312 	inc	b
      00013C EF               [12]  313 	mov	a,r7
      00013D 33               [12]  314 	rlc	a
      00013E 92 D2            [24]  315 	mov	ov,c
      000140 80 0E            [24]  316 	sjmp	00128$
      000142                        317 00127$:
      000142 A2 D2            [12]  318 	mov	c,ov
      000144 EF               [12]  319 	mov	a,r7
      000145 13               [12]  320 	rrc	a
      000146 FF               [12]  321 	mov	r7,a
      000147 EE               [12]  322 	mov	a,r6
      000148 13               [12]  323 	rrc	a
      000149 FE               [12]  324 	mov	r6,a
      00014A ED               [12]  325 	mov	a,r5
      00014B 13               [12]  326 	rrc	a
      00014C FD               [12]  327 	mov	r5,a
      00014D EC               [12]  328 	mov	a,r4
      00014E 13               [12]  329 	rrc	a
      00014F FC               [12]  330 	mov	r4,a
      000150                        331 00128$:
      000150 D5 F0 EF         [24]  332 	djnz	b,00127$
      000153 8C*01            [24]  333 	mov	(__rrslonglong_l_65536_1 + 0),r4
      000155 8D*02            [24]  334 	mov	(__rrslonglong_l_65536_1 + 1),r5
      000157 8E*03            [24]  335 	mov	(__rrslonglong_l_65536_1 + 2),r6
      000159 8F*04            [24]  336 	mov	(__rrslonglong_l_65536_1 + 3),r7
                                    337 ;	_rrslonglong.c:60: return(l);
      00015B 85*01 82         [24]  338 	mov	dpl,__rrslonglong_l_65536_1
      00015E 85*02 83         [24]  339 	mov	dph,(__rrslonglong_l_65536_1 + 1)
      000161 85*03 F0         [24]  340 	mov	b,(__rrslonglong_l_65536_1 + 2)
      000164 E5*04            [12]  341 	mov	a,(__rrslonglong_l_65536_1 + 3)
      000166 AC*05            [24]  342 	mov	r4,(__rrslonglong_l_65536_1 + 4)
      000168 AD*06            [24]  343 	mov	r5,(__rrslonglong_l_65536_1 + 5)
      00016A AE*07            [24]  344 	mov	r6,(__rrslonglong_l_65536_1 + 6)
      00016C AF*08            [24]  345 	mov	r7,(__rrslonglong_l_65536_1 + 7)
                                    346 ;	_rrslonglong.c:61: }
      00016E 22               [24]  347 	ret
                                    348 	.area CSEG    (CODE)
                                    349 	.area CONST   (CODE)
                                    350 	.area XINIT   (CODE)
                                    351 	.area CABS    (ABS,CODE)
