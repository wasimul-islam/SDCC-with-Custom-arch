                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _memmove
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memmove_PARM_3
                                     12 	.globl _memmove_PARM_2
                                     13 	.globl _memmove
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _memmove_PARM_2:
      000000                         38 	.ds 3
      000003                         39 _memmove_PARM_3:
      000003                         40 	.ds 2
      000005                         41 _memmove_dst_65536_26:
      000005                         42 	.ds 3
      000008                         43 _memmove_sloc0_1_0:
      000008                         44 	.ds 3
      00000B                         45 _memmove_sloc1_1_0:
      00000B                         46 	.ds 3
      00000E                         47 _memmove_sloc2_1_0:
      00000E                         48 	.ds 3
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'memmove'
                                    106 ;------------------------------------------------------------
                                    107 ;src                       Allocated with name '_memmove_PARM_2'
                                    108 ;size                      Allocated with name '_memmove_PARM_3'
                                    109 ;dst                       Allocated with name '_memmove_dst_65536_26'
                                    110 ;c                         Allocated to registers r3 r4 
                                    111 ;d                         Allocated to registers 
                                    112 ;s                         Allocated to registers 
                                    113 ;sloc0                     Allocated with name '_memmove_sloc0_1_0'
                                    114 ;sloc1                     Allocated with name '_memmove_sloc1_1_0'
                                    115 ;sloc2                     Allocated with name '_memmove_sloc2_1_0'
                                    116 ;------------------------------------------------------------
                                    117 ;	_memmove.c:35: void *memmove (void *dst, const void *src, size_t size)
                                    118 ;	-----------------------------------------
                                    119 ;	 function memmove
                                    120 ;	-----------------------------------------
      000000                        121 _memmove:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 85 82*05         [24]  130 	mov	_memmove_dst_65536_26,dpl
      000003 85 83*06         [24]  131 	mov	(_memmove_dst_65536_26 + 1),dph
      000006 85 F0*07         [24]  132 	mov	(_memmove_dst_65536_26 + 2),b
                                    133 ;	_memmove.c:37: size_t c = size;
      000009 AB*03            [24]  134 	mov	r3,_memmove_PARM_3
      00000B AC*04            [24]  135 	mov	r4,(_memmove_PARM_3 + 1)
                                    136 ;	_memmove.c:38: if (c == 0 || dst == src)
      00000D EB               [12]  137 	mov	a,r3
      00000E 4C               [12]  138 	orl	a,r4
      00000F 60 1C            [24]  139 	jz	00101$
      000011 C0*05            [24]  140 	push	_memmove_dst_65536_26
      000013 C0*06            [24]  141 	push	(_memmove_dst_65536_26 + 1)
      000015 C0*07            [24]  142 	push	(_memmove_dst_65536_26 + 2)
      000017 85*00 82         [24]  143 	mov	dpl,_memmove_PARM_2
      00001A 85*01 83         [24]  144 	mov	dph,(_memmove_PARM_2 + 1)
      00001D 85*02 F0         [24]  145 	mov	b,(_memmove_PARM_2 + 2)
      000020 12r00r00         [24]  146 	lcall	___gptr_cmp
      000023 15 81            [12]  147 	dec	sp
      000025 15 81            [12]  148 	dec	sp
      000027 15 81            [12]  149 	dec	sp
      000029 60 02            [24]  150 	jz	00144$
      00002B 80 0A            [24]  151 	sjmp	00102$
      00002D                        152 00144$:
      00002D                        153 00101$:
                                    154 ;	_memmove.c:39: return dst;
      00002D 85*05 82         [24]  155 	mov	dpl,_memmove_dst_65536_26
      000030 85*06 83         [24]  156 	mov	dph,(_memmove_dst_65536_26 + 1)
      000033 85*07 F0         [24]  157 	mov	b,(_memmove_dst_65536_26 + 2)
      000036 22               [24]  158 	ret
      000037                        159 00102$:
                                    160 ;	_memmove.c:41: char *d = dst;
      000037 A8*05            [24]  161 	mov	r0,_memmove_dst_65536_26
      000039 A9*06            [24]  162 	mov	r1,(_memmove_dst_65536_26 + 1)
      00003B AA*07            [24]  163 	mov	r2,(_memmove_dst_65536_26 + 2)
                                    164 ;	_memmove.c:42: const char *s = src;
      00003D 85*00*08         [24]  165 	mov	_memmove_sloc0_1_0,_memmove_PARM_2
      000040 85*01*09         [24]  166 	mov	(_memmove_sloc0_1_0 + 1),(_memmove_PARM_2 + 1)
      000043 85*02*0A         [24]  167 	mov	(_memmove_sloc0_1_0 + 2),(_memmove_PARM_2 + 2)
                                    168 ;	_memmove.c:43: if (s < d) {
      000046 C0 00            [24]  169 	push	ar0
      000048 C0 01            [24]  170 	push	ar1
      00004A C0 02            [24]  171 	push	ar2
      00004C 85*08 82         [24]  172 	mov	dpl,_memmove_sloc0_1_0
      00004F 85*09 83         [24]  173 	mov	dph,(_memmove_sloc0_1_0 + 1)
      000052 85*0A F0         [24]  174 	mov	b,(_memmove_sloc0_1_0 + 2)
      000055 12r00r00         [24]  175 	lcall	___gptr_cmp
      000058 15 81            [12]  176 	dec	sp
      00005A 15 81            [12]  177 	dec	sp
      00005C 15 81            [12]  178 	dec	sp
      00005E 50 51            [24]  179 	jnc	00119$
                                    180 ;	_memmove.c:50: s += c;
      000060 EB               [12]  181 	mov	a,r3
      000061 25*08            [12]  182 	add	a,_memmove_sloc0_1_0
      000063 F5*0B            [12]  183 	mov	_memmove_sloc1_1_0,a
      000065 EC               [12]  184 	mov	a,r4
      000066 35*09            [12]  185 	addc	a,(_memmove_sloc0_1_0 + 1)
      000068 F5*0C            [12]  186 	mov	(_memmove_sloc1_1_0 + 1),a
      00006A 85*0A*0D         [24]  187 	mov	(_memmove_sloc1_1_0 + 2),(_memmove_sloc0_1_0 + 2)
                                    188 ;	_memmove.c:51: d += c;
      00006D EB               [12]  189 	mov	a,r3
      00006E 28               [12]  190 	add	a,r0
      00006F F5*0E            [12]  191 	mov	_memmove_sloc2_1_0,a
      000071 EC               [12]  192 	mov	a,r4
      000072 39               [12]  193 	addc	a,r1
      000073 F5*0F            [12]  194 	mov	(_memmove_sloc2_1_0 + 1),a
      000075 8A*10            [24]  195 	mov	(_memmove_sloc2_1_0 + 2),r2
                                    196 ;	_memmove.c:52: do {
      000077 8B 06            [24]  197 	mov	ar6,r3
      000079 8C 07            [24]  198 	mov	ar7,r4
      00007B                        199 00104$:
                                    200 ;	_memmove.c:53: *--d = *--s;
      00007B 15*0E            [12]  201 	dec	_memmove_sloc2_1_0
      00007D 74 FF            [12]  202 	mov	a,#0xff
      00007F B5*0E 02         [24]  203 	cjne	a,_memmove_sloc2_1_0,00146$
      000082 15*0F            [12]  204 	dec	(_memmove_sloc2_1_0 + 1)
      000084                        205 00146$:
      000084 15*0B            [12]  206 	dec	_memmove_sloc1_1_0
      000086 74 FF            [12]  207 	mov	a,#0xff
      000088 B5*0B 02         [24]  208 	cjne	a,_memmove_sloc1_1_0,00147$
      00008B 15*0C            [12]  209 	dec	(_memmove_sloc1_1_0 + 1)
      00008D                        210 00147$:
      00008D 85*0B 82         [24]  211 	mov	dpl,_memmove_sloc1_1_0
      000090 85*0C 83         [24]  212 	mov	dph,(_memmove_sloc1_1_0 + 1)
      000093 85*0D F0         [24]  213 	mov	b,(_memmove_sloc1_1_0 + 2)
      000096 12r00r00         [24]  214 	lcall	__gptrget
      000099 FD               [12]  215 	mov	r5,a
      00009A 85*0E 82         [24]  216 	mov	dpl,_memmove_sloc2_1_0
      00009D 85*0F 83         [24]  217 	mov	dph,(_memmove_sloc2_1_0 + 1)
      0000A0 85*10 F0         [24]  218 	mov	b,(_memmove_sloc2_1_0 + 2)
      0000A3 12r00r00         [24]  219 	lcall	__gptrput
                                    220 ;	_memmove.c:54: } while (--c);
      0000A6 1E               [12]  221 	dec	r6
      0000A7 BE FF 01         [24]  222 	cjne	r6,#0xff,00148$
      0000AA 1F               [12]  223 	dec	r7
      0000AB                        224 00148$:
      0000AB EE               [12]  225 	mov	a,r6
      0000AC 4F               [12]  226 	orl	a,r7
      0000AD 70 CC            [24]  227 	jnz	00104$
                                    228 ;	_memmove.c:59: do {
      0000AF 80 37            [24]  229 	sjmp	00112$
      0000B1                        230 00119$:
      0000B1 AD*08            [24]  231 	mov	r5,_memmove_sloc0_1_0
      0000B3 AE*09            [24]  232 	mov	r6,(_memmove_sloc0_1_0 + 1)
      0000B5 AF*0A            [24]  233 	mov	r7,(_memmove_sloc0_1_0 + 2)
      0000B7 8B*0E            [24]  234 	mov	_memmove_sloc2_1_0,r3
      0000B9 8C*0F            [24]  235 	mov	(_memmove_sloc2_1_0 + 1),r4
      0000BB                        236 00107$:
                                    237 ;	_memmove.c:60: *d++ = *s++;
      0000BB 8D 82            [24]  238 	mov	dpl,r5
      0000BD 8E 83            [24]  239 	mov	dph,r6
      0000BF 8F F0            [24]  240 	mov	b,r7
      0000C1 12r00r00         [24]  241 	lcall	__gptrget
      0000C4 FC               [12]  242 	mov	r4,a
      0000C5 A3               [24]  243 	inc	dptr
      0000C6 AD 82            [24]  244 	mov	r5,dpl
      0000C8 AE 83            [24]  245 	mov	r6,dph
      0000CA 88 82            [24]  246 	mov	dpl,r0
      0000CC 89 83            [24]  247 	mov	dph,r1
      0000CE 8A F0            [24]  248 	mov	b,r2
      0000D0 EC               [12]  249 	mov	a,r4
      0000D1 12r00r00         [24]  250 	lcall	__gptrput
      0000D4 A3               [24]  251 	inc	dptr
      0000D5 A8 82            [24]  252 	mov	r0,dpl
      0000D7 A9 83            [24]  253 	mov	r1,dph
                                    254 ;	_memmove.c:61: } while (--c);
      0000D9 15*0E            [12]  255 	dec	_memmove_sloc2_1_0
      0000DB 74 FF            [12]  256 	mov	a,#0xff
      0000DD B5*0E 02         [24]  257 	cjne	a,_memmove_sloc2_1_0,00150$
      0000E0 15*0F            [12]  258 	dec	(_memmove_sloc2_1_0 + 1)
      0000E2                        259 00150$:
      0000E2 E5*0E            [12]  260 	mov	a,_memmove_sloc2_1_0
      0000E4 45*0F            [12]  261 	orl	a,(_memmove_sloc2_1_0 + 1)
      0000E6 70 D3            [24]  262 	jnz	00107$
      0000E8                        263 00112$:
                                    264 ;	_memmove.c:65: return dst;
      0000E8 85*05 82         [24]  265 	mov	dpl,_memmove_dst_65536_26
      0000EB 85*06 83         [24]  266 	mov	dph,(_memmove_dst_65536_26 + 1)
      0000EE 85*07 F0         [24]  267 	mov	b,(_memmove_dst_65536_26 + 2)
                                    268 ;	_memmove.c:66: }
      0000F1 22               [24]  269 	ret
                                    270 	.area CSEG    (CODE)
                                    271 	.area CONST   (CODE)
                                    272 	.area XINIT   (CODE)
                                    273 	.area CABS    (ABS,CODE)
