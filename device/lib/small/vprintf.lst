                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module vprintf
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _putchar
                                     12 	.globl __print_format
                                     13 	.globl _vprintf_PARM_2
                                     14 	.globl _vprintf
                                     15 	.globl _printf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _vprintf_PARM_2:
      000000                         36 	.ds 1
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; uninitialized external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XSEG    (XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; initialized external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function 'put_char_to_stdout'
                                     97 ;------------------------------------------------------------
                                     98 ;p                         Allocated to stack - _bp -5
                                     99 ;c                         Allocated to registers r7 
                                    100 ;------------------------------------------------------------
                                    101 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                                    102 ;	-----------------------------------------
                                    103 ;	 function put_char_to_stdout
                                    104 ;	-----------------------------------------
      000000                        105 _put_char_to_stdout:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
                                    116 ;	vprintf.c:37: putchar (c);
      000005 7E 00            [12]  117 	mov	r6,#0x00
      000007 8E 83            [24]  118 	mov	dph,r6
      000009 12r00r00         [24]  119 	lcall	_putchar
                                    120 ;	vprintf.c:38: }
      00000C D0*00            [24]  121 	pop	_bp
      00000E 22               [24]  122 	ret
                                    123 ;------------------------------------------------------------
                                    124 ;Allocation info for local variables in function 'vprintf'
                                    125 ;------------------------------------------------------------
                                    126 ;ap                        Allocated with name '_vprintf_PARM_2'
                                    127 ;format                    Allocated to registers 
                                    128 ;------------------------------------------------------------
                                    129 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                                    130 ;	-----------------------------------------
                                    131 ;	 function vprintf
                                    132 ;	-----------------------------------------
      00000F                        133 _vprintf:
      00000F 85 82*00         [24]  134 	mov	__print_format_PARM_3,dpl
      000012 85 83*01         [24]  135 	mov	(__print_format_PARM_3 + 1),dph
      000015 85 F0*02         [24]  136 	mov	(__print_format_PARM_3 + 2),b
                                    137 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
      000018 E4               [12]  138 	clr	a
      000019 F5*00            [12]  139 	mov	__print_format_PARM_2,a
      00001B F5*01            [12]  140 	mov	(__print_format_PARM_2 + 1),a
      00001D F5*02            [12]  141 	mov	(__print_format_PARM_2 + 2),a
      00001F 85*00*00         [24]  142 	mov	__print_format_PARM_4,_vprintf_PARM_2
      000022 90r00r00         [24]  143 	mov	dptr,#_put_char_to_stdout
                                    144 ;	vprintf.c:44: }
      000025 02r00r00         [24]  145 	ljmp	__print_format
                                    146 ;------------------------------------------------------------
                                    147 ;Allocation info for local variables in function 'printf'
                                    148 ;------------------------------------------------------------
                                    149 ;format                    Allocated to stack - _bp -5
                                    150 ;arg                       Allocated to registers 
                                    151 ;i                         Allocated to registers 
                                    152 ;------------------------------------------------------------
                                    153 ;	vprintf.c:47: printf (const char *format, ...)
                                    154 ;	-----------------------------------------
                                    155 ;	 function printf
                                    156 ;	-----------------------------------------
      000028                        157 _printf:
      000028 C0*00            [24]  158 	push	_bp
                                    159 ;	vprintf.c:52: va_start (arg, format);
      00002A E5 81            [12]  160 	mov	a,sp
      00002C F5*00            [12]  161 	mov	_bp,a
      00002E 24 FB            [12]  162 	add	a,#0xfb
      000030 FF               [12]  163 	mov	r7,a
      000031 8F*00            [24]  164 	mov	__print_format_PARM_4,r7
                                    165 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
      000033 E4               [12]  166 	clr	a
      000034 F5*00            [12]  167 	mov	__print_format_PARM_2,a
      000036 F5*01            [12]  168 	mov	(__print_format_PARM_2 + 1),a
      000038 F5*02            [12]  169 	mov	(__print_format_PARM_2 + 2),a
      00003A E5*00            [12]  170 	mov	a,_bp
      00003C 24 FB            [12]  171 	add	a,#0xfb
      00003E F8               [12]  172 	mov	r0,a
      00003F 86*00            [24]  173 	mov	__print_format_PARM_3,@r0
      000041 08               [12]  174 	inc	r0
      000042 86*01            [24]  175 	mov	(__print_format_PARM_3 + 1),@r0
      000044 08               [12]  176 	inc	r0
      000045 86*02            [24]  177 	mov	(__print_format_PARM_3 + 2),@r0
      000047 90r00r00         [24]  178 	mov	dptr,#_put_char_to_stdout
      00004A 12r00r00         [24]  179 	lcall	__print_format
                                    180 ;	vprintf.c:56: return i;
                                    181 ;	vprintf.c:57: }
      00004D D0*00            [24]  182 	pop	_bp
      00004F 22               [24]  183 	ret
                                    184 	.area CSEG    (CODE)
                                    185 	.area CONST   (CODE)
                                    186 	.area XINIT   (CODE)
                                    187 	.area CABS    (ABS,CODE)
