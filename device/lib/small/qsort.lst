                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module qsort
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _qsort_PARM_4
                                     12 	.globl _qsort_PARM_3
                                     13 	.globl _qsort_PARM_2
                                     14 	.globl _qsort
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _qsort_PARM_2:
      000000                         35 	.ds 2
      000002                         36 _qsort_PARM_3:
      000002                         37 	.ds 2
      000004                         38 _qsort_PARM_4:
      000004                         39 	.ds 2
      000006                         40 _qsort_b_65536_44:
      000006                         41 	.ds 3
      000009                         42 _qsort_i_131072_45:
      000009                         43 	.ds 3
      00000C                         44 _qsort_j_262144_47:
      00000C                         45 	.ds 3
      00000F                         46 _qsort_sloc0_1_0:
      00000F                         47 	.ds 3
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram
                                     50 ;--------------------------------------------------------
                                     51 	.area	OSEG    (OVR,DATA)
      000000                         52 _swap_PARM_2:
      000000                         53 	.ds 3
      000003                         54 _swap_PARM_3:
      000003                         55 	.ds 2
      000005                         56 _swap_sloc0_1_0:
      000005                         57 	.ds 2
                                     58 ;--------------------------------------------------------
                                     59 ; indirectly addressable internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area ISEG    (DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute internal ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area IABS    (ABS,DATA)
                                     66 	.area IABS    (ABS,DATA)
                                     67 ;--------------------------------------------------------
                                     68 ; bit data
                                     69 ;--------------------------------------------------------
                                     70 	.area BSEG    (BIT)
                                     71 ;--------------------------------------------------------
                                     72 ; paged external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area PSEG    (PAG,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; uninitialized external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XSEG    (XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; absolute external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XABS    (ABS,XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; initialized external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area XISEG   (XDATA)
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT0 (CODE)
                                     89 	.area GSINIT1 (CODE)
                                     90 	.area GSINIT2 (CODE)
                                     91 	.area GSINIT3 (CODE)
                                     92 	.area GSINIT4 (CODE)
                                     93 	.area GSINIT5 (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area CSEG    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; global & static initialisations
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area GSINIT  (CODE)
                                    102 	.area GSFINAL (CODE)
                                    103 	.area GSINIT  (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area HOME    (CODE)
                                    108 	.area HOME    (CODE)
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area CSEG    (CODE)
                                    113 ;------------------------------------------------------------
                                    114 ;Allocation info for local variables in function 'swap'
                                    115 ;------------------------------------------------------------
                                    116 ;src                       Allocated with name '_swap_PARM_2'
                                    117 ;n                         Allocated with name '_swap_PARM_3'
                                    118 ;dst                       Allocated to registers r5 r6 r7 
                                    119 ;d                         Allocated to registers 
                                    120 ;s                         Allocated to registers 
                                    121 ;tmp                       Allocated to registers r1 
                                    122 ;sloc0                     Allocated with name '_swap_sloc0_1_0'
                                    123 ;------------------------------------------------------------
                                    124 ;	qsort.c:33: static void swap(void *restrict dst, void *restrict src, size_t n)
                                    125 ;	-----------------------------------------
                                    126 ;	 function swap
                                    127 ;	-----------------------------------------
      000000                        128 _swap:
                           000007   129 	ar7 = 0x07
                           000006   130 	ar6 = 0x06
                           000005   131 	ar5 = 0x05
                           000004   132 	ar4 = 0x04
                           000003   133 	ar3 = 0x03
                           000002   134 	ar2 = 0x02
                           000001   135 	ar1 = 0x01
                           000000   136 	ar0 = 0x00
      000000 AD 82            [24]  137 	mov	r5,dpl
      000002 AE 83            [24]  138 	mov	r6,dph
      000004 AF F0            [24]  139 	mov	r7,b
                                    140 ;	qsort.c:35: unsigned char *restrict d = dst;
                                    141 ;	qsort.c:36: unsigned char *restrict s = src;
      000006 AA*00            [24]  142 	mov	r2,_swap_PARM_2
      000008 AB*01            [24]  143 	mov	r3,(_swap_PARM_2 + 1)
      00000A AC*02            [24]  144 	mov	r4,(_swap_PARM_2 + 2)
                                    145 ;	qsort.c:38: while(n--)
      00000C 85*03*05         [24]  146 	mov	_swap_sloc0_1_0,_swap_PARM_3
      00000F 85*04*06         [24]  147 	mov	(_swap_sloc0_1_0 + 1),(_swap_PARM_3 + 1)
      000012                        148 00101$:
      000012 A8*05            [24]  149 	mov	r0,_swap_sloc0_1_0
      000014 A9*06            [24]  150 	mov	r1,(_swap_sloc0_1_0 + 1)
      000016 15*05            [12]  151 	dec	_swap_sloc0_1_0
      000018 74 FF            [12]  152 	mov	a,#0xff
      00001A B5*05 02         [24]  153 	cjne	a,_swap_sloc0_1_0,00115$
      00001D 15*06            [12]  154 	dec	(_swap_sloc0_1_0 + 1)
      00001F                        155 00115$:
      00001F E8               [12]  156 	mov	a,r0
      000020 49               [12]  157 	orl	a,r1
      000021 60 33            [24]  158 	jz	00104$
                                    159 ;	qsort.c:40: unsigned char tmp = *d;
      000023 8D 82            [24]  160 	mov	dpl,r5
      000025 8E 83            [24]  161 	mov	dph,r6
      000027 8F F0            [24]  162 	mov	b,r7
      000029 12r00r00         [24]  163 	lcall	__gptrget
      00002C F9               [12]  164 	mov	r1,a
                                    165 ;	qsort.c:41: *d = *s;
      00002D 8A 82            [24]  166 	mov	dpl,r2
      00002F 8B 83            [24]  167 	mov	dph,r3
      000031 8C F0            [24]  168 	mov	b,r4
      000033 12r00r00         [24]  169 	lcall	__gptrget
      000036 F8               [12]  170 	mov	r0,a
      000037 8D 82            [24]  171 	mov	dpl,r5
      000039 8E 83            [24]  172 	mov	dph,r6
      00003B 8F F0            [24]  173 	mov	b,r7
      00003D 12r00r00         [24]  174 	lcall	__gptrput
      000040 A3               [24]  175 	inc	dptr
      000041 AD 82            [24]  176 	mov	r5,dpl
      000043 AE 83            [24]  177 	mov	r6,dph
                                    178 ;	qsort.c:42: *s = tmp;
      000045 8A 82            [24]  179 	mov	dpl,r2
      000047 8B 83            [24]  180 	mov	dph,r3
      000049 8C F0            [24]  181 	mov	b,r4
      00004B E9               [12]  182 	mov	a,r1
      00004C 12r00r00         [24]  183 	lcall	__gptrput
      00004F A3               [24]  184 	inc	dptr
      000050 AA 82            [24]  185 	mov	r2,dpl
      000052 AB 83            [24]  186 	mov	r3,dph
                                    187 ;	qsort.c:43: d++;
                                    188 ;	qsort.c:44: s++;
      000054 80 BC            [24]  189 	sjmp	00101$
      000056                        190 00104$:
                                    191 ;	qsort.c:46: }
      000056 22               [24]  192 	ret
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'qsort'
                                    195 ;------------------------------------------------------------
                                    196 ;nmemb                     Allocated with name '_qsort_PARM_2'
                                    197 ;size                      Allocated with name '_qsort_PARM_3'
                                    198 ;compar                    Allocated with name '_qsort_PARM_4'
                                    199 ;base                      Allocated to registers r5 r6 r7 
                                    200 ;b                         Allocated with name '_qsort_b_65536_44'
                                    201 ;i                         Allocated with name '_qsort_i_131072_45'
                                    202 ;j                         Allocated with name '_qsort_j_262144_47'
                                    203 ;sloc0                     Allocated with name '_qsort_sloc0_1_0'
                                    204 ;------------------------------------------------------------
                                    205 ;	qsort.c:48: void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                                    206 ;	-----------------------------------------
                                    207 ;	 function qsort
                                    208 ;	-----------------------------------------
      000057                        209 _qsort:
      000057 AD 82            [24]  210 	mov	r5,dpl
      000059 AE 83            [24]  211 	mov	r6,dph
      00005B AF F0            [24]  212 	mov	r7,b
                                    213 ;	qsort.c:50: unsigned char *b = base;
      00005D 8D*06            [24]  214 	mov	_qsort_b_65536_44,r5
      00005F 8E*07            [24]  215 	mov	(_qsort_b_65536_44 + 1),r6
      000061 8F*08            [24]  216 	mov	(_qsort_b_65536_44 + 2),r7
                                    217 ;	qsort.c:52: if(nmemb <= 1)
      000063 C3               [12]  218 	clr	c
      000064 74 01            [12]  219 	mov	a,#0x01
      000066 95*00            [12]  220 	subb	a,_qsort_PARM_2
      000068 E4               [12]  221 	clr	a
      000069 95*01            [12]  222 	subb	a,(_qsort_PARM_2 + 1)
      00006B 40 01            [24]  223 	jc	00102$
                                    224 ;	qsort.c:53: return;
      00006D 22               [24]  225 	ret
      00006E                        226 00102$:
                                    227 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      00006E 8D*09            [24]  228 	mov	_qsort_i_131072_45,r5
      000070 8E*0A            [24]  229 	mov	(_qsort_i_131072_45 + 1),r6
      000072 8F*0B            [24]  230 	mov	(_qsort_i_131072_45 + 2),r7
      000074 A8*02            [24]  231 	mov	r0,_qsort_PARM_3
      000076 A9*03            [24]  232 	mov	r1,(_qsort_PARM_3 + 1)
      000078 88*00            [24]  233 	mov	__mulint_PARM_2,r0
      00007A 89*01            [24]  234 	mov	(__mulint_PARM_2 + 1),r1
      00007C 85*00 82         [24]  235 	mov	dpl,_qsort_PARM_2
      00007F 85*01 83         [24]  236 	mov	dph,(_qsort_PARM_2 + 1)
      000082 C0 01            [24]  237 	push	ar1
      000084 C0 00            [24]  238 	push	ar0
      000086 12r00r00         [24]  239 	lcall	__mulint
      000089 AB 82            [24]  240 	mov	r3,dpl
      00008B AC 83            [24]  241 	mov	r4,dph
      00008D D0 00            [24]  242 	pop	ar0
      00008F D0 01            [24]  243 	pop	ar1
      000091 EB               [12]  244 	mov	a,r3
      000092 25*06            [12]  245 	add	a,_qsort_b_65536_44
      000094 FB               [12]  246 	mov	r3,a
      000095 EC               [12]  247 	mov	a,r4
      000096 35*07            [12]  248 	addc	a,(_qsort_b_65536_44 + 1)
      000098 FA               [12]  249 	mov	r2,a
      000099 AC*08            [24]  250 	mov	r4,(_qsort_b_65536_44 + 2)
      00009B                        251 00110$:
      00009B C0 03            [24]  252 	push	ar3
      00009D C0 02            [24]  253 	push	ar2
      00009F C0 04            [24]  254 	push	ar4
      0000A1 85*09 82         [24]  255 	mov	dpl,_qsort_i_131072_45
      0000A4 85*0A 83         [24]  256 	mov	dph,(_qsort_i_131072_45 + 1)
      0000A7 85*0B F0         [24]  257 	mov	b,(_qsort_i_131072_45 + 2)
      0000AA 12r00r00         [24]  258 	lcall	___gptr_cmp
      0000AD 15 81            [12]  259 	dec	sp
      0000AF 15 81            [12]  260 	dec	sp
      0000B1 15 81            [12]  261 	dec	sp
      0000B3 40 01            [24]  262 	jc	00139$
      0000B5 22               [24]  263 	ret
      0000B6                        264 00139$:
                                    265 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      0000B6 85*09*0C         [24]  266 	mov	_qsort_j_262144_47,_qsort_i_131072_45
      0000B9 85*0A*0D         [24]  267 	mov	(_qsort_j_262144_47 + 1),(_qsort_i_131072_45 + 1)
      0000BC 85*0B*0E         [24]  268 	mov	(_qsort_j_262144_47 + 2),(_qsort_i_131072_45 + 2)
      0000BF                        269 00107$:
      0000BF C0*0C            [24]  270 	push	_qsort_j_262144_47
      0000C1 C0*0D            [24]  271 	push	(_qsort_j_262144_47 + 1)
      0000C3 C0*0E            [24]  272 	push	(_qsort_j_262144_47 + 2)
      0000C5 85*06 82         [24]  273 	mov	dpl,_qsort_b_65536_44
      0000C8 85*07 83         [24]  274 	mov	dph,(_qsort_b_65536_44 + 1)
      0000CB 85*08 F0         [24]  275 	mov	b,(_qsort_b_65536_44 + 2)
      0000CE 12r00r00         [24]  276 	lcall	___gptr_cmp
      0000D1 15 81            [12]  277 	dec	sp
      0000D3 15 81            [12]  278 	dec	sp
      0000D5 15 81            [12]  279 	dec	sp
      0000D7 40 03            [24]  280 	jc	00140$
      0000D9 02r01r85         [24]  281 	ljmp	00111$
      0000DC                        282 00140$:
      0000DC C0 03            [24]  283 	push	ar3
      0000DE C0 02            [24]  284 	push	ar2
      0000E0 C0 04            [24]  285 	push	ar4
      0000E2 E5*0C            [12]  286 	mov	a,_qsort_j_262144_47
      0000E4 C3               [12]  287 	clr	c
      0000E5 98               [12]  288 	subb	a,r0
      0000E6 F5*0F            [12]  289 	mov	_qsort_sloc0_1_0,a
      0000E8 E5*0D            [12]  290 	mov	a,(_qsort_j_262144_47 + 1)
      0000EA 99               [12]  291 	subb	a,r1
      0000EB F5*10            [12]  292 	mov	(_qsort_sloc0_1_0 + 1),a
      0000ED 85*0E*11         [24]  293 	mov	(_qsort_sloc0_1_0 + 2),(_qsort_j_262144_47 + 2)
      0000F0 AD*0F            [24]  294 	mov	r5,_qsort_sloc0_1_0
      0000F2 AE*10            [24]  295 	mov	r6,(_qsort_sloc0_1_0 + 1)
      0000F4 AF*11            [24]  296 	mov	r7,(_qsort_sloc0_1_0 + 2)
      0000F6 AA*0C            [24]  297 	mov	r2,_qsort_j_262144_47
      0000F8 AB*0D            [24]  298 	mov	r3,(_qsort_j_262144_47 + 1)
      0000FA AC*0E            [24]  299 	mov	r4,(_qsort_j_262144_47 + 2)
      0000FC C0 04            [24]  300 	push	ar4
      0000FE C0 03            [24]  301 	push	ar3
      000100 C0 02            [24]  302 	push	ar2
      000102 C0 01            [24]  303 	push	ar1
      000104 C0 00            [24]  304 	push	ar0
      000106 C0 05            [24]  305 	push	ar5
      000108 C0 06            [24]  306 	push	ar6
      00010A C0 07            [24]  307 	push	ar7
      00010C 12r01r11         [24]  308 	lcall	00141$
      00010F 80 0B            [24]  309 	sjmp	00142$
      000111                        310 00141$:
      000111 C0*04            [24]  311 	push	_qsort_PARM_4
      000113 C0*05            [24]  312 	push	(_qsort_PARM_4 + 1)
      000115 8A 82            [24]  313 	mov	dpl,r2
      000117 8B 83            [24]  314 	mov	dph,r3
      000119 8C F0            [24]  315 	mov	b,r4
      00011B 22               [24]  316 	ret
      00011C                        317 00142$:
      00011C AE 82            [24]  318 	mov	r6,dpl
      00011E AF 83            [24]  319 	mov	r7,dph
      000120 15 81            [12]  320 	dec	sp
      000122 15 81            [12]  321 	dec	sp
      000124 15 81            [12]  322 	dec	sp
      000126 D0 00            [24]  323 	pop	ar0
      000128 D0 01            [24]  324 	pop	ar1
      00012A D0 02            [24]  325 	pop	ar2
      00012C D0 03            [24]  326 	pop	ar3
      00012E D0 04            [24]  327 	pop	ar4
      000130 EF               [12]  328 	mov	a,r7
      000131 D0 04            [24]  329 	pop	ar4
      000133 D0 02            [24]  330 	pop	ar2
      000135 D0 03            [24]  331 	pop	ar3
      000137 30 E7 4B         [24]  332 	jnb	acc.7,00111$
                                    333 ;	qsort.c:58: swap(j, j - size, size);
      00013A C0 03            [24]  334 	push	ar3
      00013C C0 02            [24]  335 	push	ar2
      00013E C0 04            [24]  336 	push	ar4
      000140 AD*0C            [24]  337 	mov	r5,_qsort_j_262144_47
      000142 AE*0D            [24]  338 	mov	r6,(_qsort_j_262144_47 + 1)
      000144 AF*0E            [24]  339 	mov	r7,(_qsort_j_262144_47 + 2)
      000146 AA*0F            [24]  340 	mov	r2,_qsort_sloc0_1_0
      000148 AB*10            [24]  341 	mov	r3,(_qsort_sloc0_1_0 + 1)
      00014A AC*11            [24]  342 	mov	r4,(_qsort_sloc0_1_0 + 2)
      00014C 8A*00            [24]  343 	mov	_swap_PARM_2,r2
      00014E 8B*01            [24]  344 	mov	(_swap_PARM_2 + 1),r3
      000150 8C*02            [24]  345 	mov	(_swap_PARM_2 + 2),r4
      000152 88*03            [24]  346 	mov	_swap_PARM_3,r0
      000154 89*04            [24]  347 	mov	(_swap_PARM_3 + 1),r1
      000156 8D 82            [24]  348 	mov	dpl,r5
      000158 8E 83            [24]  349 	mov	dph,r6
      00015A 8F F0            [24]  350 	mov	b,r7
      00015C C0 04            [24]  351 	push	ar4
      00015E C0 03            [24]  352 	push	ar3
      000160 C0 02            [24]  353 	push	ar2
      000162 C0 01            [24]  354 	push	ar1
      000164 C0 00            [24]  355 	push	ar0
      000166 12r00r00         [24]  356 	lcall	_swap
      000169 D0 00            [24]  357 	pop	ar0
      00016B D0 01            [24]  358 	pop	ar1
      00016D D0 02            [24]  359 	pop	ar2
      00016F D0 03            [24]  360 	pop	ar3
      000171 D0 04            [24]  361 	pop	ar4
                                    362 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      000173 85*0F*0C         [24]  363 	mov	_qsort_j_262144_47,_qsort_sloc0_1_0
      000176 85*10*0D         [24]  364 	mov	(_qsort_j_262144_47 + 1),(_qsort_sloc0_1_0 + 1)
      000179 85*11*0E         [24]  365 	mov	(_qsort_j_262144_47 + 2),(_qsort_sloc0_1_0 + 2)
      00017C D0 04            [24]  366 	pop	ar4
      00017E D0 02            [24]  367 	pop	ar2
      000180 D0 03            [24]  368 	pop	ar3
      000182 02r00rBF         [24]  369 	ljmp	00107$
      000185                        370 00111$:
                                    371 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      000185 E8               [12]  372 	mov	a,r0
      000186 25*09            [12]  373 	add	a,_qsort_i_131072_45
      000188 F5*09            [12]  374 	mov	_qsort_i_131072_45,a
      00018A E9               [12]  375 	mov	a,r1
      00018B 35*0A            [12]  376 	addc	a,(_qsort_i_131072_45 + 1)
      00018D F5*0A            [12]  377 	mov	(_qsort_i_131072_45 + 1),a
                                    378 ;	qsort.c:60: }
      00018F 02r00r9B         [24]  379 	ljmp	00110$
                                    380 	.area CSEG    (CODE)
                                    381 	.area CONST   (CODE)
                                    382 	.area XINIT   (CODE)
                                    383 	.area CABS    (ABS,CODE)
