                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbstoc16s
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 	.globl ___mbstoc16s_PARM_3
                                     13 	.globl ___mbstoc16s_PARM_2
                                     14 	.globl ___mbstoc16s
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 ___mbstoc16s_PARM_2:
      000000                         35 	.ds 3
      000003                         36 ___mbstoc16s_PARM_3:
      000003                         37 	.ds 2
      000005                         38 ___mbstoc16s_m_65536_54:
      000005                         39 	.ds 2
      000007                         40 ___mbstoc16s_l_196608_56:
      000007                         41 	.ds 2
      000009                         42 ___mbstoc16s_codepoint_196608_56:
      000009                         43 	.ds 4
                                     44 ;--------------------------------------------------------
                                     45 ; overlayable items in internal ram
                                     46 ;--------------------------------------------------------
                                     47 ;--------------------------------------------------------
                                     48 ; indirectly addressable internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area ISEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; absolute internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area IABS    (ABS,DATA)
                                     55 	.area IABS    (ABS,DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; bit data
                                     58 ;--------------------------------------------------------
                                     59 	.area BSEG    (BIT)
                                     60 ;--------------------------------------------------------
                                     61 ; paged external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area PSEG    (PAG,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; uninitialized external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XSEG    (XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; absolute external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XABS    (ABS,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; initialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XISEG   (XDATA)
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT0 (CODE)
                                     78 	.area GSINIT1 (CODE)
                                     79 	.area GSINIT2 (CODE)
                                     80 	.area GSINIT3 (CODE)
                                     81 	.area GSINIT4 (CODE)
                                     82 	.area GSINIT5 (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area CSEG    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function '__mbstoc16s'
                                    104 ;------------------------------------------------------------
                                    105 ;s                         Allocated with name '___mbstoc16s_PARM_2'
                                    106 ;n                         Allocated with name '___mbstoc16s_PARM_3'
                                    107 ;c16s                      Allocated to registers r2 r3 r4 
                                    108 ;m                         Allocated with name '___mbstoc16s_m_65536_54'
                                    109 ;l                         Allocated with name '___mbstoc16s_l_196608_56'
                                    110 ;codepoint                 Allocated with name '___mbstoc16s_codepoint_196608_56'
                                    111 ;------------------------------------------------------------
                                    112 ;	mbstoc16s.c:44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                                    113 ;	-----------------------------------------
                                    114 ;	 function __mbstoc16s
                                    115 ;	-----------------------------------------
      000000                        116 ___mbstoc16s:
                           000007   117 	ar7 = 0x07
                           000006   118 	ar6 = 0x06
                           000005   119 	ar5 = 0x05
                           000004   120 	ar4 = 0x04
                           000003   121 	ar3 = 0x03
                           000002   122 	ar2 = 0x02
                           000001   123 	ar1 = 0x01
                           000000   124 	ar0 = 0x00
      000000 AD 82            [24]  125 	mov	r5,dpl
      000002 AE 83            [24]  126 	mov	r6,dph
      000004 AF F0            [24]  127 	mov	r7,b
                                    128 ;	mbstoc16s.c:46: size_t m = 0;
      000006 E4               [12]  129 	clr	a
      000007 F5*05            [12]  130 	mov	___mbstoc16s_m_65536_54,a
      000009 F5*06            [12]  131 	mov	(___mbstoc16s_m_65536_54 + 1),a
                                    132 ;	mbstoc16s.c:85: return(m);
      00000B                        133 00116$:
                                    134 ;	mbstoc16s.c:53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
      00000B 85*00*00         [24]  135 	mov	_mbtowc_PARM_2,___mbstoc16s_PARM_2
      00000E 85*01*01         [24]  136 	mov	(_mbtowc_PARM_2 + 1),(___mbstoc16s_PARM_2 + 1)
      000011 85*02*02         [24]  137 	mov	(_mbtowc_PARM_2 + 2),(___mbstoc16s_PARM_2 + 2)
      000014 75*00 04         [24]  138 	mov	_mbtowc_PARM_3,#0x04
      000017 75*01 00         [24]  139 	mov	(_mbtowc_PARM_3 + 1),#0x00
      00001A 90r00r09         [24]  140 	mov	dptr,#___mbstoc16s_codepoint_196608_56
      00001D 75 F0 40         [24]  141 	mov	b,#0x40
      000020 C0 07            [24]  142 	push	ar7
      000022 C0 06            [24]  143 	push	ar6
      000024 C0 05            [24]  144 	push	ar5
      000026 12r00r00         [24]  145 	lcall	_mbtowc
      000029 85 82*07         [24]  146 	mov	___mbstoc16s_l_196608_56,dpl
      00002C 85 83*08         [24]  147 	mov	(___mbstoc16s_l_196608_56 + 1),dph
      00002F D0 05            [24]  148 	pop	ar5
      000031 D0 06            [24]  149 	pop	ar6
      000033 D0 07            [24]  150 	pop	ar7
                                    151 ;	mbstoc16s.c:55: if(l < 0)
      000035 E5*08            [12]  152 	mov	a,(___mbstoc16s_l_196608_56 + 1)
      000037 30 E7 04         [24]  153 	jnb	acc.7,00106$
                                    154 ;	mbstoc16s.c:56: return(-1);
      00003A 90 FF FF         [24]  155 	mov	dptr,#0xffff
      00003D 22               [24]  156 	ret
      00003E                        157 00106$:
                                    158 ;	mbstoc16s.c:57: else if(!l)
      00003E E5*07            [12]  159 	mov	a,___mbstoc16s_l_196608_56
      000040 45*08            [12]  160 	orl	a,(___mbstoc16s_l_196608_56 + 1)
      000042 70 1F            [24]  161 	jnz	00107$
                                    162 ;	mbstoc16s.c:59: if(m < n)
      000044 C3               [12]  163 	clr	c
      000045 E5*05            [12]  164 	mov	a,___mbstoc16s_m_65536_54
      000047 95*03            [12]  165 	subb	a,___mbstoc16s_PARM_3
      000049 E5*06            [12]  166 	mov	a,(___mbstoc16s_m_65536_54 + 1)
      00004B 95*04            [12]  167 	subb	a,(___mbstoc16s_PARM_3 + 1)
      00004D 40 03            [24]  168 	jc	00157$
      00004F 02r01r3E         [24]  169 	ljmp	00115$
      000052                        170 00157$:
                                    171 ;	mbstoc16s.c:60: *c16s = 0;
      000052 8D 82            [24]  172 	mov	dpl,r5
      000054 8E 83            [24]  173 	mov	dph,r6
      000056 8F F0            [24]  174 	mov	b,r7
      000058 E4               [12]  175 	clr	a
      000059 12r00r00         [24]  176 	lcall	__gptrput
      00005C A3               [24]  177 	inc	dptr
      00005D 12r00r00         [24]  178 	lcall	__gptrput
                                    179 ;	mbstoc16s.c:61: break;
      000060 02r01r3E         [24]  180 	ljmp	00115$
      000063                        181 00107$:
                                    182 ;	mbstoc16s.c:64: if (codepoint <= 0xffff) // Basic multilingual plane
      000063 C3               [12]  183 	clr	c
      000064 74 FF            [12]  184 	mov	a,#0xff
      000066 95*09            [12]  185 	subb	a,___mbstoc16s_codepoint_196608_56
      000068 74 FF            [12]  186 	mov	a,#0xff
      00006A 95*0A            [12]  187 	subb	a,(___mbstoc16s_codepoint_196608_56 + 1)
      00006C E4               [12]  188 	clr	a
      00006D 95*0B            [12]  189 	subb	a,(___mbstoc16s_codepoint_196608_56 + 2)
      00006F E4               [12]  190 	clr	a
      000070 95*0C            [12]  191 	subb	a,(___mbstoc16s_codepoint_196608_56 + 3)
                                    192 ;	mbstoc16s.c:66: if (m >= n)
      000072 40 30            [24]  193 	jc	00113$
      000074 E5*05            [12]  194 	mov	a,___mbstoc16s_m_65536_54
      000076 95*03            [12]  195 	subb	a,___mbstoc16s_PARM_3
      000078 E5*06            [12]  196 	mov	a,(___mbstoc16s_m_65536_54 + 1)
      00007A 95*04            [12]  197 	subb	a,(___mbstoc16s_PARM_3 + 1)
      00007C 40 03            [24]  198 	jc	00159$
      00007E 02r01r3E         [24]  199 	ljmp	00115$
      000081                        200 00159$:
                                    201 ;	mbstoc16s.c:69: *c16s++ = codepoint;
      000081 A8*09            [24]  202 	mov	r0,___mbstoc16s_codepoint_196608_56
      000083 AA*0A            [24]  203 	mov	r2,(___mbstoc16s_codepoint_196608_56 + 1)
      000085 8D 82            [24]  204 	mov	dpl,r5
      000087 8E 83            [24]  205 	mov	dph,r6
      000089 8F F0            [24]  206 	mov	b,r7
      00008B E8               [12]  207 	mov	a,r0
      00008C 12r00r00         [24]  208 	lcall	__gptrput
      00008F A3               [24]  209 	inc	dptr
      000090 EA               [12]  210 	mov	a,r2
      000091 12r00r00         [24]  211 	lcall	__gptrput
      000094 A3               [24]  212 	inc	dptr
      000095 AD 82            [24]  213 	mov	r5,dpl
      000097 AE 83            [24]  214 	mov	r6,dph
                                    215 ;	mbstoc16s.c:70: m++;
      000099 05*05            [12]  216 	inc	___mbstoc16s_m_65536_54
      00009B E4               [12]  217 	clr	a
      00009C B5*05 02         [24]  218 	cjne	a,___mbstoc16s_m_65536_54,00160$
      00009F 05*06            [12]  219 	inc	(___mbstoc16s_m_65536_54 + 1)
      0000A1                        220 00160$:
      0000A1 02r01r2F         [24]  221 	ljmp	00114$
      0000A4                        222 00113$:
                                    223 ;	mbstoc16s.c:74: if (m + 1 >= n)
      0000A4 74 01            [12]  224 	mov	a,#0x01
      0000A6 25*05            [12]  225 	add	a,___mbstoc16s_m_65536_54
      0000A8 F9               [12]  226 	mov	r1,a
      0000A9 E4               [12]  227 	clr	a
      0000AA 35*06            [12]  228 	addc	a,(___mbstoc16s_m_65536_54 + 1)
      0000AC FA               [12]  229 	mov	r2,a
      0000AD C3               [12]  230 	clr	c
      0000AE E9               [12]  231 	mov	a,r1
      0000AF 95*03            [12]  232 	subb	a,___mbstoc16s_PARM_3
      0000B1 EA               [12]  233 	mov	a,r2
      0000B2 95*04            [12]  234 	subb	a,(___mbstoc16s_PARM_3 + 1)
      0000B4 40 03            [24]  235 	jc	00161$
      0000B6 02r01r3E         [24]  236 	ljmp	00115$
      0000B9                        237 00161$:
                                    238 ;	mbstoc16s.c:77: codepoint -= 0x100000;
      0000B9 E5*0B            [12]  239 	mov	a,(___mbstoc16s_codepoint_196608_56 + 2)
      0000BB 24 F0            [12]  240 	add	a,#0xf0
      0000BD F5*0B            [12]  241 	mov	(___mbstoc16s_codepoint_196608_56 + 2),a
      0000BF E5*0C            [12]  242 	mov	a,(___mbstoc16s_codepoint_196608_56 + 3)
      0000C1 34 FF            [12]  243 	addc	a,#0xff
      0000C3 F5*0C            [12]  244 	mov	(___mbstoc16s_codepoint_196608_56 + 3),a
                                    245 ;	mbstoc16s.c:78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
      0000C5 A8*0A            [24]  246 	mov	r0,(___mbstoc16s_codepoint_196608_56 + 1)
      0000C7 E5*0B            [12]  247 	mov	a,(___mbstoc16s_codepoint_196608_56 + 2)
      0000C9 C3               [12]  248 	clr	c
      0000CA 13               [12]  249 	rrc	a
      0000CB C8               [12]  250 	xch	a,r0
      0000CC 13               [12]  251 	rrc	a
      0000CD C8               [12]  252 	xch	a,r0
      0000CE C3               [12]  253 	clr	c
      0000CF 13               [12]  254 	rrc	a
      0000D0 C8               [12]  255 	xch	a,r0
      0000D1 13               [12]  256 	rrc	a
      0000D2 C8               [12]  257 	xch	a,r0
      0000D3 F9               [12]  258 	mov	r1,a
      0000D4 E5*0C            [12]  259 	mov	a,(___mbstoc16s_codepoint_196608_56 + 3)
      0000D6 03               [12]  260 	rr	a
      0000D7 03               [12]  261 	rr	a
      0000D8 54 C0            [12]  262 	anl	a,#0xc0
      0000DA 49               [12]  263 	orl	a,r1
      0000DB F9               [12]  264 	mov	r1,a
      0000DC E5*0C            [12]  265 	mov	a,(___mbstoc16s_codepoint_196608_56 + 3)
      0000DE 03               [12]  266 	rr	a
      0000DF 03               [12]  267 	rr	a
      0000E0 54 3F            [12]  268 	anl	a,#0x3f
      0000E2 53 01 03         [24]  269 	anl	ar1,#0x03
      0000E5 74 D8            [12]  270 	mov	a,#0xd8
      0000E7 29               [12]  271 	add	a,r1
      0000E8 F9               [12]  272 	mov	r1,a
      0000E9 8D 82            [24]  273 	mov	dpl,r5
      0000EB 8E 83            [24]  274 	mov	dph,r6
      0000ED 8F F0            [24]  275 	mov	b,r7
      0000EF E8               [12]  276 	mov	a,r0
      0000F0 12r00r00         [24]  277 	lcall	__gptrput
      0000F3 A3               [24]  278 	inc	dptr
      0000F4 E9               [12]  279 	mov	a,r1
      0000F5 12r00r00         [24]  280 	lcall	__gptrput
      0000F8 74 02            [12]  281 	mov	a,#0x02
      0000FA 2D               [12]  282 	add	a,r5
      0000FB FA               [12]  283 	mov	r2,a
      0000FC E4               [12]  284 	clr	a
      0000FD 3E               [12]  285 	addc	a,r6
      0000FE FB               [12]  286 	mov	r3,a
      0000FF 8F 04            [24]  287 	mov	ar4,r7
                                    288 ;	mbstoc16s.c:79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
      000101 A8*09            [24]  289 	mov	r0,___mbstoc16s_codepoint_196608_56
      000103 A9*0A            [24]  290 	mov	r1,(___mbstoc16s_codepoint_196608_56 + 1)
      000105 53 01 03         [24]  291 	anl	ar1,#0x03
      000108 74 DC            [12]  292 	mov	a,#0xdc
      00010A 29               [12]  293 	add	a,r1
      00010B F9               [12]  294 	mov	r1,a
      00010C 8A 82            [24]  295 	mov	dpl,r2
      00010E 8B 83            [24]  296 	mov	dph,r3
      000110 8C F0            [24]  297 	mov	b,r4
      000112 E8               [12]  298 	mov	a,r0
      000113 12r00r00         [24]  299 	lcall	__gptrput
      000116 A3               [24]  300 	inc	dptr
      000117 E9               [12]  301 	mov	a,r1
      000118 12r00r00         [24]  302 	lcall	__gptrput
      00011B 74 02            [12]  303 	mov	a,#0x02
      00011D 2A               [12]  304 	add	a,r2
      00011E FD               [12]  305 	mov	r5,a
      00011F E4               [12]  306 	clr	a
      000120 3B               [12]  307 	addc	a,r3
      000121 FE               [12]  308 	mov	r6,a
      000122 8C 07            [24]  309 	mov	ar7,r4
                                    310 ;	mbstoc16s.c:80: m += 2;
      000124 74 02            [12]  311 	mov	a,#0x02
      000126 25*05            [12]  312 	add	a,___mbstoc16s_m_65536_54
      000128 F5*05            [12]  313 	mov	___mbstoc16s_m_65536_54,a
      00012A E4               [12]  314 	clr	a
      00012B 35*06            [12]  315 	addc	a,(___mbstoc16s_m_65536_54 + 1)
      00012D F5*06            [12]  316 	mov	(___mbstoc16s_m_65536_54 + 1),a
      00012F                        317 00114$:
                                    318 ;	mbstoc16s.c:82: s += l;
      00012F E5*07            [12]  319 	mov	a,___mbstoc16s_l_196608_56
      000131 25*00            [12]  320 	add	a,___mbstoc16s_PARM_2
      000133 F5*00            [12]  321 	mov	___mbstoc16s_PARM_2,a
      000135 E5*08            [12]  322 	mov	a,(___mbstoc16s_l_196608_56 + 1)
      000137 35*01            [12]  323 	addc	a,(___mbstoc16s_PARM_2 + 1)
      000139 F5*01            [12]  324 	mov	(___mbstoc16s_PARM_2 + 1),a
      00013B 02r00r0B         [24]  325 	ljmp	00116$
      00013E                        326 00115$:
                                    327 ;	mbstoc16s.c:85: return(m);
      00013E 85*05 82         [24]  328 	mov	dpl,___mbstoc16s_m_65536_54
      000141 85*06 83         [24]  329 	mov	dph,(___mbstoc16s_m_65536_54 + 1)
                                    330 ;	mbstoc16s.c:86: }
      000144 22               [24]  331 	ret
                                    332 	.area CSEG    (CODE)
                                    333 	.area CONST   (CODE)
                                    334 	.area XINIT   (CODE)
                                    335 	.area CABS    (ABS,CODE)
