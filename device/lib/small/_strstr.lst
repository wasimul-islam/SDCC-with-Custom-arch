                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strstr
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strstr_PARM_2
                                     12 	.globl _strstr
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (OVR,DATA)
      000000                         36 _strstr_PARM_2:
      000000                         37 	.ds 3
      000003                         38 _strstr_cp_65536_27:
      000003                         39 	.ds 3
      000006                         40 _strstr_s1_65536_27:
      000006                         41 	.ds 3
      000009                         42 _strstr_s2_65536_27:
      000009                         43 	.ds 3
      00000C                         44 _strstr_sloc0_1_0:
      00000C                         45 	.ds 3
                                     46 ;--------------------------------------------------------
                                     47 ; indirectly addressable internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area ISEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; absolute internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area IABS    (ABS,DATA)
                                     54 	.area IABS    (ABS,DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; bit data
                                     57 ;--------------------------------------------------------
                                     58 	.area BSEG    (BIT)
                                     59 ;--------------------------------------------------------
                                     60 ; paged external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area PSEG    (PAG,XDATA)
                                     63 ;--------------------------------------------------------
                                     64 ; uninitialized external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area XSEG    (XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; absolute external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XABS    (ABS,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; initialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XISEG   (XDATA)
                                     75 	.area HOME    (CODE)
                                     76 	.area GSINIT0 (CODE)
                                     77 	.area GSINIT1 (CODE)
                                     78 	.area GSINIT2 (CODE)
                                     79 	.area GSINIT3 (CODE)
                                     80 	.area GSINIT4 (CODE)
                                     81 	.area GSINIT5 (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area CSEG    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function 'strstr'
                                    103 ;------------------------------------------------------------
                                    104 ;str2                      Allocated with name '_strstr_PARM_2'
                                    105 ;str1                      Allocated to registers r5 r6 r7 
                                    106 ;cp                        Allocated with name '_strstr_cp_65536_27'
                                    107 ;s1                        Allocated with name '_strstr_s1_65536_27'
                                    108 ;s2                        Allocated with name '_strstr_s2_65536_27'
                                    109 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                                    110 ;------------------------------------------------------------
                                    111 ;	_strstr.c:31: char *strstr ( const char *str1, const char *str2 )
                                    112 ;	-----------------------------------------
                                    113 ;	 function strstr
                                    114 ;	-----------------------------------------
      000000                        115 _strstr:
                           000007   116 	ar7 = 0x07
                           000006   117 	ar6 = 0x06
                           000005   118 	ar5 = 0x05
                           000004   119 	ar4 = 0x04
                           000003   120 	ar3 = 0x03
                           000002   121 	ar2 = 0x02
                           000001   122 	ar1 = 0x01
                           000000   123 	ar0 = 0x00
      000000 AD 82            [24]  124 	mov	r5,dpl
      000002 AE 83            [24]  125 	mov	r6,dph
      000004 AF F0            [24]  126 	mov	r7,b
                                    127 ;	_strstr.c:33: const char *cp = str1;
      000006 8D*03            [24]  128 	mov	_strstr_cp_65536_27,r5
      000008 8E*04            [24]  129 	mov	(_strstr_cp_65536_27 + 1),r6
      00000A 8F*05            [24]  130 	mov	(_strstr_cp_65536_27 + 2),r7
                                    131 ;	_strstr.c:37: if (!*str2)
      00000C 85*00*09         [24]  132 	mov	_strstr_s2_65536_27,_strstr_PARM_2
      00000F 85*01*0A         [24]  133 	mov	(_strstr_s2_65536_27 + 1),(_strstr_PARM_2 + 1)
      000012 85*02*0B         [24]  134 	mov	(_strstr_s2_65536_27 + 2),(_strstr_PARM_2 + 2)
      000015 85*09 82         [24]  135 	mov	dpl,_strstr_s2_65536_27
      000018 85*0A 83         [24]  136 	mov	dph,(_strstr_s2_65536_27 + 1)
      00001B 85*0B F0         [24]  137 	mov	b,(_strstr_s2_65536_27 + 2)
      00001E 12r00r00         [24]  138 	lcall	__gptrget
      000021 70 07            [24]  139 	jnz	00122$
                                    140 ;	_strstr.c:38: return ((char*)str1);
      000023 8D 82            [24]  141 	mov	dpl,r5
      000025 8E 83            [24]  142 	mov	dph,r6
      000027 8F F0            [24]  143 	mov	b,r7
      000029 22               [24]  144 	ret
                                    145 ;	_strstr.c:40: while (*cp)
      00002A                        146 00122$:
      00002A 8D*06            [24]  147 	mov	_strstr_s1_65536_27,r5
      00002C 8E*07            [24]  148 	mov	(_strstr_s1_65536_27 + 1),r6
      00002E 8F*08            [24]  149 	mov	(_strstr_s1_65536_27 + 2),r7
      000030                        150 00110$:
      000030 85*06 82         [24]  151 	mov	dpl,_strstr_s1_65536_27
      000033 85*07 83         [24]  152 	mov	dph,(_strstr_s1_65536_27 + 1)
      000036 85*08 F0         [24]  153 	mov	b,(_strstr_s1_65536_27 + 2)
      000039 12r00r00         [24]  154 	lcall	__gptrget
      00003C 60 6E            [24]  155 	jz	00112$
                                    156 ;	_strstr.c:43: s2 = str2;
      00003E AA*09            [24]  157 	mov	r2,_strstr_s2_65536_27
      000040 AB*0A            [24]  158 	mov	r3,(_strstr_s2_65536_27 + 1)
      000042 AC*0B            [24]  159 	mov	r4,(_strstr_s2_65536_27 + 2)
                                    160 ;	_strstr.c:45: while (*s1 && *s2 && !(*s1-*s2))
      000044 85*06*0C         [24]  161 	mov	_strstr_sloc0_1_0,_strstr_s1_65536_27
      000047 85*07*0D         [24]  162 	mov	(_strstr_sloc0_1_0 + 1),(_strstr_s1_65536_27 + 1)
      00004A 85*08*0E         [24]  163 	mov	(_strstr_sloc0_1_0 + 2),(_strstr_s1_65536_27 + 2)
      00004D                        164 00105$:
      00004D 85*0C 82         [24]  165 	mov	dpl,_strstr_sloc0_1_0
      000050 85*0D 83         [24]  166 	mov	dph,(_strstr_sloc0_1_0 + 1)
      000053 85*0E F0         [24]  167 	mov	b,(_strstr_sloc0_1_0 + 2)
      000056 12r00r00         [24]  168 	lcall	__gptrget
      000059 F9               [12]  169 	mov	r1,a
      00005A 60 28            [24]  170 	jz	00107$
      00005C 8A 82            [24]  171 	mov	dpl,r2
      00005E 8B 83            [24]  172 	mov	dph,r3
      000060 8C F0            [24]  173 	mov	b,r4
      000062 12r00r00         [24]  174 	lcall	__gptrget
      000065 F8               [12]  175 	mov	r0,a
      000066 60 1C            [24]  176 	jz	00107$
      000068 E4               [12]  177 	clr	a
      000069 FF               [12]  178 	mov	r7,a
      00006A FE               [12]  179 	mov	r6,a
      00006B E9               [12]  180 	mov	a,r1
      00006C C3               [12]  181 	clr	c
      00006D 98               [12]  182 	subb	a,r0
      00006E F9               [12]  183 	mov	r1,a
      00006F EF               [12]  184 	mov	a,r7
      000070 9E               [12]  185 	subb	a,r6
      000071 FF               [12]  186 	mov	r7,a
      000072 49               [12]  187 	orl	a,r1
      000073 70 0F            [24]  188 	jnz	00107$
                                    189 ;	_strstr.c:46: s1++, s2++;
      000075 05*0C            [12]  190 	inc	_strstr_sloc0_1_0
      000077 E4               [12]  191 	clr	a
      000078 B5*0C 02         [24]  192 	cjne	a,_strstr_sloc0_1_0,00153$
      00007B 05*0D            [12]  193 	inc	(_strstr_sloc0_1_0 + 1)
      00007D                        194 00153$:
      00007D 0A               [12]  195 	inc	r2
      00007E BA 00 CC         [24]  196 	cjne	r2,#0x00,00105$
      000081 0B               [12]  197 	inc	r3
      000082 80 C9            [24]  198 	sjmp	00105$
      000084                        199 00107$:
                                    200 ;	_strstr.c:48: if (!*s2)
      000084 8A 82            [24]  201 	mov	dpl,r2
      000086 8B 83            [24]  202 	mov	dph,r3
      000088 8C F0            [24]  203 	mov	b,r4
      00008A 12r00r00         [24]  204 	lcall	__gptrget
      00008D 70 0A            [24]  205 	jnz	00109$
                                    206 ;	_strstr.c:49: return ((char*)cp);
      00008F 85*03 82         [24]  207 	mov	dpl,_strstr_cp_65536_27
      000092 85*04 83         [24]  208 	mov	dph,(_strstr_cp_65536_27 + 1)
      000095 85*05 F0         [24]  209 	mov	b,(_strstr_cp_65536_27 + 2)
      000098 22               [24]  210 	ret
      000099                        211 00109$:
                                    212 ;	_strstr.c:51: cp++;
      000099 05*06            [12]  213 	inc	_strstr_s1_65536_27
      00009B E4               [12]  214 	clr	a
      00009C B5*06 02         [24]  215 	cjne	a,_strstr_s1_65536_27,00156$
      00009F 05*07            [12]  216 	inc	(_strstr_s1_65536_27 + 1)
      0000A1                        217 00156$:
      0000A1 85*06*03         [24]  218 	mov	_strstr_cp_65536_27,_strstr_s1_65536_27
      0000A4 85*07*04         [24]  219 	mov	(_strstr_cp_65536_27 + 1),(_strstr_s1_65536_27 + 1)
      0000A7 85*08*05         [24]  220 	mov	(_strstr_cp_65536_27 + 2),(_strstr_s1_65536_27 + 2)
      0000AA 80 84            [24]  221 	sjmp	00110$
      0000AC                        222 00112$:
                                    223 ;	_strstr.c:54: return (NULL) ;
      0000AC 90 00 00         [24]  224 	mov	dptr,#0x0000
      0000AF 75 F0 00         [24]  225 	mov	b,#0x00
                                    226 ;	_strstr.c:55: }
      0000B2 22               [24]  227 	ret
                                    228 	.area CSEG    (CODE)
                                    229 	.area CONST   (CODE)
                                    230 	.area XINIT   (CODE)
                                    231 	.area CABS    (ABS,CODE)
