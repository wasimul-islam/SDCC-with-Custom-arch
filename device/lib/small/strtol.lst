                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strtol
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strtoul
                                     12 	.globl _strtol_PARM_3
                                     13 	.globl _strtol_PARM_2
                                     14 	.globl _strtol
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _strtol_PARM_2:
      000000                         35 	.ds 3
      000003                         36 _strtol_PARM_3:
      000003                         37 	.ds 2
      000005                         38 _strtol_nptr_65536_59:
      000005                         39 	.ds 3
      000008                         40 _strtol_rptr_65536_60:
      000008                         41 	.ds 3
      00000B                         42 _strtol_neg_65536_60:
      00000B                         43 	.ds 1
                                     44 ;--------------------------------------------------------
                                     45 ; overlayable items in internal ram
                                     46 ;--------------------------------------------------------
                                     47 ;--------------------------------------------------------
                                     48 ; indirectly addressable internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area ISEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; absolute internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area IABS    (ABS,DATA)
                                     55 	.area IABS    (ABS,DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; bit data
                                     58 ;--------------------------------------------------------
                                     59 	.area BSEG    (BIT)
                                     60 ;--------------------------------------------------------
                                     61 ; paged external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area PSEG    (PAG,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; uninitialized external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XSEG    (XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; absolute external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XABS    (ABS,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; initialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XISEG   (XDATA)
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT0 (CODE)
                                     78 	.area GSINIT1 (CODE)
                                     79 	.area GSINIT2 (CODE)
                                     80 	.area GSINIT3 (CODE)
                                     81 	.area GSINIT4 (CODE)
                                     82 	.area GSINIT5 (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area CSEG    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function 'strtol'
                                    104 ;------------------------------------------------------------
                                    105 ;endptr                    Allocated with name '_strtol_PARM_2'
                                    106 ;base                      Allocated with name '_strtol_PARM_3'
                                    107 ;nptr                      Allocated with name '_strtol_nptr_65536_59'
                                    108 ;__1310720007              Allocated to registers 
                                    109 ;__1310720004              Allocated to registers 
                                    110 ;ptr                       Allocated to registers r0 r1 r7 
                                    111 ;rptr                      Allocated with name '_strtol_rptr_65536_60'
                                    112 ;u                         Allocated to registers r3 r4 r5 r6 
                                    113 ;neg                       Allocated with name '_strtol_neg_65536_60'
                                    114 ;__1310720005              Allocated to registers 
                                    115 ;c                         Allocated to registers 
                                    116 ;__1310720008              Allocated to registers 
                                    117 ;c                         Allocated to registers 
                                    118 ;------------------------------------------------------------
                                    119 ;	strtol.c:38: long int strtol(const char *nptr, char **endptr, int base)
                                    120 ;	-----------------------------------------
                                    121 ;	 function strtol
                                    122 ;	-----------------------------------------
      000000                        123 _strtol:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 85 82*05         [24]  132 	mov	_strtol_nptr_65536_59,dpl
      000003 85 83*06         [24]  133 	mov	(_strtol_nptr_65536_59 + 1),dph
      000006 85 F0*07         [24]  134 	mov	(_strtol_nptr_65536_59 + 2),b
                                    135 ;	strtol.c:45: while (isblank (*ptr))
      000009 AA*05            [24]  136 	mov	r2,_strtol_nptr_65536_59
      00000B AB*06            [24]  137 	mov	r3,(_strtol_nptr_65536_59 + 1)
      00000D AC*07            [24]  138 	mov	r4,(_strtol_nptr_65536_59 + 2)
      00000F                        139 00101$:
      00000F 8A 82            [24]  140 	mov	dpl,r2
      000011 8B 83            [24]  141 	mov	dph,r3
      000013 8C F0            [24]  142 	mov	b,r4
      000015 12r00r00         [24]  143 	lcall	__gptrget
      000018 F9               [12]  144 	mov	r1,a
                                    145 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000019 B9 20 02         [24]  146 	cjne	r1,#0x20,00208$
      00001C 80 03            [24]  147 	sjmp	00132$
      00001E                        148 00208$:
      00001E B9 09 07         [24]  149 	cjne	r1,#0x09,00158$
      000021                        150 00132$:
                                    151 ;	strtol.c:46: ptr++;
      000021 0A               [12]  152 	inc	r2
      000022 BA 00 EA         [24]  153 	cjne	r2,#0x00,00101$
      000025 0B               [12]  154 	inc	r3
      000026 80 E7            [24]  155 	sjmp	00101$
      000028                        156 00158$:
      000028 8A 00            [24]  157 	mov	ar0,r2
      00002A 8B 01            [24]  158 	mov	ar1,r3
      00002C 8C 07            [24]  159 	mov	ar7,r4
                                    160 ;	strtol.c:50: if (*ptr == '-')
      00002E 8A 82            [24]  161 	mov	dpl,r2
      000030 8B 83            [24]  162 	mov	dph,r3
      000032 8C F0            [24]  163 	mov	b,r4
      000034 12r00r00         [24]  164 	lcall	__gptrget
      000037 FE               [12]  165 	mov	r6,a
      000038 BE 2D 0D         [24]  166 	cjne	r6,#0x2d,00105$
                                    167 ;	strtol.c:52: neg = true;
                                    168 ;	strtol.c:53: ptr++;
      00003B 74 01            [12]  169 	mov	a,#0x01
      00003D F5*0B            [12]  170 	mov	_strtol_neg_65536_60,a
      00003F 2A               [12]  171 	add	a,r2
      000040 F8               [12]  172 	mov	r0,a
      000041 E4               [12]  173 	clr	a
      000042 3B               [12]  174 	addc	a,r3
      000043 F9               [12]  175 	mov	r1,a
      000044 8C 07            [24]  176 	mov	ar7,r4
      000046 80 03            [24]  177 	sjmp	00106$
      000048                        178 00105$:
                                    179 ;	strtol.c:56: neg = false;
      000048 75*0B 00         [24]  180 	mov	_strtol_neg_65536_60,#0x00
      00004B                        181 00106$:
                                    182 ;	strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
      00004B E5*0B            [12]  183 	mov	a,_strtol_neg_65536_60
      00004D 60 47            [24]  184 	jz	00110$
      00004F 88 82            [24]  185 	mov	dpl,r0
      000051 89 83            [24]  186 	mov	dph,r1
      000053 8F F0            [24]  187 	mov	b,r7
      000055 12r00r00         [24]  188 	lcall	__gptrget
      000058 FE               [12]  189 	mov	r6,a
      000059 FD               [12]  190 	mov	r5,a
                                    191 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      00005A BD 20 02         [24]  192 	cjne	r5,#0x20,00215$
      00005D 80 0D            [24]  193 	sjmp	00109$
      00005F                        194 00215$:
      00005F BD 09 02         [24]  195 	cjne	r5,#0x09,00216$
      000062 80 08            [24]  196 	sjmp	00109$
      000064                        197 00216$:
                                    198 ;	strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
      000064 BE 2D 02         [24]  199 	cjne	r6,#0x2d,00217$
      000067 80 03            [24]  200 	sjmp	00109$
      000069                        201 00217$:
      000069 BE 2B 2A         [24]  202 	cjne	r6,#0x2b,00110$
      00006C                        203 00109$:
                                    204 ;	strtol.c:61: if (endptr)
      00006C E5*00            [12]  205 	mov	a,_strtol_PARM_2
      00006E 45*01            [12]  206 	orl	a,(_strtol_PARM_2 + 1)
      000070 60 1D            [24]  207 	jz	00108$
                                    208 ;	strtol.c:62: *endptr = nptr;
      000072 AC*00            [24]  209 	mov	r4,_strtol_PARM_2
      000074 AD*01            [24]  210 	mov	r5,(_strtol_PARM_2 + 1)
      000076 AE*02            [24]  211 	mov	r6,(_strtol_PARM_2 + 2)
      000078 8C 82            [24]  212 	mov	dpl,r4
      00007A 8D 83            [24]  213 	mov	dph,r5
      00007C 8E F0            [24]  214 	mov	b,r6
      00007E E5*05            [12]  215 	mov	a,_strtol_nptr_65536_59
      000080 12r00r00         [24]  216 	lcall	__gptrput
      000083 A3               [24]  217 	inc	dptr
      000084 E5*06            [12]  218 	mov	a,(_strtol_nptr_65536_59 + 1)
      000086 12r00r00         [24]  219 	lcall	__gptrput
      000089 A3               [24]  220 	inc	dptr
      00008A E5*07            [12]  221 	mov	a,(_strtol_nptr_65536_59 + 2)
      00008C 12r00r00         [24]  222 	lcall	__gptrput
      00008F                        223 00108$:
                                    224 ;	strtol.c:63: return (0);
      00008F 90 00 00         [24]  225 	mov	dptr,#(0x00&0x00ff)
      000092 E4               [12]  226 	clr	a
      000093 F5 F0            [12]  227 	mov	b,a
      000095 22               [24]  228 	ret
      000096                        229 00110$:
                                    230 ;	strtol.c:66: u = strtoul(ptr, &rptr, base);
      000096 75*00r08         [24]  231 	mov	_strtoul_PARM_2,#_strtol_rptr_65536_60
      000099 75*01 00         [24]  232 	mov	(_strtoul_PARM_2 + 1),#0x00
      00009C 75*02 40         [24]  233 	mov	(_strtoul_PARM_2 + 2),#0x40
      00009F 85*03*00         [24]  234 	mov	_strtoul_PARM_3,_strtol_PARM_3
      0000A2 85*04*01         [24]  235 	mov	(_strtoul_PARM_3 + 1),(_strtol_PARM_3 + 1)
      0000A5 88 82            [24]  236 	mov	dpl,r0
      0000A7 89 83            [24]  237 	mov	dph,r1
      0000A9 8F F0            [24]  238 	mov	b,r7
      0000AB C0 07            [24]  239 	push	ar7
      0000AD C0 01            [24]  240 	push	ar1
      0000AF C0 00            [24]  241 	push	ar0
      0000B1 12r00r00         [24]  242 	lcall	_strtoul
      0000B4 AB 82            [24]  243 	mov	r3,dpl
      0000B6 AC 83            [24]  244 	mov	r4,dph
      0000B8 AD F0            [24]  245 	mov	r5,b
      0000BA FE               [12]  246 	mov	r6,a
      0000BB D0 00            [24]  247 	pop	ar0
      0000BD D0 01            [24]  248 	pop	ar1
      0000BF D0 07            [24]  249 	pop	ar7
                                    250 ;	strtol.c:69: if (rptr == ptr)
      0000C1 C0*08            [24]  251 	push	_strtol_rptr_65536_60
      0000C3 C0*09            [24]  252 	push	(_strtol_rptr_65536_60 + 1)
      0000C5 C0*0A            [24]  253 	push	(_strtol_rptr_65536_60 + 2)
      0000C7 88 82            [24]  254 	mov	dpl,r0
      0000C9 89 83            [24]  255 	mov	dph,r1
      0000CB 8F F0            [24]  256 	mov	b,r7
      0000CD 12r00r00         [24]  257 	lcall	___gptr_cmp
      0000D0 15 81            [12]  258 	dec	sp
      0000D2 15 81            [12]  259 	dec	sp
      0000D4 15 81            [12]  260 	dec	sp
      0000D6 70 2A            [24]  261 	jnz	00117$
                                    262 ;	strtol.c:71: if (endptr)
      0000D8 E5*00            [12]  263 	mov	a,_strtol_PARM_2
      0000DA 45*01            [12]  264 	orl	a,(_strtol_PARM_2 + 1)
      0000DC 60 1D            [24]  265 	jz	00115$
                                    266 ;	strtol.c:72: *endptr = nptr;
      0000DE A9*00            [24]  267 	mov	r1,_strtol_PARM_2
      0000E0 AA*01            [24]  268 	mov	r2,(_strtol_PARM_2 + 1)
      0000E2 AF*02            [24]  269 	mov	r7,(_strtol_PARM_2 + 2)
      0000E4 89 82            [24]  270 	mov	dpl,r1
      0000E6 8A 83            [24]  271 	mov	dph,r2
      0000E8 8F F0            [24]  272 	mov	b,r7
      0000EA E5*05            [12]  273 	mov	a,_strtol_nptr_65536_59
      0000EC 12r00r00         [24]  274 	lcall	__gptrput
      0000EF A3               [24]  275 	inc	dptr
      0000F0 E5*06            [12]  276 	mov	a,(_strtol_nptr_65536_59 + 1)
      0000F2 12r00r00         [24]  277 	lcall	__gptrput
      0000F5 A3               [24]  278 	inc	dptr
      0000F6 E5*07            [12]  279 	mov	a,(_strtol_nptr_65536_59 + 2)
      0000F8 12r00r00         [24]  280 	lcall	__gptrput
      0000FB                        281 00115$:
                                    282 ;	strtol.c:73: return (0);
      0000FB 90 00 00         [24]  283 	mov	dptr,#(0x00&0x00ff)
      0000FE E4               [12]  284 	clr	a
      0000FF F5 F0            [12]  285 	mov	b,a
      000101 22               [24]  286 	ret
      000102                        287 00117$:
                                    288 ;	strtol.c:76: if (endptr)
      000102 E5*00            [12]  289 	mov	a,_strtol_PARM_2
      000104 45*01            [12]  290 	orl	a,(_strtol_PARM_2 + 1)
      000106 60 1D            [24]  291 	jz	00119$
                                    292 ;	strtol.c:77: *endptr = rptr;
      000108 A9*00            [24]  293 	mov	r1,_strtol_PARM_2
      00010A AA*01            [24]  294 	mov	r2,(_strtol_PARM_2 + 1)
      00010C AF*02            [24]  295 	mov	r7,(_strtol_PARM_2 + 2)
      00010E 89 82            [24]  296 	mov	dpl,r1
      000110 8A 83            [24]  297 	mov	dph,r2
      000112 8F F0            [24]  298 	mov	b,r7
      000114 E5*08            [12]  299 	mov	a,_strtol_rptr_65536_60
      000116 12r00r00         [24]  300 	lcall	__gptrput
      000119 A3               [24]  301 	inc	dptr
      00011A E5*09            [12]  302 	mov	a,(_strtol_rptr_65536_60 + 1)
      00011C 12r00r00         [24]  303 	lcall	__gptrput
      00011F A3               [24]  304 	inc	dptr
      000120 E5*0A            [12]  305 	mov	a,(_strtol_rptr_65536_60 + 2)
      000122 12r00r00         [24]  306 	lcall	__gptrput
      000125                        307 00119$:
                                    308 ;	strtol.c:80: if (!neg && u > LONG_MAX)
      000125 E5*0B            [12]  309 	mov	a,_strtol_neg_65536_60
      000127 70 1E            [24]  310 	jnz	00124$
      000129 C3               [12]  311 	clr	c
      00012A 74 FF            [12]  312 	mov	a,#0xff
      00012C 9B               [12]  313 	subb	a,r3
      00012D 74 FF            [12]  314 	mov	a,#0xff
      00012F 9C               [12]  315 	subb	a,r4
      000130 74 FF            [12]  316 	mov	a,#0xff
      000132 9D               [12]  317 	subb	a,r5
      000133 74 7F            [12]  318 	mov	a,#0x7f
      000135 9E               [12]  319 	subb	a,r6
      000136 50 0F            [24]  320 	jnc	00124$
                                    321 ;	strtol.c:82: errno = ERANGE;
      000138 75*00 22         [24]  322 	mov	_errno,#0x22
      00013B 75*01 00         [24]  323 	mov	(_errno + 1),#0x00
                                    324 ;	strtol.c:83: return (LONG_MAX);
      00013E 90 FF FF         [24]  325 	mov	dptr,#0xffff
      000141 75 F0 FF         [24]  326 	mov	b,#0xff
      000144 74 7F            [12]  327 	mov	a,#0x7f
      000146 22               [24]  328 	ret
      000147                        329 00124$:
                                    330 ;	strtol.c:85: else if (neg && u > -LONG_MIN)
      000147 E5*0B            [12]  331 	mov	a,_strtol_neg_65536_60
      000149 60 1B            [24]  332 	jz	00125$
      00014B C3               [12]  333 	clr	c
      00014C E4               [12]  334 	clr	a
      00014D 9B               [12]  335 	subb	a,r3
      00014E E4               [12]  336 	clr	a
      00014F 9C               [12]  337 	subb	a,r4
      000150 E4               [12]  338 	clr	a
      000151 9D               [12]  339 	subb	a,r5
      000152 74 80            [12]  340 	mov	a,#0x80
      000154 9E               [12]  341 	subb	a,r6
      000155 50 0F            [24]  342 	jnc	00125$
                                    343 ;	strtol.c:87: errno = ERANGE;
      000157 75*00 22         [24]  344 	mov	_errno,#0x22
      00015A 75*01 00         [24]  345 	mov	(_errno + 1),#0x00
                                    346 ;	strtol.c:88: return (LONG_MIN);
      00015D 90 00 00         [24]  347 	mov	dptr,#(0x00&0x00ff)
      000160 E4               [12]  348 	clr	a
      000161 F5 F0            [12]  349 	mov	b,a
      000163 74 80            [12]  350 	mov	a,#0x80
      000165 22               [24]  351 	ret
      000166                        352 00125$:
                                    353 ;	strtol.c:91: return (neg ? -u : u);
      000166 E5*0B            [12]  354 	mov	a,_strtol_neg_65536_60
      000168 60 0F            [24]  355 	jz	00137$
      00016A C3               [12]  356 	clr	c
      00016B E4               [12]  357 	clr	a
      00016C 9B               [12]  358 	subb	a,r3
      00016D F8               [12]  359 	mov	r0,a
      00016E E4               [12]  360 	clr	a
      00016F 9C               [12]  361 	subb	a,r4
      000170 F9               [12]  362 	mov	r1,a
      000171 E4               [12]  363 	clr	a
      000172 9D               [12]  364 	subb	a,r5
      000173 FA               [12]  365 	mov	r2,a
      000174 E4               [12]  366 	clr	a
      000175 9E               [12]  367 	subb	a,r6
      000176 FF               [12]  368 	mov	r7,a
      000177 80 08            [24]  369 	sjmp	00138$
      000179                        370 00137$:
      000179 8B 00            [24]  371 	mov	ar0,r3
      00017B 8C 01            [24]  372 	mov	ar1,r4
      00017D 8D 02            [24]  373 	mov	ar2,r5
      00017F 8E 07            [24]  374 	mov	ar7,r6
      000181                        375 00138$:
      000181 88 82            [24]  376 	mov	dpl,r0
      000183 89 83            [24]  377 	mov	dph,r1
      000185 8A F0            [24]  378 	mov	b,r2
      000187 EF               [12]  379 	mov	a,r7
                                    380 ;	strtol.c:92: }
      000188 22               [24]  381 	ret
                                    382 	.area CSEG    (CODE)
                                    383 	.area CONST   (CODE)
                                    384 	.area XINIT   (CODE)
                                    385 	.area CABS    (ABS,CODE)
