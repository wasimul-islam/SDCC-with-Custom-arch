                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf_PARM_3
                                     13 	.globl _vsprintf_PARM_2
                                     14 	.globl _vsprintf
                                     15 	.globl _sprintf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _vsprintf_PARM_2:
      000000                         36 	.ds 3
      000003                         37 _vsprintf_PARM_3:
      000003                         38 	.ds 1
      000004                         39 _vsprintf_buf_65536_16:
      000004                         40 	.ds 3
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable items in internal ram
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; uninitialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XABS    (ABS,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; initialized external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XISEG   (XDATA)
                                     73 	.area HOME    (CODE)
                                     74 	.area GSINIT0 (CODE)
                                     75 	.area GSINIT1 (CODE)
                                     76 	.area GSINIT2 (CODE)
                                     77 	.area GSINIT3 (CODE)
                                     78 	.area GSINIT4 (CODE)
                                     79 	.area GSINIT5 (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area CSEG    (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'put_char_to_string'
                                    101 ;------------------------------------------------------------
                                    102 ;p                         Allocated to stack - _bp -5
                                    103 ;c                         Allocated to stack - _bp +1
                                    104 ;buf                       Allocated to stack - _bp +2
                                    105 ;------------------------------------------------------------
                                    106 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function put_char_to_string
                                    109 ;	-----------------------------------------
      000000                        110 _put_char_to_string:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
      000000 C0*00            [24]  119 	push	_bp
      000002 85 81*00         [24]  120 	mov	_bp,sp
      000005 C0 82            [24]  121 	push	dpl
      000007 05 81            [12]  122 	inc	sp
      000009 05 81            [12]  123 	inc	sp
      00000B 05 81            [12]  124 	inc	sp
                                    125 ;	sprintf.c:36: char **buf = (char **)p;
      00000D E5*00            [12]  126 	mov	a,_bp
      00000F 24 FB            [12]  127 	add	a,#0xfb
      000011 F8               [12]  128 	mov	r0,a
      000012 A9*00            [24]  129 	mov	r1,_bp
      000014 09               [12]  130 	inc	r1
      000015 09               [12]  131 	inc	r1
      000016 E6               [12]  132 	mov	a,@r0
      000017 F7               [12]  133 	mov	@r1,a
      000018 08               [12]  134 	inc	r0
      000019 E6               [12]  135 	mov	a,@r0
      00001A 09               [12]  136 	inc	r1
      00001B F7               [12]  137 	mov	@r1,a
      00001C 08               [12]  138 	inc	r0
      00001D E6               [12]  139 	mov	a,@r0
      00001E 09               [12]  140 	inc	r1
      00001F F7               [12]  141 	mov	@r1,a
                                    142 ;	sprintf.c:37: *(*buf)++ = c;
      000020 A8*00            [24]  143 	mov	r0,_bp
      000022 08               [12]  144 	inc	r0
      000023 08               [12]  145 	inc	r0
      000024 86 82            [24]  146 	mov	dpl,@r0
      000026 08               [12]  147 	inc	r0
      000027 86 83            [24]  148 	mov	dph,@r0
      000029 08               [12]  149 	inc	r0
      00002A 86 F0            [24]  150 	mov	b,@r0
      00002C 12r00r00         [24]  151 	lcall	__gptrget
      00002F FA               [12]  152 	mov	r2,a
      000030 A3               [24]  153 	inc	dptr
      000031 12r00r00         [24]  154 	lcall	__gptrget
      000034 FB               [12]  155 	mov	r3,a
      000035 A3               [24]  156 	inc	dptr
      000036 12r00r00         [24]  157 	lcall	__gptrget
      000039 FF               [12]  158 	mov	r7,a
      00003A 74 01            [12]  159 	mov	a,#0x01
      00003C 2A               [12]  160 	add	a,r2
      00003D FC               [12]  161 	mov	r4,a
      00003E E4               [12]  162 	clr	a
      00003F 3B               [12]  163 	addc	a,r3
      000040 FD               [12]  164 	mov	r5,a
      000041 8F 06            [24]  165 	mov	ar6,r7
      000043 A8*00            [24]  166 	mov	r0,_bp
      000045 08               [12]  167 	inc	r0
      000046 08               [12]  168 	inc	r0
      000047 86 82            [24]  169 	mov	dpl,@r0
      000049 08               [12]  170 	inc	r0
      00004A 86 83            [24]  171 	mov	dph,@r0
      00004C 08               [12]  172 	inc	r0
      00004D 86 F0            [24]  173 	mov	b,@r0
      00004F EC               [12]  174 	mov	a,r4
      000050 12r00r00         [24]  175 	lcall	__gptrput
      000053 A3               [24]  176 	inc	dptr
      000054 ED               [12]  177 	mov	a,r5
      000055 12r00r00         [24]  178 	lcall	__gptrput
      000058 A3               [24]  179 	inc	dptr
      000059 EE               [12]  180 	mov	a,r6
      00005A 12r00r00         [24]  181 	lcall	__gptrput
      00005D 8A 82            [24]  182 	mov	dpl,r2
      00005F 8B 83            [24]  183 	mov	dph,r3
      000061 8F F0            [24]  184 	mov	b,r7
      000063 A8*00            [24]  185 	mov	r0,_bp
      000065 08               [12]  186 	inc	r0
      000066 E6               [12]  187 	mov	a,@r0
      000067 12r00r00         [24]  188 	lcall	__gptrput
                                    189 ;	sprintf.c:38: }
      00006A 85*00 81         [24]  190 	mov	sp,_bp
      00006D D0*00            [24]  191 	pop	_bp
      00006F 22               [24]  192 	ret
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'vsprintf'
                                    195 ;------------------------------------------------------------
                                    196 ;format                    Allocated with name '_vsprintf_PARM_2'
                                    197 ;ap                        Allocated with name '_vsprintf_PARM_3'
                                    198 ;buf                       Allocated with name '_vsprintf_buf_65536_16'
                                    199 ;i                         Allocated to registers r6 r7 
                                    200 ;------------------------------------------------------------
                                    201 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    202 ;	-----------------------------------------
                                    203 ;	 function vsprintf
                                    204 ;	-----------------------------------------
      000070                        205 _vsprintf:
      000070 85 82*04         [24]  206 	mov	_vsprintf_buf_65536_16,dpl
      000073 85 83*05         [24]  207 	mov	(_vsprintf_buf_65536_16 + 1),dph
      000076 85 F0*06         [24]  208 	mov	(_vsprintf_buf_65536_16 + 2),b
                                    209 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      000079 75*00r04         [24]  210 	mov	__print_format_PARM_2,#_vsprintf_buf_65536_16
      00007C 75*01 00         [24]  211 	mov	(__print_format_PARM_2 + 1),#0x00
      00007F 75*02 40         [24]  212 	mov	(__print_format_PARM_2 + 2),#0x40
      000082 85*00*00         [24]  213 	mov	__print_format_PARM_3,_vsprintf_PARM_2
      000085 85*01*01         [24]  214 	mov	(__print_format_PARM_3 + 1),(_vsprintf_PARM_2 + 1)
      000088 85*02*02         [24]  215 	mov	(__print_format_PARM_3 + 2),(_vsprintf_PARM_2 + 2)
      00008B 85*03*00         [24]  216 	mov	__print_format_PARM_4,_vsprintf_PARM_3
      00008E 90r00r00         [24]  217 	mov	dptr,#_put_char_to_string
      000091 12r00r00         [24]  218 	lcall	__print_format
      000094 AE 82            [24]  219 	mov	r6,dpl
      000096 AF 83            [24]  220 	mov	r7,dph
                                    221 ;	sprintf.c:45: *buf = 0;
      000098 AB*04            [24]  222 	mov	r3,_vsprintf_buf_65536_16
      00009A AC*05            [24]  223 	mov	r4,(_vsprintf_buf_65536_16 + 1)
      00009C AD*06            [24]  224 	mov	r5,(_vsprintf_buf_65536_16 + 2)
      00009E 8B 82            [24]  225 	mov	dpl,r3
      0000A0 8C 83            [24]  226 	mov	dph,r4
      0000A2 8D F0            [24]  227 	mov	b,r5
      0000A4 E4               [12]  228 	clr	a
      0000A5 12r00r00         [24]  229 	lcall	__gptrput
                                    230 ;	sprintf.c:46: return i;
      0000A8 8E 82            [24]  231 	mov	dpl,r6
      0000AA 8F 83            [24]  232 	mov	dph,r7
                                    233 ;	sprintf.c:47: }
      0000AC 22               [24]  234 	ret
                                    235 ;------------------------------------------------------------
                                    236 ;Allocation info for local variables in function 'sprintf'
                                    237 ;------------------------------------------------------------
                                    238 ;buf                       Allocated to stack - _bp -5
                                    239 ;format                    Allocated to stack - _bp -8
                                    240 ;arg                       Allocated to registers 
                                    241 ;i                         Allocated to registers r6 r7 
                                    242 ;------------------------------------------------------------
                                    243 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    244 ;	-----------------------------------------
                                    245 ;	 function sprintf
                                    246 ;	-----------------------------------------
      0000AD                        247 _sprintf:
      0000AD C0*00            [24]  248 	push	_bp
                                    249 ;	sprintf.c:55: va_start (arg, format);
      0000AF E5 81            [12]  250 	mov	a,sp
      0000B1 F5*00            [12]  251 	mov	_bp,a
      0000B3 24 F8            [12]  252 	add	a,#0xf8
      0000B5 FF               [12]  253 	mov	r7,a
      0000B6 8F*00            [24]  254 	mov	__print_format_PARM_4,r7
                                    255 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      0000B8 E5*00            [12]  256 	mov	a,_bp
      0000BA 24 FB            [12]  257 	add	a,#0xfb
      0000BC FF               [12]  258 	mov	r7,a
      0000BD 8F*00            [24]  259 	mov	__print_format_PARM_2,r7
      0000BF 75*01 00         [24]  260 	mov	(__print_format_PARM_2 + 1),#0x00
      0000C2 75*02 40         [24]  261 	mov	(__print_format_PARM_2 + 2),#0x40
      0000C5 E5*00            [12]  262 	mov	a,_bp
      0000C7 24 F8            [12]  263 	add	a,#0xf8
      0000C9 F8               [12]  264 	mov	r0,a
      0000CA 86*00            [24]  265 	mov	__print_format_PARM_3,@r0
      0000CC 08               [12]  266 	inc	r0
      0000CD 86*01            [24]  267 	mov	(__print_format_PARM_3 + 1),@r0
      0000CF 08               [12]  268 	inc	r0
      0000D0 86*02            [24]  269 	mov	(__print_format_PARM_3 + 2),@r0
      0000D2 90r00r00         [24]  270 	mov	dptr,#_put_char_to_string
      0000D5 12r00r00         [24]  271 	lcall	__print_format
      0000D8 AE 82            [24]  272 	mov	r6,dpl
      0000DA AF 83            [24]  273 	mov	r7,dph
                                    274 ;	sprintf.c:57: *buf = 0;
      0000DC E5*00            [12]  275 	mov	a,_bp
      0000DE 24 FB            [12]  276 	add	a,#0xfb
      0000E0 F8               [12]  277 	mov	r0,a
      0000E1 86 03            [24]  278 	mov	ar3,@r0
      0000E3 08               [12]  279 	inc	r0
      0000E4 86 04            [24]  280 	mov	ar4,@r0
      0000E6 08               [12]  281 	inc	r0
      0000E7 86 05            [24]  282 	mov	ar5,@r0
      0000E9 8B 82            [24]  283 	mov	dpl,r3
      0000EB 8C 83            [24]  284 	mov	dph,r4
      0000ED 8D F0            [24]  285 	mov	b,r5
      0000EF E4               [12]  286 	clr	a
      0000F0 12r00r00         [24]  287 	lcall	__gptrput
                                    288 ;	sprintf.c:60: return i;
      0000F3 8E 82            [24]  289 	mov	dpl,r6
      0000F5 8F 83            [24]  290 	mov	dph,r7
                                    291 ;	sprintf.c:61: }
      0000F7 D0*00            [24]  292 	pop	_bp
      0000F9 22               [24]  293 	ret
                                    294 	.area CSEG    (CODE)
                                    295 	.area CONST   (CODE)
                                    296 	.area XINIT   (CODE)
                                    297 	.area CABS    (ABS,CODE)
