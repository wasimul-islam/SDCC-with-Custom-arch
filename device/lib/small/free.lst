                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module free
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _free
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 	.area	OSEG    (OVR,DATA)
      000000                         35 _free_prev_free_65536_41:
      000000                         36 	.ds 2
      000002                         37 _free_sloc0_1_0:
      000002                         38 	.ds 2
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; uninitialized external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; initialized external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function 'free'
                                     96 ;------------------------------------------------------------
                                     97 ;ptr                       Allocated to registers r5 r6 r7 
                                     98 ;h                         Allocated to registers r5 r6 
                                     99 ;next_free                 Allocated to registers r1 r2 
                                    100 ;prev_free                 Allocated with name '_free_prev_free_65536_41'
                                    101 ;f                         Allocated with name '_free_sloc0_1_0'
                                    102 ;sloc0                     Allocated with name '_free_sloc0_1_0'
                                    103 ;------------------------------------------------------------
                                    104 ;	free.c:50: void free(void *ptr)
                                    105 ;	-----------------------------------------
                                    106 ;	 function free
                                    107 ;	-----------------------------------------
      000000                        108 _free:
                           000007   109 	ar7 = 0x07
                           000006   110 	ar6 = 0x06
                           000005   111 	ar5 = 0x05
                           000004   112 	ar4 = 0x04
                           000003   113 	ar3 = 0x03
                           000002   114 	ar2 = 0x02
                           000001   115 	ar1 = 0x01
                           000000   116 	ar0 = 0x00
      000000 AD 82            [24]  117 	mov	r5,dpl
      000002 AE 83            [24]  118 	mov	r6,dph
                                    119 ;	free.c:55: if(!ptr)
      000004 ED               [12]  120 	mov	a,r5
      000005 4E               [12]  121 	orl	a,r6
      000006 70 01            [24]  122 	jnz	00102$
                                    123 ;	free.c:56: return;
      000008 22               [24]  124 	ret
      000009                        125 00102$:
                                    126 ;	free.c:58: prev_free = 0;
      000009 E4               [12]  127 	clr	a
      00000A F5*00            [12]  128 	mov	_free_prev_free_65536_41,a
      00000C F5*01            [12]  129 	mov	(_free_prev_free_65536_41 + 1),a
                                    130 ;	free.c:59: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h && h < ptr; prev_free = h, f = &(h->next_free), h = h->next_free); // Find adjacent blocks in free list
      00000E 90r00r00         [24]  131 	mov	dptr,#___sdcc_heap_free
      000011 E0               [24]  132 	movx	a,@dptr
      000012 F9               [12]  133 	mov	r1,a
      000013 A3               [24]  134 	inc	dptr
      000014 E0               [24]  135 	movx	a,@dptr
      000015 FA               [12]  136 	mov	r2,a
      000016 75*02r00         [24]  137 	mov	_free_sloc0_1_0,#___sdcc_heap_free
      000019 75*03s00         [24]  138 	mov	(_free_sloc0_1_0 + 1),#(___sdcc_heap_free >> 8)
      00001C                        139 00111$:
      00001C E9               [12]  140 	mov	a,r1
      00001D 4A               [12]  141 	orl	a,r2
      00001E 60 25            [24]  142 	jz	00103$
      000020 8D 00            [24]  143 	mov	ar0,r5
      000022 8E 04            [24]  144 	mov	ar4,r6
      000024 C3               [12]  145 	clr	c
      000025 E9               [12]  146 	mov	a,r1
      000026 98               [12]  147 	subb	a,r0
      000027 EA               [12]  148 	mov	a,r2
      000028 9C               [12]  149 	subb	a,r4
      000029 50 1A            [24]  150 	jnc	00103$
      00002B 89*00            [24]  151 	mov	_free_prev_free_65536_41,r1
      00002D 8A*01            [24]  152 	mov	(_free_prev_free_65536_41 + 1),r2
      00002F 74 02            [12]  153 	mov	a,#0x02
      000031 29               [12]  154 	add	a,r1
      000032 FB               [12]  155 	mov	r3,a
      000033 E4               [12]  156 	clr	a
      000034 3A               [12]  157 	addc	a,r2
      000035 FC               [12]  158 	mov	r4,a
      000036 8B*02            [24]  159 	mov	_free_sloc0_1_0,r3
      000038 8C*03            [24]  160 	mov	(_free_sloc0_1_0 + 1),r4
      00003A 8B 82            [24]  161 	mov	dpl,r3
      00003C 8C 83            [24]  162 	mov	dph,r4
      00003E E0               [24]  163 	movx	a,@dptr
      00003F F9               [12]  164 	mov	r1,a
      000040 A3               [24]  165 	inc	dptr
      000041 E0               [24]  166 	movx	a,@dptr
      000042 FA               [12]  167 	mov	r2,a
      000043 80 D7            [24]  168 	sjmp	00111$
      000045                        169 00103$:
                                    170 ;	free.c:60: next_free = h;
                                    171 ;	free.c:62: h = (void HEAPSPACE *)((char HEAPSPACE *)(ptr) - offsetof(struct header, next_free));
      000045 ED               [12]  172 	mov	a,r5
      000046 24 FE            [12]  173 	add	a,#0xfe
      000048 FD               [12]  174 	mov	r5,a
      000049 EE               [12]  175 	mov	a,r6
      00004A 34 FF            [12]  176 	addc	a,#0xff
      00004C FE               [12]  177 	mov	r6,a
                                    178 ;	free.c:65: h->next_free = next_free;
      00004D 74 02            [12]  179 	mov	a,#0x02
      00004F 2D               [12]  180 	add	a,r5
      000050 FC               [12]  181 	mov	r4,a
      000051 E4               [12]  182 	clr	a
      000052 3E               [12]  183 	addc	a,r6
      000053 FF               [12]  184 	mov	r7,a
      000054 8C 82            [24]  185 	mov	dpl,r4
      000056 8F 83            [24]  186 	mov	dph,r7
      000058 E9               [12]  187 	mov	a,r1
      000059 F0               [24]  188 	movx	@dptr,a
      00005A EA               [12]  189 	mov	a,r2
      00005B A3               [24]  190 	inc	dptr
      00005C F0               [24]  191 	movx	@dptr,a
                                    192 ;	free.c:66: *f = h;
      00005D 85*02 82         [24]  193 	mov	dpl,_free_sloc0_1_0
      000060 85*03 83         [24]  194 	mov	dph,(_free_sloc0_1_0 + 1)
      000063 ED               [12]  195 	mov	a,r5
      000064 F0               [24]  196 	movx	@dptr,a
      000065 EE               [12]  197 	mov	a,r6
      000066 A3               [24]  198 	inc	dptr
      000067 F0               [24]  199 	movx	@dptr,a
                                    200 ;	free.c:68: if(next_free == h->next) // Merge with next block
      000068 8D 82            [24]  201 	mov	dpl,r5
      00006A 8E 83            [24]  202 	mov	dph,r6
      00006C E0               [24]  203 	movx	a,@dptr
      00006D F8               [12]  204 	mov	r0,a
      00006E A3               [24]  205 	inc	dptr
      00006F E0               [24]  206 	movx	a,@dptr
      000070 FB               [12]  207 	mov	r3,a
      000071 E9               [12]  208 	mov	a,r1
      000072 B5 00 33         [24]  209 	cjne	a,ar0,00105$
      000075 EA               [12]  210 	mov	a,r2
      000076 B5 03 2F         [24]  211 	cjne	a,ar3,00105$
                                    212 ;	free.c:70: h->next_free = h->next->next_free;
      000079 88 82            [24]  213 	mov	dpl,r0
      00007B 8B 83            [24]  214 	mov	dph,r3
      00007D A3               [24]  215 	inc	dptr
      00007E A3               [24]  216 	inc	dptr
      00007F E0               [24]  217 	movx	a,@dptr
      000080 FA               [12]  218 	mov	r2,a
      000081 A3               [24]  219 	inc	dptr
      000082 E0               [24]  220 	movx	a,@dptr
      000083 FB               [12]  221 	mov	r3,a
      000084 8C 82            [24]  222 	mov	dpl,r4
      000086 8F 83            [24]  223 	mov	dph,r7
      000088 EA               [12]  224 	mov	a,r2
      000089 F0               [24]  225 	movx	@dptr,a
      00008A EB               [12]  226 	mov	a,r3
      00008B A3               [24]  227 	inc	dptr
      00008C F0               [24]  228 	movx	@dptr,a
                                    229 ;	free.c:71: h->next = h->next->next;
      00008D 8D 82            [24]  230 	mov	dpl,r5
      00008F 8E 83            [24]  231 	mov	dph,r6
      000091 E0               [24]  232 	movx	a,@dptr
      000092 FA               [12]  233 	mov	r2,a
      000093 A3               [24]  234 	inc	dptr
      000094 E0               [24]  235 	movx	a,@dptr
      000095 FB               [12]  236 	mov	r3,a
      000096 8A 82            [24]  237 	mov	dpl,r2
      000098 8B 83            [24]  238 	mov	dph,r3
      00009A E0               [24]  239 	movx	a,@dptr
      00009B FA               [12]  240 	mov	r2,a
      00009C A3               [24]  241 	inc	dptr
      00009D E0               [24]  242 	movx	a,@dptr
      00009E FB               [12]  243 	mov	r3,a
      00009F 8D 82            [24]  244 	mov	dpl,r5
      0000A1 8E 83            [24]  245 	mov	dph,r6
      0000A3 EA               [12]  246 	mov	a,r2
      0000A4 F0               [24]  247 	movx	@dptr,a
      0000A5 EB               [12]  248 	mov	a,r3
      0000A6 A3               [24]  249 	inc	dptr
      0000A7 F0               [24]  250 	movx	@dptr,a
      0000A8                        251 00105$:
                                    252 ;	free.c:74: if (prev_free && prev_free->next == h) // Merge with previous block
      0000A8 E5*00            [12]  253 	mov	a,_free_prev_free_65536_41
      0000AA 45*01            [12]  254 	orl	a,(_free_prev_free_65536_41 + 1)
      0000AC 60 42            [24]  255 	jz	00113$
      0000AE 85*00 82         [24]  256 	mov	dpl,_free_prev_free_65536_41
      0000B1 85*01 83         [24]  257 	mov	dph,(_free_prev_free_65536_41 + 1)
      0000B4 E0               [24]  258 	movx	a,@dptr
      0000B5 FA               [12]  259 	mov	r2,a
      0000B6 A3               [24]  260 	inc	dptr
      0000B7 E0               [24]  261 	movx	a,@dptr
      0000B8 FB               [12]  262 	mov	r3,a
      0000B9 EA               [12]  263 	mov	a,r2
      0000BA B5 05 33         [24]  264 	cjne	a,ar5,00113$
      0000BD EB               [12]  265 	mov	a,r3
      0000BE B5 06 2F         [24]  266 	cjne	a,ar6,00113$
                                    267 ;	free.c:76: prev_free->next = h->next;
      0000C1 8D 82            [24]  268 	mov	dpl,r5
      0000C3 8E 83            [24]  269 	mov	dph,r6
      0000C5 E0               [24]  270 	movx	a,@dptr
      0000C6 FD               [12]  271 	mov	r5,a
      0000C7 A3               [24]  272 	inc	dptr
      0000C8 E0               [24]  273 	movx	a,@dptr
      0000C9 FE               [12]  274 	mov	r6,a
      0000CA 85*00 82         [24]  275 	mov	dpl,_free_prev_free_65536_41
      0000CD 85*01 83         [24]  276 	mov	dph,(_free_prev_free_65536_41 + 1)
      0000D0 ED               [12]  277 	mov	a,r5
      0000D1 F0               [24]  278 	movx	@dptr,a
      0000D2 EE               [12]  279 	mov	a,r6
      0000D3 A3               [24]  280 	inc	dptr
      0000D4 F0               [24]  281 	movx	@dptr,a
                                    282 ;	free.c:77: prev_free->next_free = h->next_free;
      0000D5 74 02            [12]  283 	mov	a,#0x02
      0000D7 25*00            [12]  284 	add	a,_free_prev_free_65536_41
      0000D9 FD               [12]  285 	mov	r5,a
      0000DA E4               [12]  286 	clr	a
      0000DB 35*01            [12]  287 	addc	a,(_free_prev_free_65536_41 + 1)
      0000DD FE               [12]  288 	mov	r6,a
      0000DE 8C 82            [24]  289 	mov	dpl,r4
      0000E0 8F 83            [24]  290 	mov	dph,r7
      0000E2 E0               [24]  291 	movx	a,@dptr
      0000E3 FC               [12]  292 	mov	r4,a
      0000E4 A3               [24]  293 	inc	dptr
      0000E5 E0               [24]  294 	movx	a,@dptr
      0000E6 FF               [12]  295 	mov	r7,a
      0000E7 8D 82            [24]  296 	mov	dpl,r5
      0000E9 8E 83            [24]  297 	mov	dph,r6
      0000EB EC               [12]  298 	mov	a,r4
      0000EC F0               [24]  299 	movx	@dptr,a
      0000ED EF               [12]  300 	mov	a,r7
      0000EE A3               [24]  301 	inc	dptr
      0000EF F0               [24]  302 	movx	@dptr,a
      0000F0                        303 00113$:
                                    304 ;	free.c:79: }
      0000F0 22               [24]  305 	ret
                                    306 	.area CSEG    (CODE)
                                    307 	.area CONST   (CODE)
                                    308 	.area XINIT   (CODE)
                                    309 	.area CABS    (ABS,CODE)
