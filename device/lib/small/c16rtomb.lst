                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16rtomb
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wctomb
                                     12 	.globl _c16rtomb_PARM_3
                                     13 	.globl _c16rtomb_PARM_2
                                     14 	.globl _c16rtomb
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _c16rtomb_sps_65536_46:
      000000                         35 	.ds 3
      000003                         36 _c16rtomb_PARM_2:
      000003                         37 	.ds 2
      000005                         38 _c16rtomb_PARM_3:
      000005                         39 	.ds 3
      000008                         40 _c16rtomb_s_65536_45:
      000008                         41 	.ds 3
      00000B                         42 _c16rtomb_buf_65536_46:
      00000B                         43 	.ds 4
      00000F                         44 _c16rtomb_high_surrogate_131072_48:
      00000F                         45 	.ds 2
      000011                         46 _c16rtomb_sloc0_1_0:
      000011                         47 	.ds 3
      000014                         48 _c16rtomb_sloc1_1_0:
      000014                         49 	.ds 3
      000017                         50 _c16rtomb_sloc2_1_0:
      000017                         51 	.ds 3
      00001A                         52 _c16rtomb_sloc3_1_0:
      00001A                         53 	.ds 2
      00001C                         54 _c16rtomb_sloc4_1_0:
      00001C                         55 	.ds 2
      00001E                         56 _c16rtomb_sloc5_1_0:
      00001E                         57 	.ds 4
                                     58 ;--------------------------------------------------------
                                     59 ; overlayable items in internal ram
                                     60 ;--------------------------------------------------------
                                     61 ;--------------------------------------------------------
                                     62 ; indirectly addressable internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area ISEG    (DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; absolute internal ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area IABS    (ABS,DATA)
                                     69 	.area IABS    (ABS,DATA)
                                     70 ;--------------------------------------------------------
                                     71 ; bit data
                                     72 ;--------------------------------------------------------
                                     73 	.area BSEG    (BIT)
                                     74 ;--------------------------------------------------------
                                     75 ; paged external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area PSEG    (PAG,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; uninitialized external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XSEG    (XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; absolute external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XABS    (ABS,XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; initialized external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XISEG   (XDATA)
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT0 (CODE)
                                     92 	.area GSINIT1 (CODE)
                                     93 	.area GSINIT2 (CODE)
                                     94 	.area GSINIT3 (CODE)
                                     95 	.area GSINIT4 (CODE)
                                     96 	.area GSINIT5 (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 	.area GSFINAL (CODE)
                                     99 	.area CSEG    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; global & static initialisations
                                    102 ;--------------------------------------------------------
                                    103 	.area HOME    (CODE)
                                    104 	.area GSINIT  (CODE)
                                    105 	.area GSFINAL (CODE)
                                    106 	.area GSINIT  (CODE)
                                    107 ;--------------------------------------------------------
                                    108 ; Home
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME    (CODE)
                                    111 	.area HOME    (CODE)
                                    112 ;--------------------------------------------------------
                                    113 ; code
                                    114 ;--------------------------------------------------------
                                    115 	.area CSEG    (CODE)
                                    116 ;------------------------------------------------------------
                                    117 ;Allocation info for local variables in function 'c16rtomb'
                                    118 ;------------------------------------------------------------
                                    119 ;sps                       Allocated with name '_c16rtomb_sps_65536_46'
                                    120 ;c16                       Allocated with name '_c16rtomb_PARM_2'
                                    121 ;ps                        Allocated with name '_c16rtomb_PARM_3'
                                    122 ;s                         Allocated with name '_c16rtomb_s_65536_45'
                                    123 ;codepoint                 Allocated to registers r4 r5 r6 r7 
                                    124 ;buf                       Allocated with name '_c16rtomb_buf_65536_46'
                                    125 ;high_surrogate            Allocated with name '_c16rtomb_high_surrogate_131072_48'
                                    126 ;sloc0                     Allocated with name '_c16rtomb_sloc0_1_0'
                                    127 ;sloc1                     Allocated with name '_c16rtomb_sloc1_1_0'
                                    128 ;sloc2                     Allocated with name '_c16rtomb_sloc2_1_0'
                                    129 ;sloc3                     Allocated with name '_c16rtomb_sloc3_1_0'
                                    130 ;sloc4                     Allocated with name '_c16rtomb_sloc4_1_0'
                                    131 ;sloc5                     Allocated with name '_c16rtomb_sloc5_1_0'
                                    132 ;------------------------------------------------------------
                                    133 ;	c16rtomb.c:35: size_t c16rtomb(char *restrict s, char16_t c16, mbstate_t *restrict ps)
                                    134 ;	-----------------------------------------
                                    135 ;	 function c16rtomb
                                    136 ;	-----------------------------------------
      000000                        137 _c16rtomb:
                           000007   138 	ar7 = 0x07
                           000006   139 	ar6 = 0x06
                           000005   140 	ar5 = 0x05
                           000004   141 	ar4 = 0x04
                           000003   142 	ar3 = 0x03
                           000002   143 	ar2 = 0x02
                           000001   144 	ar1 = 0x01
                           000000   145 	ar0 = 0x00
      000000 85 82*08         [24]  146 	mov	_c16rtomb_s_65536_45,dpl
      000003 85 83*09         [24]  147 	mov	(_c16rtomb_s_65536_45 + 1),dph
      000006 85 F0*0A         [24]  148 	mov	(_c16rtomb_s_65536_45 + 2),b
                                    149 ;	c16rtomb.c:41: if(!s)
      000009 E5*08            [12]  150 	mov	a,_c16rtomb_s_65536_45
      00000B 45*09            [12]  151 	orl	a,(_c16rtomb_s_65536_45 + 1)
                                    152 ;	c16rtomb.c:42: s = buf;
      00000D 70 08            [24]  153 	jnz	00102$
      00000F 75*08r0B         [24]  154 	mov	_c16rtomb_s_65536_45,#_c16rtomb_buf_65536_46
      000012 F5*09            [12]  155 	mov	(_c16rtomb_s_65536_45 + 1),a
      000014 75*0A 40         [24]  156 	mov	(_c16rtomb_s_65536_45 + 2),#0x40
      000017                        157 00102$:
                                    158 ;	c16rtomb.c:44: if(!ps)
      000017 E5*05            [12]  159 	mov	a,_c16rtomb_PARM_3
      000019 45*06            [12]  160 	orl	a,(_c16rtomb_PARM_3 + 1)
                                    161 ;	c16rtomb.c:45: ps = &sps;
      00001B 70 08            [24]  162 	jnz	00104$
      00001D 75*05r00         [24]  163 	mov	_c16rtomb_PARM_3,#_c16rtomb_sps_65536_46
      000020 F5*06            [12]  164 	mov	(_c16rtomb_PARM_3 + 1),a
      000022 75*07 40         [24]  165 	mov	(_c16rtomb_PARM_3 + 2),#0x40
      000025                        166 00104$:
                                    167 ;	c16rtomb.c:47: if (!c16) // 0 always resets conversion state.
      000025 E5*03            [12]  168 	mov	a,_c16rtomb_PARM_2
      000027 45*04            [12]  169 	orl	a,(_c16rtomb_PARM_2 + 1)
      000029 70 30            [24]  170 	jnz	00119$
                                    171 ;	c16rtomb.c:49: ps->c[1] = ps->c[2] = 0;
      00002B AA*05            [24]  172 	mov	r2,_c16rtomb_PARM_3
      00002D AB*06            [24]  173 	mov	r3,(_c16rtomb_PARM_3 + 1)
      00002F AC*07            [24]  174 	mov	r4,(_c16rtomb_PARM_3 + 2)
      000031 74 01            [12]  175 	mov	a,#0x01
      000033 2A               [12]  176 	add	a,r2
      000034 F8               [12]  177 	mov	r0,a
      000035 E4               [12]  178 	clr	a
      000036 3B               [12]  179 	addc	a,r3
      000037 F9               [12]  180 	mov	r1,a
      000038 8C 07            [24]  181 	mov	ar7,r4
      00003A 74 02            [12]  182 	mov	a,#0x02
      00003C 2A               [12]  183 	add	a,r2
      00003D FA               [12]  184 	mov	r2,a
      00003E E4               [12]  185 	clr	a
      00003F 3B               [12]  186 	addc	a,r3
      000040 FB               [12]  187 	mov	r3,a
      000041 8A 82            [24]  188 	mov	dpl,r2
      000043 8B 83            [24]  189 	mov	dph,r3
      000045 8C F0            [24]  190 	mov	b,r4
      000047 E4               [12]  191 	clr	a
      000048 12r00r00         [24]  192 	lcall	__gptrput
      00004B 88 82            [24]  193 	mov	dpl,r0
      00004D 89 83            [24]  194 	mov	dph,r1
      00004F 8F F0            [24]  195 	mov	b,r7
      000051 12r00r00         [24]  196 	lcall	__gptrput
                                    197 ;	c16rtomb.c:50: codepoint = 0;
      000054 FC               [12]  198 	mov	r4,a
      000055 FD               [12]  199 	mov	r5,a
      000056 FE               [12]  200 	mov	r6,a
      000057 FF               [12]  201 	mov	r7,a
      000058 02r01r8B         [24]  202 	ljmp	00120$
      00005B                        203 00119$:
                                    204 ;	c16rtomb.c:52: else if(ps->c[1] || ps->c[2]) // We already have the high surrogate. Now get the low surrogate
      00005B A9*05            [24]  205 	mov	r1,_c16rtomb_PARM_3
      00005D AA*06            [24]  206 	mov	r2,(_c16rtomb_PARM_3 + 1)
      00005F AB*07            [24]  207 	mov	r3,(_c16rtomb_PARM_3 + 2)
      000061 74 01            [12]  208 	mov	a,#0x01
      000063 29               [12]  209 	add	a,r1
      000064 F5*11            [12]  210 	mov	_c16rtomb_sloc0_1_0,a
      000066 E4               [12]  211 	clr	a
      000067 3A               [12]  212 	addc	a,r2
      000068 F5*12            [12]  213 	mov	(_c16rtomb_sloc0_1_0 + 1),a
      00006A 8B*13            [24]  214 	mov	(_c16rtomb_sloc0_1_0 + 2),r3
      00006C 85*11 82         [24]  215 	mov	dpl,_c16rtomb_sloc0_1_0
      00006F 85*12 83         [24]  216 	mov	dph,(_c16rtomb_sloc0_1_0 + 1)
      000072 85*13 F0         [24]  217 	mov	b,(_c16rtomb_sloc0_1_0 + 2)
      000075 12r00r00         [24]  218 	lcall	__gptrget
      000078 70 15            [24]  219 	jnz	00114$
      00007A 74 02            [12]  220 	mov	a,#0x02
      00007C 29               [12]  221 	add	a,r1
      00007D F9               [12]  222 	mov	r1,a
      00007E E4               [12]  223 	clr	a
      00007F 3A               [12]  224 	addc	a,r2
      000080 FA               [12]  225 	mov	r2,a
      000081 89 82            [24]  226 	mov	dpl,r1
      000083 8A 83            [24]  227 	mov	dph,r2
      000085 8B F0            [24]  228 	mov	b,r3
      000087 12r00r00         [24]  229 	lcall	__gptrget
      00008A 70 03            [24]  230 	jnz	00160$
      00008C 02r01r46         [24]  231 	ljmp	00115$
      00008F                        232 00160$:
      00008F                        233 00114$:
                                    234 ;	c16rtomb.c:56: if(c16 < 0xdc00 || c16 > 0xdfff)
      00008F 74 24            [12]  235 	mov	a,#0x100 - 0xdc
      000091 25*04            [12]  236 	add	a,(_c16rtomb_PARM_2 + 1)
      000093 40 03            [24]  237 	jc	00161$
      000095 02r01r9F         [24]  238 	ljmp	00121$
      000098                        239 00161$:
      000098 C3               [12]  240 	clr	c
      000099 74 FF            [12]  241 	mov	a,#0xff
      00009B 95*03            [12]  242 	subb	a,_c16rtomb_PARM_2
      00009D 74 DF            [12]  243 	mov	a,#0xdf
      00009F 95*04            [12]  244 	subb	a,(_c16rtomb_PARM_2 + 1)
      0000A1 50 03            [24]  245 	jnc	00162$
      0000A3 02r01r9F         [24]  246 	ljmp	00121$
      0000A6                        247 00162$:
                                    248 ;	c16rtomb.c:59: high_surrogate = ps->c[1] + (ps->c[2] << 8);
      0000A6 85*05*14         [24]  249 	mov	_c16rtomb_sloc1_1_0,_c16rtomb_PARM_3
      0000A9 85*06*15         [24]  250 	mov	(_c16rtomb_sloc1_1_0 + 1),(_c16rtomb_PARM_3 + 1)
      0000AC 85*07*16         [24]  251 	mov	(_c16rtomb_sloc1_1_0 + 2),(_c16rtomb_PARM_3 + 2)
      0000AF 74 01            [12]  252 	mov	a,#0x01
      0000B1 25*14            [12]  253 	add	a,_c16rtomb_sloc1_1_0
      0000B3 F5*17            [12]  254 	mov	_c16rtomb_sloc2_1_0,a
      0000B5 E4               [12]  255 	clr	a
      0000B6 35*15            [12]  256 	addc	a,(_c16rtomb_sloc1_1_0 + 1)
      0000B8 F5*18            [12]  257 	mov	(_c16rtomb_sloc2_1_0 + 1),a
      0000BA 85*16*19         [24]  258 	mov	(_c16rtomb_sloc2_1_0 + 2),(_c16rtomb_sloc1_1_0 + 2)
      0000BD 85*17 82         [24]  259 	mov	dpl,_c16rtomb_sloc2_1_0
      0000C0 85*18 83         [24]  260 	mov	dph,(_c16rtomb_sloc2_1_0 + 1)
      0000C3 85*19 F0         [24]  261 	mov	b,(_c16rtomb_sloc2_1_0 + 2)
      0000C6 12r00r00         [24]  262 	lcall	__gptrget
      0000C9 F8               [12]  263 	mov	r0,a
      0000CA 88*1A            [24]  264 	mov	_c16rtomb_sloc3_1_0,r0
      0000CC 75*1B 00         [24]  265 	mov	(_c16rtomb_sloc3_1_0 + 1),#0x00
      0000CF 74 02            [12]  266 	mov	a,#0x02
      0000D1 25*14            [12]  267 	add	a,_c16rtomb_sloc1_1_0
      0000D3 F5*14            [12]  268 	mov	_c16rtomb_sloc1_1_0,a
      0000D5 E4               [12]  269 	clr	a
      0000D6 35*15            [12]  270 	addc	a,(_c16rtomb_sloc1_1_0 + 1)
      0000D8 F5*15            [12]  271 	mov	(_c16rtomb_sloc1_1_0 + 1),a
      0000DA 85*14 82         [24]  272 	mov	dpl,_c16rtomb_sloc1_1_0
      0000DD 85*15 83         [24]  273 	mov	dph,(_c16rtomb_sloc1_1_0 + 1)
      0000E0 85*16 F0         [24]  274 	mov	b,(_c16rtomb_sloc1_1_0 + 2)
      0000E3 12r00r00         [24]  275 	lcall	__gptrget
      0000E6 F8               [12]  276 	mov	r0,a
      0000E7 88*1C            [24]  277 	mov	_c16rtomb_sloc4_1_0,r0
      0000E9 85*1C*1D         [24]  278 	mov	(_c16rtomb_sloc4_1_0 + 1),_c16rtomb_sloc4_1_0
      0000EC E4               [12]  279 	clr	a
      0000ED F5*1C            [12]  280 	mov	_c16rtomb_sloc4_1_0,a
      0000EF 25*1A            [12]  281 	add	a,_c16rtomb_sloc3_1_0
      0000F1 F5*0F            [12]  282 	mov	_c16rtomb_high_surrogate_131072_48,a
      0000F3 E5*1D            [12]  283 	mov	a,(_c16rtomb_sloc4_1_0 + 1)
      0000F5 35*1B            [12]  284 	addc	a,(_c16rtomb_sloc3_1_0 + 1)
      0000F7 F5*10            [12]  285 	mov	(_c16rtomb_high_surrogate_131072_48 + 1),a
                                    286 ;	c16rtomb.c:60: ps->c[1] = ps->c[2] = 0;
      0000F9 85*14 82         [24]  287 	mov	dpl,_c16rtomb_sloc1_1_0
      0000FC 85*15 83         [24]  288 	mov	dph,(_c16rtomb_sloc1_1_0 + 1)
      0000FF 85*16 F0         [24]  289 	mov	b,(_c16rtomb_sloc1_1_0 + 2)
      000102 E4               [12]  290 	clr	a
      000103 12r00r00         [24]  291 	lcall	__gptrput
      000106 85*17 82         [24]  292 	mov	dpl,_c16rtomb_sloc2_1_0
      000109 85*18 83         [24]  293 	mov	dph,(_c16rtomb_sloc2_1_0 + 1)
      00010C 85*19 F0         [24]  294 	mov	b,(_c16rtomb_sloc2_1_0 + 2)
      00010F 12r00r00         [24]  295 	lcall	__gptrput
                                    296 ;	c16rtomb.c:61: codepoint = (high_surrogate << 10) - (0xd800 << 10) + c16 - 0xdc00 + 0x10000;
      000112 E5*0F            [12]  297 	mov	a,_c16rtomb_high_surrogate_131072_48
      000114 25*0F            [12]  298 	add	a,_c16rtomb_high_surrogate_131072_48
      000116 25 E0            [12]  299 	add	a,acc
      000118 F5*1D            [12]  300 	mov	(_c16rtomb_sloc4_1_0 + 1),a
      00011A 75*1C 00         [24]  301 	mov	_c16rtomb_sloc4_1_0,#0x00
      00011D E5*03            [12]  302 	mov	a,_c16rtomb_PARM_2
      00011F 25*1C            [12]  303 	add	a,_c16rtomb_sloc4_1_0
      000121 F5*1C            [12]  304 	mov	_c16rtomb_sloc4_1_0,a
      000123 E5*04            [12]  305 	mov	a,(_c16rtomb_PARM_2 + 1)
      000125 35*1D            [12]  306 	addc	a,(_c16rtomb_sloc4_1_0 + 1)
      000127 F5*1D            [12]  307 	mov	(_c16rtomb_sloc4_1_0 + 1),a
      000129 85*1C*1E         [24]  308 	mov	_c16rtomb_sloc5_1_0,_c16rtomb_sloc4_1_0
      00012C 85*1D*1F         [24]  309 	mov	(_c16rtomb_sloc5_1_0 + 1),(_c16rtomb_sloc4_1_0 + 1)
      00012F 75*20 00         [24]  310 	mov	(_c16rtomb_sloc5_1_0 + 2),#0x00
      000132 75*21 00         [24]  311 	mov	(_c16rtomb_sloc5_1_0 + 3),#0x00
      000135 AC*1E            [24]  312 	mov	r4,_c16rtomb_sloc5_1_0
      000137 74 24            [12]  313 	mov	a,#0x24
      000139 25*1F            [12]  314 	add	a,(_c16rtomb_sloc5_1_0 + 1)
      00013B FD               [12]  315 	mov	r5,a
      00013C E4               [12]  316 	clr	a
      00013D 35*20            [12]  317 	addc	a,(_c16rtomb_sloc5_1_0 + 2)
      00013F FE               [12]  318 	mov	r6,a
      000140 E4               [12]  319 	clr	a
      000141 35*21            [12]  320 	addc	a,(_c16rtomb_sloc5_1_0 + 3)
      000143 FF               [12]  321 	mov	r7,a
      000144 80 45            [24]  322 	sjmp	00120$
      000146                        323 00115$:
                                    324 ;	c16rtomb.c:63: else if(c16 < 0xd7ff || c16 >= 0xe000) // Basic multilingual plane.
      000146 C3               [12]  325 	clr	c
      000147 E5*03            [12]  326 	mov	a,_c16rtomb_PARM_2
      000149 94 FF            [12]  327 	subb	a,#0xff
      00014B E5*04            [12]  328 	mov	a,(_c16rtomb_PARM_2 + 1)
      00014D 94 D7            [12]  329 	subb	a,#0xd7
      00014F 40 06            [24]  330 	jc	00110$
      000151 74 20            [12]  331 	mov	a,#0x100 - 0xe0
      000153 25*04            [12]  332 	add	a,(_c16rtomb_PARM_2 + 1)
      000155 50 0A            [24]  333 	jnc	00111$
      000157                        334 00110$:
                                    335 ;	c16rtomb.c:64: codepoint = c16;
      000157 AC*03            [24]  336 	mov	r4,_c16rtomb_PARM_2
      000159 AD*04            [24]  337 	mov	r5,(_c16rtomb_PARM_2 + 1)
      00015B 7E 00            [12]  338 	mov	r6,#0x00
      00015D 7F 00            [12]  339 	mov	r7,#0x00
      00015F 80 2A            [24]  340 	sjmp	00120$
      000161                        341 00111$:
                                    342 ;	c16rtomb.c:67: if(c16 > 0xdbff)
      000161 C3               [12]  343 	clr	c
      000162 74 FF            [12]  344 	mov	a,#0xff
      000164 95*03            [12]  345 	subb	a,_c16rtomb_PARM_2
      000166 74 DB            [12]  346 	mov	a,#0xdb
      000168 95*04            [12]  347 	subb	a,(_c16rtomb_PARM_2 + 1)
      00016A 40 33            [24]  348 	jc	00121$
                                    349 ;	c16rtomb.c:70: ps->c[1] = c16 & 0xff;
      00016C A8*03            [24]  350 	mov	r0,_c16rtomb_PARM_2
      00016E 85*11 82         [24]  351 	mov	dpl,_c16rtomb_sloc0_1_0
      000171 85*12 83         [24]  352 	mov	dph,(_c16rtomb_sloc0_1_0 + 1)
      000174 85*13 F0         [24]  353 	mov	b,(_c16rtomb_sloc0_1_0 + 2)
      000177 E8               [12]  354 	mov	a,r0
      000178 12r00r00         [24]  355 	lcall	__gptrput
                                    356 ;	c16rtomb.c:71: ps->c[2] = c16 >> 8;
      00017B A8*04            [24]  357 	mov	r0,(_c16rtomb_PARM_2 + 1)
      00017D 89 82            [24]  358 	mov	dpl,r1
      00017F 8A 83            [24]  359 	mov	dph,r2
      000181 8B F0            [24]  360 	mov	b,r3
      000183 E8               [12]  361 	mov	a,r0
      000184 12r00r00         [24]  362 	lcall	__gptrput
                                    363 ;	c16rtomb.c:72: return(0);
      000187 90 00 00         [24]  364 	mov	dptr,#0x0000
      00018A 22               [24]  365 	ret
      00018B                        366 00120$:
                                    367 ;	c16rtomb.c:75: return(wctomb(s, codepoint));
      00018B 8C*00            [24]  368 	mov	_wctomb_PARM_2,r4
      00018D 8D*01            [24]  369 	mov	(_wctomb_PARM_2 + 1),r5
      00018F 8E*02            [24]  370 	mov	(_wctomb_PARM_2 + 2),r6
      000191 8F*03            [24]  371 	mov	(_wctomb_PARM_2 + 3),r7
      000193 85*08 82         [24]  372 	mov	dpl,_c16rtomb_s_65536_45
      000196 85*09 83         [24]  373 	mov	dph,(_c16rtomb_s_65536_45 + 1)
      000199 85*0A F0         [24]  374 	mov	b,(_c16rtomb_s_65536_45 + 2)
                                    375 ;	c16rtomb.c:77: eilseq:
      00019C 02r00r00         [24]  376 	ljmp	_wctomb
      00019F                        377 00121$:
                                    378 ;	c16rtomb.c:78: errno = EILSEQ;
      00019F 75*00 54         [24]  379 	mov	_errno,#0x54
      0001A2 75*01 00         [24]  380 	mov	(_errno + 1),#0x00
                                    381 ;	c16rtomb.c:79: return(-1);
      0001A5 90 FF FF         [24]  382 	mov	dptr,#0xffff
                                    383 ;	c16rtomb.c:80: }
      0001A8 22               [24]  384 	ret
                                    385 	.area CSEG    (CODE)
                                    386 	.area CONST   (CODE)
                                    387 	.area XINIT   (CODE)
                                    388 	.area CABS    (ABS,CODE)
