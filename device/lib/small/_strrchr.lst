                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strrchr
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strrchr_PARM_2
                                     12 	.globl _strrchr
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (OVR,DATA)
      000000                         36 _strrchr_PARM_2:
      000000                         37 	.ds 1
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; uninitialized external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XSEG    (XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XABS    (ABS,XDATA)
                                     63 ;--------------------------------------------------------
                                     64 ; initialized external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area XISEG   (XDATA)
                                     67 	.area HOME    (CODE)
                                     68 	.area GSINIT0 (CODE)
                                     69 	.area GSINIT1 (CODE)
                                     70 	.area GSINIT2 (CODE)
                                     71 	.area GSINIT3 (CODE)
                                     72 	.area GSINIT4 (CODE)
                                     73 	.area GSINIT5 (CODE)
                                     74 	.area GSINIT  (CODE)
                                     75 	.area GSFINAL (CODE)
                                     76 	.area CSEG    (CODE)
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; Home
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area HOME    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CSEG    (CODE)
                                     93 ;------------------------------------------------------------
                                     94 ;Allocation info for local variables in function 'strrchr'
                                     95 ;------------------------------------------------------------
                                     96 ;ch                        Allocated with name '_strrchr_PARM_2'
                                     97 ;string                    Allocated to registers r5 r6 r7 
                                     98 ;start                     Allocated to registers r2 r3 r4 
                                     99 ;------------------------------------------------------------
                                    100 ;	_strrchr.c:32: char * strrchr ( const char * string, char ch )
                                    101 ;	-----------------------------------------
                                    102 ;	 function strrchr
                                    103 ;	-----------------------------------------
      000000                        104 _strrchr:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 AD 82            [24]  113 	mov	r5,dpl
      000002 AE 83            [24]  114 	mov	r6,dph
      000004 AF F0            [24]  115 	mov	r7,b
                                    116 ;	_strrchr.c:37: const char * start = string;
      000006 8D 02            [24]  117 	mov	ar2,r5
      000008 8E 03            [24]  118 	mov	ar3,r6
      00000A 8F 04            [24]  119 	mov	ar4,r7
                                    120 ;	_strrchr.c:39: while (*string++)                       /* find end of string */
      00000C                        121 00101$:
      00000C 8D 82            [24]  122 	mov	dpl,r5
      00000E 8E 83            [24]  123 	mov	dph,r6
      000010 8F F0            [24]  124 	mov	b,r7
      000012 12r00r00         [24]  125 	lcall	__gptrget
      000015 F9               [12]  126 	mov	r1,a
      000016 A3               [24]  127 	inc	dptr
      000017 AD 82            [24]  128 	mov	r5,dpl
      000019 AE 83            [24]  129 	mov	r6,dph
      00001B E9               [12]  130 	mov	a,r1
      00001C 70 EE            [24]  131 	jnz	00101$
                                    132 ;	_strrchr.c:42: while (--string != start && *string != ch)
      00001E                        133 00105$:
      00001E 1D               [12]  134 	dec	r5
      00001F BD FF 01         [24]  135 	cjne	r5,#0xff,00134$
      000022 1E               [12]  136 	dec	r6
      000023                        137 00134$:
      000023 C0 02            [24]  138 	push	ar2
      000025 C0 03            [24]  139 	push	ar3
      000027 C0 04            [24]  140 	push	ar4
      000029 8D 82            [24]  141 	mov	dpl,r5
      00002B 8E 83            [24]  142 	mov	dph,r6
      00002D 8F F0            [24]  143 	mov	b,r7
      00002F 12r00r00         [24]  144 	lcall	___gptr_cmp
      000032 15 81            [12]  145 	dec	sp
      000034 15 81            [12]  146 	dec	sp
      000036 15 81            [12]  147 	dec	sp
      000038 60 0C            [24]  148 	jz	00107$
      00003A 8D 82            [24]  149 	mov	dpl,r5
      00003C 8E 83            [24]  150 	mov	dph,r6
      00003E 8F F0            [24]  151 	mov	b,r7
      000040 12r00r00         [24]  152 	lcall	__gptrget
      000043 B5*00 D8         [24]  153 	cjne	a,_strrchr_PARM_2,00105$
      000046                        154 00107$:
                                    155 ;	_strrchr.c:45: if (*string == ch)                      /* char found ? */
      000046 8D 82            [24]  156 	mov	dpl,r5
      000048 8E 83            [24]  157 	mov	dph,r6
      00004A 8F F0            [24]  158 	mov	b,r7
      00004C 12r00r00         [24]  159 	lcall	__gptrget
      00004F B5*00 07         [24]  160 	cjne	a,_strrchr_PARM_2,00109$
                                    161 ;	_strrchr.c:46: return( (char *)string );
      000052 8D 82            [24]  162 	mov	dpl,r5
      000054 8E 83            [24]  163 	mov	dph,r6
      000056 8F F0            [24]  164 	mov	b,r7
      000058 22               [24]  165 	ret
      000059                        166 00109$:
                                    167 ;	_strrchr.c:48: return (NULL) ;
      000059 90 00 00         [24]  168 	mov	dptr,#0x0000
      00005C 75 F0 00         [24]  169 	mov	b,#0x00
                                    170 ;	_strrchr.c:49: }
      00005F 22               [24]  171 	ret
                                    172 	.area CSEG    (CODE)
                                    173 	.area CONST   (CODE)
                                    174 	.area XINIT   (CODE)
                                    175 	.area CABS    (ABS,CODE)
