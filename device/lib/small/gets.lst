                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'gets'
                                     93 ;------------------------------------------------------------
                                     94 ;s                         Allocated to registers r5 r6 r7 
                                     95 ;c                         Allocated to registers r1 
                                     96 ;count                     Allocated to registers r3 r4 
                                     97 ;------------------------------------------------------------
                                     98 ;	gets.c:32: gets (char *s)
                                     99 ;	-----------------------------------------
                                    100 ;	 function gets
                                    101 ;	-----------------------------------------
      000000                        102 _gets:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 AD 82            [24]  111 	mov	r5,dpl
      000002 AE 83            [24]  112 	mov	r6,dph
      000004 AF F0            [24]  113 	mov	r7,b
                                    114 ;	gets.c:35: unsigned int count = 0;
      000006 7B 00            [12]  115 	mov	r3,#0x00
      000008 7C 00            [12]  116 	mov	r4,#0x00
                                    117 ;	gets.c:37: while (1)
      00000A                        118 00109$:
                                    119 ;	gets.c:39: c = getchar ();
      00000A C0 07            [24]  120 	push	ar7
      00000C C0 06            [24]  121 	push	ar6
      00000E C0 05            [24]  122 	push	ar5
      000010 C0 04            [24]  123 	push	ar4
      000012 C0 03            [24]  124 	push	ar3
      000014 12r00r00         [24]  125 	lcall	_getchar
      000017 A9 82            [24]  126 	mov	r1,dpl
      000019 AA 83            [24]  127 	mov	r2,dph
      00001B D0 03            [24]  128 	pop	ar3
      00001D D0 04            [24]  129 	pop	ar4
      00001F D0 05            [24]  130 	pop	ar5
      000021 D0 06            [24]  131 	pop	ar6
      000023 D0 07            [24]  132 	pop	ar7
                                    133 ;	gets.c:40: switch(c)
      000025 B9 08 02         [24]  134 	cjne	r1,#0x08,00133$
      000028 80 0A            [24]  135 	sjmp	00101$
      00002A                        136 00133$:
      00002A B9 0A 02         [24]  137 	cjne	r1,#0x0a,00134$
      00002D 80 3B            [24]  138 	sjmp	00105$
      00002F                        139 00134$:
                                    140 ;	gets.c:42: case '\b': /* backspace */
      00002F B9 0D 61         [24]  141 	cjne	r1,#0x0d,00106$
      000032 80 36            [24]  142 	sjmp	00105$
      000034                        143 00101$:
                                    144 ;	gets.c:43: if (count)
      000034 EB               [12]  145 	mov	a,r3
      000035 4C               [12]  146 	orl	a,r4
      000036 60 D2            [24]  147 	jz	00109$
                                    148 ;	gets.c:45: putchar ('\b');
      000038 90 00 08         [24]  149 	mov	dptr,#0x0008
      00003B C0 07            [24]  150 	push	ar7
      00003D C0 06            [24]  151 	push	ar6
      00003F C0 05            [24]  152 	push	ar5
      000041 C0 04            [24]  153 	push	ar4
      000043 C0 03            [24]  154 	push	ar3
      000045 12r00r00         [24]  155 	lcall	_putchar
                                    156 ;	gets.c:46: putchar (' ');
      000048 90 00 20         [24]  157 	mov	dptr,#0x0020
      00004B 12r00r00         [24]  158 	lcall	_putchar
                                    159 ;	gets.c:47: putchar ('\b');
      00004E 90 00 08         [24]  160 	mov	dptr,#0x0008
      000051 12r00r00         [24]  161 	lcall	_putchar
      000054 D0 03            [24]  162 	pop	ar3
      000056 D0 04            [24]  163 	pop	ar4
      000058 D0 05            [24]  164 	pop	ar5
      00005A D0 06            [24]  165 	pop	ar6
      00005C D0 07            [24]  166 	pop	ar7
                                    167 ;	gets.c:48: --s;
      00005E 1D               [12]  168 	dec	r5
      00005F BD FF 01         [24]  169 	cjne	r5,#0xff,00137$
      000062 1E               [12]  170 	dec	r6
      000063                        171 00137$:
                                    172 ;	gets.c:49: --count;
      000063 1B               [12]  173 	dec	r3
      000064 BB FF 01         [24]  174 	cjne	r3,#0xff,00138$
      000067 1C               [12]  175 	dec	r4
      000068                        176 00138$:
                                    177 ;	gets.c:51: break;
                                    178 ;	gets.c:54: case '\r': /* CR or LF */
      000068 80 A0            [24]  179 	sjmp	00109$
      00006A                        180 00105$:
                                    181 ;	gets.c:55: putchar ('\r');
      00006A 90 00 0D         [24]  182 	mov	dptr,#0x000d
      00006D C0 07            [24]  183 	push	ar7
      00006F C0 06            [24]  184 	push	ar6
      000071 C0 05            [24]  185 	push	ar5
      000073 12r00r00         [24]  186 	lcall	_putchar
                                    187 ;	gets.c:56: putchar ('\n');
      000076 90 00 0A         [24]  188 	mov	dptr,#0x000a
      000079 12r00r00         [24]  189 	lcall	_putchar
      00007C D0 05            [24]  190 	pop	ar5
      00007E D0 06            [24]  191 	pop	ar6
      000080 D0 07            [24]  192 	pop	ar7
                                    193 ;	gets.c:57: *s = 0;
      000082 8D 82            [24]  194 	mov	dpl,r5
      000084 8E 83            [24]  195 	mov	dph,r6
      000086 8F F0            [24]  196 	mov	b,r7
      000088 E4               [12]  197 	clr	a
      000089 12r00r00         [24]  198 	lcall	__gptrput
                                    199 ;	gets.c:58: return s;
      00008C 8D 82            [24]  200 	mov	dpl,r5
      00008E 8E 83            [24]  201 	mov	dph,r6
      000090 8F F0            [24]  202 	mov	b,r7
                                    203 ;	gets.c:60: default:
      000092 22               [24]  204 	ret
      000093                        205 00106$:
                                    206 ;	gets.c:61: *s++ = c;
      000093 8D 82            [24]  207 	mov	dpl,r5
      000095 8E 83            [24]  208 	mov	dph,r6
      000097 8F F0            [24]  209 	mov	b,r7
      000099 E9               [12]  210 	mov	a,r1
      00009A 12r00r00         [24]  211 	lcall	__gptrput
      00009D A3               [24]  212 	inc	dptr
      00009E AD 82            [24]  213 	mov	r5,dpl
      0000A0 AE 83            [24]  214 	mov	r6,dph
                                    215 ;	gets.c:62: ++count;
      0000A2 0B               [12]  216 	inc	r3
      0000A3 BB 00 01         [24]  217 	cjne	r3,#0x00,00139$
      0000A6 0C               [12]  218 	inc	r4
      0000A7                        219 00139$:
                                    220 ;	gets.c:63: putchar (c);
      0000A7 7A 00            [12]  221 	mov	r2,#0x00
      0000A9 89 82            [24]  222 	mov	dpl,r1
      0000AB 8A 83            [24]  223 	mov	dph,r2
      0000AD C0 07            [24]  224 	push	ar7
      0000AF C0 06            [24]  225 	push	ar6
      0000B1 C0 05            [24]  226 	push	ar5
      0000B3 C0 04            [24]  227 	push	ar4
      0000B5 C0 03            [24]  228 	push	ar3
      0000B7 12r00r00         [24]  229 	lcall	_putchar
      0000BA D0 03            [24]  230 	pop	ar3
      0000BC D0 04            [24]  231 	pop	ar4
      0000BE D0 05            [24]  232 	pop	ar5
      0000C0 D0 06            [24]  233 	pop	ar6
      0000C2 D0 07            [24]  234 	pop	ar7
                                    235 ;	gets.c:65: }
                                    236 ;	gets.c:67: }
      0000C4 02r00r0A         [24]  237 	ljmp	00109$
                                    238 	.area CSEG    (CODE)
                                    239 	.area CONST   (CODE)
                                    240 	.area XINIT   (CODE)
                                    241 	.area CABS    (ABS,CODE)
