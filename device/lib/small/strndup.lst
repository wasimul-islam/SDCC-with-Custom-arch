                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strndup
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _malloc
                                     12 	.globl ___memcpy
                                     13 	.globl _strlen
                                     14 	.globl _strndup_PARM_2
                                     15 	.globl _strndup
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _strndup_PARM_2:
      000000                         36 	.ds 2
      000002                         37 _strndup_s_65536_64:
      000002                         38 	.ds 3
                                     39 ;--------------------------------------------------------
                                     40 ; overlayable items in internal ram
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; indirectly addressable internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area ISEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; absolute internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area IABS    (ABS,DATA)
                                     50 	.area IABS    (ABS,DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; bit data
                                     53 ;--------------------------------------------------------
                                     54 	.area BSEG    (BIT)
                                     55 ;--------------------------------------------------------
                                     56 ; paged external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area PSEG    (PAG,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; uninitialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XSEG    (XDATA)
                                     63 ;--------------------------------------------------------
                                     64 ; absolute external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area XABS    (ABS,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; initialized external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XISEG   (XDATA)
                                     71 	.area HOME    (CODE)
                                     72 	.area GSINIT0 (CODE)
                                     73 	.area GSINIT1 (CODE)
                                     74 	.area GSINIT2 (CODE)
                                     75 	.area GSINIT3 (CODE)
                                     76 	.area GSINIT4 (CODE)
                                     77 	.area GSINIT5 (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area CSEG    (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; global & static initialisations
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; Home
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area HOME    (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; code
                                     95 ;--------------------------------------------------------
                                     96 	.area CSEG    (CODE)
                                     97 ;------------------------------------------------------------
                                     98 ;Allocation info for local variables in function 'strndup'
                                     99 ;------------------------------------------------------------
                                    100 ;n                         Allocated with name '_strndup_PARM_2'
                                    101 ;s                         Allocated with name '_strndup_s_65536_64'
                                    102 ;l                         Allocated to registers r3 r4 
                                    103 ;r                         Allocated to registers r1 r0 r2 
                                    104 ;------------------------------------------------------------
                                    105 ;	strndup.c:33: char *strndup (const char *s, size_t n)
                                    106 ;	-----------------------------------------
                                    107 ;	 function strndup
                                    108 ;	-----------------------------------------
      000000                        109 _strndup:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
                                    118 ;	strndup.c:35: size_t l = strlen (s);
      000000 85 82*02         [24]  119 	mov	_strndup_s_65536_64,dpl
      000003 85 83*03         [24]  120 	mov	(_strndup_s_65536_64 + 1),dph
      000006 85 F0*04         [24]  121 	mov	(_strndup_s_65536_64 + 2),b
      000009 12r00r00         [24]  122 	lcall	_strlen
      00000C AB 82            [24]  123 	mov	r3,dpl
      00000E AC 83            [24]  124 	mov	r4,dph
                                    125 ;	strndup.c:36: if (l > n)
      000010 C3               [12]  126 	clr	c
      000011 E5*00            [12]  127 	mov	a,_strndup_PARM_2
      000013 9B               [12]  128 	subb	a,r3
      000014 E5*01            [12]  129 	mov	a,(_strndup_PARM_2 + 1)
      000016 9C               [12]  130 	subb	a,r4
      000017 50 04            [24]  131 	jnc	00102$
                                    132 ;	strndup.c:37: l = n;
      000019 AB*00            [24]  133 	mov	r3,_strndup_PARM_2
      00001B AC*01            [24]  134 	mov	r4,(_strndup_PARM_2 + 1)
      00001D                        135 00102$:
                                    136 ;	strndup.c:38: char *r = malloc (l + 1);
      00001D 8B 82            [24]  137 	mov	dpl,r3
      00001F 8C 83            [24]  138 	mov	dph,r4
      000021 A3               [24]  139 	inc	dptr
      000022 C0 04            [24]  140 	push	ar4
      000024 C0 03            [24]  141 	push	ar3
      000026 12r00r00         [24]  142 	lcall	_malloc
      000029 A9 82            [24]  143 	mov	r1,dpl
      00002B AA 83            [24]  144 	mov	r2,dph
      00002D D0 03            [24]  145 	pop	ar3
      00002F D0 04            [24]  146 	pop	ar4
      000031 8A 00            [24]  147 	mov	ar0,r2
      000033 7A 00            [12]  148 	mov	r2,#0x00
                                    149 ;	strndup.c:39: if (r)
      000035 E9               [12]  150 	mov	a,r1
      000036 48               [12]  151 	orl	a,r0
      000037 60 42            [24]  152 	jz	00104$
                                    153 ;	strndup.c:41: memcpy (r, s, l);
      000039 89 05            [24]  154 	mov	ar5,r1
      00003B 88 06            [24]  155 	mov	ar6,r0
      00003D 8A 07            [24]  156 	mov	ar7,r2
      00003F 85*02*00         [24]  157 	mov	___memcpy_PARM_2,_strndup_s_65536_64
      000042 85*03*01         [24]  158 	mov	(___memcpy_PARM_2 + 1),(_strndup_s_65536_64 + 1)
      000045 85*04*02         [24]  159 	mov	(___memcpy_PARM_2 + 2),(_strndup_s_65536_64 + 2)
      000048 8B*00            [24]  160 	mov	___memcpy_PARM_3,r3
      00004A 8C*01            [24]  161 	mov	(___memcpy_PARM_3 + 1),r4
      00004C 8D 82            [24]  162 	mov	dpl,r5
      00004E 8E 83            [24]  163 	mov	dph,r6
      000050 8F F0            [24]  164 	mov	b,r7
      000052 C0 04            [24]  165 	push	ar4
      000054 C0 03            [24]  166 	push	ar3
      000056 C0 02            [24]  167 	push	ar2
      000058 C0 01            [24]  168 	push	ar1
      00005A C0 00            [24]  169 	push	ar0
      00005C 12r00r00         [24]  170 	lcall	___memcpy
      00005F D0 00            [24]  171 	pop	ar0
      000061 D0 01            [24]  172 	pop	ar1
      000063 D0 02            [24]  173 	pop	ar2
      000065 D0 03            [24]  174 	pop	ar3
      000067 D0 04            [24]  175 	pop	ar4
                                    176 ;	strndup.c:42: r[l] = 0;
      000069 EB               [12]  177 	mov	a,r3
      00006A 29               [12]  178 	add	a,r1
      00006B FB               [12]  179 	mov	r3,a
      00006C EC               [12]  180 	mov	a,r4
      00006D 38               [12]  181 	addc	a,r0
      00006E FC               [12]  182 	mov	r4,a
      00006F 8A 07            [24]  183 	mov	ar7,r2
      000071 8B 82            [24]  184 	mov	dpl,r3
      000073 8C 83            [24]  185 	mov	dph,r4
      000075 8F F0            [24]  186 	mov	b,r7
      000077 E4               [12]  187 	clr	a
      000078 12r00r00         [24]  188 	lcall	__gptrput
      00007B                        189 00104$:
                                    190 ;	strndup.c:44: return (r);
      00007B 89 82            [24]  191 	mov	dpl,r1
      00007D 88 83            [24]  192 	mov	dph,r0
      00007F 8A F0            [24]  193 	mov	b,r2
                                    194 ;	strndup.c:45: }
      000081 22               [24]  195 	ret
                                    196 	.area CSEG    (CODE)
                                    197 	.area CONST   (CODE)
                                    198 	.area XINIT   (CODE)
                                    199 	.area CABS    (ABS,CODE)
