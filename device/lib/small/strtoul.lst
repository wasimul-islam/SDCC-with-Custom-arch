                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strtoul
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strncmp
                                     12 	.globl _strtoul_PARM_3
                                     13 	.globl _strtoul_PARM_2
                                     14 	.globl _strtoul
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 _strtoul_PARM_2:
      000000                         35 	.ds 3
      000003                         36 _strtoul_PARM_3:
      000003                         37 	.ds 2
      000005                         38 _strtoul_nptr_65536_139:
      000005                         39 	.ds 3
      000008                         40 _strtoul_ret_65536_140:
      000008                         41 	.ds 4
      00000C                         42 _strtoul_range_error_65536_140:
      00000C                         43 	.ds 1
      00000D                         44 _strtoul_neg_65536_140:
      00000D                         45 	.ds 1
      00000E                         46 _strtoul___2621440012_262144_147:
      00000E                         47 	.ds 1
      00000F                         48 _strtoul_digit_196608_147:
      00000F                         49 	.ds 1
      000010                         50 _strtoul___2621440014_262144_155:
      000010                         51 	.ds 8
      000018                         52 _strtoul_result_393216_157:
      000018                         53 	.ds 8
      000020                         54 _strtoul_sloc0_1_0:
      000020                         55 	.ds 3
                                     56 ;--------------------------------------------------------
                                     57 ; overlayable items in internal ram
                                     58 ;--------------------------------------------------------
                                     59 	.area	OSEG    (OVR,DATA)
      000000                         60 __isdigit_PARM_2:
      000000                         61 	.ds 1
                                     62 ;--------------------------------------------------------
                                     63 ; indirectly addressable internal ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area ISEG    (DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; absolute internal ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area IABS    (ABS,DATA)
                                     70 	.area IABS    (ABS,DATA)
                                     71 ;--------------------------------------------------------
                                     72 ; bit data
                                     73 ;--------------------------------------------------------
                                     74 	.area BSEG    (BIT)
      000000                         75 _strtoul_sloc1_1_0:
      000000                         76 	.ds 1
                                     77 ;--------------------------------------------------------
                                     78 ; paged external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area PSEG    (PAG,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; uninitialized external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XSEG    (XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; absolute external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XABS    (ABS,XDATA)
                                     89 ;--------------------------------------------------------
                                     90 ; initialized external ram data
                                     91 ;--------------------------------------------------------
                                     92 	.area XISEG   (XDATA)
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT0 (CODE)
                                     95 	.area GSINIT1 (CODE)
                                     96 	.area GSINIT2 (CODE)
                                     97 	.area GSINIT3 (CODE)
                                     98 	.area GSINIT4 (CODE)
                                     99 	.area GSINIT5 (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 	.area GSFINAL (CODE)
                                    102 	.area CSEG    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; global & static initialisations
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME    (CODE)
                                    107 	.area GSINIT  (CODE)
                                    108 	.area GSFINAL (CODE)
                                    109 	.area GSINIT  (CODE)
                                    110 ;--------------------------------------------------------
                                    111 ; Home
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME    (CODE)
                                    114 	.area HOME    (CODE)
                                    115 ;--------------------------------------------------------
                                    116 ; code
                                    117 ;--------------------------------------------------------
                                    118 	.area CSEG    (CODE)
                                    119 ;------------------------------------------------------------
                                    120 ;Allocation info for local variables in function '_isdigit'
                                    121 ;------------------------------------------------------------
                                    122 ;base                      Allocated with name '__isdigit_PARM_2'
                                    123 ;c                         Allocated to registers r7 
                                    124 ;v                         Allocated to registers r6 
                                    125 ;------------------------------------------------------------
                                    126 ;	strtoul.c:40: static signed char _isdigit(const char c, unsigned char base)
                                    127 ;	-----------------------------------------
                                    128 ;	 function _isdigit
                                    129 ;	-----------------------------------------
      000000                        130 __isdigit:
                           000007   131 	ar7 = 0x07
                           000006   132 	ar6 = 0x06
                           000005   133 	ar5 = 0x05
                           000004   134 	ar4 = 0x04
                           000003   135 	ar3 = 0x03
                           000002   136 	ar2 = 0x02
                           000001   137 	ar1 = 0x01
                           000000   138 	ar0 = 0x00
      000000 AF 82            [24]  139 	mov	r7,dpl
                                    140 ;	strtoul.c:44: if (c >= '0' && c <= '9')
      000002 BF 30 00         [24]  141 	cjne	r7,#0x30,00145$
      000005                        142 00145$:
      000005 40 0D            [24]  143 	jc	00110$
      000007 EF               [12]  144 	mov	a,r7
      000008 24 C6            [12]  145 	add	a,#0xff - 0x39
      00000A 40 08            [24]  146 	jc	00110$
                                    147 ;	strtoul.c:45: v = c - '0';
      00000C 8F 06            [24]  148 	mov	ar6,r7
      00000E EE               [12]  149 	mov	a,r6
      00000F 24 D0            [12]  150 	add	a,#0xd0
      000011 FE               [12]  151 	mov	r6,a
      000012 80 26            [24]  152 	sjmp	00111$
      000014                        153 00110$:
                                    154 ;	strtoul.c:46: else if (c >= 'a' && c <='z')
      000014 BF 61 00         [24]  155 	cjne	r7,#0x61,00148$
      000017                        156 00148$:
      000017 40 0D            [24]  157 	jc	00106$
      000019 EF               [12]  158 	mov	a,r7
      00001A 24 85            [12]  159 	add	a,#0xff - 0x7a
      00001C 40 08            [24]  160 	jc	00106$
                                    161 ;	strtoul.c:47: v = c - 'a' + 10;
      00001E 8F 05            [24]  162 	mov	ar5,r7
      000020 74 A9            [12]  163 	mov	a,#0xa9
      000022 2D               [12]  164 	add	a,r5
      000023 FE               [12]  165 	mov	r6,a
      000024 80 14            [24]  166 	sjmp	00111$
      000026                        167 00106$:
                                    168 ;	strtoul.c:48: else if (c >= 'A' && c <='Z')
      000026 BF 41 00         [24]  169 	cjne	r7,#0x41,00151$
      000029                        170 00151$:
      000029 40 0B            [24]  171 	jc	00102$
      00002B EF               [12]  172 	mov	a,r7
      00002C 24 A5            [12]  173 	add	a,#0xff - 0x5a
      00002E 40 06            [24]  174 	jc	00102$
                                    175 ;	strtoul.c:49: v = c - 'A' + 10;
      000030 74 C9            [12]  176 	mov	a,#0xc9
      000032 2F               [12]  177 	add	a,r7
      000033 FE               [12]  178 	mov	r6,a
      000034 80 04            [24]  179 	sjmp	00111$
      000036                        180 00102$:
                                    181 ;	strtoul.c:51: return (-1);
      000036 75 82 FF         [24]  182 	mov	dpl,#0xff
      000039 22               [24]  183 	ret
      00003A                        184 00111$:
                                    185 ;	strtoul.c:53: if (v >= base)
      00003A C3               [12]  186 	clr	c
      00003B EE               [12]  187 	mov	a,r6
      00003C 95*00            [12]  188 	subb	a,__isdigit_PARM_2
      00003E 40 04            [24]  189 	jc	00114$
                                    190 ;	strtoul.c:54: return (-1);
      000040 75 82 FF         [24]  191 	mov	dpl,#0xff
      000043 22               [24]  192 	ret
      000044                        193 00114$:
                                    194 ;	strtoul.c:56: return (v);
      000044 8E 82            [24]  195 	mov	dpl,r6
                                    196 ;	strtoul.c:57: }
      000046 22               [24]  197 	ret
                                    198 ;------------------------------------------------------------
                                    199 ;Allocation info for local variables in function 'strtoul'
                                    200 ;------------------------------------------------------------
                                    201 ;endptr                    Allocated with name '_strtoul_PARM_2'
                                    202 ;base                      Allocated with name '_strtoul_PARM_3'
                                    203 ;nptr                      Allocated with name '_strtoul_nptr_65536_139'
                                    204 ;__1310720004              Allocated to registers 
                                    205 ;ptr                       Allocated to registers r0 r1 r7 
                                    206 ;ret                       Allocated with name '_strtoul_ret_65536_140'
                                    207 ;range_error               Allocated with name '_strtoul_range_error_65536_140'
                                    208 ;neg                       Allocated with name '_strtoul_neg_65536_140'
                                    209 ;__1310720005              Allocated to registers 
                                    210 ;c                         Allocated to registers 
                                    211 ;__2621440017              Allocated with name '_strtoul___2621440017_262144_147'
                                    212 ;__2621440012              Allocated with name '_strtoul___2621440012_262144_147'
                                    213 ;__2621440007              Allocated with name '_strtoul___2621440007_262144_147'
                                    214 ;oldret                    Allocated to registers 
                                    215 ;digit                     Allocated with name '_strtoul_digit_196608_147'
                                    216 ;__2621440008              Allocated with name '_strtoul___2621440008_262144_152'
                                    217 ;__2621440009              Allocated with name '_strtoul___2621440009_262144_152'
                                    218 ;__2621440010              Allocated with name '_strtoul___2621440010_262144_152'
                                    219 ;r                         Allocated with name '_strtoul_r_327680_153'
                                    220 ;a                         Allocated with name '_strtoul_a_327680_153'
                                    221 ;b                         Allocated with name '_strtoul_b_327680_153'
                                    222 ;result                    Allocated with name '_strtoul_result_393216_154'
                                    223 ;__2621440013              Allocated to registers 
                                    224 ;__2621440014              Allocated with name '_strtoul___2621440014_262144_155'
                                    225 ;__2621440015              Allocated to registers 
                                    226 ;r                         Allocated to registers 
                                    227 ;a                         Allocated to registers 
                                    228 ;b                         Allocated to registers 
                                    229 ;result                    Allocated with name '_strtoul_result_393216_157'
                                    230 ;__2621440018              Allocated with name '_strtoul___2621440018_262144_158'
                                    231 ;__2621440019              Allocated with name '_strtoul___2621440019_262144_158'
                                    232 ;__2621440020              Allocated with name '_strtoul___2621440020_262144_158'
                                    233 ;r                         Allocated with name '_strtoul_r_327680_159'
                                    234 ;a                         Allocated with name '_strtoul_a_327680_159'
                                    235 ;b                         Allocated with name '_strtoul_b_327680_159'
                                    236 ;result                    Allocated with name '_strtoul_result_393216_160'
                                    237 ;sloc0                     Allocated with name '_strtoul_sloc0_1_0'
                                    238 ;------------------------------------------------------------
                                    239 ;	strtoul.c:59: unsigned long int strtoul(const char *nptr, char **endptr, int base)
                                    240 ;	-----------------------------------------
                                    241 ;	 function strtoul
                                    242 ;	-----------------------------------------
      000047                        243 _strtoul:
      000047 85 82*05         [24]  244 	mov	_strtoul_nptr_65536_139,dpl
      00004A 85 83*06         [24]  245 	mov	(_strtoul_nptr_65536_139 + 1),dph
      00004D 85 F0*07         [24]  246 	mov	(_strtoul_nptr_65536_139 + 2),b
                                    247 ;	strtoul.c:63: bool range_error = false;
      000050 75*0C 00         [24]  248 	mov	_strtoul_range_error_65536_140,#0x00
                                    249 ;	strtoul.c:64: bool neg = false;
      000053 75*0D 00         [24]  250 	mov	_strtoul_neg_65536_140,#0x00
                                    251 ;	strtoul.c:66: while (isblank (*ptr))
      000056 AA*05            [24]  252 	mov	r2,_strtoul_nptr_65536_139
      000058 AB*06            [24]  253 	mov	r3,(_strtoul_nptr_65536_139 + 1)
      00005A AC*07            [24]  254 	mov	r4,(_strtoul_nptr_65536_139 + 2)
      00005C                        255 00101$:
      00005C 8A 82            [24]  256 	mov	dpl,r2
      00005E 8B 83            [24]  257 	mov	dph,r3
      000060 8C F0            [24]  258 	mov	b,r4
      000062 12r00r00         [24]  259 	lcall	__gptrget
      000065 F9               [12]  260 	mov	r1,a
                                    261 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000066 B9 20 02         [24]  262 	cjne	r1,#0x20,00214$
      000069 80 03            [24]  263 	sjmp	00141$
      00006B                        264 00214$:
      00006B B9 09 07         [24]  265 	cjne	r1,#0x09,00163$
      00006E                        266 00141$:
                                    267 ;	strtoul.c:67: ptr++;
      00006E 0A               [12]  268 	inc	r2
      00006F BA 00 EA         [24]  269 	cjne	r2,#0x00,00101$
      000072 0B               [12]  270 	inc	r3
      000073 80 E7            [24]  271 	sjmp	00101$
      000075                        272 00163$:
      000075 8A 00            [24]  273 	mov	ar0,r2
      000077 8B 01            [24]  274 	mov	ar1,r3
      000079 8C 07            [24]  275 	mov	ar7,r4
                                    276 ;	strtoul.c:70: switch(*ptr)
      00007B 8A 82            [24]  277 	mov	dpl,r2
      00007D 8B 83            [24]  278 	mov	dph,r3
      00007F 8C F0            [24]  279 	mov	b,r4
      000081 12r00r00         [24]  280 	lcall	__gptrget
      000084 FE               [12]  281 	mov	r6,a
      000085 BE 2B 02         [24]  282 	cjne	r6,#0x2b,00218$
      000088 80 06            [24]  283 	sjmp	00105$
      00008A                        284 00218$:
      00008A BE 2D 08         [24]  285 	cjne	r6,#0x2d,00106$
                                    286 ;	strtoul.c:73: neg = true;
      00008D 75*0D 01         [24]  287 	mov	_strtoul_neg_65536_140,#0x01
                                    288 ;	strtoul.c:74: case '+':
      000090                        289 00105$:
                                    290 ;	strtoul.c:75: ptr++;
      000090 08               [12]  291 	inc	r0
      000091 B8 00 01         [24]  292 	cjne	r0,#0x00,00221$
      000094 09               [12]  293 	inc	r1
      000095                        294 00221$:
                                    295 ;	strtoul.c:76: }
      000095                        296 00106$:
                                    297 ;	strtoul.c:79: if (!base)
      000095 E5*03            [12]  298 	mov	a,_strtoul_PARM_3
      000097 45*04            [12]  299 	orl	a,(_strtoul_PARM_3 + 1)
      000099 60 03            [24]  300 	jz	00222$
      00009B 02r01r2A         [24]  301 	ljmp	00119$
      00009E                        302 00222$:
                                    303 ;	strtoul.c:81: if (!strncmp (ptr, "0x", 2) || !strncmp (ptr, "0X", 2))
      00009E 75*00r00         [24]  304 	mov	_strncmp_PARM_2,#___str_0
      0000A1 75*01s00         [24]  305 	mov	(_strncmp_PARM_2 + 1),#(___str_0 >> 8)
      0000A4 75*02 80         [24]  306 	mov	(_strncmp_PARM_2 + 2),#0x80
      0000A7 75*00 02         [24]  307 	mov	_strncmp_PARM_3,#0x02
      0000AA 75*01 00         [24]  308 	mov	(_strncmp_PARM_3 + 1),#0x00
      0000AD 88 82            [24]  309 	mov	dpl,r0
      0000AF 89 83            [24]  310 	mov	dph,r1
      0000B1 8F F0            [24]  311 	mov	b,r7
      0000B3 C0 07            [24]  312 	push	ar7
      0000B5 C0 01            [24]  313 	push	ar1
      0000B7 C0 00            [24]  314 	push	ar0
      0000B9 12r00r00         [24]  315 	lcall	_strncmp
      0000BC E5 82            [12]  316 	mov	a,dpl
      0000BE 85 83 F0         [24]  317 	mov	b,dph
      0000C1 D0 00            [24]  318 	pop	ar0
      0000C3 D0 01            [24]  319 	pop	ar1
      0000C5 D0 07            [24]  320 	pop	ar7
      0000C7 45 F0            [12]  321 	orl	a,b
      0000C9 60 2D            [24]  322 	jz	00110$
      0000CB 75*00r03         [24]  323 	mov	_strncmp_PARM_2,#___str_1
      0000CE 75*01s00         [24]  324 	mov	(_strncmp_PARM_2 + 1),#(___str_1 >> 8)
      0000D1 75*02 80         [24]  325 	mov	(_strncmp_PARM_2 + 2),#0x80
      0000D4 75*00 02         [24]  326 	mov	_strncmp_PARM_3,#0x02
      0000D7 75*01 00         [24]  327 	mov	(_strncmp_PARM_3 + 1),#0x00
      0000DA 88 82            [24]  328 	mov	dpl,r0
      0000DC 89 83            [24]  329 	mov	dph,r1
      0000DE 8F F0            [24]  330 	mov	b,r7
      0000E0 C0 07            [24]  331 	push	ar7
      0000E2 C0 01            [24]  332 	push	ar1
      0000E4 C0 00            [24]  333 	push	ar0
      0000E6 12r00r00         [24]  334 	lcall	_strncmp
      0000E9 E5 82            [12]  335 	mov	a,dpl
      0000EB 85 83 F0         [24]  336 	mov	b,dph
      0000EE D0 00            [24]  337 	pop	ar0
      0000F0 D0 01            [24]  338 	pop	ar1
      0000F2 D0 07            [24]  339 	pop	ar7
      0000F4 45 F0            [12]  340 	orl	a,b
      0000F6 70 10            [24]  341 	jnz	00111$
      0000F8                        342 00110$:
                                    343 ;	strtoul.c:83: base = 16;
      0000F8 75*03 10         [24]  344 	mov	_strtoul_PARM_3,#0x10
      0000FB 75*04 00         [24]  345 	mov	(_strtoul_PARM_3 + 1),#0x00
                                    346 ;	strtoul.c:84: ptr += 2;
      0000FE 74 02            [12]  347 	mov	a,#0x02
      000100 28               [12]  348 	add	a,r0
      000101 F8               [12]  349 	mov	r0,a
      000102 E4               [12]  350 	clr	a
      000103 39               [12]  351 	addc	a,r1
      000104 F9               [12]  352 	mov	r1,a
      000105 02r01r98         [24]  353 	ljmp	00120$
      000108                        354 00111$:
                                    355 ;	strtoul.c:86: else if (*ptr == '0')
      000108 88 82            [24]  356 	mov	dpl,r0
      00010A 89 83            [24]  357 	mov	dph,r1
      00010C 8F F0            [24]  358 	mov	b,r7
      00010E 12r00r00         [24]  359 	lcall	__gptrget
      000111 FE               [12]  360 	mov	r6,a
      000112 BE 30 0D         [24]  361 	cjne	r6,#0x30,00108$
                                    362 ;	strtoul.c:88: base = 8;
      000115 75*03 08         [24]  363 	mov	_strtoul_PARM_3,#0x08
      000118 75*04 00         [24]  364 	mov	(_strtoul_PARM_3 + 1),#0x00
                                    365 ;	strtoul.c:89: ptr++;
      00011B 08               [12]  366 	inc	r0
      00011C B8 00 79         [24]  367 	cjne	r0,#0x00,00120$
      00011F 09               [12]  368 	inc	r1
      000120 80 76            [24]  369 	sjmp	00120$
      000122                        370 00108$:
                                    371 ;	strtoul.c:92: base = 10;
      000122 75*03 0A         [24]  372 	mov	_strtoul_PARM_3,#0x0a
      000125 75*04 00         [24]  373 	mov	(_strtoul_PARM_3 + 1),#0x00
      000128 80 6E            [24]  374 	sjmp	00120$
      00012A                        375 00119$:
                                    376 ;	strtoul.c:95: else if (base == 16 && (!strncmp (ptr, "0x", 2) || !strncmp (ptr, "0X", 2)))
      00012A 74 10            [12]  377 	mov	a,#0x10
      00012C B5*03 06         [24]  378 	cjne	a,_strtoul_PARM_3,00228$
      00012F E4               [12]  379 	clr	a
      000130 B5*04 02         [24]  380 	cjne	a,(_strtoul_PARM_3 + 1),00228$
      000133 80 02            [24]  381 	sjmp	00229$
      000135                        382 00228$:
      000135 80 61            [24]  383 	sjmp	00120$
      000137                        384 00229$:
      000137 75*00r00         [24]  385 	mov	_strncmp_PARM_2,#___str_0
      00013A 75*01s00         [24]  386 	mov	(_strncmp_PARM_2 + 1),#(___str_0 >> 8)
      00013D 75*02 80         [24]  387 	mov	(_strncmp_PARM_2 + 2),#0x80
      000140 75*00 02         [24]  388 	mov	_strncmp_PARM_3,#0x02
      000143 75*01 00         [24]  389 	mov	(_strncmp_PARM_3 + 1),#0x00
      000146 88 82            [24]  390 	mov	dpl,r0
      000148 89 83            [24]  391 	mov	dph,r1
      00014A 8F F0            [24]  392 	mov	b,r7
      00014C C0 07            [24]  393 	push	ar7
      00014E C0 01            [24]  394 	push	ar1
      000150 C0 00            [24]  395 	push	ar0
      000152 12r00r00         [24]  396 	lcall	_strncmp
      000155 E5 82            [12]  397 	mov	a,dpl
      000157 85 83 F0         [24]  398 	mov	b,dph
      00015A D0 00            [24]  399 	pop	ar0
      00015C D0 01            [24]  400 	pop	ar1
      00015E D0 07            [24]  401 	pop	ar7
      000160 45 F0            [12]  402 	orl	a,b
      000162 60 2D            [24]  403 	jz	00114$
      000164 75*00r03         [24]  404 	mov	_strncmp_PARM_2,#___str_1
      000167 75*01s00         [24]  405 	mov	(_strncmp_PARM_2 + 1),#(___str_1 >> 8)
      00016A 75*02 80         [24]  406 	mov	(_strncmp_PARM_2 + 2),#0x80
      00016D 75*00 02         [24]  407 	mov	_strncmp_PARM_3,#0x02
      000170 75*01 00         [24]  408 	mov	(_strncmp_PARM_3 + 1),#0x00
      000173 88 82            [24]  409 	mov	dpl,r0
      000175 89 83            [24]  410 	mov	dph,r1
      000177 8F F0            [24]  411 	mov	b,r7
      000179 C0 07            [24]  412 	push	ar7
      00017B C0 01            [24]  413 	push	ar1
      00017D C0 00            [24]  414 	push	ar0
      00017F 12r00r00         [24]  415 	lcall	_strncmp
      000182 E5 82            [12]  416 	mov	a,dpl
      000184 85 83 F0         [24]  417 	mov	b,dph
      000187 D0 00            [24]  418 	pop	ar0
      000189 D0 01            [24]  419 	pop	ar1
      00018B D0 07            [24]  420 	pop	ar7
      00018D 45 F0            [12]  421 	orl	a,b
      00018F 70 07            [24]  422 	jnz	00120$
      000191                        423 00114$:
                                    424 ;	strtoul.c:96: ptr += 2;
      000191 74 02            [12]  425 	mov	a,#0x02
      000193 28               [12]  426 	add	a,r0
      000194 F8               [12]  427 	mov	r0,a
      000195 E4               [12]  428 	clr	a
      000196 39               [12]  429 	addc	a,r1
      000197 F9               [12]  430 	mov	r1,a
      000198                        431 00120$:
                                    432 ;	strtoul.c:100: if (_isdigit (*ptr, base) < 0)
      000198 88 82            [24]  433 	mov	dpl,r0
      00019A 89 83            [24]  434 	mov	dph,r1
      00019C 8F F0            [24]  435 	mov	b,r7
      00019E 12r00r00         [24]  436 	lcall	__gptrget
      0001A1 FE               [12]  437 	mov	r6,a
      0001A2 AD*03            [24]  438 	mov	r5,_strtoul_PARM_3
      0001A4 8D*00            [24]  439 	mov	__isdigit_PARM_2,r5
      0001A6 8E 82            [24]  440 	mov	dpl,r6
      0001A8 C0 07            [24]  441 	push	ar7
      0001AA C0 05            [24]  442 	push	ar5
      0001AC C0 01            [24]  443 	push	ar1
      0001AE C0 00            [24]  444 	push	ar0
      0001B0 12r00r00         [24]  445 	lcall	__isdigit
      0001B3 AE 82            [24]  446 	mov	r6,dpl
      0001B5 D0 00            [24]  447 	pop	ar0
      0001B7 D0 01            [24]  448 	pop	ar1
      0001B9 D0 05            [24]  449 	pop	ar5
      0001BB D0 07            [24]  450 	pop	ar7
      0001BD EE               [12]  451 	mov	a,r6
      0001BE 30 E7 2A         [24]  452 	jnb	acc.7,00124$
                                    453 ;	strtoul.c:102: if (endptr)
      0001C1 E5*00            [12]  454 	mov	a,_strtoul_PARM_2
      0001C3 45*01            [12]  455 	orl	a,(_strtoul_PARM_2 + 1)
      0001C5 60 1D            [24]  456 	jz	00122$
                                    457 ;	strtoul.c:103: *endptr = (char*)nptr;
      0001C7 AB*00            [24]  458 	mov	r3,_strtoul_PARM_2
      0001C9 AC*01            [24]  459 	mov	r4,(_strtoul_PARM_2 + 1)
      0001CB AE*02            [24]  460 	mov	r6,(_strtoul_PARM_2 + 2)
      0001CD 8B 82            [24]  461 	mov	dpl,r3
      0001CF 8C 83            [24]  462 	mov	dph,r4
      0001D1 8E F0            [24]  463 	mov	b,r6
      0001D3 E5*05            [12]  464 	mov	a,_strtoul_nptr_65536_139
      0001D5 12r00r00         [24]  465 	lcall	__gptrput
      0001D8 A3               [24]  466 	inc	dptr
      0001D9 E5*06            [12]  467 	mov	a,(_strtoul_nptr_65536_139 + 1)
      0001DB 12r00r00         [24]  468 	lcall	__gptrput
      0001DE A3               [24]  469 	inc	dptr
      0001DF E5*07            [12]  470 	mov	a,(_strtoul_nptr_65536_139 + 2)
      0001E1 12r00r00         [24]  471 	lcall	__gptrput
      0001E4                        472 00122$:
                                    473 ;	strtoul.c:104: return (0);
      0001E4 90 00 00         [24]  474 	mov	dptr,#(0x00&0x00ff)
      0001E7 E4               [12]  475 	clr	a
      0001E8 F5 F0            [12]  476 	mov	b,a
      0001EA 22               [24]  477 	ret
      0001EB                        478 00124$:
                                    479 ;	strtoul.c:107: for (ret = 0;; ptr++)
      0001EB E4               [12]  480 	clr	a
      0001EC F5*08            [12]  481 	mov	_strtoul_ret_65536_140,a
      0001EE F5*09            [12]  482 	mov	(_strtoul_ret_65536_140 + 1),a
      0001F0 F5*0A            [12]  483 	mov	(_strtoul_ret_65536_140 + 2),a
      0001F2 F5*0B            [12]  484 	mov	(_strtoul_ret_65536_140 + 3),a
      0001F4 88*20            [24]  485 	mov	_strtoul_sloc0_1_0,r0
      0001F6 89*21            [24]  486 	mov	(_strtoul_sloc0_1_0 + 1),r1
      0001F8 8F*22            [24]  487 	mov	(_strtoul_sloc0_1_0 + 2),r7
      0001FA                        488 00136$:
                                    489 ;	strtoul.c:110: signed char digit = _isdigit (*ptr, base);
      0001FA 85*20 82         [24]  490 	mov	dpl,_strtoul_sloc0_1_0
      0001FD 85*21 83         [24]  491 	mov	dph,(_strtoul_sloc0_1_0 + 1)
      000200 85*22 F0         [24]  492 	mov	b,(_strtoul_sloc0_1_0 + 2)
      000203 12r00r00         [24]  493 	lcall	__gptrget
      000206 FB               [12]  494 	mov	r3,a
      000207 8D*00            [24]  495 	mov	__isdigit_PARM_2,r5
      000209 8B 82            [24]  496 	mov	dpl,r3
      00020B C0 05            [24]  497 	push	ar5
      00020D 12r00r00         [24]  498 	lcall	__isdigit
      000210 85 82*0F         [24]  499 	mov	_strtoul_digit_196608_147,dpl
      000213 D0 05            [24]  500 	pop	ar5
                                    501 ;	strtoul.c:112: if (digit < 0)
      000215 E5*0F            [12]  502 	mov	a,_strtoul_digit_196608_147
      000217 30 E7 03         [24]  503 	jnb	acc.7,00234$
      00021A 02r02rE5         [24]  504 	ljmp	00127$
      00021D                        505 00234$:
                                    506 ;	strtoul.c:117: range_error |= ckd_mul(&ret, ret, base);
      00021D C0 05            [24]  507 	push	ar5
      00021F 85*03*00         [24]  508 	mov	__mullonglong_PARM_2,_strtoul_PARM_3
      000222 E5*04            [12]  509 	mov	a,(_strtoul_PARM_3 + 1)
      000224 F5*01            [12]  510 	mov	(__mullonglong_PARM_2 + 1),a
      000226 33               [12]  511 	rlc	a
      000227 95 E0            [12]  512 	subb	a,acc
      000229 F5*02            [12]  513 	mov	(__mullonglong_PARM_2 + 2),a
      00022B F5*03            [12]  514 	mov	(__mullonglong_PARM_2 + 3),a
      00022D F5*04            [12]  515 	mov	(__mullonglong_PARM_2 + 4),a
      00022F F5*05            [12]  516 	mov	(__mullonglong_PARM_2 + 5),a
      000231 F5*06            [12]  517 	mov	(__mullonglong_PARM_2 + 6),a
      000233 F5*07            [12]  518 	mov	(__mullonglong_PARM_2 + 7),a
      000235 85*08*10         [24]  519 	mov	_strtoul___2621440014_262144_155,_strtoul_ret_65536_140
      000238 85*09*11         [24]  520 	mov	(_strtoul___2621440014_262144_155 + 1),(_strtoul_ret_65536_140 + 1)
      00023B 85*0A*12         [24]  521 	mov	(_strtoul___2621440014_262144_155 + 2),(_strtoul_ret_65536_140 + 2)
      00023E 85*0B*13         [24]  522 	mov	(_strtoul___2621440014_262144_155 + 3),(_strtoul_ret_65536_140 + 3)
      000241 75*14 00         [24]  523 	mov	(_strtoul___2621440014_262144_155 + 4),#0x00
      000244 75*15 00         [24]  524 	mov	(_strtoul___2621440014_262144_155 + 5),#0x00
      000247 75*16 00         [24]  525 	mov	(_strtoul___2621440014_262144_155 + 6),#0x00
      00024A 75*17 00         [24]  526 	mov	(_strtoul___2621440014_262144_155 + 7),#0x00
                                    527 ;	../../device/include/stdckdint.h:76: inline _Bool __ckd_mul_ulong __CKD_DEFAULT_IMPL(unsigned long, *)
      00024D C0 05            [24]  528 	push	ar5
      00024F 85*10 82         [24]  529 	mov	dpl,_strtoul___2621440014_262144_155
      000252 85*11 83         [24]  530 	mov	dph,(_strtoul___2621440014_262144_155 + 1)
      000255 85*12 F0         [24]  531 	mov	b,(_strtoul___2621440014_262144_155 + 2)
      000258 E5*13            [12]  532 	mov	a,(_strtoul___2621440014_262144_155 + 3)
      00025A AC*14            [24]  533 	mov	r4,(_strtoul___2621440014_262144_155 + 4)
      00025C AD*15            [24]  534 	mov	r5,(_strtoul___2621440014_262144_155 + 5)
      00025E AE*16            [24]  535 	mov	r6,(_strtoul___2621440014_262144_155 + 6)
      000260 AF*17            [24]  536 	mov	r7,(_strtoul___2621440014_262144_155 + 7)
      000262 12r00r00         [24]  537 	lcall	__mullonglong
      000265 85 82*18         [24]  538 	mov	_strtoul_result_393216_157,dpl
      000268 85 83*19         [24]  539 	mov	(_strtoul_result_393216_157 + 1),dph
      00026B 85 F0*1A         [24]  540 	mov	(_strtoul_result_393216_157 + 2),b
      00026E F5*1B            [12]  541 	mov	(_strtoul_result_393216_157 + 3),a
      000270 8C*1C            [24]  542 	mov	(_strtoul_result_393216_157 + 4),r4
      000272 8D*1D            [24]  543 	mov	(_strtoul_result_393216_157 + 5),r5
      000274 8E*1E            [24]  544 	mov	(_strtoul_result_393216_157 + 6),r6
      000276 8F*1F            [24]  545 	mov	(_strtoul_result_393216_157 + 7),r7
      000278 D0 05            [24]  546 	pop	ar5
      00027A A9*18            [24]  547 	mov	r1,_strtoul_result_393216_157
      00027C AA*19            [24]  548 	mov	r2,(_strtoul_result_393216_157 + 1)
      00027E AB*1A            [24]  549 	mov	r3,(_strtoul_result_393216_157 + 2)
      000280 AF*1B            [24]  550 	mov	r7,(_strtoul_result_393216_157 + 3)
      000282 89*08            [24]  551 	mov	(_strtoul_ret_65536_140 + 0),r1
      000284 8A*09            [24]  552 	mov	(_strtoul_ret_65536_140 + 1),r2
      000286 8B*0A            [24]  553 	mov	(_strtoul_ret_65536_140 + 2),r3
      000288 8F*0B            [24]  554 	mov	(_strtoul_ret_65536_140 + 3),r7
      00028A 8F 00            [24]  555 	mov	ar0,r7
      00028C E4               [12]  556 	clr	a
      00028D FC               [12]  557 	mov	r4,a
      00028E FD               [12]  558 	mov	r5,a
      00028F FE               [12]  559 	mov	r6,a
      000290 FF               [12]  560 	mov	r7,a
      000291 E9               [12]  561 	mov	a,r1
      000292 B5*18 1F         [24]  562 	cjne	a,_strtoul_result_393216_157,00235$
      000295 EA               [12]  563 	mov	a,r2
      000296 B5*19 1B         [24]  564 	cjne	a,(_strtoul_result_393216_157 + 1),00235$
      000299 EB               [12]  565 	mov	a,r3
      00029A B5*1A 17         [24]  566 	cjne	a,(_strtoul_result_393216_157 + 2),00235$
      00029D E8               [12]  567 	mov	a,r0
      00029E B5*1B 13         [24]  568 	cjne	a,(_strtoul_result_393216_157 + 3),00235$
      0002A1 EC               [12]  569 	mov	a,r4
      0002A2 B5*1C 0F         [24]  570 	cjne	a,(_strtoul_result_393216_157 + 4),00235$
      0002A5 ED               [12]  571 	mov	a,r5
      0002A6 B5*1D 0B         [24]  572 	cjne	a,(_strtoul_result_393216_157 + 5),00235$
      0002A9 EE               [12]  573 	mov	a,r6
      0002AA B5*1E 07         [24]  574 	cjne	a,(_strtoul_result_393216_157 + 6),00235$
      0002AD EF               [12]  575 	mov	a,r7
      0002AE B5*1F 03         [24]  576 	cjne	a,(_strtoul_result_393216_157 + 7),00235$
      0002B1 D3               [12]  577 	setb	c
      0002B2 80 01            [24]  578 	sjmp	00236$
      0002B4                        579 00235$:
      0002B4 C3               [12]  580 	clr	c
      0002B5                        581 00236$:
      0002B5 92*00            [24]  582 	mov  _strtoul_sloc1_1_0,c
      0002B7 B3               [12]  583 	cpl	c
      0002B8 E4               [12]  584 	clr	a
      0002B9 33               [12]  585 	rlc	a
                                    586 ;	strtoul.c:117: range_error |= ckd_mul(&ret, ret, base);
      0002BA F5*0E            [12]  587 	mov	_strtoul___2621440012_262144_147,a
      0002BC 42*0C            [12]  588 	orl	_strtoul_range_error_65536_140,a
                                    589 ;	strtoul.c:125: ret += (unsigned char)digit;
      0002BE AB*0F            [24]  590 	mov	r3,_strtoul_digit_196608_147
      0002C0 E4               [12]  591 	clr	a
      0002C1 FF               [12]  592 	mov	r7,a
      0002C2 FE               [12]  593 	mov	r6,a
      0002C3 FD               [12]  594 	mov	r5,a
      0002C4 EB               [12]  595 	mov	a,r3
      0002C5 25*08            [12]  596 	add	a,_strtoul_ret_65536_140
      0002C7 F5*08            [12]  597 	mov	_strtoul_ret_65536_140,a
      0002C9 EF               [12]  598 	mov	a,r7
      0002CA 35*09            [12]  599 	addc	a,(_strtoul_ret_65536_140 + 1)
      0002CC F5*09            [12]  600 	mov	(_strtoul_ret_65536_140 + 1),a
      0002CE EE               [12]  601 	mov	a,r6
      0002CF 35*0A            [12]  602 	addc	a,(_strtoul_ret_65536_140 + 2)
      0002D1 F5*0A            [12]  603 	mov	(_strtoul_ret_65536_140 + 2),a
      0002D3 ED               [12]  604 	mov	a,r5
      0002D4 35*0B            [12]  605 	addc	a,(_strtoul_ret_65536_140 + 3)
      0002D6 F5*0B            [12]  606 	mov	(_strtoul_ret_65536_140 + 3),a
                                    607 ;	strtoul.c:107: for (ret = 0;; ptr++)
      0002D8 05*20            [12]  608 	inc	_strtoul_sloc0_1_0
      0002DA E4               [12]  609 	clr	a
      0002DB B5*20 02         [24]  610 	cjne	a,_strtoul_sloc0_1_0,00237$
      0002DE 05*21            [12]  611 	inc	(_strtoul_sloc0_1_0 + 1)
      0002E0                        612 00237$:
      0002E0 D0 05            [24]  613 	pop	ar5
      0002E2 02r01rFA         [24]  614 	ljmp	00136$
      0002E5                        615 00127$:
                                    616 ;	strtoul.c:128: if (endptr)
      0002E5 E5*00            [12]  617 	mov	a,_strtoul_PARM_2
      0002E7 45*01            [12]  618 	orl	a,(_strtoul_PARM_2 + 1)
      0002E9 60 1D            [24]  619 	jz	00129$
                                    620 ;	strtoul.c:129: *endptr = (char*)ptr;
      0002EB AD*00            [24]  621 	mov	r5,_strtoul_PARM_2
      0002ED AE*01            [24]  622 	mov	r6,(_strtoul_PARM_2 + 1)
      0002EF AF*02            [24]  623 	mov	r7,(_strtoul_PARM_2 + 2)
      0002F1 8D 82            [24]  624 	mov	dpl,r5
      0002F3 8E 83            [24]  625 	mov	dph,r6
      0002F5 8F F0            [24]  626 	mov	b,r7
      0002F7 E5*20            [12]  627 	mov	a,_strtoul_sloc0_1_0
      0002F9 12r00r00         [24]  628 	lcall	__gptrput
      0002FC A3               [24]  629 	inc	dptr
      0002FD E5*21            [12]  630 	mov	a,(_strtoul_sloc0_1_0 + 1)
      0002FF 12r00r00         [24]  631 	lcall	__gptrput
      000302 A3               [24]  632 	inc	dptr
      000303 E5*22            [12]  633 	mov	a,(_strtoul_sloc0_1_0 + 2)
      000305 12r00r00         [24]  634 	lcall	__gptrput
      000308                        635 00129$:
                                    636 ;	strtoul.c:131: if (range_error)
      000308 E5*0C            [12]  637 	mov	a,_strtoul_range_error_65536_140
      00030A 60 0E            [24]  638 	jz	00131$
                                    639 ;	strtoul.c:133: errno = ERANGE;
      00030C 75*00 22         [24]  640 	mov	_errno,#0x22
      00030F 75*01 00         [24]  641 	mov	(_errno + 1),#0x00
                                    642 ;	strtoul.c:134: return (ULONG_MAX);
      000312 90 FF FF         [24]  643 	mov	dptr,#0xffff
      000315 74 FF            [12]  644 	mov	a,#0xff
      000317 F5 F0            [12]  645 	mov	b,a
      000319 22               [24]  646 	ret
      00031A                        647 00131$:
                                    648 ;	strtoul.c:137: return (neg ? -ret : ret);
      00031A E5*0D            [12]  649 	mov	a,_strtoul_neg_65536_140
      00031C 60 13            [24]  650 	jz	00143$
      00031E C3               [12]  651 	clr	c
      00031F E4               [12]  652 	clr	a
      000320 95*08            [12]  653 	subb	a,_strtoul_ret_65536_140
      000322 FC               [12]  654 	mov	r4,a
      000323 E4               [12]  655 	clr	a
      000324 95*09            [12]  656 	subb	a,(_strtoul_ret_65536_140 + 1)
      000326 FD               [12]  657 	mov	r5,a
      000327 E4               [12]  658 	clr	a
      000328 95*0A            [12]  659 	subb	a,(_strtoul_ret_65536_140 + 2)
      00032A FE               [12]  660 	mov	r6,a
      00032B E4               [12]  661 	clr	a
      00032C 95*0B            [12]  662 	subb	a,(_strtoul_ret_65536_140 + 3)
      00032E FF               [12]  663 	mov	r7,a
      00032F 80 08            [24]  664 	sjmp	00144$
      000331                        665 00143$:
      000331 AC*08            [24]  666 	mov	r4,_strtoul_ret_65536_140
      000333 AD*09            [24]  667 	mov	r5,(_strtoul_ret_65536_140 + 1)
      000335 AE*0A            [24]  668 	mov	r6,(_strtoul_ret_65536_140 + 2)
      000337 AF*0B            [24]  669 	mov	r7,(_strtoul_ret_65536_140 + 3)
      000339                        670 00144$:
      000339 8C 82            [24]  671 	mov	dpl,r4
      00033B 8D 83            [24]  672 	mov	dph,r5
      00033D 8E F0            [24]  673 	mov	b,r6
      00033F EF               [12]  674 	mov	a,r7
                                    675 ;	strtoul.c:138: }
      000340 22               [24]  676 	ret
                                    677 	.area CSEG    (CODE)
                                    678 	.area CONST   (CODE)
                                    679 	.area CONST   (CODE)
      000000                        680 ___str_0:
      000000 30 78                  681 	.ascii "0x"
      000002 00                     682 	.db 0x00
                                    683 	.area CSEG    (CODE)
                                    684 	.area CONST   (CODE)
      000003                        685 ___str_1:
      000003 30 58                  686 	.ascii "0X"
      000005 00                     687 	.db 0x00
                                    688 	.area CSEG    (CODE)
                                    689 	.area XINIT   (CODE)
                                    690 	.area CABS    (ABS,CODE)
