                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __stdc_bit_widthull
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___stdc_bit_widthull
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 	.area	OSEG    (OVR,DATA)
      000000                         35 ___stdc_bit_widthull_value_65536_9:
      000000                         36 	.ds 8
      000008                         37 ___stdc_bit_widthull_i_131072_11:
      000008                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; uninitialized external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; initialized external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function '__stdc_bit_widthull'
                                     96 ;------------------------------------------------------------
                                     97 ;value                     Allocated with name '___stdc_bit_widthull_value_65536_9'
                                     98 ;width                     Allocated to registers r7 
                                     99 ;i                         Allocated with name '___stdc_bit_widthull_i_131072_11'
                                    100 ;------------------------------------------------------------
                                    101 ;	__stdc_bit_widthull.c:37: int_fast8_t __stdc_bit_widthull(unsigned long long value)
                                    102 ;	-----------------------------------------
                                    103 ;	 function __stdc_bit_widthull
                                    104 ;	-----------------------------------------
      000000                        105 ___stdc_bit_widthull:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 85 82*00         [24]  114 	mov	___stdc_bit_widthull_value_65536_9,dpl
      000003 85 83*01         [24]  115 	mov	(___stdc_bit_widthull_value_65536_9 + 1),dph
      000006 85 F0*02         [24]  116 	mov	(___stdc_bit_widthull_value_65536_9 + 2),b
      000009 F5*03            [12]  117 	mov	(___stdc_bit_widthull_value_65536_9 + 3),a
      00000B 8C*04            [24]  118 	mov	(___stdc_bit_widthull_value_65536_9 + 4),r4
      00000D 8D*05            [24]  119 	mov	(___stdc_bit_widthull_value_65536_9 + 5),r5
      00000F 8E*06            [24]  120 	mov	(___stdc_bit_widthull_value_65536_9 + 6),r6
      000011 8F*07            [24]  121 	mov	(___stdc_bit_widthull_value_65536_9 + 7),r7
                                    122 ;	__stdc_bit_widthull.c:39: int_fast8_t width = 0;
      000013 7F 00            [12]  123 	mov	r7,#0x00
                                    124 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      000015 8F*08            [24]  125 	mov	___stdc_bit_widthull_i_131072_11,r7
      000017                        126 00105$:
      000017 74 C0            [12]  127 	mov	a,#0x100 - 0x40
      000019 25*08            [12]  128 	add	a,___stdc_bit_widthull_i_131072_11
      00001B 40 69            [24]  129 	jc	00103$
                                    130 ;	__stdc_bit_widthull.c:41: if(value & (1ull << i))
      00001D C0 07            [24]  131 	push	ar7
      00001F 85*08 F0         [24]  132 	mov	b,___stdc_bit_widthull_i_131072_11
      000022 05 F0            [12]  133 	inc	b
      000024 78 01            [12]  134 	mov	r0,#0x01
      000026 79 00            [12]  135 	mov	r1,#0x00
      000028 7A 00            [12]  136 	mov	r2,#0x00
      00002A 7B 00            [12]  137 	mov	r3,#0x00
      00002C 7C 00            [12]  138 	mov	r4,#0x00
      00002E 7D 00            [12]  139 	mov	r5,#0x00
      000030 7E 00            [12]  140 	mov	r6,#0x00
      000032 7F 00            [12]  141 	mov	r7,#0x00
      000034 80 18            [24]  142 	sjmp	00124$
      000036                        143 00123$:
      000036 E8               [12]  144 	mov	a,r0
      000037 28               [12]  145 	add	a,r0
      000038 F8               [12]  146 	mov	r0,a
      000039 E9               [12]  147 	mov	a,r1
      00003A 33               [12]  148 	rlc	a
      00003B F9               [12]  149 	mov	r1,a
      00003C EA               [12]  150 	mov	a,r2
      00003D 33               [12]  151 	rlc	a
      00003E FA               [12]  152 	mov	r2,a
      00003F EB               [12]  153 	mov	a,r3
      000040 33               [12]  154 	rlc	a
      000041 FB               [12]  155 	mov	r3,a
      000042 EC               [12]  156 	mov	a,r4
      000043 33               [12]  157 	rlc	a
      000044 FC               [12]  158 	mov	r4,a
      000045 ED               [12]  159 	mov	a,r5
      000046 33               [12]  160 	rlc	a
      000047 FD               [12]  161 	mov	r5,a
      000048 EE               [12]  162 	mov	a,r6
      000049 33               [12]  163 	rlc	a
      00004A FE               [12]  164 	mov	r6,a
      00004B EF               [12]  165 	mov	a,r7
      00004C 33               [12]  166 	rlc	a
      00004D FF               [12]  167 	mov	r7,a
      00004E                        168 00124$:
      00004E D5 F0 E5         [24]  169 	djnz	b,00123$
      000051 E5*00            [12]  170 	mov	a,___stdc_bit_widthull_value_65536_9
      000053 52 00            [12]  171 	anl	ar0,a
      000055 E5*01            [12]  172 	mov	a,(___stdc_bit_widthull_value_65536_9 + 1)
      000057 52 01            [12]  173 	anl	ar1,a
      000059 E5*02            [12]  174 	mov	a,(___stdc_bit_widthull_value_65536_9 + 2)
      00005B 52 02            [12]  175 	anl	ar2,a
      00005D E5*03            [12]  176 	mov	a,(___stdc_bit_widthull_value_65536_9 + 3)
      00005F 52 03            [12]  177 	anl	ar3,a
      000061 E5*04            [12]  178 	mov	a,(___stdc_bit_widthull_value_65536_9 + 4)
      000063 52 04            [12]  179 	anl	ar4,a
      000065 E5*05            [12]  180 	mov	a,(___stdc_bit_widthull_value_65536_9 + 5)
      000067 52 05            [12]  181 	anl	ar5,a
      000069 E5*06            [12]  182 	mov	a,(___stdc_bit_widthull_value_65536_9 + 6)
      00006B 52 06            [12]  183 	anl	ar6,a
      00006D E5*07            [12]  184 	mov	a,(___stdc_bit_widthull_value_65536_9 + 7)
      00006F 52 07            [12]  185 	anl	ar7,a
      000071 E8               [12]  186 	mov	a,r0
      000072 49               [12]  187 	orl	a,r1
      000073 4A               [12]  188 	orl	a,r2
      000074 4B               [12]  189 	orl	a,r3
      000075 4C               [12]  190 	orl	a,r4
      000076 4D               [12]  191 	orl	a,r5
      000077 4E               [12]  192 	orl	a,r6
      000078 4F               [12]  193 	orl	a,r7
      000079 D0 07            [24]  194 	pop	ar7
      00007B 60 05            [24]  195 	jz	00106$
                                    196 ;	__stdc_bit_widthull.c:42: width = (i + 1);
      00007D E5*08            [12]  197 	mov	a,___stdc_bit_widthull_i_131072_11
      00007F FE               [12]  198 	mov	r6,a
      000080 04               [12]  199 	inc	a
      000081 FF               [12]  200 	mov	r7,a
      000082                        201 00106$:
                                    202 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      000082 05*08            [12]  203 	inc	___stdc_bit_widthull_i_131072_11
      000084 80 91            [24]  204 	sjmp	00105$
      000086                        205 00103$:
                                    206 ;	__stdc_bit_widthull.c:43: return width;
      000086 8F 82            [24]  207 	mov	dpl,r7
                                    208 ;	__stdc_bit_widthull.c:44: }
      000088 22               [24]  209 	ret
                                    210 	.area CSEG    (CODE)
                                    211 	.area CONST   (CODE)
                                    212 	.area XINIT   (CODE)
                                    213 	.area CABS    (ABS,CODE)
