                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbrtoc16
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbrtowc
                                     12 	.globl _mbrtoc16_PARM_4
                                     13 	.globl _mbrtoc16_PARM_3
                                     14 	.globl _mbrtoc16_PARM_2
                                     15 	.globl _mbrtoc16
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _mbrtoc16_sps_65536_16:
      000000                         36 	.ds 3
      000003                         37 _mbrtoc16_PARM_2:
      000003                         38 	.ds 3
      000006                         39 _mbrtoc16_PARM_3:
      000006                         40 	.ds 2
      000008                         41 _mbrtoc16_PARM_4:
      000008                         42 	.ds 3
      00000B                         43 _mbrtoc16_pc16_65536_15:
      00000B                         44 	.ds 3
      00000E                         45 _mbrtoc16_codepoint_65536_16:
      00000E                         46 	.ds 4
      000012                         47 _mbrtoc16_ret_65536_16:
      000012                         48 	.ds 2
      000014                         49 _mbrtoc16_low_surrogate_65536_16:
      000014                         50 	.ds 2
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; uninitialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; absolute external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XABS    (ABS,XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; initialized external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XISEG   (XDATA)
                                     83 	.area HOME    (CODE)
                                     84 	.area GSINIT0 (CODE)
                                     85 	.area GSINIT1 (CODE)
                                     86 	.area GSINIT2 (CODE)
                                     87 	.area GSINIT3 (CODE)
                                     88 	.area GSINIT4 (CODE)
                                     89 	.area GSINIT5 (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area CSEG    (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; global & static initialisations
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 	.area GSFINAL (CODE)
                                     99 	.area GSINIT  (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; Home
                                    102 ;--------------------------------------------------------
                                    103 	.area HOME    (CODE)
                                    104 	.area HOME    (CODE)
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area CSEG    (CODE)
                                    109 ;------------------------------------------------------------
                                    110 ;Allocation info for local variables in function 'mbrtoc16'
                                    111 ;------------------------------------------------------------
                                    112 ;sps                       Allocated with name '_mbrtoc16_sps_65536_16'
                                    113 ;s                         Allocated with name '_mbrtoc16_PARM_2'
                                    114 ;n                         Allocated with name '_mbrtoc16_PARM_3'
                                    115 ;ps                        Allocated with name '_mbrtoc16_PARM_4'
                                    116 ;pc16                      Allocated with name '_mbrtoc16_pc16_65536_15'
                                    117 ;codepoint                 Allocated with name '_mbrtoc16_codepoint_65536_16'
                                    118 ;ret                       Allocated with name '_mbrtoc16_ret_65536_16'
                                    119 ;low_surrogate             Allocated with name '_mbrtoc16_low_surrogate_65536_16'
                                    120 ;------------------------------------------------------------
                                    121 ;	mbrtoc16.c:34: size_t mbrtoc16(char16_t *restrict pc16, const char *restrict s, size_t n, mbstate_t *restrict ps)
                                    122 ;	-----------------------------------------
                                    123 ;	 function mbrtoc16
                                    124 ;	-----------------------------------------
      000000                        125 _mbrtoc16:
                           000007   126 	ar7 = 0x07
                           000006   127 	ar6 = 0x06
                           000005   128 	ar5 = 0x05
                           000004   129 	ar4 = 0x04
                           000003   130 	ar3 = 0x03
                           000002   131 	ar2 = 0x02
                           000001   132 	ar1 = 0x01
                           000000   133 	ar0 = 0x00
      000000 85 82*0B         [24]  134 	mov	_mbrtoc16_pc16_65536_15,dpl
      000003 85 83*0C         [24]  135 	mov	(_mbrtoc16_pc16_65536_15 + 1),dph
      000006 85 F0*0D         [24]  136 	mov	(_mbrtoc16_pc16_65536_15 + 2),b
                                    137 ;	mbrtoc16.c:41: if(!s)
      000009 E5*03            [12]  138 	mov	a,_mbrtoc16_PARM_2
      00000B 45*04            [12]  139 	orl	a,(_mbrtoc16_PARM_2 + 1)
      00000D 70 18            [24]  140 	jnz	00102$
                                    141 ;	mbrtoc16.c:42: return(mbrtoc16(0, "", 1, ps));
      00000F 75*03r00         [24]  142 	mov	_mbrtoc16_PARM_2,#___str_0
      000012 75*04s00         [24]  143 	mov	(_mbrtoc16_PARM_2 + 1),#(___str_0 >> 8)
      000015 75*05 80         [24]  144 	mov	(_mbrtoc16_PARM_2 + 2),#0x80
      000018 75*06 01         [24]  145 	mov	_mbrtoc16_PARM_3,#0x01
      00001B 75*07 00         [24]  146 	mov	(_mbrtoc16_PARM_3 + 1),#0x00
      00001E 90 00 00         [24]  147 	mov	dptr,#0x0000
      000021 75 F0 00         [24]  148 	mov	b,#0x00
      000024 02r00r00         [24]  149 	ljmp	_mbrtoc16
      000027                        150 00102$:
                                    151 ;	mbrtoc16.c:44: if(!ps)
      000027 E5*08            [12]  152 	mov	a,_mbrtoc16_PARM_4
      000029 45*09            [12]  153 	orl	a,(_mbrtoc16_PARM_4 + 1)
                                    154 ;	mbrtoc16.c:45: ps = &sps;
      00002B 70 08            [24]  155 	jnz	00104$
      00002D 75*08r00         [24]  156 	mov	_mbrtoc16_PARM_4,#_mbrtoc16_sps_65536_16
      000030 F5*09            [12]  157 	mov	(_mbrtoc16_PARM_4 + 1),a
      000032 75*0A 40         [24]  158 	mov	(_mbrtoc16_PARM_4 + 2),#0x40
      000035                        159 00104$:
                                    160 ;	mbrtoc16.c:47: if(!ps->c[0] && (ps->c[1] || ps->c[2]))
      000035 AA*08            [24]  161 	mov	r2,_mbrtoc16_PARM_4
      000037 AB*09            [24]  162 	mov	r3,(_mbrtoc16_PARM_4 + 1)
      000039 AC*0A            [24]  163 	mov	r4,(_mbrtoc16_PARM_4 + 2)
      00003B 8A 82            [24]  164 	mov	dpl,r2
      00003D 8B 83            [24]  165 	mov	dph,r3
      00003F 8C F0            [24]  166 	mov	b,r4
      000041 12r00r00         [24]  167 	lcall	__gptrget
      000044 60 03            [24]  168 	jz	00159$
      000046 02r00rEA         [24]  169 	ljmp	00108$
      000049                        170 00159$:
      000049 74 01            [12]  171 	mov	a,#0x01
      00004B 2A               [12]  172 	add	a,r2
      00004C F8               [12]  173 	mov	r0,a
      00004D E4               [12]  174 	clr	a
      00004E 3B               [12]  175 	addc	a,r3
      00004F F9               [12]  176 	mov	r1,a
      000050 8C 07            [24]  177 	mov	ar7,r4
      000052 88 82            [24]  178 	mov	dpl,r0
      000054 89 83            [24]  179 	mov	dph,r1
      000056 8F F0            [24]  180 	mov	b,r7
      000058 12r00r00         [24]  181 	lcall	__gptrget
      00005B 70 15            [24]  182 	jnz	00107$
      00005D 74 02            [12]  183 	mov	a,#0x02
      00005F 2A               [12]  184 	add	a,r2
      000060 FA               [12]  185 	mov	r2,a
      000061 E4               [12]  186 	clr	a
      000062 3B               [12]  187 	addc	a,r3
      000063 FB               [12]  188 	mov	r3,a
      000064 8A 82            [24]  189 	mov	dpl,r2
      000066 8B 83            [24]  190 	mov	dph,r3
      000068 8C F0            [24]  191 	mov	b,r4
      00006A 12r00r00         [24]  192 	lcall	__gptrget
      00006D 70 03            [24]  193 	jnz	00161$
      00006F 02r00rEA         [24]  194 	ljmp	00108$
      000072                        195 00161$:
      000072                        196 00107$:
                                    197 ;	mbrtoc16.c:49: if(pc16)
      000072 E5*0B            [12]  198 	mov	a,_mbrtoc16_pc16_65536_15
      000074 45*0C            [12]  199 	orl	a,(_mbrtoc16_pc16_65536_15 + 1)
      000076 60 45            [24]  200 	jz	00106$
                                    201 ;	mbrtoc16.c:50: *pc16 = ps->c[1] + (ps->c[2] << 8);
      000078 AD*08            [24]  202 	mov	r5,_mbrtoc16_PARM_4
      00007A AE*09            [24]  203 	mov	r6,(_mbrtoc16_PARM_4 + 1)
      00007C AF*0A            [24]  204 	mov	r7,(_mbrtoc16_PARM_4 + 2)
      00007E 74 01            [12]  205 	mov	a,#0x01
      000080 2D               [12]  206 	add	a,r5
      000081 FA               [12]  207 	mov	r2,a
      000082 E4               [12]  208 	clr	a
      000083 3E               [12]  209 	addc	a,r6
      000084 FB               [12]  210 	mov	r3,a
      000085 8F 04            [24]  211 	mov	ar4,r7
      000087 8A 82            [24]  212 	mov	dpl,r2
      000089 8B 83            [24]  213 	mov	dph,r3
      00008B 8C F0            [24]  214 	mov	b,r4
      00008D 12r00r00         [24]  215 	lcall	__gptrget
      000090 FA               [12]  216 	mov	r2,a
      000091 7C 00            [12]  217 	mov	r4,#0x00
      000093 74 02            [12]  218 	mov	a,#0x02
      000095 2D               [12]  219 	add	a,r5
      000096 FD               [12]  220 	mov	r5,a
      000097 E4               [12]  221 	clr	a
      000098 3E               [12]  222 	addc	a,r6
      000099 FE               [12]  223 	mov	r6,a
      00009A 8D 82            [24]  224 	mov	dpl,r5
      00009C 8E 83            [24]  225 	mov	dph,r6
      00009E 8F F0            [24]  226 	mov	b,r7
      0000A0 12r00r00         [24]  227 	lcall	__gptrget
      0000A3 FF               [12]  228 	mov	r7,a
      0000A4 E4               [12]  229 	clr	a
      0000A5 FD               [12]  230 	mov	r5,a
      0000A6 2A               [12]  231 	add	a,r2
      0000A7 FA               [12]  232 	mov	r2,a
      0000A8 EF               [12]  233 	mov	a,r7
      0000A9 3C               [12]  234 	addc	a,r4
      0000AA FC               [12]  235 	mov	r4,a
      0000AB 85*0B 82         [24]  236 	mov	dpl,_mbrtoc16_pc16_65536_15
      0000AE 85*0C 83         [24]  237 	mov	dph,(_mbrtoc16_pc16_65536_15 + 1)
      0000B1 85*0D F0         [24]  238 	mov	b,(_mbrtoc16_pc16_65536_15 + 2)
      0000B4 EA               [12]  239 	mov	a,r2
      0000B5 12r00r00         [24]  240 	lcall	__gptrput
      0000B8 A3               [24]  241 	inc	dptr
      0000B9 EC               [12]  242 	mov	a,r4
      0000BA 12r00r00         [24]  243 	lcall	__gptrput
      0000BD                        244 00106$:
                                    245 ;	mbrtoc16.c:51: ps->c[1] = ps->c[2] = 0;
      0000BD AD*08            [24]  246 	mov	r5,_mbrtoc16_PARM_4
      0000BF AE*09            [24]  247 	mov	r6,(_mbrtoc16_PARM_4 + 1)
      0000C1 AF*0A            [24]  248 	mov	r7,(_mbrtoc16_PARM_4 + 2)
      0000C3 74 01            [12]  249 	mov	a,#0x01
      0000C5 2D               [12]  250 	add	a,r5
      0000C6 FA               [12]  251 	mov	r2,a
      0000C7 E4               [12]  252 	clr	a
      0000C8 3E               [12]  253 	addc	a,r6
      0000C9 FB               [12]  254 	mov	r3,a
      0000CA 8F 04            [24]  255 	mov	ar4,r7
      0000CC 74 02            [12]  256 	mov	a,#0x02
      0000CE 2D               [12]  257 	add	a,r5
      0000CF FD               [12]  258 	mov	r5,a
      0000D0 E4               [12]  259 	clr	a
      0000D1 3E               [12]  260 	addc	a,r6
      0000D2 FE               [12]  261 	mov	r6,a
      0000D3 8D 82            [24]  262 	mov	dpl,r5
      0000D5 8E 83            [24]  263 	mov	dph,r6
      0000D7 8F F0            [24]  264 	mov	b,r7
      0000D9 E4               [12]  265 	clr	a
      0000DA 12r00r00         [24]  266 	lcall	__gptrput
      0000DD 8A 82            [24]  267 	mov	dpl,r2
      0000DF 8B 83            [24]  268 	mov	dph,r3
      0000E1 8C F0            [24]  269 	mov	b,r4
      0000E3 12r00r00         [24]  270 	lcall	__gptrput
                                    271 ;	mbrtoc16.c:52: return(-3);
      0000E6 90 FF FD         [24]  272 	mov	dptr,#0xfffd
      0000E9 22               [24]  273 	ret
      0000EA                        274 00108$:
                                    275 ;	mbrtoc16.c:55: ret = mbrtowc(&codepoint, s, n, ps);
      0000EA 85*03*00         [24]  276 	mov	_mbrtowc_PARM_2,_mbrtoc16_PARM_2
      0000ED 85*04*01         [24]  277 	mov	(_mbrtowc_PARM_2 + 1),(_mbrtoc16_PARM_2 + 1)
      0000F0 85*05*02         [24]  278 	mov	(_mbrtowc_PARM_2 + 2),(_mbrtoc16_PARM_2 + 2)
      0000F3 85*06*00         [24]  279 	mov	_mbrtowc_PARM_3,_mbrtoc16_PARM_3
      0000F6 85*07*01         [24]  280 	mov	(_mbrtowc_PARM_3 + 1),(_mbrtoc16_PARM_3 + 1)
      0000F9 85*08*00         [24]  281 	mov	_mbrtowc_PARM_4,_mbrtoc16_PARM_4
      0000FC 85*09*01         [24]  282 	mov	(_mbrtowc_PARM_4 + 1),(_mbrtoc16_PARM_4 + 1)
      0000FF 85*0A*02         [24]  283 	mov	(_mbrtowc_PARM_4 + 2),(_mbrtoc16_PARM_4 + 2)
      000102 90r00r0E         [24]  284 	mov	dptr,#_mbrtoc16_codepoint_65536_16
      000105 75 F0 40         [24]  285 	mov	b,#0x40
      000108 12r00r00         [24]  286 	lcall	_mbrtowc
      00010B 85 82*12         [24]  287 	mov	_mbrtoc16_ret_65536_16,dpl
      00010E 85 83*13         [24]  288 	mov	(_mbrtoc16_ret_65536_16 + 1),dph
                                    289 ;	mbrtoc16.c:57: if(ret > MB_LEN_MAX)
      000111 C3               [12]  290 	clr	c
      000112 74 04            [12]  291 	mov	a,#0x04
      000114 95*12            [12]  292 	subb	a,_mbrtoc16_ret_65536_16
      000116 E4               [12]  293 	clr	a
      000117 95*13            [12]  294 	subb	a,(_mbrtoc16_ret_65536_16 + 1)
      000119 50 07            [24]  295 	jnc	00112$
                                    296 ;	mbrtoc16.c:58: return(ret);
      00011B 85*12 82         [24]  297 	mov	dpl,_mbrtoc16_ret_65536_16
      00011E 85*13 83         [24]  298 	mov	dph,(_mbrtoc16_ret_65536_16 + 1)
      000121 22               [24]  299 	ret
      000122                        300 00112$:
                                    301 ;	mbrtoc16.c:60: if (codepoint <= 0xffff) // Basic multilingual plane
      000122 C3               [12]  302 	clr	c
      000123 74 FF            [12]  303 	mov	a,#0xff
      000125 95*0E            [12]  304 	subb	a,_mbrtoc16_codepoint_65536_16
      000127 74 FF            [12]  305 	mov	a,#0xff
      000129 95*0F            [12]  306 	subb	a,(_mbrtoc16_codepoint_65536_16 + 1)
      00012B E4               [12]  307 	clr	a
      00012C 95*10            [12]  308 	subb	a,(_mbrtoc16_codepoint_65536_16 + 2)
      00012E E4               [12]  309 	clr	a
      00012F 95*11            [12]  310 	subb	a,(_mbrtoc16_codepoint_65536_16 + 3)
      000131 40 23            [24]  311 	jc	00116$
                                    312 ;	mbrtoc16.c:62: if(pc16)
      000133 E5*0B            [12]  313 	mov	a,_mbrtoc16_pc16_65536_15
      000135 45*0C            [12]  314 	orl	a,(_mbrtoc16_pc16_65536_15 + 1)
      000137 60 16            [24]  315 	jz	00114$
                                    316 ;	mbrtoc16.c:63: *pc16 = codepoint;
      000139 AD*0E            [24]  317 	mov	r5,_mbrtoc16_codepoint_65536_16
      00013B AC*0F            [24]  318 	mov	r4,(_mbrtoc16_codepoint_65536_16 + 1)
      00013D 85*0B 82         [24]  319 	mov	dpl,_mbrtoc16_pc16_65536_15
      000140 85*0C 83         [24]  320 	mov	dph,(_mbrtoc16_pc16_65536_15 + 1)
      000143 85*0D F0         [24]  321 	mov	b,(_mbrtoc16_pc16_65536_15 + 2)
      000146 ED               [12]  322 	mov	a,r5
      000147 12r00r00         [24]  323 	lcall	__gptrput
      00014A A3               [24]  324 	inc	dptr
      00014B EC               [12]  325 	mov	a,r4
      00014C 12r00r00         [24]  326 	lcall	__gptrput
      00014F                        327 00114$:
                                    328 ;	mbrtoc16.c:64: return(ret);
      00014F 85*12 82         [24]  329 	mov	dpl,_mbrtoc16_ret_65536_16
      000152 85*13 83         [24]  330 	mov	dph,(_mbrtoc16_ret_65536_16 + 1)
      000155 22               [24]  331 	ret
      000156                        332 00116$:
                                    333 ;	mbrtoc16.c:67: codepoint -= 0x100000;
      000156 E5*10            [12]  334 	mov	a,(_mbrtoc16_codepoint_65536_16 + 2)
      000158 24 F0            [12]  335 	add	a,#0xf0
      00015A F5*10            [12]  336 	mov	(_mbrtoc16_codepoint_65536_16 + 2),a
      00015C E5*11            [12]  337 	mov	a,(_mbrtoc16_codepoint_65536_16 + 3)
      00015E 34 FF            [12]  338 	addc	a,#0xff
      000160 F5*11            [12]  339 	mov	(_mbrtoc16_codepoint_65536_16 + 3),a
                                    340 ;	mbrtoc16.c:68: if(pc16)
      000162 E5*0B            [12]  341 	mov	a,_mbrtoc16_pc16_65536_15
      000164 45*0C            [12]  342 	orl	a,(_mbrtoc16_pc16_65536_15 + 1)
      000166 60 39            [24]  343 	jz	00118$
                                    344 ;	mbrtoc16.c:69: *pc16 = ((codepoint >> 10) & 0x3ff) + 0xd800;
      000168 AA*0F            [24]  345 	mov	r2,(_mbrtoc16_codepoint_65536_16 + 1)
      00016A E5*10            [12]  346 	mov	a,(_mbrtoc16_codepoint_65536_16 + 2)
      00016C C3               [12]  347 	clr	c
      00016D 13               [12]  348 	rrc	a
      00016E CA               [12]  349 	xch	a,r2
      00016F 13               [12]  350 	rrc	a
      000170 CA               [12]  351 	xch	a,r2
      000171 C3               [12]  352 	clr	c
      000172 13               [12]  353 	rrc	a
      000173 CA               [12]  354 	xch	a,r2
      000174 13               [12]  355 	rrc	a
      000175 CA               [12]  356 	xch	a,r2
      000176 FB               [12]  357 	mov	r3,a
      000177 E5*11            [12]  358 	mov	a,(_mbrtoc16_codepoint_65536_16 + 3)
      000179 03               [12]  359 	rr	a
      00017A 03               [12]  360 	rr	a
      00017B 54 C0            [12]  361 	anl	a,#0xc0
      00017D 4B               [12]  362 	orl	a,r3
      00017E FB               [12]  363 	mov	r3,a
      00017F E5*11            [12]  364 	mov	a,(_mbrtoc16_codepoint_65536_16 + 3)
      000181 03               [12]  365 	rr	a
      000182 03               [12]  366 	rr	a
      000183 54 3F            [12]  367 	anl	a,#0x3f
      000185 FC               [12]  368 	mov	r4,a
      000186 7D 00            [12]  369 	mov	r5,#0x00
      000188 53 03 03         [24]  370 	anl	ar3,#0x03
      00018B 74 D8            [12]  371 	mov	a,#0xd8
      00018D 2B               [12]  372 	add	a,r3
      00018E FB               [12]  373 	mov	r3,a
      00018F 85*0B 82         [24]  374 	mov	dpl,_mbrtoc16_pc16_65536_15
      000192 85*0C 83         [24]  375 	mov	dph,(_mbrtoc16_pc16_65536_15 + 1)
      000195 85*0D F0         [24]  376 	mov	b,(_mbrtoc16_pc16_65536_15 + 2)
      000198 EA               [12]  377 	mov	a,r2
      000199 12r00r00         [24]  378 	lcall	__gptrput
      00019C A3               [24]  379 	inc	dptr
      00019D EB               [12]  380 	mov	a,r3
      00019E 12r00r00         [24]  381 	lcall	__gptrput
      0001A1                        382 00118$:
                                    383 ;	mbrtoc16.c:70: low_surrogate = (codepoint & 0x3ff) + 0xdc00;
      0001A1 AC*0E            [24]  384 	mov	r4,_mbrtoc16_codepoint_65536_16
      0001A3 AD*0F            [24]  385 	mov	r5,(_mbrtoc16_codepoint_65536_16 + 1)
      0001A5 53 05 03         [24]  386 	anl	ar5,#0x03
      0001A8 8C*14            [24]  387 	mov	_mbrtoc16_low_surrogate_65536_16,r4
      0001AA 74 DC            [12]  388 	mov	a,#0xdc
      0001AC 2D               [12]  389 	add	a,r5
      0001AD F5*15            [12]  390 	mov	(_mbrtoc16_low_surrogate_65536_16 + 1),a
                                    391 ;	mbrtoc16.c:71: ps->c[0] = 0;
      0001AF A9*08            [24]  392 	mov	r1,_mbrtoc16_PARM_4
      0001B1 AA*09            [24]  393 	mov	r2,(_mbrtoc16_PARM_4 + 1)
      0001B3 AB*0A            [24]  394 	mov	r3,(_mbrtoc16_PARM_4 + 2)
      0001B5 89 82            [24]  395 	mov	dpl,r1
      0001B7 8A 83            [24]  396 	mov	dph,r2
      0001B9 8B F0            [24]  397 	mov	b,r3
      0001BB E4               [12]  398 	clr	a
      0001BC 12r00r00         [24]  399 	lcall	__gptrput
                                    400 ;	mbrtoc16.c:72: ps->c[1] = low_surrogate & 0xff;
      0001BF 04               [12]  401 	inc	a
      0001C0 29               [12]  402 	add	a,r1
      0001C1 F8               [12]  403 	mov	r0,a
      0001C2 E4               [12]  404 	clr	a
      0001C3 3A               [12]  405 	addc	a,r2
      0001C4 FC               [12]  406 	mov	r4,a
      0001C5 8B 05            [24]  407 	mov	ar5,r3
      0001C7 AF*14            [24]  408 	mov	r7,_mbrtoc16_low_surrogate_65536_16
      0001C9 88 82            [24]  409 	mov	dpl,r0
      0001CB 8C 83            [24]  410 	mov	dph,r4
      0001CD 8D F0            [24]  411 	mov	b,r5
      0001CF EF               [12]  412 	mov	a,r7
      0001D0 12r00r00         [24]  413 	lcall	__gptrput
                                    414 ;	mbrtoc16.c:73: ps->c[2] = low_surrogate >> 8;
      0001D3 74 02            [12]  415 	mov	a,#0x02
      0001D5 29               [12]  416 	add	a,r1
      0001D6 F9               [12]  417 	mov	r1,a
      0001D7 E4               [12]  418 	clr	a
      0001D8 3A               [12]  419 	addc	a,r2
      0001D9 FA               [12]  420 	mov	r2,a
      0001DA AF*15            [24]  421 	mov	r7,(_mbrtoc16_low_surrogate_65536_16 + 1)
      0001DC 89 82            [24]  422 	mov	dpl,r1
      0001DE 8A 83            [24]  423 	mov	dph,r2
      0001E0 8B F0            [24]  424 	mov	b,r3
      0001E2 EF               [12]  425 	mov	a,r7
      0001E3 12r00r00         [24]  426 	lcall	__gptrput
                                    427 ;	mbrtoc16.c:75: return(ret);
      0001E6 85*12 82         [24]  428 	mov	dpl,_mbrtoc16_ret_65536_16
      0001E9 85*13 83         [24]  429 	mov	dph,(_mbrtoc16_ret_65536_16 + 1)
                                    430 ;	mbrtoc16.c:76: }
      0001EC 22               [24]  431 	ret
                                    432 	.area CSEG    (CODE)
                                    433 	.area CONST   (CODE)
                                    434 	.area CONST   (CODE)
      000000                        435 ___str_0:
      000000 00                     436 	.db 0x00
                                    437 	.area CSEG    (CODE)
                                    438 	.area XINIT   (CODE)
                                    439 	.area CABS    (ABS,CODE)
