                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbtowc
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc_PARM_3
                                     12 	.globl _mbtowc_PARM_2
                                     13 	.globl _mbtowc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _mbtowc_PARM_2:
      000000                         38 	.ds 3
      000003                         39 _mbtowc_PARM_3:
      000003                         40 	.ds 2
      000005                         41 _mbtowc_pwc_65536_39:
      000005                         42 	.ds 3
      000008                         43 _mbtowc_codepoint_65536_40:
      000008                         44 	.ds 4
      00000C                         45 _mbtowc_seqlen_65536_40:
      00000C                         46 	.ds 1
      00000D                         47 _mbtowc_first_byte_65536_40:
      00000D                         48 	.ds 1
      00000E                         49 _mbtowc_sloc0_1_0:
      00000E                         50 	.ds 3
      000011                         51 _mbtowc_sloc1_1_0:
      000011                         52 	.ds 1
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; uninitialized external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; initialized external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT0 (CODE)
                                     84 	.area GSINIT1 (CODE)
                                     85 	.area GSINIT2 (CODE)
                                     86 	.area GSINIT3 (CODE)
                                     87 	.area GSINIT4 (CODE)
                                     88 	.area GSINIT5 (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area CSEG    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function 'mbtowc'
                                    110 ;------------------------------------------------------------
                                    111 ;s                         Allocated with name '_mbtowc_PARM_2'
                                    112 ;n                         Allocated with name '_mbtowc_PARM_3'
                                    113 ;pwc                       Allocated with name '_mbtowc_pwc_65536_39'
                                    114 ;codepoint                 Allocated with name '_mbtowc_codepoint_65536_40'
                                    115 ;seqlen                    Allocated with name '_mbtowc_seqlen_65536_40'
                                    116 ;i                         Allocated to registers 
                                    117 ;first_byte                Allocated with name '_mbtowc_first_byte_65536_40'
                                    118 ;sloc0                     Allocated with name '_mbtowc_sloc0_1_0'
                                    119 ;sloc1                     Allocated with name '_mbtowc_sloc1_1_0'
                                    120 ;------------------------------------------------------------
                                    121 ;	mbtowc.c:31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                                    122 ;	-----------------------------------------
                                    123 ;	 function mbtowc
                                    124 ;	-----------------------------------------
      000000                        125 _mbtowc:
                           000007   126 	ar7 = 0x07
                           000006   127 	ar6 = 0x06
                           000005   128 	ar5 = 0x05
                           000004   129 	ar4 = 0x04
                           000003   130 	ar3 = 0x03
                           000002   131 	ar2 = 0x02
                           000001   132 	ar1 = 0x01
                           000000   133 	ar0 = 0x00
      000000 85 82*05         [24]  134 	mov	_mbtowc_pwc_65536_39,dpl
      000003 85 83*06         [24]  135 	mov	(_mbtowc_pwc_65536_39 + 1),dph
      000006 85 F0*07         [24]  136 	mov	(_mbtowc_pwc_65536_39 + 2),b
                                    137 ;	mbtowc.c:37: if(!s)
      000009 E5*00            [12]  138 	mov	a,_mbtowc_PARM_2
      00000B 45*01            [12]  139 	orl	a,(_mbtowc_PARM_2 + 1)
      00000D 70 04            [24]  140 	jnz	00102$
                                    141 ;	mbtowc.c:38: return(0);
      00000F 90 00 00         [24]  142 	mov	dptr,#0x0000
      000012 22               [24]  143 	ret
      000013                        144 00102$:
                                    145 ;	mbtowc.c:40: seqlen = 1;
      000013 7C 01            [12]  146 	mov	r4,#0x01
                                    147 ;	mbtowc.c:41: first_byte = *s;
      000015 A9*00            [24]  148 	mov	r1,_mbtowc_PARM_2
      000017 AA*01            [24]  149 	mov	r2,(_mbtowc_PARM_2 + 1)
      000019 AB*02            [24]  150 	mov	r3,(_mbtowc_PARM_2 + 2)
      00001B 89 82            [24]  151 	mov	dpl,r1
      00001D 8A 83            [24]  152 	mov	dph,r2
      00001F 8B F0            [24]  153 	mov	b,r3
      000021 12r00r00         [24]  154 	lcall	__gptrget
                                    155 ;	mbtowc.c:43: if(first_byte & 0x80)
      000024 F5*0D            [12]  156 	mov	_mbtowc_first_byte_65536_40,a
      000026 30 E7 4E         [24]  157 	jnb	acc.7,00107$
                                    158 ;	mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
      000029 75*0C 01         [24]  159 	mov	_mbtowc_seqlen_65536_40,#0x01
      00002C                        160 00103$:
      00002C 85*0C F0         [24]  161 	mov	b,_mbtowc_seqlen_65536_40
      00002F 05 F0            [12]  162 	inc	b
      000031 7D 80            [12]  163 	mov	r5,#0x80
      000033 E4               [12]  164 	clr	a
      000034 FE               [12]  165 	mov	r6,a
      000035 33               [12]  166 	rlc	a
      000036 92 D2            [24]  167 	mov	ov,c
      000038 80 08            [24]  168 	sjmp	00204$
      00003A                        169 00203$:
      00003A A2 D2            [12]  170 	mov	c,ov
      00003C EE               [12]  171 	mov	a,r6
      00003D 13               [12]  172 	rrc	a
      00003E FE               [12]  173 	mov	r6,a
      00003F ED               [12]  174 	mov	a,r5
      000040 13               [12]  175 	rrc	a
      000041 FD               [12]  176 	mov	r5,a
      000042                        177 00204$:
      000042 D5 F0 F5         [24]  178 	djnz	b,00203$
      000045 A8*0D            [24]  179 	mov	r0,_mbtowc_first_byte_65536_40
      000047 7F 00            [12]  180 	mov	r7,#0x00
      000049 E8               [12]  181 	mov	a,r0
      00004A 52 05            [12]  182 	anl	ar5,a
      00004C EF               [12]  183 	mov	a,r7
      00004D 52 06            [12]  184 	anl	ar6,a
      00004F ED               [12]  185 	mov	a,r5
      000050 4E               [12]  186 	orl	a,r6
      000051 60 04            [24]  187 	jz	00143$
                                    188 ;	mbtowc.c:46: seqlen++;
      000053 05*0C            [12]  189 	inc	_mbtowc_seqlen_65536_40
      000055 80 D5            [24]  190 	sjmp	00103$
      000057                        191 00143$:
                                    192 ;	mbtowc.c:47: first_byte &= (0xff >> (seqlen + 1));
      000057 E5*0C            [12]  193 	mov	a,_mbtowc_seqlen_65536_40
      000059 FC               [12]  194 	mov	r4,a
      00005A 04               [12]  195 	inc	a
      00005B FF               [12]  196 	mov	r7,a
      00005C 8F F0            [24]  197 	mov	b,r7
      00005E 05 F0            [12]  198 	inc	b
      000060 7F FF            [12]  199 	mov	r7,#0xff
      000062 E4               [12]  200 	clr	a
      000063 FE               [12]  201 	mov	r6,a
      000064 33               [12]  202 	rlc	a
      000065 92 D2            [24]  203 	mov	ov,c
      000067 80 08            [24]  204 	sjmp	00207$
      000069                        205 00206$:
      000069 A2 D2            [12]  206 	mov	c,ov
      00006B EE               [12]  207 	mov	a,r6
      00006C 13               [12]  208 	rrc	a
      00006D FE               [12]  209 	mov	r6,a
      00006E EF               [12]  210 	mov	a,r7
      00006F 13               [12]  211 	rrc	a
      000070 FF               [12]  212 	mov	r7,a
      000071                        213 00207$:
      000071 D5 F0 F5         [24]  214 	djnz	b,00206$
      000074 EF               [12]  215 	mov	a,r7
      000075 52*0D            [12]  216 	anl	_mbtowc_first_byte_65536_40,a
      000077                        217 00107$:
                                    218 ;	mbtowc.c:50: if(seqlen > 4 || n < seqlen)
      000077 EC               [12]  219 	mov	a,r4
      000078 24 FB            [12]  220 	add	a,#0xff - 0x04
      00007A 40 0D            [24]  221 	jc	00108$
      00007C 8C 06            [24]  222 	mov	ar6,r4
      00007E 7F 00            [12]  223 	mov	r7,#0x00
      000080 C3               [12]  224 	clr	c
      000081 E5*03            [12]  225 	mov	a,_mbtowc_PARM_3
      000083 9E               [12]  226 	subb	a,r6
      000084 E5*04            [12]  227 	mov	a,(_mbtowc_PARM_3 + 1)
      000086 9F               [12]  228 	subb	a,r7
      000087 50 04            [24]  229 	jnc	00136$
      000089                        230 00108$:
                                    231 ;	mbtowc.c:51: return(-1);
      000089 90 FF FF         [24]  232 	mov	dptr,#0xffff
      00008C 22               [24]  233 	ret
                                    234 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      00008D                        235 00136$:
      00008D 7F 01            [12]  236 	mov	r7,#0x01
      00008F                        237 00121$:
      00008F C3               [12]  238 	clr	c
      000090 EF               [12]  239 	mov	a,r7
      000091 9C               [12]  240 	subb	a,r4
      000092 50 26            [24]  241 	jnc	00113$
                                    242 ;	mbtowc.c:54: if((s[i] & 0xc0) != 0x80)
      000094 EF               [12]  243 	mov	a,r7
      000095 29               [12]  244 	add	a,r1
      000096 F8               [12]  245 	mov	r0,a
      000097 E4               [12]  246 	clr	a
      000098 3A               [12]  247 	addc	a,r2
      000099 FD               [12]  248 	mov	r5,a
      00009A 8B 06            [24]  249 	mov	ar6,r3
      00009C 88 82            [24]  250 	mov	dpl,r0
      00009E 8D 83            [24]  251 	mov	dph,r5
      0000A0 8E F0            [24]  252 	mov	b,r6
      0000A2 12r00r00         [24]  253 	lcall	__gptrget
      0000A5 F8               [12]  254 	mov	r0,a
      0000A6 53 00 C0         [24]  255 	anl	ar0,#0xc0
      0000A9 7E 00            [12]  256 	mov	r6,#0x00
      0000AB B8 80 05         [24]  257 	cjne	r0,#0x80,00211$
      0000AE BE 00 02         [24]  258 	cjne	r6,#0x00,00211$
      0000B1 80 04            [24]  259 	sjmp	00122$
      0000B3                        260 00211$:
                                    261 ;	mbtowc.c:55: return(-1);
      0000B3 90 FF FF         [24]  262 	mov	dptr,#0xffff
      0000B6 22               [24]  263 	ret
      0000B7                        264 00122$:
                                    265 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      0000B7 0F               [12]  266 	inc	r7
      0000B8 80 D5            [24]  267 	sjmp	00121$
      0000BA                        268 00113$:
                                    269 ;	mbtowc.c:57: codepoint = first_byte;
      0000BA AD*0D            [24]  270 	mov	r5,_mbtowc_first_byte_65536_40
                                    271 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      0000BC E4               [12]  272 	clr	a
      0000BD FE               [12]  273 	mov	r6,a
      0000BE F8               [12]  274 	mov	r0,a
      0000BF FF               [12]  275 	mov	r7,a
      0000C0 74 01            [12]  276 	mov	a,#0x01
      0000C2 29               [12]  277 	add	a,r1
      0000C3 F5*00            [12]  278 	mov	_mbtowc_PARM_2,a
      0000C5 E4               [12]  279 	clr	a
      0000C6 3A               [12]  280 	addc	a,r2
      0000C7 F5*01            [12]  281 	mov	(_mbtowc_PARM_2 + 1),a
      0000C9 8B*02            [24]  282 	mov	(_mbtowc_PARM_2 + 2),r3
      0000CB 8C 03            [24]  283 	mov	ar3,r4
      0000CD EB               [12]  284 	mov	a,r3
      0000CE 14               [12]  285 	dec	a
      0000CF F5*11            [12]  286 	mov	_mbtowc_sloc1_1_0,a
      0000D1 85*00*0E         [24]  287 	mov	_mbtowc_sloc0_1_0,_mbtowc_PARM_2
      0000D4 85*01*0F         [24]  288 	mov	(_mbtowc_sloc0_1_0 + 1),(_mbtowc_PARM_2 + 1)
      0000D7 85*02*10         [24]  289 	mov	(_mbtowc_sloc0_1_0 + 2),(_mbtowc_PARM_2 + 2)
      0000DA                        290 00124$:
      0000DA E5*11            [12]  291 	mov	a,_mbtowc_sloc1_1_0
      0000DC 60 73            [24]  292 	jz	00114$
                                    293 ;	mbtowc.c:61: codepoint <<= 6;
      0000DE C0 04            [24]  294 	push	ar4
      0000E0 88*0A            [24]  295 	mov	(_mbtowc_codepoint_65536_40 + 2),r0
      0000E2 EF               [12]  296 	mov	a,r7
      0000E3 54 03            [12]  297 	anl	a,#0x03
      0000E5 A2 E0            [12]  298 	mov	c,acc.0
      0000E7 C5*0A            [12]  299 	xch	a,(_mbtowc_codepoint_65536_40 + 2)
      0000E9 13               [12]  300 	rrc	a
      0000EA C5*0A            [12]  301 	xch	a,(_mbtowc_codepoint_65536_40 + 2)
      0000EC 13               [12]  302 	rrc	a
      0000ED A2 E0            [12]  303 	mov	c,acc.0
      0000EF C5*0A            [12]  304 	xch	a,(_mbtowc_codepoint_65536_40 + 2)
      0000F1 13               [12]  305 	rrc	a
      0000F2 C5*0A            [12]  306 	xch	a,(_mbtowc_codepoint_65536_40 + 2)
      0000F4 13               [12]  307 	rrc	a
      0000F5 C5*0A            [12]  308 	xch	a,(_mbtowc_codepoint_65536_40 + 2)
      0000F7 F5*0B            [12]  309 	mov	(_mbtowc_codepoint_65536_40 + 3),a
      0000F9 EE               [12]  310 	mov	a,r6
      0000FA 03               [12]  311 	rr	a
      0000FB 03               [12]  312 	rr	a
      0000FC 54 3F            [12]  313 	anl	a,#0x3f
      0000FE 45*0A            [12]  314 	orl	a,(_mbtowc_codepoint_65536_40 + 2)
      000100 F5*0A            [12]  315 	mov	(_mbtowc_codepoint_65536_40 + 2),a
      000102 8D*08            [24]  316 	mov	_mbtowc_codepoint_65536_40,r5
      000104 EE               [12]  317 	mov	a,r6
      000105 54 03            [12]  318 	anl	a,#0x03
      000107 A2 E0            [12]  319 	mov	c,acc.0
      000109 C5*08            [12]  320 	xch	a,_mbtowc_codepoint_65536_40
      00010B 13               [12]  321 	rrc	a
      00010C C5*08            [12]  322 	xch	a,_mbtowc_codepoint_65536_40
      00010E 13               [12]  323 	rrc	a
      00010F A2 E0            [12]  324 	mov	c,acc.0
      000111 C5*08            [12]  325 	xch	a,_mbtowc_codepoint_65536_40
      000113 13               [12]  326 	rrc	a
      000114 C5*08            [12]  327 	xch	a,_mbtowc_codepoint_65536_40
      000116 13               [12]  328 	rrc	a
      000117 C5*08            [12]  329 	xch	a,_mbtowc_codepoint_65536_40
      000119 F5*09            [12]  330 	mov	(_mbtowc_codepoint_65536_40 + 1),a
                                    331 ;	mbtowc.c:62: codepoint |= (*s & 0x3f);
      00011B 85*0E 82         [24]  332 	mov	dpl,_mbtowc_sloc0_1_0
      00011E 85*0F 83         [24]  333 	mov	dph,(_mbtowc_sloc0_1_0 + 1)
      000121 85*10 F0         [24]  334 	mov	b,(_mbtowc_sloc0_1_0 + 2)
      000124 12r00r00         [24]  335 	lcall	__gptrget
      000127 FA               [12]  336 	mov	r2,a
      000128 A3               [24]  337 	inc	dptr
      000129 85 82*0E         [24]  338 	mov	_mbtowc_sloc0_1_0,dpl
      00012C 85 83*0F         [24]  339 	mov	(_mbtowc_sloc0_1_0 + 1),dph
      00012F 8A 01            [24]  340 	mov	ar1,r2
      000131 53 01 3F         [24]  341 	anl	ar1,#0x3f
      000134 E4               [12]  342 	clr	a
      000135 FA               [12]  343 	mov	r2,a
      000136 33               [12]  344 	rlc	a
      000137 95 E0            [12]  345 	subb	a,acc
      000139 FB               [12]  346 	mov	r3,a
      00013A FC               [12]  347 	mov	r4,a
      00013B E9               [12]  348 	mov	a,r1
      00013C 45*08            [12]  349 	orl	a,_mbtowc_codepoint_65536_40
      00013E FD               [12]  350 	mov	r5,a
      00013F EA               [12]  351 	mov	a,r2
      000140 45*09            [12]  352 	orl	a,(_mbtowc_codepoint_65536_40 + 1)
      000142 FE               [12]  353 	mov	r6,a
      000143 EB               [12]  354 	mov	a,r3
      000144 45*0A            [12]  355 	orl	a,(_mbtowc_codepoint_65536_40 + 2)
      000146 F8               [12]  356 	mov	r0,a
      000147 EC               [12]  357 	mov	a,r4
      000148 45*0B            [12]  358 	orl	a,(_mbtowc_codepoint_65536_40 + 3)
      00014A FF               [12]  359 	mov	r7,a
                                    360 ;	mbtowc.c:63: s++;
                                    361 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      00014B 15*11            [12]  362 	dec	_mbtowc_sloc1_1_0
      00014D D0 04            [24]  363 	pop	ar4
      00014F 80 89            [24]  364 	sjmp	00124$
      000151                        365 00114$:
                                    366 ;	mbtowc.c:66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      000151 C3               [12]  367 	clr	c
      000152 EE               [12]  368 	mov	a,r6
      000153 94 D8            [12]  369 	subb	a,#0xd8
      000155 E8               [12]  370 	mov	a,r0
      000156 94 00            [12]  371 	subb	a,#0x00
      000158 EF               [12]  372 	mov	a,r7
      000159 94 00            [12]  373 	subb	a,#0x00
      00015B 40 10            [24]  374 	jc	00116$
      00015D 74 FF            [12]  375 	mov	a,#0xff
      00015F 9D               [12]  376 	subb	a,r5
      000160 74 DF            [12]  377 	mov	a,#0xdf
      000162 9E               [12]  378 	subb	a,r6
      000163 E4               [12]  379 	clr	a
      000164 98               [12]  380 	subb	a,r0
      000165 E4               [12]  381 	clr	a
      000166 9F               [12]  382 	subb	a,r7
      000167 40 04            [24]  383 	jc	00116$
                                    384 ;	mbtowc.c:67: return(-1);
      000169 90 FF FF         [24]  385 	mov	dptr,#0xffff
      00016C 22               [24]  386 	ret
      00016D                        387 00116$:
                                    388 ;	mbtowc.c:69: if(pwc)
      00016D E5*05            [12]  389 	mov	a,_mbtowc_pwc_65536_39
      00016F 45*06            [12]  390 	orl	a,(_mbtowc_pwc_65536_39 + 1)
      000171 60 1C            [24]  391 	jz	00119$
                                    392 ;	mbtowc.c:70: *pwc = codepoint;
      000173 85*05 82         [24]  393 	mov	dpl,_mbtowc_pwc_65536_39
      000176 85*06 83         [24]  394 	mov	dph,(_mbtowc_pwc_65536_39 + 1)
      000179 85*07 F0         [24]  395 	mov	b,(_mbtowc_pwc_65536_39 + 2)
      00017C ED               [12]  396 	mov	a,r5
      00017D 12r00r00         [24]  397 	lcall	__gptrput
      000180 A3               [24]  398 	inc	dptr
      000181 EE               [12]  399 	mov	a,r6
      000182 12r00r00         [24]  400 	lcall	__gptrput
      000185 A3               [24]  401 	inc	dptr
      000186 E8               [12]  402 	mov	a,r0
      000187 12r00r00         [24]  403 	lcall	__gptrput
      00018A A3               [24]  404 	inc	dptr
      00018B EF               [12]  405 	mov	a,r7
      00018C 12r00r00         [24]  406 	lcall	__gptrput
      00018F                        407 00119$:
                                    408 ;	mbtowc.c:71: return(codepoint ? seqlen : 0);
      00018F ED               [12]  409 	mov	a,r5
      000190 4E               [12]  410 	orl	a,r6
      000191 48               [12]  411 	orl	a,r0
      000192 4F               [12]  412 	orl	a,r7
      000193 60 04            [24]  413 	jz	00128$
      000195 7F 00            [12]  414 	mov	r7,#0x00
      000197 80 04            [24]  415 	sjmp	00129$
      000199                        416 00128$:
      000199 7C 00            [12]  417 	mov	r4,#0x00
      00019B 7F 00            [12]  418 	mov	r7,#0x00
      00019D                        419 00129$:
      00019D 8C 82            [24]  420 	mov	dpl,r4
      00019F 8F 83            [24]  421 	mov	dph,r7
                                    422 ;	mbtowc.c:72: }
      0001A1 22               [24]  423 	ret
                                    424 	.area CSEG    (CODE)
                                    425 	.area CONST   (CODE)
                                    426 	.area XINIT   (CODE)
                                    427 	.area CABS    (ABS,CODE)
