                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl __print_format_PARM_4
                                     13 	.globl __print_format_PARM_3
                                     14 	.globl __print_format_PARM_2
                                     15 	.globl __print_format
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 __print_format_sloc0_1_0:
      000000                         36 	.ds 2
      000002                         37 __print_format_sloc1_1_0:
      000002                         38 	.ds 1
      000003                         39 __print_format_sloc2_1_0:
      000003                         40 	.ds 2
      000005                         41 __print_format_sloc3_1_0:
      000005                         42 	.ds 3
      000008                         43 __print_format_sloc4_1_0:
      000008                         44 	.ds 2
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram
                                     47 ;--------------------------------------------------------
                                     48 	.area	OSEG    (OVR,DATA)
      000000                         49 _calculate_digit_b4_65536_74:
      000000                         50 	.ds 1
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; uninitialized external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
      000000                         72 _lower_case:
      000000                         73 	.ds 1
      000001                         74 _output_char:
      000001                         75 	.ds 2
      000003                         76 _p:
      000003                         77 	.ds 3
      000006                         78 _value:
      000006                         79 	.ds 5
      00000B                         80 _charsOutputted:
      00000B                         81 	.ds 2
      00000D                         82 __output_char_c_65536_66:
      00000D                         83 	.ds 1
      00000E                         84 _output_digit_n_65536_68:
      00000E                         85 	.ds 1
      00000F                         86 _output_2digits_b_65536_71:
      00000F                         87 	.ds 1
      000010                         88 _calculate_digit_radix_65536_73:
      000010                         89 	.ds 1
      000011                         90 __print_format_PARM_2:
      000011                         91 	.ds 3
      000014                         92 __print_format_PARM_3:
      000014                         93 	.ds 3
      000017                         94 __print_format_PARM_4:
      000017                         95 	.ds 1
      000018                         96 __print_format_pfn_65536_77:
      000018                         97 	.ds 2
      00001A                         98 __print_format_left_justify_65536_78:
      00001A                         99 	.ds 1
      00001B                        100 __print_format_zero_padding_65536_78:
      00001B                        101 	.ds 1
      00001C                        102 __print_format_prefix_sign_65536_78:
      00001C                        103 	.ds 1
      00001D                        104 __print_format_prefix_space_65536_78:
      00001D                        105 	.ds 1
      00001E                        106 __print_format_signed_argument_65536_78:
      00001E                        107 	.ds 1
      00001F                        108 __print_format_char_argument_65536_78:
      00001F                        109 	.ds 1
      000020                        110 __print_format_long_argument_65536_78:
      000020                        111 	.ds 1
      000021                        112 __print_format_float_argument_65536_78:
      000021                        113 	.ds 1
      000022                        114 __print_format_lsd_65536_78:
      000022                        115 	.ds 1
      000023                        116 __print_format_radix_65536_78:
      000023                        117 	.ds 1
      000024                        118 __print_format_width_65536_78:
      000024                        119 	.ds 2
      000026                        120 __print_format_decimals_65536_78:
      000026                        121 	.ds 2
      000028                        122 __print_format_length_65536_78:
      000028                        123 	.ds 2
      00002A                        124 __print_format_c_65536_78:
      00002A                        125 	.ds 1
      00002B                        126 __print_format_store_262144_99:
      00002B                        127 	.ds 6
      000031                        128 __print_format_pstore_262144_99:
      000031                        129 	.ds 2
                                    130 ;--------------------------------------------------------
                                    131 ; absolute external ram data
                                    132 ;--------------------------------------------------------
                                    133 	.area XABS    (ABS,XDATA)
                                    134 ;--------------------------------------------------------
                                    135 ; initialized external ram data
                                    136 ;--------------------------------------------------------
                                    137 	.area XISEG   (XDATA)
                                    138 	.area HOME    (CODE)
                                    139 	.area GSINIT0 (CODE)
                                    140 	.area GSINIT1 (CODE)
                                    141 	.area GSINIT2 (CODE)
                                    142 	.area GSINIT3 (CODE)
                                    143 	.area GSINIT4 (CODE)
                                    144 	.area GSINIT5 (CODE)
                                    145 	.area GSINIT  (CODE)
                                    146 	.area GSFINAL (CODE)
                                    147 	.area CSEG    (CODE)
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area HOME    (CODE)
                                    152 	.area GSINIT  (CODE)
                                    153 	.area GSFINAL (CODE)
                                    154 	.area GSINIT  (CODE)
                                    155 ;--------------------------------------------------------
                                    156 ; Home
                                    157 ;--------------------------------------------------------
                                    158 	.area HOME    (CODE)
                                    159 	.area HOME    (CODE)
                                    160 ;--------------------------------------------------------
                                    161 ; code
                                    162 ;--------------------------------------------------------
                                    163 	.area CSEG    (CODE)
                                    164 ;------------------------------------------------------------
                                    165 ;Allocation info for local variables in function '_output_char'
                                    166 ;------------------------------------------------------------
                                    167 ;c                         Allocated with name '__output_char_c_65536_66'
                                    168 ;------------------------------------------------------------
                                    169 ;	printf_large.c:105: _output_char (unsigned char c)
                                    170 ;	-----------------------------------------
                                    171 ;	 function _output_char
                                    172 ;	-----------------------------------------
      000000                        173 __output_char:
                           000007   174 	ar7 = 0x07
                           000006   175 	ar6 = 0x06
                           000005   176 	ar5 = 0x05
                           000004   177 	ar4 = 0x04
                           000003   178 	ar3 = 0x03
                           000002   179 	ar2 = 0x02
                           000001   180 	ar1 = 0x01
                           000000   181 	ar0 = 0x00
      000000 E5 82            [12]  182 	mov	a,dpl
      000002 90r00r0D         [24]  183 	mov	dptr,#__output_char_c_65536_66
      000005 F0               [24]  184 	movx	@dptr,a
                                    185 ;	printf_large.c:107: output_char( c, p );
      000006 E0               [24]  186 	movx	a,@dptr
      000007 FF               [12]  187 	mov	r7,a
      000008 90r00r03         [24]  188 	mov	dptr,#_p
      00000B E0               [24]  189 	movx	a,@dptr
      00000C C0 E0            [24]  190 	push	acc
      00000E A3               [24]  191 	inc	dptr
      00000F E0               [24]  192 	movx	a,@dptr
      000010 C0 E0            [24]  193 	push	acc
      000012 A3               [24]  194 	inc	dptr
      000013 E0               [24]  195 	movx	a,@dptr
      000014 C0 E0            [24]  196 	push	acc
      000016 12r00r1B         [24]  197 	lcall	00103$
      000019 80 0D            [24]  198 	sjmp	00104$
      00001B                        199 00103$:
      00001B 90r00r01         [24]  200 	mov	dptr,#_output_char
      00001E E0               [24]  201 	movx	a,@dptr
      00001F C0 E0            [24]  202 	push	acc
      000021 A3               [24]  203 	inc	dptr
      000022 E0               [24]  204 	movx	a,@dptr
      000023 C0 E0            [24]  205 	push	acc
      000025 8F 82            [24]  206 	mov	dpl,r7
      000027 22               [24]  207 	ret
      000028                        208 00104$:
      000028 15 81            [12]  209 	dec	sp
      00002A 15 81            [12]  210 	dec	sp
      00002C 15 81            [12]  211 	dec	sp
                                    212 ;	printf_large.c:108: charsOutputted++;
      00002E 90r00r0B         [24]  213 	mov	dptr,#_charsOutputted
      000031 E0               [24]  214 	movx	a,@dptr
      000032 24 01            [12]  215 	add	a,#0x01
      000034 F0               [24]  216 	movx	@dptr,a
      000035 A3               [24]  217 	inc	dptr
      000036 E0               [24]  218 	movx	a,@dptr
      000037 34 00            [12]  219 	addc	a,#0x00
      000039 F0               [24]  220 	movx	@dptr,a
                                    221 ;	printf_large.c:109: }
      00003A 22               [24]  222 	ret
                                    223 ;------------------------------------------------------------
                                    224 ;Allocation info for local variables in function 'output_digit'
                                    225 ;------------------------------------------------------------
                                    226 ;c                         Allocated to registers r7 
                                    227 ;n                         Allocated with name '_output_digit_n_65536_68'
                                    228 ;------------------------------------------------------------
                                    229 ;	printf_large.c:130: output_digit (unsigned char n)
                                    230 ;	-----------------------------------------
                                    231 ;	 function output_digit
                                    232 ;	-----------------------------------------
      00003B                        233 _output_digit:
      00003B E5 82            [12]  234 	mov	a,dpl
      00003D 90r00r0E         [24]  235 	mov	dptr,#_output_digit_n_65536_68
      000040 F0               [24]  236 	movx	@dptr,a
                                    237 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000041 E0               [24]  238 	movx	a,@dptr
      000042 24 30            [12]  239 	add	a,#0x30
                                    240 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000044 FF               [12]  241 	mov  r7,a
      000045 24 C6            [12]  242 	add	a,#0xff - 0x39
      000047 50 0D            [24]  243 	jnc	00104$
                                    244 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000049 74 07            [12]  245 	mov	a,#0x07
      00004B 2F               [12]  246 	add	a,r7
      00004C FF               [12]  247 	mov	r7,a
                                    248 ;	printf_large.c:137: if (lower_case)
      00004D 90r00r00         [24]  249 	mov	dptr,#_lower_case
      000050 E0               [24]  250 	movx	a,@dptr
      000051 60 03            [24]  251 	jz	00104$
                                    252 ;	printf_large.c:138: c = tolower(c);
      000053 43 07 20         [24]  253 	orl	ar7,#0x20
      000056                        254 00104$:
                                    255 ;	printf_large.c:140: _output_char( c );
      000056 8F 82            [24]  256 	mov	dpl,r7
                                    257 ;	printf_large.c:141: }
      000058 02r00r00         [24]  258 	ljmp	__output_char
                                    259 ;------------------------------------------------------------
                                    260 ;Allocation info for local variables in function 'output_2digits'
                                    261 ;------------------------------------------------------------
                                    262 ;b                         Allocated with name '_output_2digits_b_65536_71'
                                    263 ;------------------------------------------------------------
                                    264 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    265 ;	-----------------------------------------
                                    266 ;	 function output_2digits
                                    267 ;	-----------------------------------------
      00005B                        268 _output_2digits:
      00005B E5 82            [12]  269 	mov	a,dpl
      00005D 90r00r0F         [24]  270 	mov	dptr,#_output_2digits_b_65536_71
      000060 F0               [24]  271 	movx	@dptr,a
                                    272 ;	printf_large.c:159: output_digit( b>>4   );
      000061 E0               [24]  273 	movx	a,@dptr
      000062 FF               [12]  274 	mov	r7,a
      000063 C4               [12]  275 	swap	a
      000064 54 0F            [12]  276 	anl	a,#0x0f
      000066 F5 82            [12]  277 	mov	dpl,a
      000068 C0 07            [24]  278 	push	ar7
      00006A 12r00r3B         [24]  279 	lcall	_output_digit
      00006D D0 07            [24]  280 	pop	ar7
                                    281 ;	printf_large.c:160: output_digit( b&0x0F );
      00006F 53 07 0F         [24]  282 	anl	ar7,#0x0f
      000072 8F 82            [24]  283 	mov	dpl,r7
                                    284 ;	printf_large.c:161: }
      000074 02r00r3B         [24]  285 	ljmp	_output_digit
                                    286 ;------------------------------------------------------------
                                    287 ;Allocation info for local variables in function 'calculate_digit'
                                    288 ;------------------------------------------------------------
                                    289 ;radix                     Allocated with name '_calculate_digit_radix_65536_73'
                                    290 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    291 ;b4                        Allocated with name '_calculate_digit_b4_65536_74'
                                    292 ;i                         Allocated to registers r1 
                                    293 ;------------------------------------------------------------
                                    294 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    295 ;	-----------------------------------------
                                    296 ;	 function calculate_digit
                                    297 ;	-----------------------------------------
      000077                        298 _calculate_digit:
      000077 E5 82            [12]  299 	mov	a,dpl
      000079 90r00r10         [24]  300 	mov	dptr,#_calculate_digit_radix_65536_73
      00007C F0               [24]  301 	movx	@dptr,a
                                    302 ;	printf_large.c:191: register unsigned long ul = value.ul;
      00007D 90r00r06         [24]  303 	mov	dptr,#_value
      000080 E0               [24]  304 	movx	a,@dptr
      000081 FC               [12]  305 	mov	r4,a
      000082 A3               [24]  306 	inc	dptr
      000083 E0               [24]  307 	movx	a,@dptr
      000084 FD               [12]  308 	mov	r5,a
      000085 A3               [24]  309 	inc	dptr
      000086 E0               [24]  310 	movx	a,@dptr
      000087 FE               [12]  311 	mov	r6,a
      000088 A3               [24]  312 	inc	dptr
      000089 E0               [24]  313 	movx	a,@dptr
      00008A FF               [12]  314 	mov	r7,a
                                    315 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      00008B 90r00r0A         [24]  316 	mov	dptr,#(_value + 0x0004)
      00008E E0               [24]  317 	movx	a,@dptr
      00008F FB               [12]  318 	mov	r3,a
                                    319 ;	printf_large.c:195: do
      000090 90r00r10         [24]  320 	mov	dptr,#_calculate_digit_radix_65536_73
      000093 E0               [24]  321 	movx	a,@dptr
      000094 FA               [12]  322 	mov	r2,a
      000095 79 20            [12]  323 	mov	r1,#0x20
      000097                        324 00103$:
                                    325 ;	printf_large.c:197: b4 = (b4 << 1);
      000097 8B 00            [24]  326 	mov	ar0,r3
      000099 E8               [12]  327 	mov	a,r0
      00009A 28               [12]  328 	add	a,r0
      00009B F5*00            [12]  329 	mov	_calculate_digit_b4_65536_74,a
                                    330 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      00009D EF               [12]  331 	mov	a,r7
      00009E 23               [12]  332 	rl	a
      00009F 54 01            [12]  333 	anl	a,#0x01
      0000A1 45*00            [12]  334 	orl	a,_calculate_digit_b4_65536_74
      0000A3 FB               [12]  335 	mov	r3,a
                                    336 ;	printf_large.c:199: ul <<= 1;
      0000A4 EC               [12]  337 	mov	a,r4
      0000A5 2C               [12]  338 	add	a,r4
      0000A6 FC               [12]  339 	mov	r4,a
      0000A7 ED               [12]  340 	mov	a,r5
      0000A8 33               [12]  341 	rlc	a
      0000A9 FD               [12]  342 	mov	r5,a
      0000AA EE               [12]  343 	mov	a,r6
      0000AB 33               [12]  344 	rlc	a
      0000AC FE               [12]  345 	mov	r6,a
      0000AD EF               [12]  346 	mov	a,r7
      0000AE 33               [12]  347 	rlc	a
      0000AF FF               [12]  348 	mov	r7,a
                                    349 ;	printf_large.c:201: if (radix <= b4 )
      0000B0 C3               [12]  350 	clr	c
      0000B1 EB               [12]  351 	mov	a,r3
      0000B2 9A               [12]  352 	subb	a,r2
      0000B3 40 07            [24]  353 	jc	00104$
                                    354 ;	printf_large.c:203: b4 -= radix;
      0000B5 EB               [12]  355 	mov	a,r3
      0000B6 C3               [12]  356 	clr	c
      0000B7 9A               [12]  357 	subb	a,r2
      0000B8 FB               [12]  358 	mov	r3,a
                                    359 ;	printf_large.c:204: ul |= 1;
      0000B9 43 04 01         [24]  360 	orl	ar4,#0x01
      0000BC                        361 00104$:
                                    362 ;	printf_large.c:206: } while (--i);
      0000BC 19               [12]  363 	dec	r1
      0000BD E9               [12]  364 	mov	a,r1
      0000BE 70 D7            [24]  365 	jnz	00103$
                                    366 ;	printf_large.c:207: value.ul = ul;
      0000C0 90r00r06         [24]  367 	mov	dptr,#_value
      0000C3 EC               [12]  368 	mov	a,r4
      0000C4 F0               [24]  369 	movx	@dptr,a
      0000C5 ED               [12]  370 	mov	a,r5
      0000C6 A3               [24]  371 	inc	dptr
      0000C7 F0               [24]  372 	movx	@dptr,a
      0000C8 EE               [12]  373 	mov	a,r6
      0000C9 A3               [24]  374 	inc	dptr
      0000CA F0               [24]  375 	movx	@dptr,a
      0000CB EF               [12]  376 	mov	a,r7
      0000CC A3               [24]  377 	inc	dptr
      0000CD F0               [24]  378 	movx	@dptr,a
                                    379 ;	printf_large.c:208: value.byte[4] = b4;
      0000CE 90r00r0A         [24]  380 	mov	dptr,#(_value + 0x0004)
      0000D1 EB               [12]  381 	mov	a,r3
      0000D2 F0               [24]  382 	movx	@dptr,a
                                    383 ;	printf_large.c:209: }
      0000D3 22               [24]  384 	ret
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function '_print_format'
                                    387 ;------------------------------------------------------------
                                    388 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                    389 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                    390 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                    391 ;sloc3                     Allocated with name '__print_format_sloc3_1_0'
                                    392 ;sloc4                     Allocated with name '__print_format_sloc4_1_0'
                                    393 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                    394 ;format                    Allocated with name '__print_format_PARM_3'
                                    395 ;ap                        Allocated with name '__print_format_PARM_4'
                                    396 ;pfn                       Allocated with name '__print_format_pfn_65536_77'
                                    397 ;left_justify              Allocated with name '__print_format_left_justify_65536_78'
                                    398 ;zero_padding              Allocated with name '__print_format_zero_padding_65536_78'
                                    399 ;prefix_sign               Allocated with name '__print_format_prefix_sign_65536_78'
                                    400 ;prefix_space              Allocated with name '__print_format_prefix_space_65536_78'
                                    401 ;signed_argument           Allocated with name '__print_format_signed_argument_65536_78'
                                    402 ;char_argument             Allocated with name '__print_format_char_argument_65536_78'
                                    403 ;long_argument             Allocated with name '__print_format_long_argument_65536_78'
                                    404 ;float_argument            Allocated with name '__print_format_float_argument_65536_78'
                                    405 ;lsd                       Allocated with name '__print_format_lsd_65536_78'
                                    406 ;radix                     Allocated with name '__print_format_radix_65536_78'
                                    407 ;width                     Allocated with name '__print_format_width_65536_78'
                                    408 ;decimals                  Allocated with name '__print_format_decimals_65536_78'
                                    409 ;length                    Allocated with name '__print_format_length_65536_78'
                                    410 ;c                         Allocated with name '__print_format_c_65536_78'
                                    411 ;memtype                   Allocated with name '__print_format_memtype_327680_95'
                                    412 ;store                     Allocated with name '__print_format_store_262144_99'
                                    413 ;pstore                    Allocated with name '__print_format_pstore_262144_99'
                                    414 ;------------------------------------------------------------
                                    415 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    416 ;	-----------------------------------------
                                    417 ;	 function _print_format
                                    418 ;	-----------------------------------------
      0000D4                        419 __print_format:
      0000D4 AF 83            [24]  420 	mov	r7,dph
      0000D6 E5 82            [12]  421 	mov	a,dpl
      0000D8 90r00r18         [24]  422 	mov	dptr,#__print_format_pfn_65536_77
      0000DB F0               [24]  423 	movx	@dptr,a
      0000DC EF               [12]  424 	mov	a,r7
      0000DD A3               [24]  425 	inc	dptr
      0000DE F0               [24]  426 	movx	@dptr,a
                                    427 ;	printf_large.c:461: output_char = pfn;
      0000DF 90r00r18         [24]  428 	mov	dptr,#__print_format_pfn_65536_77
      0000E2 E0               [24]  429 	movx	a,@dptr
      0000E3 FE               [12]  430 	mov	r6,a
      0000E4 A3               [24]  431 	inc	dptr
      0000E5 E0               [24]  432 	movx	a,@dptr
      0000E6 FF               [12]  433 	mov	r7,a
      0000E7 90r00r01         [24]  434 	mov	dptr,#_output_char
      0000EA EE               [12]  435 	mov	a,r6
      0000EB F0               [24]  436 	movx	@dptr,a
      0000EC EF               [12]  437 	mov	a,r7
      0000ED A3               [24]  438 	inc	dptr
      0000EE F0               [24]  439 	movx	@dptr,a
                                    440 ;	printf_large.c:462: p = pvoid;
      0000EF 90r00r11         [24]  441 	mov	dptr,#__print_format_PARM_2
      0000F2 E0               [24]  442 	movx	a,@dptr
      0000F3 FD               [12]  443 	mov	r5,a
      0000F4 A3               [24]  444 	inc	dptr
      0000F5 E0               [24]  445 	movx	a,@dptr
      0000F6 FE               [12]  446 	mov	r6,a
      0000F7 A3               [24]  447 	inc	dptr
      0000F8 E0               [24]  448 	movx	a,@dptr
      0000F9 FF               [12]  449 	mov	r7,a
      0000FA 90r00r03         [24]  450 	mov	dptr,#_p
      0000FD ED               [12]  451 	mov	a,r5
      0000FE F0               [24]  452 	movx	@dptr,a
      0000FF EE               [12]  453 	mov	a,r6
      000100 A3               [24]  454 	inc	dptr
      000101 F0               [24]  455 	movx	@dptr,a
      000102 EF               [12]  456 	mov	a,r7
      000103 A3               [24]  457 	inc	dptr
      000104 F0               [24]  458 	movx	@dptr,a
                                    459 ;	printf_large.c:466: charsOutputted = 0;
      000105 90r00r0B         [24]  460 	mov	dptr,#_charsOutputted
      000108 E4               [12]  461 	clr	a
      000109 F0               [24]  462 	movx	@dptr,a
      00010A A3               [24]  463 	inc	dptr
      00010B F0               [24]  464 	movx	@dptr,a
                                    465 ;	printf_large.c:475: while( c=*format++ )
      00010C                        466 00243$:
      00010C 90r00r14         [24]  467 	mov	dptr,#__print_format_PARM_3
      00010F E0               [24]  468 	movx	a,@dptr
      000110 FD               [12]  469 	mov	r5,a
      000111 A3               [24]  470 	inc	dptr
      000112 E0               [24]  471 	movx	a,@dptr
      000113 FE               [12]  472 	mov	r6,a
      000114 A3               [24]  473 	inc	dptr
      000115 E0               [24]  474 	movx	a,@dptr
      000116 FF               [12]  475 	mov	r7,a
      000117 8D 82            [24]  476 	mov	dpl,r5
      000119 8E 83            [24]  477 	mov	dph,r6
      00011B 8F F0            [24]  478 	mov	b,r7
      00011D 12r00r00         [24]  479 	lcall	__gptrget
      000120 FC               [12]  480 	mov	r4,a
      000121 90r00r14         [24]  481 	mov	dptr,#__print_format_PARM_3
      000124 74 01            [12]  482 	mov	a,#0x01
      000126 2D               [12]  483 	add	a,r5
      000127 F0               [24]  484 	movx	@dptr,a
      000128 E4               [12]  485 	clr	a
      000129 3E               [12]  486 	addc	a,r6
      00012A A3               [24]  487 	inc	dptr
      00012B F0               [24]  488 	movx	@dptr,a
      00012C EF               [12]  489 	mov	a,r7
      00012D A3               [24]  490 	inc	dptr
      00012E F0               [24]  491 	movx	@dptr,a
      00012F EC               [12]  492 	mov	a,r4
      000130 70 03            [24]  493 	jnz	00582$
      000132 02r09rD6         [24]  494 	ljmp	00245$
      000135                        495 00582$:
                                    496 ;	printf_large.c:477: if ( c=='%' )
      000135 BC 25 02         [24]  497 	cjne	r4,#0x25,00583$
      000138 80 03            [24]  498 	sjmp	00584$
      00013A                        499 00583$:
      00013A 02r09rCE         [24]  500 	ljmp	00241$
      00013D                        501 00584$:
                                    502 ;	printf_large.c:479: left_justify    = 0;
      00013D 90r00r1A         [24]  503 	mov	dptr,#__print_format_left_justify_65536_78
      000140 E4               [12]  504 	clr	a
      000141 F0               [24]  505 	movx	@dptr,a
                                    506 ;	printf_large.c:480: zero_padding    = 0;
      000142 90r00r1B         [24]  507 	mov	dptr,#__print_format_zero_padding_65536_78
      000145 F0               [24]  508 	movx	@dptr,a
                                    509 ;	printf_large.c:481: prefix_sign     = 0;
      000146 90r00r1C         [24]  510 	mov	dptr,#__print_format_prefix_sign_65536_78
      000149 F0               [24]  511 	movx	@dptr,a
                                    512 ;	printf_large.c:482: prefix_space    = 0;
      00014A 90r00r1D         [24]  513 	mov	dptr,#__print_format_prefix_space_65536_78
      00014D F0               [24]  514 	movx	@dptr,a
                                    515 ;	printf_large.c:483: signed_argument = 0;
      00014E 90r00r1E         [24]  516 	mov	dptr,#__print_format_signed_argument_65536_78
      000151 F0               [24]  517 	movx	@dptr,a
                                    518 ;	printf_large.c:484: char_argument   = 0;
      000152 90r00r1F         [24]  519 	mov	dptr,#__print_format_char_argument_65536_78
      000155 F0               [24]  520 	movx	@dptr,a
                                    521 ;	printf_large.c:485: long_argument   = 0;
      000156 90r00r20         [24]  522 	mov	dptr,#__print_format_long_argument_65536_78
      000159 F0               [24]  523 	movx	@dptr,a
                                    524 ;	printf_large.c:486: float_argument  = 0;
      00015A 90r00r21         [24]  525 	mov	dptr,#__print_format_float_argument_65536_78
      00015D F0               [24]  526 	movx	@dptr,a
                                    527 ;	printf_large.c:487: radix           = 0;
      00015E 90r00r23         [24]  528 	mov	dptr,#__print_format_radix_65536_78
      000161 F0               [24]  529 	movx	@dptr,a
                                    530 ;	printf_large.c:488: width           = 0;
      000162 90r00r24         [24]  531 	mov	dptr,#__print_format_width_65536_78
      000165 F0               [24]  532 	movx	@dptr,a
      000166 A3               [24]  533 	inc	dptr
      000167 F0               [24]  534 	movx	@dptr,a
                                    535 ;	printf_large.c:489: decimals        = -1;
      000168 90r00r26         [24]  536 	mov	dptr,#__print_format_decimals_65536_78
      00016B 14               [12]  537 	dec	a
      00016C F0               [24]  538 	movx	@dptr,a
      00016D A3               [24]  539 	inc	dptr
      00016E F0               [24]  540 	movx	@dptr,a
                                    541 ;	printf_large.c:491: get_conversion_spec:
      00016F 90r00r14         [24]  542 	mov	dptr,#__print_format_PARM_3
      000172 E0               [24]  543 	movx	a,@dptr
      000173 FD               [12]  544 	mov	r5,a
      000174 A3               [24]  545 	inc	dptr
      000175 E0               [24]  546 	movx	a,@dptr
      000176 FE               [12]  547 	mov	r6,a
      000177 A3               [24]  548 	inc	dptr
      000178 E0               [24]  549 	movx	a,@dptr
      000179 FF               [12]  550 	mov	r7,a
      00017A                        551 00101$:
                                    552 ;	printf_large.c:493: c = *format++;
      00017A 8D 82            [24]  553 	mov	dpl,r5
      00017C 8E 83            [24]  554 	mov	dph,r6
      00017E 8F F0            [24]  555 	mov	b,r7
      000180 12r00r00         [24]  556 	lcall	__gptrget
      000183 FB               [12]  557 	mov	r3,a
      000184 A3               [24]  558 	inc	dptr
      000185 AD 82            [24]  559 	mov	r5,dpl
      000187 AE 83            [24]  560 	mov	r6,dph
      000189 90r00r14         [24]  561 	mov	dptr,#__print_format_PARM_3
      00018C ED               [12]  562 	mov	a,r5
      00018D F0               [24]  563 	movx	@dptr,a
      00018E EE               [12]  564 	mov	a,r6
      00018F A3               [24]  565 	inc	dptr
      000190 F0               [24]  566 	movx	@dptr,a
      000191 EF               [12]  567 	mov	a,r7
      000192 A3               [24]  568 	inc	dptr
      000193 F0               [24]  569 	movx	@dptr,a
      000194 90r00r2A         [24]  570 	mov	dptr,#__print_format_c_65536_78
      000197 EB               [12]  571 	mov	a,r3
      000198 F0               [24]  572 	movx	@dptr,a
                                    573 ;	printf_large.c:495: if (c=='%')
      000199 BB 25 08         [24]  574 	cjne	r3,#0x25,00103$
                                    575 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      00019C 8B 82            [24]  576 	mov	dpl,r3
      00019E 12r00r00         [24]  577 	lcall	__output_char
                                    578 ;	printf_large.c:498: continue;
      0001A1 02r01r0C         [24]  579 	ljmp	00243$
      0001A4                        580 00103$:
                                    581 ;	printf_large.c:501: if (isdigit(c))
      0001A4 BB 30 00         [24]  582 	cjne	r3,#0x30,00587$
      0001A7                        583 00587$:
      0001A7 50 03            [24]  584 	jnc	00588$
      0001A9 02r02r6D         [24]  585 	ljmp	00110$
      0001AC                        586 00588$:
      0001AC EB               [12]  587 	mov	a,r3
      0001AD 24 C6            [12]  588 	add	a,#0xff - 0x39
      0001AF 50 03            [24]  589 	jnc	00589$
      0001B1 02r02r6D         [24]  590 	ljmp	00110$
      0001B4                        591 00589$:
                                    592 ;	printf_large.c:503: if (decimals==-1)
      0001B4 90r00r26         [24]  593 	mov	dptr,#__print_format_decimals_65536_78
      0001B7 E0               [24]  594 	movx	a,@dptr
      0001B8 F5*00            [12]  595 	mov	__print_format_sloc0_1_0,a
      0001BA A3               [24]  596 	inc	dptr
      0001BB E0               [24]  597 	movx	a,@dptr
      0001BC F5*01            [12]  598 	mov	(__print_format_sloc0_1_0 + 1),a
      0001BE 74 FF            [12]  599 	mov	a,#0xff
      0001C0 B5*00 63         [24]  600 	cjne	a,__print_format_sloc0_1_0,00107$
      0001C3 B5*01 60         [24]  601 	cjne	a,(__print_format_sloc0_1_0 + 1),00107$
                                    602 ;	printf_large.c:505: width = 10*width + c - '0';
      0001C6 C0 05            [24]  603 	push	ar5
      0001C8 C0 06            [24]  604 	push	ar6
      0001CA C0 07            [24]  605 	push	ar7
      0001CC 90r00r24         [24]  606 	mov	dptr,#__print_format_width_65536_78
      0001CF E0               [24]  607 	movx	a,@dptr
      0001D0 FA               [12]  608 	mov	r2,a
      0001D1 A3               [24]  609 	inc	dptr
      0001D2 E0               [24]  610 	movx	a,@dptr
      0001D3 FF               [12]  611 	mov	r7,a
      0001D4 90r00r00         [24]  612 	mov	dptr,#__mulint_PARM_2
      0001D7 EA               [12]  613 	mov	a,r2
      0001D8 F0               [24]  614 	movx	@dptr,a
      0001D9 EF               [12]  615 	mov	a,r7
      0001DA A3               [24]  616 	inc	dptr
      0001DB F0               [24]  617 	movx	@dptr,a
      0001DC 90 00 0A         [24]  618 	mov	dptr,#0x000a
      0001DF C0 05            [24]  619 	push	ar5
      0001E1 C0 03            [24]  620 	push	ar3
      0001E3 12r00r00         [24]  621 	lcall	__mulint
      0001E6 AE 82            [24]  622 	mov	r6,dpl
      0001E8 AF 83            [24]  623 	mov	r7,dph
      0001EA D0 03            [24]  624 	pop	ar3
      0001EC D0 05            [24]  625 	pop	ar5
      0001EE 8B 02            [24]  626 	mov	ar2,r3
      0001F0 7D 00            [12]  627 	mov	r5,#0x00
      0001F2 EA               [12]  628 	mov	a,r2
      0001F3 2E               [12]  629 	add	a,r6
      0001F4 FE               [12]  630 	mov	r6,a
      0001F5 ED               [12]  631 	mov	a,r5
      0001F6 3F               [12]  632 	addc	a,r7
      0001F7 FF               [12]  633 	mov	r7,a
      0001F8 EE               [12]  634 	mov	a,r6
      0001F9 24 D0            [12]  635 	add	a,#0xd0
      0001FB FE               [12]  636 	mov	r6,a
      0001FC EF               [12]  637 	mov	a,r7
      0001FD 34 FF            [12]  638 	addc	a,#0xff
      0001FF FF               [12]  639 	mov	r7,a
      000200 90r00r24         [24]  640 	mov	dptr,#__print_format_width_65536_78
      000203 EE               [12]  641 	mov	a,r6
      000204 F0               [24]  642 	movx	@dptr,a
      000205 EF               [12]  643 	mov	a,r7
      000206 A3               [24]  644 	inc	dptr
      000207 F0               [24]  645 	movx	@dptr,a
                                    646 ;	printf_large.c:506: if (width == 0)
      000208 D0 07            [24]  647 	pop	ar7
      00020A D0 06            [24]  648 	pop	ar6
      00020C D0 05            [24]  649 	pop	ar5
      00020E 90r00r24         [24]  650 	mov	dptr,#__print_format_width_65536_78
      000211 E0               [24]  651 	movx	a,@dptr
      000212 F5 F0            [12]  652 	mov	b,a
      000214 A3               [24]  653 	inc	dptr
      000215 E0               [24]  654 	movx	a,@dptr
      000216 45 F0            [12]  655 	orl	a,b
      000218 60 03            [24]  656 	jz	00592$
      00021A 02r01r7A         [24]  657 	ljmp	00101$
      00021D                        658 00592$:
                                    659 ;	printf_large.c:509: zero_padding = 1;
      00021D 90r00r1B         [24]  660 	mov	dptr,#__print_format_zero_padding_65536_78
      000220 74 01            [12]  661 	mov	a,#0x01
      000222 F0               [24]  662 	movx	@dptr,a
      000223 02r01r7A         [24]  663 	ljmp	00101$
      000226                        664 00107$:
                                    665 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000226 C0 05            [24]  666 	push	ar5
      000228 C0 06            [24]  667 	push	ar6
      00022A C0 07            [24]  668 	push	ar7
      00022C 90r00r00         [24]  669 	mov	dptr,#__mulint_PARM_2
      00022F E5*00            [12]  670 	mov	a,__print_format_sloc0_1_0
      000231 F0               [24]  671 	movx	@dptr,a
      000232 E5*01            [12]  672 	mov	a,(__print_format_sloc0_1_0 + 1)
      000234 A3               [24]  673 	inc	dptr
      000235 F0               [24]  674 	movx	@dptr,a
      000236 90 00 0A         [24]  675 	mov	dptr,#0x000a
      000239 C0 06            [24]  676 	push	ar6
      00023B C0 05            [24]  677 	push	ar5
      00023D C0 03            [24]  678 	push	ar3
      00023F 12r00r00         [24]  679 	lcall	__mulint
      000242 AA 82            [24]  680 	mov	r2,dpl
      000244 AF 83            [24]  681 	mov	r7,dph
      000246 D0 03            [24]  682 	pop	ar3
      000248 D0 05            [24]  683 	pop	ar5
      00024A D0 06            [24]  684 	pop	ar6
      00024C 7E 00            [12]  685 	mov	r6,#0x00
      00024E EB               [12]  686 	mov	a,r3
      00024F 2A               [12]  687 	add	a,r2
      000250 FA               [12]  688 	mov	r2,a
      000251 EE               [12]  689 	mov	a,r6
      000252 3F               [12]  690 	addc	a,r7
      000253 FF               [12]  691 	mov	r7,a
      000254 EA               [12]  692 	mov	a,r2
      000255 24 D0            [12]  693 	add	a,#0xd0
      000257 FA               [12]  694 	mov	r2,a
      000258 EF               [12]  695 	mov	a,r7
      000259 34 FF            [12]  696 	addc	a,#0xff
      00025B FF               [12]  697 	mov	r7,a
      00025C 90r00r26         [24]  698 	mov	dptr,#__print_format_decimals_65536_78
      00025F EA               [12]  699 	mov	a,r2
      000260 F0               [24]  700 	movx	@dptr,a
      000261 EF               [12]  701 	mov	a,r7
      000262 A3               [24]  702 	inc	dptr
      000263 F0               [24]  703 	movx	@dptr,a
                                    704 ;	printf_large.c:516: goto get_conversion_spec;
      000264 D0 07            [24]  705 	pop	ar7
      000266 D0 06            [24]  706 	pop	ar6
      000268 D0 05            [24]  707 	pop	ar5
      00026A 02r01r7A         [24]  708 	ljmp	00101$
      00026D                        709 00110$:
                                    710 ;	printf_large.c:519: if (c=='.')
      00026D 90r00r2A         [24]  711 	mov	dptr,#__print_format_c_65536_78
      000270 E0               [24]  712 	movx	a,@dptr
      000271 FB               [12]  713 	mov	r3,a
      000272 BB 2E 2F         [24]  714 	cjne	r3,#0x2e,00115$
                                    715 ;	printf_large.c:521: if (decimals==-1)
      000275 C0 05            [24]  716 	push	ar5
      000277 C0 06            [24]  717 	push	ar6
      000279 C0 07            [24]  718 	push	ar7
      00027B 90r00r26         [24]  719 	mov	dptr,#__print_format_decimals_65536_78
      00027E E0               [24]  720 	movx	a,@dptr
      00027F FA               [12]  721 	mov	r2,a
      000280 A3               [24]  722 	inc	dptr
      000281 E0               [24]  723 	movx	a,@dptr
      000282 FF               [12]  724 	mov	r7,a
      000283 BA FF 05         [24]  725 	cjne	r2,#0xff,00595$
      000286 BF FF 02         [24]  726 	cjne	r7,#0xff,00595$
      000289 80 09            [24]  727 	sjmp	00596$
      00028B                        728 00595$:
      00028B D0 07            [24]  729 	pop	ar7
      00028D D0 06            [24]  730 	pop	ar6
      00028F D0 05            [24]  731 	pop	ar5
      000291 02r01r7A         [24]  732 	ljmp	00101$
      000294                        733 00596$:
      000294 D0 07            [24]  734 	pop	ar7
      000296 D0 06            [24]  735 	pop	ar6
      000298 D0 05            [24]  736 	pop	ar5
                                    737 ;	printf_large.c:522: decimals=0;
      00029A 90r00r26         [24]  738 	mov	dptr,#__print_format_decimals_65536_78
      00029D E4               [12]  739 	clr	a
      00029E F0               [24]  740 	movx	@dptr,a
      00029F A3               [24]  741 	inc	dptr
      0002A0 F0               [24]  742 	movx	@dptr,a
                                    743 ;	printf_large.c:525: goto get_conversion_spec;
      0002A1 02r01r7A         [24]  744 	ljmp	00101$
      0002A4                        745 00115$:
                                    746 ;	printf_large.c:528: if (islower(c))
      0002A4 BB 61 00         [24]  747 	cjne	r3,#0x61,00597$
      0002A7                        748 00597$:
      0002A7 40 14            [24]  749 	jc	00117$
      0002A9 EB               [12]  750 	mov	a,r3
      0002AA 24 85            [12]  751 	add	a,#0xff - 0x7a
      0002AC 40 0F            [24]  752 	jc	00117$
                                    753 ;	printf_large.c:530: c = toupper(c);
      0002AE 90r00r2A         [24]  754 	mov	dptr,#__print_format_c_65536_78
      0002B1 74 DF            [12]  755 	mov	a,#0xdf
      0002B3 5B               [12]  756 	anl	a,r3
      0002B4 F0               [24]  757 	movx	@dptr,a
                                    758 ;	printf_large.c:531: lower_case = 1;
      0002B5 90r00r00         [24]  759 	mov	dptr,#_lower_case
      0002B8 74 01            [12]  760 	mov	a,#0x01
      0002BA F0               [24]  761 	movx	@dptr,a
      0002BB 80 05            [24]  762 	sjmp	00118$
      0002BD                        763 00117$:
                                    764 ;	printf_large.c:534: lower_case = 0;
      0002BD 90r00r00         [24]  765 	mov	dptr,#_lower_case
      0002C0 E4               [12]  766 	clr	a
      0002C1 F0               [24]  767 	movx	@dptr,a
      0002C2                        768 00118$:
                                    769 ;	printf_large.c:536: switch( c )
      0002C2 90r00r2A         [24]  770 	mov	dptr,#__print_format_c_65536_78
      0002C5 E0               [24]  771 	movx	a,@dptr
      0002C6 FB               [12]  772 	mov	r3,a
      0002C7 BB 20 02         [24]  773 	cjne	r3,#0x20,00600$
      0002CA 80 75            [24]  774 	sjmp	00122$
      0002CC                        775 00600$:
      0002CC BB 2B 02         [24]  776 	cjne	r3,#0x2b,00601$
      0002CF 80 67            [24]  777 	sjmp	00121$
      0002D1                        778 00601$:
      0002D1 BB 2D 02         [24]  779 	cjne	r3,#0x2d,00602$
      0002D4 80 59            [24]  780 	sjmp	00120$
      0002D6                        781 00602$:
      0002D6 BB 42 02         [24]  782 	cjne	r3,#0x42,00603$
      0002D9 80 6F            [24]  783 	sjmp	00123$
      0002DB                        784 00603$:
      0002DB BB 43 02         [24]  785 	cjne	r3,#0x43,00604$
      0002DE 80 7C            [24]  786 	sjmp	00129$
      0002E0                        787 00604$:
      0002E0 BB 44 03         [24]  788 	cjne	r3,#0x44,00605$
      0002E3 02r05r64         [24]  789 	ljmp	00166$
      0002E6                        790 00605$:
      0002E6 BB 46 03         [24]  791 	cjne	r3,#0x46,00606$
      0002E9 02r05r8A         [24]  792 	ljmp	00170$
      0002EC                        793 00606$:
      0002EC BB 48 03         [24]  794 	cjne	r3,#0x48,00607$
      0002EF 02r01r7A         [24]  795 	ljmp	00101$
      0002F2                        796 00607$:
      0002F2 BB 49 03         [24]  797 	cjne	r3,#0x49,00608$
      0002F5 02r05r64         [24]  798 	ljmp	00166$
      0002F8                        799 00608$:
      0002F8 BB 4A 03         [24]  800 	cjne	r3,#0x4a,00609$
      0002FB 02r01r7A         [24]  801 	ljmp	00101$
      0002FE                        802 00609$:
      0002FE BB 4C 02         [24]  803 	cjne	r3,#0x4c,00610$
      000301 80 50            [24]  804 	sjmp	00128$
      000303                        805 00610$:
      000303 BB 4F 03         [24]  806 	cjne	r3,#0x4f,00611$
      000306 02r05r72         [24]  807 	ljmp	00167$
      000309                        808 00611$:
      000309 BB 50 03         [24]  809 	cjne	r3,#0x50,00612$
      00030C 02r04rD2         [24]  810 	ljmp	00152$
      00030F                        811 00612$:
      00030F BB 53 02         [24]  812 	cjne	r3,#0x53,00613$
      000312 80 77            [24]  813 	sjmp	00133$
      000314                        814 00613$:
      000314 BB 54 03         [24]  815 	cjne	r3,#0x54,00614$
      000317 02r01r7A         [24]  816 	ljmp	00101$
      00031A                        817 00614$:
      00031A BB 55 03         [24]  818 	cjne	r3,#0x55,00615$
      00031D 02r05r7A         [24]  819 	ljmp	00168$
      000320                        820 00615$:
      000320 BB 58 03         [24]  821 	cjne	r3,#0x58,00616$
      000323 02r05r82         [24]  822 	ljmp	00169$
      000326                        823 00616$:
      000326 BB 5A 03         [24]  824 	cjne	r3,#0x5a,00617$
      000329 02r01r7A         [24]  825 	ljmp	00101$
      00032C                        826 00617$:
      00032C 02r05r92         [24]  827 	ljmp	00171$
                                    828 ;	printf_large.c:538: case '-':
      00032F                        829 00120$:
                                    830 ;	printf_large.c:539: left_justify = 1;
      00032F 90r00r1A         [24]  831 	mov	dptr,#__print_format_left_justify_65536_78
      000332 74 01            [12]  832 	mov	a,#0x01
      000334 F0               [24]  833 	movx	@dptr,a
                                    834 ;	printf_large.c:540: goto get_conversion_spec;
      000335 02r01r7A         [24]  835 	ljmp	00101$
                                    836 ;	printf_large.c:541: case '+':
      000338                        837 00121$:
                                    838 ;	printf_large.c:542: prefix_sign = 1;
      000338 90r00r1C         [24]  839 	mov	dptr,#__print_format_prefix_sign_65536_78
      00033B 74 01            [12]  840 	mov	a,#0x01
      00033D F0               [24]  841 	movx	@dptr,a
                                    842 ;	printf_large.c:543: goto get_conversion_spec;
      00033E 02r01r7A         [24]  843 	ljmp	00101$
                                    844 ;	printf_large.c:544: case ' ':
      000341                        845 00122$:
                                    846 ;	printf_large.c:545: prefix_space = 1;
      000341 90r00r1D         [24]  847 	mov	dptr,#__print_format_prefix_space_65536_78
      000344 74 01            [12]  848 	mov	a,#0x01
      000346 F0               [24]  849 	movx	@dptr,a
                                    850 ;	printf_large.c:546: goto get_conversion_spec;
      000347 02r01r7A         [24]  851 	ljmp	00101$
                                    852 ;	printf_large.c:547: case 'B': /* byte */
      00034A                        853 00123$:
                                    854 ;	printf_large.c:548: char_argument = 1;
      00034A 90r00r1F         [24]  855 	mov	dptr,#__print_format_char_argument_65536_78
      00034D 74 01            [12]  856 	mov	a,#0x01
      00034F F0               [24]  857 	movx	@dptr,a
                                    858 ;	printf_large.c:549: goto get_conversion_spec;
      000350 02r01r7A         [24]  859 	ljmp	00101$
                                    860 ;	printf_large.c:556: case 'L': /* long */
      000353                        861 00128$:
                                    862 ;	printf_large.c:557: long_argument = 1;
      000353 90r00r20         [24]  863 	mov	dptr,#__print_format_long_argument_65536_78
      000356 74 01            [12]  864 	mov	a,#0x01
      000358 F0               [24]  865 	movx	@dptr,a
                                    866 ;	printf_large.c:558: goto get_conversion_spec;
      000359 02r01r7A         [24]  867 	ljmp	00101$
                                    868 ;	printf_large.c:560: case 'C':
      00035C                        869 00129$:
                                    870 ;	printf_large.c:561: if( char_argument )
      00035C 90r00r1F         [24]  871 	mov	dptr,#__print_format_char_argument_65536_78
      00035F E0               [24]  872 	movx	a,@dptr
      000360 60 0E            [24]  873 	jz	00131$
                                    874 ;	printf_large.c:562: c = va_arg(ap,char);
      000362 90r00r17         [24]  875 	mov	dptr,#__print_format_PARM_4
      000365 E0               [24]  876 	movx	a,@dptr
      000366 14               [12]  877 	dec	a
      000367 F9               [12]  878 	mov	r1,a
      000368 F0               [24]  879 	movx	@dptr,a
      000369 90r00r2A         [24]  880 	mov	dptr,#__print_format_c_65536_78
      00036C E7               [12]  881 	mov	a,@r1
      00036D F0               [24]  882 	movx	@dptr,a
      00036E 80 0F            [24]  883 	sjmp	00132$
      000370                        884 00131$:
                                    885 ;	printf_large.c:564: c = va_arg(ap,int);
      000370 90r00r17         [24]  886 	mov	dptr,#__print_format_PARM_4
      000373 E0               [24]  887 	movx	a,@dptr
      000374 24 FE            [12]  888 	add	a,#0xfe
      000376 FF               [12]  889 	mov	r7,a
      000377 F0               [24]  890 	movx	@dptr,a
      000378 8F 01            [24]  891 	mov	ar1,r7
      00037A 90r00r2A         [24]  892 	mov	dptr,#__print_format_c_65536_78
      00037D E7               [12]  893 	mov	a,@r1
      00037E F0               [24]  894 	movx	@dptr,a
      00037F                        895 00132$:
                                    896 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      00037F 90r00r2A         [24]  897 	mov	dptr,#__print_format_c_65536_78
      000382 E0               [24]  898 	movx	a,@dptr
      000383 F5 82            [12]  899 	mov	dpl,a
      000385 12r00r00         [24]  900 	lcall	__output_char
                                    901 ;	printf_large.c:566: break;
      000388 02r05rA1         [24]  902 	ljmp	00172$
                                    903 ;	printf_large.c:568: case 'S':
      00038B                        904 00133$:
                                    905 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      00038B 90r00r17         [24]  906 	mov	dptr,#__print_format_PARM_4
      00038E E0               [24]  907 	movx	a,@dptr
      00038F 24 FD            [12]  908 	add	a,#0xfd
      000391 FF               [12]  909 	mov	r7,a
      000392 F0               [24]  910 	movx	@dptr,a
      000393 8F 01            [24]  911 	mov	ar1,r7
      000395 87 05            [24]  912 	mov	ar5,@r1
      000397 09               [12]  913 	inc	r1
      000398 87 06            [24]  914 	mov	ar6,@r1
      00039A 09               [12]  915 	inc	r1
      00039B 87 07            [24]  916 	mov	ar7,@r1
      00039D 19               [12]  917 	dec	r1
      00039E 19               [12]  918 	dec	r1
      00039F 90r00r06         [24]  919 	mov	dptr,#_value
      0003A2 ED               [12]  920 	mov	a,r5
      0003A3 F0               [24]  921 	movx	@dptr,a
      0003A4 EE               [12]  922 	mov	a,r6
      0003A5 A3               [24]  923 	inc	dptr
      0003A6 F0               [24]  924 	movx	@dptr,a
      0003A7 EF               [12]  925 	mov	a,r7
      0003A8 A3               [24]  926 	inc	dptr
      0003A9 F0               [24]  927 	movx	@dptr,a
                                    928 ;	printf_large.c:582: length = strlen(PTR);
      0003AA 8D 82            [24]  929 	mov	dpl,r5
      0003AC 8E 83            [24]  930 	mov	dph,r6
      0003AE 8F F0            [24]  931 	mov	b,r7
      0003B0 12r00r00         [24]  932 	lcall	_strlen
      0003B3 85 82*00         [24]  933 	mov	__print_format_sloc0_1_0,dpl
      0003B6 85 83*01         [24]  934 	mov	(__print_format_sloc0_1_0 + 1),dph
                                    935 ;	printf_large.c:584: if ( decimals == -1 )
      0003B9 90r00r26         [24]  936 	mov	dptr,#__print_format_decimals_65536_78
      0003BC E0               [24]  937 	movx	a,@dptr
      0003BD FA               [12]  938 	mov	r2,a
      0003BE A3               [24]  939 	inc	dptr
      0003BF E0               [24]  940 	movx	a,@dptr
      0003C0 FD               [12]  941 	mov	r5,a
      0003C1 BA FF 0D         [24]  942 	cjne	r2,#0xff,00135$
      0003C4 BD FF 0A         [24]  943 	cjne	r5,#0xff,00135$
                                    944 ;	printf_large.c:586: decimals = length;
      0003C7 90r00r26         [24]  945 	mov	dptr,#__print_format_decimals_65536_78
      0003CA E5*00            [12]  946 	mov	a,__print_format_sloc0_1_0
      0003CC F0               [24]  947 	movx	@dptr,a
      0003CD E5*01            [12]  948 	mov	a,(__print_format_sloc0_1_0 + 1)
      0003CF A3               [24]  949 	inc	dptr
      0003D0 F0               [24]  950 	movx	@dptr,a
      0003D1                        951 00135$:
                                    952 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      0003D1 90r00r1A         [24]  953 	mov	dptr,#__print_format_left_justify_65536_78
      0003D4 E0               [24]  954 	movx	a,@dptr
      0003D5 70 4B            [24]  955 	jnz	00289$
      0003D7 90r00r24         [24]  956 	mov	dptr,#__print_format_width_65536_78
      0003DA E0               [24]  957 	movx	a,@dptr
      0003DB FA               [12]  958 	mov	r2,a
      0003DC A3               [24]  959 	inc	dptr
      0003DD E0               [24]  960 	movx	a,@dptr
      0003DE FD               [12]  961 	mov	r5,a
      0003DF C3               [12]  962 	clr	c
      0003E0 E5*00            [12]  963 	mov	a,__print_format_sloc0_1_0
      0003E2 9A               [12]  964 	subb	a,r2
      0003E3 E5*01            [12]  965 	mov	a,(__print_format_sloc0_1_0 + 1)
      0003E5 9D               [12]  966 	subb	a,r5
      0003E6 50 3A            [24]  967 	jnc	00289$
                                    968 ;	printf_large.c:590: width -= length;
      0003E8 90r00r24         [24]  969 	mov	dptr,#__print_format_width_65536_78
      0003EB EA               [12]  970 	mov	a,r2
      0003EC C3               [12]  971 	clr	c
      0003ED 95*00            [12]  972 	subb	a,__print_format_sloc0_1_0
      0003EF F0               [24]  973 	movx	@dptr,a
      0003F0 ED               [12]  974 	mov	a,r5
      0003F1 95*01            [12]  975 	subb	a,(__print_format_sloc0_1_0 + 1)
      0003F3 A3               [24]  976 	inc	dptr
      0003F4 F0               [24]  977 	movx	@dptr,a
                                    978 ;	printf_large.c:591: while( width-- != 0 )
      0003F5 90r00r24         [24]  979 	mov	dptr,#__print_format_width_65536_78
      0003F8 E0               [24]  980 	movx	a,@dptr
      0003F9 FA               [12]  981 	mov	r2,a
      0003FA A3               [24]  982 	inc	dptr
      0003FB E0               [24]  983 	movx	a,@dptr
      0003FC FD               [12]  984 	mov	r5,a
      0003FD                        985 00136$:
      0003FD 8A 06            [24]  986 	mov	ar6,r2
      0003FF 8D 07            [24]  987 	mov	ar7,r5
      000401 1A               [12]  988 	dec	r2
      000402 BA FF 01         [24]  989 	cjne	r2,#0xff,00623$
      000405 1D               [12]  990 	dec	r5
      000406                        991 00623$:
      000406 EE               [12]  992 	mov	a,r6
      000407 4F               [12]  993 	orl	a,r7
      000408 60 10            [24]  994 	jz	00329$
                                    995 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      00040A 75 82 20         [24]  996 	mov	dpl,#0x20
      00040D C0 05            [24]  997 	push	ar5
      00040F C0 02            [24]  998 	push	ar2
      000411 12r00r00         [24]  999 	lcall	__output_char
      000414 D0 02            [24] 1000 	pop	ar2
      000416 D0 05            [24] 1001 	pop	ar5
                                   1002 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000418 80 E3            [24] 1003 	sjmp	00136$
      00041A                       1004 00329$:
      00041A 90r00r24         [24] 1005 	mov	dptr,#__print_format_width_65536_78
      00041D EA               [12] 1006 	mov	a,r2
      00041E F0               [24] 1007 	movx	@dptr,a
      00041F ED               [12] 1008 	mov	a,r5
      000420 A3               [24] 1009 	inc	dptr
      000421 F0               [24] 1010 	movx	@dptr,a
      000422                       1011 00289$:
      000422 90r00r26         [24] 1012 	mov	dptr,#__print_format_decimals_65536_78
      000425 E0               [24] 1013 	movx	a,@dptr
      000426 F5*03            [12] 1014 	mov	__print_format_sloc2_1_0,a
      000428 A3               [24] 1015 	inc	dptr
      000429 E0               [24] 1016 	movx	a,@dptr
      00042A F5*04            [12] 1017 	mov	(__print_format_sloc2_1_0 + 1),a
      00042C                       1018 00143$:
      00042C 90r00r06         [24] 1019 	mov	dptr,#_value
      00042F E0               [24] 1020 	movx	a,@dptr
      000430 FA               [12] 1021 	mov	r2,a
      000431 A3               [24] 1022 	inc	dptr
      000432 E0               [24] 1023 	movx	a,@dptr
      000433 FD               [12] 1024 	mov	r5,a
      000434 A3               [24] 1025 	inc	dptr
      000435 E0               [24] 1026 	movx	a,@dptr
      000436 FF               [12] 1027 	mov	r7,a
      000437 8A 82            [24] 1028 	mov	dpl,r2
      000439 8D 83            [24] 1029 	mov	dph,r5
      00043B 8F F0            [24] 1030 	mov	b,r7
      00043D 12r00r00         [24] 1031 	lcall	__gptrget
      000440 F5*02            [12] 1032 	mov	__print_format_sloc1_1_0,a
      000442 60 3C            [24] 1033 	jz	00145$
      000444 C3               [12] 1034 	clr	c
      000445 E4               [12] 1035 	clr	a
      000446 95*03            [12] 1036 	subb	a,__print_format_sloc2_1_0
      000448 74 80            [12] 1037 	mov	a,#(0x00 ^ 0x80)
      00044A 85*04 F0         [24] 1038 	mov	b,(__print_format_sloc2_1_0 + 1)
      00044D 63 F0 80         [24] 1039 	xrl	b,#0x80
      000450 95 F0            [12] 1040 	subb	a,b
      000452 50 2C            [24] 1041 	jnc	00145$
      000454 15*03            [12] 1042 	dec	__print_format_sloc2_1_0
      000456 74 FF            [12] 1043 	mov	a,#0xff
      000458 B5*03 02         [24] 1044 	cjne	a,__print_format_sloc2_1_0,00627$
      00045B 15*04            [12] 1045 	dec	(__print_format_sloc2_1_0 + 1)
      00045D                       1046 00627$:
                                   1047 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      00045D 85*02 82         [24] 1048 	mov	dpl,__print_format_sloc1_1_0
      000460 12r00r00         [24] 1049 	lcall	__output_char
                                   1050 ;	printf_large.c:600: PTR++;
      000463 90r00r06         [24] 1051 	mov	dptr,#_value
      000466 E0               [24] 1052 	movx	a,@dptr
      000467 FA               [12] 1053 	mov	r2,a
      000468 A3               [24] 1054 	inc	dptr
      000469 E0               [24] 1055 	movx	a,@dptr
      00046A FD               [12] 1056 	mov	r5,a
      00046B A3               [24] 1057 	inc	dptr
      00046C E0               [24] 1058 	movx	a,@dptr
      00046D FF               [12] 1059 	mov	r7,a
      00046E 0A               [12] 1060 	inc	r2
      00046F BA 00 01         [24] 1061 	cjne	r2,#0x00,00628$
      000472 0D               [12] 1062 	inc	r5
      000473                       1063 00628$:
      000473 90r00r06         [24] 1064 	mov	dptr,#_value
      000476 EA               [12] 1065 	mov	a,r2
      000477 F0               [24] 1066 	movx	@dptr,a
      000478 ED               [12] 1067 	mov	a,r5
      000479 A3               [24] 1068 	inc	dptr
      00047A F0               [24] 1069 	movx	@dptr,a
      00047B EF               [12] 1070 	mov	a,r7
      00047C A3               [24] 1071 	inc	dptr
      00047D F0               [24] 1072 	movx	@dptr,a
      00047E 80 AC            [24] 1073 	sjmp	00143$
      000480                       1074 00145$:
                                   1075 ;	printf_large.c:603: if ( left_justify && (length < width))
      000480 90r00r1A         [24] 1076 	mov	dptr,#__print_format_left_justify_65536_78
      000483 E0               [24] 1077 	movx	a,@dptr
      000484 70 03            [24] 1078 	jnz	00629$
      000486 02r05rA1         [24] 1079 	ljmp	00172$
      000489                       1080 00629$:
      000489 90r00r24         [24] 1081 	mov	dptr,#__print_format_width_65536_78
      00048C E0               [24] 1082 	movx	a,@dptr
      00048D FE               [12] 1083 	mov	r6,a
      00048E A3               [24] 1084 	inc	dptr
      00048F E0               [24] 1085 	movx	a,@dptr
      000490 FF               [12] 1086 	mov	r7,a
      000491 C3               [12] 1087 	clr	c
      000492 E5*00            [12] 1088 	mov	a,__print_format_sloc0_1_0
      000494 9E               [12] 1089 	subb	a,r6
      000495 E5*01            [12] 1090 	mov	a,(__print_format_sloc0_1_0 + 1)
      000497 9F               [12] 1091 	subb	a,r7
      000498 40 03            [24] 1092 	jc	00630$
      00049A 02r05rA1         [24] 1093 	ljmp	00172$
      00049D                       1094 00630$:
                                   1095 ;	printf_large.c:605: width -= length;
      00049D 90r00r24         [24] 1096 	mov	dptr,#__print_format_width_65536_78
      0004A0 EE               [12] 1097 	mov	a,r6
      0004A1 C3               [12] 1098 	clr	c
      0004A2 95*00            [12] 1099 	subb	a,__print_format_sloc0_1_0
      0004A4 F0               [24] 1100 	movx	@dptr,a
      0004A5 EF               [12] 1101 	mov	a,r7
      0004A6 95*01            [12] 1102 	subb	a,(__print_format_sloc0_1_0 + 1)
      0004A8 A3               [24] 1103 	inc	dptr
      0004A9 F0               [24] 1104 	movx	@dptr,a
                                   1105 ;	printf_large.c:606: while( width-- != 0 )
      0004AA 90r00r24         [24] 1106 	mov	dptr,#__print_format_width_65536_78
      0004AD E0               [24] 1107 	movx	a,@dptr
      0004AE FE               [12] 1108 	mov	r6,a
      0004AF A3               [24] 1109 	inc	dptr
      0004B0 E0               [24] 1110 	movx	a,@dptr
      0004B1 FF               [12] 1111 	mov	r7,a
      0004B2                       1112 00146$:
      0004B2 8E 02            [24] 1113 	mov	ar2,r6
      0004B4 8F 05            [24] 1114 	mov	ar5,r7
      0004B6 1E               [12] 1115 	dec	r6
      0004B7 BE FF 01         [24] 1116 	cjne	r6,#0xff,00631$
      0004BA 1F               [12] 1117 	dec	r7
      0004BB                       1118 00631$:
      0004BB EA               [12] 1119 	mov	a,r2
      0004BC 4D               [12] 1120 	orl	a,r5
      0004BD 70 03            [24] 1121 	jnz	00632$
      0004BF 02r05r99         [24] 1122 	ljmp	00331$
      0004C2                       1123 00632$:
                                   1124 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0004C2 75 82 20         [24] 1125 	mov	dpl,#0x20
      0004C5 C0 07            [24] 1126 	push	ar7
      0004C7 C0 06            [24] 1127 	push	ar6
      0004C9 12r00r00         [24] 1128 	lcall	__output_char
      0004CC D0 06            [24] 1129 	pop	ar6
      0004CE D0 07            [24] 1130 	pop	ar7
                                   1131 ;	printf_large.c:613: case 'P':
      0004D0 80 E0            [24] 1132 	sjmp	00146$
      0004D2                       1133 00152$:
                                   1134 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      0004D2 90r00r17         [24] 1135 	mov	dptr,#__print_format_PARM_4
      0004D5 E0               [24] 1136 	movx	a,@dptr
      0004D6 24 FD            [12] 1137 	add	a,#0xfd
      0004D8 FD               [12] 1138 	mov	r5,a
      0004D9 F0               [24] 1139 	movx	@dptr,a
      0004DA 8D 01            [24] 1140 	mov	ar1,r5
      0004DC 87*05            [24] 1141 	mov	__print_format_sloc3_1_0,@r1
      0004DE 09               [12] 1142 	inc	r1
      0004DF 87*06            [24] 1143 	mov	(__print_format_sloc3_1_0 + 1),@r1
      0004E1 09               [12] 1144 	inc	r1
      0004E2 87*07            [24] 1145 	mov	(__print_format_sloc3_1_0 + 2),@r1
      0004E4 19               [12] 1146 	dec	r1
      0004E5 19               [12] 1147 	dec	r1
      0004E6 90r00r06         [24] 1148 	mov	dptr,#_value
      0004E9 E5*05            [12] 1149 	mov	a,__print_format_sloc3_1_0
      0004EB F0               [24] 1150 	movx	@dptr,a
      0004EC E5*06            [12] 1151 	mov	a,(__print_format_sloc3_1_0 + 1)
      0004EE A3               [24] 1152 	inc	dptr
      0004EF F0               [24] 1153 	movx	@dptr,a
      0004F0 E5*07            [12] 1154 	mov	a,(__print_format_sloc3_1_0 + 2)
      0004F2 A3               [24] 1155 	inc	dptr
      0004F3 F0               [24] 1156 	movx	@dptr,a
                                   1157 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      0004F4 90r00r08         [24] 1158 	mov	dptr,#(_value + 0x0002)
      0004F7 E0               [24] 1159 	movx	a,@dptr
      0004F8 FD               [12] 1160 	mov	r5,a
                                   1161 ;	printf_large.c:638: if (memtype >= 0x80)
      0004F9 BD 80 00         [24] 1162 	cjne	r5,#0x80,00633$
      0004FC                       1163 00633$:
      0004FC 40 08            [24] 1164 	jc	00160$
                                   1165 ;	printf_large.c:639: c = 'C';
      0004FE 90r00r2A         [24] 1166 	mov	dptr,#__print_format_c_65536_78
      000501 74 43            [12] 1167 	mov	a,#0x43
      000503 F0               [24] 1168 	movx	@dptr,a
      000504 80 20            [24] 1169 	sjmp	00161$
      000506                       1170 00160$:
                                   1171 ;	printf_large.c:640: else if (memtype >= 0x60)
      000506 BD 60 00         [24] 1172 	cjne	r5,#0x60,00635$
      000509                       1173 00635$:
      000509 40 08            [24] 1174 	jc	00157$
                                   1175 ;	printf_large.c:641: c = 'P';
      00050B 90r00r2A         [24] 1176 	mov	dptr,#__print_format_c_65536_78
      00050E 74 50            [12] 1177 	mov	a,#0x50
      000510 F0               [24] 1178 	movx	@dptr,a
      000511 80 13            [24] 1179 	sjmp	00161$
      000513                       1180 00157$:
                                   1181 ;	printf_large.c:642: else if (memtype >= 0x40)
      000513 BD 40 00         [24] 1182 	cjne	r5,#0x40,00637$
      000516                       1183 00637$:
      000516 40 08            [24] 1184 	jc	00154$
                                   1185 ;	printf_large.c:643: c = 'I';
      000518 90r00r2A         [24] 1186 	mov	dptr,#__print_format_c_65536_78
      00051B 74 49            [12] 1187 	mov	a,#0x49
      00051D F0               [24] 1188 	movx	@dptr,a
      00051E 80 06            [24] 1189 	sjmp	00161$
      000520                       1190 00154$:
                                   1191 ;	printf_large.c:645: c = 'X';
      000520 90r00r2A         [24] 1192 	mov	dptr,#__print_format_c_65536_78
      000523 74 58            [12] 1193 	mov	a,#0x58
      000525 F0               [24] 1194 	movx	@dptr,a
      000526                       1195 00161$:
                                   1196 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000526 90r00r2A         [24] 1197 	mov	dptr,#__print_format_c_65536_78
      000529 E0               [24] 1198 	movx	a,@dptr
      00052A FD               [12] 1199 	mov	r5,a
      00052B F5 82            [12] 1200 	mov	dpl,a
      00052D C0 05            [24] 1201 	push	ar5
      00052F 12r00r00         [24] 1202 	lcall	__output_char
                                   1203 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      000532 75 82 3A         [24] 1204 	mov	dpl,#0x3a
      000535 12r00r00         [24] 1205 	lcall	__output_char
                                   1206 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000538 75 82 30         [24] 1207 	mov	dpl,#0x30
      00053B 12r00r00         [24] 1208 	lcall	__output_char
                                   1209 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      00053E 75 82 78         [24] 1210 	mov	dpl,#0x78
      000541 12r00r00         [24] 1211 	lcall	__output_char
      000544 D0 05            [24] 1212 	pop	ar5
                                   1213 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000546 BD 49 02         [24] 1214 	cjne	r5,#0x49,00639$
      000549 80 0E            [24] 1215 	sjmp	00163$
      00054B                       1216 00639$:
                                   1217 ;	printf_large.c:652: (c != 'P' /* pdata */))
      00054B BD 50 02         [24] 1218 	cjne	r5,#0x50,00640$
      00054E 80 09            [24] 1219 	sjmp	00163$
      000550                       1220 00640$:
                                   1221 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      000550 90r00r07         [24] 1222 	mov	dptr,#(_value + 0x0001)
      000553 E0               [24] 1223 	movx	a,@dptr
      000554 F5 82            [12] 1224 	mov	dpl,a
      000556 12r00r5B         [24] 1225 	lcall	_output_2digits
      000559                       1226 00163$:
                                   1227 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000559 90r00r06         [24] 1228 	mov	dptr,#_value
      00055C E0               [24] 1229 	movx	a,@dptr
      00055D F5 82            [12] 1230 	mov	dpl,a
      00055F 12r00r5B         [24] 1231 	lcall	_output_2digits
                                   1232 ;	printf_large.c:668: break;
                                   1233 ;	printf_large.c:671: case 'I':
      000562 80 3D            [24] 1234 	sjmp	00172$
      000564                       1235 00166$:
                                   1236 ;	printf_large.c:672: signed_argument = 1;
      000564 90r00r1E         [24] 1237 	mov	dptr,#__print_format_signed_argument_65536_78
      000567 74 01            [12] 1238 	mov	a,#0x01
      000569 F0               [24] 1239 	movx	@dptr,a
                                   1240 ;	printf_large.c:673: radix = 10;
      00056A 90r00r23         [24] 1241 	mov	dptr,#__print_format_radix_65536_78
      00056D 74 0A            [12] 1242 	mov	a,#0x0a
      00056F F0               [24] 1243 	movx	@dptr,a
                                   1244 ;	printf_large.c:674: break;
                                   1245 ;	printf_large.c:676: case 'O':
      000570 80 2F            [24] 1246 	sjmp	00172$
      000572                       1247 00167$:
                                   1248 ;	printf_large.c:677: radix = 8;
      000572 90r00r23         [24] 1249 	mov	dptr,#__print_format_radix_65536_78
      000575 74 08            [12] 1250 	mov	a,#0x08
      000577 F0               [24] 1251 	movx	@dptr,a
                                   1252 ;	printf_large.c:678: break;
                                   1253 ;	printf_large.c:680: case 'U':
      000578 80 27            [24] 1254 	sjmp	00172$
      00057A                       1255 00168$:
                                   1256 ;	printf_large.c:681: radix = 10;
      00057A 90r00r23         [24] 1257 	mov	dptr,#__print_format_radix_65536_78
      00057D 74 0A            [12] 1258 	mov	a,#0x0a
      00057F F0               [24] 1259 	movx	@dptr,a
                                   1260 ;	printf_large.c:682: break;
                                   1261 ;	printf_large.c:684: case 'X':
      000580 80 1F            [24] 1262 	sjmp	00172$
      000582                       1263 00169$:
                                   1264 ;	printf_large.c:685: radix = 16;
      000582 90r00r23         [24] 1265 	mov	dptr,#__print_format_radix_65536_78
      000585 74 10            [12] 1266 	mov	a,#0x10
      000587 F0               [24] 1267 	movx	@dptr,a
                                   1268 ;	printf_large.c:686: break;
                                   1269 ;	printf_large.c:688: case 'F':
      000588 80 17            [24] 1270 	sjmp	00172$
      00058A                       1271 00170$:
                                   1272 ;	printf_large.c:689: float_argument=1;
      00058A 90r00r21         [24] 1273 	mov	dptr,#__print_format_float_argument_65536_78
      00058D 74 01            [12] 1274 	mov	a,#0x01
      00058F F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	printf_large.c:690: break;
                                   1277 ;	printf_large.c:692: default:
      000590 80 0F            [24] 1278 	sjmp	00172$
      000592                       1279 00171$:
                                   1280 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      000592 8B 82            [24] 1281 	mov	dpl,r3
      000594 12r00r00         [24] 1282 	lcall	__output_char
                                   1283 ;	printf_large.c:877: return charsOutputted;
                                   1284 ;	printf_large.c:696: }
      000597 80 08            [24] 1285 	sjmp	00172$
      000599                       1286 00331$:
      000599 90r00r24         [24] 1287 	mov	dptr,#__print_format_width_65536_78
      00059C EE               [12] 1288 	mov	a,r6
      00059D F0               [24] 1289 	movx	@dptr,a
      00059E EF               [12] 1290 	mov	a,r7
      00059F A3               [24] 1291 	inc	dptr
      0005A0 F0               [24] 1292 	movx	@dptr,a
      0005A1                       1293 00172$:
                                   1294 ;	printf_large.c:698: if (float_argument)
      0005A1 90r00r21         [24] 1295 	mov	dptr,#__print_format_float_argument_65536_78
      0005A4 E0               [24] 1296 	movx	a,@dptr
      0005A5 60 71            [24] 1297 	jz	00238$
                                   1298 ;	printf_large.c:700: value.f = va_arg(ap, float);
      0005A7 90r00r17         [24] 1299 	mov	dptr,#__print_format_PARM_4
      0005AA E0               [24] 1300 	movx	a,@dptr
      0005AB 24 FC            [12] 1301 	add	a,#0xfc
      0005AD FF               [12] 1302 	mov	r7,a
      0005AE F0               [24] 1303 	movx	@dptr,a
      0005AF 8F 01            [24] 1304 	mov	ar1,r7
      0005B1 87 03            [24] 1305 	mov	ar3,@r1
      0005B3 09               [12] 1306 	inc	r1
      0005B4 87 05            [24] 1307 	mov	ar5,@r1
      0005B6 09               [12] 1308 	inc	r1
      0005B7 87 06            [24] 1309 	mov	ar6,@r1
      0005B9 09               [12] 1310 	inc	r1
      0005BA 87 07            [24] 1311 	mov	ar7,@r1
      0005BC 19               [12] 1312 	dec	r1
      0005BD 19               [12] 1313 	dec	r1
      0005BE 19               [12] 1314 	dec	r1
      0005BF 90r00r06         [24] 1315 	mov	dptr,#_value
      0005C2 EB               [12] 1316 	mov	a,r3
      0005C3 F0               [24] 1317 	movx	@dptr,a
      0005C4 ED               [12] 1318 	mov	a,r5
      0005C5 A3               [24] 1319 	inc	dptr
      0005C6 F0               [24] 1320 	movx	@dptr,a
      0005C7 EE               [12] 1321 	mov	a,r6
      0005C8 A3               [24] 1322 	inc	dptr
      0005C9 F0               [24] 1323 	movx	@dptr,a
      0005CA EF               [12] 1324 	mov	a,r7
      0005CB A3               [24] 1325 	inc	dptr
      0005CC F0               [24] 1326 	movx	@dptr,a
                                   1327 ;	printf_large.c:702: PTR="<NO FLOAT>";
      0005CD 90r00r06         [24] 1328 	mov	dptr,#_value
      0005D0 74r00            [12] 1329 	mov	a,#___str_0
      0005D2 F0               [24] 1330 	movx	@dptr,a
      0005D3 74s00            [12] 1331 	mov	a,#(___str_0 >> 8)
      0005D5 A3               [24] 1332 	inc	dptr
      0005D6 F0               [24] 1333 	movx	@dptr,a
      0005D7 74 80            [12] 1334 	mov	a,#0x80
      0005D9 A3               [24] 1335 	inc	dptr
      0005DA F0               [24] 1336 	movx	@dptr,a
                                   1337 ;	printf_large.c:703: while (c=*PTR++)
      0005DB                       1338 00173$:
      0005DB 90r00r06         [24] 1339 	mov	dptr,#_value
      0005DE E0               [24] 1340 	movx	a,@dptr
      0005DF F5*05            [12] 1341 	mov	__print_format_sloc3_1_0,a
      0005E1 A3               [24] 1342 	inc	dptr
      0005E2 E0               [24] 1343 	movx	a,@dptr
      0005E3 F5*06            [12] 1344 	mov	(__print_format_sloc3_1_0 + 1),a
      0005E5 A3               [24] 1345 	inc	dptr
      0005E6 E0               [24] 1346 	movx	a,@dptr
      0005E7 F5*07            [12] 1347 	mov	(__print_format_sloc3_1_0 + 2),a
      0005E9 74 01            [12] 1348 	mov	a,#0x01
      0005EB 25*05            [12] 1349 	add	a,__print_format_sloc3_1_0
      0005ED FA               [12] 1350 	mov	r2,a
      0005EE E4               [12] 1351 	clr	a
      0005EF 35*06            [12] 1352 	addc	a,(__print_format_sloc3_1_0 + 1)
      0005F1 FB               [12] 1353 	mov	r3,a
      0005F2 AF*07            [24] 1354 	mov	r7,(__print_format_sloc3_1_0 + 2)
      0005F4 90r00r06         [24] 1355 	mov	dptr,#_value
      0005F7 EA               [12] 1356 	mov	a,r2
      0005F8 F0               [24] 1357 	movx	@dptr,a
      0005F9 EB               [12] 1358 	mov	a,r3
      0005FA A3               [24] 1359 	inc	dptr
      0005FB F0               [24] 1360 	movx	@dptr,a
      0005FC EF               [12] 1361 	mov	a,r7
      0005FD A3               [24] 1362 	inc	dptr
      0005FE F0               [24] 1363 	movx	@dptr,a
      0005FF 85*05 82         [24] 1364 	mov	dpl,__print_format_sloc3_1_0
      000602 85*06 83         [24] 1365 	mov	dph,(__print_format_sloc3_1_0 + 1)
      000605 85*07 F0         [24] 1366 	mov	b,(__print_format_sloc3_1_0 + 2)
      000608 12r00r00         [24] 1367 	lcall	__gptrget
      00060B FF               [12] 1368 	mov	r7,a
      00060C 70 03            [24] 1369 	jnz	00642$
      00060E 02r01r0C         [24] 1370 	ljmp	00243$
      000611                       1371 00642$:
                                   1372 ;	printf_large.c:705: OUTPUT_CHAR (c, p);
      000611 8F 82            [24] 1373 	mov	dpl,r7
      000613 12r00r00         [24] 1374 	lcall	__output_char
      000616 80 C3            [24] 1375 	sjmp	00173$
      000618                       1376 00238$:
                                   1377 ;	printf_large.c:723: else if (radix != 0)
      000618 90r00r23         [24] 1378 	mov	dptr,#__print_format_radix_65536_78
      00061B E0               [24] 1379 	movx	a,@dptr
      00061C 70 03            [24] 1380 	jnz	00643$
      00061E 02r01r0C         [24] 1381 	ljmp	00243$
      000621                       1382 00643$:
                                   1383 ;	printf_large.c:731: if (char_argument)
      000621 90r00r1F         [24] 1384 	mov	dptr,#__print_format_char_argument_65536_78
      000624 E0               [24] 1385 	movx	a,@dptr
      000625 60 47            [24] 1386 	jz	00184$
                                   1387 ;	printf_large.c:733: value.l = va_arg(ap, char);
      000627 90r00r17         [24] 1388 	mov	dptr,#__print_format_PARM_4
      00062A E0               [24] 1389 	movx	a,@dptr
      00062B 14               [12] 1390 	dec	a
      00062C F9               [12] 1391 	mov	r1,a
      00062D F0               [24] 1392 	movx	@dptr,a
      00062E 87 07            [24] 1393 	mov	ar7,@r1
      000630 7E 00            [12] 1394 	mov	r6,#0x00
      000632 7D 00            [12] 1395 	mov	r5,#0x00
      000634 7B 00            [12] 1396 	mov	r3,#0x00
      000636 90r00r06         [24] 1397 	mov	dptr,#_value
      000639 EF               [12] 1398 	mov	a,r7
      00063A F0               [24] 1399 	movx	@dptr,a
      00063B EE               [12] 1400 	mov	a,r6
      00063C A3               [24] 1401 	inc	dptr
      00063D F0               [24] 1402 	movx	@dptr,a
      00063E ED               [12] 1403 	mov	a,r5
      00063F A3               [24] 1404 	inc	dptr
      000640 F0               [24] 1405 	movx	@dptr,a
      000641 EB               [12] 1406 	mov	a,r3
      000642 A3               [24] 1407 	inc	dptr
      000643 F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	printf_large.c:734: if (!signed_argument)
      000644 90r00r1E         [24] 1410 	mov	dptr,#__print_format_signed_argument_65536_78
      000647 E0               [24] 1411 	movx	a,@dptr
      000648 60 03            [24] 1412 	jz	00645$
      00064A 02r06rE4         [24] 1413 	ljmp	00185$
      00064D                       1414 00645$:
                                   1415 ;	printf_large.c:736: value.l &= 0xFF;
      00064D 90r00r06         [24] 1416 	mov	dptr,#_value
      000650 E0               [24] 1417 	movx	a,@dptr
      000651 FB               [12] 1418 	mov	r3,a
      000652 A3               [24] 1419 	inc	dptr
      000653 E0               [24] 1420 	movx	a,@dptr
      000654 A3               [24] 1421 	inc	dptr
      000655 E0               [24] 1422 	movx	a,@dptr
      000656 A3               [24] 1423 	inc	dptr
      000657 E0               [24] 1424 	movx	a,@dptr
      000658 7D 00            [12] 1425 	mov	r5,#0x00
      00065A 7E 00            [12] 1426 	mov	r6,#0x00
      00065C 7F 00            [12] 1427 	mov	r7,#0x00
      00065E 90r00r06         [24] 1428 	mov	dptr,#_value
      000661 EB               [12] 1429 	mov	a,r3
      000662 F0               [24] 1430 	movx	@dptr,a
      000663 ED               [12] 1431 	mov	a,r5
      000664 A3               [24] 1432 	inc	dptr
      000665 F0               [24] 1433 	movx	@dptr,a
      000666 EE               [12] 1434 	mov	a,r6
      000667 A3               [24] 1435 	inc	dptr
      000668 F0               [24] 1436 	movx	@dptr,a
      000669 EF               [12] 1437 	mov	a,r7
      00066A A3               [24] 1438 	inc	dptr
      00066B F0               [24] 1439 	movx	@dptr,a
      00066C 80 76            [24] 1440 	sjmp	00185$
      00066E                       1441 00184$:
                                   1442 ;	printf_large.c:739: else if (long_argument)
      00066E 90r00r20         [24] 1443 	mov	dptr,#__print_format_long_argument_65536_78
      000671 E0               [24] 1444 	movx	a,@dptr
      000672 60 28            [24] 1445 	jz	00181$
                                   1446 ;	printf_large.c:741: value.l = va_arg(ap, long);
      000674 90r00r17         [24] 1447 	mov	dptr,#__print_format_PARM_4
      000677 E0               [24] 1448 	movx	a,@dptr
      000678 24 FC            [12] 1449 	add	a,#0xfc
      00067A FF               [12] 1450 	mov	r7,a
      00067B F0               [24] 1451 	movx	@dptr,a
      00067C 8F 01            [24] 1452 	mov	ar1,r7
      00067E 87 03            [24] 1453 	mov	ar3,@r1
      000680 09               [12] 1454 	inc	r1
      000681 87 05            [24] 1455 	mov	ar5,@r1
      000683 09               [12] 1456 	inc	r1
      000684 87 06            [24] 1457 	mov	ar6,@r1
      000686 09               [12] 1458 	inc	r1
      000687 87 07            [24] 1459 	mov	ar7,@r1
      000689 19               [12] 1460 	dec	r1
      00068A 19               [12] 1461 	dec	r1
      00068B 19               [12] 1462 	dec	r1
      00068C 90r00r06         [24] 1463 	mov	dptr,#_value
      00068F EB               [12] 1464 	mov	a,r3
      000690 F0               [24] 1465 	movx	@dptr,a
      000691 ED               [12] 1466 	mov	a,r5
      000692 A3               [24] 1467 	inc	dptr
      000693 F0               [24] 1468 	movx	@dptr,a
      000694 EE               [12] 1469 	mov	a,r6
      000695 A3               [24] 1470 	inc	dptr
      000696 F0               [24] 1471 	movx	@dptr,a
      000697 EF               [12] 1472 	mov	a,r7
      000698 A3               [24] 1473 	inc	dptr
      000699 F0               [24] 1474 	movx	@dptr,a
      00069A 80 48            [24] 1475 	sjmp	00185$
      00069C                       1476 00181$:
                                   1477 ;	printf_large.c:745: value.l = va_arg(ap, int);
      00069C 90r00r17         [24] 1478 	mov	dptr,#__print_format_PARM_4
      00069F E0               [24] 1479 	movx	a,@dptr
      0006A0 24 FE            [12] 1480 	add	a,#0xfe
      0006A2 FF               [12] 1481 	mov	r7,a
      0006A3 F0               [24] 1482 	movx	@dptr,a
      0006A4 8F 01            [24] 1483 	mov	ar1,r7
      0006A6 87 06            [24] 1484 	mov	ar6,@r1
      0006A8 09               [12] 1485 	inc	r1
      0006A9 87 07            [24] 1486 	mov	ar7,@r1
      0006AB 19               [12] 1487 	dec	r1
      0006AC EF               [12] 1488 	mov	a,r7
      0006AD 33               [12] 1489 	rlc	a
      0006AE 95 E0            [12] 1490 	subb	a,acc
      0006B0 FD               [12] 1491 	mov	r5,a
      0006B1 FB               [12] 1492 	mov	r3,a
      0006B2 90r00r06         [24] 1493 	mov	dptr,#_value
      0006B5 EE               [12] 1494 	mov	a,r6
      0006B6 F0               [24] 1495 	movx	@dptr,a
      0006B7 EF               [12] 1496 	mov	a,r7
      0006B8 A3               [24] 1497 	inc	dptr
      0006B9 F0               [24] 1498 	movx	@dptr,a
      0006BA ED               [12] 1499 	mov	a,r5
      0006BB A3               [24] 1500 	inc	dptr
      0006BC F0               [24] 1501 	movx	@dptr,a
      0006BD EB               [12] 1502 	mov	a,r3
      0006BE A3               [24] 1503 	inc	dptr
      0006BF F0               [24] 1504 	movx	@dptr,a
                                   1505 ;	printf_large.c:746: if (!signed_argument)
      0006C0 90r00r1E         [24] 1506 	mov	dptr,#__print_format_signed_argument_65536_78
      0006C3 E0               [24] 1507 	movx	a,@dptr
      0006C4 70 1E            [24] 1508 	jnz	00185$
                                   1509 ;	printf_large.c:748: value.l &= 0xFFFF;
      0006C6 90r00r06         [24] 1510 	mov	dptr,#_value
      0006C9 E0               [24] 1511 	movx	a,@dptr
      0006CA FB               [12] 1512 	mov	r3,a
      0006CB A3               [24] 1513 	inc	dptr
      0006CC E0               [24] 1514 	movx	a,@dptr
      0006CD FD               [12] 1515 	mov	r5,a
      0006CE A3               [24] 1516 	inc	dptr
      0006CF E0               [24] 1517 	movx	a,@dptr
      0006D0 A3               [24] 1518 	inc	dptr
      0006D1 E0               [24] 1519 	movx	a,@dptr
      0006D2 7E 00            [12] 1520 	mov	r6,#0x00
      0006D4 7F 00            [12] 1521 	mov	r7,#0x00
      0006D6 90r00r06         [24] 1522 	mov	dptr,#_value
      0006D9 EB               [12] 1523 	mov	a,r3
      0006DA F0               [24] 1524 	movx	@dptr,a
      0006DB ED               [12] 1525 	mov	a,r5
      0006DC A3               [24] 1526 	inc	dptr
      0006DD F0               [24] 1527 	movx	@dptr,a
      0006DE EE               [12] 1528 	mov	a,r6
      0006DF A3               [24] 1529 	inc	dptr
      0006E0 F0               [24] 1530 	movx	@dptr,a
      0006E1 EF               [12] 1531 	mov	a,r7
      0006E2 A3               [24] 1532 	inc	dptr
      0006E3 F0               [24] 1533 	movx	@dptr,a
      0006E4                       1534 00185$:
                                   1535 ;	printf_large.c:752: if ( signed_argument )
      0006E4 90r00r1E         [24] 1536 	mov	dptr,#__print_format_signed_argument_65536_78
      0006E7 E0               [24] 1537 	movx	a,@dptr
      0006E8 60 41            [24] 1538 	jz	00190$
                                   1539 ;	printf_large.c:754: if (value.l < 0)
      0006EA 90r00r06         [24] 1540 	mov	dptr,#_value
      0006ED E0               [24] 1541 	movx	a,@dptr
      0006EE FB               [12] 1542 	mov	r3,a
      0006EF A3               [24] 1543 	inc	dptr
      0006F0 E0               [24] 1544 	movx	a,@dptr
      0006F1 FD               [12] 1545 	mov	r5,a
      0006F2 A3               [24] 1546 	inc	dptr
      0006F3 E0               [24] 1547 	movx	a,@dptr
      0006F4 FE               [12] 1548 	mov	r6,a
      0006F5 A3               [24] 1549 	inc	dptr
      0006F6 E0               [24] 1550 	movx	a,@dptr
      0006F7 FF               [12] 1551 	mov	r7,a
      0006F8 30 E7 2B         [24] 1552 	jnb	acc.7,00187$
                                   1553 ;	printf_large.c:755: value.l = -value.l;
      0006FB 90r00r06         [24] 1554 	mov	dptr,#_value
      0006FE E0               [24] 1555 	movx	a,@dptr
      0006FF FB               [12] 1556 	mov	r3,a
      000700 A3               [24] 1557 	inc	dptr
      000701 E0               [24] 1558 	movx	a,@dptr
      000702 FD               [12] 1559 	mov	r5,a
      000703 A3               [24] 1560 	inc	dptr
      000704 E0               [24] 1561 	movx	a,@dptr
      000705 FE               [12] 1562 	mov	r6,a
      000706 A3               [24] 1563 	inc	dptr
      000707 E0               [24] 1564 	movx	a,@dptr
      000708 FF               [12] 1565 	mov	r7,a
      000709 C3               [12] 1566 	clr	c
      00070A E4               [12] 1567 	clr	a
      00070B 9B               [12] 1568 	subb	a,r3
      00070C FB               [12] 1569 	mov	r3,a
      00070D E4               [12] 1570 	clr	a
      00070E 9D               [12] 1571 	subb	a,r5
      00070F FD               [12] 1572 	mov	r5,a
      000710 E4               [12] 1573 	clr	a
      000711 9E               [12] 1574 	subb	a,r6
      000712 FE               [12] 1575 	mov	r6,a
      000713 E4               [12] 1576 	clr	a
      000714 9F               [12] 1577 	subb	a,r7
      000715 FF               [12] 1578 	mov	r7,a
      000716 90r00r06         [24] 1579 	mov	dptr,#_value
      000719 EB               [12] 1580 	mov	a,r3
      00071A F0               [24] 1581 	movx	@dptr,a
      00071B ED               [12] 1582 	mov	a,r5
      00071C A3               [24] 1583 	inc	dptr
      00071D F0               [24] 1584 	movx	@dptr,a
      00071E EE               [12] 1585 	mov	a,r6
      00071F A3               [24] 1586 	inc	dptr
      000720 F0               [24] 1587 	movx	@dptr,a
      000721 EF               [12] 1588 	mov	a,r7
      000722 A3               [24] 1589 	inc	dptr
      000723 F0               [24] 1590 	movx	@dptr,a
      000724 80 05            [24] 1591 	sjmp	00190$
      000726                       1592 00187$:
                                   1593 ;	printf_large.c:757: signed_argument = 0;
      000726 90r00r1E         [24] 1594 	mov	dptr,#__print_format_signed_argument_65536_78
      000729 E4               [12] 1595 	clr	a
      00072A F0               [24] 1596 	movx	@dptr,a
      00072B                       1597 00190$:
                                   1598 ;	printf_large.c:761: lsd = 1;
      00072B 90r00r22         [24] 1599 	mov	dptr,#__print_format_lsd_65536_78
      00072E 74 01            [12] 1600 	mov	a,#0x01
      000730 F0               [24] 1601 	movx	@dptr,a
                                   1602 ;	printf_large.c:763: do {
      000731 90r00r23         [24] 1603 	mov	dptr,#__print_format_radix_65536_78
      000734 E0               [24] 1604 	movx	a,@dptr
      000735 F5*03            [12] 1605 	mov	__print_format_sloc2_1_0,a
      000737 75*08r30         [24] 1606 	mov	__print_format_sloc4_1_0,#(__print_format_store_262144_99 + 0x0005)
      00073A 75*09s00         [24] 1607 	mov	(__print_format_sloc4_1_0 + 1),#((__print_format_store_262144_99 + 0x0005) >> 8)
      00073D E4               [12] 1608 	clr	a
      00073E F5*00            [12] 1609 	mov	__print_format_sloc0_1_0,a
      000740 F5*01            [12] 1610 	mov	(__print_format_sloc0_1_0 + 1),a
      000742                       1611 00194$:
                                   1612 ;	printf_large.c:764: value.byte[4] = 0;
      000742 90r00r0A         [24] 1613 	mov	dptr,#(_value + 0x0004)
      000745 E4               [12] 1614 	clr	a
      000746 F0               [24] 1615 	movx	@dptr,a
                                   1616 ;	printf_large.c:768: calculate_digit(radix);
      000747 85*03 82         [24] 1617 	mov	dpl,__print_format_sloc2_1_0
      00074A 12r00r77         [24] 1618 	lcall	_calculate_digit
                                   1619 ;	printf_large.c:770: if (!lsd)
      00074D 90r00r22         [24] 1620 	mov	dptr,#__print_format_lsd_65536_78
      000750 E0               [24] 1621 	movx	a,@dptr
      000751 70 33            [24] 1622 	jnz	00192$
                                   1623 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000753 90r00r0A         [24] 1624 	mov	dptr,#(_value + 0x0004)
      000756 E0               [24] 1625 	movx	a,@dptr
      000757 C4               [12] 1626 	swap	a
      000758 54 F0            [12] 1627 	anl	a,#0xf0
      00075A F5*05            [12] 1628 	mov	__print_format_sloc3_1_0,a
      00075C 90r00r0A         [24] 1629 	mov	dptr,#(_value + 0x0004)
      00075F E0               [24] 1630 	movx	a,@dptr
      000760 C4               [12] 1631 	swap	a
      000761 54 0F            [12] 1632 	anl	a,#0x0f
      000763 45*05            [12] 1633 	orl	a,__print_format_sloc3_1_0
      000765 F5*05            [12] 1634 	mov	__print_format_sloc3_1_0,a
      000767 85*08 82         [24] 1635 	mov	dpl,__print_format_sloc4_1_0
      00076A 85*09 83         [24] 1636 	mov	dph,(__print_format_sloc4_1_0 + 1)
      00076D E0               [24] 1637 	movx	a,@dptr
      00076E FF               [12] 1638 	mov	r7,a
      00076F E5*05            [12] 1639 	mov	a,__print_format_sloc3_1_0
      000771 42 07            [12] 1640 	orl	ar7,a
      000773 85*08 82         [24] 1641 	mov	dpl,__print_format_sloc4_1_0
      000776 85*09 83         [24] 1642 	mov	dph,(__print_format_sloc4_1_0 + 1)
      000779 EF               [12] 1643 	mov	a,r7
      00077A F0               [24] 1644 	movx	@dptr,a
                                   1645 ;	printf_large.c:773: pstore--;
      00077B 15*08            [12] 1646 	dec	__print_format_sloc4_1_0
      00077D 74 FF            [12] 1647 	mov	a,#0xff
      00077F B5*08 02         [24] 1648 	cjne	a,__print_format_sloc4_1_0,00651$
      000782 15*09            [12] 1649 	dec	(__print_format_sloc4_1_0 + 1)
      000784                       1650 00651$:
      000784 80 0C            [24] 1651 	sjmp	00193$
      000786                       1652 00192$:
                                   1653 ;	printf_large.c:777: *pstore = value.byte[4];
      000786 90r00r0A         [24] 1654 	mov	dptr,#(_value + 0x0004)
      000789 E0               [24] 1655 	movx	a,@dptr
      00078A FF               [12] 1656 	mov	r7,a
      00078B 85*08 82         [24] 1657 	mov	dpl,__print_format_sloc4_1_0
      00078E 85*09 83         [24] 1658 	mov	dph,(__print_format_sloc4_1_0 + 1)
      000791 F0               [24] 1659 	movx	@dptr,a
      000792                       1660 00193$:
                                   1661 ;	printf_large.c:779: length++;
      000792 05*00            [12] 1662 	inc	__print_format_sloc0_1_0
      000794 E4               [12] 1663 	clr	a
      000795 B5*00 02         [24] 1664 	cjne	a,__print_format_sloc0_1_0,00652$
      000798 05*01            [12] 1665 	inc	(__print_format_sloc0_1_0 + 1)
      00079A                       1666 00652$:
                                   1667 ;	printf_large.c:780: lsd = !lsd;
      00079A 90r00r22         [24] 1668 	mov	dptr,#__print_format_lsd_65536_78
      00079D E0               [24] 1669 	movx	a,@dptr
      00079E B4 01 00         [24] 1670 	cjne	a,#0x01,00653$
      0007A1                       1671 00653$:
      0007A1 E4               [12] 1672 	clr	a
      0007A2 33               [12] 1673 	rlc	a
      0007A3 F0               [24] 1674 	movx	@dptr,a
                                   1675 ;	printf_large.c:781: } while( value.ul );
      0007A4 90r00r06         [24] 1676 	mov	dptr,#_value
      0007A7 E0               [24] 1677 	movx	a,@dptr
      0007A8 FA               [12] 1678 	mov	r2,a
      0007A9 A3               [24] 1679 	inc	dptr
      0007AA E0               [24] 1680 	movx	a,@dptr
      0007AB FB               [12] 1681 	mov	r3,a
      0007AC A3               [24] 1682 	inc	dptr
      0007AD E0               [24] 1683 	movx	a,@dptr
      0007AE FE               [12] 1684 	mov	r6,a
      0007AF A3               [24] 1685 	inc	dptr
      0007B0 E0               [24] 1686 	movx	a,@dptr
      0007B1 FF               [12] 1687 	mov	r7,a
      0007B2 EA               [12] 1688 	mov	a,r2
      0007B3 4B               [12] 1689 	orl	a,r3
      0007B4 4E               [12] 1690 	orl	a,r6
      0007B5 4F               [12] 1691 	orl	a,r7
      0007B6 70 8A            [24] 1692 	jnz	00194$
                                   1693 ;	printf_large.c:783: if (width == 0)
      0007B8 90r00r31         [24] 1694 	mov	dptr,#__print_format_pstore_262144_99
      0007BB E5*08            [12] 1695 	mov	a,__print_format_sloc4_1_0
      0007BD F0               [24] 1696 	movx	@dptr,a
      0007BE E5*09            [12] 1697 	mov	a,(__print_format_sloc4_1_0 + 1)
      0007C0 A3               [24] 1698 	inc	dptr
      0007C1 F0               [24] 1699 	movx	@dptr,a
      0007C2 90r00r28         [24] 1700 	mov	dptr,#__print_format_length_65536_78
      0007C5 E5*00            [12] 1701 	mov	a,__print_format_sloc0_1_0
      0007C7 F0               [24] 1702 	movx	@dptr,a
      0007C8 E5*01            [12] 1703 	mov	a,(__print_format_sloc0_1_0 + 1)
      0007CA A3               [24] 1704 	inc	dptr
      0007CB F0               [24] 1705 	movx	@dptr,a
      0007CC 90r00r24         [24] 1706 	mov	dptr,#__print_format_width_65536_78
      0007CF E0               [24] 1707 	movx	a,@dptr
      0007D0 F5 F0            [12] 1708 	mov	b,a
      0007D2 A3               [24] 1709 	inc	dptr
      0007D3 E0               [24] 1710 	movx	a,@dptr
      0007D4 45 F0            [12] 1711 	orl	a,b
      0007D6 70 09            [24] 1712 	jnz	00198$
                                   1713 ;	printf_large.c:788: width = 1;
      0007D8 90r00r24         [24] 1714 	mov	dptr,#__print_format_width_65536_78
      0007DB 74 01            [12] 1715 	mov	a,#0x01
      0007DD F0               [24] 1716 	movx	@dptr,a
      0007DE E4               [12] 1717 	clr	a
      0007DF A3               [24] 1718 	inc	dptr
      0007E0 F0               [24] 1719 	movx	@dptr,a
      0007E1                       1720 00198$:
                                   1721 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      0007E1 90r00r1B         [24] 1722 	mov	dptr,#__print_format_zero_padding_65536_78
      0007E4 E0               [24] 1723 	movx	a,@dptr
      0007E5 FF               [12] 1724 	mov	r7,a
      0007E6 E0               [24] 1725 	movx	a,@dptr
      0007E7 70 47            [24] 1726 	jnz	00203$
      0007E9 90r00r1A         [24] 1727 	mov	dptr,#__print_format_left_justify_65536_78
      0007EC E0               [24] 1728 	movx	a,@dptr
      0007ED 70 41            [24] 1729 	jnz	00203$
                                   1730 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      0007EF 85*00*08         [24] 1731 	mov	__print_format_sloc4_1_0,__print_format_sloc0_1_0
      0007F2 85*01*09         [24] 1732 	mov	(__print_format_sloc4_1_0 + 1),(__print_format_sloc0_1_0 + 1)
      0007F5 90r00r24         [24] 1733 	mov	dptr,#__print_format_width_65536_78
      0007F8 E0               [24] 1734 	movx	a,@dptr
      0007F9 FA               [12] 1735 	mov	r2,a
      0007FA A3               [24] 1736 	inc	dptr
      0007FB E0               [24] 1737 	movx	a,@dptr
      0007FC FB               [12] 1738 	mov	r3,a
      0007FD                       1739 00199$:
      0007FD C0 07            [24] 1740 	push	ar7
      0007FF AF*08            [24] 1741 	mov	r7,__print_format_sloc4_1_0
      000801 0F               [12] 1742 	inc	r7
      000802 8F 06            [24] 1743 	mov	ar6,r7
      000804 7F 00            [12] 1744 	mov	r7,#0x00
      000806 C3               [12] 1745 	clr	c
      000807 EE               [12] 1746 	mov	a,r6
      000808 9A               [12] 1747 	subb	a,r2
      000809 EF               [12] 1748 	mov	a,r7
      00080A 9B               [12] 1749 	subb	a,r3
      00080B D0 07            [24] 1750 	pop	ar7
      00080D 50 19            [24] 1751 	jnc	00333$
                                   1752 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      00080F 75 82 20         [24] 1753 	mov	dpl,#0x20
      000812 C0 07            [24] 1754 	push	ar7
      000814 C0 03            [24] 1755 	push	ar3
      000816 C0 02            [24] 1756 	push	ar2
      000818 12r00r00         [24] 1757 	lcall	__output_char
      00081B D0 02            [24] 1758 	pop	ar2
      00081D D0 03            [24] 1759 	pop	ar3
      00081F D0 07            [24] 1760 	pop	ar7
                                   1761 ;	printf_large.c:797: width--;
      000821 1A               [12] 1762 	dec	r2
      000822 BA FF 01         [24] 1763 	cjne	r2,#0xff,00659$
      000825 1B               [12] 1764 	dec	r3
      000826                       1765 00659$:
      000826 80 D5            [24] 1766 	sjmp	00199$
      000828                       1767 00333$:
      000828 90r00r24         [24] 1768 	mov	dptr,#__print_format_width_65536_78
      00082B EA               [12] 1769 	mov	a,r2
      00082C F0               [24] 1770 	movx	@dptr,a
      00082D EB               [12] 1771 	mov	a,r3
      00082E A3               [24] 1772 	inc	dptr
      00082F F0               [24] 1773 	movx	@dptr,a
      000830                       1774 00203$:
                                   1775 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      000830 90r00r1E         [24] 1776 	mov	dptr,#__print_format_signed_argument_65536_78
      000833 E0               [24] 1777 	movx	a,@dptr
      000834 60 20            [24] 1778 	jz	00213$
                                   1779 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      000836 75 82 2D         [24] 1780 	mov	dpl,#0x2d
      000839 C0 07            [24] 1781 	push	ar7
      00083B 12r00r00         [24] 1782 	lcall	__output_char
      00083E D0 07            [24] 1783 	pop	ar7
                                   1784 ;	printf_large.c:805: width--;
      000840 90r00r24         [24] 1785 	mov	dptr,#__print_format_width_65536_78
      000843 E0               [24] 1786 	movx	a,@dptr
      000844 24 FF            [12] 1787 	add	a,#0xff
      000846 FD               [12] 1788 	mov	r5,a
      000847 A3               [24] 1789 	inc	dptr
      000848 E0               [24] 1790 	movx	a,@dptr
      000849 34 FF            [12] 1791 	addc	a,#0xff
      00084B FE               [12] 1792 	mov	r6,a
      00084C 90r00r24         [24] 1793 	mov	dptr,#__print_format_width_65536_78
      00084F ED               [12] 1794 	mov	a,r5
      000850 F0               [24] 1795 	movx	@dptr,a
      000851 EE               [12] 1796 	mov	a,r6
      000852 A3               [24] 1797 	inc	dptr
      000853 F0               [24] 1798 	movx	@dptr,a
      000854 80 56            [24] 1799 	sjmp	00214$
      000856                       1800 00213$:
                                   1801 ;	printf_large.c:807: else if (length != 0)
      000856 90r00r28         [24] 1802 	mov	dptr,#__print_format_length_65536_78
      000859 E0               [24] 1803 	movx	a,@dptr
      00085A F5 F0            [12] 1804 	mov	b,a
      00085C A3               [24] 1805 	inc	dptr
      00085D E0               [24] 1806 	movx	a,@dptr
      00085E 45 F0            [12] 1807 	orl	a,b
      000860 60 4A            [24] 1808 	jz	00214$
                                   1809 ;	printf_large.c:810: if (prefix_sign)
      000862 90r00r1C         [24] 1810 	mov	dptr,#__print_format_prefix_sign_65536_78
      000865 E0               [24] 1811 	movx	a,@dptr
      000866 60 20            [24] 1812 	jz	00208$
                                   1813 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      000868 75 82 2B         [24] 1814 	mov	dpl,#0x2b
      00086B C0 07            [24] 1815 	push	ar7
      00086D 12r00r00         [24] 1816 	lcall	__output_char
      000870 D0 07            [24] 1817 	pop	ar7
                                   1818 ;	printf_large.c:814: width--;
      000872 90r00r24         [24] 1819 	mov	dptr,#__print_format_width_65536_78
      000875 E0               [24] 1820 	movx	a,@dptr
      000876 24 FF            [12] 1821 	add	a,#0xff
      000878 FD               [12] 1822 	mov	r5,a
      000879 A3               [24] 1823 	inc	dptr
      00087A E0               [24] 1824 	movx	a,@dptr
      00087B 34 FF            [12] 1825 	addc	a,#0xff
      00087D FE               [12] 1826 	mov	r6,a
      00087E 90r00r24         [24] 1827 	mov	dptr,#__print_format_width_65536_78
      000881 ED               [12] 1828 	mov	a,r5
      000882 F0               [24] 1829 	movx	@dptr,a
      000883 EE               [12] 1830 	mov	a,r6
      000884 A3               [24] 1831 	inc	dptr
      000885 F0               [24] 1832 	movx	@dptr,a
      000886 80 24            [24] 1833 	sjmp	00214$
      000888                       1834 00208$:
                                   1835 ;	printf_large.c:816: else if (prefix_space)
      000888 90r00r1D         [24] 1836 	mov	dptr,#__print_format_prefix_space_65536_78
      00088B E0               [24] 1837 	movx	a,@dptr
      00088C 60 1E            [24] 1838 	jz	00214$
                                   1839 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      00088E 75 82 20         [24] 1840 	mov	dpl,#0x20
      000891 C0 07            [24] 1841 	push	ar7
      000893 12r00r00         [24] 1842 	lcall	__output_char
      000896 D0 07            [24] 1843 	pop	ar7
                                   1844 ;	printf_large.c:820: width--;
      000898 90r00r24         [24] 1845 	mov	dptr,#__print_format_width_65536_78
      00089B E0               [24] 1846 	movx	a,@dptr
      00089C 24 FF            [12] 1847 	add	a,#0xff
      00089E FD               [12] 1848 	mov	r5,a
      00089F A3               [24] 1849 	inc	dptr
      0008A0 E0               [24] 1850 	movx	a,@dptr
      0008A1 34 FF            [12] 1851 	addc	a,#0xff
      0008A3 FE               [12] 1852 	mov	r6,a
      0008A4 90r00r24         [24] 1853 	mov	dptr,#__print_format_width_65536_78
      0008A7 ED               [12] 1854 	mov	a,r5
      0008A8 F0               [24] 1855 	movx	@dptr,a
      0008A9 EE               [12] 1856 	mov	a,r6
      0008AA A3               [24] 1857 	inc	dptr
      0008AB F0               [24] 1858 	movx	@dptr,a
      0008AC                       1859 00214$:
                                   1860 ;	printf_large.c:825: if (!left_justify)
      0008AC 90r00r1A         [24] 1861 	mov	dptr,#__print_format_left_justify_65536_78
      0008AF E0               [24] 1862 	movx	a,@dptr
      0008B0 70 48            [24] 1863 	jnz	00222$
                                   1864 ;	printf_large.c:827: while ( width-- > length )
      0008B2 90r00r28         [24] 1865 	mov	dptr,#__print_format_length_65536_78
      0008B5 E0               [24] 1866 	movx	a,@dptr
      0008B6 F5*08            [12] 1867 	mov	__print_format_sloc4_1_0,a
      0008B8 A3               [24] 1868 	inc	dptr
      0008B9 E0               [24] 1869 	movx	a,@dptr
      0008BA F5*09            [12] 1870 	mov	(__print_format_sloc4_1_0 + 1),a
      0008BC 90r00r24         [24] 1871 	mov	dptr,#__print_format_width_65536_78
      0008BF E0               [24] 1872 	movx	a,@dptr
      0008C0 FA               [12] 1873 	mov	r2,a
      0008C1 A3               [24] 1874 	inc	dptr
      0008C2 E0               [24] 1875 	movx	a,@dptr
      0008C3 FB               [12] 1876 	mov	r3,a
      0008C4                       1877 00215$:
      0008C4 C0 07            [24] 1878 	push	ar7
      0008C6 8A 06            [24] 1879 	mov	ar6,r2
      0008C8 8B 07            [24] 1880 	mov	ar7,r3
      0008CA 1A               [12] 1881 	dec	r2
      0008CB BA FF 01         [24] 1882 	cjne	r2,#0xff,00665$
      0008CE 1B               [12] 1883 	dec	r3
      0008CF                       1884 00665$:
      0008CF C3               [12] 1885 	clr	c
      0008D0 E5*08            [12] 1886 	mov	a,__print_format_sloc4_1_0
      0008D2 9E               [12] 1887 	subb	a,r6
      0008D3 E5*09            [12] 1888 	mov	a,(__print_format_sloc4_1_0 + 1)
      0008D5 9F               [12] 1889 	subb	a,r7
      0008D6 D0 07            [24] 1890 	pop	ar7
      0008D8 50 53            [24] 1891 	jnc	00334$
                                   1892 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0008DA EF               [12] 1893 	mov	a,r7
      0008DB 60 06            [24] 1894 	jz	00248$
      0008DD 7D 30            [12] 1895 	mov	r5,#0x30
      0008DF 7E 00            [12] 1896 	mov	r6,#0x00
      0008E1 80 04            [24] 1897 	sjmp	00249$
      0008E3                       1898 00248$:
      0008E3 7D 20            [12] 1899 	mov	r5,#0x20
      0008E5 7E 00            [12] 1900 	mov	r6,#0x00
      0008E7                       1901 00249$:
      0008E7 8D 82            [24] 1902 	mov	dpl,r5
      0008E9 C0 07            [24] 1903 	push	ar7
      0008EB C0 03            [24] 1904 	push	ar3
      0008ED C0 02            [24] 1905 	push	ar2
      0008EF 12r00r00         [24] 1906 	lcall	__output_char
      0008F2 D0 02            [24] 1907 	pop	ar2
      0008F4 D0 03            [24] 1908 	pop	ar3
      0008F6 D0 07            [24] 1909 	pop	ar7
      0008F8 80 CA            [24] 1910 	sjmp	00215$
      0008FA                       1911 00222$:
                                   1912 ;	printf_large.c:835: if (width > length)
      0008FA 90r00r24         [24] 1913 	mov	dptr,#__print_format_width_65536_78
      0008FD E0               [24] 1914 	movx	a,@dptr
      0008FE FE               [12] 1915 	mov	r6,a
      0008FF A3               [24] 1916 	inc	dptr
      000900 E0               [24] 1917 	movx	a,@dptr
      000901 FF               [12] 1918 	mov	r7,a
      000902 90r00r28         [24] 1919 	mov	dptr,#__print_format_length_65536_78
      000905 E0               [24] 1920 	movx	a,@dptr
      000906 F5*08            [12] 1921 	mov	__print_format_sloc4_1_0,a
      000908 A3               [24] 1922 	inc	dptr
      000909 E0               [24] 1923 	movx	a,@dptr
      00090A F5*09            [12] 1924 	mov	(__print_format_sloc4_1_0 + 1),a
      00090C C3               [12] 1925 	clr	c
      00090D E5*08            [12] 1926 	mov	a,__print_format_sloc4_1_0
      00090F 9E               [12] 1927 	subb	a,r6
      000910 E5*09            [12] 1928 	mov	a,(__print_format_sloc4_1_0 + 1)
      000912 9F               [12] 1929 	subb	a,r7
      000913 50 0F            [24] 1930 	jnc	00219$
                                   1931 ;	printf_large.c:836: width -= length;
      000915 90r00r24         [24] 1932 	mov	dptr,#__print_format_width_65536_78
      000918 EE               [12] 1933 	mov	a,r6
      000919 C3               [12] 1934 	clr	c
      00091A 95*08            [12] 1935 	subb	a,__print_format_sloc4_1_0
      00091C F0               [24] 1936 	movx	@dptr,a
      00091D EF               [12] 1937 	mov	a,r7
      00091E 95*09            [12] 1938 	subb	a,(__print_format_sloc4_1_0 + 1)
      000920 A3               [24] 1939 	inc	dptr
      000921 F0               [24] 1940 	movx	@dptr,a
      000922 80 11            [24] 1941 	sjmp	00326$
      000924                       1942 00219$:
                                   1943 ;	printf_large.c:838: width = 0;
      000924 90r00r24         [24] 1944 	mov	dptr,#__print_format_width_65536_78
      000927 E4               [12] 1945 	clr	a
      000928 F0               [24] 1946 	movx	@dptr,a
      000929 A3               [24] 1947 	inc	dptr
      00092A F0               [24] 1948 	movx	@dptr,a
                                   1949 ;	printf_large.c:877: return charsOutputted;
                                   1950 ;	printf_large.c:842: while( length-- )
      00092B 80 08            [24] 1951 	sjmp	00326$
      00092D                       1952 00334$:
      00092D 90r00r24         [24] 1953 	mov	dptr,#__print_format_width_65536_78
      000930 EA               [12] 1954 	mov	a,r2
      000931 F0               [24] 1955 	movx	@dptr,a
      000932 EB               [12] 1956 	mov	a,r3
      000933 A3               [24] 1957 	inc	dptr
      000934 F0               [24] 1958 	movx	@dptr,a
      000935                       1959 00326$:
      000935 90r00r31         [24] 1960 	mov	dptr,#__print_format_pstore_262144_99
      000938 E0               [24] 1961 	movx	a,@dptr
      000939 FE               [12] 1962 	mov	r6,a
      00093A A3               [24] 1963 	inc	dptr
      00093B E0               [24] 1964 	movx	a,@dptr
      00093C FF               [12] 1965 	mov	r7,a
      00093D 90r00r28         [24] 1966 	mov	dptr,#__print_format_length_65536_78
      000940 E0               [24] 1967 	movx	a,@dptr
      000941 F5*08            [12] 1968 	mov	__print_format_sloc4_1_0,a
      000943 A3               [24] 1969 	inc	dptr
      000944 E0               [24] 1970 	movx	a,@dptr
      000945 F5*09            [12] 1971 	mov	(__print_format_sloc4_1_0 + 1),a
      000947                       1972 00227$:
      000947 AA*08            [24] 1973 	mov	r2,__print_format_sloc4_1_0
      000949 AD*09            [24] 1974 	mov	r5,(__print_format_sloc4_1_0 + 1)
      00094B 15*08            [12] 1975 	dec	__print_format_sloc4_1_0
      00094D 74 FF            [12] 1976 	mov	a,#0xff
      00094F B5*08 02         [24] 1977 	cjne	a,__print_format_sloc4_1_0,00669$
      000952 15*09            [12] 1978 	dec	(__print_format_sloc4_1_0 + 1)
      000954                       1979 00669$:
      000954 EA               [12] 1980 	mov	a,r2
      000955 4D               [12] 1981 	orl	a,r5
      000956 60 45            [24] 1982 	jz	00229$
                                   1983 ;	printf_large.c:844: lsd = !lsd;
      000958 90r00r22         [24] 1984 	mov	dptr,#__print_format_lsd_65536_78
      00095B E0               [24] 1985 	movx	a,@dptr
      00095C B4 01 00         [24] 1986 	cjne	a,#0x01,00671$
      00095F                       1987 00671$:
      00095F E4               [12] 1988 	clr	a
      000960 33               [12] 1989 	rlc	a
      000961 F0               [24] 1990 	movx	@dptr,a
                                   1991 ;	printf_large.c:845: if (!lsd)
      000962 90r00r22         [24] 1992 	mov	dptr,#__print_format_lsd_65536_78
      000965 E0               [24] 1993 	movx	a,@dptr
      000966 70 14            [24] 1994 	jnz	00225$
                                   1995 ;	printf_large.c:847: pstore++;
      000968 0E               [12] 1996 	inc	r6
      000969 BE 00 01         [24] 1997 	cjne	r6,#0x00,00673$
      00096C 0F               [12] 1998 	inc	r7
      00096D                       1999 00673$:
                                   2000 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      00096D 8E 82            [24] 2001 	mov	dpl,r6
      00096F 8F 83            [24] 2002 	mov	dph,r7
      000971 E0               [24] 2003 	movx	a,@dptr
      000972 C4               [12] 2004 	swap	a
      000973 54 0F            [12] 2005 	anl	a,#0x0f
      000975 FD               [12] 2006 	mov	r5,a
      000976 90r00r0A         [24] 2007 	mov	dptr,#(_value + 0x0004)
      000979 F0               [24] 2008 	movx	@dptr,a
      00097A 80 0E            [24] 2009 	sjmp	00226$
      00097C                       2010 00225$:
                                   2011 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      00097C 8E 82            [24] 2012 	mov	dpl,r6
      00097E 8F 83            [24] 2013 	mov	dph,r7
      000980 E0               [24] 2014 	movx	a,@dptr
      000981 FD               [12] 2015 	mov	r5,a
      000982 53 05 0F         [24] 2016 	anl	ar5,#0x0f
      000985 90r00r0A         [24] 2017 	mov	dptr,#(_value + 0x0004)
      000988 ED               [12] 2018 	mov	a,r5
      000989 F0               [24] 2019 	movx	@dptr,a
      00098A                       2020 00226$:
                                   2021 ;	printf_large.c:858: output_digit( value.byte[4] );
      00098A 90r00r0A         [24] 2022 	mov	dptr,#(_value + 0x0004)
      00098D E0               [24] 2023 	movx	a,@dptr
      00098E F5 82            [12] 2024 	mov	dpl,a
      000990 C0 07            [24] 2025 	push	ar7
      000992 C0 06            [24] 2026 	push	ar6
      000994 12r00r3B         [24] 2027 	lcall	_output_digit
      000997 D0 06            [24] 2028 	pop	ar6
      000999 D0 07            [24] 2029 	pop	ar7
      00099B 80 AA            [24] 2030 	sjmp	00227$
      00099D                       2031 00229$:
                                   2032 ;	printf_large.c:861: if (left_justify)
      00099D 90r00r1A         [24] 2033 	mov	dptr,#__print_format_left_justify_65536_78
      0009A0 E0               [24] 2034 	movx	a,@dptr
      0009A1 70 03            [24] 2035 	jnz	00674$
      0009A3 02r01r0C         [24] 2036 	ljmp	00243$
      0009A6                       2037 00674$:
                                   2038 ;	printf_large.c:863: while (width-- > 0)
      0009A6 90r00r24         [24] 2039 	mov	dptr,#__print_format_width_65536_78
      0009A9 E0               [24] 2040 	movx	a,@dptr
      0009AA FE               [12] 2041 	mov	r6,a
      0009AB A3               [24] 2042 	inc	dptr
      0009AC E0               [24] 2043 	movx	a,@dptr
      0009AD FF               [12] 2044 	mov	r7,a
      0009AE                       2045 00230$:
      0009AE 8E 03            [24] 2046 	mov	ar3,r6
      0009B0 8F 05            [24] 2047 	mov	ar5,r7
      0009B2 1E               [12] 2048 	dec	r6
      0009B3 BE FF 01         [24] 2049 	cjne	r6,#0xff,00675$
      0009B6 1F               [12] 2050 	dec	r7
      0009B7                       2051 00675$:
      0009B7 EB               [12] 2052 	mov	a,r3
      0009B8 4D               [12] 2053 	orl	a,r5
      0009B9 70 03            [24] 2054 	jnz	00676$
      0009BB 02r01r0C         [24] 2055 	ljmp	00243$
      0009BE                       2056 00676$:
                                   2057 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      0009BE 75 82 20         [24] 2058 	mov	dpl,#0x20
      0009C1 C0 07            [24] 2059 	push	ar7
      0009C3 C0 06            [24] 2060 	push	ar6
      0009C5 12r00r00         [24] 2061 	lcall	__output_char
      0009C8 D0 06            [24] 2062 	pop	ar6
      0009CA D0 07            [24] 2063 	pop	ar7
      0009CC 80 E0            [24] 2064 	sjmp	00230$
      0009CE                       2065 00241$:
                                   2066 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      0009CE 8C 82            [24] 2067 	mov	dpl,r4
      0009D0 12r00r00         [24] 2068 	lcall	__output_char
      0009D3 02r01r0C         [24] 2069 	ljmp	00243$
      0009D6                       2070 00245$:
                                   2071 ;	printf_large.c:877: return charsOutputted;
      0009D6 90r00r0B         [24] 2072 	mov	dptr,#_charsOutputted
      0009D9 E0               [24] 2073 	movx	a,@dptr
      0009DA FE               [12] 2074 	mov	r6,a
      0009DB A3               [24] 2075 	inc	dptr
      0009DC E0               [24] 2076 	movx	a,@dptr
                                   2077 ;	printf_large.c:878: }
      0009DD 8E 82            [24] 2078 	mov	dpl,r6
      0009DF F5 83            [12] 2079 	mov	dph,a
      0009E1 22               [24] 2080 	ret
                                   2081 	.area CSEG    (CODE)
                                   2082 	.area CONST   (CODE)
                                   2083 	.area CONST   (CODE)
      000000                       2084 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  2085 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area XINIT   (CODE)
                                   2089 	.area CABS    (ABS,CODE)
