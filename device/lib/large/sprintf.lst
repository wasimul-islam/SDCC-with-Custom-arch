                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf_PARM_3
                                     13 	.globl _vsprintf_PARM_2
                                     14 	.globl _vsprintf
                                     15 	.globl _sprintf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
                                     35 ;--------------------------------------------------------
                                     36 ; overlayable items in internal ram
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; uninitialized external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XSEG    (XDATA)
      000000                         59 _vsprintf_PARM_2:
      000000                         60 	.ds 3
      000003                         61 _vsprintf_PARM_3:
      000003                         62 	.ds 1
      000004                         63 _vsprintf_buf_65536_16:
      000004                         64 	.ds 3
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XABS    (ABS,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; initialized external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XISEG   (XDATA)
                                     73 	.area HOME    (CODE)
                                     74 	.area GSINIT0 (CODE)
                                     75 	.area GSINIT1 (CODE)
                                     76 	.area GSINIT2 (CODE)
                                     77 	.area GSINIT3 (CODE)
                                     78 	.area GSINIT4 (CODE)
                                     79 	.area GSINIT5 (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area CSEG    (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'put_char_to_string'
                                    101 ;------------------------------------------------------------
                                    102 ;p                         Allocated to stack - _bp -5
                                    103 ;c                         Allocated to stack - _bp +1
                                    104 ;buf                       Allocated to stack - _bp +2
                                    105 ;------------------------------------------------------------
                                    106 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function put_char_to_string
                                    109 ;	-----------------------------------------
      000000                        110 _put_char_to_string:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
      000000 C0*00            [24]  119 	push	_bp
      000002 85 81*00         [24]  120 	mov	_bp,sp
      000005 C0 82            [24]  121 	push	dpl
      000007 05 81            [12]  122 	inc	sp
      000009 05 81            [12]  123 	inc	sp
      00000B 05 81            [12]  124 	inc	sp
                                    125 ;	sprintf.c:36: char **buf = (char **)p;
      00000D E5*00            [12]  126 	mov	a,_bp
      00000F 24 FB            [12]  127 	add	a,#0xfb
      000011 F8               [12]  128 	mov	r0,a
      000012 A9*00            [24]  129 	mov	r1,_bp
      000014 09               [12]  130 	inc	r1
      000015 09               [12]  131 	inc	r1
      000016 E6               [12]  132 	mov	a,@r0
      000017 F7               [12]  133 	mov	@r1,a
      000018 08               [12]  134 	inc	r0
      000019 E6               [12]  135 	mov	a,@r0
      00001A 09               [12]  136 	inc	r1
      00001B F7               [12]  137 	mov	@r1,a
      00001C 08               [12]  138 	inc	r0
      00001D E6               [12]  139 	mov	a,@r0
      00001E 09               [12]  140 	inc	r1
      00001F F7               [12]  141 	mov	@r1,a
                                    142 ;	sprintf.c:37: *(*buf)++ = c;
      000020 A8*00            [24]  143 	mov	r0,_bp
      000022 08               [12]  144 	inc	r0
      000023 08               [12]  145 	inc	r0
      000024 86 82            [24]  146 	mov	dpl,@r0
      000026 08               [12]  147 	inc	r0
      000027 86 83            [24]  148 	mov	dph,@r0
      000029 08               [12]  149 	inc	r0
      00002A 86 F0            [24]  150 	mov	b,@r0
      00002C 12r00r00         [24]  151 	lcall	__gptrget
      00002F FA               [12]  152 	mov	r2,a
      000030 A3               [24]  153 	inc	dptr
      000031 12r00r00         [24]  154 	lcall	__gptrget
      000034 FB               [12]  155 	mov	r3,a
      000035 A3               [24]  156 	inc	dptr
      000036 12r00r00         [24]  157 	lcall	__gptrget
      000039 FF               [12]  158 	mov	r7,a
      00003A 74 01            [12]  159 	mov	a,#0x01
      00003C 2A               [12]  160 	add	a,r2
      00003D FC               [12]  161 	mov	r4,a
      00003E E4               [12]  162 	clr	a
      00003F 3B               [12]  163 	addc	a,r3
      000040 FD               [12]  164 	mov	r5,a
      000041 8F 06            [24]  165 	mov	ar6,r7
      000043 A8*00            [24]  166 	mov	r0,_bp
      000045 08               [12]  167 	inc	r0
      000046 08               [12]  168 	inc	r0
      000047 86 82            [24]  169 	mov	dpl,@r0
      000049 08               [12]  170 	inc	r0
      00004A 86 83            [24]  171 	mov	dph,@r0
      00004C 08               [12]  172 	inc	r0
      00004D 86 F0            [24]  173 	mov	b,@r0
      00004F EC               [12]  174 	mov	a,r4
      000050 12r00r00         [24]  175 	lcall	__gptrput
      000053 A3               [24]  176 	inc	dptr
      000054 ED               [12]  177 	mov	a,r5
      000055 12r00r00         [24]  178 	lcall	__gptrput
      000058 A3               [24]  179 	inc	dptr
      000059 EE               [12]  180 	mov	a,r6
      00005A 12r00r00         [24]  181 	lcall	__gptrput
      00005D 8A 82            [24]  182 	mov	dpl,r2
      00005F 8B 83            [24]  183 	mov	dph,r3
      000061 8F F0            [24]  184 	mov	b,r7
      000063 A8*00            [24]  185 	mov	r0,_bp
      000065 08               [12]  186 	inc	r0
      000066 E6               [12]  187 	mov	a,@r0
      000067 12r00r00         [24]  188 	lcall	__gptrput
                                    189 ;	sprintf.c:38: }
      00006A 85*00 81         [24]  190 	mov	sp,_bp
      00006D D0*00            [24]  191 	pop	_bp
      00006F 22               [24]  192 	ret
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'vsprintf'
                                    195 ;------------------------------------------------------------
                                    196 ;format                    Allocated with name '_vsprintf_PARM_2'
                                    197 ;ap                        Allocated with name '_vsprintf_PARM_3'
                                    198 ;buf                       Allocated with name '_vsprintf_buf_65536_16'
                                    199 ;i                         Allocated with name '_vsprintf_i_65536_17'
                                    200 ;------------------------------------------------------------
                                    201 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    202 ;	-----------------------------------------
                                    203 ;	 function vsprintf
                                    204 ;	-----------------------------------------
      000070                        205 _vsprintf:
      000070 AF F0            [24]  206 	mov	r7,b
      000072 AE 83            [24]  207 	mov	r6,dph
      000074 E5 82            [12]  208 	mov	a,dpl
      000076 90r00r04         [24]  209 	mov	dptr,#_vsprintf_buf_65536_16
      000079 F0               [24]  210 	movx	@dptr,a
      00007A EE               [12]  211 	mov	a,r6
      00007B A3               [24]  212 	inc	dptr
      00007C F0               [24]  213 	movx	@dptr,a
      00007D EF               [12]  214 	mov	a,r7
      00007E A3               [24]  215 	inc	dptr
      00007F F0               [24]  216 	movx	@dptr,a
                                    217 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      000080 90r00r00         [24]  218 	mov	dptr,#_vsprintf_PARM_2
      000083 E0               [24]  219 	movx	a,@dptr
      000084 FD               [12]  220 	mov	r5,a
      000085 A3               [24]  221 	inc	dptr
      000086 E0               [24]  222 	movx	a,@dptr
      000087 FE               [12]  223 	mov	r6,a
      000088 A3               [24]  224 	inc	dptr
      000089 E0               [24]  225 	movx	a,@dptr
      00008A FF               [12]  226 	mov	r7,a
      00008B 90r00r03         [24]  227 	mov	dptr,#_vsprintf_PARM_3
      00008E E0               [24]  228 	movx	a,@dptr
      00008F FC               [12]  229 	mov	r4,a
      000090 90r00r00         [24]  230 	mov	dptr,#__print_format_PARM_2
      000093 74r04            [12]  231 	mov	a,#_vsprintf_buf_65536_16
      000095 F0               [24]  232 	movx	@dptr,a
      000096 74s00            [12]  233 	mov	a,#(_vsprintf_buf_65536_16 >> 8)
      000098 A3               [24]  234 	inc	dptr
      000099 F0               [24]  235 	movx	@dptr,a
      00009A E4               [12]  236 	clr	a
      00009B A3               [24]  237 	inc	dptr
      00009C F0               [24]  238 	movx	@dptr,a
      00009D 90r00r00         [24]  239 	mov	dptr,#__print_format_PARM_3
      0000A0 ED               [12]  240 	mov	a,r5
      0000A1 F0               [24]  241 	movx	@dptr,a
      0000A2 EE               [12]  242 	mov	a,r6
      0000A3 A3               [24]  243 	inc	dptr
      0000A4 F0               [24]  244 	movx	@dptr,a
      0000A5 EF               [12]  245 	mov	a,r7
      0000A6 A3               [24]  246 	inc	dptr
      0000A7 F0               [24]  247 	movx	@dptr,a
      0000A8 90r00r00         [24]  248 	mov	dptr,#__print_format_PARM_4
      0000AB EC               [12]  249 	mov	a,r4
      0000AC F0               [24]  250 	movx	@dptr,a
      0000AD 90r00r00         [24]  251 	mov	dptr,#_put_char_to_string
      0000B0 12r00r00         [24]  252 	lcall	__print_format
      0000B3 AE 82            [24]  253 	mov	r6,dpl
      0000B5 AF 83            [24]  254 	mov	r7,dph
                                    255 ;	sprintf.c:45: *buf = 0;
      0000B7 90r00r04         [24]  256 	mov	dptr,#_vsprintf_buf_65536_16
      0000BA E0               [24]  257 	movx	a,@dptr
      0000BB FB               [12]  258 	mov	r3,a
      0000BC A3               [24]  259 	inc	dptr
      0000BD E0               [24]  260 	movx	a,@dptr
      0000BE FC               [12]  261 	mov	r4,a
      0000BF A3               [24]  262 	inc	dptr
      0000C0 E0               [24]  263 	movx	a,@dptr
      0000C1 FD               [12]  264 	mov	r5,a
      0000C2 8B 82            [24]  265 	mov	dpl,r3
      0000C4 8C 83            [24]  266 	mov	dph,r4
      0000C6 8D F0            [24]  267 	mov	b,r5
      0000C8 E4               [12]  268 	clr	a
      0000C9 12r00r00         [24]  269 	lcall	__gptrput
                                    270 ;	sprintf.c:46: return i;
      0000CC 8E 82            [24]  271 	mov	dpl,r6
      0000CE 8F 83            [24]  272 	mov	dph,r7
                                    273 ;	sprintf.c:47: }
      0000D0 22               [24]  274 	ret
                                    275 ;------------------------------------------------------------
                                    276 ;Allocation info for local variables in function 'sprintf'
                                    277 ;------------------------------------------------------------
                                    278 ;buf                       Allocated to stack - _bp -5
                                    279 ;format                    Allocated to stack - _bp -8
                                    280 ;arg                       Allocated to registers r7 
                                    281 ;i                         Allocated to registers r6 r7 
                                    282 ;------------------------------------------------------------
                                    283 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    284 ;	-----------------------------------------
                                    285 ;	 function sprintf
                                    286 ;	-----------------------------------------
      0000D1                        287 _sprintf:
      0000D1 C0*00            [24]  288 	push	_bp
                                    289 ;	sprintf.c:55: va_start (arg, format);
      0000D3 E5 81            [12]  290 	mov	a,sp
      0000D5 F5*00            [12]  291 	mov	_bp,a
      0000D7 24 F8            [12]  292 	add	a,#0xf8
      0000D9 FF               [12]  293 	mov	r7,a
                                    294 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      0000DA E5*00            [12]  295 	mov	a,_bp
      0000DC 24 FB            [12]  296 	add	a,#0xfb
      0000DE FE               [12]  297 	mov	r6,a
      0000DF 7D 00            [12]  298 	mov	r5,#0x00
      0000E1 7C 40            [12]  299 	mov	r4,#0x40
      0000E3 90r00r00         [24]  300 	mov	dptr,#__print_format_PARM_2
      0000E6 EE               [12]  301 	mov	a,r6
      0000E7 F0               [24]  302 	movx	@dptr,a
      0000E8 ED               [12]  303 	mov	a,r5
      0000E9 A3               [24]  304 	inc	dptr
      0000EA F0               [24]  305 	movx	@dptr,a
      0000EB EC               [12]  306 	mov	a,r4
      0000EC A3               [24]  307 	inc	dptr
      0000ED F0               [24]  308 	movx	@dptr,a
      0000EE E5*00            [12]  309 	mov	a,_bp
      0000F0 24 F8            [12]  310 	add	a,#0xf8
      0000F2 F8               [12]  311 	mov	r0,a
      0000F3 90r00r00         [24]  312 	mov	dptr,#__print_format_PARM_3
      0000F6 E6               [12]  313 	mov	a,@r0
      0000F7 F0               [24]  314 	movx	@dptr,a
      0000F8 08               [12]  315 	inc	r0
      0000F9 E6               [12]  316 	mov	a,@r0
      0000FA A3               [24]  317 	inc	dptr
      0000FB F0               [24]  318 	movx	@dptr,a
      0000FC 08               [12]  319 	inc	r0
      0000FD E6               [12]  320 	mov	a,@r0
      0000FE A3               [24]  321 	inc	dptr
      0000FF F0               [24]  322 	movx	@dptr,a
      000100 90r00r00         [24]  323 	mov	dptr,#__print_format_PARM_4
      000103 EF               [12]  324 	mov	a,r7
      000104 F0               [24]  325 	movx	@dptr,a
      000105 90r00r00         [24]  326 	mov	dptr,#_put_char_to_string
      000108 12r00r00         [24]  327 	lcall	__print_format
      00010B AE 82            [24]  328 	mov	r6,dpl
      00010D AF 83            [24]  329 	mov	r7,dph
                                    330 ;	sprintf.c:57: *buf = 0;
      00010F E5*00            [12]  331 	mov	a,_bp
      000111 24 FB            [12]  332 	add	a,#0xfb
      000113 F8               [12]  333 	mov	r0,a
      000114 86 03            [24]  334 	mov	ar3,@r0
      000116 08               [12]  335 	inc	r0
      000117 86 04            [24]  336 	mov	ar4,@r0
      000119 08               [12]  337 	inc	r0
      00011A 86 05            [24]  338 	mov	ar5,@r0
      00011C 8B 82            [24]  339 	mov	dpl,r3
      00011E 8C 83            [24]  340 	mov	dph,r4
      000120 8D F0            [24]  341 	mov	b,r5
      000122 E4               [12]  342 	clr	a
      000123 12r00r00         [24]  343 	lcall	__gptrput
                                    344 ;	sprintf.c:60: return i;
      000126 8E 82            [24]  345 	mov	dpl,r6
      000128 8F 83            [24]  346 	mov	dph,r7
                                    347 ;	sprintf.c:61: }
      00012A D0*00            [24]  348 	pop	_bp
      00012C 22               [24]  349 	ret
                                    350 	.area CSEG    (CODE)
                                    351 	.area CONST   (CODE)
                                    352 	.area XINIT   (CODE)
                                    353 	.area CABS    (ABS,CODE)
