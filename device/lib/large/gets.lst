                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
      000000                         57 _gets_s_65536_14:
      000000                         58 	.ds 3
      000003                         59 _gets_count_65536_15:
      000003                         60 	.ds 2
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; initialized external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function 'gets'
                                     97 ;------------------------------------------------------------
                                     98 ;s                         Allocated with name '_gets_s_65536_14'
                                     99 ;c                         Allocated with name '_gets_c_65536_15'
                                    100 ;count                     Allocated with name '_gets_count_65536_15'
                                    101 ;------------------------------------------------------------
                                    102 ;	gets.c:32: gets (char *s)
                                    103 ;	-----------------------------------------
                                    104 ;	 function gets
                                    105 ;	-----------------------------------------
      000000                        106 _gets:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 AF F0            [24]  115 	mov	r7,b
      000002 AE 83            [24]  116 	mov	r6,dph
      000004 E5 82            [12]  117 	mov	a,dpl
      000006 90r00r00         [24]  118 	mov	dptr,#_gets_s_65536_14
      000009 F0               [24]  119 	movx	@dptr,a
      00000A EE               [12]  120 	mov	a,r6
      00000B A3               [24]  121 	inc	dptr
      00000C F0               [24]  122 	movx	@dptr,a
      00000D EF               [12]  123 	mov	a,r7
      00000E A3               [24]  124 	inc	dptr
      00000F F0               [24]  125 	movx	@dptr,a
                                    126 ;	gets.c:35: unsigned int count = 0;
      000010 90r00r03         [24]  127 	mov	dptr,#_gets_count_65536_15
      000013 E4               [12]  128 	clr	a
      000014 F0               [24]  129 	movx	@dptr,a
      000015 A3               [24]  130 	inc	dptr
      000016 F0               [24]  131 	movx	@dptr,a
                                    132 ;	gets.c:37: while (1)
      000017                        133 00109$:
                                    134 ;	gets.c:39: c = getchar ();
      000017 12r00r00         [24]  135 	lcall	_getchar
      00001A AE 82            [24]  136 	mov	r6,dpl
      00001C AF 83            [24]  137 	mov	r7,dph
                                    138 ;	gets.c:40: switch(c)
      00001E BE 08 02         [24]  139 	cjne	r6,#0x08,00133$
      000021 80 0D            [24]  140 	sjmp	00101$
      000023                        141 00133$:
      000023 BE 0A 02         [24]  142 	cjne	r6,#0x0a,00134$
      000026 80 5F            [24]  143 	sjmp	00105$
      000028                        144 00134$:
      000028 BE 0D 02         [24]  145 	cjne	r6,#0x0d,00135$
      00002B 80 5A            [24]  146 	sjmp	00105$
      00002D                        147 00135$:
      00002D 02r00rAF         [24]  148 	ljmp	00106$
                                    149 ;	gets.c:42: case '\b': /* backspace */
      000030                        150 00101$:
                                    151 ;	gets.c:43: if (count)
      000030 90r00r03         [24]  152 	mov	dptr,#_gets_count_65536_15
      000033 E0               [24]  153 	movx	a,@dptr
      000034 FD               [12]  154 	mov	r5,a
      000035 A3               [24]  155 	inc	dptr
      000036 E0               [24]  156 	movx	a,@dptr
      000037 FF               [12]  157 	mov	r7,a
      000038 90r00r03         [24]  158 	mov	dptr,#_gets_count_65536_15
      00003B E0               [24]  159 	movx	a,@dptr
      00003C F5 F0            [12]  160 	mov	b,a
      00003E A3               [24]  161 	inc	dptr
      00003F E0               [24]  162 	movx	a,@dptr
      000040 45 F0            [12]  163 	orl	a,b
      000042 60 D3            [24]  164 	jz	00109$
                                    165 ;	gets.c:45: putchar ('\b');
      000044 90 00 08         [24]  166 	mov	dptr,#0x0008
      000047 C0 07            [24]  167 	push	ar7
      000049 C0 05            [24]  168 	push	ar5
      00004B 12r00r00         [24]  169 	lcall	_putchar
                                    170 ;	gets.c:46: putchar (' ');
      00004E 90 00 20         [24]  171 	mov	dptr,#0x0020
      000051 12r00r00         [24]  172 	lcall	_putchar
                                    173 ;	gets.c:47: putchar ('\b');
      000054 90 00 08         [24]  174 	mov	dptr,#0x0008
      000057 12r00r00         [24]  175 	lcall	_putchar
      00005A D0 05            [24]  176 	pop	ar5
      00005C D0 07            [24]  177 	pop	ar7
                                    178 ;	gets.c:48: --s;
      00005E 90r00r00         [24]  179 	mov	dptr,#_gets_s_65536_14
      000061 E0               [24]  180 	movx	a,@dptr
      000062 24 FF            [12]  181 	add	a,#0xff
      000064 FA               [12]  182 	mov	r2,a
      000065 A3               [24]  183 	inc	dptr
      000066 E0               [24]  184 	movx	a,@dptr
      000067 34 FF            [12]  185 	addc	a,#0xff
      000069 FB               [12]  186 	mov	r3,a
      00006A A3               [24]  187 	inc	dptr
      00006B E0               [24]  188 	movx	a,@dptr
      00006C FC               [12]  189 	mov	r4,a
      00006D 90r00r00         [24]  190 	mov	dptr,#_gets_s_65536_14
      000070 EA               [12]  191 	mov	a,r2
      000071 F0               [24]  192 	movx	@dptr,a
      000072 EB               [12]  193 	mov	a,r3
      000073 A3               [24]  194 	inc	dptr
      000074 F0               [24]  195 	movx	@dptr,a
      000075 EC               [12]  196 	mov	a,r4
      000076 A3               [24]  197 	inc	dptr
      000077 F0               [24]  198 	movx	@dptr,a
                                    199 ;	gets.c:49: --count;
      000078 1D               [12]  200 	dec	r5
      000079 BD FF 01         [24]  201 	cjne	r5,#0xff,00137$
      00007C 1F               [12]  202 	dec	r7
      00007D                        203 00137$:
      00007D 90r00r03         [24]  204 	mov	dptr,#_gets_count_65536_15
      000080 ED               [12]  205 	mov	a,r5
      000081 F0               [24]  206 	movx	@dptr,a
      000082 EF               [12]  207 	mov	a,r7
      000083 A3               [24]  208 	inc	dptr
      000084 F0               [24]  209 	movx	@dptr,a
                                    210 ;	gets.c:51: break;
                                    211 ;	gets.c:54: case '\r': /* CR or LF */
      000085 80 90            [24]  212 	sjmp	00109$
      000087                        213 00105$:
                                    214 ;	gets.c:55: putchar ('\r');
      000087 90 00 0D         [24]  215 	mov	dptr,#0x000d
      00008A 12r00r00         [24]  216 	lcall	_putchar
                                    217 ;	gets.c:56: putchar ('\n');
      00008D 90 00 0A         [24]  218 	mov	dptr,#0x000a
      000090 12r00r00         [24]  219 	lcall	_putchar
                                    220 ;	gets.c:57: *s = 0;
      000093 90r00r00         [24]  221 	mov	dptr,#_gets_s_65536_14
      000096 E0               [24]  222 	movx	a,@dptr
      000097 FC               [12]  223 	mov	r4,a
      000098 A3               [24]  224 	inc	dptr
      000099 E0               [24]  225 	movx	a,@dptr
      00009A FD               [12]  226 	mov	r5,a
      00009B A3               [24]  227 	inc	dptr
      00009C E0               [24]  228 	movx	a,@dptr
      00009D FF               [12]  229 	mov	r7,a
      00009E 8C 82            [24]  230 	mov	dpl,r4
      0000A0 8D 83            [24]  231 	mov	dph,r5
      0000A2 8F F0            [24]  232 	mov	b,r7
      0000A4 E4               [12]  233 	clr	a
      0000A5 12r00r00         [24]  234 	lcall	__gptrput
                                    235 ;	gets.c:58: return s;
      0000A8 8C 82            [24]  236 	mov	dpl,r4
      0000AA 8D 83            [24]  237 	mov	dph,r5
      0000AC 8F F0            [24]  238 	mov	b,r7
                                    239 ;	gets.c:60: default:
      0000AE 22               [24]  240 	ret
      0000AF                        241 00106$:
                                    242 ;	gets.c:61: *s++ = c;
      0000AF 90r00r00         [24]  243 	mov	dptr,#_gets_s_65536_14
      0000B2 E0               [24]  244 	movx	a,@dptr
      0000B3 FC               [12]  245 	mov	r4,a
      0000B4 A3               [24]  246 	inc	dptr
      0000B5 E0               [24]  247 	movx	a,@dptr
      0000B6 FD               [12]  248 	mov	r5,a
      0000B7 A3               [24]  249 	inc	dptr
      0000B8 E0               [24]  250 	movx	a,@dptr
      0000B9 FF               [12]  251 	mov	r7,a
      0000BA 8C 82            [24]  252 	mov	dpl,r4
      0000BC 8D 83            [24]  253 	mov	dph,r5
      0000BE 8F F0            [24]  254 	mov	b,r7
      0000C0 EE               [12]  255 	mov	a,r6
      0000C1 12r00r00         [24]  256 	lcall	__gptrput
      0000C4 90r00r00         [24]  257 	mov	dptr,#_gets_s_65536_14
      0000C7 74 01            [12]  258 	mov	a,#0x01
      0000C9 2C               [12]  259 	add	a,r4
      0000CA F0               [24]  260 	movx	@dptr,a
      0000CB E4               [12]  261 	clr	a
      0000CC 3D               [12]  262 	addc	a,r5
      0000CD A3               [24]  263 	inc	dptr
      0000CE F0               [24]  264 	movx	@dptr,a
      0000CF EF               [12]  265 	mov	a,r7
      0000D0 A3               [24]  266 	inc	dptr
      0000D1 F0               [24]  267 	movx	@dptr,a
                                    268 ;	gets.c:62: ++count;
      0000D2 90r00r03         [24]  269 	mov	dptr,#_gets_count_65536_15
      0000D5 E0               [24]  270 	movx	a,@dptr
      0000D6 24 01            [12]  271 	add	a,#0x01
      0000D8 F0               [24]  272 	movx	@dptr,a
      0000D9 A3               [24]  273 	inc	dptr
      0000DA E0               [24]  274 	movx	a,@dptr
      0000DB 34 00            [12]  275 	addc	a,#0x00
      0000DD F0               [24]  276 	movx	@dptr,a
                                    277 ;	gets.c:63: putchar (c);
      0000DE 7F 00            [12]  278 	mov	r7,#0x00
      0000E0 8E 82            [24]  279 	mov	dpl,r6
      0000E2 8F 83            [24]  280 	mov	dph,r7
      0000E4 12r00r00         [24]  281 	lcall	_putchar
                                    282 ;	gets.c:65: }
                                    283 ;	gets.c:67: }
      0000E7 02r00r17         [24]  284 	ljmp	00109$
                                    285 	.area CSEG    (CODE)
                                    286 	.area CONST   (CODE)
                                    287 	.area XINIT   (CODE)
                                    288 	.area CABS    (ABS,CODE)
