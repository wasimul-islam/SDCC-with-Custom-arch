                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbstowcs
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 	.globl _mbstowcs
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'mbstowcs'
                                     92 ;------------------------------------------------------------
                                     93 ;s                         Allocated to stack - _bp -5
                                     94 ;n                         Allocated to stack - _bp -7
                                     95 ;pwcs                      Allocated to registers 
                                     96 ;m                         Allocated to stack - _bp +5
                                     97 ;b                         Allocated to registers r3 r4 
                                     98 ;sloc0                     Allocated to stack - _bp +1
                                     99 ;sloc1                     Allocated to stack - _bp +3
                                    100 ;------------------------------------------------------------
                                    101 ;	mbstowcs.c:33: size_t mbstowcs(wchar_t *restrict pwcs, const char *restrict s, size_t n)
                                    102 ;	-----------------------------------------
                                    103 ;	 function mbstowcs
                                    104 ;	-----------------------------------------
      000000                        105 _mbstowcs:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 E5 81            [12]  115 	mov	a,sp
      000004 F5*00            [12]  116 	mov	_bp,a
      000006 24 06            [12]  117 	add	a,#0x06
      000008 F5 81            [12]  118 	mov	sp,a
      00000A AD 82            [24]  119 	mov	r5,dpl
      00000C AE 83            [24]  120 	mov	r6,dph
      00000E AF F0            [24]  121 	mov	r7,b
                                    122 ;	mbstowcs.c:35: size_t m = 0;
      000010 A8*00            [24]  123 	mov	r0,_bp
      000012 08               [12]  124 	inc	r0
      000013 E4               [12]  125 	clr	a
      000014 F6               [12]  126 	mov	@r0,a
      000015 08               [12]  127 	inc	r0
      000016 F6               [12]  128 	mov	@r0,a
                                    129 ;	mbstowcs.c:36: while(n--)
      000017 E5*00            [12]  130 	mov	a,_bp
      000019 24 05            [12]  131 	add	a,#0x05
      00001B F8               [12]  132 	mov	r0,a
      00001C E4               [12]  133 	clr	a
      00001D F6               [12]  134 	mov	@r0,a
      00001E 08               [12]  135 	inc	r0
      00001F F6               [12]  136 	mov	@r0,a
      000020 E5*00            [12]  137 	mov	a,_bp
      000022 24 F9            [12]  138 	add	a,#0xf9
      000024 F8               [12]  139 	mov	r0,a
      000025 E5*00            [12]  140 	mov	a,_bp
      000027 24 03            [12]  141 	add	a,#0x03
      000029 F9               [12]  142 	mov	r1,a
      00002A E6               [12]  143 	mov	a,@r0
      00002B F7               [12]  144 	mov	@r1,a
      00002C 08               [12]  145 	inc	r0
      00002D E6               [12]  146 	mov	a,@r0
      00002E 09               [12]  147 	inc	r1
      00002F F7               [12]  148 	mov	@r1,a
      000030                        149 00105$:
      000030 E5*00            [12]  150 	mov	a,_bp
      000032 24 03            [12]  151 	add	a,#0x03
      000034 F8               [12]  152 	mov	r0,a
      000035 86 03            [24]  153 	mov	ar3,@r0
      000037 08               [12]  154 	inc	r0
      000038 86 04            [24]  155 	mov	ar4,@r0
      00003A E5*00            [12]  156 	mov	a,_bp
      00003C 24 03            [12]  157 	add	a,#0x03
      00003E F8               [12]  158 	mov	r0,a
      00003F 16               [12]  159 	dec	@r0
      000040 B6 FF 02         [24]  160 	cjne	@r0,#0xff,00126$
      000043 08               [12]  161 	inc	r0
      000044 16               [12]  162 	dec	@r0
      000045                        163 00126$:
      000045 EB               [12]  164 	mov	a,r3
      000046 4C               [12]  165 	orl	a,r4
      000047 70 03            [24]  166 	jnz	00127$
      000049 02r00rC4         [24]  167 	ljmp	00107$
      00004C                        168 00127$:
                                    169 ;	mbstowcs.c:38: int b = mbtowc(pwcs++, s, MB_LEN_MAX);
      00004C 8D 02            [24]  170 	mov	ar2,r5
      00004E 8E 03            [24]  171 	mov	ar3,r6
      000050 8F 04            [24]  172 	mov	ar4,r7
      000052 74 04            [12]  173 	mov	a,#0x04
      000054 2D               [12]  174 	add	a,r5
      000055 FD               [12]  175 	mov	r5,a
      000056 E4               [12]  176 	clr	a
      000057 3E               [12]  177 	addc	a,r6
      000058 FE               [12]  178 	mov	r6,a
      000059 C0 07            [24]  179 	push	ar7
      00005B C0 06            [24]  180 	push	ar6
      00005D C0 05            [24]  181 	push	ar5
      00005F 74 04            [12]  182 	mov	a,#0x04
      000061 C0 E0            [24]  183 	push	acc
      000063 E4               [12]  184 	clr	a
      000064 C0 E0            [24]  185 	push	acc
      000066 E5*00            [12]  186 	mov	a,_bp
      000068 24 FB            [12]  187 	add	a,#0xfb
      00006A F8               [12]  188 	mov	r0,a
      00006B E6               [12]  189 	mov	a,@r0
      00006C C0 E0            [24]  190 	push	acc
      00006E 08               [12]  191 	inc	r0
      00006F E6               [12]  192 	mov	a,@r0
      000070 C0 E0            [24]  193 	push	acc
      000072 08               [12]  194 	inc	r0
      000073 E6               [12]  195 	mov	a,@r0
      000074 C0 E0            [24]  196 	push	acc
      000076 8A 82            [24]  197 	mov	dpl,r2
      000078 8B 83            [24]  198 	mov	dph,r3
      00007A 8C F0            [24]  199 	mov	b,r4
      00007C 12r00r00         [24]  200 	lcall	_mbtowc
      00007F AB 82            [24]  201 	mov	r3,dpl
      000081 AC 83            [24]  202 	mov	r4,dph
      000083 E5 81            [12]  203 	mov	a,sp
      000085 24 FB            [12]  204 	add	a,#0xfb
      000087 F5 81            [12]  205 	mov	sp,a
      000089 D0 05            [24]  206 	pop	ar5
      00008B D0 06            [24]  207 	pop	ar6
      00008D D0 07            [24]  208 	pop	ar7
                                    209 ;	mbstowcs.c:39: if(!b)
      00008F EB               [12]  210 	mov	a,r3
      000090 4C               [12]  211 	orl	a,r4
      000091 60 31            [24]  212 	jz	00107$
                                    213 ;	mbstowcs.c:41: if(b < 0)
      000093 EC               [12]  214 	mov	a,r4
      000094 30 E7 05         [24]  215 	jnb	acc.7,00104$
                                    216 ;	mbstowcs.c:42: return(-1);
      000097 90 FF FF         [24]  217 	mov	dptr,#0xffff
      00009A 80 30            [24]  218 	sjmp	00108$
      00009C                        219 00104$:
                                    220 ;	mbstowcs.c:43: s += b;
      00009C E5*00            [12]  221 	mov	a,_bp
      00009E 24 FB            [12]  222 	add	a,#0xfb
      0000A0 F8               [12]  223 	mov	r0,a
      0000A1 EB               [12]  224 	mov	a,r3
      0000A2 26               [12]  225 	add	a,@r0
      0000A3 F6               [12]  226 	mov	@r0,a
      0000A4 EC               [12]  227 	mov	a,r4
      0000A5 08               [12]  228 	inc	r0
      0000A6 36               [12]  229 	addc	a,@r0
      0000A7 F6               [12]  230 	mov	@r0,a
                                    231 ;	mbstowcs.c:44: m++;
      0000A8 E5*00            [12]  232 	mov	a,_bp
      0000AA 24 05            [12]  233 	add	a,#0x05
      0000AC F8               [12]  234 	mov	r0,a
      0000AD 06               [12]  235 	inc	@r0
      0000AE B6 00 02         [24]  236 	cjne	@r0,#0x00,00130$
      0000B1 08               [12]  237 	inc	r0
      0000B2 06               [12]  238 	inc	@r0
      0000B3                        239 00130$:
      0000B3 E5*00            [12]  240 	mov	a,_bp
      0000B5 24 05            [12]  241 	add	a,#0x05
      0000B7 F8               [12]  242 	mov	r0,a
      0000B8 A9*00            [24]  243 	mov	r1,_bp
      0000BA 09               [12]  244 	inc	r1
      0000BB E6               [12]  245 	mov	a,@r0
      0000BC F7               [12]  246 	mov	@r1,a
      0000BD 08               [12]  247 	inc	r0
      0000BE E6               [12]  248 	mov	a,@r0
      0000BF 09               [12]  249 	inc	r1
      0000C0 F7               [12]  250 	mov	@r1,a
      0000C1 02r00r30         [24]  251 	ljmp	00105$
      0000C4                        252 00107$:
                                    253 ;	mbstowcs.c:47: return(m);
      0000C4 A8*00            [24]  254 	mov	r0,_bp
      0000C6 08               [12]  255 	inc	r0
      0000C7 86 82            [24]  256 	mov	dpl,@r0
      0000C9 08               [12]  257 	inc	r0
      0000CA 86 83            [24]  258 	mov	dph,@r0
      0000CC                        259 00108$:
                                    260 ;	mbstowcs.c:48: }
      0000CC 85*00 81         [24]  261 	mov	sp,_bp
      0000CF D0*00            [24]  262 	pop	_bp
      0000D1 22               [24]  263 	ret
                                    264 	.area CSEG    (CODE)
                                    265 	.area CONST   (CODE)
                                    266 	.area XINIT   (CODE)
                                    267 	.area CABS    (ABS,CODE)
