                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module qsort
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _qsort
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'swap'
                                     91 ;------------------------------------------------------------
                                     92 ;src                       Allocated to stack - _bp -5
                                     93 ;n                         Allocated to stack - _bp -7
                                     94 ;dst                       Allocated to registers r5 r6 r7 
                                     95 ;d                         Allocated to registers 
                                     96 ;s                         Allocated to registers 
                                     97 ;tmp                       Allocated to registers r4 
                                     98 ;sloc0                     Allocated to stack - _bp +1
                                     99 ;sloc1                     Allocated to stack - _bp +3
                                    100 ;------------------------------------------------------------
                                    101 ;	qsort.c:33: static void swap(void *restrict dst, void *restrict src, size_t n)
                                    102 ;	-----------------------------------------
                                    103 ;	 function swap
                                    104 ;	-----------------------------------------
      000000                        105 _swap:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 E5 81            [12]  115 	mov	a,sp
      000004 F5*00            [12]  116 	mov	_bp,a
      000006 24 05            [12]  117 	add	a,#0x05
      000008 F5 81            [12]  118 	mov	sp,a
      00000A AD 82            [24]  119 	mov	r5,dpl
      00000C AE 83            [24]  120 	mov	r6,dph
      00000E AF F0            [24]  121 	mov	r7,b
                                    122 ;	qsort.c:35: unsigned char *restrict d = dst;
                                    123 ;	qsort.c:36: unsigned char *restrict s = src;
      000010 E5*00            [12]  124 	mov	a,_bp
      000012 24 FB            [12]  125 	add	a,#0xfb
      000014 F8               [12]  126 	mov	r0,a
      000015 E5*00            [12]  127 	mov	a,_bp
      000017 24 03            [12]  128 	add	a,#0x03
      000019 F9               [12]  129 	mov	r1,a
      00001A E6               [12]  130 	mov	a,@r0
      00001B F7               [12]  131 	mov	@r1,a
      00001C 08               [12]  132 	inc	r0
      00001D E6               [12]  133 	mov	a,@r0
      00001E 09               [12]  134 	inc	r1
      00001F F7               [12]  135 	mov	@r1,a
      000020 08               [12]  136 	inc	r0
      000021 E6               [12]  137 	mov	a,@r0
      000022 09               [12]  138 	inc	r1
      000023 F7               [12]  139 	mov	@r1,a
                                    140 ;	qsort.c:38: while(n--)
      000024 E5*00            [12]  141 	mov	a,_bp
      000026 24 F9            [12]  142 	add	a,#0xf9
      000028 F8               [12]  143 	mov	r0,a
      000029 A9*00            [24]  144 	mov	r1,_bp
      00002B 09               [12]  145 	inc	r1
      00002C E6               [12]  146 	mov	a,@r0
      00002D F7               [12]  147 	mov	@r1,a
      00002E 08               [12]  148 	inc	r0
      00002F E6               [12]  149 	mov	a,@r0
      000030 09               [12]  150 	inc	r1
      000031 F7               [12]  151 	mov	@r1,a
      000032                        152 00101$:
      000032 A8*00            [24]  153 	mov	r0,_bp
      000034 08               [12]  154 	inc	r0
      000035 86 03            [24]  155 	mov	ar3,@r0
      000037 08               [12]  156 	inc	r0
      000038 86 04            [24]  157 	mov	ar4,@r0
      00003A A8*00            [24]  158 	mov	r0,_bp
      00003C 08               [12]  159 	inc	r0
      00003D 16               [12]  160 	dec	@r0
      00003E B6 FF 02         [24]  161 	cjne	@r0,#0xff,00115$
      000041 08               [12]  162 	inc	r0
      000042 16               [12]  163 	dec	@r0
      000043                        164 00115$:
      000043 EB               [12]  165 	mov	a,r3
      000044 4C               [12]  166 	orl	a,r4
      000045 60 44            [24]  167 	jz	00104$
                                    168 ;	qsort.c:40: unsigned char tmp = *d;
      000047 8D 82            [24]  169 	mov	dpl,r5
      000049 8E 83            [24]  170 	mov	dph,r6
      00004B 8F F0            [24]  171 	mov	b,r7
      00004D 12r00r00         [24]  172 	lcall	__gptrget
      000050 FC               [12]  173 	mov	r4,a
                                    174 ;	qsort.c:41: *d = *s;
      000051 E5*00            [12]  175 	mov	a,_bp
      000053 24 03            [12]  176 	add	a,#0x03
      000055 F8               [12]  177 	mov	r0,a
      000056 86 82            [24]  178 	mov	dpl,@r0
      000058 08               [12]  179 	inc	r0
      000059 86 83            [24]  180 	mov	dph,@r0
      00005B 08               [12]  181 	inc	r0
      00005C 86 F0            [24]  182 	mov	b,@r0
      00005E 12r00r00         [24]  183 	lcall	__gptrget
      000061 FB               [12]  184 	mov	r3,a
      000062 8D 82            [24]  185 	mov	dpl,r5
      000064 8E 83            [24]  186 	mov	dph,r6
      000066 8F F0            [24]  187 	mov	b,r7
      000068 12r00r00         [24]  188 	lcall	__gptrput
      00006B A3               [24]  189 	inc	dptr
      00006C AD 82            [24]  190 	mov	r5,dpl
      00006E AE 83            [24]  191 	mov	r6,dph
                                    192 ;	qsort.c:42: *s = tmp;
      000070 E5*00            [12]  193 	mov	a,_bp
      000072 24 03            [12]  194 	add	a,#0x03
      000074 F8               [12]  195 	mov	r0,a
      000075 86 82            [24]  196 	mov	dpl,@r0
      000077 08               [12]  197 	inc	r0
      000078 86 83            [24]  198 	mov	dph,@r0
      00007A 08               [12]  199 	inc	r0
      00007B 86 F0            [24]  200 	mov	b,@r0
      00007D EC               [12]  201 	mov	a,r4
      00007E 12r00r00         [24]  202 	lcall	__gptrput
      000081 A3               [24]  203 	inc	dptr
      000082 18               [12]  204 	dec	r0
      000083 18               [12]  205 	dec	r0
      000084 A6 82            [24]  206 	mov	@r0,dpl
      000086 08               [12]  207 	inc	r0
      000087 A6 83            [24]  208 	mov	@r0,dph
                                    209 ;	qsort.c:43: d++;
                                    210 ;	qsort.c:44: s++;
      000089 80 A7            [24]  211 	sjmp	00101$
      00008B                        212 00104$:
                                    213 ;	qsort.c:46: }
      00008B 85*00 81         [24]  214 	mov	sp,_bp
      00008E D0*00            [24]  215 	pop	_bp
      000090 22               [24]  216 	ret
                                    217 ;------------------------------------------------------------
                                    218 ;Allocation info for local variables in function 'qsort'
                                    219 ;------------------------------------------------------------
                                    220 ;nmemb                     Allocated to stack - _bp -4
                                    221 ;size                      Allocated to stack - _bp -6
                                    222 ;compar                    Allocated to stack - _bp -8
                                    223 ;base                      Allocated to registers r5 r6 r7 
                                    224 ;b                         Allocated to stack - _bp +10
                                    225 ;i                         Allocated to stack - _bp +13
                                    226 ;j                         Allocated to stack - _bp +16
                                    227 ;sloc0                     Allocated to stack - _bp +1
                                    228 ;sloc1                     Allocated to stack - _bp +4
                                    229 ;sloc2                     Allocated to stack - _bp +7
                                    230 ;------------------------------------------------------------
                                    231 ;	qsort.c:48: void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                                    232 ;	-----------------------------------------
                                    233 ;	 function qsort
                                    234 ;	-----------------------------------------
      000091                        235 _qsort:
      000091 C0*00            [24]  236 	push	_bp
      000093 E5 81            [12]  237 	mov	a,sp
      000095 F5*00            [12]  238 	mov	_bp,a
      000097 24 12            [12]  239 	add	a,#0x12
      000099 F5 81            [12]  240 	mov	sp,a
      00009B AD 82            [24]  241 	mov	r5,dpl
      00009D AE 83            [24]  242 	mov	r6,dph
      00009F AF F0            [24]  243 	mov	r7,b
                                    244 ;	qsort.c:50: unsigned char *b = base;
      0000A1 E5*00            [12]  245 	mov	a,_bp
      0000A3 24 0A            [12]  246 	add	a,#0x0a
      0000A5 F8               [12]  247 	mov	r0,a
      0000A6 A6 05            [24]  248 	mov	@r0,ar5
      0000A8 08               [12]  249 	inc	r0
      0000A9 A6 06            [24]  250 	mov	@r0,ar6
      0000AB 08               [12]  251 	inc	r0
      0000AC A6 07            [24]  252 	mov	@r0,ar7
                                    253 ;	qsort.c:52: if(nmemb <= 1)
      0000AE E5*00            [12]  254 	mov	a,_bp
      0000B0 24 FC            [12]  255 	add	a,#0xfc
      0000B2 F8               [12]  256 	mov	r0,a
      0000B3 C3               [12]  257 	clr	c
      0000B4 74 01            [12]  258 	mov	a,#0x01
      0000B6 96               [12]  259 	subb	a,@r0
      0000B7 E4               [12]  260 	clr	a
      0000B8 08               [12]  261 	inc	r0
      0000B9 96               [12]  262 	subb	a,@r0
      0000BA 40 03            [24]  263 	jc	00102$
                                    264 ;	qsort.c:53: return;
      0000BC 02r02r5E         [24]  265 	ljmp	00112$
      0000BF                        266 00102$:
                                    267 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      0000BF E5*00            [12]  268 	mov	a,_bp
      0000C1 24 0D            [12]  269 	add	a,#0x0d
      0000C3 F8               [12]  270 	mov	r0,a
      0000C4 A6 05            [24]  271 	mov	@r0,ar5
      0000C6 08               [12]  272 	inc	r0
      0000C7 A6 06            [24]  273 	mov	@r0,ar6
      0000C9 08               [12]  274 	inc	r0
      0000CA A6 07            [24]  275 	mov	@r0,ar7
      0000CC E5*00            [12]  276 	mov	a,_bp
      0000CE 24 FA            [12]  277 	add	a,#0xfa
      0000D0 F8               [12]  278 	mov	r0,a
      0000D1 86 03            [24]  279 	mov	ar3,@r0
      0000D3 08               [12]  280 	inc	r0
      0000D4 86 04            [24]  281 	mov	ar4,@r0
      0000D6 C0 04            [24]  282 	push	ar4
      0000D8 C0 03            [24]  283 	push	ar3
      0000DA C0 03            [24]  284 	push	ar3
      0000DC C0 04            [24]  285 	push	ar4
      0000DE E5*00            [12]  286 	mov	a,_bp
      0000E0 24 FC            [12]  287 	add	a,#0xfc
      0000E2 F8               [12]  288 	mov	r0,a
      0000E3 86 82            [24]  289 	mov	dpl,@r0
      0000E5 08               [12]  290 	inc	r0
      0000E6 86 83            [24]  291 	mov	dph,@r0
      0000E8 12r00r00         [24]  292 	lcall	__mulint
      0000EB AA 82            [24]  293 	mov	r2,dpl
      0000ED AF 83            [24]  294 	mov	r7,dph
      0000EF 15 81            [12]  295 	dec	sp
      0000F1 15 81            [12]  296 	dec	sp
      0000F3 D0 03            [24]  297 	pop	ar3
      0000F5 D0 04            [24]  298 	pop	ar4
      0000F7 E5*00            [12]  299 	mov	a,_bp
      0000F9 24 0A            [12]  300 	add	a,#0x0a
      0000FB F8               [12]  301 	mov	r0,a
      0000FC A9*00            [24]  302 	mov	r1,_bp
      0000FE 09               [12]  303 	inc	r1
      0000FF EA               [12]  304 	mov	a,r2
      000100 26               [12]  305 	add	a,@r0
      000101 F7               [12]  306 	mov	@r1,a
      000102 EF               [12]  307 	mov	a,r7
      000103 08               [12]  308 	inc	r0
      000104 36               [12]  309 	addc	a,@r0
      000105 09               [12]  310 	inc	r1
      000106 F7               [12]  311 	mov	@r1,a
      000107 08               [12]  312 	inc	r0
      000108 E6               [12]  313 	mov	a,@r0
      000109 09               [12]  314 	inc	r1
      00010A F7               [12]  315 	mov	@r1,a
      00010B                        316 00110$:
      00010B E5*00            [12]  317 	mov	a,_bp
      00010D 24 0D            [12]  318 	add	a,#0x0d
      00010F F8               [12]  319 	mov	r0,a
      000110 A9*00            [24]  320 	mov	r1,_bp
      000112 09               [12]  321 	inc	r1
      000113 E7               [12]  322 	mov	a,@r1
      000114 C0 E0            [24]  323 	push	acc
      000116 09               [12]  324 	inc	r1
      000117 E7               [12]  325 	mov	a,@r1
      000118 C0 E0            [24]  326 	push	acc
      00011A 09               [12]  327 	inc	r1
      00011B E7               [12]  328 	mov	a,@r1
      00011C C0 E0            [24]  329 	push	acc
      00011E 86 82            [24]  330 	mov	dpl,@r0
      000120 08               [12]  331 	inc	r0
      000121 86 83            [24]  332 	mov	dph,@r0
      000123 08               [12]  333 	inc	r0
      000124 86 F0            [24]  334 	mov	b,@r0
      000126 12r00r00         [24]  335 	lcall	___gptr_cmp
      000129 15 81            [12]  336 	dec	sp
      00012B 15 81            [12]  337 	dec	sp
      00012D 15 81            [12]  338 	dec	sp
      00012F 40 03            [24]  339 	jc	00139$
      000131 02r02r5E         [24]  340 	ljmp	00112$
      000134                        341 00139$:
                                    342 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      000134 E5*00            [12]  343 	mov	a,_bp
      000136 24 0D            [12]  344 	add	a,#0x0d
      000138 F8               [12]  345 	mov	r0,a
      000139 E5*00            [12]  346 	mov	a,_bp
      00013B 24 10            [12]  347 	add	a,#0x10
      00013D F9               [12]  348 	mov	r1,a
      00013E E6               [12]  349 	mov	a,@r0
      00013F F7               [12]  350 	mov	@r1,a
      000140 08               [12]  351 	inc	r0
      000141 E6               [12]  352 	mov	a,@r0
      000142 09               [12]  353 	inc	r1
      000143 F7               [12]  354 	mov	@r1,a
      000144 08               [12]  355 	inc	r0
      000145 E6               [12]  356 	mov	a,@r0
      000146 09               [12]  357 	inc	r1
      000147 F7               [12]  358 	mov	@r1,a
      000148                        359 00107$:
      000148 E5*00            [12]  360 	mov	a,_bp
      00014A 24 10            [12]  361 	add	a,#0x10
      00014C F8               [12]  362 	mov	r0,a
      00014D E5*00            [12]  363 	mov	a,_bp
      00014F 24 0A            [12]  364 	add	a,#0x0a
      000151 F9               [12]  365 	mov	r1,a
      000152 E6               [12]  366 	mov	a,@r0
      000153 C0 E0            [24]  367 	push	acc
      000155 08               [12]  368 	inc	r0
      000156 E6               [12]  369 	mov	a,@r0
      000157 C0 E0            [24]  370 	push	acc
      000159 08               [12]  371 	inc	r0
      00015A E6               [12]  372 	mov	a,@r0
      00015B C0 E0            [24]  373 	push	acc
      00015D 87 82            [24]  374 	mov	dpl,@r1
      00015F 09               [12]  375 	inc	r1
      000160 87 83            [24]  376 	mov	dph,@r1
      000162 09               [12]  377 	inc	r1
      000163 87 F0            [24]  378 	mov	b,@r1
      000165 12r00r00         [24]  379 	lcall	___gptr_cmp
      000168 15 81            [12]  380 	dec	sp
      00016A 15 81            [12]  381 	dec	sp
      00016C 15 81            [12]  382 	dec	sp
      00016E 40 03            [24]  383 	jc	00140$
      000170 02r02r4F         [24]  384 	ljmp	00111$
      000173                        385 00140$:
      000173 E5*00            [12]  386 	mov	a,_bp
      000175 24 10            [12]  387 	add	a,#0x10
      000177 F8               [12]  388 	mov	r0,a
      000178 E5*00            [12]  389 	mov	a,_bp
      00017A 24 04            [12]  390 	add	a,#0x04
      00017C F9               [12]  391 	mov	r1,a
      00017D E6               [12]  392 	mov	a,@r0
      00017E C3               [12]  393 	clr	c
      00017F 9B               [12]  394 	subb	a,r3
      000180 F7               [12]  395 	mov	@r1,a
      000181 08               [12]  396 	inc	r0
      000182 E6               [12]  397 	mov	a,@r0
      000183 9C               [12]  398 	subb	a,r4
      000184 09               [12]  399 	inc	r1
      000185 F7               [12]  400 	mov	@r1,a
      000186 08               [12]  401 	inc	r0
      000187 E6               [12]  402 	mov	a,@r0
      000188 09               [12]  403 	inc	r1
      000189 F7               [12]  404 	mov	@r1,a
      00018A C0 03            [24]  405 	push	ar3
      00018C C0 04            [24]  406 	push	ar4
      00018E E5*00            [12]  407 	mov	a,_bp
      000190 24 04            [12]  408 	add	a,#0x04
      000192 F8               [12]  409 	mov	r0,a
      000193 86 03            [24]  410 	mov	ar3,@r0
      000195 08               [12]  411 	inc	r0
      000196 86 04            [24]  412 	mov	ar4,@r0
      000198 08               [12]  413 	inc	r0
      000199 86 05            [24]  414 	mov	ar5,@r0
      00019B E5*00            [12]  415 	mov	a,_bp
      00019D 24 10            [12]  416 	add	a,#0x10
      00019F F8               [12]  417 	mov	r0,a
      0001A0 86 02            [24]  418 	mov	ar2,@r0
      0001A2 08               [12]  419 	inc	r0
      0001A3 86 06            [24]  420 	mov	ar6,@r0
      0001A5 08               [12]  421 	inc	r0
      0001A6 86 07            [24]  422 	mov	ar7,@r0
      0001A8 C0 04            [24]  423 	push	ar4
      0001AA C0 03            [24]  424 	push	ar3
      0001AC C0 03            [24]  425 	push	ar3
      0001AE C0 04            [24]  426 	push	ar4
      0001B0 C0 05            [24]  427 	push	ar5
      0001B2 12r01rB7         [24]  428 	lcall	00141$
      0001B5 80 13            [24]  429 	sjmp	00142$
      0001B7                        430 00141$:
      0001B7 E5*00            [12]  431 	mov	a,_bp
      0001B9 24 F8            [12]  432 	add	a,#0xf8
      0001BB F8               [12]  433 	mov	r0,a
      0001BC E6               [12]  434 	mov	a,@r0
      0001BD C0 E0            [24]  435 	push	acc
      0001BF 08               [12]  436 	inc	r0
      0001C0 E6               [12]  437 	mov	a,@r0
      0001C1 C0 E0            [24]  438 	push	acc
      0001C3 8A 82            [24]  439 	mov	dpl,r2
      0001C5 8E 83            [24]  440 	mov	dph,r6
      0001C7 8F F0            [24]  441 	mov	b,r7
      0001C9 22               [24]  442 	ret
      0001CA                        443 00142$:
      0001CA AE 82            [24]  444 	mov	r6,dpl
      0001CC AF 83            [24]  445 	mov	r7,dph
      0001CE 15 81            [12]  446 	dec	sp
      0001D0 15 81            [12]  447 	dec	sp
      0001D2 15 81            [12]  448 	dec	sp
      0001D4 D0 03            [24]  449 	pop	ar3
      0001D6 D0 04            [24]  450 	pop	ar4
      0001D8 EF               [12]  451 	mov	a,r7
      0001D9 D0 04            [24]  452 	pop	ar4
      0001DB D0 03            [24]  453 	pop	ar3
      0001DD 30 E7 6F         [24]  454 	jnb	acc.7,00111$
                                    455 ;	qsort.c:58: swap(j, j - size, size);
      0001E0 E5*00            [12]  456 	mov	a,_bp
      0001E2 24 04            [12]  457 	add	a,#0x04
      0001E4 F8               [12]  458 	mov	r0,a
      0001E5 86 05            [24]  459 	mov	ar5,@r0
      0001E7 08               [12]  460 	inc	r0
      0001E8 86 06            [24]  461 	mov	ar6,@r0
      0001EA 08               [12]  462 	inc	r0
      0001EB 86 07            [24]  463 	mov	ar7,@r0
      0001ED E5*00            [12]  464 	mov	a,_bp
      0001EF 24 07            [12]  465 	add	a,#0x07
      0001F1 F8               [12]  466 	mov	r0,a
      0001F2 A6 05            [24]  467 	mov	@r0,ar5
      0001F4 08               [12]  468 	inc	r0
      0001F5 A6 06            [24]  469 	mov	@r0,ar6
      0001F7 08               [12]  470 	inc	r0
      0001F8 A6 07            [24]  471 	mov	@r0,ar7
      0001FA E5*00            [12]  472 	mov	a,_bp
      0001FC 24 10            [12]  473 	add	a,#0x10
      0001FE F8               [12]  474 	mov	r0,a
      0001FF 86 02            [24]  475 	mov	ar2,@r0
      000201 08               [12]  476 	inc	r0
      000202 86 06            [24]  477 	mov	ar6,@r0
      000204 08               [12]  478 	inc	r0
      000205 86 07            [24]  479 	mov	ar7,@r0
      000207 C0 04            [24]  480 	push	ar4
      000209 C0 03            [24]  481 	push	ar3
      00020B C0 03            [24]  482 	push	ar3
      00020D C0 04            [24]  483 	push	ar4
      00020F E5*00            [12]  484 	mov	a,_bp
      000211 24 07            [12]  485 	add	a,#0x07
      000213 F8               [12]  486 	mov	r0,a
      000214 E6               [12]  487 	mov	a,@r0
      000215 C0 E0            [24]  488 	push	acc
      000217 08               [12]  489 	inc	r0
      000218 E6               [12]  490 	mov	a,@r0
      000219 C0 E0            [24]  491 	push	acc
      00021B 08               [12]  492 	inc	r0
      00021C E6               [12]  493 	mov	a,@r0
      00021D C0 E0            [24]  494 	push	acc
      00021F 8A 82            [24]  495 	mov	dpl,r2
      000221 8E 83            [24]  496 	mov	dph,r6
      000223 8F F0            [24]  497 	mov	b,r7
      000225 12r00r00         [24]  498 	lcall	_swap
      000228 E5 81            [12]  499 	mov	a,sp
      00022A 24 FB            [12]  500 	add	a,#0xfb
      00022C F5 81            [12]  501 	mov	sp,a
      00022E D0 03            [24]  502 	pop	ar3
      000230 D0 04            [24]  503 	pop	ar4
                                    504 ;	qsort.c:57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      000232 E5*00            [12]  505 	mov	a,_bp
      000234 24 04            [12]  506 	add	a,#0x04
      000236 F8               [12]  507 	mov	r0,a
      000237 86 05            [24]  508 	mov	ar5,@r0
      000239 08               [12]  509 	inc	r0
      00023A 86 06            [24]  510 	mov	ar6,@r0
      00023C 08               [12]  511 	inc	r0
      00023D 86 07            [24]  512 	mov	ar7,@r0
      00023F E5*00            [12]  513 	mov	a,_bp
      000241 24 10            [12]  514 	add	a,#0x10
      000243 F8               [12]  515 	mov	r0,a
      000244 A6 05            [24]  516 	mov	@r0,ar5
      000246 08               [12]  517 	inc	r0
      000247 A6 06            [24]  518 	mov	@r0,ar6
      000249 08               [12]  519 	inc	r0
      00024A A6 07            [24]  520 	mov	@r0,ar7
      00024C 02r01r48         [24]  521 	ljmp	00107$
      00024F                        522 00111$:
                                    523 ;	qsort.c:55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      00024F E5*00            [12]  524 	mov	a,_bp
      000251 24 0D            [12]  525 	add	a,#0x0d
      000253 F8               [12]  526 	mov	r0,a
      000254 EB               [12]  527 	mov	a,r3
      000255 26               [12]  528 	add	a,@r0
      000256 F6               [12]  529 	mov	@r0,a
      000257 EC               [12]  530 	mov	a,r4
      000258 08               [12]  531 	inc	r0
      000259 36               [12]  532 	addc	a,@r0
      00025A F6               [12]  533 	mov	@r0,a
      00025B 02r01r0B         [24]  534 	ljmp	00110$
      00025E                        535 00112$:
                                    536 ;	qsort.c:60: }
      00025E 85*00 81         [24]  537 	mov	sp,_bp
      000261 D0*00            [24]  538 	pop	_bp
      000263 22               [24]  539 	ret
                                    540 	.area CSEG    (CODE)
                                    541 	.area CONST   (CODE)
                                    542 	.area XINIT   (CODE)
                                    543 	.area CABS    (ABS,CODE)
