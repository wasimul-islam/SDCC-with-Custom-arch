                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module memccpy
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memccpy
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'memccpy'
                                     91 ;------------------------------------------------------------
                                     92 ;src                       Allocated to stack - _bp -5
                                     93 ;c                         Allocated to stack - _bp -7
                                     94 ;n                         Allocated to stack - _bp -9
                                     95 ;dst                       Allocated to registers r5 r6 r7 
                                     96 ;d                         Allocated to stack - _bp +6
                                     97 ;s                         Allocated to registers 
                                     98 ;sloc0                     Allocated to stack - _bp +1
                                     99 ;sloc1                     Allocated to stack - _bp +3
                                    100 ;------------------------------------------------------------
                                    101 ;	memccpy.c:31: void *memccpy (void *restrict dst, const void *restrict src, int c, size_t n)
                                    102 ;	-----------------------------------------
                                    103 ;	 function memccpy
                                    104 ;	-----------------------------------------
      000000                        105 _memccpy:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 E5 81            [12]  115 	mov	a,sp
      000004 F5*00            [12]  116 	mov	_bp,a
      000006 24 08            [12]  117 	add	a,#0x08
      000008 F5 81            [12]  118 	mov	sp,a
      00000A AD 82            [24]  119 	mov	r5,dpl
      00000C AE 83            [24]  120 	mov	r6,dph
      00000E AF F0            [24]  121 	mov	r7,b
                                    122 ;	memccpy.c:33: char *d = dst;
                                    123 ;	memccpy.c:34: const char *s = src;
      000010 E5*00            [12]  124 	mov	a,_bp
      000012 24 FB            [12]  125 	add	a,#0xfb
      000014 F8               [12]  126 	mov	r0,a
      000015 E5*00            [12]  127 	mov	a,_bp
      000017 24 03            [12]  128 	add	a,#0x03
      000019 F9               [12]  129 	mov	r1,a
      00001A E6               [12]  130 	mov	a,@r0
      00001B F7               [12]  131 	mov	@r1,a
      00001C 08               [12]  132 	inc	r0
      00001D E6               [12]  133 	mov	a,@r0
      00001E 09               [12]  134 	inc	r1
      00001F F7               [12]  135 	mov	@r1,a
      000020 08               [12]  136 	inc	r0
      000021 E6               [12]  137 	mov	a,@r0
      000022 09               [12]  138 	inc	r1
      000023 F7               [12]  139 	mov	@r1,a
                                    140 ;	memccpy.c:36: while (n--)
      000024 E5*00            [12]  141 	mov	a,_bp
      000026 24 F7            [12]  142 	add	a,#0xf7
      000028 F8               [12]  143 	mov	r0,a
      000029 A9*00            [24]  144 	mov	r1,_bp
      00002B 09               [12]  145 	inc	r1
      00002C E6               [12]  146 	mov	a,@r0
      00002D F7               [12]  147 	mov	@r1,a
      00002E 08               [12]  148 	inc	r0
      00002F E6               [12]  149 	mov	a,@r0
      000030 09               [12]  150 	inc	r1
      000031 F7               [12]  151 	mov	@r1,a
      000032                        152 00103$:
      000032 A8*00            [24]  153 	mov	r0,_bp
      000034 08               [12]  154 	inc	r0
      000035 86 03            [24]  155 	mov	ar3,@r0
      000037 08               [12]  156 	inc	r0
      000038 86 04            [24]  157 	mov	ar4,@r0
      00003A A8*00            [24]  158 	mov	r0,_bp
      00003C 08               [12]  159 	inc	r0
      00003D 16               [12]  160 	dec	@r0
      00003E B6 FF 02         [24]  161 	cjne	@r0,#0xff,00123$
      000041 08               [12]  162 	inc	r0
      000042 16               [12]  163 	dec	@r0
      000043                        164 00123$:
      000043 EB               [12]  165 	mov	a,r3
      000044 4C               [12]  166 	orl	a,r4
      000045 60 55            [24]  167 	jz	00105$
                                    168 ;	memccpy.c:37: if ((*d++ = *s++) == (unsigned char)c)
      000047 E5*00            [12]  169 	mov	a,_bp
      000049 24 03            [12]  170 	add	a,#0x03
      00004B F8               [12]  171 	mov	r0,a
      00004C 86 82            [24]  172 	mov	dpl,@r0
      00004E 08               [12]  173 	inc	r0
      00004F 86 83            [24]  174 	mov	dph,@r0
      000051 08               [12]  175 	inc	r0
      000052 86 F0            [24]  176 	mov	b,@r0
      000054 12r00r00         [24]  177 	lcall	__gptrget
      000057 FC               [12]  178 	mov	r4,a
      000058 A3               [24]  179 	inc	dptr
      000059 18               [12]  180 	dec	r0
      00005A 18               [12]  181 	dec	r0
      00005B A6 82            [24]  182 	mov	@r0,dpl
      00005D 08               [12]  183 	inc	r0
      00005E A6 83            [24]  184 	mov	@r0,dph
      000060 8D 82            [24]  185 	mov	dpl,r5
      000062 8E 83            [24]  186 	mov	dph,r6
      000064 8F F0            [24]  187 	mov	b,r7
      000066 EC               [12]  188 	mov	a,r4
      000067 12r00r00         [24]  189 	lcall	__gptrput
      00006A A3               [24]  190 	inc	dptr
      00006B AD 82            [24]  191 	mov	r5,dpl
      00006D AE 83            [24]  192 	mov	r6,dph
      00006F E5*00            [12]  193 	mov	a,_bp
      000071 24 06            [12]  194 	add	a,#0x06
      000073 F8               [12]  195 	mov	r0,a
      000074 A6 05            [24]  196 	mov	@r0,ar5
      000076 08               [12]  197 	inc	r0
      000077 A6 06            [24]  198 	mov	@r0,ar6
      000079 08               [12]  199 	inc	r0
      00007A A6 07            [24]  200 	mov	@r0,ar7
      00007C E5*00            [12]  201 	mov	a,_bp
      00007E 24 F9            [12]  202 	add	a,#0xf9
      000080 F8               [12]  203 	mov	r0,a
      000081 86 03            [24]  204 	mov	ar3,@r0
      000083 EC               [12]  205 	mov	a,r4
      000084 B5 03 AB         [24]  206 	cjne	a,ar3,00103$
                                    207 ;	memccpy.c:38: return (d);
      000087 E5*00            [12]  208 	mov	a,_bp
      000089 24 06            [12]  209 	add	a,#0x06
      00008B F8               [12]  210 	mov	r0,a
      00008C 86 05            [24]  211 	mov	ar5,@r0
      00008E 08               [12]  212 	inc	r0
      00008F 86 06            [24]  213 	mov	ar6,@r0
      000091 08               [12]  214 	inc	r0
      000092 86 07            [24]  215 	mov	ar7,@r0
      000094 8D 82            [24]  216 	mov	dpl,r5
      000096 8E 83            [24]  217 	mov	dph,r6
      000098 8F F0            [24]  218 	mov	b,r7
      00009A 80 06            [24]  219 	sjmp	00106$
      00009C                        220 00105$:
                                    221 ;	memccpy.c:40: return (0);
      00009C 90 00 00         [24]  222 	mov	dptr,#0x0000
      00009F 75 F0 00         [24]  223 	mov	b,#0x00
      0000A2                        224 00106$:
                                    225 ;	memccpy.c:41: }
      0000A2 85*00 81         [24]  226 	mov	sp,_bp
      0000A5 D0*00            [24]  227 	pop	_bp
      0000A7 22               [24]  228 	ret
                                    229 	.area CSEG    (CODE)
                                    230 	.area CONST   (CODE)
                                    231 	.area XINIT   (CODE)
                                    232 	.area CABS    (ABS,CODE)
