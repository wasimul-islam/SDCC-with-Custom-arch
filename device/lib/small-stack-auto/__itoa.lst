                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __itoa
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___uitoa
                                     12 	.globl ___itoa
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '__uitoa'
                                     92 ;------------------------------------------------------------
                                     93 ;string                    Allocated to stack - _bp -5
                                     94 ;radix                     Allocated to stack - _bp -6
                                     95 ;value                     Allocated to stack - _bp +1
                                     96 ;index                     Allocated to registers 
                                     97 ;i                         Allocated to stack - _bp +8
                                     98 ;tmp                       Allocated to registers r3 
                                     99 ;sloc0                     Allocated to stack - _bp +3
                                    100 ;sloc1                     Allocated to stack - _bp +5
                                    101 ;------------------------------------------------------------
                                    102 ;	__itoa.c:42: void __uitoa(unsigned int value, char* string, unsigned char radix)
                                    103 ;	-----------------------------------------
                                    104 ;	 function __uitoa
                                    105 ;	-----------------------------------------
      000000                        106 ___uitoa:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
      000005 C0 82            [24]  117 	push	dpl
      000007 C0 83            [24]  118 	push	dph
      000009 E5 81            [12]  119 	mov	a,sp
      00000B 24 06            [12]  120 	add	a,#0x06
      00000D F5 81            [12]  121 	mov	sp,a
                                    122 ;	__itoa.c:47: do {
      00000F 7E 00            [12]  123 	mov	r6,#0x00
      000011                        124 00103$:
                                    125 ;	__itoa.c:48: string[index] = '0' + (value % radix);
      000011 EE               [12]  126 	mov	a,r6
      000012 FB               [12]  127 	mov	r3,a
      000013 33               [12]  128 	rlc	a
      000014 95 E0            [12]  129 	subb	a,acc
      000016 FC               [12]  130 	mov	r4,a
      000017 E5*00            [12]  131 	mov	a,_bp
      000019 24 FB            [12]  132 	add	a,#0xfb
      00001B F8               [12]  133 	mov	r0,a
      00001C EB               [12]  134 	mov	a,r3
      00001D 26               [12]  135 	add	a,@r0
      00001E FB               [12]  136 	mov	r3,a
      00001F EC               [12]  137 	mov	a,r4
      000020 08               [12]  138 	inc	r0
      000021 36               [12]  139 	addc	a,@r0
      000022 FA               [12]  140 	mov	r2,a
      000023 08               [12]  141 	inc	r0
      000024 86 04            [24]  142 	mov	ar4,@r0
      000026 E5*00            [12]  143 	mov	a,_bp
      000028 24 FA            [12]  144 	add	a,#0xfa
      00002A F8               [12]  145 	mov	r0,a
      00002B E5*00            [12]  146 	mov	a,_bp
      00002D 24 03            [12]  147 	add	a,#0x03
      00002F F9               [12]  148 	mov	r1,a
      000030 E6               [12]  149 	mov	a,@r0
      000031 F7               [12]  150 	mov	@r1,a
      000032 09               [12]  151 	inc	r1
      000033 77 00            [12]  152 	mov	@r1,#0x00
      000035 C0 06            [24]  153 	push	ar6
      000037 C0 04            [24]  154 	push	ar4
      000039 C0 03            [24]  155 	push	ar3
      00003B C0 02            [24]  156 	push	ar2
      00003D E5*00            [12]  157 	mov	a,_bp
      00003F 24 03            [12]  158 	add	a,#0x03
      000041 F8               [12]  159 	mov	r0,a
      000042 E6               [12]  160 	mov	a,@r0
      000043 C0 E0            [24]  161 	push	acc
      000045 08               [12]  162 	inc	r0
      000046 E6               [12]  163 	mov	a,@r0
      000047 C0 E0            [24]  164 	push	acc
      000049 A8*00            [24]  165 	mov	r0,_bp
      00004B 08               [12]  166 	inc	r0
      00004C 86 82            [24]  167 	mov	dpl,@r0
      00004E 08               [12]  168 	inc	r0
      00004F 86 83            [24]  169 	mov	dph,@r0
      000051 12r00r00         [24]  170 	lcall	__moduint
      000054 AD 82            [24]  171 	mov	r5,dpl
      000056 15 81            [12]  172 	dec	sp
      000058 15 81            [12]  173 	dec	sp
      00005A D0 02            [24]  174 	pop	ar2
      00005C D0 03            [24]  175 	pop	ar3
      00005E D0 04            [24]  176 	pop	ar4
      000060 D0 06            [24]  177 	pop	ar6
      000062 74 30            [12]  178 	mov	a,#0x30
      000064 2D               [12]  179 	add	a,r5
      000065 8B 82            [24]  180 	mov	dpl,r3
      000067 8A 83            [24]  181 	mov	dph,r2
      000069 8C F0            [24]  182 	mov	b,r4
      00006B 12r00r00         [24]  183 	lcall	__gptrput
                                    184 ;	__itoa.c:49: if (string[index] > '9')
      00006E 8B 82            [24]  185 	mov	dpl,r3
      000070 8A 83            [24]  186 	mov	dph,r2
      000072 8C F0            [24]  187 	mov	b,r4
      000074 12r00r00         [24]  188 	lcall	__gptrget
      000077 24 C6            [12]  189 	add	a,#0xff - 0x39
      000079 50 15            [24]  190 	jnc	00102$
                                    191 ;	__itoa.c:50: string[index] += 'A' - '9' - 1;
      00007B 8B 82            [24]  192 	mov	dpl,r3
      00007D 8A 83            [24]  193 	mov	dph,r2
      00007F 8C F0            [24]  194 	mov	b,r4
      000081 12r00r00         [24]  195 	lcall	__gptrget
      000084 24 07            [12]  196 	add	a,#0x07
      000086 FF               [12]  197 	mov	r7,a
      000087 8B 82            [24]  198 	mov	dpl,r3
      000089 8A 83            [24]  199 	mov	dph,r2
      00008B 8C F0            [24]  200 	mov	b,r4
      00008D 12r00r00         [24]  201 	lcall	__gptrput
      000090                        202 00102$:
                                    203 ;	__itoa.c:51: value /= radix;
      000090 C0 06            [24]  204 	push	ar6
      000092 E5*00            [12]  205 	mov	a,_bp
      000094 24 03            [12]  206 	add	a,#0x03
      000096 F8               [12]  207 	mov	r0,a
      000097 E6               [12]  208 	mov	a,@r0
      000098 C0 E0            [24]  209 	push	acc
      00009A 08               [12]  210 	inc	r0
      00009B E6               [12]  211 	mov	a,@r0
      00009C C0 E0            [24]  212 	push	acc
      00009E A8*00            [24]  213 	mov	r0,_bp
      0000A0 08               [12]  214 	inc	r0
      0000A1 86 82            [24]  215 	mov	dpl,@r0
      0000A3 08               [12]  216 	inc	r0
      0000A4 86 83            [24]  217 	mov	dph,@r0
      0000A6 12r00r00         [24]  218 	lcall	__divuint
      0000A9 A8*00            [24]  219 	mov	r0,_bp
      0000AB 08               [12]  220 	inc	r0
      0000AC A6 82            [24]  221 	mov	@r0,dpl
      0000AE 08               [12]  222 	inc	r0
      0000AF A6 83            [24]  223 	mov	@r0,dph
      0000B1 15 81            [12]  224 	dec	sp
      0000B3 15 81            [12]  225 	dec	sp
      0000B5 D0 06            [24]  226 	pop	ar6
                                    227 ;	__itoa.c:52: ++index;
      0000B7 0E               [12]  228 	inc	r6
                                    229 ;	__itoa.c:53: } while (value != 0);
      0000B8 A8*00            [24]  230 	mov	r0,_bp
      0000BA 08               [12]  231 	inc	r0
      0000BB E6               [12]  232 	mov	a,@r0
      0000BC 08               [12]  233 	inc	r0
      0000BD 46               [12]  234 	orl	a,@r0
      0000BE 60 03            [24]  235 	jz	00134$
      0000C0 02r00r11         [24]  236 	ljmp	00103$
      0000C3                        237 00134$:
                                    238 ;	__itoa.c:56: string[index--] = '\0';
      0000C3 EE               [12]  239 	mov	a,r6
      0000C4 14               [12]  240 	dec	a
      0000C5 FF               [12]  241 	mov	r7,a
      0000C6 EE               [12]  242 	mov	a,r6
      0000C7 FD               [12]  243 	mov	r5,a
      0000C8 33               [12]  244 	rlc	a
      0000C9 95 E0            [12]  245 	subb	a,acc
      0000CB FE               [12]  246 	mov	r6,a
      0000CC E5*00            [12]  247 	mov	a,_bp
      0000CE 24 FB            [12]  248 	add	a,#0xfb
      0000D0 F8               [12]  249 	mov	r0,a
      0000D1 ED               [12]  250 	mov	a,r5
      0000D2 26               [12]  251 	add	a,@r0
      0000D3 FD               [12]  252 	mov	r5,a
      0000D4 EE               [12]  253 	mov	a,r6
      0000D5 08               [12]  254 	inc	r0
      0000D6 36               [12]  255 	addc	a,@r0
      0000D7 FE               [12]  256 	mov	r6,a
      0000D8 08               [12]  257 	inc	r0
      0000D9 86 04            [24]  258 	mov	ar4,@r0
      0000DB 8D 82            [24]  259 	mov	dpl,r5
      0000DD 8E 83            [24]  260 	mov	dph,r6
      0000DF 8C F0            [24]  261 	mov	b,r4
      0000E1 E4               [12]  262 	clr	a
      0000E2 12r00r00         [24]  263 	lcall	__gptrput
                                    264 ;	__itoa.c:59: while (index > i) {
      0000E5 E5*00            [12]  265 	mov	a,_bp
      0000E7 24 08            [12]  266 	add	a,#0x08
      0000E9 F8               [12]  267 	mov	r0,a
      0000EA 76 00            [12]  268 	mov	@r0,#0x00
      0000EC                        269 00106$:
      0000EC E5*00            [12]  270 	mov	a,_bp
      0000EE 24 08            [12]  271 	add	a,#0x08
      0000F0 F8               [12]  272 	mov	r0,a
      0000F1 C3               [12]  273 	clr	c
      0000F2 E6               [12]  274 	mov	a,@r0
      0000F3 64 80            [12]  275 	xrl	a,#0x80
      0000F5 8F F0            [24]  276 	mov	b,r7
      0000F7 63 F0 80         [24]  277 	xrl	b,#0x80
      0000FA 95 F0            [12]  278 	subb	a,b
      0000FC 50 76            [24]  279 	jnc	00109$
                                    280 ;	__itoa.c:60: char tmp = string[i];
      0000FE E5*00            [12]  281 	mov	a,_bp
      000100 24 08            [12]  282 	add	a,#0x08
      000102 F8               [12]  283 	mov	r0,a
      000103 E6               [12]  284 	mov	a,@r0
      000104 FC               [12]  285 	mov	r4,a
      000105 33               [12]  286 	rlc	a
      000106 95 E0            [12]  287 	subb	a,acc
      000108 FD               [12]  288 	mov	r5,a
      000109 E5*00            [12]  289 	mov	a,_bp
      00010B 24 FB            [12]  290 	add	a,#0xfb
      00010D F8               [12]  291 	mov	r0,a
      00010E E5*00            [12]  292 	mov	a,_bp
      000110 24 05            [12]  293 	add	a,#0x05
      000112 F9               [12]  294 	mov	r1,a
      000113 EC               [12]  295 	mov	a,r4
      000114 26               [12]  296 	add	a,@r0
      000115 F7               [12]  297 	mov	@r1,a
      000116 ED               [12]  298 	mov	a,r5
      000117 08               [12]  299 	inc	r0
      000118 36               [12]  300 	addc	a,@r0
      000119 09               [12]  301 	inc	r1
      00011A F7               [12]  302 	mov	@r1,a
      00011B 08               [12]  303 	inc	r0
      00011C E6               [12]  304 	mov	a,@r0
      00011D 09               [12]  305 	inc	r1
      00011E F7               [12]  306 	mov	@r1,a
      00011F E5*00            [12]  307 	mov	a,_bp
      000121 24 05            [12]  308 	add	a,#0x05
      000123 F8               [12]  309 	mov	r0,a
      000124 86 82            [24]  310 	mov	dpl,@r0
      000126 08               [12]  311 	inc	r0
      000127 86 83            [24]  312 	mov	dph,@r0
      000129 08               [12]  313 	inc	r0
      00012A 86 F0            [24]  314 	mov	b,@r0
      00012C 12r00r00         [24]  315 	lcall	__gptrget
      00012F FB               [12]  316 	mov	r3,a
                                    317 ;	__itoa.c:61: string[i] = string[index];
      000130 EF               [12]  318 	mov	a,r7
      000131 FA               [12]  319 	mov	r2,a
      000132 33               [12]  320 	rlc	a
      000133 95 E0            [12]  321 	subb	a,acc
      000135 FE               [12]  322 	mov	r6,a
      000136 E5*00            [12]  323 	mov	a,_bp
      000138 24 FB            [12]  324 	add	a,#0xfb
      00013A F8               [12]  325 	mov	r0,a
      00013B EA               [12]  326 	mov	a,r2
      00013C 26               [12]  327 	add	a,@r0
      00013D FA               [12]  328 	mov	r2,a
      00013E EE               [12]  329 	mov	a,r6
      00013F 08               [12]  330 	inc	r0
      000140 36               [12]  331 	addc	a,@r0
      000141 FD               [12]  332 	mov	r5,a
      000142 08               [12]  333 	inc	r0
      000143 86 06            [24]  334 	mov	ar6,@r0
      000145 8A 82            [24]  335 	mov	dpl,r2
      000147 8D 83            [24]  336 	mov	dph,r5
      000149 8E F0            [24]  337 	mov	b,r6
      00014B 12r00r00         [24]  338 	lcall	__gptrget
      00014E FC               [12]  339 	mov	r4,a
      00014F E5*00            [12]  340 	mov	a,_bp
      000151 24 05            [12]  341 	add	a,#0x05
      000153 F8               [12]  342 	mov	r0,a
      000154 86 82            [24]  343 	mov	dpl,@r0
      000156 08               [12]  344 	inc	r0
      000157 86 83            [24]  345 	mov	dph,@r0
      000159 08               [12]  346 	inc	r0
      00015A 86 F0            [24]  347 	mov	b,@r0
      00015C EC               [12]  348 	mov	a,r4
      00015D 12r00r00         [24]  349 	lcall	__gptrput
                                    350 ;	__itoa.c:62: string[index] = tmp;
      000160 8A 82            [24]  351 	mov	dpl,r2
      000162 8D 83            [24]  352 	mov	dph,r5
      000164 8E F0            [24]  353 	mov	b,r6
      000166 EB               [12]  354 	mov	a,r3
      000167 12r00r00         [24]  355 	lcall	__gptrput
                                    356 ;	__itoa.c:63: ++i;
      00016A E5*00            [12]  357 	mov	a,_bp
      00016C 24 08            [12]  358 	add	a,#0x08
      00016E F8               [12]  359 	mov	r0,a
      00016F 06               [12]  360 	inc	@r0
                                    361 ;	__itoa.c:64: --index;
      000170 1F               [12]  362 	dec	r7
      000171 02r00rEC         [24]  363 	ljmp	00106$
      000174                        364 00109$:
                                    365 ;	__itoa.c:66: }
      000174 85*00 81         [24]  366 	mov	sp,_bp
      000177 D0*00            [24]  367 	pop	_bp
      000179 22               [24]  368 	ret
                                    369 ;------------------------------------------------------------
                                    370 ;Allocation info for local variables in function '__itoa'
                                    371 ;------------------------------------------------------------
                                    372 ;string                    Allocated to stack - _bp -5
                                    373 ;radix                     Allocated to stack - _bp -6
                                    374 ;value                     Allocated to registers r6 r7 
                                    375 ;------------------------------------------------------------
                                    376 ;	__itoa.c:68: void __itoa(int value, char* string, unsigned char radix)
                                    377 ;	-----------------------------------------
                                    378 ;	 function __itoa
                                    379 ;	-----------------------------------------
      00017A                        380 ___itoa:
      00017A C0*00            [24]  381 	push	_bp
      00017C 85 81*00         [24]  382 	mov	_bp,sp
      00017F AE 82            [24]  383 	mov	r6,dpl
                                    384 ;	__itoa.c:70: if (value < 0 && radix == 10) {
      000181 E5 83            [12]  385 	mov	a,dph
      000183 FF               [12]  386 	mov	r7,a
      000184 30 E7 37         [24]  387 	jnb	acc.7,00102$
      000187 E5*00            [12]  388 	mov	a,_bp
      000189 24 FA            [12]  389 	add	a,#0xfa
      00018B F8               [12]  390 	mov	r0,a
      00018C B6 0A 2F         [24]  391 	cjne	@r0,#0x0a,00102$
                                    392 ;	__itoa.c:71: *string++ = '-';
      00018F E5*00            [12]  393 	mov	a,_bp
      000191 24 FB            [12]  394 	add	a,#0xfb
      000193 F8               [12]  395 	mov	r0,a
      000194 86 03            [24]  396 	mov	ar3,@r0
      000196 08               [12]  397 	inc	r0
      000197 86 04            [24]  398 	mov	ar4,@r0
      000199 08               [12]  399 	inc	r0
      00019A 86 05            [24]  400 	mov	ar5,@r0
      00019C 8B 82            [24]  401 	mov	dpl,r3
      00019E 8C 83            [24]  402 	mov	dph,r4
      0001A0 8D F0            [24]  403 	mov	b,r5
      0001A2 74 2D            [12]  404 	mov	a,#0x2d
      0001A4 12r00r00         [24]  405 	lcall	__gptrput
      0001A7 E5*00            [12]  406 	mov	a,_bp
      0001A9 24 FB            [12]  407 	add	a,#0xfb
      0001AB F8               [12]  408 	mov	r0,a
      0001AC 74 01            [12]  409 	mov	a,#0x01
      0001AE 2B               [12]  410 	add	a,r3
      0001AF F6               [12]  411 	mov	@r0,a
      0001B0 E4               [12]  412 	clr	a
      0001B1 3C               [12]  413 	addc	a,r4
      0001B2 08               [12]  414 	inc	r0
      0001B3 F6               [12]  415 	mov	@r0,a
      0001B4 08               [12]  416 	inc	r0
      0001B5 A6 05            [24]  417 	mov	@r0,ar5
                                    418 ;	__itoa.c:72: value = -value;
      0001B7 C3               [12]  419 	clr	c
      0001B8 E4               [12]  420 	clr	a
      0001B9 9E               [12]  421 	subb	a,r6
      0001BA FE               [12]  422 	mov	r6,a
      0001BB E4               [12]  423 	clr	a
      0001BC 9F               [12]  424 	subb	a,r7
      0001BD FF               [12]  425 	mov	r7,a
      0001BE                        426 00102$:
                                    427 ;	__itoa.c:74: __uitoa(value, string, radix);
      0001BE E5*00            [12]  428 	mov	a,_bp
      0001C0 24 FA            [12]  429 	add	a,#0xfa
      0001C2 F8               [12]  430 	mov	r0,a
      0001C3 E6               [12]  431 	mov	a,@r0
      0001C4 C0 E0            [24]  432 	push	acc
      0001C6 E5*00            [12]  433 	mov	a,_bp
      0001C8 24 FB            [12]  434 	add	a,#0xfb
      0001CA F8               [12]  435 	mov	r0,a
      0001CB E6               [12]  436 	mov	a,@r0
      0001CC C0 E0            [24]  437 	push	acc
      0001CE 08               [12]  438 	inc	r0
      0001CF E6               [12]  439 	mov	a,@r0
      0001D0 C0 E0            [24]  440 	push	acc
      0001D2 08               [12]  441 	inc	r0
      0001D3 E6               [12]  442 	mov	a,@r0
      0001D4 C0 E0            [24]  443 	push	acc
      0001D6 8E 82            [24]  444 	mov	dpl,r6
      0001D8 8F 83            [24]  445 	mov	dph,r7
      0001DA 12r00r00         [24]  446 	lcall	___uitoa
      0001DD E5 81            [12]  447 	mov	a,sp
      0001DF 24 FC            [12]  448 	add	a,#0xfc
      0001E1 F5 81            [12]  449 	mov	sp,a
                                    450 ;	__itoa.c:75: }
      0001E3 D0*00            [24]  451 	pop	_bp
      0001E5 22               [24]  452 	ret
                                    453 	.area CSEG    (CODE)
                                    454 	.area CONST   (CODE)
                                    455 	.area XINIT   (CODE)
                                    456 	.area CABS    (ABS,CODE)
