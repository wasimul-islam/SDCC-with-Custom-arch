                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbrtoc16
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbrtowc
                                     12 	.globl _mbrtoc16
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
      000000                         32 _mbrtoc16_sps_65536_16:
      000000                         33 	.ds 3
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; uninitialized external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; initialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'mbrtoc16'
                                     94 ;------------------------------------------------------------
                                     95 ;s                         Allocated to stack - _bp -5
                                     96 ;n                         Allocated to stack - _bp -7
                                     97 ;ps                        Allocated to stack - _bp -10
                                     98 ;pc16                      Allocated to stack - _bp +1
                                     99 ;codepoint                 Allocated to stack - _bp +7
                                    100 ;ret                       Allocated to stack - _bp +11
                                    101 ;low_surrogate             Allocated to registers r4 r6 
                                    102 ;sloc0                     Allocated to stack - _bp +4
                                    103 ;sps                       Allocated with name '_mbrtoc16_sps_65536_16'
                                    104 ;------------------------------------------------------------
                                    105 ;	mbrtoc16.c:34: size_t mbrtoc16(char16_t *restrict pc16, const char *restrict s, size_t n, mbstate_t *restrict ps)
                                    106 ;	-----------------------------------------
                                    107 ;	 function mbrtoc16
                                    108 ;	-----------------------------------------
      000000                        109 _mbrtoc16:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 C0*00            [24]  118 	push	_bp
      000002 85 81*00         [24]  119 	mov	_bp,sp
      000005 C0 82            [24]  120 	push	dpl
      000007 C0 83            [24]  121 	push	dph
      000009 C0 F0            [24]  122 	push	b
      00000B E5 81            [12]  123 	mov	a,sp
      00000D 24 09            [12]  124 	add	a,#0x09
      00000F F5 81            [12]  125 	mov	sp,a
                                    126 ;	mbrtoc16.c:41: if(!s)
      000011 E5*00            [12]  127 	mov	a,_bp
      000013 24 FB            [12]  128 	add	a,#0xfb
      000015 F8               [12]  129 	mov	r0,a
      000016 E6               [12]  130 	mov	a,@r0
      000017 08               [12]  131 	inc	r0
      000018 46               [12]  132 	orl	a,@r0
      000019 70 35            [24]  133 	jnz	00102$
                                    134 ;	mbrtoc16.c:42: return(mbrtoc16(0, "", 1, ps));
      00001B E5*00            [12]  135 	mov	a,_bp
      00001D 24 F6            [12]  136 	add	a,#0xf6
      00001F F8               [12]  137 	mov	r0,a
      000020 E6               [12]  138 	mov	a,@r0
      000021 C0 E0            [24]  139 	push	acc
      000023 08               [12]  140 	inc	r0
      000024 E6               [12]  141 	mov	a,@r0
      000025 C0 E0            [24]  142 	push	acc
      000027 08               [12]  143 	inc	r0
      000028 E6               [12]  144 	mov	a,@r0
      000029 C0 E0            [24]  145 	push	acc
      00002B 74 01            [12]  146 	mov	a,#0x01
      00002D C0 E0            [24]  147 	push	acc
      00002F E4               [12]  148 	clr	a
      000030 C0 E0            [24]  149 	push	acc
      000032 74r00            [12]  150 	mov	a,#___str_0
      000034 C0 E0            [24]  151 	push	acc
      000036 74s00            [12]  152 	mov	a,#(___str_0 >> 8)
      000038 C0 E0            [24]  153 	push	acc
      00003A 74 80            [12]  154 	mov	a,#0x80
      00003C C0 E0            [24]  155 	push	acc
      00003E 90 00 00         [24]  156 	mov	dptr,#0x0000
      000041 75 F0 00         [24]  157 	mov	b,#0x00
      000044 12r00r00         [24]  158 	lcall	_mbrtoc16
      000047 E5 81            [12]  159 	mov	a,sp
      000049 24 F8            [12]  160 	add	a,#0xf8
      00004B F5 81            [12]  161 	mov	sp,a
      00004D 02r02rAC         [24]  162 	ljmp	00119$
      000050                        163 00102$:
                                    164 ;	mbrtoc16.c:44: if(!ps)
      000050 E5*00            [12]  165 	mov	a,_bp
      000052 24 F6            [12]  166 	add	a,#0xf6
      000054 F8               [12]  167 	mov	r0,a
      000055 E6               [12]  168 	mov	a,@r0
      000056 08               [12]  169 	inc	r0
      000057 46               [12]  170 	orl	a,@r0
      000058 70 0D            [24]  171 	jnz	00104$
                                    172 ;	mbrtoc16.c:45: ps = &sps;
      00005A E5*00            [12]  173 	mov	a,_bp
      00005C 24 F6            [12]  174 	add	a,#0xf6
      00005E F8               [12]  175 	mov	r0,a
      00005F 76r00            [12]  176 	mov	@r0,#_mbrtoc16_sps_65536_16
      000061 08               [12]  177 	inc	r0
      000062 76 00            [12]  178 	mov	@r0,#0x00
      000064 08               [12]  179 	inc	r0
      000065 76 40            [12]  180 	mov	@r0,#0x40
      000067                        181 00104$:
                                    182 ;	mbrtoc16.c:47: if(!ps->c[0] && (ps->c[1] || ps->c[2]))
      000067 E5*00            [12]  183 	mov	a,_bp
      000069 24 F6            [12]  184 	add	a,#0xf6
      00006B F8               [12]  185 	mov	r0,a
      00006C 86 02            [24]  186 	mov	ar2,@r0
      00006E 08               [12]  187 	inc	r0
      00006F 86 03            [24]  188 	mov	ar3,@r0
      000071 08               [12]  189 	inc	r0
      000072 86 04            [24]  190 	mov	ar4,@r0
      000074 8A 82            [24]  191 	mov	dpl,r2
      000076 8B 83            [24]  192 	mov	dph,r3
      000078 8C F0            [24]  193 	mov	b,r4
      00007A 12r00r00         [24]  194 	lcall	__gptrget
      00007D 60 03            [24]  195 	jz	00159$
      00007F 02r01r37         [24]  196 	ljmp	00108$
      000082                        197 00159$:
      000082 74 01            [12]  198 	mov	a,#0x01
      000084 2A               [12]  199 	add	a,r2
      000085 FD               [12]  200 	mov	r5,a
      000086 E4               [12]  201 	clr	a
      000087 3B               [12]  202 	addc	a,r3
      000088 FE               [12]  203 	mov	r6,a
      000089 8C 07            [24]  204 	mov	ar7,r4
      00008B 8D 82            [24]  205 	mov	dpl,r5
      00008D 8E 83            [24]  206 	mov	dph,r6
      00008F 8F F0            [24]  207 	mov	b,r7
      000091 12r00r00         [24]  208 	lcall	__gptrget
      000094 70 15            [24]  209 	jnz	00107$
      000096 74 02            [12]  210 	mov	a,#0x02
      000098 2A               [12]  211 	add	a,r2
      000099 FA               [12]  212 	mov	r2,a
      00009A E4               [12]  213 	clr	a
      00009B 3B               [12]  214 	addc	a,r3
      00009C FB               [12]  215 	mov	r3,a
      00009D 8A 82            [24]  216 	mov	dpl,r2
      00009F 8B 83            [24]  217 	mov	dph,r3
      0000A1 8C F0            [24]  218 	mov	b,r4
      0000A3 12r00r00         [24]  219 	lcall	__gptrget
      0000A6 70 03            [24]  220 	jnz	00161$
      0000A8 02r01r37         [24]  221 	ljmp	00108$
      0000AB                        222 00161$:
      0000AB                        223 00107$:
                                    224 ;	mbrtoc16.c:49: if(pc16)
      0000AB A8*00            [24]  225 	mov	r0,_bp
      0000AD 08               [12]  226 	inc	r0
      0000AE E6               [12]  227 	mov	a,@r0
      0000AF 08               [12]  228 	inc	r0
      0000B0 46               [12]  229 	orl	a,@r0
      0000B1 60 4E            [24]  230 	jz	00106$
                                    231 ;	mbrtoc16.c:50: *pc16 = ps->c[1] + (ps->c[2] << 8);
      0000B3 E5*00            [12]  232 	mov	a,_bp
      0000B5 24 F6            [12]  233 	add	a,#0xf6
      0000B7 F8               [12]  234 	mov	r0,a
      0000B8 86 02            [24]  235 	mov	ar2,@r0
      0000BA 08               [12]  236 	inc	r0
      0000BB 86 03            [24]  237 	mov	ar3,@r0
      0000BD 08               [12]  238 	inc	r0
      0000BE 86 04            [24]  239 	mov	ar4,@r0
      0000C0 74 01            [12]  240 	mov	a,#0x01
      0000C2 2A               [12]  241 	add	a,r2
      0000C3 FD               [12]  242 	mov	r5,a
      0000C4 E4               [12]  243 	clr	a
      0000C5 3B               [12]  244 	addc	a,r3
      0000C6 FE               [12]  245 	mov	r6,a
      0000C7 8C 07            [24]  246 	mov	ar7,r4
      0000C9 8D 82            [24]  247 	mov	dpl,r5
      0000CB 8E 83            [24]  248 	mov	dph,r6
      0000CD 8F F0            [24]  249 	mov	b,r7
      0000CF 12r00r00         [24]  250 	lcall	__gptrget
      0000D2 FD               [12]  251 	mov	r5,a
      0000D3 7F 00            [12]  252 	mov	r7,#0x00
      0000D5 74 02            [12]  253 	mov	a,#0x02
      0000D7 2A               [12]  254 	add	a,r2
      0000D8 FA               [12]  255 	mov	r2,a
      0000D9 E4               [12]  256 	clr	a
      0000DA 3B               [12]  257 	addc	a,r3
      0000DB FB               [12]  258 	mov	r3,a
      0000DC 8A 82            [24]  259 	mov	dpl,r2
      0000DE 8B 83            [24]  260 	mov	dph,r3
      0000E0 8C F0            [24]  261 	mov	b,r4
      0000E2 12r00r00         [24]  262 	lcall	__gptrget
      0000E5 FE               [12]  263 	mov	r6,a
      0000E6 E4               [12]  264 	clr	a
      0000E7 FA               [12]  265 	mov	r2,a
      0000E8 2D               [12]  266 	add	a,r5
      0000E9 FD               [12]  267 	mov	r5,a
      0000EA EE               [12]  268 	mov	a,r6
      0000EB 3F               [12]  269 	addc	a,r7
      0000EC FF               [12]  270 	mov	r7,a
      0000ED A8*00            [24]  271 	mov	r0,_bp
      0000EF 08               [12]  272 	inc	r0
      0000F0 86 82            [24]  273 	mov	dpl,@r0
      0000F2 08               [12]  274 	inc	r0
      0000F3 86 83            [24]  275 	mov	dph,@r0
      0000F5 08               [12]  276 	inc	r0
      0000F6 86 F0            [24]  277 	mov	b,@r0
      0000F8 ED               [12]  278 	mov	a,r5
      0000F9 12r00r00         [24]  279 	lcall	__gptrput
      0000FC A3               [24]  280 	inc	dptr
      0000FD EF               [12]  281 	mov	a,r7
      0000FE 12r00r00         [24]  282 	lcall	__gptrput
      000101                        283 00106$:
                                    284 ;	mbrtoc16.c:51: ps->c[1] = ps->c[2] = 0;
      000101 E5*00            [12]  285 	mov	a,_bp
      000103 24 F6            [12]  286 	add	a,#0xf6
      000105 F8               [12]  287 	mov	r0,a
      000106 86 05            [24]  288 	mov	ar5,@r0
      000108 08               [12]  289 	inc	r0
      000109 86 06            [24]  290 	mov	ar6,@r0
      00010B 08               [12]  291 	inc	r0
      00010C 86 07            [24]  292 	mov	ar7,@r0
      00010E 74 01            [12]  293 	mov	a,#0x01
      000110 2D               [12]  294 	add	a,r5
      000111 FA               [12]  295 	mov	r2,a
      000112 E4               [12]  296 	clr	a
      000113 3E               [12]  297 	addc	a,r6
      000114 FB               [12]  298 	mov	r3,a
      000115 8F 04            [24]  299 	mov	ar4,r7
      000117 74 02            [12]  300 	mov	a,#0x02
      000119 2D               [12]  301 	add	a,r5
      00011A FD               [12]  302 	mov	r5,a
      00011B E4               [12]  303 	clr	a
      00011C 3E               [12]  304 	addc	a,r6
      00011D FE               [12]  305 	mov	r6,a
      00011E 8D 82            [24]  306 	mov	dpl,r5
      000120 8E 83            [24]  307 	mov	dph,r6
      000122 8F F0            [24]  308 	mov	b,r7
      000124 E4               [12]  309 	clr	a
      000125 12r00r00         [24]  310 	lcall	__gptrput
      000128 8A 82            [24]  311 	mov	dpl,r2
      00012A 8B 83            [24]  312 	mov	dph,r3
      00012C 8C F0            [24]  313 	mov	b,r4
      00012E 12r00r00         [24]  314 	lcall	__gptrput
                                    315 ;	mbrtoc16.c:52: return(-3);
      000131 90 FF FD         [24]  316 	mov	dptr,#0xfffd
      000134 02r02rAC         [24]  317 	ljmp	00119$
      000137                        318 00108$:
                                    319 ;	mbrtoc16.c:55: ret = mbrtowc(&codepoint, s, n, ps);
      000137 E5*00            [12]  320 	mov	a,_bp
      000139 24 07            [12]  321 	add	a,#0x07
      00013B FF               [12]  322 	mov	r7,a
      00013C 7E 00            [12]  323 	mov	r6,#0x00
      00013E 7D 40            [12]  324 	mov	r5,#0x40
      000140 E5*00            [12]  325 	mov	a,_bp
      000142 24 F6            [12]  326 	add	a,#0xf6
      000144 F8               [12]  327 	mov	r0,a
      000145 E6               [12]  328 	mov	a,@r0
      000146 C0 E0            [24]  329 	push	acc
      000148 08               [12]  330 	inc	r0
      000149 E6               [12]  331 	mov	a,@r0
      00014A C0 E0            [24]  332 	push	acc
      00014C 08               [12]  333 	inc	r0
      00014D E6               [12]  334 	mov	a,@r0
      00014E C0 E0            [24]  335 	push	acc
      000150 E5*00            [12]  336 	mov	a,_bp
      000152 24 F9            [12]  337 	add	a,#0xf9
      000154 F8               [12]  338 	mov	r0,a
      000155 E6               [12]  339 	mov	a,@r0
      000156 C0 E0            [24]  340 	push	acc
      000158 08               [12]  341 	inc	r0
      000159 E6               [12]  342 	mov	a,@r0
      00015A C0 E0            [24]  343 	push	acc
      00015C E5*00            [12]  344 	mov	a,_bp
      00015E 24 FB            [12]  345 	add	a,#0xfb
      000160 F8               [12]  346 	mov	r0,a
      000161 E6               [12]  347 	mov	a,@r0
      000162 C0 E0            [24]  348 	push	acc
      000164 08               [12]  349 	inc	r0
      000165 E6               [12]  350 	mov	a,@r0
      000166 C0 E0            [24]  351 	push	acc
      000168 08               [12]  352 	inc	r0
      000169 E6               [12]  353 	mov	a,@r0
      00016A C0 E0            [24]  354 	push	acc
      00016C 8F 82            [24]  355 	mov	dpl,r7
      00016E 8E 83            [24]  356 	mov	dph,r6
      000170 8D F0            [24]  357 	mov	b,r5
      000172 12r00r00         [24]  358 	lcall	_mbrtowc
      000175 AE 82            [24]  359 	mov	r6,dpl
      000177 AF 83            [24]  360 	mov	r7,dph
      000179 E5 81            [12]  361 	mov	a,sp
      00017B 24 F8            [12]  362 	add	a,#0xf8
      00017D F5 81            [12]  363 	mov	sp,a
      00017F E5*00            [12]  364 	mov	a,_bp
      000181 24 0B            [12]  365 	add	a,#0x0b
      000183 F8               [12]  366 	mov	r0,a
      000184 A6 06            [24]  367 	mov	@r0,ar6
      000186 08               [12]  368 	inc	r0
      000187 A6 07            [24]  369 	mov	@r0,ar7
                                    370 ;	mbrtoc16.c:57: if(ret > MB_LEN_MAX)
      000189 E5*00            [12]  371 	mov	a,_bp
      00018B 24 0B            [12]  372 	add	a,#0x0b
      00018D F8               [12]  373 	mov	r0,a
      00018E C3               [12]  374 	clr	c
      00018F 74 04            [12]  375 	mov	a,#0x04
      000191 96               [12]  376 	subb	a,@r0
      000192 E4               [12]  377 	clr	a
      000193 08               [12]  378 	inc	r0
      000194 96               [12]  379 	subb	a,@r0
      000195 50 0D            [24]  380 	jnc	00112$
                                    381 ;	mbrtoc16.c:58: return(ret);
      000197 E5*00            [12]  382 	mov	a,_bp
      000199 24 0B            [12]  383 	add	a,#0x0b
      00019B F8               [12]  384 	mov	r0,a
      00019C 86 82            [24]  385 	mov	dpl,@r0
      00019E 08               [12]  386 	inc	r0
      00019F 86 83            [24]  387 	mov	dph,@r0
      0001A1 02r02rAC         [24]  388 	ljmp	00119$
      0001A4                        389 00112$:
                                    390 ;	mbrtoc16.c:60: if (codepoint <= 0xffff) // Basic multilingual plane
      0001A4 E5*00            [12]  391 	mov	a,_bp
      0001A6 24 07            [12]  392 	add	a,#0x07
      0001A8 F8               [12]  393 	mov	r0,a
      0001A9 C3               [12]  394 	clr	c
      0001AA 74 FF            [12]  395 	mov	a,#0xff
      0001AC 96               [12]  396 	subb	a,@r0
      0001AD 74 FF            [12]  397 	mov	a,#0xff
      0001AF 08               [12]  398 	inc	r0
      0001B0 96               [12]  399 	subb	a,@r0
      0001B1 E4               [12]  400 	clr	a
      0001B2 08               [12]  401 	inc	r0
      0001B3 96               [12]  402 	subb	a,@r0
      0001B4 E4               [12]  403 	clr	a
      0001B5 08               [12]  404 	inc	r0
      0001B6 96               [12]  405 	subb	a,@r0
      0001B7 40 33            [24]  406 	jc	00116$
                                    407 ;	mbrtoc16.c:62: if(pc16)
      0001B9 A8*00            [24]  408 	mov	r0,_bp
      0001BB 08               [12]  409 	inc	r0
      0001BC E6               [12]  410 	mov	a,@r0
      0001BD 08               [12]  411 	inc	r0
      0001BE 46               [12]  412 	orl	a,@r0
      0001BF 60 1E            [24]  413 	jz	00114$
                                    414 ;	mbrtoc16.c:63: *pc16 = codepoint;
      0001C1 E5*00            [12]  415 	mov	a,_bp
      0001C3 24 07            [12]  416 	add	a,#0x07
      0001C5 F8               [12]  417 	mov	r0,a
      0001C6 86 05            [24]  418 	mov	ar5,@r0
      0001C8 08               [12]  419 	inc	r0
      0001C9 86 04            [24]  420 	mov	ar4,@r0
      0001CB A8*00            [24]  421 	mov	r0,_bp
      0001CD 08               [12]  422 	inc	r0
      0001CE 86 82            [24]  423 	mov	dpl,@r0
      0001D0 08               [12]  424 	inc	r0
      0001D1 86 83            [24]  425 	mov	dph,@r0
      0001D3 08               [12]  426 	inc	r0
      0001D4 86 F0            [24]  427 	mov	b,@r0
      0001D6 ED               [12]  428 	mov	a,r5
      0001D7 12r00r00         [24]  429 	lcall	__gptrput
      0001DA A3               [24]  430 	inc	dptr
      0001DB EC               [12]  431 	mov	a,r4
      0001DC 12r00r00         [24]  432 	lcall	__gptrput
      0001DF                        433 00114$:
                                    434 ;	mbrtoc16.c:64: return(ret);
      0001DF E5*00            [12]  435 	mov	a,_bp
      0001E1 24 0B            [12]  436 	add	a,#0x0b
      0001E3 F8               [12]  437 	mov	r0,a
      0001E4 86 82            [24]  438 	mov	dpl,@r0
      0001E6 08               [12]  439 	inc	r0
      0001E7 86 83            [24]  440 	mov	dph,@r0
      0001E9 02r02rAC         [24]  441 	ljmp	00119$
      0001EC                        442 00116$:
                                    443 ;	mbrtoc16.c:67: codepoint -= 0x100000;
      0001EC E5*00            [12]  444 	mov	a,_bp
      0001EE 24 07            [12]  445 	add	a,#0x07
      0001F0 F8               [12]  446 	mov	r0,a
      0001F1 08               [12]  447 	inc	r0
      0001F2 08               [12]  448 	inc	r0
      0001F3 E6               [12]  449 	mov	a,@r0
      0001F4 24 F0            [12]  450 	add	a,#0xf0
      0001F6 F6               [12]  451 	mov	@r0,a
      0001F7 08               [12]  452 	inc	r0
      0001F8 E6               [12]  453 	mov	a,@r0
      0001F9 34 FF            [12]  454 	addc	a,#0xff
      0001FB F6               [12]  455 	mov	@r0,a
                                    456 ;	mbrtoc16.c:68: if(pc16)
      0001FC A8*00            [24]  457 	mov	r0,_bp
      0001FE 08               [12]  458 	inc	r0
      0001FF E6               [12]  459 	mov	a,@r0
      000200 08               [12]  460 	inc	r0
      000201 46               [12]  461 	orl	a,@r0
      000202 60 40            [24]  462 	jz	00118$
                                    463 ;	mbrtoc16.c:69: *pc16 = ((codepoint >> 10) & 0x3ff) + 0xd800;
      000204 E5*00            [12]  464 	mov	a,_bp
      000206 24 07            [12]  465 	add	a,#0x07
      000208 F8               [12]  466 	mov	r0,a
      000209 08               [12]  467 	inc	r0
      00020A 86 02            [24]  468 	mov	ar2,@r0
      00020C 08               [12]  469 	inc	r0
      00020D E6               [12]  470 	mov	a,@r0
      00020E C3               [12]  471 	clr	c
      00020F 13               [12]  472 	rrc	a
      000210 CA               [12]  473 	xch	a,r2
      000211 13               [12]  474 	rrc	a
      000212 CA               [12]  475 	xch	a,r2
      000213 C3               [12]  476 	clr	c
      000214 13               [12]  477 	rrc	a
      000215 CA               [12]  478 	xch	a,r2
      000216 13               [12]  479 	rrc	a
      000217 CA               [12]  480 	xch	a,r2
      000218 FB               [12]  481 	mov	r3,a
      000219 08               [12]  482 	inc	r0
      00021A E6               [12]  483 	mov	a,@r0
      00021B 03               [12]  484 	rr	a
      00021C 03               [12]  485 	rr	a
      00021D 54 C0            [12]  486 	anl	a,#0xc0
      00021F 4B               [12]  487 	orl	a,r3
      000220 FB               [12]  488 	mov	r3,a
      000221 E6               [12]  489 	mov	a,@r0
      000222 03               [12]  490 	rr	a
      000223 03               [12]  491 	rr	a
      000224 54 3F            [12]  492 	anl	a,#0x3f
      000226 FC               [12]  493 	mov	r4,a
      000227 7D 00            [12]  494 	mov	r5,#0x00
      000229 53 03 03         [24]  495 	anl	ar3,#0x03
      00022C 74 D8            [12]  496 	mov	a,#0xd8
      00022E 2B               [12]  497 	add	a,r3
      00022F FB               [12]  498 	mov	r3,a
      000230 A8*00            [24]  499 	mov	r0,_bp
      000232 08               [12]  500 	inc	r0
      000233 86 82            [24]  501 	mov	dpl,@r0
      000235 08               [12]  502 	inc	r0
      000236 86 83            [24]  503 	mov	dph,@r0
      000238 08               [12]  504 	inc	r0
      000239 86 F0            [24]  505 	mov	b,@r0
      00023B EA               [12]  506 	mov	a,r2
      00023C 12r00r00         [24]  507 	lcall	__gptrput
      00023F A3               [24]  508 	inc	dptr
      000240 EB               [12]  509 	mov	a,r3
      000241 12r00r00         [24]  510 	lcall	__gptrput
      000244                        511 00118$:
                                    512 ;	mbrtoc16.c:70: low_surrogate = (codepoint & 0x3ff) + 0xdc00;
      000244 E5*00            [12]  513 	mov	a,_bp
      000246 24 07            [12]  514 	add	a,#0x07
      000248 F8               [12]  515 	mov	r0,a
      000249 86 04            [24]  516 	mov	ar4,@r0
      00024B 08               [12]  517 	inc	r0
      00024C 86 05            [24]  518 	mov	ar5,@r0
      00024E 53 05 03         [24]  519 	anl	ar5,#0x03
      000251 74 DC            [12]  520 	mov	a,#0xdc
      000253 2D               [12]  521 	add	a,r5
      000254 FE               [12]  522 	mov	r6,a
                                    523 ;	mbrtoc16.c:71: ps->c[0] = 0;
      000255 E5*00            [12]  524 	mov	a,_bp
      000257 24 F6            [12]  525 	add	a,#0xf6
      000259 F8               [12]  526 	mov	r0,a
      00025A 86 02            [24]  527 	mov	ar2,@r0
      00025C 08               [12]  528 	inc	r0
      00025D 86 03            [24]  529 	mov	ar3,@r0
      00025F 08               [12]  530 	inc	r0
      000260 86 05            [24]  531 	mov	ar5,@r0
      000262 8A 82            [24]  532 	mov	dpl,r2
      000264 8B 83            [24]  533 	mov	dph,r3
      000266 8D F0            [24]  534 	mov	b,r5
      000268 E4               [12]  535 	clr	a
      000269 12r00r00         [24]  536 	lcall	__gptrput
                                    537 ;	mbrtoc16.c:72: ps->c[1] = low_surrogate & 0xff;
      00026C E5*00            [12]  538 	mov	a,_bp
      00026E 24 04            [12]  539 	add	a,#0x04
      000270 F8               [12]  540 	mov	r0,a
      000271 74 01            [12]  541 	mov	a,#0x01
      000273 2A               [12]  542 	add	a,r2
      000274 F6               [12]  543 	mov	@r0,a
      000275 E4               [12]  544 	clr	a
      000276 3B               [12]  545 	addc	a,r3
      000277 08               [12]  546 	inc	r0
      000278 F6               [12]  547 	mov	@r0,a
      000279 08               [12]  548 	inc	r0
      00027A A6 05            [24]  549 	mov	@r0,ar5
      00027C 8C 07            [24]  550 	mov	ar7,r4
      00027E E5*00            [12]  551 	mov	a,_bp
      000280 24 04            [12]  552 	add	a,#0x04
      000282 F8               [12]  553 	mov	r0,a
      000283 86 82            [24]  554 	mov	dpl,@r0
      000285 08               [12]  555 	inc	r0
      000286 86 83            [24]  556 	mov	dph,@r0
      000288 08               [12]  557 	inc	r0
      000289 86 F0            [24]  558 	mov	b,@r0
      00028B EF               [12]  559 	mov	a,r7
      00028C 12r00r00         [24]  560 	lcall	__gptrput
                                    561 ;	mbrtoc16.c:73: ps->c[2] = low_surrogate >> 8;
      00028F 74 02            [12]  562 	mov	a,#0x02
      000291 2A               [12]  563 	add	a,r2
      000292 FA               [12]  564 	mov	r2,a
      000293 E4               [12]  565 	clr	a
      000294 3B               [12]  566 	addc	a,r3
      000295 FB               [12]  567 	mov	r3,a
      000296 8E 07            [24]  568 	mov	ar7,r6
      000298 8A 82            [24]  569 	mov	dpl,r2
      00029A 8B 83            [24]  570 	mov	dph,r3
      00029C 8D F0            [24]  571 	mov	b,r5
      00029E EF               [12]  572 	mov	a,r7
      00029F 12r00r00         [24]  573 	lcall	__gptrput
                                    574 ;	mbrtoc16.c:75: return(ret);
      0002A2 E5*00            [12]  575 	mov	a,_bp
      0002A4 24 0B            [12]  576 	add	a,#0x0b
      0002A6 F8               [12]  577 	mov	r0,a
      0002A7 86 82            [24]  578 	mov	dpl,@r0
      0002A9 08               [12]  579 	inc	r0
      0002AA 86 83            [24]  580 	mov	dph,@r0
      0002AC                        581 00119$:
                                    582 ;	mbrtoc16.c:76: }
      0002AC 85*00 81         [24]  583 	mov	sp,_bp
      0002AF D0*00            [24]  584 	pop	_bp
      0002B1 22               [24]  585 	ret
                                    586 	.area CSEG    (CODE)
                                    587 	.area CONST   (CODE)
                                    588 	.area CONST   (CODE)
      000000                        589 ___str_0:
      000000 00                     590 	.db 0x00
                                    591 	.area CSEG    (CODE)
                                    592 	.area XINIT   (CODE)
                                    593 	.area CABS    (ABS,CODE)
