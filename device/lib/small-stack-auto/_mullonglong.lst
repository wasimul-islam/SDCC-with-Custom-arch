                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _mullonglong
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __mullonglong
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_mullonglong'
                                     91 ;------------------------------------------------------------
                                     92 ;lr                        Allocated to stack - _bp -10
                                     93 ;ll                        Allocated to stack - _bp +1
                                     94 ;ret                       Allocated to stack - _bp +17
                                     95 ;i                         Allocated to stack - _bp +25
                                     96 ;j                         Allocated to stack - _bp +26
                                     97 ;l                         Allocated to registers r2 
                                     98 ;r                         Allocated to registers r7 
                                     99 ;sloc0                     Allocated to stack - _bp +9
                                    100 ;------------------------------------------------------------
                                    101 ;	_mullonglong.c:39: long long _mullonglong(long long ll, long long lr) __SDCC_NONBANKED
                                    102 ;	-----------------------------------------
                                    103 ;	 function _mullonglong
                                    104 ;	-----------------------------------------
      000000                        105 __mullonglong:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D C0 04            [24]  120 	push	ar4
      00000F C0 05            [24]  121 	push	ar5
      000011 C0 06            [24]  122 	push	ar6
      000013 C0 07            [24]  123 	push	ar7
      000015 E5 81            [12]  124 	mov	a,sp
      000017 24 12            [12]  125 	add	a,#0x12
      000019 F5 81            [12]  126 	mov	sp,a
                                    127 ;	_mullonglong.c:41: unsigned long long ret = 0ull;
      00001B E5*00            [12]  128 	mov	a,_bp
      00001D 24 11            [12]  129 	add	a,#0x11
      00001F F8               [12]  130 	mov	r0,a
      000020 E4               [12]  131 	clr	a
      000021 F6               [12]  132 	mov	@r0,a
      000022 08               [12]  133 	inc	r0
      000023 F6               [12]  134 	mov	@r0,a
      000024 08               [12]  135 	inc	r0
      000025 F6               [12]  136 	mov	@r0,a
      000026 08               [12]  137 	inc	r0
      000027 F6               [12]  138 	mov	@r0,a
      000028 08               [12]  139 	inc	r0
      000029 F6               [12]  140 	mov	@r0,a
      00002A 08               [12]  141 	inc	r0
      00002B F6               [12]  142 	mov	@r0,a
      00002C 08               [12]  143 	inc	r0
      00002D F6               [12]  144 	mov	@r0,a
      00002E 08               [12]  145 	inc	r0
      00002F F6               [12]  146 	mov	@r0,a
                                    147 ;	_mullonglong.c:44: for (i = 0; i < sizeof (long long); i++)
      000030 E5*00            [12]  148 	mov	a,_bp
      000032 24 19            [12]  149 	add	a,#0x19
      000034 F8               [12]  150 	mov	r0,a
      000035 76 00            [12]  151 	mov	@r0,#0x00
      000037                        152 00106$:
                                    153 ;	_mullonglong.c:46: unsigned char l = ll >> (i * 8);
      000037 E5*00            [12]  154 	mov	a,_bp
      000039 24 19            [12]  155 	add	a,#0x19
      00003B F8               [12]  156 	mov	r0,a
      00003C E6               [12]  157 	mov	a,@r0
      00003D C4               [12]  158 	swap	a
      00003E 03               [12]  159 	rr	a
      00003F 54 F8            [12]  160 	anl	a,#0xf8
      000041 FE               [12]  161 	mov	r6,a
      000042 8E F0            [24]  162 	mov	b,r6
      000044 05 F0            [12]  163 	inc	b
      000046 A8*00            [24]  164 	mov	r0,_bp
      000048 08               [12]  165 	inc	r0
      000049 E5*00            [12]  166 	mov	a,_bp
      00004B 24 09            [12]  167 	add	a,#0x09
      00004D F9               [12]  168 	mov	r1,a
      00004E E6               [12]  169 	mov	a,@r0
      00004F F7               [12]  170 	mov	@r1,a
      000050 08               [12]  171 	inc	r0
      000051 E6               [12]  172 	mov	a,@r0
      000052 09               [12]  173 	inc	r1
      000053 F7               [12]  174 	mov	@r1,a
      000054 08               [12]  175 	inc	r0
      000055 E6               [12]  176 	mov	a,@r0
      000056 09               [12]  177 	inc	r1
      000057 F7               [12]  178 	mov	@r1,a
      000058 08               [12]  179 	inc	r0
      000059 E6               [12]  180 	mov	a,@r0
      00005A 09               [12]  181 	inc	r1
      00005B F7               [12]  182 	mov	@r1,a
      00005C 08               [12]  183 	inc	r0
      00005D E6               [12]  184 	mov	a,@r0
      00005E 09               [12]  185 	inc	r1
      00005F F7               [12]  186 	mov	@r1,a
      000060 08               [12]  187 	inc	r0
      000061 E6               [12]  188 	mov	a,@r0
      000062 09               [12]  189 	inc	r1
      000063 F7               [12]  190 	mov	@r1,a
      000064 08               [12]  191 	inc	r0
      000065 E6               [12]  192 	mov	a,@r0
      000066 09               [12]  193 	inc	r1
      000067 F7               [12]  194 	mov	@r1,a
      000068 08               [12]  195 	inc	r0
      000069 E6               [12]  196 	mov	a,@r0
      00006A 09               [12]  197 	inc	r1
      00006B F7               [12]  198 	mov	@r1,a
      00006C E6               [12]  199 	mov	a,@r0
      00006D 33               [12]  200 	rlc	a
      00006E 92 D2            [24]  201 	mov	ov,c
      000070 19               [12]  202 	dec	r1
      000071 19               [12]  203 	dec	r1
      000072 19               [12]  204 	dec	r1
      000073 19               [12]  205 	dec	r1
      000074 19               [12]  206 	dec	r1
      000075 19               [12]  207 	dec	r1
      000076 19               [12]  208 	dec	r1
      000077 80 28            [24]  209 	sjmp	00129$
      000079                        210 00128$:
      000079 A2 D2            [12]  211 	mov	c,ov
      00007B 09               [12]  212 	inc	r1
      00007C 09               [12]  213 	inc	r1
      00007D 09               [12]  214 	inc	r1
      00007E 09               [12]  215 	inc	r1
      00007F 09               [12]  216 	inc	r1
      000080 09               [12]  217 	inc	r1
      000081 09               [12]  218 	inc	r1
      000082 E7               [12]  219 	mov	a,@r1
      000083 13               [12]  220 	rrc	a
      000084 F7               [12]  221 	mov	@r1,a
      000085 19               [12]  222 	dec	r1
      000086 E7               [12]  223 	mov	a,@r1
      000087 13               [12]  224 	rrc	a
      000088 F7               [12]  225 	mov	@r1,a
      000089 19               [12]  226 	dec	r1
      00008A E7               [12]  227 	mov	a,@r1
      00008B 13               [12]  228 	rrc	a
      00008C F7               [12]  229 	mov	@r1,a
      00008D 19               [12]  230 	dec	r1
      00008E E7               [12]  231 	mov	a,@r1
      00008F 13               [12]  232 	rrc	a
      000090 F7               [12]  233 	mov	@r1,a
      000091 19               [12]  234 	dec	r1
      000092 E7               [12]  235 	mov	a,@r1
      000093 13               [12]  236 	rrc	a
      000094 F7               [12]  237 	mov	@r1,a
      000095 19               [12]  238 	dec	r1
      000096 E7               [12]  239 	mov	a,@r1
      000097 13               [12]  240 	rrc	a
      000098 F7               [12]  241 	mov	@r1,a
      000099 19               [12]  242 	dec	r1
      00009A E7               [12]  243 	mov	a,@r1
      00009B 13               [12]  244 	rrc	a
      00009C F7               [12]  245 	mov	@r1,a
      00009D 19               [12]  246 	dec	r1
      00009E E7               [12]  247 	mov	a,@r1
      00009F 13               [12]  248 	rrc	a
      0000A0 F7               [12]  249 	mov	@r1,a
      0000A1                        250 00129$:
      0000A1 D5 F0 D5         [24]  251 	djnz	b,00128$
      0000A4 E5*00            [12]  252 	mov	a,_bp
      0000A6 24 09            [12]  253 	add	a,#0x09
      0000A8 F8               [12]  254 	mov	r0,a
      0000A9 86 02            [24]  255 	mov	ar2,@r0
                                    256 ;	_mullonglong.c:47: for(j = 0; (i + j) < sizeof (long long); j++)
      0000AB E5*00            [12]  257 	mov	a,_bp
      0000AD 24 1A            [12]  258 	add	a,#0x1a
      0000AF F8               [12]  259 	mov	r0,a
      0000B0 76 00            [12]  260 	mov	@r0,#0x00
                                    261 ;	_mullonglong.c:54: return(ret);
                                    262 ;	_mullonglong.c:47: for(j = 0; (i + j) < sizeof (long long); j++)
      0000B2                        263 00104$:
      0000B2 E5*00            [12]  264 	mov	a,_bp
      0000B4 24 19            [12]  265 	add	a,#0x19
      0000B6 F8               [12]  266 	mov	r0,a
      0000B7 86 05            [24]  267 	mov	ar5,@r0
      0000B9 7E 00            [12]  268 	mov	r6,#0x00
      0000BB E5*00            [12]  269 	mov	a,_bp
      0000BD 24 1A            [12]  270 	add	a,#0x1a
      0000BF F8               [12]  271 	mov	r0,a
      0000C0 86 03            [24]  272 	mov	ar3,@r0
      0000C2 7C 00            [12]  273 	mov	r4,#0x00
      0000C4 EB               [12]  274 	mov	a,r3
      0000C5 2D               [12]  275 	add	a,r5
      0000C6 FD               [12]  276 	mov	r5,a
      0000C7 EC               [12]  277 	mov	a,r4
      0000C8 3E               [12]  278 	addc	a,r6
      0000C9 FE               [12]  279 	mov	r6,a
      0000CA C3               [12]  280 	clr	c
      0000CB ED               [12]  281 	mov	a,r5
      0000CC 94 08            [12]  282 	subb	a,#0x08
      0000CE EE               [12]  283 	mov	a,r6
      0000CF 64 80            [12]  284 	xrl	a,#0x80
      0000D1 94 80            [12]  285 	subb	a,#0x80
      0000D3 40 03            [24]  286 	jc	00130$
      0000D5 02r01rEF         [24]  287 	ljmp	00107$
      0000D8                        288 00130$:
                                    289 ;	_mullonglong.c:49: unsigned char r = lr >> (j * 8);
      0000D8 E5*00            [12]  290 	mov	a,_bp
      0000DA 24 1A            [12]  291 	add	a,#0x1a
      0000DC F8               [12]  292 	mov	r0,a
      0000DD E6               [12]  293 	mov	a,@r0
      0000DE C4               [12]  294 	swap	a
      0000DF 03               [12]  295 	rr	a
      0000E0 54 F8            [12]  296 	anl	a,#0xf8
      0000E2 FE               [12]  297 	mov	r6,a
      0000E3 8E F0            [24]  298 	mov	b,r6
      0000E5 05 F0            [12]  299 	inc	b
      0000E7 E5*00            [12]  300 	mov	a,_bp
      0000E9 24 F6            [12]  301 	add	a,#0xf6
      0000EB F8               [12]  302 	mov	r0,a
      0000EC E5*00            [12]  303 	mov	a,_bp
      0000EE 24 09            [12]  304 	add	a,#0x09
      0000F0 F9               [12]  305 	mov	r1,a
      0000F1 E6               [12]  306 	mov	a,@r0
      0000F2 F7               [12]  307 	mov	@r1,a
      0000F3 08               [12]  308 	inc	r0
      0000F4 E6               [12]  309 	mov	a,@r0
      0000F5 09               [12]  310 	inc	r1
      0000F6 F7               [12]  311 	mov	@r1,a
      0000F7 08               [12]  312 	inc	r0
      0000F8 E6               [12]  313 	mov	a,@r0
      0000F9 09               [12]  314 	inc	r1
      0000FA F7               [12]  315 	mov	@r1,a
      0000FB 08               [12]  316 	inc	r0
      0000FC E6               [12]  317 	mov	a,@r0
      0000FD 09               [12]  318 	inc	r1
      0000FE F7               [12]  319 	mov	@r1,a
      0000FF 08               [12]  320 	inc	r0
      000100 E6               [12]  321 	mov	a,@r0
      000101 09               [12]  322 	inc	r1
      000102 F7               [12]  323 	mov	@r1,a
      000103 08               [12]  324 	inc	r0
      000104 E6               [12]  325 	mov	a,@r0
      000105 09               [12]  326 	inc	r1
      000106 F7               [12]  327 	mov	@r1,a
      000107 08               [12]  328 	inc	r0
      000108 E6               [12]  329 	mov	a,@r0
      000109 09               [12]  330 	inc	r1
      00010A F7               [12]  331 	mov	@r1,a
      00010B 08               [12]  332 	inc	r0
      00010C E6               [12]  333 	mov	a,@r0
      00010D 09               [12]  334 	inc	r1
      00010E F7               [12]  335 	mov	@r1,a
      00010F E6               [12]  336 	mov	a,@r0
      000110 33               [12]  337 	rlc	a
      000111 92 D2            [24]  338 	mov	ov,c
      000113 19               [12]  339 	dec	r1
      000114 19               [12]  340 	dec	r1
      000115 19               [12]  341 	dec	r1
      000116 19               [12]  342 	dec	r1
      000117 19               [12]  343 	dec	r1
      000118 19               [12]  344 	dec	r1
      000119 19               [12]  345 	dec	r1
      00011A 80 28            [24]  346 	sjmp	00132$
      00011C                        347 00131$:
      00011C A2 D2            [12]  348 	mov	c,ov
      00011E 09               [12]  349 	inc	r1
      00011F 09               [12]  350 	inc	r1
      000120 09               [12]  351 	inc	r1
      000121 09               [12]  352 	inc	r1
      000122 09               [12]  353 	inc	r1
      000123 09               [12]  354 	inc	r1
      000124 09               [12]  355 	inc	r1
      000125 E7               [12]  356 	mov	a,@r1
      000126 13               [12]  357 	rrc	a
      000127 F7               [12]  358 	mov	@r1,a
      000128 19               [12]  359 	dec	r1
      000129 E7               [12]  360 	mov	a,@r1
      00012A 13               [12]  361 	rrc	a
      00012B F7               [12]  362 	mov	@r1,a
      00012C 19               [12]  363 	dec	r1
      00012D E7               [12]  364 	mov	a,@r1
      00012E 13               [12]  365 	rrc	a
      00012F F7               [12]  366 	mov	@r1,a
      000130 19               [12]  367 	dec	r1
      000131 E7               [12]  368 	mov	a,@r1
      000132 13               [12]  369 	rrc	a
      000133 F7               [12]  370 	mov	@r1,a
      000134 19               [12]  371 	dec	r1
      000135 E7               [12]  372 	mov	a,@r1
      000136 13               [12]  373 	rrc	a
      000137 F7               [12]  374 	mov	@r1,a
      000138 19               [12]  375 	dec	r1
      000139 E7               [12]  376 	mov	a,@r1
      00013A 13               [12]  377 	rrc	a
      00013B F7               [12]  378 	mov	@r1,a
      00013C 19               [12]  379 	dec	r1
      00013D E7               [12]  380 	mov	a,@r1
      00013E 13               [12]  381 	rrc	a
      00013F F7               [12]  382 	mov	@r1,a
      000140 19               [12]  383 	dec	r1
      000141 E7               [12]  384 	mov	a,@r1
      000142 13               [12]  385 	rrc	a
      000143 F7               [12]  386 	mov	@r1,a
      000144                        387 00132$:
      000144 D5 F0 D5         [24]  388 	djnz	b,00131$
      000147 E5*00            [12]  389 	mov	a,_bp
      000149 24 09            [12]  390 	add	a,#0x09
      00014B F8               [12]  391 	mov	r0,a
      00014C 86 07            [24]  392 	mov	ar7,@r0
                                    393 ;	_mullonglong.c:50: ret += (unsigned long long)((unsigned short)(l * r)) << ((i + j) * 8);
      00014E 8A F0            [24]  394 	mov	b,r2
      000150 EF               [12]  395 	mov	a,r7
      000151 A4               [48]  396 	mul	ab
      000152 FF               [12]  397 	mov	r7,a
      000153 AE F0            [24]  398 	mov	r6,b
      000155 E5*00            [12]  399 	mov	a,_bp
      000157 24 09            [12]  400 	add	a,#0x09
      000159 F8               [12]  401 	mov	r0,a
      00015A A6 07            [24]  402 	mov	@r0,ar7
      00015C 08               [12]  403 	inc	r0
      00015D A6 06            [24]  404 	mov	@r0,ar6
      00015F 08               [12]  405 	inc	r0
      000160 76 00            [12]  406 	mov	@r0,#0x00
      000162 08               [12]  407 	inc	r0
      000163 76 00            [12]  408 	mov	@r0,#0x00
      000165 08               [12]  409 	inc	r0
      000166 76 00            [12]  410 	mov	@r0,#0x00
      000168 08               [12]  411 	inc	r0
      000169 76 00            [12]  412 	mov	@r0,#0x00
      00016B 08               [12]  413 	inc	r0
      00016C 76 00            [12]  414 	mov	@r0,#0x00
      00016E 08               [12]  415 	inc	r0
      00016F 76 00            [12]  416 	mov	@r0,#0x00
      000171 E5*00            [12]  417 	mov	a,_bp
      000173 24 19            [12]  418 	add	a,#0x19
      000175 F8               [12]  419 	mov	r0,a
      000176 E5*00            [12]  420 	mov	a,_bp
      000178 24 1A            [12]  421 	add	a,#0x1a
      00017A F9               [12]  422 	mov	r1,a
      00017B E7               [12]  423 	mov	a,@r1
      00017C 26               [12]  424 	add	a,@r0
      00017D C4               [12]  425 	swap	a
      00017E 03               [12]  426 	rr	a
      00017F 54 F8            [12]  427 	anl	a,#0xf8
      000181 FF               [12]  428 	mov	r7,a
      000182 8F F0            [24]  429 	mov	b,r7
      000184 05 F0            [12]  430 	inc	b
      000186 E5*00            [12]  431 	mov	a,_bp
      000188 24 09            [12]  432 	add	a,#0x09
      00018A F8               [12]  433 	mov	r0,a
      00018B 80 26            [24]  434 	sjmp	00134$
      00018D                        435 00133$:
      00018D E6               [12]  436 	mov	a,@r0
      00018E 26               [12]  437 	add	a,@r0
      00018F F6               [12]  438 	mov	@r0,a
      000190 08               [12]  439 	inc	r0
      000191 E6               [12]  440 	mov	a,@r0
      000192 33               [12]  441 	rlc	a
      000193 F6               [12]  442 	mov	@r0,a
      000194 08               [12]  443 	inc	r0
      000195 E6               [12]  444 	mov	a,@r0
      000196 33               [12]  445 	rlc	a
      000197 F6               [12]  446 	mov	@r0,a
      000198 08               [12]  447 	inc	r0
      000199 E6               [12]  448 	mov	a,@r0
      00019A 33               [12]  449 	rlc	a
      00019B F6               [12]  450 	mov	@r0,a
      00019C 08               [12]  451 	inc	r0
      00019D E6               [12]  452 	mov	a,@r0
      00019E 33               [12]  453 	rlc	a
      00019F F6               [12]  454 	mov	@r0,a
      0001A0 08               [12]  455 	inc	r0
      0001A1 E6               [12]  456 	mov	a,@r0
      0001A2 33               [12]  457 	rlc	a
      0001A3 F6               [12]  458 	mov	@r0,a
      0001A4 08               [12]  459 	inc	r0
      0001A5 E6               [12]  460 	mov	a,@r0
      0001A6 33               [12]  461 	rlc	a
      0001A7 F6               [12]  462 	mov	@r0,a
      0001A8 08               [12]  463 	inc	r0
      0001A9 E6               [12]  464 	mov	a,@r0
      0001AA 33               [12]  465 	rlc	a
      0001AB F6               [12]  466 	mov	@r0,a
      0001AC 18               [12]  467 	dec	r0
      0001AD 18               [12]  468 	dec	r0
      0001AE 18               [12]  469 	dec	r0
      0001AF 18               [12]  470 	dec	r0
      0001B0 18               [12]  471 	dec	r0
      0001B1 18               [12]  472 	dec	r0
      0001B2 18               [12]  473 	dec	r0
      0001B3                        474 00134$:
      0001B3 D5 F0 D7         [24]  475 	djnz	b,00133$
      0001B6 E5*00            [12]  476 	mov	a,_bp
      0001B8 24 11            [12]  477 	add	a,#0x11
      0001BA F8               [12]  478 	mov	r0,a
      0001BB E5*00            [12]  479 	mov	a,_bp
      0001BD 24 09            [12]  480 	add	a,#0x09
      0001BF F9               [12]  481 	mov	r1,a
      0001C0 E7               [12]  482 	mov	a,@r1
      0001C1 26               [12]  483 	add	a,@r0
      0001C2 F6               [12]  484 	mov	@r0,a
      0001C3 09               [12]  485 	inc	r1
      0001C4 E7               [12]  486 	mov	a,@r1
      0001C5 08               [12]  487 	inc	r0
      0001C6 36               [12]  488 	addc	a,@r0
      0001C7 F6               [12]  489 	mov	@r0,a
      0001C8 09               [12]  490 	inc	r1
      0001C9 E7               [12]  491 	mov	a,@r1
      0001CA 08               [12]  492 	inc	r0
      0001CB 36               [12]  493 	addc	a,@r0
      0001CC F6               [12]  494 	mov	@r0,a
      0001CD 09               [12]  495 	inc	r1
      0001CE E7               [12]  496 	mov	a,@r1
      0001CF 08               [12]  497 	inc	r0
      0001D0 36               [12]  498 	addc	a,@r0
      0001D1 F6               [12]  499 	mov	@r0,a
      0001D2 09               [12]  500 	inc	r1
      0001D3 E7               [12]  501 	mov	a,@r1
      0001D4 08               [12]  502 	inc	r0
      0001D5 36               [12]  503 	addc	a,@r0
      0001D6 F6               [12]  504 	mov	@r0,a
      0001D7 09               [12]  505 	inc	r1
      0001D8 E7               [12]  506 	mov	a,@r1
      0001D9 08               [12]  507 	inc	r0
      0001DA 36               [12]  508 	addc	a,@r0
      0001DB F6               [12]  509 	mov	@r0,a
      0001DC 09               [12]  510 	inc	r1
      0001DD E7               [12]  511 	mov	a,@r1
      0001DE 08               [12]  512 	inc	r0
      0001DF 36               [12]  513 	addc	a,@r0
      0001E0 F6               [12]  514 	mov	@r0,a
      0001E1 09               [12]  515 	inc	r1
      0001E2 E7               [12]  516 	mov	a,@r1
      0001E3 08               [12]  517 	inc	r0
      0001E4 36               [12]  518 	addc	a,@r0
      0001E5 F6               [12]  519 	mov	@r0,a
                                    520 ;	_mullonglong.c:47: for(j = 0; (i + j) < sizeof (long long); j++)
      0001E6 E5*00            [12]  521 	mov	a,_bp
      0001E8 24 1A            [12]  522 	add	a,#0x1a
      0001EA F8               [12]  523 	mov	r0,a
      0001EB 06               [12]  524 	inc	@r0
      0001EC 02r00rB2         [24]  525 	ljmp	00104$
      0001EF                        526 00107$:
                                    527 ;	_mullonglong.c:44: for (i = 0; i < sizeof (long long); i++)
      0001EF E5*00            [12]  528 	mov	a,_bp
      0001F1 24 19            [12]  529 	add	a,#0x19
      0001F3 F8               [12]  530 	mov	r0,a
      0001F4 06               [12]  531 	inc	@r0
      0001F5 E5*00            [12]  532 	mov	a,_bp
      0001F7 24 19            [12]  533 	add	a,#0x19
      0001F9 F8               [12]  534 	mov	r0,a
      0001FA B6 08 00         [24]  535 	cjne	@r0,#0x08,00135$
      0001FD                        536 00135$:
      0001FD 50 03            [24]  537 	jnc	00136$
      0001FF 02r00r37         [24]  538 	ljmp	00106$
      000202                        539 00136$:
                                    540 ;	_mullonglong.c:54: return(ret);
      000202 E5*00            [12]  541 	mov	a,_bp
      000204 24 11            [12]  542 	add	a,#0x11
      000206 F8               [12]  543 	mov	r0,a
      000207 86 82            [24]  544 	mov	dpl,@r0
      000209 08               [12]  545 	inc	r0
      00020A 86 83            [24]  546 	mov	dph,@r0
      00020C 08               [12]  547 	inc	r0
      00020D 86 F0            [24]  548 	mov	b,@r0
      00020F 08               [12]  549 	inc	r0
      000210 E6               [12]  550 	mov	a,@r0
      000211 08               [12]  551 	inc	r0
      000212 86 04            [24]  552 	mov	ar4,@r0
      000214 08               [12]  553 	inc	r0
      000215 86 05            [24]  554 	mov	ar5,@r0
      000217 08               [12]  555 	inc	r0
      000218 86 06            [24]  556 	mov	ar6,@r0
      00021A 08               [12]  557 	inc	r0
      00021B 86 07            [24]  558 	mov	ar7,@r0
                                    559 ;	_mullonglong.c:55: }
      00021D 85*00 81         [24]  560 	mov	sp,_bp
      000220 D0*00            [24]  561 	pop	_bp
      000222 22               [24]  562 	ret
                                    563 	.area CSEG    (CODE)
                                    564 	.area CONST   (CODE)
                                    565 	.area XINIT   (CODE)
                                    566 	.area CABS    (ABS,CODE)
