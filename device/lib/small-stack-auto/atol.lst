                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module atol
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atol
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable bit register bank
                                     29 ;--------------------------------------------------------
                                     30 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         31 bits:
      000000                         32 	.ds 1
                           008000    33 	b0 = bits[0]
                           008100    34 	b1 = bits[1]
                           008200    35 	b2 = bits[2]
                           008300    36 	b3 = bits[3]
                           008400    37 	b4 = bits[4]
                           008500    38 	b5 = bits[5]
                           008600    39 	b6 = bits[6]
                           008700    40 	b7 = bits[7]
                                     41 ;--------------------------------------------------------
                                     42 ; internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DSEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
                                     61 ;--------------------------------------------------------
                                     62 ; paged external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area PSEG    (PAG,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; uninitialized external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XSEG    (XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; initialized external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'atol'
                                    105 ;------------------------------------------------------------
                                    106 ;nptr                      Allocated to registers r2 r3 r4 
                                    107 ;__1310720007              Allocated to registers 
                                    108 ;__1310720004              Allocated to registers 
                                    109 ;ret                       Allocated to stack - _bp +8
                                    110 ;neg                       Allocated to registers b0 
                                    111 ;__1310720005              Allocated to registers 
                                    112 ;c                         Allocated to registers 
                                    113 ;__1310720008              Allocated to registers 
                                    114 ;c                         Allocated to registers 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;sloc1                     Allocated to stack - _bp +4
                                    117 ;------------------------------------------------------------
                                    118 ;	atol.c:34: long int atol(const char *nptr)
                                    119 ;	-----------------------------------------
                                    120 ;	 function atol
                                    121 ;	-----------------------------------------
      000000                        122 _atol:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 E5 81            [12]  132 	mov	a,sp
      000004 F5*00            [12]  133 	mov	_bp,a
      000006 24 0B            [12]  134 	add	a,#0x0b
      000008 F5 81            [12]  135 	mov	sp,a
      00000A AD 82            [24]  136 	mov	r5,dpl
      00000C AE 83            [24]  137 	mov	r6,dph
      00000E AF F0            [24]  138 	mov	r7,b
                                    139 ;	atol.c:36: long int ret = 0;
      000010 E5*00            [12]  140 	mov	a,_bp
      000012 24 08            [12]  141 	add	a,#0x08
      000014 F8               [12]  142 	mov	r0,a
      000015 E4               [12]  143 	clr	a
      000016 F6               [12]  144 	mov	@r0,a
      000017 08               [12]  145 	inc	r0
      000018 F6               [12]  146 	mov	@r0,a
      000019 08               [12]  147 	inc	r0
      00001A F6               [12]  148 	mov	@r0,a
      00001B 08               [12]  149 	inc	r0
      00001C F6               [12]  150 	mov	@r0,a
                                    151 ;	atol.c:39: while (isblank (*nptr))
      00001D                        152 00101$:
      00001D 8D 82            [24]  153 	mov	dpl,r5
      00001F 8E 83            [24]  154 	mov	dph,r6
      000021 8F F0            [24]  155 	mov	b,r7
      000023 12r00r00         [24]  156 	lcall	__gptrget
      000026 FC               [12]  157 	mov	r4,a
                                    158 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000027 BC 20 02         [24]  159 	cjne	r4,#0x20,00161$
      00002A 80 03            [24]  160 	sjmp	00115$
      00002C                        161 00161$:
      00002C BC 09 07         [24]  162 	cjne	r4,#0x09,00131$
      00002F                        163 00115$:
                                    164 ;	atol.c:40: nptr++;
      00002F 0D               [12]  165 	inc	r5
      000030 BD 00 EA         [24]  166 	cjne	r5,#0x00,00101$
      000033 0E               [12]  167 	inc	r6
      000034 80 E7            [24]  168 	sjmp	00101$
      000036                        169 00131$:
      000036 8D 02            [24]  170 	mov	ar2,r5
      000038 8E 03            [24]  171 	mov	ar3,r6
      00003A 8F 04            [24]  172 	mov	ar4,r7
                                    173 ;	atol.c:42: neg = (*nptr == '-');
      00003C 8D 82            [24]  174 	mov	dpl,r5
      00003E 8E 83            [24]  175 	mov	dph,r6
      000040 8F F0            [24]  176 	mov	b,r7
      000042 12r00r00         [24]  177 	lcall	__gptrget
      000045 FF               [12]  178 	mov	r7,a
      000046 BF 2D 03         [24]  179 	cjne	r7,#0x2d,00165$
      000049 D3               [12]  180 	setb	c
      00004A 80 01            [24]  181 	sjmp	00166$
      00004C                        182 00165$:
      00004C C3               [12]  183 	clr	c
      00004D                        184 00166$:
      00004D 92*00            [24]  185 	mov	b0,c
                                    186 ;	atol.c:44: if (*nptr == '-' || *nptr == '+')
      00004F BF 2D 02         [24]  187 	cjne	r7,#0x2d,00167$
      000052 80 03            [24]  188 	sjmp	00104$
      000054                        189 00167$:
      000054 BF 2B 05         [24]  190 	cjne	r7,#0x2b,00129$
      000057                        191 00104$:
                                    192 ;	atol.c:45: nptr++;
      000057 0A               [12]  193 	inc	r2
      000058 BA 00 01         [24]  194 	cjne	r2,#0x00,00170$
      00005B 0B               [12]  195 	inc	r3
      00005C                        196 00170$:
                                    197 ;	atol.c:47: while (isdigit (*nptr))
      00005C                        198 00129$:
      00005C A8*00            [24]  199 	mov	r0,_bp
      00005E 08               [12]  200 	inc	r0
      00005F A6 02            [24]  201 	mov	@r0,ar2
      000061 08               [12]  202 	inc	r0
      000062 A6 03            [24]  203 	mov	@r0,ar3
      000064 08               [12]  204 	inc	r0
      000065 A6 04            [24]  205 	mov	@r0,ar4
      000067                        206 00107$:
      000067 A8*00            [24]  207 	mov	r0,_bp
      000069 08               [12]  208 	inc	r0
      00006A 86 82            [24]  209 	mov	dpl,@r0
      00006C 08               [12]  210 	inc	r0
      00006D 86 83            [24]  211 	mov	dph,@r0
      00006F 08               [12]  212 	inc	r0
      000070 86 F0            [24]  213 	mov	b,@r0
      000072 12r00r00         [24]  214 	lcall	__gptrget
      000075 FC               [12]  215 	mov	r4,a
                                    216 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000076 BC 30 00         [24]  217 	cjne	r4,#0x30,00171$
      000079                        218 00171$:
      000079 92*00            [24]  219 	mov	b1,c
      00007B 50 03            [24]  220 	jnc	00172$
      00007D 02r01r10         [24]  221 	ljmp	00109$
      000080                        222 00172$:
      000080 EC               [12]  223 	mov	a,r4
      000081 24 C6            [12]  224 	add	a,#0xff - 0x39
      000083 92*00            [24]  225 	mov	b1,c
      000085 50 03            [24]  226 	jnc	00173$
      000087 02r01r10         [24]  227 	ljmp	00109$
      00008A                        228 00173$:
                                    229 ;	atol.c:48: ret = ret * 10 + (*(nptr++) - '0');
      00008A C0*00            [24]  230 	push	bits
      00008C E5*00            [12]  231 	mov	a,_bp
      00008E 24 08            [12]  232 	add	a,#0x08
      000090 F8               [12]  233 	mov	r0,a
      000091 E6               [12]  234 	mov	a,@r0
      000092 C0 E0            [24]  235 	push	acc
      000094 08               [12]  236 	inc	r0
      000095 E6               [12]  237 	mov	a,@r0
      000096 C0 E0            [24]  238 	push	acc
      000098 08               [12]  239 	inc	r0
      000099 E6               [12]  240 	mov	a,@r0
      00009A C0 E0            [24]  241 	push	acc
      00009C 08               [12]  242 	inc	r0
      00009D E6               [12]  243 	mov	a,@r0
      00009E C0 E0            [24]  244 	push	acc
      0000A0 90 00 0A         [24]  245 	mov	dptr,#(0x0a&0x00ff)
      0000A3 E4               [12]  246 	clr	a
      0000A4 F5 F0            [12]  247 	mov	b,a
      0000A6 12r00r00         [24]  248 	lcall	__mullong
      0000A9 C8               [12]  249 	xch	a,r0
      0000AA E5*00            [12]  250 	mov	a,_bp
      0000AC 24 04            [12]  251 	add	a,#0x04
      0000AE C8               [12]  252 	xch	a,r0
      0000AF A6 82            [24]  253 	mov	@r0,dpl
      0000B1 08               [12]  254 	inc	r0
      0000B2 A6 83            [24]  255 	mov	@r0,dph
      0000B4 08               [12]  256 	inc	r0
      0000B5 A6 F0            [24]  257 	mov	@r0,b
      0000B7 08               [12]  258 	inc	r0
      0000B8 F6               [12]  259 	mov	@r0,a
      0000B9 E5 81            [12]  260 	mov	a,sp
      0000BB 24 FC            [12]  261 	add	a,#0xfc
      0000BD F5 81            [12]  262 	mov	sp,a
      0000BF D0*00            [24]  263 	pop	bits
      0000C1 A8*00            [24]  264 	mov	r0,_bp
      0000C3 08               [12]  265 	inc	r0
      0000C4 86 82            [24]  266 	mov	dpl,@r0
      0000C6 08               [12]  267 	inc	r0
      0000C7 86 83            [24]  268 	mov	dph,@r0
      0000C9 08               [12]  269 	inc	r0
      0000CA 86 F0            [24]  270 	mov	b,@r0
      0000CC 12r00r00         [24]  271 	lcall	__gptrget
      0000CF FE               [12]  272 	mov	r6,a
      0000D0 A3               [24]  273 	inc	dptr
      0000D1 18               [12]  274 	dec	r0
      0000D2 18               [12]  275 	dec	r0
      0000D3 A6 82            [24]  276 	mov	@r0,dpl
      0000D5 08               [12]  277 	inc	r0
      0000D6 A6 83            [24]  278 	mov	@r0,dph
      0000D8 7D 00            [12]  279 	mov	r5,#0x00
      0000DA EE               [12]  280 	mov	a,r6
      0000DB 24 D0            [12]  281 	add	a,#0xd0
      0000DD FE               [12]  282 	mov	r6,a
      0000DE ED               [12]  283 	mov	a,r5
      0000DF 34 FF            [12]  284 	addc	a,#0xff
      0000E1 FD               [12]  285 	mov	r5,a
      0000E2 8E 04            [24]  286 	mov	ar4,r6
      0000E4 33               [12]  287 	rlc	a
      0000E5 95 E0            [12]  288 	subb	a,acc
      0000E7 FE               [12]  289 	mov	r6,a
      0000E8 FF               [12]  290 	mov	r7,a
      0000E9 E5*00            [12]  291 	mov	a,_bp
      0000EB 24 04            [12]  292 	add	a,#0x04
      0000ED F8               [12]  293 	mov	r0,a
      0000EE EC               [12]  294 	mov	a,r4
      0000EF 26               [12]  295 	add	a,@r0
      0000F0 FC               [12]  296 	mov	r4,a
      0000F1 ED               [12]  297 	mov	a,r5
      0000F2 08               [12]  298 	inc	r0
      0000F3 36               [12]  299 	addc	a,@r0
      0000F4 FD               [12]  300 	mov	r5,a
      0000F5 EE               [12]  301 	mov	a,r6
      0000F6 08               [12]  302 	inc	r0
      0000F7 36               [12]  303 	addc	a,@r0
      0000F8 FE               [12]  304 	mov	r6,a
      0000F9 EF               [12]  305 	mov	a,r7
      0000FA 08               [12]  306 	inc	r0
      0000FB 36               [12]  307 	addc	a,@r0
      0000FC FF               [12]  308 	mov	r7,a
      0000FD E5*00            [12]  309 	mov	a,_bp
      0000FF 24 08            [12]  310 	add	a,#0x08
      000101 F8               [12]  311 	mov	r0,a
      000102 A6 04            [24]  312 	mov	@r0,ar4
      000104 08               [12]  313 	inc	r0
      000105 A6 05            [24]  314 	mov	@r0,ar5
      000107 08               [12]  315 	inc	r0
      000108 A6 06            [24]  316 	mov	@r0,ar6
      00010A 08               [12]  317 	inc	r0
      00010B A6 07            [24]  318 	mov	@r0,ar7
      00010D 02r00r67         [24]  319 	ljmp	00107$
      000110                        320 00109$:
                                    321 ;	atol.c:50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
      000110 30*00 17         [24]  322 	jnb	b0,00120$
      000113 E5*00            [12]  323 	mov	a,_bp
      000115 24 08            [12]  324 	add	a,#0x08
      000117 F8               [12]  325 	mov	r0,a
      000118 C3               [12]  326 	clr	c
      000119 E4               [12]  327 	clr	a
      00011A 96               [12]  328 	subb	a,@r0
      00011B FC               [12]  329 	mov	r4,a
      00011C 08               [12]  330 	inc	r0
      00011D E4               [12]  331 	clr	a
      00011E 96               [12]  332 	subb	a,@r0
      00011F FD               [12]  333 	mov	r5,a
      000120 08               [12]  334 	inc	r0
      000121 E4               [12]  335 	clr	a
      000122 96               [12]  336 	subb	a,@r0
      000123 FE               [12]  337 	mov	r6,a
      000124 08               [12]  338 	inc	r0
      000125 E4               [12]  339 	clr	a
      000126 96               [12]  340 	subb	a,@r0
      000127 FF               [12]  341 	mov	r7,a
      000128 80 10            [24]  342 	sjmp	00121$
      00012A                        343 00120$:
      00012A E5*00            [12]  344 	mov	a,_bp
      00012C 24 08            [12]  345 	add	a,#0x08
      00012E F8               [12]  346 	mov	r0,a
      00012F 86 04            [24]  347 	mov	ar4,@r0
      000131 08               [12]  348 	inc	r0
      000132 86 05            [24]  349 	mov	ar5,@r0
      000134 08               [12]  350 	inc	r0
      000135 86 06            [24]  351 	mov	ar6,@r0
      000137 08               [12]  352 	inc	r0
      000138 86 07            [24]  353 	mov	ar7,@r0
      00013A                        354 00121$:
      00013A 8C 82            [24]  355 	mov	dpl,r4
      00013C 8D 83            [24]  356 	mov	dph,r5
      00013E 8E F0            [24]  357 	mov	b,r6
      000140 EF               [12]  358 	mov	a,r7
                                    359 ;	atol.c:51: }
      000141 85*00 81         [24]  360 	mov	sp,_bp
      000144 D0*00            [24]  361 	pop	_bp
      000146 22               [24]  362 	ret
                                    363 	.area CSEG    (CODE)
                                    364 	.area CONST   (CODE)
                                    365 	.area XINIT   (CODE)
                                    366 	.area CABS    (ABS,CODE)
