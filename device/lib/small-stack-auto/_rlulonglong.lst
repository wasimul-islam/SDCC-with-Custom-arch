                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _rlulonglong
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __rlulonglong
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_rlulonglong'
                                     91 ;------------------------------------------------------------
                                     92 ;s                         Allocated to stack - _bp -3
                                     93 ;l                         Allocated to stack - _bp +1
                                     94 ;top                       Allocated to stack - _bp +16
                                     95 ;middle                    Allocated to stack - _bp +19
                                     96 ;bottom                    Allocated to stack - _bp +22
                                     97 ;b                         Allocated to stack - _bp +25
                                     98 ;sloc0                     Allocated to stack - _bp +9
                                     99 ;sloc1                     Allocated to stack - _bp +12
                                    100 ;------------------------------------------------------------
                                    101 ;	_rlulonglong.c:67: unsigned long long _rlulonglong(unsigned long long l, char s) __SDCC_NONBANKED
                                    102 ;	-----------------------------------------
                                    103 ;	 function _rlulonglong
                                    104 ;	-----------------------------------------
      000000                        105 __rlulonglong:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D C0 04            [24]  120 	push	ar4
      00000F C0 05            [24]  121 	push	ar5
      000011 C0 06            [24]  122 	push	ar6
      000013 C0 07            [24]  123 	push	ar7
      000015 E5 81            [12]  124 	mov	a,sp
      000017 24 13            [12]  125 	add	a,#0x13
      000019 F5 81            [12]  126 	mov	sp,a
                                    127 ;	_rlulonglong.c:69: uint32_t *const top = (uint32_t *)((char *)(&l) + 4);
      00001B AF*00            [24]  128 	mov	r7,_bp
      00001D 0F               [12]  129 	inc	r7
      00001E 8F 04            [24]  130 	mov	ar4,r7
      000020 7D 00            [12]  131 	mov	r5,#0x00
      000022 7E 40            [12]  132 	mov	r6,#0x40
      000024 74 04            [12]  133 	mov	a,#0x04
      000026 2C               [12]  134 	add	a,r4
      000027 FC               [12]  135 	mov	r4,a
      000028 E4               [12]  136 	clr	a
      000029 3D               [12]  137 	addc	a,r5
      00002A FD               [12]  138 	mov	r5,a
      00002B E5*00            [12]  139 	mov	a,_bp
      00002D 24 10            [12]  140 	add	a,#0x10
      00002F F8               [12]  141 	mov	r0,a
      000030 A6 04            [24]  142 	mov	@r0,ar4
      000032 08               [12]  143 	inc	r0
      000033 A6 05            [24]  144 	mov	@r0,ar5
      000035 08               [12]  145 	inc	r0
      000036 A6 06            [24]  146 	mov	@r0,ar6
                                    147 ;	_rlulonglong.c:70: uint16_t *const middle = (uint16_t *)((char *)(&l) + 2);
      000038 8F 03            [24]  148 	mov	ar3,r7
      00003A 8B 02            [24]  149 	mov	ar2,r3
      00003C 7B 00            [12]  150 	mov	r3,#0x00
      00003E 7E 40            [12]  151 	mov	r6,#0x40
      000040 74 02            [12]  152 	mov	a,#0x02
      000042 2A               [12]  153 	add	a,r2
      000043 FA               [12]  154 	mov	r2,a
      000044 E4               [12]  155 	clr	a
      000045 3B               [12]  156 	addc	a,r3
      000046 FB               [12]  157 	mov	r3,a
      000047 E5*00            [12]  158 	mov	a,_bp
      000049 24 13            [12]  159 	add	a,#0x13
      00004B F8               [12]  160 	mov	r0,a
      00004C A6 02            [24]  161 	mov	@r0,ar2
      00004E 08               [12]  162 	inc	r0
      00004F A6 03            [24]  163 	mov	@r0,ar3
      000051 08               [12]  164 	inc	r0
      000052 A6 06            [24]  165 	mov	@r0,ar6
                                    166 ;	_rlulonglong.c:71: uint32_t *const bottom = (uint32_t *)(&l);
      000054 8F 05            [24]  167 	mov	ar5,r7
      000056 E5*00            [12]  168 	mov	a,_bp
      000058 24 16            [12]  169 	add	a,#0x16
      00005A F8               [12]  170 	mov	r0,a
      00005B A6 05            [24]  171 	mov	@r0,ar5
      00005D 08               [12]  172 	inc	r0
      00005E 76 00            [12]  173 	mov	@r0,#0x00
      000060 08               [12]  174 	inc	r0
      000061 76 40            [12]  175 	mov	@r0,#0x40
                                    176 ;	_rlulonglong.c:72: uint16_t *const b = (uint16_t *)(&l);
      000063 E5*00            [12]  177 	mov	a,_bp
      000065 24 19            [12]  178 	add	a,#0x19
      000067 F8               [12]  179 	mov	r0,a
      000068 A6 07            [24]  180 	mov	@r0,ar7
      00006A 08               [12]  181 	inc	r0
      00006B 76 00            [12]  182 	mov	@r0,#0x00
      00006D 08               [12]  183 	inc	r0
      00006E 76 40            [12]  184 	mov	@r0,#0x40
                                    185 ;	_rlulonglong.c:82: (*top) <<= s;
      000070                        186 00103$:
                                    187 ;	_rlulonglong.c:74: for(;s >= 16; s-= 16)
      000070 E5*00            [12]  188 	mov	a,_bp
      000072 24 FD            [12]  189 	add	a,#0xfd
      000074 F8               [12]  190 	mov	r0,a
      000075 B6 10 00         [24]  191 	cjne	@r0,#0x10,00115$
      000078                        192 00115$:
      000078 50 03            [24]  193 	jnc	00116$
      00007A 02r01r59         [24]  194 	ljmp	00101$
      00007D                        195 00116$:
                                    196 ;	_rlulonglong.c:76: b[3] = b[2];
      00007D E5*00            [12]  197 	mov	a,_bp
      00007F 24 19            [12]  198 	add	a,#0x19
      000081 F8               [12]  199 	mov	r0,a
      000082 E5*00            [12]  200 	mov	a,_bp
      000084 24 09            [12]  201 	add	a,#0x09
      000086 F9               [12]  202 	mov	r1,a
      000087 74 06            [12]  203 	mov	a,#0x06
      000089 26               [12]  204 	add	a,@r0
      00008A F7               [12]  205 	mov	@r1,a
      00008B E4               [12]  206 	clr	a
      00008C 08               [12]  207 	inc	r0
      00008D 36               [12]  208 	addc	a,@r0
      00008E 09               [12]  209 	inc	r1
      00008F F7               [12]  210 	mov	@r1,a
      000090 08               [12]  211 	inc	r0
      000091 E6               [12]  212 	mov	a,@r0
      000092 09               [12]  213 	inc	r1
      000093 F7               [12]  214 	mov	@r1,a
      000094 E5*00            [12]  215 	mov	a,_bp
      000096 24 19            [12]  216 	add	a,#0x19
      000098 F8               [12]  217 	mov	r0,a
      000099 74 04            [12]  218 	mov	a,#0x04
      00009B 26               [12]  219 	add	a,@r0
      00009C FA               [12]  220 	mov	r2,a
      00009D E4               [12]  221 	clr	a
      00009E 08               [12]  222 	inc	r0
      00009F 36               [12]  223 	addc	a,@r0
      0000A0 FB               [12]  224 	mov	r3,a
      0000A1 08               [12]  225 	inc	r0
      0000A2 86 07            [24]  226 	mov	ar7,@r0
      0000A4 8A 82            [24]  227 	mov	dpl,r2
      0000A6 8B 83            [24]  228 	mov	dph,r3
      0000A8 8F F0            [24]  229 	mov	b,r7
      0000AA 12r00r00         [24]  230 	lcall	__gptrget
      0000AD FE               [12]  231 	mov	r6,a
      0000AE A3               [24]  232 	inc	dptr
      0000AF 12r00r00         [24]  233 	lcall	__gptrget
      0000B2 FD               [12]  234 	mov	r5,a
      0000B3 E5*00            [12]  235 	mov	a,_bp
      0000B5 24 09            [12]  236 	add	a,#0x09
      0000B7 F8               [12]  237 	mov	r0,a
      0000B8 86 82            [24]  238 	mov	dpl,@r0
      0000BA 08               [12]  239 	inc	r0
      0000BB 86 83            [24]  240 	mov	dph,@r0
      0000BD 08               [12]  241 	inc	r0
      0000BE 86 F0            [24]  242 	mov	b,@r0
      0000C0 EE               [12]  243 	mov	a,r6
      0000C1 12r00r00         [24]  244 	lcall	__gptrput
      0000C4 A3               [24]  245 	inc	dptr
      0000C5 ED               [12]  246 	mov	a,r5
      0000C6 12r00r00         [24]  247 	lcall	__gptrput
                                    248 ;	_rlulonglong.c:77: b[2] = b[1];
      0000C9 E5*00            [12]  249 	mov	a,_bp
      0000CB 24 19            [12]  250 	add	a,#0x19
      0000CD F8               [12]  251 	mov	r0,a
      0000CE E5*00            [12]  252 	mov	a,_bp
      0000D0 24 09            [12]  253 	add	a,#0x09
      0000D2 F9               [12]  254 	mov	r1,a
      0000D3 74 02            [12]  255 	mov	a,#0x02
      0000D5 26               [12]  256 	add	a,@r0
      0000D6 F7               [12]  257 	mov	@r1,a
      0000D7 E4               [12]  258 	clr	a
      0000D8 08               [12]  259 	inc	r0
      0000D9 36               [12]  260 	addc	a,@r0
      0000DA 09               [12]  261 	inc	r1
      0000DB F7               [12]  262 	mov	@r1,a
      0000DC 08               [12]  263 	inc	r0
      0000DD E6               [12]  264 	mov	a,@r0
      0000DE 09               [12]  265 	inc	r1
      0000DF F7               [12]  266 	mov	@r1,a
      0000E0 E5*00            [12]  267 	mov	a,_bp
      0000E2 24 09            [12]  268 	add	a,#0x09
      0000E4 F8               [12]  269 	mov	r0,a
      0000E5 86 82            [24]  270 	mov	dpl,@r0
      0000E7 08               [12]  271 	inc	r0
      0000E8 86 83            [24]  272 	mov	dph,@r0
      0000EA 08               [12]  273 	inc	r0
      0000EB 86 F0            [24]  274 	mov	b,@r0
      0000ED 12r00r00         [24]  275 	lcall	__gptrget
      0000F0 FD               [12]  276 	mov	r5,a
      0000F1 A3               [24]  277 	inc	dptr
      0000F2 12r00r00         [24]  278 	lcall	__gptrget
      0000F5 FE               [12]  279 	mov	r6,a
      0000F6 8A 82            [24]  280 	mov	dpl,r2
      0000F8 8B 83            [24]  281 	mov	dph,r3
      0000FA 8F F0            [24]  282 	mov	b,r7
      0000FC ED               [12]  283 	mov	a,r5
      0000FD 12r00r00         [24]  284 	lcall	__gptrput
      000100 A3               [24]  285 	inc	dptr
      000101 EE               [12]  286 	mov	a,r6
      000102 12r00r00         [24]  287 	lcall	__gptrput
                                    288 ;	_rlulonglong.c:78: b[1] = b[0];
      000105 E5*00            [12]  289 	mov	a,_bp
      000107 24 19            [12]  290 	add	a,#0x19
      000109 F8               [12]  291 	mov	r0,a
      00010A 86 82            [24]  292 	mov	dpl,@r0
      00010C 08               [12]  293 	inc	r0
      00010D 86 83            [24]  294 	mov	dph,@r0
      00010F 08               [12]  295 	inc	r0
      000110 86 F0            [24]  296 	mov	b,@r0
      000112 12r00r00         [24]  297 	lcall	__gptrget
      000115 FE               [12]  298 	mov	r6,a
      000116 A3               [24]  299 	inc	dptr
      000117 12r00r00         [24]  300 	lcall	__gptrget
      00011A FF               [12]  301 	mov	r7,a
      00011B E5*00            [12]  302 	mov	a,_bp
      00011D 24 09            [12]  303 	add	a,#0x09
      00011F F8               [12]  304 	mov	r0,a
      000120 86 82            [24]  305 	mov	dpl,@r0
      000122 08               [12]  306 	inc	r0
      000123 86 83            [24]  307 	mov	dph,@r0
      000125 08               [12]  308 	inc	r0
      000126 86 F0            [24]  309 	mov	b,@r0
      000128 EE               [12]  310 	mov	a,r6
      000129 12r00r00         [24]  311 	lcall	__gptrput
      00012C A3               [24]  312 	inc	dptr
      00012D EF               [12]  313 	mov	a,r7
      00012E 12r00r00         [24]  314 	lcall	__gptrput
                                    315 ;	_rlulonglong.c:79: b[0] = 0;
      000131 E5*00            [12]  316 	mov	a,_bp
      000133 24 19            [12]  317 	add	a,#0x19
      000135 F8               [12]  318 	mov	r0,a
      000136 86 82            [24]  319 	mov	dpl,@r0
      000138 08               [12]  320 	inc	r0
      000139 86 83            [24]  321 	mov	dph,@r0
      00013B 08               [12]  322 	inc	r0
      00013C 86 F0            [24]  323 	mov	b,@r0
      00013E E4               [12]  324 	clr	a
      00013F 12r00r00         [24]  325 	lcall	__gptrput
      000142 A3               [24]  326 	inc	dptr
      000143 12r00r00         [24]  327 	lcall	__gptrput
                                    328 ;	_rlulonglong.c:74: for(;s >= 16; s-= 16)
      000146 E5*00            [12]  329 	mov	a,_bp
      000148 24 FD            [12]  330 	add	a,#0xfd
      00014A F8               [12]  331 	mov	r0,a
      00014B 86 07            [24]  332 	mov	ar7,@r0
      00014D E5*00            [12]  333 	mov	a,_bp
      00014F 24 FD            [12]  334 	add	a,#0xfd
      000151 F8               [12]  335 	mov	r0,a
      000152 EF               [12]  336 	mov	a,r7
      000153 24 F0            [12]  337 	add	a,#0xf0
      000155 F6               [12]  338 	mov	@r0,a
      000156 02r00r70         [24]  339 	ljmp	00103$
      000159                        340 00101$:
                                    341 ;	_rlulonglong.c:82: (*top) <<= s;
      000159 E5*00            [12]  342 	mov	a,_bp
      00015B 24 10            [12]  343 	add	a,#0x10
      00015D F8               [12]  344 	mov	r0,a
      00015E 86 82            [24]  345 	mov	dpl,@r0
      000160 08               [12]  346 	inc	r0
      000161 86 83            [24]  347 	mov	dph,@r0
      000163 08               [12]  348 	inc	r0
      000164 86 F0            [24]  349 	mov	b,@r0
      000166 12r00r00         [24]  350 	lcall	__gptrget
      000169 FA               [12]  351 	mov	r2,a
      00016A A3               [24]  352 	inc	dptr
      00016B 12r00r00         [24]  353 	lcall	__gptrget
      00016E FB               [12]  354 	mov	r3,a
      00016F A3               [24]  355 	inc	dptr
      000170 12r00r00         [24]  356 	lcall	__gptrget
      000173 FE               [12]  357 	mov	r6,a
      000174 A3               [24]  358 	inc	dptr
      000175 12r00r00         [24]  359 	lcall	__gptrget
      000178 FF               [12]  360 	mov	r7,a
      000179 E5*00            [12]  361 	mov	a,_bp
      00017B 24 FD            [12]  362 	add	a,#0xfd
      00017D F8               [12]  363 	mov	r0,a
      00017E 86 05            [24]  364 	mov	ar5,@r0
      000180 8D F0            [24]  365 	mov	b,r5
      000182 05 F0            [12]  366 	inc	b
      000184 E5*00            [12]  367 	mov	a,_bp
      000186 24 0C            [12]  368 	add	a,#0x0c
      000188 F8               [12]  369 	mov	r0,a
      000189 A6 02            [24]  370 	mov	@r0,ar2
      00018B 08               [12]  371 	inc	r0
      00018C A6 03            [24]  372 	mov	@r0,ar3
      00018E 08               [12]  373 	inc	r0
      00018F A6 06            [24]  374 	mov	@r0,ar6
      000191 08               [12]  375 	inc	r0
      000192 A6 07            [24]  376 	mov	@r0,ar7
      000194 18               [12]  377 	dec	r0
      000195 18               [12]  378 	dec	r0
      000196 18               [12]  379 	dec	r0
      000197 80 12            [24]  380 	sjmp	00118$
      000199                        381 00117$:
      000199 E6               [12]  382 	mov	a,@r0
      00019A 26               [12]  383 	add	a,@r0
      00019B F6               [12]  384 	mov	@r0,a
      00019C 08               [12]  385 	inc	r0
      00019D E6               [12]  386 	mov	a,@r0
      00019E 33               [12]  387 	rlc	a
      00019F F6               [12]  388 	mov	@r0,a
      0001A0 08               [12]  389 	inc	r0
      0001A1 E6               [12]  390 	mov	a,@r0
      0001A2 33               [12]  391 	rlc	a
      0001A3 F6               [12]  392 	mov	@r0,a
      0001A4 08               [12]  393 	inc	r0
      0001A5 E6               [12]  394 	mov	a,@r0
      0001A6 33               [12]  395 	rlc	a
      0001A7 F6               [12]  396 	mov	@r0,a
      0001A8 18               [12]  397 	dec	r0
      0001A9 18               [12]  398 	dec	r0
      0001AA 18               [12]  399 	dec	r0
      0001AB                        400 00118$:
      0001AB D5 F0 EB         [24]  401 	djnz	b,00117$
      0001AE E5*00            [12]  402 	mov	a,_bp
      0001B0 24 10            [12]  403 	add	a,#0x10
      0001B2 F8               [12]  404 	mov	r0,a
      0001B3 86 82            [24]  405 	mov	dpl,@r0
      0001B5 08               [12]  406 	inc	r0
      0001B6 86 83            [24]  407 	mov	dph,@r0
      0001B8 08               [12]  408 	inc	r0
      0001B9 86 F0            [24]  409 	mov	b,@r0
      0001BB E5*00            [12]  410 	mov	a,_bp
      0001BD 24 0C            [12]  411 	add	a,#0x0c
      0001BF F9               [12]  412 	mov	r1,a
      0001C0 E7               [12]  413 	mov	a,@r1
      0001C1 12r00r00         [24]  414 	lcall	__gptrput
      0001C4 A3               [24]  415 	inc	dptr
      0001C5 09               [12]  416 	inc	r1
      0001C6 E7               [12]  417 	mov	a,@r1
      0001C7 12r00r00         [24]  418 	lcall	__gptrput
      0001CA A3               [24]  419 	inc	dptr
      0001CB 09               [12]  420 	inc	r1
      0001CC E7               [12]  421 	mov	a,@r1
      0001CD 12r00r00         [24]  422 	lcall	__gptrput
      0001D0 A3               [24]  423 	inc	dptr
      0001D1 09               [12]  424 	inc	r1
      0001D2 E7               [12]  425 	mov	a,@r1
      0001D3 12r00r00         [24]  426 	lcall	__gptrput
                                    427 ;	_rlulonglong.c:83: (*top) |= (((uint32_t)((*middle) & 0xffffu) << s) >> 16);
      0001D6 E5*00            [12]  428 	mov	a,_bp
      0001D8 24 13            [12]  429 	add	a,#0x13
      0001DA F8               [12]  430 	mov	r0,a
      0001DB 86 82            [24]  431 	mov	dpl,@r0
      0001DD 08               [12]  432 	inc	r0
      0001DE 86 83            [24]  433 	mov	dph,@r0
      0001E0 08               [12]  434 	inc	r0
      0001E1 86 F0            [24]  435 	mov	b,@r0
      0001E3 12r00r00         [24]  436 	lcall	__gptrget
      0001E6 FC               [12]  437 	mov	r4,a
      0001E7 A3               [24]  438 	inc	dptr
      0001E8 12r00r00         [24]  439 	lcall	__gptrget
      0001EB FF               [12]  440 	mov	r7,a
      0001EC 7E 00            [12]  441 	mov	r6,#0x00
      0001EE 7B 00            [12]  442 	mov	r3,#0x00
      0001F0 8D F0            [24]  443 	mov	b,r5
      0001F2 05 F0            [12]  444 	inc	b
      0001F4 80 0C            [24]  445 	sjmp	00120$
      0001F6                        446 00119$:
      0001F6 EC               [12]  447 	mov	a,r4
      0001F7 2C               [12]  448 	add	a,r4
      0001F8 FC               [12]  449 	mov	r4,a
      0001F9 EF               [12]  450 	mov	a,r7
      0001FA 33               [12]  451 	rlc	a
      0001FB FF               [12]  452 	mov	r7,a
      0001FC EE               [12]  453 	mov	a,r6
      0001FD 33               [12]  454 	rlc	a
      0001FE FE               [12]  455 	mov	r6,a
      0001FF EB               [12]  456 	mov	a,r3
      000200 33               [12]  457 	rlc	a
      000201 FB               [12]  458 	mov	r3,a
      000202                        459 00120$:
      000202 D5 F0 F1         [24]  460 	djnz	b,00119$
      000205 8E 04            [24]  461 	mov	ar4,r6
      000207 8B 07            [24]  462 	mov	ar7,r3
      000209 E4               [12]  463 	clr	a
      00020A FE               [12]  464 	mov	r6,a
      00020B FB               [12]  465 	mov	r3,a
      00020C E5*00            [12]  466 	mov	a,_bp
      00020E 24 0C            [12]  467 	add	a,#0x0c
      000210 F8               [12]  468 	mov	r0,a
      000211 E6               [12]  469 	mov	a,@r0
      000212 42 04            [12]  470 	orl	ar4,a
      000214 08               [12]  471 	inc	r0
      000215 E6               [12]  472 	mov	a,@r0
      000216 42 07            [12]  473 	orl	ar7,a
      000218 08               [12]  474 	inc	r0
      000219 E6               [12]  475 	mov	a,@r0
      00021A 42 06            [12]  476 	orl	ar6,a
      00021C 08               [12]  477 	inc	r0
      00021D E6               [12]  478 	mov	a,@r0
      00021E 42 03            [12]  479 	orl	ar3,a
      000220 E5*00            [12]  480 	mov	a,_bp
      000222 24 10            [12]  481 	add	a,#0x10
      000224 F8               [12]  482 	mov	r0,a
      000225 86 82            [24]  483 	mov	dpl,@r0
      000227 08               [12]  484 	inc	r0
      000228 86 83            [24]  485 	mov	dph,@r0
      00022A 08               [12]  486 	inc	r0
      00022B 86 F0            [24]  487 	mov	b,@r0
      00022D EC               [12]  488 	mov	a,r4
      00022E 12r00r00         [24]  489 	lcall	__gptrput
      000231 A3               [24]  490 	inc	dptr
      000232 EF               [12]  491 	mov	a,r7
      000233 12r00r00         [24]  492 	lcall	__gptrput
      000236 A3               [24]  493 	inc	dptr
      000237 EE               [12]  494 	mov	a,r6
      000238 12r00r00         [24]  495 	lcall	__gptrput
      00023B A3               [24]  496 	inc	dptr
      00023C EB               [12]  497 	mov	a,r3
      00023D 12r00r00         [24]  498 	lcall	__gptrput
                                    499 ;	_rlulonglong.c:84: (*bottom) <<= s;
      000240 E5*00            [12]  500 	mov	a,_bp
      000242 24 16            [12]  501 	add	a,#0x16
      000244 F8               [12]  502 	mov	r0,a
      000245 86 82            [24]  503 	mov	dpl,@r0
      000247 08               [12]  504 	inc	r0
      000248 86 83            [24]  505 	mov	dph,@r0
      00024A 08               [12]  506 	inc	r0
      00024B 86 F0            [24]  507 	mov	b,@r0
      00024D 12r00r00         [24]  508 	lcall	__gptrget
      000250 FC               [12]  509 	mov	r4,a
      000251 A3               [24]  510 	inc	dptr
      000252 12r00r00         [24]  511 	lcall	__gptrget
      000255 FB               [12]  512 	mov	r3,a
      000256 A3               [24]  513 	inc	dptr
      000257 12r00r00         [24]  514 	lcall	__gptrget
      00025A FE               [12]  515 	mov	r6,a
      00025B A3               [24]  516 	inc	dptr
      00025C 12r00r00         [24]  517 	lcall	__gptrget
      00025F FF               [12]  518 	mov	r7,a
      000260 8D F0            [24]  519 	mov	b,r5
      000262 05 F0            [12]  520 	inc	b
      000264 80 0C            [24]  521 	sjmp	00122$
      000266                        522 00121$:
      000266 EC               [12]  523 	mov	a,r4
      000267 2C               [12]  524 	add	a,r4
      000268 FC               [12]  525 	mov	r4,a
      000269 EB               [12]  526 	mov	a,r3
      00026A 33               [12]  527 	rlc	a
      00026B FB               [12]  528 	mov	r3,a
      00026C EE               [12]  529 	mov	a,r6
      00026D 33               [12]  530 	rlc	a
      00026E FE               [12]  531 	mov	r6,a
      00026F EF               [12]  532 	mov	a,r7
      000270 33               [12]  533 	rlc	a
      000271 FF               [12]  534 	mov	r7,a
      000272                        535 00122$:
      000272 D5 F0 F1         [24]  536 	djnz	b,00121$
      000275 E5*00            [12]  537 	mov	a,_bp
      000277 24 16            [12]  538 	add	a,#0x16
      000279 F8               [12]  539 	mov	r0,a
      00027A 86 82            [24]  540 	mov	dpl,@r0
      00027C 08               [12]  541 	inc	r0
      00027D 86 83            [24]  542 	mov	dph,@r0
      00027F 08               [12]  543 	inc	r0
      000280 86 F0            [24]  544 	mov	b,@r0
      000282 EC               [12]  545 	mov	a,r4
      000283 12r00r00         [24]  546 	lcall	__gptrput
      000286 A3               [24]  547 	inc	dptr
      000287 EB               [12]  548 	mov	a,r3
      000288 12r00r00         [24]  549 	lcall	__gptrput
      00028B A3               [24]  550 	inc	dptr
      00028C EE               [12]  551 	mov	a,r6
      00028D 12r00r00         [24]  552 	lcall	__gptrput
      000290 A3               [24]  553 	inc	dptr
      000291 EF               [12]  554 	mov	a,r7
      000292 12r00r00         [24]  555 	lcall	__gptrput
                                    556 ;	_rlulonglong.c:86: return(l);
      000295 A8*00            [24]  557 	mov	r0,_bp
      000297 08               [12]  558 	inc	r0
      000298 86 82            [24]  559 	mov	dpl,@r0
      00029A 08               [12]  560 	inc	r0
      00029B 86 83            [24]  561 	mov	dph,@r0
      00029D 08               [12]  562 	inc	r0
      00029E 86 F0            [24]  563 	mov	b,@r0
      0002A0 08               [12]  564 	inc	r0
      0002A1 E6               [12]  565 	mov	a,@r0
      0002A2 08               [12]  566 	inc	r0
      0002A3 86 04            [24]  567 	mov	ar4,@r0
      0002A5 08               [12]  568 	inc	r0
      0002A6 86 05            [24]  569 	mov	ar5,@r0
      0002A8 08               [12]  570 	inc	r0
      0002A9 86 06            [24]  571 	mov	ar6,@r0
      0002AB 08               [12]  572 	inc	r0
      0002AC 86 07            [24]  573 	mov	ar7,@r0
                                    574 ;	_rlulonglong.c:87: }
      0002AE 85*00 81         [24]  575 	mov	sp,_bp
      0002B1 D0*00            [24]  576 	pop	_bp
      0002B3 22               [24]  577 	ret
                                    578 	.area CSEG    (CODE)
                                    579 	.area CONST   (CODE)
                                    580 	.area XINIT   (CODE)
                                    581 	.area CABS    (ABS,CODE)
