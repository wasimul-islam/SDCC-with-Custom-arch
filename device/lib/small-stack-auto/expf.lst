                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module expf
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ldexpf
                                     12 	.globl _expf
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'expf'
                                    106 ;------------------------------------------------------------
                                    107 ;x                         Allocated to registers r4 r5 r6 r7 
                                    108 ;n                         Allocated to registers r2 r3 
                                    109 ;xn                        Allocated to stack - _bp +5
                                    110 ;g                         Allocated to stack - _bp +9
                                    111 ;r                         Allocated to registers r4 r5 r6 r7 
                                    112 ;z                         Allocated to stack - _bp +13
                                    113 ;y                         Allocated to stack - _bp +17
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;------------------------------------------------------------
                                    117 ;	expf.c:331: float expf(float x) _FLOAT_FUNC_REENTRANT
                                    118 ;	-----------------------------------------
                                    119 ;	 function expf
                                    120 ;	-----------------------------------------
      000000                        121 _expf:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 C0*00            [24]  130 	push	_bp
      000002 85 81*00         [24]  131 	mov	_bp,sp
      000005 AC 82            [24]  132 	mov	r4,dpl
      000007 AD 83            [24]  133 	mov	r5,dph
      000009 AE F0            [24]  134 	mov	r6,b
      00000B FF               [12]  135 	mov	r7,a
      00000C E5 81            [12]  136 	mov	a,sp
      00000E 24 14            [12]  137 	add	a,#0x14
      000010 F5 81            [12]  138 	mov	sp,a
                                    139 ;	expf.c:337: if(x>=0.0)
      000012 C0 07            [24]  140 	push	ar7
      000014 C0 06            [24]  141 	push	ar6
      000016 C0 05            [24]  142 	push	ar5
      000018 C0 04            [24]  143 	push	ar4
      00001A E4               [12]  144 	clr	a
      00001B C0 E0            [24]  145 	push	acc
      00001D C0 E0            [24]  146 	push	acc
      00001F C0 E0            [24]  147 	push	acc
      000021 C0 E0            [24]  148 	push	acc
      000023 8C 82            [24]  149 	mov	dpl,r4
      000025 8D 83            [24]  150 	mov	dph,r5
      000027 8E F0            [24]  151 	mov	b,r6
      000029 EF               [12]  152 	mov	a,r7
      00002A 12r00r00         [24]  153 	lcall	___fslt
      00002D E5 81            [12]  154 	mov	a,sp
      00002F 24 FC            [12]  155 	add	a,#0xfc
      000031 F5 81            [12]  156 	mov	sp,a
      000033 D0 04            [24]  157 	pop	ar4
      000035 D0 05            [24]  158 	pop	ar5
      000037 D0 06            [24]  159 	pop	ar6
      000039 D0 07            [24]  160 	pop	ar7
      00003B E5 82            [12]  161 	mov	a,dpl
      00003D 24 FF            [12]  162 	add	a,#0xff
      00003F 92*00            [24]  163 	mov	b0,c
      000041 40 14            [24]  164 	jc	00102$
                                    165 ;	expf.c:338: { y=x;  sign=0; }
      000043 E5*00            [12]  166 	mov	a,_bp
      000045 24 11            [12]  167 	add	a,#0x11
      000047 F8               [12]  168 	mov	r0,a
      000048 A6 04            [24]  169 	mov	@r0,ar4
      00004A 08               [12]  170 	inc	r0
      00004B A6 05            [24]  171 	mov	@r0,ar5
      00004D 08               [12]  172 	inc	r0
      00004E A6 06            [24]  173 	mov	@r0,ar6
      000050 08               [12]  174 	inc	r0
      000051 A6 07            [24]  175 	mov	@r0,ar7
                                    176 ;	assignBit
      000053 C2*00            [12]  177 	clr	b0
      000055 80 16            [24]  178 	sjmp	00103$
      000057                        179 00102$:
                                    180 ;	expf.c:340: { y=-x; sign=1; }
      000057 EF               [12]  181 	mov	a,r7
      000058 B2 E7            [12]  182 	cpl	acc.7
      00005A FF               [12]  183 	mov	r7,a
      00005B E5*00            [12]  184 	mov	a,_bp
      00005D 24 11            [12]  185 	add	a,#0x11
      00005F F8               [12]  186 	mov	r0,a
      000060 A6 04            [24]  187 	mov	@r0,ar4
      000062 08               [12]  188 	inc	r0
      000063 A6 05            [24]  189 	mov	@r0,ar5
      000065 08               [12]  190 	inc	r0
      000066 A6 06            [24]  191 	mov	@r0,ar6
      000068 08               [12]  192 	inc	r0
      000069 A6 07            [24]  193 	mov	@r0,ar7
                                    194 ;	assignBit
      00006B D2*00            [12]  195 	setb	b0
      00006D                        196 00103$:
                                    197 ;	expf.c:342: if(y<EXPEPS) return 1.0;
      00006D C0*00            [24]  198 	push	bits
      00006F 74 95            [12]  199 	mov	a,#0x95
      000071 C0 E0            [24]  200 	push	acc
      000073 74 BF            [12]  201 	mov	a,#0xbf
      000075 C0 E0            [24]  202 	push	acc
      000077 74 D6            [12]  203 	mov	a,#0xd6
      000079 C0 E0            [24]  204 	push	acc
      00007B 74 33            [12]  205 	mov	a,#0x33
      00007D C0 E0            [24]  206 	push	acc
      00007F E5*00            [12]  207 	mov	a,_bp
      000081 24 11            [12]  208 	add	a,#0x11
      000083 F8               [12]  209 	mov	r0,a
      000084 86 82            [24]  210 	mov	dpl,@r0
      000086 08               [12]  211 	inc	r0
      000087 86 83            [24]  212 	mov	dph,@r0
      000089 08               [12]  213 	inc	r0
      00008A 86 F0            [24]  214 	mov	b,@r0
      00008C 08               [12]  215 	inc	r0
      00008D E6               [12]  216 	mov	a,@r0
      00008E 12r00r00         [24]  217 	lcall	___fslt
      000091 AD 82            [24]  218 	mov	r5,dpl
      000093 E5 81            [12]  219 	mov	a,sp
      000095 24 FC            [12]  220 	add	a,#0xfc
      000097 F5 81            [12]  221 	mov	sp,a
      000099 D0*00            [24]  222 	pop	bits
      00009B ED               [12]  223 	mov	a,r5
      00009C 60 0B            [24]  224 	jz	00105$
      00009E 90 00 00         [24]  225 	mov	dptr,#0x0000
      0000A1 75 F0 80         [24]  226 	mov	b,#0x80
      0000A4 74 3F            [12]  227 	mov	a,#0x3f
      0000A6 02r04rB4         [24]  228 	ljmp	00118$
      0000A9                        229 00105$:
                                    230 ;	expf.c:344: if(y>BIGX)
      0000A9 C0*00            [24]  231 	push	bits
      0000AB E5*00            [12]  232 	mov	a,_bp
      0000AD 24 11            [12]  233 	add	a,#0x11
      0000AF F8               [12]  234 	mov	r0,a
      0000B0 E6               [12]  235 	mov	a,@r0
      0000B1 C0 E0            [24]  236 	push	acc
      0000B3 08               [12]  237 	inc	r0
      0000B4 E6               [12]  238 	mov	a,@r0
      0000B5 C0 E0            [24]  239 	push	acc
      0000B7 08               [12]  240 	inc	r0
      0000B8 E6               [12]  241 	mov	a,@r0
      0000B9 C0 E0            [24]  242 	push	acc
      0000BB 08               [12]  243 	inc	r0
      0000BC E6               [12]  244 	mov	a,@r0
      0000BD C0 E0            [24]  245 	push	acc
      0000BF 90 72 18         [24]  246 	mov	dptr,#0x7218
      0000C2 75 F0 B1         [24]  247 	mov	b,#0xb1
      0000C5 74 42            [12]  248 	mov	a,#0x42
      0000C7 12r00r00         [24]  249 	lcall	___fslt
      0000CA AD 82            [24]  250 	mov	r5,dpl
      0000CC E5 81            [12]  251 	mov	a,sp
      0000CE 24 FC            [12]  252 	add	a,#0xfc
      0000D0 F5 81            [12]  253 	mov	sp,a
      0000D2 D0*00            [24]  254 	pop	bits
      0000D4 ED               [12]  255 	mov	a,r5
      0000D5 60 1C            [24]  256 	jz	00110$
                                    257 ;	expf.c:346: if(sign)
      0000D7 30*00 10         [24]  258 	jnb	b0,00107$
                                    259 ;	expf.c:348: errno=ERANGE;
      0000DA 75*00 22         [24]  260 	mov	_errno,#0x22
      0000DD 75*01 00         [24]  261 	mov	(_errno + 1),#0x00
                                    262 ;	expf.c:350: ;
      0000E0 90 FF FF         [24]  263 	mov	dptr,#0xffff
      0000E3 74 7F            [12]  264 	mov	a,#0x7f
      0000E5 F5 F0            [12]  265 	mov	b,a
      0000E7 02r04rB4         [24]  266 	ljmp	00118$
      0000EA                        267 00107$:
                                    268 ;	expf.c:354: return 0.0;
      0000EA 90 00 00         [24]  269 	mov	dptr,#(0x00&0x00ff)
      0000ED E4               [12]  270 	clr	a
      0000EE F5 F0            [12]  271 	mov	b,a
      0000F0 02r04rB4         [24]  272 	ljmp	00118$
      0000F3                        273 00110$:
                                    274 ;	expf.c:358: z=y*K1;
      0000F3 C0*00            [24]  275 	push	bits
      0000F5 E5*00            [12]  276 	mov	a,_bp
      0000F7 24 11            [12]  277 	add	a,#0x11
      0000F9 F8               [12]  278 	mov	r0,a
      0000FA E6               [12]  279 	mov	a,@r0
      0000FB C0 E0            [24]  280 	push	acc
      0000FD 08               [12]  281 	inc	r0
      0000FE E6               [12]  282 	mov	a,@r0
      0000FF C0 E0            [24]  283 	push	acc
      000101 08               [12]  284 	inc	r0
      000102 E6               [12]  285 	mov	a,@r0
      000103 C0 E0            [24]  286 	push	acc
      000105 08               [12]  287 	inc	r0
      000106 E6               [12]  288 	mov	a,@r0
      000107 C0 E0            [24]  289 	push	acc
      000109 90 AA 3B         [24]  290 	mov	dptr,#0xaa3b
      00010C 75 F0 B8         [24]  291 	mov	b,#0xb8
      00010F 74 3F            [12]  292 	mov	a,#0x3f
      000111 12r00r00         [24]  293 	lcall	___fsmul
      000114 A8*00            [24]  294 	mov	r0,_bp
      000116 08               [12]  295 	inc	r0
      000117 A6 82            [24]  296 	mov	@r0,dpl
      000119 08               [12]  297 	inc	r0
      00011A A6 83            [24]  298 	mov	@r0,dph
      00011C 08               [12]  299 	inc	r0
      00011D A6 F0            [24]  300 	mov	@r0,b
      00011F 08               [12]  301 	inc	r0
      000120 F6               [12]  302 	mov	@r0,a
      000121 E5 81            [12]  303 	mov	a,sp
      000123 24 FC            [12]  304 	add	a,#0xfc
      000125 F5 81            [12]  305 	mov	sp,a
      000127 D0*00            [24]  306 	pop	bits
                                    307 ;	expf.c:359: n=z;
      000129 A8*00            [24]  308 	mov	r0,_bp
      00012B 08               [12]  309 	inc	r0
      00012C 86 82            [24]  310 	mov	dpl,@r0
      00012E 08               [12]  311 	inc	r0
      00012F 86 83            [24]  312 	mov	dph,@r0
      000131 08               [12]  313 	inc	r0
      000132 86 F0            [24]  314 	mov	b,@r0
      000134 08               [12]  315 	inc	r0
      000135 E6               [12]  316 	mov	a,@r0
      000136 C0*00            [24]  317 	push	bits
      000138 12r00r00         [24]  318 	lcall	___fs2sint
      00013B AA 82            [24]  319 	mov	r2,dpl
      00013D AB 83            [24]  320 	mov	r3,dph
      00013F D0*00            [24]  321 	pop	bits
                                    322 ;	expf.c:361: if(n<0) --n;
      000141 EB               [12]  323 	mov	a,r3
      000142 30 E7 05         [24]  324 	jnb	acc.7,00112$
      000145 1A               [12]  325 	dec	r2
      000146 BA FF 01         [24]  326 	cjne	r2,#0xff,00160$
      000149 1B               [12]  327 	dec	r3
      00014A                        328 00160$:
      00014A                        329 00112$:
                                    330 ;	expf.c:362: if(z-n>=0.5) ++n;
      00014A 8A 82            [24]  331 	mov	dpl,r2
      00014C 8B 83            [24]  332 	mov	dph,r3
      00014E C0 03            [24]  333 	push	ar3
      000150 C0 02            [24]  334 	push	ar2
      000152 C0*00            [24]  335 	push	bits
      000154 12r00r00         [24]  336 	lcall	___sint2fs
      000157 AC 82            [24]  337 	mov	r4,dpl
      000159 AD 83            [24]  338 	mov	r5,dph
      00015B AE F0            [24]  339 	mov	r6,b
      00015D FF               [12]  340 	mov	r7,a
      00015E D0*00            [24]  341 	pop	bits
      000160 C0*00            [24]  342 	push	bits
      000162 C0 04            [24]  343 	push	ar4
      000164 C0 05            [24]  344 	push	ar5
      000166 C0 06            [24]  345 	push	ar6
      000168 C0 07            [24]  346 	push	ar7
      00016A A8*00            [24]  347 	mov	r0,_bp
      00016C 08               [12]  348 	inc	r0
      00016D 86 82            [24]  349 	mov	dpl,@r0
      00016F 08               [12]  350 	inc	r0
      000170 86 83            [24]  351 	mov	dph,@r0
      000172 08               [12]  352 	inc	r0
      000173 86 F0            [24]  353 	mov	b,@r0
      000175 08               [12]  354 	inc	r0
      000176 E6               [12]  355 	mov	a,@r0
      000177 12r00r00         [24]  356 	lcall	___fssub
      00017A AC 82            [24]  357 	mov	r4,dpl
      00017C AD 83            [24]  358 	mov	r5,dph
      00017E AE F0            [24]  359 	mov	r6,b
      000180 FF               [12]  360 	mov	r7,a
      000181 E5 81            [12]  361 	mov	a,sp
      000183 24 FC            [12]  362 	add	a,#0xfc
      000185 F5 81            [12]  363 	mov	sp,a
      000187 D0*00            [24]  364 	pop	bits
      000189 C0*00            [24]  365 	push	bits
      00018B E4               [12]  366 	clr	a
      00018C C0 E0            [24]  367 	push	acc
      00018E C0 E0            [24]  368 	push	acc
      000190 C0 E0            [24]  369 	push	acc
      000192 74 3F            [12]  370 	mov	a,#0x3f
      000194 C0 E0            [24]  371 	push	acc
      000196 8C 82            [24]  372 	mov	dpl,r4
      000198 8D 83            [24]  373 	mov	dph,r5
      00019A 8E F0            [24]  374 	mov	b,r6
      00019C EF               [12]  375 	mov	a,r7
      00019D 12r00r00         [24]  376 	lcall	___fslt
      0001A0 E5 81            [12]  377 	mov	a,sp
      0001A2 24 FC            [12]  378 	add	a,#0xfc
      0001A4 F5 81            [12]  379 	mov	sp,a
      0001A6 D0*00            [24]  380 	pop	bits
      0001A8 D0 02            [24]  381 	pop	ar2
      0001AA D0 03            [24]  382 	pop	ar3
      0001AC E5 82            [12]  383 	mov	a,dpl
      0001AE 24 FF            [12]  384 	add	a,#0xff
      0001B0 92*00            [24]  385 	mov	b1,c
      0001B2 40 05            [24]  386 	jc	00114$
      0001B4 0A               [12]  387 	inc	r2
      0001B5 BA 00 01         [24]  388 	cjne	r2,#0x00,00162$
      0001B8 0B               [12]  389 	inc	r3
      0001B9                        390 00162$:
      0001B9                        391 00114$:
                                    392 ;	expf.c:363: xn=n;
      0001B9 8A 82            [24]  393 	mov	dpl,r2
      0001BB 8B 83            [24]  394 	mov	dph,r3
      0001BD C0 03            [24]  395 	push	ar3
      0001BF C0 02            [24]  396 	push	ar2
      0001C1 C0*00            [24]  397 	push	bits
      0001C3 12r00r00         [24]  398 	lcall	___sint2fs
      0001C6 AC 82            [24]  399 	mov	r4,dpl
      0001C8 AD 83            [24]  400 	mov	r5,dph
      0001CA AE F0            [24]  401 	mov	r6,b
      0001CC FF               [12]  402 	mov	r7,a
      0001CD D0*00            [24]  403 	pop	bits
      0001CF E5*00            [12]  404 	mov	a,_bp
      0001D1 24 05            [12]  405 	add	a,#0x05
      0001D3 F8               [12]  406 	mov	r0,a
      0001D4 A6 04            [24]  407 	mov	@r0,ar4
      0001D6 08               [12]  408 	inc	r0
      0001D7 A6 05            [24]  409 	mov	@r0,ar5
      0001D9 08               [12]  410 	inc	r0
      0001DA A6 06            [24]  411 	mov	@r0,ar6
      0001DC 08               [12]  412 	inc	r0
      0001DD A6 07            [24]  413 	mov	@r0,ar7
                                    414 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      0001DF C0*00            [24]  415 	push	bits
      0001E1 E5*00            [12]  416 	mov	a,_bp
      0001E3 24 05            [12]  417 	add	a,#0x05
      0001E5 F8               [12]  418 	mov	r0,a
      0001E6 E6               [12]  419 	mov	a,@r0
      0001E7 C0 E0            [24]  420 	push	acc
      0001E9 08               [12]  421 	inc	r0
      0001EA E6               [12]  422 	mov	a,@r0
      0001EB C0 E0            [24]  423 	push	acc
      0001ED 08               [12]  424 	inc	r0
      0001EE E6               [12]  425 	mov	a,@r0
      0001EF C0 E0            [24]  426 	push	acc
      0001F1 08               [12]  427 	inc	r0
      0001F2 E6               [12]  428 	mov	a,@r0
      0001F3 C0 E0            [24]  429 	push	acc
      0001F5 90 80 00         [24]  430 	mov	dptr,#0x8000
      0001F8 75 F0 31         [24]  431 	mov	b,#0x31
      0001FB 74 3F            [12]  432 	mov	a,#0x3f
      0001FD 12r00r00         [24]  433 	lcall	___fsmul
      000200 AC 82            [24]  434 	mov	r4,dpl
      000202 AD 83            [24]  435 	mov	r5,dph
      000204 AE F0            [24]  436 	mov	r6,b
      000206 FF               [12]  437 	mov	r7,a
      000207 E5 81            [12]  438 	mov	a,sp
      000209 24 FC            [12]  439 	add	a,#0xfc
      00020B F5 81            [12]  440 	mov	sp,a
      00020D D0*00            [24]  441 	pop	bits
      00020F C0*00            [24]  442 	push	bits
      000211 C0 04            [24]  443 	push	ar4
      000213 C0 05            [24]  444 	push	ar5
      000215 C0 06            [24]  445 	push	ar6
      000217 C0 07            [24]  446 	push	ar7
      000219 E5*00            [12]  447 	mov	a,_bp
      00021B 24 11            [12]  448 	add	a,#0x11
      00021D F8               [12]  449 	mov	r0,a
      00021E 86 82            [24]  450 	mov	dpl,@r0
      000220 08               [12]  451 	inc	r0
      000221 86 83            [24]  452 	mov	dph,@r0
      000223 08               [12]  453 	inc	r0
      000224 86 F0            [24]  454 	mov	b,@r0
      000226 08               [12]  455 	inc	r0
      000227 E6               [12]  456 	mov	a,@r0
      000228 12r00r00         [24]  457 	lcall	___fssub
      00022B A8*00            [24]  458 	mov	r0,_bp
      00022D 08               [12]  459 	inc	r0
      00022E A6 82            [24]  460 	mov	@r0,dpl
      000230 08               [12]  461 	inc	r0
      000231 A6 83            [24]  462 	mov	@r0,dph
      000233 08               [12]  463 	inc	r0
      000234 A6 F0            [24]  464 	mov	@r0,b
      000236 08               [12]  465 	inc	r0
      000237 F6               [12]  466 	mov	@r0,a
      000238 E5 81            [12]  467 	mov	a,sp
      00023A 24 FC            [12]  468 	add	a,#0xfc
      00023C F5 81            [12]  469 	mov	sp,a
      00023E D0*00            [24]  470 	pop	bits
      000240 C0*00            [24]  471 	push	bits
      000242 E5*00            [12]  472 	mov	a,_bp
      000244 24 05            [12]  473 	add	a,#0x05
      000246 F8               [12]  474 	mov	r0,a
      000247 E6               [12]  475 	mov	a,@r0
      000248 C0 E0            [24]  476 	push	acc
      00024A 08               [12]  477 	inc	r0
      00024B E6               [12]  478 	mov	a,@r0
      00024C C0 E0            [24]  479 	push	acc
      00024E 08               [12]  480 	inc	r0
      00024F E6               [12]  481 	mov	a,@r0
      000250 C0 E0            [24]  482 	push	acc
      000252 08               [12]  483 	inc	r0
      000253 E6               [12]  484 	mov	a,@r0
      000254 C0 E0            [24]  485 	push	acc
      000256 90 80 83         [24]  486 	mov	dptr,#0x8083
      000259 75 F0 5E         [24]  487 	mov	b,#0x5e
      00025C 74 B9            [12]  488 	mov	a,#0xb9
      00025E 12r00r00         [24]  489 	lcall	___fsmul
      000261 AC 82            [24]  490 	mov	r4,dpl
      000263 AD 83            [24]  491 	mov	r5,dph
      000265 AE F0            [24]  492 	mov	r6,b
      000267 FF               [12]  493 	mov	r7,a
      000268 E5 81            [12]  494 	mov	a,sp
      00026A 24 FC            [12]  495 	add	a,#0xfc
      00026C F5 81            [12]  496 	mov	sp,a
      00026E D0*00            [24]  497 	pop	bits
      000270 C0*00            [24]  498 	push	bits
      000272 C0 04            [24]  499 	push	ar4
      000274 C0 05            [24]  500 	push	ar5
      000276 C0 06            [24]  501 	push	ar6
      000278 C0 07            [24]  502 	push	ar7
      00027A A8*00            [24]  503 	mov	r0,_bp
      00027C 08               [12]  504 	inc	r0
      00027D 86 82            [24]  505 	mov	dpl,@r0
      00027F 08               [12]  506 	inc	r0
      000280 86 83            [24]  507 	mov	dph,@r0
      000282 08               [12]  508 	inc	r0
      000283 86 F0            [24]  509 	mov	b,@r0
      000285 08               [12]  510 	inc	r0
      000286 E6               [12]  511 	mov	a,@r0
      000287 12r00r00         [24]  512 	lcall	___fssub
      00028A AC 82            [24]  513 	mov	r4,dpl
      00028C AD 83            [24]  514 	mov	r5,dph
      00028E AE F0            [24]  515 	mov	r6,b
      000290 FF               [12]  516 	mov	r7,a
      000291 E5 81            [12]  517 	mov	a,sp
      000293 24 FC            [12]  518 	add	a,#0xfc
      000295 F5 81            [12]  519 	mov	sp,a
      000297 D0*00            [24]  520 	pop	bits
      000299 E5*00            [12]  521 	mov	a,_bp
      00029B 24 09            [12]  522 	add	a,#0x09
      00029D F8               [12]  523 	mov	r0,a
      00029E A6 04            [24]  524 	mov	@r0,ar4
      0002A0 08               [12]  525 	inc	r0
      0002A1 A6 05            [24]  526 	mov	@r0,ar5
      0002A3 08               [12]  527 	inc	r0
      0002A4 A6 06            [24]  528 	mov	@r0,ar6
      0002A6 08               [12]  529 	inc	r0
      0002A7 A6 07            [24]  530 	mov	@r0,ar7
                                    531 ;	expf.c:365: z=g*g;
      0002A9 C0*00            [24]  532 	push	bits
      0002AB E5*00            [12]  533 	mov	a,_bp
      0002AD 24 09            [12]  534 	add	a,#0x09
      0002AF F8               [12]  535 	mov	r0,a
      0002B0 E6               [12]  536 	mov	a,@r0
      0002B1 C0 E0            [24]  537 	push	acc
      0002B3 08               [12]  538 	inc	r0
      0002B4 E6               [12]  539 	mov	a,@r0
      0002B5 C0 E0            [24]  540 	push	acc
      0002B7 08               [12]  541 	inc	r0
      0002B8 E6               [12]  542 	mov	a,@r0
      0002B9 C0 E0            [24]  543 	push	acc
      0002BB 08               [12]  544 	inc	r0
      0002BC E6               [12]  545 	mov	a,@r0
      0002BD C0 E0            [24]  546 	push	acc
      0002BF E5*00            [12]  547 	mov	a,_bp
      0002C1 24 09            [12]  548 	add	a,#0x09
      0002C3 F8               [12]  549 	mov	r0,a
      0002C4 86 82            [24]  550 	mov	dpl,@r0
      0002C6 08               [12]  551 	inc	r0
      0002C7 86 83            [24]  552 	mov	dph,@r0
      0002C9 08               [12]  553 	inc	r0
      0002CA 86 F0            [24]  554 	mov	b,@r0
      0002CC 08               [12]  555 	inc	r0
      0002CD E6               [12]  556 	mov	a,@r0
      0002CE 12r00r00         [24]  557 	lcall	___fsmul
      0002D1 AC 82            [24]  558 	mov	r4,dpl
      0002D3 AD 83            [24]  559 	mov	r5,dph
      0002D5 AE F0            [24]  560 	mov	r6,b
      0002D7 FF               [12]  561 	mov	r7,a
      0002D8 E5 81            [12]  562 	mov	a,sp
      0002DA 24 FC            [12]  563 	add	a,#0xfc
      0002DC F5 81            [12]  564 	mov	sp,a
      0002DE D0*00            [24]  565 	pop	bits
      0002E0 E5*00            [12]  566 	mov	a,_bp
      0002E2 24 0D            [12]  567 	add	a,#0x0d
      0002E4 F8               [12]  568 	mov	r0,a
      0002E5 A6 04            [24]  569 	mov	@r0,ar4
      0002E7 08               [12]  570 	inc	r0
      0002E8 A6 05            [24]  571 	mov	@r0,ar5
      0002EA 08               [12]  572 	inc	r0
      0002EB A6 06            [24]  573 	mov	@r0,ar6
      0002ED 08               [12]  574 	inc	r0
      0002EE A6 07            [24]  575 	mov	@r0,ar7
                                    576 ;	expf.c:366: r=P(z)*g;
      0002F0 C0*00            [24]  577 	push	bits
      0002F2 E5*00            [12]  578 	mov	a,_bp
      0002F4 24 0D            [12]  579 	add	a,#0x0d
      0002F6 F8               [12]  580 	mov	r0,a
      0002F7 E6               [12]  581 	mov	a,@r0
      0002F8 C0 E0            [24]  582 	push	acc
      0002FA 08               [12]  583 	inc	r0
      0002FB E6               [12]  584 	mov	a,@r0
      0002FC C0 E0            [24]  585 	push	acc
      0002FE 08               [12]  586 	inc	r0
      0002FF E6               [12]  587 	mov	a,@r0
      000300 C0 E0            [24]  588 	push	acc
      000302 08               [12]  589 	inc	r0
      000303 E6               [12]  590 	mov	a,@r0
      000304 C0 E0            [24]  591 	push	acc
      000306 90 53 08         [24]  592 	mov	dptr,#0x5308
      000309 75 F0 88         [24]  593 	mov	b,#0x88
      00030C 74 3B            [12]  594 	mov	a,#0x3b
      00030E 12r00r00         [24]  595 	lcall	___fsmul
      000311 AC 82            [24]  596 	mov	r4,dpl
      000313 AD 83            [24]  597 	mov	r5,dph
      000315 AE F0            [24]  598 	mov	r6,b
      000317 FF               [12]  599 	mov	r7,a
      000318 E5 81            [12]  600 	mov	a,sp
      00031A 24 FC            [12]  601 	add	a,#0xfc
      00031C F5 81            [12]  602 	mov	sp,a
      00031E D0*00            [24]  603 	pop	bits
      000320 C0*00            [24]  604 	push	bits
      000322 E4               [12]  605 	clr	a
      000323 C0 E0            [24]  606 	push	acc
      000325 C0 E0            [24]  607 	push	acc
      000327 74 80            [12]  608 	mov	a,#0x80
      000329 C0 E0            [24]  609 	push	acc
      00032B 74 3E            [12]  610 	mov	a,#0x3e
      00032D C0 E0            [24]  611 	push	acc
      00032F 8C 82            [24]  612 	mov	dpl,r4
      000331 8D 83            [24]  613 	mov	dph,r5
      000333 8E F0            [24]  614 	mov	b,r6
      000335 EF               [12]  615 	mov	a,r7
      000336 12r00r00         [24]  616 	lcall	___fsadd
      000339 AC 82            [24]  617 	mov	r4,dpl
      00033B AD 83            [24]  618 	mov	r5,dph
      00033D AE F0            [24]  619 	mov	r6,b
      00033F FF               [12]  620 	mov	r7,a
      000340 E5 81            [12]  621 	mov	a,sp
      000342 24 FC            [12]  622 	add	a,#0xfc
      000344 F5 81            [12]  623 	mov	sp,a
      000346 D0*00            [24]  624 	pop	bits
      000348 C0*00            [24]  625 	push	bits
      00034A E5*00            [12]  626 	mov	a,_bp
      00034C 24 09            [12]  627 	add	a,#0x09
      00034E F8               [12]  628 	mov	r0,a
      00034F E6               [12]  629 	mov	a,@r0
      000350 C0 E0            [24]  630 	push	acc
      000352 08               [12]  631 	inc	r0
      000353 E6               [12]  632 	mov	a,@r0
      000354 C0 E0            [24]  633 	push	acc
      000356 08               [12]  634 	inc	r0
      000357 E6               [12]  635 	mov	a,@r0
      000358 C0 E0            [24]  636 	push	acc
      00035A 08               [12]  637 	inc	r0
      00035B E6               [12]  638 	mov	a,@r0
      00035C C0 E0            [24]  639 	push	acc
      00035E 8C 82            [24]  640 	mov	dpl,r4
      000360 8D 83            [24]  641 	mov	dph,r5
      000362 8E F0            [24]  642 	mov	b,r6
      000364 EF               [12]  643 	mov	a,r7
      000365 12r00r00         [24]  644 	lcall	___fsmul
      000368 A8*00            [24]  645 	mov	r0,_bp
      00036A 08               [12]  646 	inc	r0
      00036B A6 82            [24]  647 	mov	@r0,dpl
      00036D 08               [12]  648 	inc	r0
      00036E A6 83            [24]  649 	mov	@r0,dph
      000370 08               [12]  650 	inc	r0
      000371 A6 F0            [24]  651 	mov	@r0,b
      000373 08               [12]  652 	inc	r0
      000374 F6               [12]  653 	mov	@r0,a
      000375 E5 81            [12]  654 	mov	a,sp
      000377 24 FC            [12]  655 	add	a,#0xfc
      000379 F5 81            [12]  656 	mov	sp,a
      00037B D0*00            [24]  657 	pop	bits
                                    658 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      00037D C0*00            [24]  659 	push	bits
      00037F E5*00            [12]  660 	mov	a,_bp
      000381 24 0D            [12]  661 	add	a,#0x0d
      000383 F8               [12]  662 	mov	r0,a
      000384 E6               [12]  663 	mov	a,@r0
      000385 C0 E0            [24]  664 	push	acc
      000387 08               [12]  665 	inc	r0
      000388 E6               [12]  666 	mov	a,@r0
      000389 C0 E0            [24]  667 	push	acc
      00038B 08               [12]  668 	inc	r0
      00038C E6               [12]  669 	mov	a,@r0
      00038D C0 E0            [24]  670 	push	acc
      00038F 08               [12]  671 	inc	r0
      000390 E6               [12]  672 	mov	a,@r0
      000391 C0 E0            [24]  673 	push	acc
      000393 90 BF 5B         [24]  674 	mov	dptr,#0xbf5b
      000396 75 F0 4C         [24]  675 	mov	b,#0x4c
      000399 74 3D            [12]  676 	mov	a,#0x3d
      00039B 12r00r00         [24]  677 	lcall	___fsmul
      00039E AC 82            [24]  678 	mov	r4,dpl
      0003A0 AD 83            [24]  679 	mov	r5,dph
      0003A2 AE F0            [24]  680 	mov	r6,b
      0003A4 FF               [12]  681 	mov	r7,a
      0003A5 E5 81            [12]  682 	mov	a,sp
      0003A7 24 FC            [12]  683 	add	a,#0xfc
      0003A9 F5 81            [12]  684 	mov	sp,a
      0003AB D0*00            [24]  685 	pop	bits
      0003AD C0*00            [24]  686 	push	bits
      0003AF E4               [12]  687 	clr	a
      0003B0 C0 E0            [24]  688 	push	acc
      0003B2 C0 E0            [24]  689 	push	acc
      0003B4 C0 E0            [24]  690 	push	acc
      0003B6 74 3F            [12]  691 	mov	a,#0x3f
      0003B8 C0 E0            [24]  692 	push	acc
      0003BA 8C 82            [24]  693 	mov	dpl,r4
      0003BC 8D 83            [24]  694 	mov	dph,r5
      0003BE 8E F0            [24]  695 	mov	b,r6
      0003C0 EF               [12]  696 	mov	a,r7
      0003C1 12r00r00         [24]  697 	lcall	___fsadd
      0003C4 AC 82            [24]  698 	mov	r4,dpl
      0003C6 AD 83            [24]  699 	mov	r5,dph
      0003C8 AE F0            [24]  700 	mov	r6,b
      0003CA FF               [12]  701 	mov	r7,a
      0003CB E5 81            [12]  702 	mov	a,sp
      0003CD 24 FC            [12]  703 	add	a,#0xfc
      0003CF F5 81            [12]  704 	mov	sp,a
      0003D1 D0*00            [24]  705 	pop	bits
      0003D3 C0*00            [24]  706 	push	bits
      0003D5 A8*00            [24]  707 	mov	r0,_bp
      0003D7 08               [12]  708 	inc	r0
      0003D8 E6               [12]  709 	mov	a,@r0
      0003D9 C0 E0            [24]  710 	push	acc
      0003DB 08               [12]  711 	inc	r0
      0003DC E6               [12]  712 	mov	a,@r0
      0003DD C0 E0            [24]  713 	push	acc
      0003DF 08               [12]  714 	inc	r0
      0003E0 E6               [12]  715 	mov	a,@r0
      0003E1 C0 E0            [24]  716 	push	acc
      0003E3 08               [12]  717 	inc	r0
      0003E4 E6               [12]  718 	mov	a,@r0
      0003E5 C0 E0            [24]  719 	push	acc
      0003E7 8C 82            [24]  720 	mov	dpl,r4
      0003E9 8D 83            [24]  721 	mov	dph,r5
      0003EB 8E F0            [24]  722 	mov	b,r6
      0003ED EF               [12]  723 	mov	a,r7
      0003EE 12r00r00         [24]  724 	lcall	___fssub
      0003F1 AC 82            [24]  725 	mov	r4,dpl
      0003F3 AD 83            [24]  726 	mov	r5,dph
      0003F5 AE F0            [24]  727 	mov	r6,b
      0003F7 FF               [12]  728 	mov	r7,a
      0003F8 E5 81            [12]  729 	mov	a,sp
      0003FA 24 FC            [12]  730 	add	a,#0xfc
      0003FC F5 81            [12]  731 	mov	sp,a
      0003FE D0*00            [24]  732 	pop	bits
      000400 C0*00            [24]  733 	push	bits
      000402 C0 04            [24]  734 	push	ar4
      000404 C0 05            [24]  735 	push	ar5
      000406 C0 06            [24]  736 	push	ar6
      000408 C0 07            [24]  737 	push	ar7
      00040A A8*00            [24]  738 	mov	r0,_bp
      00040C 08               [12]  739 	inc	r0
      00040D 86 82            [24]  740 	mov	dpl,@r0
      00040F 08               [12]  741 	inc	r0
      000410 86 83            [24]  742 	mov	dph,@r0
      000412 08               [12]  743 	inc	r0
      000413 86 F0            [24]  744 	mov	b,@r0
      000415 08               [12]  745 	inc	r0
      000416 E6               [12]  746 	mov	a,@r0
      000417 12r00r00         [24]  747 	lcall	___fsdiv
      00041A AC 82            [24]  748 	mov	r4,dpl
      00041C AD 83            [24]  749 	mov	r5,dph
      00041E AE F0            [24]  750 	mov	r6,b
      000420 FF               [12]  751 	mov	r7,a
      000421 E5 81            [12]  752 	mov	a,sp
      000423 24 FC            [12]  753 	add	a,#0xfc
      000425 F5 81            [12]  754 	mov	sp,a
      000427 D0*00            [24]  755 	pop	bits
      000429 C0*00            [24]  756 	push	bits
      00042B E4               [12]  757 	clr	a
      00042C C0 E0            [24]  758 	push	acc
      00042E C0 E0            [24]  759 	push	acc
      000430 C0 E0            [24]  760 	push	acc
      000432 74 3F            [12]  761 	mov	a,#0x3f
      000434 C0 E0            [24]  762 	push	acc
      000436 8C 82            [24]  763 	mov	dpl,r4
      000438 8D 83            [24]  764 	mov	dph,r5
      00043A 8E F0            [24]  765 	mov	b,r6
      00043C EF               [12]  766 	mov	a,r7
      00043D 12r00r00         [24]  767 	lcall	___fsadd
      000440 AC 82            [24]  768 	mov	r4,dpl
      000442 AD 83            [24]  769 	mov	r5,dph
      000444 AE F0            [24]  770 	mov	r6,b
      000446 FF               [12]  771 	mov	r7,a
      000447 E5 81            [12]  772 	mov	a,sp
      000449 24 FC            [12]  773 	add	a,#0xfc
      00044B F5 81            [12]  774 	mov	sp,a
      00044D D0*00            [24]  775 	pop	bits
      00044F D0 02            [24]  776 	pop	ar2
      000451 D0 03            [24]  777 	pop	ar3
                                    778 ;	expf.c:369: n++;
      000453 0A               [12]  779 	inc	r2
      000454 BA 00 01         [24]  780 	cjne	r2,#0x00,00163$
      000457 0B               [12]  781 	inc	r3
      000458                        782 00163$:
                                    783 ;	expf.c:370: z=ldexpf(r, n);
      000458 C0*00            [24]  784 	push	bits
      00045A C0 02            [24]  785 	push	ar2
      00045C C0 03            [24]  786 	push	ar3
      00045E 8C 82            [24]  787 	mov	dpl,r4
      000460 8D 83            [24]  788 	mov	dph,r5
      000462 8E F0            [24]  789 	mov	b,r6
      000464 EF               [12]  790 	mov	a,r7
      000465 12r00r00         [24]  791 	lcall	_ldexpf
      000468 AC 82            [24]  792 	mov	r4,dpl
      00046A AD 83            [24]  793 	mov	r5,dph
      00046C AE F0            [24]  794 	mov	r6,b
      00046E FF               [12]  795 	mov	r7,a
      00046F 15 81            [12]  796 	dec	sp
      000471 15 81            [12]  797 	dec	sp
      000473 D0*00            [24]  798 	pop	bits
                                    799 ;	expf.c:371: if(sign)
      000475 30*00 35         [24]  800 	jnb	b0,00116$
                                    801 ;	expf.c:372: return 1.0/z;
      000478 C0 04            [24]  802 	push	ar4
      00047A C0 05            [24]  803 	push	ar5
      00047C C0 06            [24]  804 	push	ar6
      00047E C0 07            [24]  805 	push	ar7
      000480 90 00 00         [24]  806 	mov	dptr,#0x0000
      000483 75 F0 80         [24]  807 	mov	b,#0x80
      000486 74 3F            [12]  808 	mov	a,#0x3f
      000488 12r00r00         [24]  809 	lcall	___fsdiv
      00048B A8*00            [24]  810 	mov	r0,_bp
      00048D 08               [12]  811 	inc	r0
      00048E A6 82            [24]  812 	mov	@r0,dpl
      000490 08               [12]  813 	inc	r0
      000491 A6 83            [24]  814 	mov	@r0,dph
      000493 08               [12]  815 	inc	r0
      000494 A6 F0            [24]  816 	mov	@r0,b
      000496 08               [12]  817 	inc	r0
      000497 F6               [12]  818 	mov	@r0,a
      000498 E5 81            [12]  819 	mov	a,sp
      00049A 24 FC            [12]  820 	add	a,#0xfc
      00049C F5 81            [12]  821 	mov	sp,a
      00049E A8*00            [24]  822 	mov	r0,_bp
      0004A0 08               [12]  823 	inc	r0
      0004A1 86 82            [24]  824 	mov	dpl,@r0
      0004A3 08               [12]  825 	inc	r0
      0004A4 86 83            [24]  826 	mov	dph,@r0
      0004A6 08               [12]  827 	inc	r0
      0004A7 86 F0            [24]  828 	mov	b,@r0
      0004A9 08               [12]  829 	inc	r0
      0004AA E6               [12]  830 	mov	a,@r0
      0004AB 80 07            [24]  831 	sjmp	00118$
      0004AD                        832 00116$:
                                    833 ;	expf.c:374: return z;
      0004AD 8C 82            [24]  834 	mov	dpl,r4
      0004AF 8D 83            [24]  835 	mov	dph,r5
      0004B1 8E F0            [24]  836 	mov	b,r6
      0004B3 EF               [12]  837 	mov	a,r7
      0004B4                        838 00118$:
                                    839 ;	expf.c:375: }
      0004B4 85*00 81         [24]  840 	mov	sp,_bp
      0004B7 D0*00            [24]  841 	pop	_bp
      0004B9 22               [24]  842 	ret
                                    843 	.area CSEG    (CODE)
                                    844 	.area CONST   (CODE)
                                    845 	.area XINIT   (CODE)
                                    846 	.area CABS    (ABS,CODE)
