                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module wcstombs
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wctomb
                                     12 	.globl _wcstombs
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'wcstombs'
                                     92 ;------------------------------------------------------------
                                     93 ;pwcs                      Allocated to stack - _bp -5
                                     94 ;n                         Allocated to stack - _bp -7
                                     95 ;s                         Allocated to stack - _bp +1
                                     96 ;m                         Allocated to registers r3 r4 
                                     97 ;buffer                    Allocated to stack - _bp +12
                                     98 ;b                         Allocated to registers r7 r6 
                                     99 ;sloc0                     Allocated to stack - _bp +4
                                    100 ;sloc1                     Allocated to stack - _bp +7
                                    101 ;sloc2                     Allocated to stack - _bp +8
                                    102 ;------------------------------------------------------------
                                    103 ;	wcstombs.c:33: size_t wcstombs(char *restrict s, const wchar_t *restrict pwcs, size_t n)
                                    104 ;	-----------------------------------------
                                    105 ;	 function wcstombs
                                    106 ;	-----------------------------------------
      000000                        107 _wcstombs:
                           000007   108 	ar7 = 0x07
                           000006   109 	ar6 = 0x06
                           000005   110 	ar5 = 0x05
                           000004   111 	ar4 = 0x04
                           000003   112 	ar3 = 0x03
                           000002   113 	ar2 = 0x02
                           000001   114 	ar1 = 0x01
                           000000   115 	ar0 = 0x00
      000000 C0*00            [24]  116 	push	_bp
      000002 85 81*00         [24]  117 	mov	_bp,sp
      000005 C0 82            [24]  118 	push	dpl
      000007 C0 83            [24]  119 	push	dph
      000009 C0 F0            [24]  120 	push	b
      00000B E5 81            [12]  121 	mov	a,sp
      00000D 24 0C            [12]  122 	add	a,#0x0c
      00000F F5 81            [12]  123 	mov	sp,a
                                    124 ;	wcstombs.c:35: size_t m = 0;
                                    125 ;	wcstombs.c:38: while(n > MB_LEN_MAX || n >= wctomb(buffer, *pwcs))
      000011 E4               [12]  126 	clr	a
      000012 FB               [12]  127 	mov	r3,a
      000013 FC               [12]  128 	mov	r4,a
      000014 E5*00            [12]  129 	mov	a,_bp
      000016 24 07            [12]  130 	add	a,#0x07
      000018 F8               [12]  131 	mov	r0,a
      000019 E5*00            [12]  132 	mov	a,_bp
      00001B 24 0C            [12]  133 	add	a,#0x0c
      00001D F6               [12]  134 	mov	@r0,a
      00001E E5*00            [12]  135 	mov	a,_bp
      000020 24 FB            [12]  136 	add	a,#0xfb
      000022 F8               [12]  137 	mov	r0,a
      000023 E5*00            [12]  138 	mov	a,_bp
      000025 24 04            [12]  139 	add	a,#0x04
      000027 F9               [12]  140 	mov	r1,a
      000028 E6               [12]  141 	mov	a,@r0
      000029 F7               [12]  142 	mov	@r1,a
      00002A 08               [12]  143 	inc	r0
      00002B E6               [12]  144 	mov	a,@r0
      00002C 09               [12]  145 	inc	r1
      00002D F7               [12]  146 	mov	@r1,a
      00002E 08               [12]  147 	inc	r0
      00002F E6               [12]  148 	mov	a,@r0
      000030 09               [12]  149 	inc	r1
      000031 F7               [12]  150 	mov	@r1,a
      000032                        151 00107$:
      000032 E5*00            [12]  152 	mov	a,_bp
      000034 24 F9            [12]  153 	add	a,#0xf9
      000036 F8               [12]  154 	mov	r0,a
      000037 C3               [12]  155 	clr	c
      000038 74 04            [12]  156 	mov	a,#0x04
      00003A 96               [12]  157 	subb	a,@r0
      00003B E4               [12]  158 	clr	a
      00003C 08               [12]  159 	inc	r0
      00003D 96               [12]  160 	subb	a,@r0
      00003E 40 7A            [24]  161 	jc	00108$
      000040 C0 03            [24]  162 	push	ar3
      000042 C0 04            [24]  163 	push	ar4
      000044 E5*00            [12]  164 	mov	a,_bp
      000046 24 04            [12]  165 	add	a,#0x04
      000048 F8               [12]  166 	mov	r0,a
      000049 86 82            [24]  167 	mov	dpl,@r0
      00004B 08               [12]  168 	inc	r0
      00004C 86 83            [24]  169 	mov	dph,@r0
      00004E 08               [12]  170 	inc	r0
      00004F 86 F0            [24]  171 	mov	b,@r0
      000051 E5*00            [12]  172 	mov	a,_bp
      000053 24 08            [12]  173 	add	a,#0x08
      000055 F9               [12]  174 	mov	r1,a
      000056 12r00r00         [24]  175 	lcall	__gptrget
      000059 F7               [12]  176 	mov	@r1,a
      00005A A3               [24]  177 	inc	dptr
      00005B 12r00r00         [24]  178 	lcall	__gptrget
      00005E 09               [12]  179 	inc	r1
      00005F F7               [12]  180 	mov	@r1,a
      000060 A3               [24]  181 	inc	dptr
      000061 12r00r00         [24]  182 	lcall	__gptrget
      000064 09               [12]  183 	inc	r1
      000065 F7               [12]  184 	mov	@r1,a
      000066 A3               [24]  185 	inc	dptr
      000067 12r00r00         [24]  186 	lcall	__gptrget
      00006A 09               [12]  187 	inc	r1
      00006B F7               [12]  188 	mov	@r1,a
      00006C E5*00            [12]  189 	mov	a,_bp
      00006E 24 07            [12]  190 	add	a,#0x07
      000070 F8               [12]  191 	mov	r0,a
      000071 86 02            [24]  192 	mov	ar2,@r0
      000073 7D 00            [12]  193 	mov	r5,#0x00
      000075 7F 40            [12]  194 	mov	r7,#0x40
      000077 C0 04            [24]  195 	push	ar4
      000079 C0 03            [24]  196 	push	ar3
      00007B E5*00            [12]  197 	mov	a,_bp
      00007D 24 08            [12]  198 	add	a,#0x08
      00007F F8               [12]  199 	mov	r0,a
      000080 E6               [12]  200 	mov	a,@r0
      000081 C0 E0            [24]  201 	push	acc
      000083 08               [12]  202 	inc	r0
      000084 E6               [12]  203 	mov	a,@r0
      000085 C0 E0            [24]  204 	push	acc
      000087 08               [12]  205 	inc	r0
      000088 E6               [12]  206 	mov	a,@r0
      000089 C0 E0            [24]  207 	push	acc
      00008B 08               [12]  208 	inc	r0
      00008C E6               [12]  209 	mov	a,@r0
      00008D C0 E0            [24]  210 	push	acc
      00008F 8A 82            [24]  211 	mov	dpl,r2
      000091 8D 83            [24]  212 	mov	dph,r5
      000093 8F F0            [24]  213 	mov	b,r7
      000095 12r00r00         [24]  214 	lcall	_wctomb
      000098 AE 82            [24]  215 	mov	r6,dpl
      00009A AF 83            [24]  216 	mov	r7,dph
      00009C E5 81            [12]  217 	mov	a,sp
      00009E 24 FC            [12]  218 	add	a,#0xfc
      0000A0 F5 81            [12]  219 	mov	sp,a
      0000A2 D0 03            [24]  220 	pop	ar3
      0000A4 D0 04            [24]  221 	pop	ar4
      0000A6 E5*00            [12]  222 	mov	a,_bp
      0000A8 24 F9            [12]  223 	add	a,#0xf9
      0000AA F8               [12]  224 	mov	r0,a
      0000AB C3               [12]  225 	clr	c
      0000AC E6               [12]  226 	mov	a,@r0
      0000AD 9E               [12]  227 	subb	a,r6
      0000AE 08               [12]  228 	inc	r0
      0000AF E6               [12]  229 	mov	a,@r0
      0000B0 9F               [12]  230 	subb	a,r7
      0000B1 D0 04            [24]  231 	pop	ar4
      0000B3 D0 03            [24]  232 	pop	ar3
      0000B5 50 03            [24]  233 	jnc	00129$
      0000B7 02r01r52         [24]  234 	ljmp	00109$
      0000BA                        235 00129$:
      0000BA                        236 00108$:
                                    237 ;	wcstombs.c:40: int b = wctomb(s, *pwcs);
      0000BA E5*00            [12]  238 	mov	a,_bp
      0000BC 24 04            [12]  239 	add	a,#0x04
      0000BE F8               [12]  240 	mov	r0,a
      0000BF 86 82            [24]  241 	mov	dpl,@r0
      0000C1 08               [12]  242 	inc	r0
      0000C2 86 83            [24]  243 	mov	dph,@r0
      0000C4 08               [12]  244 	inc	r0
      0000C5 86 F0            [24]  245 	mov	b,@r0
      0000C7 12r00r00         [24]  246 	lcall	__gptrget
      0000CA FA               [12]  247 	mov	r2,a
      0000CB A3               [24]  248 	inc	dptr
      0000CC 12r00r00         [24]  249 	lcall	__gptrget
      0000CF FD               [12]  250 	mov	r5,a
      0000D0 A3               [24]  251 	inc	dptr
      0000D1 12r00r00         [24]  252 	lcall	__gptrget
      0000D4 FE               [12]  253 	mov	r6,a
      0000D5 A3               [24]  254 	inc	dptr
      0000D6 12r00r00         [24]  255 	lcall	__gptrget
      0000D9 FF               [12]  256 	mov	r7,a
      0000DA C0 04            [24]  257 	push	ar4
      0000DC C0 03            [24]  258 	push	ar3
      0000DE C0 02            [24]  259 	push	ar2
      0000E0 C0 05            [24]  260 	push	ar5
      0000E2 C0 06            [24]  261 	push	ar6
      0000E4 C0 07            [24]  262 	push	ar7
      0000E6 A8*00            [24]  263 	mov	r0,_bp
      0000E8 08               [12]  264 	inc	r0
      0000E9 86 82            [24]  265 	mov	dpl,@r0
      0000EB 08               [12]  266 	inc	r0
      0000EC 86 83            [24]  267 	mov	dph,@r0
      0000EE 08               [12]  268 	inc	r0
      0000EF 86 F0            [24]  269 	mov	b,@r0
      0000F1 12r00r00         [24]  270 	lcall	_wctomb
      0000F4 AF 82            [24]  271 	mov	r7,dpl
      0000F6 AE 83            [24]  272 	mov	r6,dph
      0000F8 E5 81            [12]  273 	mov	a,sp
      0000FA 24 FC            [12]  274 	add	a,#0xfc
      0000FC F5 81            [12]  275 	mov	sp,a
      0000FE D0 03            [24]  276 	pop	ar3
      000100 D0 04            [24]  277 	pop	ar4
                                    278 ;	wcstombs.c:42: if(b == 1 && !*s)
      000102 BF 01 13         [24]  279 	cjne	r7,#0x01,00102$
      000105 BE 00 10         [24]  280 	cjne	r6,#0x00,00102$
      000108 A8*00            [24]  281 	mov	r0,_bp
      00010A 08               [12]  282 	inc	r0
      00010B 86 82            [24]  283 	mov	dpl,@r0
      00010D 08               [12]  284 	inc	r0
      00010E 86 83            [24]  285 	mov	dph,@r0
      000110 08               [12]  286 	inc	r0
      000111 86 F0            [24]  287 	mov	b,@r0
      000113 12r00r00         [24]  288 	lcall	__gptrget
      000116 60 3A            [24]  289 	jz	00109$
                                    290 ;	wcstombs.c:43: break;
      000118                        291 00102$:
                                    292 ;	wcstombs.c:44: if(b < 0)
      000118 EE               [12]  293 	mov	a,r6
      000119 30 E7 05         [24]  294 	jnb	acc.7,00105$
                                    295 ;	wcstombs.c:45: return(-1);
      00011C 90 FF FF         [24]  296 	mov	dptr,#0xffff
      00011F 80 35            [24]  297 	sjmp	00110$
      000121                        298 00105$:
                                    299 ;	wcstombs.c:47: n -= b;
      000121 8F 02            [24]  300 	mov	ar2,r7
      000123 8E 05            [24]  301 	mov	ar5,r6
      000125 E5*00            [12]  302 	mov	a,_bp
      000127 24 F9            [12]  303 	add	a,#0xf9
      000129 F8               [12]  304 	mov	r0,a
      00012A E6               [12]  305 	mov	a,@r0
      00012B C3               [12]  306 	clr	c
      00012C 9A               [12]  307 	subb	a,r2
      00012D F6               [12]  308 	mov	@r0,a
      00012E 08               [12]  309 	inc	r0
      00012F E6               [12]  310 	mov	a,@r0
      000130 9D               [12]  311 	subb	a,r5
      000131 F6               [12]  312 	mov	@r0,a
                                    313 ;	wcstombs.c:48: m += b;
      000132 EA               [12]  314 	mov	a,r2
      000133 2B               [12]  315 	add	a,r3
      000134 FB               [12]  316 	mov	r3,a
      000135 ED               [12]  317 	mov	a,r5
      000136 3C               [12]  318 	addc	a,r4
      000137 FC               [12]  319 	mov	r4,a
                                    320 ;	wcstombs.c:49: s += b;
      000138 A8*00            [24]  321 	mov	r0,_bp
      00013A 08               [12]  322 	inc	r0
      00013B EF               [12]  323 	mov	a,r7
      00013C 26               [12]  324 	add	a,@r0
      00013D F6               [12]  325 	mov	@r0,a
      00013E EE               [12]  326 	mov	a,r6
      00013F 08               [12]  327 	inc	r0
      000140 36               [12]  328 	addc	a,@r0
      000141 F6               [12]  329 	mov	@r0,a
                                    330 ;	wcstombs.c:50: pwcs++;
      000142 E5*00            [12]  331 	mov	a,_bp
      000144 24 04            [12]  332 	add	a,#0x04
      000146 F8               [12]  333 	mov	r0,a
      000147 74 04            [12]  334 	mov	a,#0x04
      000149 26               [12]  335 	add	a,@r0
      00014A F6               [12]  336 	mov	@r0,a
      00014B E4               [12]  337 	clr	a
      00014C 08               [12]  338 	inc	r0
      00014D 36               [12]  339 	addc	a,@r0
      00014E F6               [12]  340 	mov	@r0,a
      00014F 02r00r32         [24]  341 	ljmp	00107$
      000152                        342 00109$:
                                    343 ;	wcstombs.c:53: return(m);
      000152 8B 82            [24]  344 	mov	dpl,r3
      000154 8C 83            [24]  345 	mov	dph,r4
      000156                        346 00110$:
                                    347 ;	wcstombs.c:54: }
      000156 85*00 81         [24]  348 	mov	sp,_bp
      000159 D0*00            [24]  349 	pop	_bp
      00015B 22               [24]  350 	ret
                                    351 	.area CSEG    (CODE)
                                    352 	.area CONST   (CODE)
                                    353 	.area XINIT   (CODE)
                                    354 	.area CABS    (ABS,CODE)
