                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strrchr
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strrchr
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'strrchr'
                                     91 ;------------------------------------------------------------
                                     92 ;ch                        Allocated to stack - _bp -3
                                     93 ;string                    Allocated to registers r5 r6 r7 
                                     94 ;start                     Allocated to stack - _bp +1
                                     95 ;------------------------------------------------------------
                                     96 ;	_strrchr.c:32: char * strrchr ( const char * string, char ch )
                                     97 ;	-----------------------------------------
                                     98 ;	 function strrchr
                                     99 ;	-----------------------------------------
      000000                        100 _strrchr:
                           000007   101 	ar7 = 0x07
                           000006   102 	ar6 = 0x06
                           000005   103 	ar5 = 0x05
                           000004   104 	ar4 = 0x04
                           000003   105 	ar3 = 0x03
                           000002   106 	ar2 = 0x02
                           000001   107 	ar1 = 0x01
                           000000   108 	ar0 = 0x00
      000000 C0*00            [24]  109 	push	_bp
      000002 85 81*00         [24]  110 	mov	_bp,sp
      000005 05 81            [12]  111 	inc	sp
      000007 05 81            [12]  112 	inc	sp
      000009 05 81            [12]  113 	inc	sp
      00000B AD 82            [24]  114 	mov	r5,dpl
      00000D AE 83            [24]  115 	mov	r6,dph
      00000F AF F0            [24]  116 	mov	r7,b
                                    117 ;	_strrchr.c:37: const char * start = string;
      000011 A8*00            [24]  118 	mov	r0,_bp
      000013 08               [12]  119 	inc	r0
      000014 A6 05            [24]  120 	mov	@r0,ar5
      000016 08               [12]  121 	inc	r0
      000017 A6 06            [24]  122 	mov	@r0,ar6
      000019 08               [12]  123 	inc	r0
      00001A A6 07            [24]  124 	mov	@r0,ar7
                                    125 ;	_strrchr.c:39: while (*string++)                       /* find end of string */
      00001C                        126 00101$:
      00001C 8D 82            [24]  127 	mov	dpl,r5
      00001E 8E 83            [24]  128 	mov	dph,r6
      000020 8F F0            [24]  129 	mov	b,r7
      000022 12r00r00         [24]  130 	lcall	__gptrget
      000025 FC               [12]  131 	mov	r4,a
      000026 A3               [24]  132 	inc	dptr
      000027 AD 82            [24]  133 	mov	r5,dpl
      000029 AE 83            [24]  134 	mov	r6,dph
      00002B EC               [12]  135 	mov	a,r4
      00002C 70 EE            [24]  136 	jnz	00101$
                                    137 ;	_strrchr.c:42: while (--string != start && *string != ch)
      00002E                        138 00105$:
      00002E 1D               [12]  139 	dec	r5
      00002F BD FF 01         [24]  140 	cjne	r5,#0xff,00134$
      000032 1E               [12]  141 	dec	r6
      000033                        142 00134$:
      000033 A8*00            [24]  143 	mov	r0,_bp
      000035 08               [12]  144 	inc	r0
      000036 C0 05            [24]  145 	push	ar5
      000038 C0 06            [24]  146 	push	ar6
      00003A C0 07            [24]  147 	push	ar7
      00003C 86 82            [24]  148 	mov	dpl,@r0
      00003E 08               [12]  149 	inc	r0
      00003F 86 83            [24]  150 	mov	dph,@r0
      000041 08               [12]  151 	inc	r0
      000042 86 F0            [24]  152 	mov	b,@r0
      000044 12r00r00         [24]  153 	lcall	___gptr_cmp
      000047 15 81            [12]  154 	dec	sp
      000049 15 81            [12]  155 	dec	sp
      00004B 15 81            [12]  156 	dec	sp
      00004D 60 13            [24]  157 	jz	00107$
      00004F 8D 82            [24]  158 	mov	dpl,r5
      000051 8E 83            [24]  159 	mov	dph,r6
      000053 8F F0            [24]  160 	mov	b,r7
      000055 12r00r00         [24]  161 	lcall	__gptrget
      000058 FC               [12]  162 	mov	r4,a
      000059 E5*00            [12]  163 	mov	a,_bp
      00005B 24 FD            [12]  164 	add	a,#0xfd
      00005D F8               [12]  165 	mov	r0,a
      00005E E6               [12]  166 	mov	a,@r0
      00005F B5 04 CC         [24]  167 	cjne	a,ar4,00105$
      000062                        168 00107$:
                                    169 ;	_strrchr.c:45: if (*string == ch)                      /* char found ? */
      000062 8D 82            [24]  170 	mov	dpl,r5
      000064 8E 83            [24]  171 	mov	dph,r6
      000066 8F F0            [24]  172 	mov	b,r7
      000068 12r00r00         [24]  173 	lcall	__gptrget
      00006B FC               [12]  174 	mov	r4,a
      00006C E5*00            [12]  175 	mov	a,_bp
      00006E 24 FD            [12]  176 	add	a,#0xfd
      000070 F8               [12]  177 	mov	r0,a
      000071 E6               [12]  178 	mov	a,@r0
      000072 B5 04 08         [24]  179 	cjne	a,ar4,00109$
                                    180 ;	_strrchr.c:46: return( (char *)string );
      000075 8D 82            [24]  181 	mov	dpl,r5
      000077 8E 83            [24]  182 	mov	dph,r6
      000079 8F F0            [24]  183 	mov	b,r7
      00007B 80 06            [24]  184 	sjmp	00110$
      00007D                        185 00109$:
                                    186 ;	_strrchr.c:48: return (NULL) ;
      00007D 90 00 00         [24]  187 	mov	dptr,#0x0000
      000080 75 F0 00         [24]  188 	mov	b,#0x00
      000083                        189 00110$:
                                    190 ;	_strrchr.c:49: }
      000083 85*00 81         [24]  191 	mov	sp,_bp
      000086 D0*00            [24]  192 	pop	_bp
      000088 22               [24]  193 	ret
                                    194 	.area CSEG    (CODE)
                                    195 	.area CONST   (CODE)
                                    196 	.area XINIT   (CODE)
                                    197 	.area CABS    (ABS,CODE)
