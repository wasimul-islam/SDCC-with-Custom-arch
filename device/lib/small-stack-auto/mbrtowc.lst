                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbrtowc
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbrtowc
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
      000000                         31 _mbrtowc_sps_65536_10:
      000000                         32 	.ds 3
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'mbrtowc'
                                     93 ;------------------------------------------------------------
                                     94 ;s                         Allocated to stack - _bp -5
                                     95 ;n                         Allocated to stack - _bp -7
                                     96 ;ps                        Allocated to stack - _bp -10
                                     97 ;pwc                       Allocated to stack - _bp +1
                                     98 ;first_byte                Allocated to stack - _bp +20
                                     99 ;seqlen                    Allocated to stack - _bp +21
                                    100 ;mbseq                     Allocated to stack - _bp +22
                                    101 ;codepoint                 Allocated to stack - _bp +26
                                    102 ;i                         Allocated to registers r3 
                                    103 ;j                         Allocated to stack - _bp +30
                                    104 ;sloc0                     Allocated to stack - _bp +4
                                    105 ;sloc1                     Allocated to stack - _bp +7
                                    106 ;sloc2                     Allocated to stack - _bp +8
                                    107 ;sloc3                     Allocated to stack - _bp +23
                                    108 ;sloc4                     Allocated to stack - _bp +11
                                    109 ;sloc5                     Allocated to stack - _bp +13
                                    110 ;sloc6                     Allocated to stack - _bp +16
                                    111 ;sps                       Allocated with name '_mbrtowc_sps_65536_10'
                                    112 ;------------------------------------------------------------
                                    113 ;	mbrtowc.c:32: size_t mbrtowc(wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps)
                                    114 ;	-----------------------------------------
                                    115 ;	 function mbrtowc
                                    116 ;	-----------------------------------------
      000000                        117 _mbrtowc:
                           000007   118 	ar7 = 0x07
                           000006   119 	ar6 = 0x06
                           000005   120 	ar5 = 0x05
                           000004   121 	ar4 = 0x04
                           000003   122 	ar3 = 0x03
                           000002   123 	ar2 = 0x02
                           000001   124 	ar1 = 0x01
                           000000   125 	ar0 = 0x00
      000000 C0*00            [24]  126 	push	_bp
      000002 85 81*00         [24]  127 	mov	_bp,sp
      000005 C0 82            [24]  128 	push	dpl
      000007 C0 83            [24]  129 	push	dph
      000009 C0 F0            [24]  130 	push	b
      00000B E5 81            [12]  131 	mov	a,sp
      00000D 24 1B            [12]  132 	add	a,#0x1b
      00000F F5 81            [12]  133 	mov	sp,a
                                    134 ;	mbrtowc.c:41: if(!s)
      000011 E5*00            [12]  135 	mov	a,_bp
      000013 24 FB            [12]  136 	add	a,#0xfb
      000015 F8               [12]  137 	mov	r0,a
      000016 E6               [12]  138 	mov	a,@r0
      000017 08               [12]  139 	inc	r0
      000018 46               [12]  140 	orl	a,@r0
      000019 70 35            [24]  141 	jnz	00102$
                                    142 ;	mbrtowc.c:42: return(mbrtowc(0, "", 1, ps));
      00001B E5*00            [12]  143 	mov	a,_bp
      00001D 24 F6            [12]  144 	add	a,#0xf6
      00001F F8               [12]  145 	mov	r0,a
      000020 E6               [12]  146 	mov	a,@r0
      000021 C0 E0            [24]  147 	push	acc
      000023 08               [12]  148 	inc	r0
      000024 E6               [12]  149 	mov	a,@r0
      000025 C0 E0            [24]  150 	push	acc
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 C0 E0            [24]  153 	push	acc
      00002B 74 01            [12]  154 	mov	a,#0x01
      00002D C0 E0            [24]  155 	push	acc
      00002F E4               [12]  156 	clr	a
      000030 C0 E0            [24]  157 	push	acc
      000032 74r00            [12]  158 	mov	a,#___str_0
      000034 C0 E0            [24]  159 	push	acc
      000036 74s00            [12]  160 	mov	a,#(___str_0 >> 8)
      000038 C0 E0            [24]  161 	push	acc
      00003A 74 80            [12]  162 	mov	a,#0x80
      00003C C0 E0            [24]  163 	push	acc
      00003E 90 00 00         [24]  164 	mov	dptr,#0x0000
      000041 75 F0 00         [24]  165 	mov	b,#0x00
      000044 12r00r00         [24]  166 	lcall	_mbrtowc
      000047 E5 81            [12]  167 	mov	a,sp
      000049 24 F8            [12]  168 	add	a,#0xf8
      00004B F5 81            [12]  169 	mov	sp,a
      00004D 02r04r24         [24]  170 	ljmp	00145$
      000050                        171 00102$:
                                    172 ;	mbrtowc.c:43: if(!n)
      000050 E5*00            [12]  173 	mov	a,_bp
      000052 24 F9            [12]  174 	add	a,#0xf9
      000054 F8               [12]  175 	mov	r0,a
      000055 E6               [12]  176 	mov	a,@r0
      000056 08               [12]  177 	inc	r0
      000057 46               [12]  178 	orl	a,@r0
      000058 70 03            [24]  179 	jnz	00280$
      00005A 02r04r1B         [24]  180 	ljmp	00128$
      00005D                        181 00280$:
                                    182 ;	mbrtowc.c:45: if(!ps)
      00005D E5*00            [12]  183 	mov	a,_bp
      00005F 24 F6            [12]  184 	add	a,#0xf6
      000061 F8               [12]  185 	mov	r0,a
      000062 E6               [12]  186 	mov	a,@r0
      000063 08               [12]  187 	inc	r0
      000064 46               [12]  188 	orl	a,@r0
      000065 70 0D            [24]  189 	jnz	00106$
                                    190 ;	mbrtowc.c:47: ps = &sps;
      000067 E5*00            [12]  191 	mov	a,_bp
      000069 24 F6            [12]  192 	add	a,#0xf6
      00006B F8               [12]  193 	mov	r0,a
      00006C 76r00            [12]  194 	mov	@r0,#_mbrtowc_sps_65536_10
      00006E 08               [12]  195 	inc	r0
      00006F 76 00            [12]  196 	mov	@r0,#0x00
      000071 08               [12]  197 	inc	r0
      000072 76 40            [12]  198 	mov	@r0,#0x40
      000074                        199 00106$:
                                    200 ;	mbrtowc.c:50: for(i = 0; ps->c[i] && i < 3; i++)
      000074 E5*00            [12]  201 	mov	a,_bp
      000076 24 16            [12]  202 	add	a,#0x16
      000078 FC               [12]  203 	mov	r4,a
      000079 E5*00            [12]  204 	mov	a,_bp
      00007B 24 F6            [12]  205 	add	a,#0xf6
      00007D F8               [12]  206 	mov	r0,a
      00007E E5*00            [12]  207 	mov	a,_bp
      000080 24 04            [12]  208 	add	a,#0x04
      000082 F9               [12]  209 	mov	r1,a
      000083 E6               [12]  210 	mov	a,@r0
      000084 F7               [12]  211 	mov	@r1,a
      000085 08               [12]  212 	inc	r0
      000086 E6               [12]  213 	mov	a,@r0
      000087 09               [12]  214 	inc	r1
      000088 F7               [12]  215 	mov	@r1,a
      000089 08               [12]  216 	inc	r0
      00008A E6               [12]  217 	mov	a,@r0
      00008B 09               [12]  218 	inc	r1
      00008C F7               [12]  219 	mov	@r1,a
      00008D 7B 00            [12]  220 	mov	r3,#0x00
      00008F                        221 00131$:
      00008F E5*00            [12]  222 	mov	a,_bp
      000091 24 04            [12]  223 	add	a,#0x04
      000093 F8               [12]  224 	mov	r0,a
      000094 EB               [12]  225 	mov	a,r3
      000095 26               [12]  226 	add	a,@r0
      000096 FA               [12]  227 	mov	r2,a
      000097 E4               [12]  228 	clr	a
      000098 08               [12]  229 	inc	r0
      000099 36               [12]  230 	addc	a,@r0
      00009A FE               [12]  231 	mov	r6,a
      00009B 08               [12]  232 	inc	r0
      00009C 86 07            [24]  233 	mov	ar7,@r0
      00009E 8A 82            [24]  234 	mov	dpl,r2
      0000A0 8E 83            [24]  235 	mov	dph,r6
      0000A2 8F F0            [24]  236 	mov	b,r7
      0000A4 12r00r00         [24]  237 	lcall	__gptrget
      0000A7 FF               [12]  238 	mov	r7,a
      0000A8 60 0D            [24]  239 	jz	00174$
      0000AA BB 03 00         [24]  240 	cjne	r3,#0x03,00283$
      0000AD                        241 00283$:
      0000AD 50 08            [24]  242 	jnc	00174$
                                    243 ;	mbrtowc.c:51: mbseq[i] = ps->c[i];
      0000AF EB               [12]  244 	mov	a,r3
      0000B0 2C               [12]  245 	add	a,r4
      0000B1 F8               [12]  246 	mov	r0,a
      0000B2 A6 07            [24]  247 	mov	@r0,ar7
                                    248 ;	mbrtowc.c:50: for(i = 0; ps->c[i] && i < 3; i++)
      0000B4 0B               [12]  249 	inc	r3
      0000B5 80 D8            [24]  250 	sjmp	00131$
      0000B7                        251 00174$:
                                    252 ;	mbrtowc.c:53: seqlen = 1;
      0000B7 7A 01            [12]  253 	mov	r2,#0x01
                                    254 ;	mbrtowc.c:54: first_byte = ps->c[0] ? ps->c[0] : *s;
      0000B9 E5*00            [12]  255 	mov	a,_bp
      0000BB 24 F6            [12]  256 	add	a,#0xf6
      0000BD F8               [12]  257 	mov	r0,a
      0000BE 86 05            [24]  258 	mov	ar5,@r0
      0000C0 08               [12]  259 	inc	r0
      0000C1 86 06            [24]  260 	mov	ar6,@r0
      0000C3 08               [12]  261 	inc	r0
      0000C4 86 07            [24]  262 	mov	ar7,@r0
      0000C6 8D 82            [24]  263 	mov	dpl,r5
      0000C8 8E 83            [24]  264 	mov	dph,r6
      0000CA 8F F0            [24]  265 	mov	b,r7
      0000CC 12r00r00         [24]  266 	lcall	__gptrget
      0000CF FF               [12]  267 	mov	r7,a
      0000D0 60 09            [24]  268 	jz	00147$
      0000D2 E5*00            [12]  269 	mov	a,_bp
      0000D4 24 14            [12]  270 	add	a,#0x14
      0000D6 F8               [12]  271 	mov	r0,a
      0000D7 A6 07            [24]  272 	mov	@r0,ar7
      0000D9 80 1C            [24]  273 	sjmp	00148$
      0000DB                        274 00147$:
      0000DB E5*00            [12]  275 	mov	a,_bp
      0000DD 24 FB            [12]  276 	add	a,#0xfb
      0000DF F8               [12]  277 	mov	r0,a
      0000E0 86 05            [24]  278 	mov	ar5,@r0
      0000E2 08               [12]  279 	inc	r0
      0000E3 86 06            [24]  280 	mov	ar6,@r0
      0000E5 08               [12]  281 	inc	r0
      0000E6 86 07            [24]  282 	mov	ar7,@r0
      0000E8 8D 82            [24]  283 	mov	dpl,r5
      0000EA 8E 83            [24]  284 	mov	dph,r6
      0000EC 8F F0            [24]  285 	mov	b,r7
      0000EE E5*00            [12]  286 	mov	a,_bp
      0000F0 24 14            [12]  287 	add	a,#0x14
      0000F2 F8               [12]  288 	mov	r0,a
      0000F3 12r00r00         [24]  289 	lcall	__gptrget
      0000F6 F6               [12]  290 	mov	@r0,a
      0000F7                        291 00148$:
      0000F7 E5*00            [12]  292 	mov	a,_bp
      0000F9 24 14            [12]  293 	add	a,#0x14
                                    294 ;	mbrtowc.c:56: if(first_byte & 0x80)
      0000FB E5*00            [12]  295 	mov	a,_bp
      0000FD 24 14            [12]  296 	add	a,#0x14
      0000FF F8               [12]  297 	mov	r0,a
      000100 E6               [12]  298 	mov	a,@r0
      000101 30 E7 72         [24]  299 	jnb	acc.7,00112$
                                    300 ;	mbrtowc.c:58: while (first_byte & (0x80 >> seqlen))
      000104 E5*00            [12]  301 	mov	a,_bp
      000106 24 15            [12]  302 	add	a,#0x15
      000108 F8               [12]  303 	mov	r0,a
      000109 76 01            [12]  304 	mov	@r0,#0x01
      00010B                        305 00108$:
      00010B C0 04            [24]  306 	push	ar4
      00010D E5*00            [12]  307 	mov	a,_bp
      00010F 24 15            [12]  308 	add	a,#0x15
      000111 F8               [12]  309 	mov	r0,a
      000112 86 F0            [24]  310 	mov	b,@r0
      000114 05 F0            [12]  311 	inc	b
      000116 7C 80            [12]  312 	mov	r4,#0x80
      000118 E4               [12]  313 	clr	a
      000119 FD               [12]  314 	mov	r5,a
      00011A 33               [12]  315 	rlc	a
      00011B 92 D2            [24]  316 	mov	ov,c
      00011D 80 08            [24]  317 	sjmp	00288$
      00011F                        318 00287$:
      00011F A2 D2            [12]  319 	mov	c,ov
      000121 ED               [12]  320 	mov	a,r5
      000122 13               [12]  321 	rrc	a
      000123 FD               [12]  322 	mov	r5,a
      000124 EC               [12]  323 	mov	a,r4
      000125 13               [12]  324 	rrc	a
      000126 FC               [12]  325 	mov	r4,a
      000127                        326 00288$:
      000127 D5 F0 F5         [24]  327 	djnz	b,00287$
      00012A E5*00            [12]  328 	mov	a,_bp
      00012C 24 14            [12]  329 	add	a,#0x14
      00012E F8               [12]  330 	mov	r0,a
      00012F 86 06            [24]  331 	mov	ar6,@r0
      000131 7F 00            [12]  332 	mov	r7,#0x00
      000133 EE               [12]  333 	mov	a,r6
      000134 52 04            [12]  334 	anl	ar4,a
      000136 EF               [12]  335 	mov	a,r7
      000137 52 05            [12]  336 	anl	ar5,a
      000139 EC               [12]  337 	mov	a,r4
      00013A 4D               [12]  338 	orl	a,r5
      00013B D0 04            [24]  339 	pop	ar4
      00013D 60 08            [24]  340 	jz	00175$
                                    341 ;	mbrtowc.c:59: seqlen++;
      00013F E5*00            [12]  342 	mov	a,_bp
      000141 24 15            [12]  343 	add	a,#0x15
      000143 F8               [12]  344 	mov	r0,a
      000144 06               [12]  345 	inc	@r0
      000145 80 C4            [24]  346 	sjmp	00108$
      000147                        347 00175$:
      000147 E5*00            [12]  348 	mov	a,_bp
      000149 24 15            [12]  349 	add	a,#0x15
      00014B F8               [12]  350 	mov	r0,a
      00014C 86 02            [24]  351 	mov	ar2,@r0
                                    352 ;	mbrtowc.c:60: first_byte &= (0xff >> (seqlen + 1));
      00014E E5*00            [12]  353 	mov	a,_bp
      000150 24 15            [12]  354 	add	a,#0x15
      000152 F8               [12]  355 	mov	r0,a
      000153 E6               [12]  356 	mov	a,@r0
      000154 04               [12]  357 	inc	a
      000155 FF               [12]  358 	mov	r7,a
      000156 8F F0            [24]  359 	mov	b,r7
      000158 05 F0            [12]  360 	inc	b
      00015A 7F FF            [12]  361 	mov	r7,#0xff
      00015C E4               [12]  362 	clr	a
      00015D FE               [12]  363 	mov	r6,a
      00015E 33               [12]  364 	rlc	a
      00015F 92 D2            [24]  365 	mov	ov,c
      000161 80 08            [24]  366 	sjmp	00291$
      000163                        367 00290$:
      000163 A2 D2            [12]  368 	mov	c,ov
      000165 EE               [12]  369 	mov	a,r6
      000166 13               [12]  370 	rrc	a
      000167 FE               [12]  371 	mov	r6,a
      000168 EF               [12]  372 	mov	a,r7
      000169 13               [12]  373 	rrc	a
      00016A FF               [12]  374 	mov	r7,a
      00016B                        375 00291$:
      00016B D5 F0 F5         [24]  376 	djnz	b,00290$
      00016E E5*00            [12]  377 	mov	a,_bp
      000170 24 14            [12]  378 	add	a,#0x14
      000172 F8               [12]  379 	mov	r0,a
      000173 EF               [12]  380 	mov	a,r7
      000174 56               [12]  381 	anl	a,@r0
      000175 F6               [12]  382 	mov	@r0,a
      000176                        383 00112$:
                                    384 ;	mbrtowc.c:63: if(seqlen > 4)
      000176 EA               [12]  385 	mov	a,r2
      000177 24 FB            [12]  386 	add	a,#0xff - 0x04
      000179 50 03            [24]  387 	jnc	00292$
      00017B 02r04r1B         [24]  388 	ljmp	00128$
      00017E                        389 00292$:
                                    390 ;	mbrtowc.c:66: if(i + n < seqlen) // Incomplete multibyte character
      00017E C0 04            [24]  391 	push	ar4
      000180 8B 06            [24]  392 	mov	ar6,r3
      000182 7F 00            [12]  393 	mov	r7,#0x00
      000184 8E 04            [24]  394 	mov	ar4,r6
      000186 8F 05            [24]  395 	mov	ar5,r7
      000188 E5*00            [12]  396 	mov	a,_bp
      00018A 24 F9            [12]  397 	add	a,#0xf9
      00018C F8               [12]  398 	mov	r0,a
      00018D E5*00            [12]  399 	mov	a,_bp
      00018F 24 04            [12]  400 	add	a,#0x04
      000191 F9               [12]  401 	mov	r1,a
      000192 E6               [12]  402 	mov	a,@r0
      000193 2C               [12]  403 	add	a,r4
      000194 F7               [12]  404 	mov	@r1,a
      000195 08               [12]  405 	inc	r0
      000196 E6               [12]  406 	mov	a,@r0
      000197 3D               [12]  407 	addc	a,r5
      000198 09               [12]  408 	inc	r1
      000199 F7               [12]  409 	mov	@r1,a
      00019A 8A 04            [24]  410 	mov	ar4,r2
      00019C 7D 00            [12]  411 	mov	r5,#0x00
      00019E E5*00            [12]  412 	mov	a,_bp
      0001A0 24 04            [12]  413 	add	a,#0x04
      0001A2 F8               [12]  414 	mov	r0,a
      0001A3 C3               [12]  415 	clr	c
      0001A4 E6               [12]  416 	mov	a,@r0
      0001A5 9C               [12]  417 	subb	a,r4
      0001A6 08               [12]  418 	inc	r0
      0001A7 E6               [12]  419 	mov	a,@r0
      0001A8 9D               [12]  420 	subb	a,r5
      0001A9 D0 04            [24]  421 	pop	ar4
      0001AB 40 03            [24]  422 	jc	00293$
      0001AD 02r02r3B         [24]  423 	ljmp	00164$
      0001B0                        424 00293$:
                                    425 ;	mbrtowc.c:70: return(-2);
      0001B0 E5*00            [12]  426 	mov	a,_bp
      0001B2 24 F6            [12]  427 	add	a,#0xf6
      0001B4 F8               [12]  428 	mov	r0,a
      0001B5 E5*00            [12]  429 	mov	a,_bp
      0001B7 24 04            [12]  430 	add	a,#0x04
      0001B9 F9               [12]  431 	mov	r1,a
      0001BA E6               [12]  432 	mov	a,@r0
      0001BB F7               [12]  433 	mov	@r1,a
      0001BC 08               [12]  434 	inc	r0
      0001BD E6               [12]  435 	mov	a,@r0
      0001BE 09               [12]  436 	inc	r1
      0001BF F7               [12]  437 	mov	@r1,a
      0001C0 08               [12]  438 	inc	r0
      0001C1 E6               [12]  439 	mov	a,@r0
      0001C2 09               [12]  440 	inc	r1
      0001C3 F7               [12]  441 	mov	@r1,a
      0001C4 E5*00            [12]  442 	mov	a,_bp
      0001C6 24 FB            [12]  443 	add	a,#0xfb
      0001C8 F8               [12]  444 	mov	r0,a
      0001C9 E5*00            [12]  445 	mov	a,_bp
      0001CB 24 08            [12]  446 	add	a,#0x08
      0001CD F9               [12]  447 	mov	r1,a
      0001CE E6               [12]  448 	mov	a,@r0
      0001CF F7               [12]  449 	mov	@r1,a
      0001D0 08               [12]  450 	inc	r0
      0001D1 E6               [12]  451 	mov	a,@r0
      0001D2 09               [12]  452 	inc	r1
      0001D3 F7               [12]  453 	mov	@r1,a
      0001D4 08               [12]  454 	inc	r0
      0001D5 E6               [12]  455 	mov	a,@r0
      0001D6 09               [12]  456 	inc	r1
      0001D7 F7               [12]  457 	mov	@r1,a
      0001D8 E5*00            [12]  458 	mov	a,_bp
      0001DA 24 07            [12]  459 	add	a,#0x07
      0001DC F8               [12]  460 	mov	r0,a
      0001DD A6 03            [24]  461 	mov	@r0,ar3
      0001DF E5*00            [12]  462 	mov	a,_bp
      0001E1 24 F9            [12]  463 	add	a,#0xf9
      0001E3 F8               [12]  464 	mov	r0,a
      0001E4 86 04            [24]  465 	mov	ar4,@r0
      0001E6 08               [12]  466 	inc	r0
      0001E7 86 03            [24]  467 	mov	ar3,@r0
      0001E9                        468 00134$:
                                    469 ;	mbrtowc.c:68: for(;n-- ; i++)
      0001E9 8C 07            [24]  470 	mov	ar7,r4
      0001EB 8B 06            [24]  471 	mov	ar6,r3
      0001ED 1C               [12]  472 	dec	r4
      0001EE BC FF 01         [24]  473 	cjne	r4,#0xff,00294$
      0001F1 1B               [12]  474 	dec	r3
      0001F2                        475 00294$:
      0001F2 EF               [12]  476 	mov	a,r7
      0001F3 4E               [12]  477 	orl	a,r6
      0001F4 60 3F            [24]  478 	jz	00115$
                                    479 ;	mbrtowc.c:69: ps->c[i] = *s++;
      0001F6 E5*00            [12]  480 	mov	a,_bp
      0001F8 24 04            [12]  481 	add	a,#0x04
      0001FA F8               [12]  482 	mov	r0,a
      0001FB E5*00            [12]  483 	mov	a,_bp
      0001FD 24 07            [12]  484 	add	a,#0x07
      0001FF F9               [12]  485 	mov	r1,a
      000200 E7               [12]  486 	mov	a,@r1
      000201 26               [12]  487 	add	a,@r0
      000202 FF               [12]  488 	mov	r7,a
      000203 E4               [12]  489 	clr	a
      000204 08               [12]  490 	inc	r0
      000205 36               [12]  491 	addc	a,@r0
      000206 FE               [12]  492 	mov	r6,a
      000207 08               [12]  493 	inc	r0
      000208 86 02            [24]  494 	mov	ar2,@r0
      00020A E5*00            [12]  495 	mov	a,_bp
      00020C 24 08            [12]  496 	add	a,#0x08
      00020E F8               [12]  497 	mov	r0,a
      00020F 86 82            [24]  498 	mov	dpl,@r0
      000211 08               [12]  499 	inc	r0
      000212 86 83            [24]  500 	mov	dph,@r0
      000214 08               [12]  501 	inc	r0
      000215 86 F0            [24]  502 	mov	b,@r0
      000217 12r00r00         [24]  503 	lcall	__gptrget
      00021A FD               [12]  504 	mov	r5,a
      00021B A3               [24]  505 	inc	dptr
      00021C 18               [12]  506 	dec	r0
      00021D 18               [12]  507 	dec	r0
      00021E A6 82            [24]  508 	mov	@r0,dpl
      000220 08               [12]  509 	inc	r0
      000221 A6 83            [24]  510 	mov	@r0,dph
      000223 8F 82            [24]  511 	mov	dpl,r7
      000225 8E 83            [24]  512 	mov	dph,r6
      000227 8A F0            [24]  513 	mov	b,r2
      000229 ED               [12]  514 	mov	a,r5
      00022A 12r00r00         [24]  515 	lcall	__gptrput
                                    516 ;	mbrtowc.c:68: for(;n-- ; i++)
      00022D E5*00            [12]  517 	mov	a,_bp
      00022F 24 07            [12]  518 	add	a,#0x07
      000231 F8               [12]  519 	mov	r0,a
      000232 06               [12]  520 	inc	@r0
      000233 80 B4            [24]  521 	sjmp	00134$
      000235                        522 00115$:
                                    523 ;	mbrtowc.c:70: return(-2);
      000235 90 FF FE         [24]  524 	mov	dptr,#0xfffe
      000238 02r04r24         [24]  525 	ljmp	00145$
                                    526 ;	mbrtowc.c:73: for(j = 0; j < i; j++)
      00023B                        527 00164$:
      00023B E5*00            [12]  528 	mov	a,_bp
      00023D 24 F6            [12]  529 	add	a,#0xf6
      00023F F8               [12]  530 	mov	r0,a
      000240 E5*00            [12]  531 	mov	a,_bp
      000242 24 0D            [12]  532 	add	a,#0x0d
      000244 F9               [12]  533 	mov	r1,a
      000245 E6               [12]  534 	mov	a,@r0
      000246 F7               [12]  535 	mov	@r1,a
      000247 08               [12]  536 	inc	r0
      000248 E6               [12]  537 	mov	a,@r0
      000249 09               [12]  538 	inc	r1
      00024A F7               [12]  539 	mov	@r1,a
      00024B 08               [12]  540 	inc	r0
      00024C E6               [12]  541 	mov	a,@r0
      00024D 09               [12]  542 	inc	r1
      00024E F7               [12]  543 	mov	@r1,a
      00024F E5*00            [12]  544 	mov	a,_bp
      000251 24 1E            [12]  545 	add	a,#0x1e
      000253 F8               [12]  546 	mov	r0,a
      000254 76 00            [12]  547 	mov	@r0,#0x00
      000256                        548 00137$:
      000256 E5*00            [12]  549 	mov	a,_bp
      000258 24 1E            [12]  550 	add	a,#0x1e
      00025A F8               [12]  551 	mov	r0,a
      00025B C3               [12]  552 	clr	c
      00025C E6               [12]  553 	mov	a,@r0
      00025D 9B               [12]  554 	subb	a,r3
      00025E 50 2E            [24]  555 	jnc	00118$
                                    556 ;	mbrtowc.c:74: ps->c[j] = 0;
      000260 C0 06            [24]  557 	push	ar6
      000262 C0 07            [24]  558 	push	ar7
      000264 E5*00            [12]  559 	mov	a,_bp
      000266 24 0D            [12]  560 	add	a,#0x0d
      000268 F8               [12]  561 	mov	r0,a
      000269 E5*00            [12]  562 	mov	a,_bp
      00026B 24 1E            [12]  563 	add	a,#0x1e
      00026D F9               [12]  564 	mov	r1,a
      00026E E7               [12]  565 	mov	a,@r1
      00026F 26               [12]  566 	add	a,@r0
      000270 FD               [12]  567 	mov	r5,a
      000271 E4               [12]  568 	clr	a
      000272 08               [12]  569 	inc	r0
      000273 36               [12]  570 	addc	a,@r0
      000274 FE               [12]  571 	mov	r6,a
      000275 08               [12]  572 	inc	r0
      000276 86 07            [24]  573 	mov	ar7,@r0
      000278 8D 82            [24]  574 	mov	dpl,r5
      00027A 8E 83            [24]  575 	mov	dph,r6
      00027C 8F F0            [24]  576 	mov	b,r7
      00027E E4               [12]  577 	clr	a
      00027F 12r00r00         [24]  578 	lcall	__gptrput
                                    579 ;	mbrtowc.c:73: for(j = 0; j < i; j++)
      000282 E5*00            [12]  580 	mov	a,_bp
      000284 24 1E            [12]  581 	add	a,#0x1e
      000286 F8               [12]  582 	mov	r0,a
      000287 06               [12]  583 	inc	@r0
      000288 D0 07            [24]  584 	pop	ar7
      00028A D0 06            [24]  585 	pop	ar6
      00028C 80 C8            [24]  586 	sjmp	00137$
      00028E                        587 00118$:
                                    588 ;	mbrtowc.c:76: for(n = 1, i = i ? i : 1; i < seqlen; i++, n++)
      00028E E5*00            [12]  589 	mov	a,_bp
      000290 24 F9            [12]  590 	add	a,#0xf9
      000292 F8               [12]  591 	mov	r0,a
      000293 76 01            [12]  592 	mov	@r0,#0x01
      000295 08               [12]  593 	inc	r0
      000296 76 00            [12]  594 	mov	@r0,#0x00
      000298 EB               [12]  595 	mov	a,r3
      000299 60 02            [24]  596 	jz	00149$
      00029B 80 04            [24]  597 	sjmp	00150$
      00029D                        598 00149$:
      00029D 7E 01            [12]  599 	mov	r6,#0x01
      00029F 7F 00            [12]  600 	mov	r7,#0x00
      0002A1                        601 00150$:
      0002A1 E5*00            [12]  602 	mov	a,_bp
      0002A3 24 0B            [12]  603 	add	a,#0x0b
      0002A5 F8               [12]  604 	mov	r0,a
      0002A6 A6 04            [24]  605 	mov	@r0,ar4
      0002A8 E5*00            [12]  606 	mov	a,_bp
      0002AA 24 FB            [12]  607 	add	a,#0xfb
      0002AC F8               [12]  608 	mov	r0,a
      0002AD E5*00            [12]  609 	mov	a,_bp
      0002AF 24 0D            [12]  610 	add	a,#0x0d
      0002B1 F9               [12]  611 	mov	r1,a
      0002B2 E6               [12]  612 	mov	a,@r0
      0002B3 F7               [12]  613 	mov	@r1,a
      0002B4 08               [12]  614 	inc	r0
      0002B5 E6               [12]  615 	mov	a,@r0
      0002B6 09               [12]  616 	inc	r1
      0002B7 F7               [12]  617 	mov	@r1,a
      0002B8 08               [12]  618 	inc	r0
      0002B9 E6               [12]  619 	mov	a,@r0
      0002BA 09               [12]  620 	inc	r1
      0002BB F7               [12]  621 	mov	@r1,a
      0002BC 7B 01            [12]  622 	mov	r3,#0x01
      0002BE 7D 00            [12]  623 	mov	r5,#0x00
      0002C0                        624 00140$:
      0002C0 C3               [12]  625 	clr	c
      0002C1 EE               [12]  626 	mov	a,r6
      0002C2 9A               [12]  627 	subb	a,r2
      0002C3 50 4B            [24]  628 	jnc	00121$
                                    629 ;	mbrtowc.c:78: mbseq[i] = *s++;
      0002C5 C0 04            [24]  630 	push	ar4
      0002C7 E5*00            [12]  631 	mov	a,_bp
      0002C9 24 0B            [12]  632 	add	a,#0x0b
      0002CB F8               [12]  633 	mov	r0,a
      0002CC EE               [12]  634 	mov	a,r6
      0002CD 26               [12]  635 	add	a,@r0
      0002CE F9               [12]  636 	mov	r1,a
      0002CF E5*00            [12]  637 	mov	a,_bp
      0002D1 24 0D            [12]  638 	add	a,#0x0d
      0002D3 F8               [12]  639 	mov	r0,a
      0002D4 86 82            [24]  640 	mov	dpl,@r0
      0002D6 08               [12]  641 	inc	r0
      0002D7 86 83            [24]  642 	mov	dph,@r0
      0002D9 08               [12]  643 	inc	r0
      0002DA 86 F0            [24]  644 	mov	b,@r0
      0002DC 12r00r00         [24]  645 	lcall	__gptrget
      0002DF FC               [12]  646 	mov	r4,a
      0002E0 A3               [24]  647 	inc	dptr
      0002E1 18               [12]  648 	dec	r0
      0002E2 18               [12]  649 	dec	r0
      0002E3 A6 82            [24]  650 	mov	@r0,dpl
      0002E5 08               [12]  651 	inc	r0
      0002E6 A6 83            [24]  652 	mov	@r0,dph
      0002E8 A7 04            [24]  653 	mov	@r1,ar4
                                    654 ;	mbrtowc.c:79: if((mbseq[i] & 0xc0) != 0x80)
      0002EA 53 04 C0         [24]  655 	anl	ar4,#0xc0
      0002ED 7F 00            [12]  656 	mov	r7,#0x00
      0002EF BC 80 05         [24]  657 	cjne	r4,#0x80,00299$
      0002F2 BF 00 02         [24]  658 	cjne	r7,#0x00,00299$
      0002F5 80 05            [24]  659 	sjmp	00300$
      0002F7                        660 00299$:
      0002F7 D0 04            [24]  661 	pop	ar4
      0002F9 02r04r1B         [24]  662 	ljmp	00128$
      0002FC                        663 00300$:
      0002FC D0 04            [24]  664 	pop	ar4
                                    665 ;	mbrtowc.c:76: for(n = 1, i = i ? i : 1; i < seqlen; i++, n++)
      0002FE 0E               [12]  666 	inc	r6
      0002FF 0B               [12]  667 	inc	r3
      000300 BB 00 01         [24]  668 	cjne	r3,#0x00,00301$
      000303 0D               [12]  669 	inc	r5
      000304                        670 00301$:
      000304 E5*00            [12]  671 	mov	a,_bp
      000306 24 F9            [12]  672 	add	a,#0xf9
      000308 F8               [12]  673 	mov	r0,a
      000309 A6 03            [24]  674 	mov	@r0,ar3
      00030B 08               [12]  675 	inc	r0
      00030C A6 05            [24]  676 	mov	@r0,ar5
      00030E 80 B0            [24]  677 	sjmp	00140$
      000310                        678 00121$:
                                    679 ;	mbrtowc.c:83: codepoint = first_byte;
      000310 E5*00            [12]  680 	mov	a,_bp
      000312 24 14            [12]  681 	add	a,#0x14
      000314 F8               [12]  682 	mov	r0,a
      000315 86 05            [24]  683 	mov	ar5,@r0
      000317 7E 00            [12]  684 	mov	r6,#0x00
      000319 7B 00            [12]  685 	mov	r3,#0x00
      00031B 7F 00            [12]  686 	mov	r7,#0x00
                                    687 ;	mbrtowc.c:85: for(s = mbseq + 1, seqlen--; seqlen; seqlen--)
      00031D 0C               [12]  688 	inc	r4
      00031E E5*00            [12]  689 	mov	a,_bp
      000320 24 0D            [12]  690 	add	a,#0x0d
      000322 F8               [12]  691 	mov	r0,a
      000323 A6 04            [24]  692 	mov	@r0,ar4
      000325 08               [12]  693 	inc	r0
      000326 76 00            [12]  694 	mov	@r0,#0x00
      000328 08               [12]  695 	inc	r0
      000329 76 40            [12]  696 	mov	@r0,#0x40
      00032B E5*00            [12]  697 	mov	a,_bp
      00032D 24 0B            [12]  698 	add	a,#0x0b
      00032F F8               [12]  699 	mov	r0,a
      000330 EA               [12]  700 	mov	a,r2
      000331 14               [12]  701 	dec	a
      000332 F6               [12]  702 	mov	@r0,a
      000333                        703 00143$:
      000333 E5*00            [12]  704 	mov	a,_bp
      000335 24 0B            [12]  705 	add	a,#0x0b
      000337 F8               [12]  706 	mov	r0,a
      000338 E6               [12]  707 	mov	a,@r0
      000339 70 03            [24]  708 	jnz	00302$
      00033B 02r03rCC         [24]  709 	ljmp	00122$
      00033E                        710 00302$:
                                    711 ;	mbrtowc.c:87: codepoint <<= 6;
      00033E E5*00            [12]  712 	mov	a,_bp
      000340 24 1A            [12]  713 	add	a,#0x1a
      000342 F8               [12]  714 	mov	r0,a
      000343 08               [12]  715 	inc	r0
      000344 08               [12]  716 	inc	r0
      000345 A6 03            [24]  717 	mov	@r0,ar3
      000347 EF               [12]  718 	mov	a,r7
      000348 54 03            [12]  719 	anl	a,#0x03
      00034A A2 E0            [12]  720 	mov	c,acc.0
      00034C C6               [12]  721 	xch	a,@r0
      00034D 13               [12]  722 	rrc	a
      00034E C6               [12]  723 	xch	a,@r0
      00034F 13               [12]  724 	rrc	a
      000350 A2 E0            [12]  725 	mov	c,acc.0
      000352 C6               [12]  726 	xch	a,@r0
      000353 13               [12]  727 	rrc	a
      000354 C6               [12]  728 	xch	a,@r0
      000355 13               [12]  729 	rrc	a
      000356 C6               [12]  730 	xch	a,@r0
      000357 08               [12]  731 	inc	r0
      000358 F6               [12]  732 	mov	@r0,a
      000359 EE               [12]  733 	mov	a,r6
      00035A 03               [12]  734 	rr	a
      00035B 03               [12]  735 	rr	a
      00035C 54 3F            [12]  736 	anl	a,#0x3f
      00035E 18               [12]  737 	dec	r0
      00035F 46               [12]  738 	orl	a,@r0
      000360 F6               [12]  739 	mov	@r0,a
      000361 18               [12]  740 	dec	r0
      000362 18               [12]  741 	dec	r0
      000363 A6 05            [24]  742 	mov	@r0,ar5
      000365 EE               [12]  743 	mov	a,r6
      000366 54 03            [12]  744 	anl	a,#0x03
      000368 A2 E0            [12]  745 	mov	c,acc.0
      00036A C6               [12]  746 	xch	a,@r0
      00036B 13               [12]  747 	rrc	a
      00036C C6               [12]  748 	xch	a,@r0
      00036D 13               [12]  749 	rrc	a
      00036E A2 E0            [12]  750 	mov	c,acc.0
      000370 C6               [12]  751 	xch	a,@r0
      000371 13               [12]  752 	rrc	a
      000372 C6               [12]  753 	xch	a,@r0
      000373 13               [12]  754 	rrc	a
      000374 C6               [12]  755 	xch	a,@r0
      000375 08               [12]  756 	inc	r0
      000376 F6               [12]  757 	mov	@r0,a
                                    758 ;	mbrtowc.c:88: codepoint |= (*s & 0x3f);
      000377 E5*00            [12]  759 	mov	a,_bp
      000379 24 0D            [12]  760 	add	a,#0x0d
      00037B F8               [12]  761 	mov	r0,a
      00037C 86 82            [24]  762 	mov	dpl,@r0
      00037E 08               [12]  763 	inc	r0
      00037F 86 83            [24]  764 	mov	dph,@r0
      000381 08               [12]  765 	inc	r0
      000382 86 F0            [24]  766 	mov	b,@r0
      000384 12r00r00         [24]  767 	lcall	__gptrget
      000387 FA               [12]  768 	mov	r2,a
      000388 A3               [24]  769 	inc	dptr
      000389 18               [12]  770 	dec	r0
      00038A 18               [12]  771 	dec	r0
      00038B A6 82            [24]  772 	mov	@r0,dpl
      00038D 08               [12]  773 	inc	r0
      00038E A6 83            [24]  774 	mov	@r0,dph
      000390 53 02 3F         [24]  775 	anl	ar2,#0x3f
      000393 7C 00            [12]  776 	mov	r4,#0x00
      000395 E5*00            [12]  777 	mov	a,_bp
      000397 24 10            [12]  778 	add	a,#0x10
      000399 F8               [12]  779 	mov	r0,a
      00039A A6 02            [24]  780 	mov	@r0,ar2
      00039C 08               [12]  781 	inc	r0
      00039D A6 04            [24]  782 	mov	@r0,ar4
      00039F EC               [12]  783 	mov	a,r4
      0003A0 33               [12]  784 	rlc	a
      0003A1 95 E0            [12]  785 	subb	a,acc
      0003A3 08               [12]  786 	inc	r0
      0003A4 F6               [12]  787 	mov	@r0,a
      0003A5 08               [12]  788 	inc	r0
      0003A6 F6               [12]  789 	mov	@r0,a
      0003A7 E5*00            [12]  790 	mov	a,_bp
      0003A9 24 1A            [12]  791 	add	a,#0x1a
      0003AB F8               [12]  792 	mov	r0,a
      0003AC E5*00            [12]  793 	mov	a,_bp
      0003AE 24 10            [12]  794 	add	a,#0x10
      0003B0 F9               [12]  795 	mov	r1,a
      0003B1 E7               [12]  796 	mov	a,@r1
      0003B2 46               [12]  797 	orl	a,@r0
      0003B3 FD               [12]  798 	mov	r5,a
      0003B4 09               [12]  799 	inc	r1
      0003B5 E7               [12]  800 	mov	a,@r1
      0003B6 08               [12]  801 	inc	r0
      0003B7 46               [12]  802 	orl	a,@r0
      0003B8 FE               [12]  803 	mov	r6,a
      0003B9 09               [12]  804 	inc	r1
      0003BA E7               [12]  805 	mov	a,@r1
      0003BB 08               [12]  806 	inc	r0
      0003BC 46               [12]  807 	orl	a,@r0
      0003BD FB               [12]  808 	mov	r3,a
      0003BE 09               [12]  809 	inc	r1
      0003BF E7               [12]  810 	mov	a,@r1
      0003C0 08               [12]  811 	inc	r0
      0003C1 46               [12]  812 	orl	a,@r0
      0003C2 FF               [12]  813 	mov	r7,a
                                    814 ;	mbrtowc.c:89: s++;
                                    815 ;	mbrtowc.c:85: for(s = mbseq + 1, seqlen--; seqlen; seqlen--)
      0003C3 E5*00            [12]  816 	mov	a,_bp
      0003C5 24 0B            [12]  817 	add	a,#0x0b
      0003C7 F8               [12]  818 	mov	r0,a
      0003C8 16               [12]  819 	dec	@r0
      0003C9 02r03r33         [24]  820 	ljmp	00143$
      0003CC                        821 00122$:
                                    822 ;	mbrtowc.c:92: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      0003CC C3               [12]  823 	clr	c
      0003CD EE               [12]  824 	mov	a,r6
      0003CE 94 D8            [12]  825 	subb	a,#0xd8
      0003D0 EB               [12]  826 	mov	a,r3
      0003D1 94 00            [12]  827 	subb	a,#0x00
      0003D3 EF               [12]  828 	mov	a,r7
      0003D4 94 00            [12]  829 	subb	a,#0x00
      0003D6 40 11            [24]  830 	jc	00124$
      0003D8 74 FF            [12]  831 	mov	a,#0xff
      0003DA 9D               [12]  832 	subb	a,r5
      0003DB 74 DF            [12]  833 	mov	a,#0xdf
      0003DD 9E               [12]  834 	subb	a,r6
      0003DE E4               [12]  835 	clr	a
      0003DF 9B               [12]  836 	subb	a,r3
      0003E0 E4               [12]  837 	clr	a
      0003E1 9F               [12]  838 	subb	a,r7
      0003E2 40 05            [24]  839 	jc	00124$
                                    840 ;	mbrtowc.c:93: return(-1);
      0003E4 90 FF FF         [24]  841 	mov	dptr,#0xffff
      0003E7 80 3B            [24]  842 	sjmp	00145$
      0003E9                        843 00124$:
                                    844 ;	mbrtowc.c:95: if(pwc)
      0003E9 A8*00            [24]  845 	mov	r0,_bp
      0003EB 08               [12]  846 	inc	r0
      0003EC E6               [12]  847 	mov	a,@r0
      0003ED 08               [12]  848 	inc	r0
      0003EE 46               [12]  849 	orl	a,@r0
      0003EF 60 1E            [24]  850 	jz	00127$
                                    851 ;	mbrtowc.c:96: *pwc = codepoint;
      0003F1 A8*00            [24]  852 	mov	r0,_bp
      0003F3 08               [12]  853 	inc	r0
      0003F4 86 82            [24]  854 	mov	dpl,@r0
      0003F6 08               [12]  855 	inc	r0
      0003F7 86 83            [24]  856 	mov	dph,@r0
      0003F9 08               [12]  857 	inc	r0
      0003FA 86 F0            [24]  858 	mov	b,@r0
      0003FC ED               [12]  859 	mov	a,r5
      0003FD 12r00r00         [24]  860 	lcall	__gptrput
      000400 A3               [24]  861 	inc	dptr
      000401 EE               [12]  862 	mov	a,r6
      000402 12r00r00         [24]  863 	lcall	__gptrput
      000405 A3               [24]  864 	inc	dptr
      000406 EB               [12]  865 	mov	a,r3
      000407 12r00r00         [24]  866 	lcall	__gptrput
      00040A A3               [24]  867 	inc	dptr
      00040B EF               [12]  868 	mov	a,r7
      00040C 12r00r00         [24]  869 	lcall	__gptrput
      00040F                        870 00127$:
                                    871 ;	mbrtowc.c:97: return(n);
      00040F E5*00            [12]  872 	mov	a,_bp
      000411 24 F9            [12]  873 	add	a,#0xf9
      000413 F8               [12]  874 	mov	r0,a
      000414 86 82            [24]  875 	mov	dpl,@r0
      000416 08               [12]  876 	inc	r0
      000417 86 83            [24]  877 	mov	dph,@r0
                                    878 ;	mbrtowc.c:99: eilseq:
      000419 80 09            [24]  879 	sjmp	00145$
      00041B                        880 00128$:
                                    881 ;	mbrtowc.c:100: errno = EILSEQ;
      00041B 75*00 54         [24]  882 	mov	_errno,#0x54
      00041E 75*01 00         [24]  883 	mov	(_errno + 1),#0x00
                                    884 ;	mbrtowc.c:101: return(-1);
      000421 90 FF FF         [24]  885 	mov	dptr,#0xffff
      000424                        886 00145$:
                                    887 ;	mbrtowc.c:102: }
      000424 85*00 81         [24]  888 	mov	sp,_bp
      000427 D0*00            [24]  889 	pop	_bp
      000429 22               [24]  890 	ret
                                    891 	.area CSEG    (CODE)
                                    892 	.area CONST   (CODE)
                                    893 	.area CONST   (CODE)
      000000                        894 ___str_0:
      000000 00                     895 	.db 0x00
                                    896 	.area CSEG    (CODE)
                                    897 	.area XINIT   (CODE)
                                    898 	.area CABS    (ABS,CODE)
