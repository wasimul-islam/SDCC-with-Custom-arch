                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16stombs
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___memcpy
                                     12 	.globl _wctomb
                                     13 	.globl ___c16stombs
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function '__c16stombs'
                                     93 ;------------------------------------------------------------
                                     94 ;c16s                      Allocated to stack - _bp -5
                                     95 ;n                         Allocated to stack - _bp -7
                                     96 ;s                         Allocated to stack - _bp +1
                                     97 ;m                         Allocated to stack - _bp +14
                                     98 ;b                         Allocated to stack - _bp +16
                                     99 ;l                         Allocated to stack - _bp +20
                                    100 ;codepoint                 Allocated to stack - _bp +22
                                    101 ;sloc0                     Allocated to stack - _bp +16
                                    102 ;sloc1                     Allocated to stack - _bp +4
                                    103 ;sloc2                     Allocated to stack - _bp +7
                                    104 ;sloc3                     Allocated to stack - _bp +10
                                    105 ;------------------------------------------------------------
                                    106 ;	c16stombs.c:44: size_t __c16stombs(char *restrict s, const char16_t *restrict c16s, size_t n)
                                    107 ;	-----------------------------------------
                                    108 ;	 function __c16stombs
                                    109 ;	-----------------------------------------
      000000                        110 ___c16stombs:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
      000000 C0*00            [24]  119 	push	_bp
      000002 85 81*00         [24]  120 	mov	_bp,sp
      000005 C0 82            [24]  121 	push	dpl
      000007 C0 83            [24]  122 	push	dph
      000009 C0 F0            [24]  123 	push	b
      00000B E5 81            [12]  124 	mov	a,sp
      00000D 24 16            [12]  125 	add	a,#0x16
      00000F F5 81            [12]  126 	mov	sp,a
                                    127 ;	c16stombs.c:46: size_t m = 0;
      000011 E5*00            [12]  128 	mov	a,_bp
      000013 24 0E            [12]  129 	add	a,#0x0e
      000015 F8               [12]  130 	mov	r0,a
      000016 E4               [12]  131 	clr	a
      000017 F6               [12]  132 	mov	@r0,a
      000018 08               [12]  133 	inc	r0
      000019 F6               [12]  134 	mov	@r0,a
                                    135 ;	c16stombs.c:87: return(m);
      00001A                        136 00119$:
                                    137 ;	c16stombs.c:54: if(c16s[0] < 0xd800 || c16s[0] >= 0xe000) // Basic multilingual plane
      00001A E5*00            [12]  138 	mov	a,_bp
      00001C 24 FB            [12]  139 	add	a,#0xfb
      00001E F8               [12]  140 	mov	r0,a
      00001F E5*00            [12]  141 	mov	a,_bp
      000021 24 07            [12]  142 	add	a,#0x07
      000023 F9               [12]  143 	mov	r1,a
      000024 E6               [12]  144 	mov	a,@r0
      000025 F7               [12]  145 	mov	@r1,a
      000026 08               [12]  146 	inc	r0
      000027 E6               [12]  147 	mov	a,@r0
      000028 09               [12]  148 	inc	r1
      000029 F7               [12]  149 	mov	@r1,a
      00002A 08               [12]  150 	inc	r0
      00002B E6               [12]  151 	mov	a,@r0
      00002C 09               [12]  152 	inc	r1
      00002D F7               [12]  153 	mov	@r1,a
      00002E E5*00            [12]  154 	mov	a,_bp
      000030 24 07            [12]  155 	add	a,#0x07
      000032 F8               [12]  156 	mov	r0,a
      000033 86 82            [24]  157 	mov	dpl,@r0
      000035 08               [12]  158 	inc	r0
      000036 86 83            [24]  159 	mov	dph,@r0
      000038 08               [12]  160 	inc	r0
      000039 86 F0            [24]  161 	mov	b,@r0
      00003B 12r00r00         [24]  162 	lcall	__gptrget
      00003E FC               [12]  163 	mov	r4,a
      00003F A3               [24]  164 	inc	dptr
      000040 12r00r00         [24]  165 	lcall	__gptrget
      000043 FB               [12]  166 	mov	r3,a
      000044 C3               [12]  167 	clr	c
      000045 94 D8            [12]  168 	subb	a,#0xd8
      000047 40 05            [24]  169 	jc	00106$
      000049 74 20            [12]  170 	mov	a,#0x100 - 0xe0
      00004B 2B               [12]  171 	add	a,r3
      00004C 50 3F            [24]  172 	jnc	00107$
      00004E                        173 00106$:
                                    174 ;	c16stombs.c:56: codepoint = c16s[0];
      00004E E5*00            [12]  175 	mov	a,_bp
      000050 24 FB            [12]  176 	add	a,#0xfb
      000052 F8               [12]  177 	mov	r0,a
      000053 86 05            [24]  178 	mov	ar5,@r0
      000055 08               [12]  179 	inc	r0
      000056 86 04            [24]  180 	mov	ar4,@r0
      000058 08               [12]  181 	inc	r0
      000059 86 03            [24]  182 	mov	ar3,@r0
      00005B 8D 82            [24]  183 	mov	dpl,r5
      00005D 8C 83            [24]  184 	mov	dph,r4
      00005F 8B F0            [24]  185 	mov	b,r3
      000061 12r00r00         [24]  186 	lcall	__gptrget
      000064 FE               [12]  187 	mov	r6,a
      000065 A3               [24]  188 	inc	dptr
      000066 12r00r00         [24]  189 	lcall	__gptrget
      000069 FF               [12]  190 	mov	r7,a
      00006A E5*00            [12]  191 	mov	a,_bp
      00006C 24 16            [12]  192 	add	a,#0x16
      00006E F8               [12]  193 	mov	r0,a
      00006F A6 06            [24]  194 	mov	@r0,ar6
      000071 08               [12]  195 	inc	r0
      000072 A6 07            [24]  196 	mov	@r0,ar7
      000074 08               [12]  197 	inc	r0
      000075 76 00            [12]  198 	mov	@r0,#0x00
      000077 08               [12]  199 	inc	r0
      000078 76 00            [12]  200 	mov	@r0,#0x00
                                    201 ;	c16stombs.c:57: c16s++;
      00007A E5*00            [12]  202 	mov	a,_bp
      00007C 24 FB            [12]  203 	add	a,#0xfb
      00007E F8               [12]  204 	mov	r0,a
      00007F 74 02            [12]  205 	mov	a,#0x02
      000081 2D               [12]  206 	add	a,r5
      000082 F6               [12]  207 	mov	@r0,a
      000083 E4               [12]  208 	clr	a
      000084 3C               [12]  209 	addc	a,r4
      000085 08               [12]  210 	inc	r0
      000086 F6               [12]  211 	mov	@r0,a
      000087 08               [12]  212 	inc	r0
      000088 A6 03            [24]  213 	mov	@r0,ar3
      00008A 02r01r55         [24]  214 	ljmp	00108$
      00008D                        215 00107$:
                                    216 ;	c16stombs.c:59: else if(c16s[0] > 0xdbff || c16s[1] < 0xdc00 || c16s[1] > 0xdfff) // Unpaired surrogate
      00008D C3               [12]  217 	clr	c
      00008E 74 FF            [12]  218 	mov	a,#0xff
      000090 9C               [12]  219 	subb	a,r4
      000091 74 DB            [12]  220 	mov	a,#0xdb
      000093 9B               [12]  221 	subb	a,r3
      000094 40 40            [24]  222 	jc	00101$
      000096 E5*00            [12]  223 	mov	a,_bp
      000098 24 07            [12]  224 	add	a,#0x07
      00009A F8               [12]  225 	mov	r0,a
      00009B 74 02            [12]  226 	mov	a,#0x02
      00009D 26               [12]  227 	add	a,@r0
      00009E FD               [12]  228 	mov	r5,a
      00009F E4               [12]  229 	clr	a
      0000A0 08               [12]  230 	inc	r0
      0000A1 36               [12]  231 	addc	a,@r0
      0000A2 FE               [12]  232 	mov	r6,a
      0000A3 08               [12]  233 	inc	r0
      0000A4 86 07            [24]  234 	mov	ar7,@r0
      0000A6 8D 82            [24]  235 	mov	dpl,r5
      0000A8 8E 83            [24]  236 	mov	dph,r6
      0000AA 8F F0            [24]  237 	mov	b,r7
      0000AC E5*00            [12]  238 	mov	a,_bp
      0000AE 24 04            [12]  239 	add	a,#0x04
      0000B0 F8               [12]  240 	mov	r0,a
      0000B1 12r00r00         [24]  241 	lcall	__gptrget
      0000B4 F6               [12]  242 	mov	@r0,a
      0000B5 A3               [24]  243 	inc	dptr
      0000B6 12r00r00         [24]  244 	lcall	__gptrget
      0000B9 08               [12]  245 	inc	r0
      0000BA F6               [12]  246 	mov	@r0,a
      0000BB E5*00            [12]  247 	mov	a,_bp
      0000BD 24 04            [12]  248 	add	a,#0x04
      0000BF F8               [12]  249 	mov	r0,a
      0000C0 C3               [12]  250 	clr	c
      0000C1 08               [12]  251 	inc	r0
      0000C2 E6               [12]  252 	mov	a,@r0
      0000C3 94 DC            [12]  253 	subb	a,#0xdc
      0000C5 40 0F            [24]  254 	jc	00101$
      0000C7 E5*00            [12]  255 	mov	a,_bp
      0000C9 24 04            [12]  256 	add	a,#0x04
      0000CB F8               [12]  257 	mov	r0,a
      0000CC C3               [12]  258 	clr	c
      0000CD 74 FF            [12]  259 	mov	a,#0xff
      0000CF 96               [12]  260 	subb	a,@r0
      0000D0 74 DF            [12]  261 	mov	a,#0xdf
      0000D2 08               [12]  262 	inc	r0
      0000D3 96               [12]  263 	subb	a,@r0
      0000D4 50 06            [24]  264 	jnc	00102$
      0000D6                        265 00101$:
                                    266 ;	c16stombs.c:60: return(-1);
      0000D6 90 FF FF         [24]  267 	mov	dptr,#0xffff
      0000D9 02r02r75         [24]  268 	ljmp	00121$
      0000DC                        269 00102$:
                                    270 ;	c16stombs.c:63: codepoint = ((unsigned long)(c16s[0]) << 10) -(0xd800ul << 10) + (unsigned long)(c16s[1]) - 0xdc00ul + 0x10000ul;
      0000DC 8B 05            [24]  271 	mov	ar5,r3
      0000DE E4               [12]  272 	clr	a
      0000DF FE               [12]  273 	mov	r6,a
      0000E0 E5*00            [12]  274 	mov	a,_bp
      0000E2 24 0A            [12]  275 	add	a,#0x0a
      0000E4 F8               [12]  276 	mov	r0,a
      0000E5 08               [12]  277 	inc	r0
      0000E6 08               [12]  278 	inc	r0
      0000E7 A6 05            [24]  279 	mov	@r0,ar5
      0000E9 EE               [12]  280 	mov	a,r6
      0000EA C6               [12]  281 	xch	a,@r0
      0000EB 25 E0            [12]  282 	add	a,acc
      0000ED C6               [12]  283 	xch	a,@r0
      0000EE 33               [12]  284 	rlc	a
      0000EF C6               [12]  285 	xch	a,@r0
      0000F0 25 E0            [12]  286 	add	a,acc
      0000F2 C6               [12]  287 	xch	a,@r0
      0000F3 33               [12]  288 	rlc	a
      0000F4 08               [12]  289 	inc	r0
      0000F5 F6               [12]  290 	mov	@r0,a
      0000F6 EC               [12]  291 	mov	a,r4
      0000F7 23               [12]  292 	rl	a
      0000F8 23               [12]  293 	rl	a
      0000F9 54 03            [12]  294 	anl	a,#0x03
      0000FB 18               [12]  295 	dec	r0
      0000FC 46               [12]  296 	orl	a,@r0
      0000FD F6               [12]  297 	mov	@r0,a
      0000FE EC               [12]  298 	mov	a,r4
      0000FF 2C               [12]  299 	add	a,r4
      000100 25 E0            [12]  300 	add	a,acc
      000102 18               [12]  301 	dec	r0
      000103 F6               [12]  302 	mov	@r0,a
      000104 18               [12]  303 	dec	r0
      000105 76 00            [12]  304 	mov	@r0,#0x00
      000107 E5*00            [12]  305 	mov	a,_bp
      000109 24 04            [12]  306 	add	a,#0x04
      00010B F8               [12]  307 	mov	r0,a
      00010C 86 02            [24]  308 	mov	ar2,@r0
      00010E 08               [12]  309 	inc	r0
      00010F 86 03            [24]  310 	mov	ar3,@r0
      000111 E4               [12]  311 	clr	a
      000112 FE               [12]  312 	mov	r6,a
      000113 FF               [12]  313 	mov	r7,a
      000114 E5*00            [12]  314 	mov	a,_bp
      000116 24 0A            [12]  315 	add	a,#0x0a
      000118 F8               [12]  316 	mov	r0,a
      000119 EA               [12]  317 	mov	a,r2
      00011A 26               [12]  318 	add	a,@r0
      00011B FA               [12]  319 	mov	r2,a
      00011C EB               [12]  320 	mov	a,r3
      00011D 08               [12]  321 	inc	r0
      00011E 36               [12]  322 	addc	a,@r0
      00011F FB               [12]  323 	mov	r3,a
      000120 EE               [12]  324 	mov	a,r6
      000121 08               [12]  325 	inc	r0
      000122 36               [12]  326 	addc	a,@r0
      000123 FE               [12]  327 	mov	r6,a
      000124 EF               [12]  328 	mov	a,r7
      000125 08               [12]  329 	inc	r0
      000126 36               [12]  330 	addc	a,@r0
      000127 FF               [12]  331 	mov	r7,a
      000128 E5*00            [12]  332 	mov	a,_bp
      00012A 24 16            [12]  333 	add	a,#0x16
      00012C F8               [12]  334 	mov	r0,a
      00012D A6 02            [24]  335 	mov	@r0,ar2
      00012F 74 24            [12]  336 	mov	a,#0x24
      000131 2B               [12]  337 	add	a,r3
      000132 08               [12]  338 	inc	r0
      000133 F6               [12]  339 	mov	@r0,a
      000134 74 A0            [12]  340 	mov	a,#0xa0
      000136 3E               [12]  341 	addc	a,r6
      000137 08               [12]  342 	inc	r0
      000138 F6               [12]  343 	mov	@r0,a
      000139 74 FC            [12]  344 	mov	a,#0xfc
      00013B 3F               [12]  345 	addc	a,r7
      00013C 08               [12]  346 	inc	r0
      00013D F6               [12]  347 	mov	@r0,a
                                    348 ;	c16stombs.c:64: c16s += 2;
      00013E E5*00            [12]  349 	mov	a,_bp
      000140 24 07            [12]  350 	add	a,#0x07
      000142 F8               [12]  351 	mov	r0,a
      000143 E5*00            [12]  352 	mov	a,_bp
      000145 24 FB            [12]  353 	add	a,#0xfb
      000147 F9               [12]  354 	mov	r1,a
      000148 74 04            [12]  355 	mov	a,#0x04
      00014A 26               [12]  356 	add	a,@r0
      00014B F7               [12]  357 	mov	@r1,a
      00014C E4               [12]  358 	clr	a
      00014D 08               [12]  359 	inc	r0
      00014E 36               [12]  360 	addc	a,@r0
      00014F 09               [12]  361 	inc	r1
      000150 F7               [12]  362 	mov	@r1,a
      000151 08               [12]  363 	inc	r0
      000152 E6               [12]  364 	mov	a,@r0
      000153 09               [12]  365 	inc	r1
      000154 F7               [12]  366 	mov	@r1,a
                                    367 ;	c16stombs.c:87: return(m);
                                    368 ;	c16stombs.c:64: c16s += 2;
      000155                        369 00108$:
                                    370 ;	c16stombs.c:67: if(!codepoint)
      000155 E5*00            [12]  371 	mov	a,_bp
      000157 24 16            [12]  372 	add	a,#0x16
      000159 F8               [12]  373 	mov	r0,a
      00015A E6               [12]  374 	mov	a,@r0
      00015B 08               [12]  375 	inc	r0
      00015C 46               [12]  376 	orl	a,@r0
      00015D 08               [12]  377 	inc	r0
      00015E 46               [12]  378 	orl	a,@r0
      00015F 08               [12]  379 	inc	r0
      000160 46               [12]  380 	orl	a,@r0
      000161 70 28            [24]  381 	jnz	00113$
                                    382 ;	c16stombs.c:69: if(m < n)
      000163 E5*00            [12]  383 	mov	a,_bp
      000165 24 0E            [12]  384 	add	a,#0x0e
      000167 F8               [12]  385 	mov	r0,a
      000168 E5*00            [12]  386 	mov	a,_bp
      00016A 24 F9            [12]  387 	add	a,#0xf9
      00016C F9               [12]  388 	mov	r1,a
      00016D C3               [12]  389 	clr	c
      00016E E6               [12]  390 	mov	a,@r0
      00016F 97               [12]  391 	subb	a,@r1
      000170 08               [12]  392 	inc	r0
      000171 E6               [12]  393 	mov	a,@r0
      000172 09               [12]  394 	inc	r1
      000173 97               [12]  395 	subb	a,@r1
      000174 40 03            [24]  396 	jc	00161$
      000176 02r02r6B         [24]  397 	ljmp	00118$
      000179                        398 00161$:
                                    399 ;	c16stombs.c:70: *s = 0;
      000179 A8*00            [24]  400 	mov	r0,_bp
      00017B 08               [12]  401 	inc	r0
      00017C 86 82            [24]  402 	mov	dpl,@r0
      00017E 08               [12]  403 	inc	r0
      00017F 86 83            [24]  404 	mov	dph,@r0
      000181 08               [12]  405 	inc	r0
      000182 86 F0            [24]  406 	mov	b,@r0
      000184 E4               [12]  407 	clr	a
      000185 12r00r00         [24]  408 	lcall	__gptrput
                                    409 ;	c16stombs.c:71: break;
      000188 02r02r6B         [24]  410 	ljmp	00118$
      00018B                        411 00113$:
                                    412 ;	c16stombs.c:74: l = wctomb(b, codepoint);
      00018B E5*00            [12]  413 	mov	a,_bp
      00018D 24 10            [12]  414 	add	a,#0x10
      00018F FC               [12]  415 	mov	r4,a
      000190 FA               [12]  416 	mov	r2,a
      000191 7B 00            [12]  417 	mov	r3,#0x00
      000193 7F 40            [12]  418 	mov	r7,#0x40
      000195 C0 04            [24]  419 	push	ar4
      000197 E5*00            [12]  420 	mov	a,_bp
      000199 24 16            [12]  421 	add	a,#0x16
      00019B F8               [12]  422 	mov	r0,a
      00019C E6               [12]  423 	mov	a,@r0
      00019D C0 E0            [24]  424 	push	acc
      00019F 08               [12]  425 	inc	r0
      0001A0 E6               [12]  426 	mov	a,@r0
      0001A1 C0 E0            [24]  427 	push	acc
      0001A3 08               [12]  428 	inc	r0
      0001A4 E6               [12]  429 	mov	a,@r0
      0001A5 C0 E0            [24]  430 	push	acc
      0001A7 08               [12]  431 	inc	r0
      0001A8 E6               [12]  432 	mov	a,@r0
      0001A9 C0 E0            [24]  433 	push	acc
      0001AB 8A 82            [24]  434 	mov	dpl,r2
      0001AD 8B 83            [24]  435 	mov	dph,r3
      0001AF 8F F0            [24]  436 	mov	b,r7
      0001B1 12r00r00         [24]  437 	lcall	_wctomb
      0001B4 AE 82            [24]  438 	mov	r6,dpl
      0001B6 AF 83            [24]  439 	mov	r7,dph
      0001B8 E5 81            [12]  440 	mov	a,sp
      0001BA 24 FC            [12]  441 	add	a,#0xfc
      0001BC F5 81            [12]  442 	mov	sp,a
      0001BE D0 04            [24]  443 	pop	ar4
      0001C0 E5*00            [12]  444 	mov	a,_bp
      0001C2 24 14            [12]  445 	add	a,#0x14
      0001C4 F8               [12]  446 	mov	r0,a
      0001C5 A6 06            [24]  447 	mov	@r0,ar6
      0001C7 08               [12]  448 	inc	r0
      0001C8 A6 07            [24]  449 	mov	@r0,ar7
                                    450 ;	c16stombs.c:76: if(l < 0)
      0001CA E5*00            [12]  451 	mov	a,_bp
      0001CC 24 14            [12]  452 	add	a,#0x14
      0001CE F8               [12]  453 	mov	r0,a
      0001CF 08               [12]  454 	inc	r0
      0001D0 E6               [12]  455 	mov	a,@r0
      0001D1 30 E7 06         [24]  456 	jnb	acc.7,00115$
                                    457 ;	c16stombs.c:77: return(-1);
      0001D4 90 FF FF         [24]  458 	mov	dptr,#0xffff
      0001D7 02r02r75         [24]  459 	ljmp	00121$
      0001DA                        460 00115$:
                                    461 ;	c16stombs.c:79: if(m + l > n)
      0001DA C0 04            [24]  462 	push	ar4
      0001DC E5*00            [12]  463 	mov	a,_bp
      0001DE 24 14            [12]  464 	add	a,#0x14
      0001E0 F8               [12]  465 	mov	r0,a
      0001E1 86 03            [24]  466 	mov	ar3,@r0
      0001E3 08               [12]  467 	inc	r0
      0001E4 86 02            [24]  468 	mov	ar2,@r0
      0001E6 E5*00            [12]  469 	mov	a,_bp
      0001E8 24 0E            [12]  470 	add	a,#0x0e
      0001EA F8               [12]  471 	mov	r0,a
      0001EB EB               [12]  472 	mov	a,r3
      0001EC 26               [12]  473 	add	a,@r0
      0001ED FC               [12]  474 	mov	r4,a
      0001EE EA               [12]  475 	mov	a,r2
      0001EF 08               [12]  476 	inc	r0
      0001F0 36               [12]  477 	addc	a,@r0
      0001F1 FF               [12]  478 	mov	r7,a
      0001F2 E5*00            [12]  479 	mov	a,_bp
      0001F4 24 F9            [12]  480 	add	a,#0xf9
      0001F6 F8               [12]  481 	mov	r0,a
      0001F7 C3               [12]  482 	clr	c
      0001F8 E6               [12]  483 	mov	a,@r0
      0001F9 9C               [12]  484 	subb	a,r4
      0001FA 08               [12]  485 	inc	r0
      0001FB E6               [12]  486 	mov	a,@r0
      0001FC 9F               [12]  487 	subb	a,r7
      0001FD D0 04            [24]  488 	pop	ar4
      0001FF 40 6A            [24]  489 	jc	00118$
                                    490 ;	c16stombs.c:82: memcpy(s, b, l);
      000201 E5*00            [12]  491 	mov	a,_bp
      000203 24 0A            [12]  492 	add	a,#0x0a
      000205 F8               [12]  493 	mov	r0,a
      000206 A6 04            [24]  494 	mov	@r0,ar4
      000208 08               [12]  495 	inc	r0
      000209 76 00            [12]  496 	mov	@r0,#0x00
      00020B 08               [12]  497 	inc	r0
      00020C 76 40            [12]  498 	mov	@r0,#0x40
      00020E A8*00            [24]  499 	mov	r0,_bp
      000210 08               [12]  500 	inc	r0
      000211 86 05            [24]  501 	mov	ar5,@r0
      000213 08               [12]  502 	inc	r0
      000214 86 06            [24]  503 	mov	ar6,@r0
      000216 08               [12]  504 	inc	r0
      000217 86 07            [24]  505 	mov	ar7,@r0
      000219 C0 03            [24]  506 	push	ar3
      00021B C0 02            [24]  507 	push	ar2
      00021D E5*00            [12]  508 	mov	a,_bp
      00021F 24 14            [12]  509 	add	a,#0x14
      000221 F8               [12]  510 	mov	r0,a
      000222 E6               [12]  511 	mov	a,@r0
      000223 C0 E0            [24]  512 	push	acc
      000225 08               [12]  513 	inc	r0
      000226 E6               [12]  514 	mov	a,@r0
      000227 C0 E0            [24]  515 	push	acc
      000229 E5*00            [12]  516 	mov	a,_bp
      00022B 24 0A            [12]  517 	add	a,#0x0a
      00022D F8               [12]  518 	mov	r0,a
      00022E E6               [12]  519 	mov	a,@r0
      00022F C0 E0            [24]  520 	push	acc
      000231 08               [12]  521 	inc	r0
      000232 E6               [12]  522 	mov	a,@r0
      000233 C0 E0            [24]  523 	push	acc
      000235 08               [12]  524 	inc	r0
      000236 E6               [12]  525 	mov	a,@r0
      000237 C0 E0            [24]  526 	push	acc
      000239 8D 82            [24]  527 	mov	dpl,r5
      00023B 8E 83            [24]  528 	mov	dph,r6
      00023D 8F F0            [24]  529 	mov	b,r7
      00023F 12r00r00         [24]  530 	lcall	___memcpy
      000242 E5 81            [12]  531 	mov	a,sp
      000244 24 FB            [12]  532 	add	a,#0xfb
      000246 F5 81            [12]  533 	mov	sp,a
      000248 D0 02            [24]  534 	pop	ar2
      00024A D0 03            [24]  535 	pop	ar3
                                    536 ;	c16stombs.c:83: s += l;
      00024C A8*00            [24]  537 	mov	r0,_bp
      00024E 08               [12]  538 	inc	r0
      00024F E5*00            [12]  539 	mov	a,_bp
      000251 24 14            [12]  540 	add	a,#0x14
      000253 F9               [12]  541 	mov	r1,a
      000254 E7               [12]  542 	mov	a,@r1
      000255 26               [12]  543 	add	a,@r0
      000256 F6               [12]  544 	mov	@r0,a
      000257 09               [12]  545 	inc	r1
      000258 E7               [12]  546 	mov	a,@r1
      000259 08               [12]  547 	inc	r0
      00025A 36               [12]  548 	addc	a,@r0
      00025B F6               [12]  549 	mov	@r0,a
                                    550 ;	c16stombs.c:84: m += l;
      00025C E5*00            [12]  551 	mov	a,_bp
      00025E 24 0E            [12]  552 	add	a,#0x0e
      000260 F8               [12]  553 	mov	r0,a
      000261 EB               [12]  554 	mov	a,r3
      000262 26               [12]  555 	add	a,@r0
      000263 F6               [12]  556 	mov	@r0,a
      000264 EA               [12]  557 	mov	a,r2
      000265 08               [12]  558 	inc	r0
      000266 36               [12]  559 	addc	a,@r0
      000267 F6               [12]  560 	mov	@r0,a
      000268 02r00r1A         [24]  561 	ljmp	00119$
      00026B                        562 00118$:
                                    563 ;	c16stombs.c:87: return(m);
      00026B E5*00            [12]  564 	mov	a,_bp
      00026D 24 0E            [12]  565 	add	a,#0x0e
      00026F F8               [12]  566 	mov	r0,a
      000270 86 82            [24]  567 	mov	dpl,@r0
      000272 08               [12]  568 	inc	r0
      000273 86 83            [24]  569 	mov	dph,@r0
      000275                        570 00121$:
                                    571 ;	c16stombs.c:88: }
      000275 85*00 81         [24]  572 	mov	sp,_bp
      000278 D0*00            [24]  573 	pop	_bp
      00027A 22               [24]  574 	ret
                                    575 	.area CSEG    (CODE)
                                    576 	.area CONST   (CODE)
                                    577 	.area XINIT   (CODE)
                                    578 	.area CABS    (ABS,CODE)
