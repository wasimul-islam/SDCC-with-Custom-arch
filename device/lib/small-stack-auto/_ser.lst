                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _ser
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _TF2
                                     12 	.globl _EXF2
                                     13 	.globl _RCLK
                                     14 	.globl _TCLK
                                     15 	.globl _EXEN2
                                     16 	.globl _TR2
                                     17 	.globl _C_T2
                                     18 	.globl _CP_RL2
                                     19 	.globl _T2CON_7
                                     20 	.globl _T2CON_6
                                     21 	.globl _T2CON_5
                                     22 	.globl _T2CON_4
                                     23 	.globl _T2CON_3
                                     24 	.globl _T2CON_2
                                     25 	.globl _T2CON_1
                                     26 	.globl _T2CON_0
                                     27 	.globl _PT2
                                     28 	.globl _ET2
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _PS
                                     38 	.globl _PT1
                                     39 	.globl _PX1
                                     40 	.globl _PT0
                                     41 	.globl _PX0
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _EA
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _TF1
                                     89 	.globl _TR1
                                     90 	.globl _TF0
                                     91 	.globl _TR0
                                     92 	.globl _IE1
                                     93 	.globl _IT1
                                     94 	.globl _IE0
                                     95 	.globl _IT0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _TH2
                                    105 	.globl _TL2
                                    106 	.globl _RCAP2H
                                    107 	.globl _RCAP2L
                                    108 	.globl _T2CON
                                    109 	.globl _B
                                    110 	.globl _ACC
                                    111 	.globl _PSW
                                    112 	.globl _IP
                                    113 	.globl _P3
                                    114 	.globl _IE
                                    115 	.globl _P2
                                    116 	.globl _SBUF
                                    117 	.globl _SCON
                                    118 	.globl _P1
                                    119 	.globl _TH1
                                    120 	.globl _TH0
                                    121 	.globl _TL1
                                    122 	.globl _TL0
                                    123 	.globl _TMOD
                                    124 	.globl _TCON
                                    125 	.globl _PCON
                                    126 	.globl _DPH
                                    127 	.globl _DPL
                                    128 	.globl _SP
                                    129 	.globl _P0
                                    130 	.globl _ser_rxBuffer
                                    131 	.globl _ser_txBuffer
                                    132 	.globl _ser_rxIndexOut
                                    133 	.globl _ser_rxIndexIn
                                    134 	.globl _ser_txIndexOut
                                    135 	.globl _ser_txIndexIn
                                    136 	.globl _ser_init
                                    137 	.globl _ser_interrupt_handler
                                    138 	.globl _ser_putc
                                    139 	.globl _ser_getc
                                    140 	.globl _ser_printString
                                    141 	.globl _ser_charAvail
                                    142 ;--------------------------------------------------------
                                    143 ; special function registers
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0	=	0x0080
                           000081   148 _SP	=	0x0081
                           000082   149 _DPL	=	0x0082
                           000083   150 _DPH	=	0x0083
                           000087   151 _PCON	=	0x0087
                           000088   152 _TCON	=	0x0088
                           000089   153 _TMOD	=	0x0089
                           00008A   154 _TL0	=	0x008a
                           00008B   155 _TL1	=	0x008b
                           00008C   156 _TH0	=	0x008c
                           00008D   157 _TH1	=	0x008d
                           000090   158 _P1	=	0x0090
                           000098   159 _SCON	=	0x0098
                           000099   160 _SBUF	=	0x0099
                           0000A0   161 _P2	=	0x00a0
                           0000A8   162 _IE	=	0x00a8
                           0000B0   163 _P3	=	0x00b0
                           0000B8   164 _IP	=	0x00b8
                           0000D0   165 _PSW	=	0x00d0
                           0000E0   166 _ACC	=	0x00e0
                           0000F0   167 _B	=	0x00f0
                           0000C8   168 _T2CON	=	0x00c8
                           0000CA   169 _RCAP2L	=	0x00ca
                           0000CB   170 _RCAP2H	=	0x00cb
                           0000CC   171 _TL2	=	0x00cc
                           0000CD   172 _TH2	=	0x00cd
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000098   202 _RI	=	0x0098
                           000099   203 _TI	=	0x0099
                           00009A   204 _RB8	=	0x009a
                           00009B   205 _TB8	=	0x009b
                           00009C   206 _REN	=	0x009c
                           00009D   207 _SM2	=	0x009d
                           00009E   208 _SM1	=	0x009e
                           00009F   209 _SM0	=	0x009f
                           0000A0   210 _P2_0	=	0x00a0
                           0000A1   211 _P2_1	=	0x00a1
                           0000A2   212 _P2_2	=	0x00a2
                           0000A3   213 _P2_3	=	0x00a3
                           0000A4   214 _P2_4	=	0x00a4
                           0000A5   215 _P2_5	=	0x00a5
                           0000A6   216 _P2_6	=	0x00a6
                           0000A7   217 _P2_7	=	0x00a7
                           0000A8   218 _EX0	=	0x00a8
                           0000A9   219 _ET0	=	0x00a9
                           0000AA   220 _EX1	=	0x00aa
                           0000AB   221 _ET1	=	0x00ab
                           0000AC   222 _ES	=	0x00ac
                           0000AF   223 _EA	=	0x00af
                           0000B0   224 _P3_0	=	0x00b0
                           0000B1   225 _P3_1	=	0x00b1
                           0000B2   226 _P3_2	=	0x00b2
                           0000B3   227 _P3_3	=	0x00b3
                           0000B4   228 _P3_4	=	0x00b4
                           0000B5   229 _P3_5	=	0x00b5
                           0000B6   230 _P3_6	=	0x00b6
                           0000B7   231 _P3_7	=	0x00b7
                           0000B0   232 _RXD	=	0x00b0
                           0000B1   233 _TXD	=	0x00b1
                           0000B2   234 _INT0	=	0x00b2
                           0000B3   235 _INT1	=	0x00b3
                           0000B4   236 _T0	=	0x00b4
                           0000B5   237 _T1	=	0x00b5
                           0000B6   238 _WR	=	0x00b6
                           0000B7   239 _RD	=	0x00b7
                           0000B8   240 _PX0	=	0x00b8
                           0000B9   241 _PT0	=	0x00b9
                           0000BA   242 _PX1	=	0x00ba
                           0000BB   243 _PT1	=	0x00bb
                           0000BC   244 _PS	=	0x00bc
                           0000D0   245 _P	=	0x00d0
                           0000D1   246 _F1	=	0x00d1
                           0000D2   247 _OV	=	0x00d2
                           0000D3   248 _RS0	=	0x00d3
                           0000D4   249 _RS1	=	0x00d4
                           0000D5   250 _F0	=	0x00d5
                           0000D6   251 _AC	=	0x00d6
                           0000D7   252 _CY	=	0x00d7
                           0000AD   253 _ET2	=	0x00ad
                           0000BD   254 _PT2	=	0x00bd
                           0000C8   255 _T2CON_0	=	0x00c8
                           0000C9   256 _T2CON_1	=	0x00c9
                           0000CA   257 _T2CON_2	=	0x00ca
                           0000CB   258 _T2CON_3	=	0x00cb
                           0000CC   259 _T2CON_4	=	0x00cc
                           0000CD   260 _T2CON_5	=	0x00cd
                           0000CE   261 _T2CON_6	=	0x00ce
                           0000CF   262 _T2CON_7	=	0x00cf
                           0000C8   263 _CP_RL2	=	0x00c8
                           0000C9   264 _C_T2	=	0x00c9
                           0000CA   265 _TR2	=	0x00ca
                           0000CB   266 _EXEN2	=	0x00cb
                           0000CC   267 _TCLK	=	0x00cc
                           0000CD   268 _RCLK	=	0x00cd
                           0000CE   269 _EXF2	=	0x00ce
                           0000CF   270 _TF2	=	0x00cf
                                    271 ;--------------------------------------------------------
                                    272 ; overlayable register banks
                                    273 ;--------------------------------------------------------
                                    274 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        275 	.ds 8
                                    276 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 ;--------------------------------------------------------
                                    279 ; internal ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area DSEG    (DATA)
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable items in internal ram
                                    284 ;--------------------------------------------------------
                                    285 ;--------------------------------------------------------
                                    286 ; indirectly addressable internal ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area ISEG    (DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; absolute internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area IABS    (ABS,DATA)
                                    293 	.area IABS    (ABS,DATA)
                                    294 ;--------------------------------------------------------
                                    295 ; bit data
                                    296 ;--------------------------------------------------------
                                    297 	.area BSEG    (BIT)
      000000                        298 _ser_txBusy:
      000000                        299 	.ds 1
                                    300 ;--------------------------------------------------------
                                    301 ; paged external ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area PSEG    (PAG,XDATA)
                                    304 ;--------------------------------------------------------
                                    305 ; uninitialized external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area XSEG    (XDATA)
      000000                        308 _ser_txIndexIn::
      000000                        309 	.ds 1
      000001                        310 _ser_txIndexOut::
      000001                        311 	.ds 1
      000002                        312 _ser_rxIndexIn::
      000002                        313 	.ds 1
      000003                        314 _ser_rxIndexOut::
      000003                        315 	.ds 1
      000004                        316 _ser_txBuffer::
      000004                        317 	.ds 256
      000104                        318 _ser_rxBuffer::
      000104                        319 	.ds 256
                                    320 ;--------------------------------------------------------
                                    321 ; absolute external ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XABS    (ABS,XDATA)
                                    324 ;--------------------------------------------------------
                                    325 ; initialized external ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area XISEG   (XDATA)
                                    328 	.area HOME    (CODE)
                                    329 	.area GSINIT0 (CODE)
                                    330 	.area GSINIT1 (CODE)
                                    331 	.area GSINIT2 (CODE)
                                    332 	.area GSINIT3 (CODE)
                                    333 	.area GSINIT4 (CODE)
                                    334 	.area GSINIT5 (CODE)
                                    335 	.area GSINIT  (CODE)
                                    336 	.area GSFINAL (CODE)
                                    337 	.area CSEG    (CODE)
                                    338 ;--------------------------------------------------------
                                    339 ; global & static initialisations
                                    340 ;--------------------------------------------------------
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area GSINIT  (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; Home
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
                                    349 	.area HOME    (CODE)
                                    350 ;--------------------------------------------------------
                                    351 ; code
                                    352 ;--------------------------------------------------------
                                    353 	.area CSEG    (CODE)
                                    354 ;------------------------------------------------------------
                                    355 ;Allocation info for local variables in function 'ser_init'
                                    356 ;------------------------------------------------------------
                                    357 ;	_ser.c:76: ser_init(void)
                                    358 ;	-----------------------------------------
                                    359 ;	 function ser_init
                                    360 ;	-----------------------------------------
      000000                        361 _ser_init:
                           000007   362 	ar7 = 0x07
                           000006   363 	ar6 = 0x06
                           000005   364 	ar5 = 0x05
                           000004   365 	ar4 = 0x04
                           000003   366 	ar3 = 0x03
                           000002   367 	ar2 = 0x02
                           000001   368 	ar1 = 0x01
                           000000   369 	ar0 = 0x00
                                    370 ;	_ser.c:78: ES = 0;
                                    371 ;	assignBit
      000000 C2 AC            [12]  372 	clr	_ES
                                    373 ;	_ser.c:80: ser_txBusy     = 0;
                                    374 ;	assignBit
      000002 C2*00            [12]  375 	clr	_ser_txBusy
                                    376 ;	_ser.c:82: ser_txIndexIn  = 0;
      000004 90r00r00         [24]  377 	mov	dptr,#_ser_txIndexIn
      000007 E4               [12]  378 	clr	a
      000008 F0               [24]  379 	movx	@dptr,a
                                    380 ;	_ser.c:83: ser_txIndexOut = 0;
      000009 90r00r01         [24]  381 	mov	dptr,#_ser_txIndexOut
      00000C F0               [24]  382 	movx	@dptr,a
                                    383 ;	_ser.c:84: ser_rxIndexIn  = 0;
      00000D 90r00r02         [24]  384 	mov	dptr,#_ser_rxIndexIn
      000010 F0               [24]  385 	movx	@dptr,a
                                    386 ;	_ser.c:85: ser_rxIndexOut = 0;
      000011 90r00r03         [24]  387 	mov	dptr,#_ser_rxIndexOut
      000014 F0               [24]  388 	movx	@dptr,a
                                    389 ;	_ser.c:87: T2CON = 0x30;
      000015 75 C8 30         [24]  390 	mov	_T2CON,#0x30
                                    391 ;	_ser.c:90: RCAP2H = 0xFF;
      000018 75 CB FF         [24]  392 	mov	_RCAP2H,#0xff
                                    393 ;	_ser.c:91: RCAP2L = 0xDD;
      00001B 75 CA DD         [24]  394 	mov	_RCAP2L,#0xdd
                                    395 ;	_ser.c:94: T2CON = 0x34;
      00001E 75 C8 34         [24]  396 	mov	_T2CON,#0x34
                                    397 ;	_ser.c:96: SCON = 0x50;
      000021 75 98 50         [24]  398 	mov	_SCON,#0x50
                                    399 ;	_ser.c:98: if (TI) {
                                    400 ;	_ser.c:99: TI = 0;
                                    401 ;	assignBit
      000024 10 99 02         [24]  402 	jbc	_TI,00115$
      000027 80 00            [24]  403 	sjmp	00102$
      000029                        404 00115$:
      000029                        405 00102$:
                                    406 ;	_ser.c:101: if (RI) {
                                    407 ;	_ser.c:102: RI = 0;
                                    408 ;	assignBit
      000029 10 98 02         [24]  409 	jbc	_RI,00116$
      00002C 80 00            [24]  410 	sjmp	00104$
      00002E                        411 00116$:
      00002E                        412 00104$:
                                    413 ;	_ser.c:105: ES=1;  
                                    414 ;	assignBit
      00002E D2 AC            [12]  415 	setb	_ES
                                    416 ;	_ser.c:106: }
      000030 22               [24]  417 	ret
                                    418 ;------------------------------------------------------------
                                    419 ;Allocation info for local variables in function 'ser_interrupt_handler'
                                    420 ;------------------------------------------------------------
                                    421 ;	_ser.c:109: ser_interrupt_handler(void) __interrupt (4) __using (1)
                                    422 ;	-----------------------------------------
                                    423 ;	 function ser_interrupt_handler
                                    424 ;	-----------------------------------------
      000031                        425 _ser_interrupt_handler:
                           00000F   426 	ar7 = 0x0f
                           00000E   427 	ar6 = 0x0e
                           00000D   428 	ar5 = 0x0d
                           00000C   429 	ar4 = 0x0c
                           00000B   430 	ar3 = 0x0b
                           00000A   431 	ar2 = 0x0a
                           000009   432 	ar1 = 0x09
                           000008   433 	ar0 = 0x08
      000031 C0 E0            [24]  434 	push	acc
      000033 C0 82            [24]  435 	push	dpl
      000035 C0 83            [24]  436 	push	dph
      000037 C0 D0            [24]  437 	push	psw
      000039 75 D0 08         [24]  438 	mov	psw,#0x08
                                    439 ;	_ser.c:111: ES=0;
                                    440 ;	assignBit
      00003C C2 AC            [12]  441 	clr	_ES
                                    442 ;	_ser.c:113: if (RI) {
                                    443 ;	_ser.c:114: RI = 0;
                                    444 ;	assignBit
      00003E 10 98 02         [24]  445 	jbc	_RI,00122$
      000041 80 14            [24]  446 	sjmp	00102$
      000043                        447 00122$:
                                    448 ;	_ser.c:115: ser_rxBuffer[ser_rxIndexIn++] = SBUF;
      000043 90r00r02         [24]  449 	mov	dptr,#_ser_rxIndexIn
      000046 E0               [24]  450 	movx	a,@dptr
      000047 FF               [12]  451 	mov	r7,a
      000048 04               [12]  452 	inc	a
      000049 F0               [24]  453 	movx	@dptr,a
      00004A EF               [12]  454 	mov	a,r7
      00004B 24r04            [12]  455 	add	a,#_ser_rxBuffer
      00004D F5 82            [12]  456 	mov	dpl,a
      00004F E4               [12]  457 	clr	a
      000050 34s01            [12]  458 	addc	a,#(_ser_rxBuffer >> 8)
      000052 F5 83            [12]  459 	mov	dph,a
      000054 E5 99            [12]  460 	mov	a,_SBUF
      000056 F0               [24]  461 	movx	@dptr,a
      000057                        462 00102$:
                                    463 ;	_ser.c:118: if (TI) {
                                    464 ;	_ser.c:119: TI = 0;
                                    465 ;	assignBit
      000057 10 99 02         [24]  466 	jbc	_TI,00123$
      00005A 80 25            [24]  467 	sjmp	00107$
      00005C                        468 00123$:
                                    469 ;	_ser.c:120: if (ser_txIndexIn == ser_txIndexOut) {
      00005C 90r00r00         [24]  470 	mov	dptr,#_ser_txIndexIn
      00005F E0               [24]  471 	movx	a,@dptr
      000060 FF               [12]  472 	mov	r7,a
      000061 90r00r01         [24]  473 	mov	dptr,#_ser_txIndexOut
      000064 E0               [24]  474 	movx	a,@dptr
      000065 FE               [12]  475 	mov	r6,a
      000066 EF               [12]  476 	mov	a,r7
      000067 B5 0E 04         [24]  477 	cjne	a,ar6,00104$
                                    478 ;	_ser.c:121: ser_txBusy = 0;
                                    479 ;	assignBit
      00006A C2*00            [12]  480 	clr	_ser_txBusy
      00006C 80 13            [24]  481 	sjmp	00107$
      00006E                        482 00104$:
                                    483 ;	_ser.c:124: SBUF = ser_txBuffer[ser_txIndexOut++];
      00006E 90r00r01         [24]  484 	mov	dptr,#_ser_txIndexOut
      000071 EE               [12]  485 	mov	a,r6
      000072 04               [12]  486 	inc	a
      000073 F0               [24]  487 	movx	@dptr,a
      000074 EE               [12]  488 	mov	a,r6
      000075 24r04            [12]  489 	add	a,#_ser_txBuffer
      000077 F5 82            [12]  490 	mov	dpl,a
      000079 E4               [12]  491 	clr	a
      00007A 34s00            [12]  492 	addc	a,#(_ser_txBuffer >> 8)
      00007C F5 83            [12]  493 	mov	dph,a
      00007E E0               [24]  494 	movx	a,@dptr
      00007F F5 99            [12]  495 	mov	_SBUF,a
      000081                        496 00107$:
                                    497 ;	_ser.c:128: ES=1;
                                    498 ;	assignBit
      000081 D2 AC            [12]  499 	setb	_ES
                                    500 ;	_ser.c:129: }
      000083 D0 D0            [24]  501 	pop	psw
      000085 D0 83            [24]  502 	pop	dph
      000087 D0 82            [24]  503 	pop	dpl
      000089 D0 E0            [24]  504 	pop	acc
      00008B 32               [24]  505 	reti
                                    506 ;	eliminated unneeded push/pop b
                                    507 ;------------------------------------------------------------
                                    508 ;Allocation info for local variables in function 'ser_putc'
                                    509 ;------------------------------------------------------------
                                    510 ;c                         Allocated to registers r7 
                                    511 ;------------------------------------------------------------
                                    512 ;	_ser.c:132: ser_putc(unsigned char c)
                                    513 ;	-----------------------------------------
                                    514 ;	 function ser_putc
                                    515 ;	-----------------------------------------
      00008C                        516 _ser_putc:
                           000007   517 	ar7 = 0x07
                           000006   518 	ar6 = 0x06
                           000005   519 	ar5 = 0x05
                           000004   520 	ar4 = 0x04
                           000003   521 	ar3 = 0x03
                           000002   522 	ar2 = 0x02
                           000001   523 	ar1 = 0x01
                           000000   524 	ar0 = 0x00
      00008C AF 82            [24]  525 	mov	r7,dpl
                                    526 ;	_ser.c:134: ES=0;
                                    527 ;	assignBit
      00008E C2 AC            [12]  528 	clr	_ES
                                    529 ;	_ser.c:136: if (ser_txBusy) {
      000090 30*00 15         [24]  530 	jnb	_ser_txBusy,00102$
                                    531 ;	_ser.c:137: ser_txBuffer[ser_txIndexIn++] = c;
      000093 90r00r00         [24]  532 	mov	dptr,#_ser_txIndexIn
      000096 E0               [24]  533 	movx	a,@dptr
      000097 FE               [12]  534 	mov	r6,a
      000098 04               [12]  535 	inc	a
      000099 F0               [24]  536 	movx	@dptr,a
      00009A EE               [12]  537 	mov	a,r6
      00009B 24r04            [12]  538 	add	a,#_ser_txBuffer
      00009D F5 82            [12]  539 	mov	dpl,a
      00009F E4               [12]  540 	clr	a
      0000A0 34s00            [12]  541 	addc	a,#(_ser_txBuffer >> 8)
      0000A2 F5 83            [12]  542 	mov	dph,a
      0000A4 EF               [12]  543 	mov	a,r7
      0000A5 F0               [24]  544 	movx	@dptr,a
      0000A6 80 04            [24]  545 	sjmp	00103$
      0000A8                        546 00102$:
                                    547 ;	_ser.c:140: ser_txBusy = 1;
                                    548 ;	assignBit
      0000A8 D2*00            [12]  549 	setb	_ser_txBusy
                                    550 ;	_ser.c:141: SBUF = c;
      0000AA 8F 99            [24]  551 	mov	_SBUF,r7
      0000AC                        552 00103$:
                                    553 ;	_ser.c:144: ES=1;
                                    554 ;	assignBit
      0000AC D2 AC            [12]  555 	setb	_ES
                                    556 ;	_ser.c:145: }
      0000AE 22               [24]  557 	ret
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'ser_getc'
                                    560 ;------------------------------------------------------------
                                    561 ;tmp                       Allocated to registers r7 
                                    562 ;------------------------------------------------------------
                                    563 ;	_ser.c:148: ser_getc(void)
                                    564 ;	-----------------------------------------
                                    565 ;	 function ser_getc
                                    566 ;	-----------------------------------------
      0000AF                        567 _ser_getc:
                                    568 ;	_ser.c:153: if (ser_rxIndexIn != ser_rxIndexOut) {
      0000AF 90r00r02         [24]  569 	mov	dptr,#_ser_rxIndexIn
      0000B2 E0               [24]  570 	movx	a,@dptr
      0000B3 FF               [12]  571 	mov	r7,a
      0000B4 90r00r03         [24]  572 	mov	dptr,#_ser_rxIndexOut
      0000B7 E0               [24]  573 	movx	a,@dptr
      0000B8 FE               [12]  574 	mov	r6,a
      0000B9 EF               [12]  575 	mov	a,r7
      0000BA B5 06 02         [24]  576 	cjne	a,ar6,00110$
      0000BD 80 14            [24]  577 	sjmp	00102$
      0000BF                        578 00110$:
                                    579 ;	_ser.c:154: tmp = ser_rxBuffer[ser_rxIndexOut++];
      0000BF 90r00r03         [24]  580 	mov	dptr,#_ser_rxIndexOut
      0000C2 EE               [12]  581 	mov	a,r6
      0000C3 04               [12]  582 	inc	a
      0000C4 F0               [24]  583 	movx	@dptr,a
      0000C5 EE               [12]  584 	mov	a,r6
      0000C6 24r04            [12]  585 	add	a,#_ser_rxBuffer
      0000C8 F5 82            [12]  586 	mov	dpl,a
      0000CA E4               [12]  587 	clr	a
      0000CB 34s01            [12]  588 	addc	a,#(_ser_rxBuffer >> 8)
      0000CD F5 83            [12]  589 	mov	dph,a
      0000CF E0               [24]  590 	movx	a,@dptr
      0000D0 FF               [12]  591 	mov	r7,a
      0000D1 80 02            [24]  592 	sjmp	00103$
      0000D3                        593 00102$:
                                    594 ;	_ser.c:157: tmp = 0;
      0000D3 7F 00            [12]  595 	mov	r7,#0x00
      0000D5                        596 00103$:
                                    597 ;	_ser.c:161: return(tmp);
      0000D5 8F 82            [24]  598 	mov	dpl,r7
                                    599 ;	_ser.c:162: }
      0000D7 22               [24]  600 	ret
                                    601 ;------------------------------------------------------------
                                    602 ;Allocation info for local variables in function 'ser_printString'
                                    603 ;------------------------------------------------------------
                                    604 ;String                    Allocated to registers 
                                    605 ;------------------------------------------------------------
                                    606 ;	_ser.c:165: ser_printString(char *String)
                                    607 ;	-----------------------------------------
                                    608 ;	 function ser_printString
                                    609 ;	-----------------------------------------
      0000D8                        610 _ser_printString:
      0000D8 AD 82            [24]  611 	mov	r5,dpl
      0000DA AE 83            [24]  612 	mov	r6,dph
      0000DC AF F0            [24]  613 	mov	r7,b
                                    614 ;	_ser.c:167: while (*String) {
      0000DE                        615 00101$:
      0000DE 8D 82            [24]  616 	mov	dpl,r5
      0000E0 8E 83            [24]  617 	mov	dph,r6
      0000E2 8F F0            [24]  618 	mov	b,r7
      0000E4 12r00r00         [24]  619 	lcall	__gptrget
      0000E7 FC               [12]  620 	mov	r4,a
      0000E8 60 18            [24]  621 	jz	00104$
                                    622 ;	_ser.c:168: ser_putc(*String++);
      0000EA 0D               [12]  623 	inc	r5
      0000EB BD 00 01         [24]  624 	cjne	r5,#0x00,00116$
      0000EE 0E               [12]  625 	inc	r6
      0000EF                        626 00116$:
      0000EF 8C 82            [24]  627 	mov	dpl,r4
      0000F1 C0 07            [24]  628 	push	ar7
      0000F3 C0 06            [24]  629 	push	ar6
      0000F5 C0 05            [24]  630 	push	ar5
      0000F7 12r00r8C         [24]  631 	lcall	_ser_putc
      0000FA D0 05            [24]  632 	pop	ar5
      0000FC D0 06            [24]  633 	pop	ar6
      0000FE D0 07            [24]  634 	pop	ar7
      000100 80 DC            [24]  635 	sjmp	00101$
      000102                        636 00104$:
                                    637 ;	_ser.c:170: }
      000102 22               [24]  638 	ret
                                    639 ;------------------------------------------------------------
                                    640 ;Allocation info for local variables in function 'ser_charAvail'
                                    641 ;------------------------------------------------------------
                                    642 ;ret                       Allocated to registers r7 
                                    643 ;------------------------------------------------------------
                                    644 ;	_ser.c:173: ser_charAvail(void)
                                    645 ;	-----------------------------------------
                                    646 ;	 function ser_charAvail
                                    647 ;	-----------------------------------------
      000103                        648 _ser_charAvail:
                                    649 ;	_ser.c:175: char ret = 0;
      000103 7F 00            [12]  650 	mov	r7,#0x00
                                    651 ;	_ser.c:177: if (ser_rxIndexIn != ser_rxIndexOut) {
      000105 90r00r02         [24]  652 	mov	dptr,#_ser_rxIndexIn
      000108 E0               [24]  653 	movx	a,@dptr
      000109 FE               [12]  654 	mov	r6,a
      00010A 90r00r03         [24]  655 	mov	dptr,#_ser_rxIndexOut
      00010D E0               [24]  656 	movx	a,@dptr
      00010E FD               [12]  657 	mov	r5,a
      00010F EE               [12]  658 	mov	a,r6
      000110 B5 05 02         [24]  659 	cjne	a,ar5,00109$
      000113 80 02            [24]  660 	sjmp	00102$
      000115                        661 00109$:
                                    662 ;	_ser.c:178: ret = 1;
      000115 7F 01            [12]  663 	mov	r7,#0x01
      000117                        664 00102$:
                                    665 ;	_ser.c:181: return(ret);
      000117 8F 82            [24]  666 	mov	dpl,r7
                                    667 ;	_ser.c:182: }
      000119 22               [24]  668 	ret
                                    669 	.area CSEG    (CODE)
                                    670 	.area CONST   (CODE)
                                    671 	.area XINIT   (CODE)
                                    672 	.area CABS    (ABS,CODE)
