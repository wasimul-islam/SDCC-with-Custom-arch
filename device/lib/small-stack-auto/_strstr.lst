                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strstr
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strstr
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'strstr'
                                     91 ;------------------------------------------------------------
                                     92 ;str2                      Allocated to stack - _bp -5
                                     93 ;str1                      Allocated to registers r5 r6 r7 
                                     94 ;cp                        Allocated to stack - _bp +8
                                     95 ;s1                        Allocated to registers r5 r6 r7 
                                     96 ;s2                        Allocated to stack - _bp +11
                                     97 ;sloc0                     Allocated to stack - _bp +1
                                     98 ;sloc1                     Allocated to stack - _bp +4
                                     99 ;sloc2                     Allocated to stack - _bp +5
                                    100 ;sloc3                     Allocated to stack - _bp +6
                                    101 ;------------------------------------------------------------
                                    102 ;	_strstr.c:31: char *strstr ( const char *str1, const char *str2 )
                                    103 ;	-----------------------------------------
                                    104 ;	 function strstr
                                    105 ;	-----------------------------------------
      000000                        106 _strstr:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 E5 81            [12]  116 	mov	a,sp
      000004 F5*00            [12]  117 	mov	_bp,a
      000006 24 0D            [12]  118 	add	a,#0x0d
      000008 F5 81            [12]  119 	mov	sp,a
      00000A AD 82            [24]  120 	mov	r5,dpl
      00000C AE 83            [24]  121 	mov	r6,dph
      00000E AF F0            [24]  122 	mov	r7,b
                                    123 ;	_strstr.c:33: const char *cp = str1;
      000010 E5*00            [12]  124 	mov	a,_bp
      000012 24 08            [12]  125 	add	a,#0x08
      000014 F8               [12]  126 	mov	r0,a
      000015 A6 05            [24]  127 	mov	@r0,ar5
      000017 08               [12]  128 	inc	r0
      000018 A6 06            [24]  129 	mov	@r0,ar6
      00001A 08               [12]  130 	inc	r0
      00001B A6 07            [24]  131 	mov	@r0,ar7
                                    132 ;	_strstr.c:37: if (!*str2)
      00001D E5*00            [12]  133 	mov	a,_bp
      00001F 24 FB            [12]  134 	add	a,#0xfb
      000021 F8               [12]  135 	mov	r0,a
      000022 E5*00            [12]  136 	mov	a,_bp
      000024 24 0B            [12]  137 	add	a,#0x0b
      000026 F9               [12]  138 	mov	r1,a
      000027 E6               [12]  139 	mov	a,@r0
      000028 F7               [12]  140 	mov	@r1,a
      000029 08               [12]  141 	inc	r0
      00002A E6               [12]  142 	mov	a,@r0
      00002B 09               [12]  143 	inc	r1
      00002C F7               [12]  144 	mov	@r1,a
      00002D 08               [12]  145 	inc	r0
      00002E E6               [12]  146 	mov	a,@r0
      00002F 09               [12]  147 	inc	r1
      000030 F7               [12]  148 	mov	@r1,a
      000031 E5*00            [12]  149 	mov	a,_bp
      000033 24 0B            [12]  150 	add	a,#0x0b
      000035 F8               [12]  151 	mov	r0,a
      000036 86 82            [24]  152 	mov	dpl,@r0
      000038 08               [12]  153 	inc	r0
      000039 86 83            [24]  154 	mov	dph,@r0
      00003B 08               [12]  155 	inc	r0
      00003C 86 F0            [24]  156 	mov	b,@r0
      00003E 12r00r00         [24]  157 	lcall	__gptrget
      000041 70 09            [24]  158 	jnz	00122$
                                    159 ;	_strstr.c:38: return ((char*)str1);
      000043 8D 82            [24]  160 	mov	dpl,r5
      000045 8E 83            [24]  161 	mov	dph,r6
      000047 8F F0            [24]  162 	mov	b,r7
      000049 02r01r1D         [24]  163 	ljmp	00113$
                                    164 ;	_strstr.c:40: while (*cp)
      00004C                        165 00122$:
      00004C                        166 00110$:
      00004C 8D 82            [24]  167 	mov	dpl,r5
      00004E 8E 83            [24]  168 	mov	dph,r6
      000050 8F F0            [24]  169 	mov	b,r7
      000052 12r00r00         [24]  170 	lcall	__gptrget
      000055 70 03            [24]  171 	jnz	00149$
      000057 02r01r17         [24]  172 	ljmp	00112$
      00005A                        173 00149$:
                                    174 ;	_strstr.c:43: s2 = str2;
      00005A E5*00            [12]  175 	mov	a,_bp
      00005C 24 0B            [12]  176 	add	a,#0x0b
      00005E F8               [12]  177 	mov	r0,a
      00005F 86 02            [24]  178 	mov	ar2,@r0
      000061 08               [12]  179 	inc	r0
      000062 86 03            [24]  180 	mov	ar3,@r0
      000064 08               [12]  181 	inc	r0
      000065 86 04            [24]  182 	mov	ar4,@r0
                                    183 ;	_strstr.c:45: while (*s1 && *s2 && !(*s1-*s2))
      000067 A8*00            [24]  184 	mov	r0,_bp
      000069 08               [12]  185 	inc	r0
      00006A A6 05            [24]  186 	mov	@r0,ar5
      00006C 08               [12]  187 	inc	r0
      00006D A6 06            [24]  188 	mov	@r0,ar6
      00006F 08               [12]  189 	inc	r0
      000070 A6 07            [24]  190 	mov	@r0,ar7
      000072                        191 00105$:
      000072 A8*00            [24]  192 	mov	r0,_bp
      000074 08               [12]  193 	inc	r0
      000075 86 82            [24]  194 	mov	dpl,@r0
      000077 08               [12]  195 	inc	r0
      000078 86 83            [24]  196 	mov	dph,@r0
      00007A 08               [12]  197 	inc	r0
      00007B 86 F0            [24]  198 	mov	b,@r0
      00007D E5*00            [12]  199 	mov	a,_bp
      00007F 24 04            [12]  200 	add	a,#0x04
      000081 F9               [12]  201 	mov	r1,a
      000082 12r00r00         [24]  202 	lcall	__gptrget
      000085 F7               [12]  203 	mov	@r1,a
      000086 E5*00            [12]  204 	mov	a,_bp
      000088 24 04            [12]  205 	add	a,#0x04
      00008A F8               [12]  206 	mov	r0,a
      00008B E6               [12]  207 	mov	a,@r0
      00008C 60 5A            [24]  208 	jz	00107$
      00008E 8A 82            [24]  209 	mov	dpl,r2
      000090 8B 83            [24]  210 	mov	dph,r3
      000092 8C F0            [24]  211 	mov	b,r4
      000094 E5*00            [12]  212 	mov	a,_bp
      000096 24 05            [12]  213 	add	a,#0x05
      000098 F8               [12]  214 	mov	r0,a
      000099 12r00r00         [24]  215 	lcall	__gptrget
      00009C F6               [12]  216 	mov	@r0,a
      00009D E5*00            [12]  217 	mov	a,_bp
      00009F 24 05            [12]  218 	add	a,#0x05
      0000A1 F8               [12]  219 	mov	r0,a
      0000A2 E6               [12]  220 	mov	a,@r0
      0000A3 60 43            [24]  221 	jz	00107$
      0000A5 C0 05            [24]  222 	push	ar5
      0000A7 C0 06            [24]  223 	push	ar6
      0000A9 C0 07            [24]  224 	push	ar7
      0000AB E5*00            [12]  225 	mov	a,_bp
      0000AD 24 04            [12]  226 	add	a,#0x04
      0000AF F8               [12]  227 	mov	r0,a
      0000B0 E5*00            [12]  228 	mov	a,_bp
      0000B2 24 06            [12]  229 	add	a,#0x06
      0000B4 F9               [12]  230 	mov	r1,a
      0000B5 E6               [12]  231 	mov	a,@r0
      0000B6 F7               [12]  232 	mov	@r1,a
      0000B7 09               [12]  233 	inc	r1
      0000B8 77 00            [12]  234 	mov	@r1,#0x00
      0000BA E5*00            [12]  235 	mov	a,_bp
      0000BC 24 05            [12]  236 	add	a,#0x05
      0000BE F8               [12]  237 	mov	r0,a
      0000BF 86 05            [24]  238 	mov	ar5,@r0
      0000C1 7F 00            [12]  239 	mov	r7,#0x00
      0000C3 E5*00            [12]  240 	mov	a,_bp
      0000C5 24 06            [12]  241 	add	a,#0x06
      0000C7 F8               [12]  242 	mov	r0,a
      0000C8 E6               [12]  243 	mov	a,@r0
      0000C9 C3               [12]  244 	clr	c
      0000CA 9D               [12]  245 	subb	a,r5
      0000CB FD               [12]  246 	mov	r5,a
      0000CC 08               [12]  247 	inc	r0
      0000CD E6               [12]  248 	mov	a,@r0
      0000CE 9F               [12]  249 	subb	a,r7
      0000CF 4D               [12]  250 	orl	a,r5
      0000D0 D0 07            [24]  251 	pop	ar7
      0000D2 D0 06            [24]  252 	pop	ar6
      0000D4 D0 05            [24]  253 	pop	ar5
      0000D6 70 10            [24]  254 	jnz	00107$
                                    255 ;	_strstr.c:46: s1++, s2++;
      0000D8 A8*00            [24]  256 	mov	r0,_bp
      0000DA 08               [12]  257 	inc	r0
      0000DB 06               [12]  258 	inc	@r0
      0000DC B6 00 02         [24]  259 	cjne	@r0,#0x00,00153$
      0000DF 08               [12]  260 	inc	r0
      0000E0 06               [12]  261 	inc	@r0
      0000E1                        262 00153$:
      0000E1 0A               [12]  263 	inc	r2
      0000E2 BA 00 8D         [24]  264 	cjne	r2,#0x00,00105$
      0000E5 0B               [12]  265 	inc	r3
      0000E6 80 8A            [24]  266 	sjmp	00105$
      0000E8                        267 00107$:
                                    268 ;	_strstr.c:48: if (!*s2)
      0000E8 8A 82            [24]  269 	mov	dpl,r2
      0000EA 8B 83            [24]  270 	mov	dph,r3
      0000EC 8C F0            [24]  271 	mov	b,r4
      0000EE 12r00r00         [24]  272 	lcall	__gptrget
      0000F1 70 0F            [24]  273 	jnz	00109$
                                    274 ;	_strstr.c:49: return ((char*)cp);
      0000F3 E5*00            [12]  275 	mov	a,_bp
      0000F5 24 08            [12]  276 	add	a,#0x08
      0000F7 F8               [12]  277 	mov	r0,a
      0000F8 86 82            [24]  278 	mov	dpl,@r0
      0000FA 08               [12]  279 	inc	r0
      0000FB 86 83            [24]  280 	mov	dph,@r0
      0000FD 08               [12]  281 	inc	r0
      0000FE 86 F0            [24]  282 	mov	b,@r0
      000100 80 1B            [24]  283 	sjmp	00113$
      000102                        284 00109$:
                                    285 ;	_strstr.c:51: cp++;
      000102 0D               [12]  286 	inc	r5
      000103 BD 00 01         [24]  287 	cjne	r5,#0x00,00156$
      000106 0E               [12]  288 	inc	r6
      000107                        289 00156$:
      000107 E5*00            [12]  290 	mov	a,_bp
      000109 24 08            [12]  291 	add	a,#0x08
      00010B F8               [12]  292 	mov	r0,a
      00010C A6 05            [24]  293 	mov	@r0,ar5
      00010E 08               [12]  294 	inc	r0
      00010F A6 06            [24]  295 	mov	@r0,ar6
      000111 08               [12]  296 	inc	r0
      000112 A6 07            [24]  297 	mov	@r0,ar7
      000114 02r00r4C         [24]  298 	ljmp	00110$
      000117                        299 00112$:
                                    300 ;	_strstr.c:54: return (NULL) ;
      000117 90 00 00         [24]  301 	mov	dptr,#0x0000
      00011A 75 F0 00         [24]  302 	mov	b,#0x00
      00011D                        303 00113$:
                                    304 ;	_strstr.c:55: }
      00011D 85*00 81         [24]  305 	mov	sp,_bp
      000120 D0*00            [24]  306 	pop	_bp
      000122 22               [24]  307 	ret
                                    308 	.area CSEG    (CODE)
                                    309 	.area CONST   (CODE)
                                    310 	.area XINIT   (CODE)
                                    311 	.area CABS    (ABS,CODE)
