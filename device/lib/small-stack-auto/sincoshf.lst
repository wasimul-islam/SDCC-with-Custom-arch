                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sincoshf
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sincoshf
                                     12 	.globl _expf
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'sincoshf'
                                    106 ;------------------------------------------------------------
                                    107 ;iscosh                    Allocated to stack - _bp -3
                                    108 ;x                         Allocated to stack - _bp +1
                                    109 ;y                         Allocated to registers r7 r6 r5 r4 
                                    110 ;w                         Allocated to registers r7 r6 r5 r4 
                                    111 ;z                         Allocated to stack - _bp +13
                                    112 ;sign                      Allocated to registers b0 
                                    113 ;sloc0                     Allocated to stack - _bp +5
                                    114 ;sloc1                     Allocated to stack - _bp +22
                                    115 ;sloc2                     Allocated to stack - _bp +9
                                    116 ;------------------------------------------------------------
                                    117 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    118 ;	-----------------------------------------
                                    119 ;	 function sincoshf
                                    120 ;	-----------------------------------------
      000000                        121 _sincoshf:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 C0*00            [24]  130 	push	_bp
      000002 85 81*00         [24]  131 	mov	_bp,sp
      000005 C0 82            [24]  132 	push	dpl
      000007 C0 83            [24]  133 	push	dph
      000009 C0 F0            [24]  134 	push	b
      00000B C0 E0            [24]  135 	push	acc
      00000D E5 81            [12]  136 	mov	a,sp
      00000F 24 0C            [12]  137 	add	a,#0x0c
      000011 F5 81            [12]  138 	mov	sp,a
                                    139 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  140 	clr	a
      000014 C0 E0            [24]  141 	push	acc
      000016 C0 E0            [24]  142 	push	acc
      000018 C0 E0            [24]  143 	push	acc
      00001A C0 E0            [24]  144 	push	acc
      00001C A8*00            [24]  145 	mov	r0,_bp
      00001E 08               [12]  146 	inc	r0
      00001F 86 82            [24]  147 	mov	dpl,@r0
      000021 08               [12]  148 	inc	r0
      000022 86 83            [24]  149 	mov	dph,@r0
      000024 08               [12]  150 	inc	r0
      000025 86 F0            [24]  151 	mov	b,@r0
      000027 08               [12]  152 	inc	r0
      000028 E6               [12]  153 	mov	a,@r0
      000029 12r00r00         [24]  154 	lcall	___fslt
      00002C AB 82            [24]  155 	mov	r3,dpl
      00002E E5 81            [12]  156 	mov	a,sp
      000030 24 FC            [12]  157 	add	a,#0xfc
      000032 F5 81            [12]  158 	mov	sp,a
      000034 EB               [12]  159 	mov	a,r3
      000035 60 14            [24]  160 	jz	00102$
      000037 A8*00            [24]  161 	mov	r0,_bp
      000039 08               [12]  162 	inc	r0
      00003A 86 07            [24]  163 	mov	ar7,@r0
      00003C 08               [12]  164 	inc	r0
      00003D 86 06            [24]  165 	mov	ar6,@r0
      00003F 08               [12]  166 	inc	r0
      000040 86 05            [24]  167 	mov	ar5,@r0
      000042 08               [12]  168 	inc	r0
      000043 E6               [12]  169 	mov	a,@r0
      000044 B2 E7            [12]  170 	cpl	acc.7
      000046 FC               [12]  171 	mov	r4,a
                                    172 ;	assignBit
      000047 D2*00            [12]  173 	setb	b0
      000049 80 10            [24]  174 	sjmp	00103$
      00004B                        175 00102$:
                                    176 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  177 	mov	r0,_bp
      00004D 08               [12]  178 	inc	r0
      00004E 86 07            [24]  179 	mov	ar7,@r0
      000050 08               [12]  180 	inc	r0
      000051 86 06            [24]  181 	mov	ar6,@r0
      000053 08               [12]  182 	inc	r0
      000054 86 05            [24]  183 	mov	ar5,@r0
      000056 08               [12]  184 	inc	r0
      000057 86 04            [24]  185 	mov	ar4,@r0
                                    186 ;	assignBit
      000059 C2*00            [12]  187 	clr	b0
      00005B                        188 00103$:
                                    189 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  190 	push	ar7
      00005D C0 06            [24]  191 	push	ar6
      00005F C0 05            [24]  192 	push	ar5
      000061 C0 04            [24]  193 	push	ar4
      000063 C0*00            [24]  194 	push	bits
      000065 C0 07            [24]  195 	push	ar7
      000067 C0 06            [24]  196 	push	ar6
      000069 C0 05            [24]  197 	push	ar5
      00006B C0 04            [24]  198 	push	ar4
      00006D 90 00 00         [24]  199 	mov	dptr,#0x0000
      000070 75 F0 80         [24]  200 	mov	b,#0x80
      000073 74 3F            [12]  201 	mov	a,#0x3f
      000075 12r00r00         [24]  202 	lcall	___fslt
      000078 AB 82            [24]  203 	mov	r3,dpl
      00007A E5 81            [12]  204 	mov	a,sp
      00007C 24 FC            [12]  205 	add	a,#0xfc
      00007E F5 81            [12]  206 	mov	sp,a
      000080 D0*00            [24]  207 	pop	bits
      000082 D0 04            [24]  208 	pop	ar4
      000084 D0 05            [24]  209 	pop	ar5
      000086 D0 06            [24]  210 	pop	ar6
      000088 D0 07            [24]  211 	pop	ar7
      00008A EB               [12]  212 	mov	a,r3
      00008B 70 0B            [24]  213 	jnz	00117$
      00008D E5*00            [12]  214 	mov	a,_bp
      00008F 24 FD            [12]  215 	add	a,#0xfd
      000091 F8               [12]  216 	mov	r0,a
      000092 E6               [12]  217 	mov	a,@r0
      000093 70 03            [24]  218 	jnz	00160$
      000095 02r02r73         [24]  219 	ljmp	00118$
      000098                        220 00160$:
      000098                        221 00117$:
                                    222 ;	sincoshf.c:66: if(y>YBAR)
      000098 C0 07            [24]  223 	push	ar7
      00009A C0 06            [24]  224 	push	ar6
      00009C C0 05            [24]  225 	push	ar5
      00009E C0 04            [24]  226 	push	ar4
      0000A0 C0*00            [24]  227 	push	bits
      0000A2 C0 07            [24]  228 	push	ar7
      0000A4 C0 06            [24]  229 	push	ar6
      0000A6 C0 05            [24]  230 	push	ar5
      0000A8 C0 04            [24]  231 	push	ar4
      0000AA 90 00 00         [24]  232 	mov	dptr,#0x0000
      0000AD 75 F0 10         [24]  233 	mov	b,#0x10
      0000B0 74 41            [12]  234 	mov	a,#0x41
      0000B2 12r00r00         [24]  235 	lcall	___fslt
      0000B5 AB 82            [24]  236 	mov	r3,dpl
      0000B7 E5 81            [12]  237 	mov	a,sp
      0000B9 24 FC            [12]  238 	add	a,#0xfc
      0000BB F5 81            [12]  239 	mov	sp,a
      0000BD D0*00            [24]  240 	pop	bits
      0000BF D0 04            [24]  241 	pop	ar4
      0000C1 D0 05            [24]  242 	pop	ar5
      0000C3 D0 06            [24]  243 	pop	ar6
      0000C5 D0 07            [24]  244 	pop	ar7
      0000C7 EB               [12]  245 	mov	a,r3
      0000C8 70 03            [24]  246 	jnz	00161$
      0000CA 02r01rB6         [24]  247 	ljmp	00110$
      0000CD                        248 00161$:
                                    249 ;	sincoshf.c:68: w=y-K1;
      0000CD C0*00            [24]  250 	push	bits
      0000CF E4               [12]  251 	clr	a
      0000D0 C0 E0            [24]  252 	push	acc
      0000D2 74 73            [12]  253 	mov	a,#0x73
      0000D4 C0 E0            [24]  254 	push	acc
      0000D6 74 31            [12]  255 	mov	a,#0x31
      0000D8 C0 E0            [24]  256 	push	acc
      0000DA 74 3F            [12]  257 	mov	a,#0x3f
      0000DC C0 E0            [24]  258 	push	acc
      0000DE 8F 82            [24]  259 	mov	dpl,r7
      0000E0 8E 83            [24]  260 	mov	dph,r6
      0000E2 8D F0            [24]  261 	mov	b,r5
      0000E4 EC               [12]  262 	mov	a,r4
      0000E5 12r00r00         [24]  263 	lcall	___fssub
      0000E8 AF 82            [24]  264 	mov	r7,dpl
      0000EA AE 83            [24]  265 	mov	r6,dph
      0000EC AD F0            [24]  266 	mov	r5,b
      0000EE FC               [12]  267 	mov	r4,a
      0000EF E5 81            [12]  268 	mov	a,sp
      0000F1 24 FC            [12]  269 	add	a,#0xfc
      0000F3 F5 81            [12]  270 	mov	sp,a
      0000F5 D0*00            [24]  271 	pop	bits
                                    272 ;	sincoshf.c:69: if (w>WMAX)
      0000F7 C0 07            [24]  273 	push	ar7
      0000F9 C0 06            [24]  274 	push	ar6
      0000FB C0 05            [24]  275 	push	ar5
      0000FD C0 04            [24]  276 	push	ar4
      0000FF C0*00            [24]  277 	push	bits
      000101 C0 07            [24]  278 	push	ar7
      000103 C0 06            [24]  279 	push	ar6
      000105 C0 05            [24]  280 	push	ar5
      000107 C0 04            [24]  281 	push	ar4
      000109 90 BD CF         [24]  282 	mov	dptr,#0xbdcf
      00010C 75 F0 33         [24]  283 	mov	b,#0x33
      00010F 74 42            [12]  284 	mov	a,#0x42
      000111 12r00r00         [24]  285 	lcall	___fslt
      000114 AB 82            [24]  286 	mov	r3,dpl
      000116 E5 81            [12]  287 	mov	a,sp
      000118 24 FC            [12]  288 	add	a,#0xfc
      00011A F5 81            [12]  289 	mov	sp,a
      00011C D0*00            [24]  290 	pop	bits
      00011E D0 04            [24]  291 	pop	ar4
      000120 D0 05            [24]  292 	pop	ar5
      000122 D0 06            [24]  293 	pop	ar6
      000124 D0 07            [24]  294 	pop	ar7
      000126 EB               [12]  295 	mov	a,r3
      000127 60 11            [24]  296 	jz	00105$
                                    297 ;	sincoshf.c:71: errno=ERANGE;
      000129 75*00 22         [24]  298 	mov	_errno,#0x22
      00012C 75*01 00         [24]  299 	mov	(_errno + 1),#0x00
                                    300 ;	sincoshf.c:72: z=HUGE_VALF;
      00012F 7F FF            [12]  301 	mov	r7,#0xff
      000131 7E FF            [12]  302 	mov	r6,#0xff
      000133 7D 7F            [12]  303 	mov	r5,#0x7f
      000135 7C 7F            [12]  304 	mov	r4,#0x7f
      000137 02r02r66         [24]  305 	ljmp	00111$
      00013A                        306 00105$:
                                    307 ;	sincoshf.c:76: z=expf(w);
      00013A 8F 82            [24]  308 	mov	dpl,r7
      00013C 8E 83            [24]  309 	mov	dph,r6
      00013E 8D F0            [24]  310 	mov	b,r5
      000140 EC               [12]  311 	mov	a,r4
      000141 C0*00            [24]  312 	push	bits
      000143 12r00r00         [24]  313 	lcall	_expf
      000146 C8               [12]  314 	xch	a,r0
      000147 E5*00            [12]  315 	mov	a,_bp
      000149 24 05            [12]  316 	add	a,#0x05
      00014B C8               [12]  317 	xch	a,r0
      00014C A6 82            [24]  318 	mov	@r0,dpl
      00014E 08               [12]  319 	inc	r0
      00014F A6 83            [24]  320 	mov	@r0,dph
      000151 08               [12]  321 	inc	r0
      000152 A6 F0            [24]  322 	mov	@r0,b
      000154 08               [12]  323 	inc	r0
      000155 F6               [12]  324 	mov	@r0,a
      000156 D0*00            [24]  325 	pop	bits
                                    326 ;	sincoshf.c:77: z+=K3*z;
      000158 C0*00            [24]  327 	push	bits
      00015A E5*00            [12]  328 	mov	a,_bp
      00015C 24 05            [12]  329 	add	a,#0x05
      00015E F8               [12]  330 	mov	r0,a
      00015F E6               [12]  331 	mov	a,@r0
      000160 C0 E0            [24]  332 	push	acc
      000162 08               [12]  333 	inc	r0
      000163 E6               [12]  334 	mov	a,@r0
      000164 C0 E0            [24]  335 	push	acc
      000166 08               [12]  336 	inc	r0
      000167 E6               [12]  337 	mov	a,@r0
      000168 C0 E0            [24]  338 	push	acc
      00016A 08               [12]  339 	inc	r0
      00016B E6               [12]  340 	mov	a,@r0
      00016C C0 E0            [24]  341 	push	acc
      00016E 90 08 97         [24]  342 	mov	dptr,#0x0897
      000171 75 F0 68         [24]  343 	mov	b,#0x68
      000174 74 37            [12]  344 	mov	a,#0x37
      000176 12r00r00         [24]  345 	lcall	___fsmul
      000179 AF 82            [24]  346 	mov	r7,dpl
      00017B AE 83            [24]  347 	mov	r6,dph
      00017D AD F0            [24]  348 	mov	r5,b
      00017F FC               [12]  349 	mov	r4,a
      000180 E5 81            [12]  350 	mov	a,sp
      000182 24 FC            [12]  351 	add	a,#0xfc
      000184 F5 81            [12]  352 	mov	sp,a
      000186 D0*00            [24]  353 	pop	bits
      000188 C0*00            [24]  354 	push	bits
      00018A C0 07            [24]  355 	push	ar7
      00018C C0 06            [24]  356 	push	ar6
      00018E C0 05            [24]  357 	push	ar5
      000190 C0 04            [24]  358 	push	ar4
      000192 E5*00            [12]  359 	mov	a,_bp
      000194 24 05            [12]  360 	add	a,#0x05
      000196 F8               [12]  361 	mov	r0,a
      000197 86 82            [24]  362 	mov	dpl,@r0
      000199 08               [12]  363 	inc	r0
      00019A 86 83            [24]  364 	mov	dph,@r0
      00019C 08               [12]  365 	inc	r0
      00019D 86 F0            [24]  366 	mov	b,@r0
      00019F 08               [12]  367 	inc	r0
      0001A0 E6               [12]  368 	mov	a,@r0
      0001A1 12r00r00         [24]  369 	lcall	___fsadd
      0001A4 AF 82            [24]  370 	mov	r7,dpl
      0001A6 AE 83            [24]  371 	mov	r6,dph
      0001A8 AD F0            [24]  372 	mov	r5,b
      0001AA FC               [12]  373 	mov	r4,a
      0001AB E5 81            [12]  374 	mov	a,sp
      0001AD 24 FC            [12]  375 	add	a,#0xfc
      0001AF F5 81            [12]  376 	mov	sp,a
      0001B1 D0*00            [24]  377 	pop	bits
      0001B3 02r02r66         [24]  378 	ljmp	00111$
      0001B6                        379 00110$:
                                    380 ;	sincoshf.c:82: z=expf(y);
      0001B6 8F 82            [24]  381 	mov	dpl,r7
      0001B8 8E 83            [24]  382 	mov	dph,r6
      0001BA 8D F0            [24]  383 	mov	b,r5
      0001BC EC               [12]  384 	mov	a,r4
      0001BD C0*00            [24]  385 	push	bits
      0001BF 12r00r00         [24]  386 	lcall	_expf
      0001C2 AF 82            [24]  387 	mov	r7,dpl
      0001C4 AE 83            [24]  388 	mov	r6,dph
      0001C6 AD F0            [24]  389 	mov	r5,b
      0001C8 FC               [12]  390 	mov	r4,a
      0001C9 D0*00            [24]  391 	pop	bits
      0001CB E5*00            [12]  392 	mov	a,_bp
      0001CD 24 0D            [12]  393 	add	a,#0x0d
      0001CF F8               [12]  394 	mov	r0,a
      0001D0 A6 07            [24]  395 	mov	@r0,ar7
      0001D2 08               [12]  396 	inc	r0
      0001D3 A6 06            [24]  397 	mov	@r0,ar6
      0001D5 08               [12]  398 	inc	r0
      0001D6 A6 05            [24]  399 	mov	@r0,ar5
      0001D8 08               [12]  400 	inc	r0
      0001D9 A6 04            [24]  401 	mov	@r0,ar4
                                    402 ;	sincoshf.c:83: w=1.0/z;
      0001DB C0*00            [24]  403 	push	bits
      0001DD E5*00            [12]  404 	mov	a,_bp
      0001DF 24 0D            [12]  405 	add	a,#0x0d
      0001E1 F8               [12]  406 	mov	r0,a
      0001E2 E6               [12]  407 	mov	a,@r0
      0001E3 C0 E0            [24]  408 	push	acc
      0001E5 08               [12]  409 	inc	r0
      0001E6 E6               [12]  410 	mov	a,@r0
      0001E7 C0 E0            [24]  411 	push	acc
      0001E9 08               [12]  412 	inc	r0
      0001EA E6               [12]  413 	mov	a,@r0
      0001EB C0 E0            [24]  414 	push	acc
      0001ED 08               [12]  415 	inc	r0
      0001EE E6               [12]  416 	mov	a,@r0
      0001EF C0 E0            [24]  417 	push	acc
      0001F1 90 00 00         [24]  418 	mov	dptr,#0x0000
      0001F4 75 F0 80         [24]  419 	mov	b,#0x80
      0001F7 74 3F            [12]  420 	mov	a,#0x3f
      0001F9 12r00r00         [24]  421 	lcall	___fsdiv
      0001FC AF 82            [24]  422 	mov	r7,dpl
      0001FE AE 83            [24]  423 	mov	r6,dph
      000200 AD F0            [24]  424 	mov	r5,b
      000202 FC               [12]  425 	mov	r4,a
      000203 E5 81            [12]  426 	mov	a,sp
      000205 24 FC            [12]  427 	add	a,#0xfc
      000207 F5 81            [12]  428 	mov	sp,a
      000209 D0*00            [24]  429 	pop	bits
                                    430 ;	sincoshf.c:84: if(!iscosh) w=-w;
      00020B E5*00            [12]  431 	mov	a,_bp
      00020D 24 FD            [12]  432 	add	a,#0xfd
      00020F F8               [12]  433 	mov	r0,a
      000210 E6               [12]  434 	mov	a,@r0
      000211 70 04            [24]  435 	jnz	00108$
      000213 EC               [12]  436 	mov	a,r4
      000214 B2 E7            [12]  437 	cpl	acc.7
      000216 FC               [12]  438 	mov	r4,a
      000217                        439 00108$:
                                    440 ;	sincoshf.c:85: z=(z+w)*0.5;
      000217 C0*00            [24]  441 	push	bits
      000219 C0 07            [24]  442 	push	ar7
      00021B C0 06            [24]  443 	push	ar6
      00021D C0 05            [24]  444 	push	ar5
      00021F C0 04            [24]  445 	push	ar4
      000221 E5*00            [12]  446 	mov	a,_bp
      000223 24 0D            [12]  447 	add	a,#0x0d
      000225 F8               [12]  448 	mov	r0,a
      000226 86 82            [24]  449 	mov	dpl,@r0
      000228 08               [12]  450 	inc	r0
      000229 86 83            [24]  451 	mov	dph,@r0
      00022B 08               [12]  452 	inc	r0
      00022C 86 F0            [24]  453 	mov	b,@r0
      00022E 08               [12]  454 	inc	r0
      00022F E6               [12]  455 	mov	a,@r0
      000230 12r00r00         [24]  456 	lcall	___fsadd
      000233 AF 82            [24]  457 	mov	r7,dpl
      000235 AE 83            [24]  458 	mov	r6,dph
      000237 AD F0            [24]  459 	mov	r5,b
      000239 FC               [12]  460 	mov	r4,a
      00023A E5 81            [12]  461 	mov	a,sp
      00023C 24 FC            [12]  462 	add	a,#0xfc
      00023E F5 81            [12]  463 	mov	sp,a
      000240 D0*00            [24]  464 	pop	bits
      000242 C0*00            [24]  465 	push	bits
      000244 C0 07            [24]  466 	push	ar7
      000246 C0 06            [24]  467 	push	ar6
      000248 C0 05            [24]  468 	push	ar5
      00024A C0 04            [24]  469 	push	ar4
      00024C 90 00 00         [24]  470 	mov	dptr,#(0x00&0x00ff)
      00024F E4               [12]  471 	clr	a
      000250 F5 F0            [12]  472 	mov	b,a
      000252 74 3F            [12]  473 	mov	a,#0x3f
      000254 12r00r00         [24]  474 	lcall	___fsmul
      000257 AF 82            [24]  475 	mov	r7,dpl
      000259 AE 83            [24]  476 	mov	r6,dph
      00025B AD F0            [24]  477 	mov	r5,b
      00025D FC               [12]  478 	mov	r4,a
      00025E E5 81            [12]  479 	mov	a,sp
      000260 24 FC            [12]  480 	add	a,#0xfc
      000262 F5 81            [12]  481 	mov	sp,a
      000264 D0*00            [24]  482 	pop	bits
      000266                        483 00111$:
                                    484 ;	sincoshf.c:87: if(sign) z=-z;
      000266 20*00 03         [24]  485 	jb	b0,00164$
      000269 02r04r16         [24]  486 	ljmp	00119$
      00026C                        487 00164$:
      00026C EC               [12]  488 	mov	a,r4
      00026D B2 E7            [12]  489 	cpl	acc.7
      00026F FC               [12]  490 	mov	r4,a
      000270 02r04r16         [24]  491 	ljmp	00119$
      000273                        492 00118$:
                                    493 ;	sincoshf.c:91: if (y<EPS)
      000273 E4               [12]  494 	clr	a
      000274 C0 E0            [24]  495 	push	acc
      000276 C0 E0            [24]  496 	push	acc
      000278 74 80            [12]  497 	mov	a,#0x80
      00027A C0 E0            [24]  498 	push	acc
      00027C 74 39            [12]  499 	mov	a,#0x39
      00027E C0 E0            [24]  500 	push	acc
      000280 8F 82            [24]  501 	mov	dpl,r7
      000282 8E 83            [24]  502 	mov	dph,r6
      000284 8D F0            [24]  503 	mov	b,r5
      000286 EC               [12]  504 	mov	a,r4
      000287 12r00r00         [24]  505 	lcall	___fslt
      00028A AB 82            [24]  506 	mov	r3,dpl
      00028C E5 81            [12]  507 	mov	a,sp
      00028E 24 FC            [12]  508 	add	a,#0xfc
      000290 F5 81            [12]  509 	mov	sp,a
      000292 EB               [12]  510 	mov	a,r3
      000293 60 11            [24]  511 	jz	00115$
                                    512 ;	sincoshf.c:92: z=x;
      000295 A8*00            [24]  513 	mov	r0,_bp
      000297 08               [12]  514 	inc	r0
      000298 86 07            [24]  515 	mov	ar7,@r0
      00029A 08               [12]  516 	inc	r0
      00029B 86 06            [24]  517 	mov	ar6,@r0
      00029D 08               [12]  518 	inc	r0
      00029E 86 05            [24]  519 	mov	ar5,@r0
      0002A0 08               [12]  520 	inc	r0
      0002A1 86 04            [24]  521 	mov	ar4,@r0
      0002A3 02r04r16         [24]  522 	ljmp	00119$
      0002A6                        523 00115$:
                                    524 ;	sincoshf.c:95: z=x*x;
      0002A6 A8*00            [24]  525 	mov	r0,_bp
      0002A8 08               [12]  526 	inc	r0
      0002A9 E6               [12]  527 	mov	a,@r0
      0002AA C0 E0            [24]  528 	push	acc
      0002AC 08               [12]  529 	inc	r0
      0002AD E6               [12]  530 	mov	a,@r0
      0002AE C0 E0            [24]  531 	push	acc
      0002B0 08               [12]  532 	inc	r0
      0002B1 E6               [12]  533 	mov	a,@r0
      0002B2 C0 E0            [24]  534 	push	acc
      0002B4 08               [12]  535 	inc	r0
      0002B5 E6               [12]  536 	mov	a,@r0
      0002B6 C0 E0            [24]  537 	push	acc
      0002B8 A8*00            [24]  538 	mov	r0,_bp
      0002BA 08               [12]  539 	inc	r0
      0002BB 86 82            [24]  540 	mov	dpl,@r0
      0002BD 08               [12]  541 	inc	r0
      0002BE 86 83            [24]  542 	mov	dph,@r0
      0002C0 08               [12]  543 	inc	r0
      0002C1 86 F0            [24]  544 	mov	b,@r0
      0002C3 08               [12]  545 	inc	r0
      0002C4 E6               [12]  546 	mov	a,@r0
      0002C5 12r00r00         [24]  547 	lcall	___fsmul
      0002C8 C8               [12]  548 	xch	a,r0
      0002C9 E5*00            [12]  549 	mov	a,_bp
      0002CB 24 09            [12]  550 	add	a,#0x09
      0002CD C8               [12]  551 	xch	a,r0
      0002CE A6 82            [24]  552 	mov	@r0,dpl
      0002D0 08               [12]  553 	inc	r0
      0002D1 A6 83            [24]  554 	mov	@r0,dph
      0002D3 08               [12]  555 	inc	r0
      0002D4 A6 F0            [24]  556 	mov	@r0,b
      0002D6 08               [12]  557 	inc	r0
      0002D7 F6               [12]  558 	mov	@r0,a
      0002D8 E5 81            [12]  559 	mov	a,sp
      0002DA 24 FC            [12]  560 	add	a,#0xfc
      0002DC F5 81            [12]  561 	mov	sp,a
                                    562 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      0002DE E5*00            [12]  563 	mov	a,_bp
      0002E0 24 09            [12]  564 	add	a,#0x09
      0002E2 F8               [12]  565 	mov	r0,a
      0002E3 E6               [12]  566 	mov	a,@r0
      0002E4 C0 E0            [24]  567 	push	acc
      0002E6 08               [12]  568 	inc	r0
      0002E7 E6               [12]  569 	mov	a,@r0
      0002E8 C0 E0            [24]  570 	push	acc
      0002EA 08               [12]  571 	inc	r0
      0002EB E6               [12]  572 	mov	a,@r0
      0002EC C0 E0            [24]  573 	push	acc
      0002EE 08               [12]  574 	inc	r0
      0002EF E6               [12]  575 	mov	a,@r0
      0002F0 C0 E0            [24]  576 	push	acc
      0002F2 A8*00            [24]  577 	mov	r0,_bp
      0002F4 08               [12]  578 	inc	r0
      0002F5 86 82            [24]  579 	mov	dpl,@r0
      0002F7 08               [12]  580 	inc	r0
      0002F8 86 83            [24]  581 	mov	dph,@r0
      0002FA 08               [12]  582 	inc	r0
      0002FB 86 F0            [24]  583 	mov	b,@r0
      0002FD 08               [12]  584 	inc	r0
      0002FE E6               [12]  585 	mov	a,@r0
      0002FF 12r00r00         [24]  586 	lcall	___fsmul
      000302 C8               [12]  587 	xch	a,r0
      000303 E5*00            [12]  588 	mov	a,_bp
      000305 24 05            [12]  589 	add	a,#0x05
      000307 C8               [12]  590 	xch	a,r0
      000308 A6 82            [24]  591 	mov	@r0,dpl
      00030A 08               [12]  592 	inc	r0
      00030B A6 83            [24]  593 	mov	@r0,dph
      00030D 08               [12]  594 	inc	r0
      00030E A6 F0            [24]  595 	mov	@r0,b
      000310 08               [12]  596 	inc	r0
      000311 F6               [12]  597 	mov	@r0,a
      000312 E5 81            [12]  598 	mov	a,sp
      000314 24 FC            [12]  599 	add	a,#0xfc
      000316 F5 81            [12]  600 	mov	sp,a
      000318 E5*00            [12]  601 	mov	a,_bp
      00031A 24 09            [12]  602 	add	a,#0x09
      00031C F8               [12]  603 	mov	r0,a
      00031D E6               [12]  604 	mov	a,@r0
      00031E C0 E0            [24]  605 	push	acc
      000320 08               [12]  606 	inc	r0
      000321 E6               [12]  607 	mov	a,@r0
      000322 C0 E0            [24]  608 	push	acc
      000324 08               [12]  609 	inc	r0
      000325 E6               [12]  610 	mov	a,@r0
      000326 C0 E0            [24]  611 	push	acc
      000328 08               [12]  612 	inc	r0
      000329 E6               [12]  613 	mov	a,@r0
      00032A C0 E0            [24]  614 	push	acc
      00032C 90 E6 EA         [24]  615 	mov	dptr,#0xe6ea
      00032F 75 F0 42         [24]  616 	mov	b,#0x42
      000332 74 BE            [12]  617 	mov	a,#0xbe
      000334 12r00r00         [24]  618 	lcall	___fsmul
      000337 AA 82            [24]  619 	mov	r2,dpl
      000339 AB 83            [24]  620 	mov	r3,dph
      00033B AE F0            [24]  621 	mov	r6,b
      00033D FF               [12]  622 	mov	r7,a
      00033E E5 81            [12]  623 	mov	a,sp
      000340 24 FC            [12]  624 	add	a,#0xfc
      000342 F5 81            [12]  625 	mov	sp,a
      000344 74 F0            [12]  626 	mov	a,#0xf0
      000346 C0 E0            [24]  627 	push	acc
      000348 74 69            [12]  628 	mov	a,#0x69
      00034A C0 E0            [24]  629 	push	acc
      00034C 74 E4            [12]  630 	mov	a,#0xe4
      00034E C0 E0            [24]  631 	push	acc
      000350 74 C0            [12]  632 	mov	a,#0xc0
      000352 C0 E0            [24]  633 	push	acc
      000354 8A 82            [24]  634 	mov	dpl,r2
      000356 8B 83            [24]  635 	mov	dph,r3
      000358 8E F0            [24]  636 	mov	b,r6
      00035A EF               [12]  637 	mov	a,r7
      00035B 12r00r00         [24]  638 	lcall	___fsadd
      00035E AC 82            [24]  639 	mov	r4,dpl
      000360 AD 83            [24]  640 	mov	r5,dph
      000362 AE F0            [24]  641 	mov	r6,b
      000364 FF               [12]  642 	mov	r7,a
      000365 E5 81            [12]  643 	mov	a,sp
      000367 24 FC            [12]  644 	add	a,#0xfc
      000369 F5 81            [12]  645 	mov	sp,a
      00036B C0 04            [24]  646 	push	ar4
      00036D C0 05            [24]  647 	push	ar5
      00036F C0 06            [24]  648 	push	ar6
      000371 C0 07            [24]  649 	push	ar7
      000373 E5*00            [12]  650 	mov	a,_bp
      000375 24 05            [12]  651 	add	a,#0x05
      000377 F8               [12]  652 	mov	r0,a
      000378 86 82            [24]  653 	mov	dpl,@r0
      00037A 08               [12]  654 	inc	r0
      00037B 86 83            [24]  655 	mov	dph,@r0
      00037D 08               [12]  656 	inc	r0
      00037E 86 F0            [24]  657 	mov	b,@r0
      000380 08               [12]  658 	inc	r0
      000381 E6               [12]  659 	mov	a,@r0
      000382 12r00r00         [24]  660 	lcall	___fsmul
      000385 C8               [12]  661 	xch	a,r0
      000386 E5*00            [12]  662 	mov	a,_bp
      000388 24 05            [12]  663 	add	a,#0x05
      00038A C8               [12]  664 	xch	a,r0
      00038B A6 82            [24]  665 	mov	@r0,dpl
      00038D 08               [12]  666 	inc	r0
      00038E A6 83            [24]  667 	mov	@r0,dph
      000390 08               [12]  668 	inc	r0
      000391 A6 F0            [24]  669 	mov	@r0,b
      000393 08               [12]  670 	inc	r0
      000394 F6               [12]  671 	mov	@r0,a
      000395 E5 81            [12]  672 	mov	a,sp
      000397 24 FC            [12]  673 	add	a,#0xfc
      000399 F5 81            [12]  674 	mov	sp,a
      00039B 74 93            [12]  675 	mov	a,#0x93
      00039D C0 E0            [24]  676 	push	acc
      00039F 74 4F            [12]  677 	mov	a,#0x4f
      0003A1 C0 E0            [24]  678 	push	acc
      0003A3 74 2B            [12]  679 	mov	a,#0x2b
      0003A5 C0 E0            [24]  680 	push	acc
      0003A7 74 C2            [12]  681 	mov	a,#0xc2
      0003A9 C0 E0            [24]  682 	push	acc
      0003AB E5*00            [12]  683 	mov	a,_bp
      0003AD 24 09            [12]  684 	add	a,#0x09
      0003AF F8               [12]  685 	mov	r0,a
      0003B0 86 82            [24]  686 	mov	dpl,@r0
      0003B2 08               [12]  687 	inc	r0
      0003B3 86 83            [24]  688 	mov	dph,@r0
      0003B5 08               [12]  689 	inc	r0
      0003B6 86 F0            [24]  690 	mov	b,@r0
      0003B8 08               [12]  691 	inc	r0
      0003B9 E6               [12]  692 	mov	a,@r0
      0003BA 12r00r00         [24]  693 	lcall	___fsadd
      0003BD AA 82            [24]  694 	mov	r2,dpl
      0003BF AB 83            [24]  695 	mov	r3,dph
      0003C1 AE F0            [24]  696 	mov	r6,b
      0003C3 FF               [12]  697 	mov	r7,a
      0003C4 E5 81            [12]  698 	mov	a,sp
      0003C6 24 FC            [12]  699 	add	a,#0xfc
      0003C8 F5 81            [12]  700 	mov	sp,a
      0003CA C0 02            [24]  701 	push	ar2
      0003CC C0 03            [24]  702 	push	ar3
      0003CE C0 06            [24]  703 	push	ar6
      0003D0 C0 07            [24]  704 	push	ar7
      0003D2 E5*00            [12]  705 	mov	a,_bp
      0003D4 24 05            [12]  706 	add	a,#0x05
      0003D6 F8               [12]  707 	mov	r0,a
      0003D7 86 82            [24]  708 	mov	dpl,@r0
      0003D9 08               [12]  709 	inc	r0
      0003DA 86 83            [24]  710 	mov	dph,@r0
      0003DC 08               [12]  711 	inc	r0
      0003DD 86 F0            [24]  712 	mov	b,@r0
      0003DF 08               [12]  713 	inc	r0
      0003E0 E6               [12]  714 	mov	a,@r0
      0003E1 12r00r00         [24]  715 	lcall	___fsdiv
      0003E4 AC 82            [24]  716 	mov	r4,dpl
      0003E6 AD 83            [24]  717 	mov	r5,dph
      0003E8 AE F0            [24]  718 	mov	r6,b
      0003EA FF               [12]  719 	mov	r7,a
      0003EB E5 81            [12]  720 	mov	a,sp
      0003ED 24 FC            [12]  721 	add	a,#0xfc
      0003EF F5 81            [12]  722 	mov	sp,a
      0003F1 C0 04            [24]  723 	push	ar4
      0003F3 C0 05            [24]  724 	push	ar5
      0003F5 C0 06            [24]  725 	push	ar6
      0003F7 C0 07            [24]  726 	push	ar7
      0003F9 A8*00            [24]  727 	mov	r0,_bp
      0003FB 08               [12]  728 	inc	r0
      0003FC 86 82            [24]  729 	mov	dpl,@r0
      0003FE 08               [12]  730 	inc	r0
      0003FF 86 83            [24]  731 	mov	dph,@r0
      000401 08               [12]  732 	inc	r0
      000402 86 F0            [24]  733 	mov	b,@r0
      000404 08               [12]  734 	inc	r0
      000405 E6               [12]  735 	mov	a,@r0
      000406 12r00r00         [24]  736 	lcall	___fsadd
      000409 AF 82            [24]  737 	mov	r7,dpl
      00040B AE 83            [24]  738 	mov	r6,dph
      00040D AD F0            [24]  739 	mov	r5,b
      00040F FC               [12]  740 	mov	r4,a
      000410 E5 81            [12]  741 	mov	a,sp
      000412 24 FC            [12]  742 	add	a,#0xfc
      000414 F5 81            [12]  743 	mov	sp,a
      000416                        744 00119$:
                                    745 ;	sincoshf.c:99: return z;
      000416 8F 82            [24]  746 	mov	dpl,r7
      000418 8E 83            [24]  747 	mov	dph,r6
      00041A 8D F0            [24]  748 	mov	b,r5
      00041C EC               [12]  749 	mov	a,r4
                                    750 ;	sincoshf.c:100: }
      00041D 85*00 81         [24]  751 	mov	sp,_bp
      000420 D0*00            [24]  752 	pop	_bp
      000422 22               [24]  753 	ret
                                    754 	.area CSEG    (CODE)
                                    755 	.area CONST   (CODE)
                                    756 	.area XINIT   (CODE)
                                    757 	.area CABS    (ABS,CODE)
