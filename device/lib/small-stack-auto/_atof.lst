                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _atof
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 	.globl _toupper
                                     13 	.globl _isspace
                                     14 	.globl _atof
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; overlayable bit register bank
                                     32 ;--------------------------------------------------------
                                     33 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         34 bits:
      000000                         35 	.ds 1
                           008000    36 	b0 = bits[0]
                           008100    37 	b1 = bits[1]
                           008200    38 	b2 = bits[2]
                           008300    39 	b3 = bits[3]
                           008400    40 	b4 = bits[4]
                           008500    41 	b5 = bits[5]
                           008600    42 	b6 = bits[6]
                           008700    43 	b7 = bits[7]
                                     44 ;--------------------------------------------------------
                                     45 ; internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DSEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; uninitialized external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XABS    (ABS,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; initialized external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XISEG   (XDATA)
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT0 (CODE)
                                     82 	.area GSINIT1 (CODE)
                                     83 	.area GSINIT2 (CODE)
                                     84 	.area GSINIT3 (CODE)
                                     85 	.area GSINIT4 (CODE)
                                     86 	.area GSINIT5 (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area CSEG    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'atof'
                                    108 ;------------------------------------------------------------
                                    109 ;s                         Allocated to registers 
                                    110 ;__1310720004              Allocated to registers 
                                    111 ;value                     Allocated to stack - _bp +12
                                    112 ;fraction                  Allocated to registers r7 r6 r5 r2 
                                    113 ;iexp                      Allocated to registers r6 
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;__1966080005              Allocated to registers 
                                    116 ;c                         Allocated to registers 
                                    117 ;__1966080007              Allocated to registers 
                                    118 ;__2621440008              Allocated to registers 
                                    119 ;c                         Allocated to registers 
                                    120 ;sloc0                     Allocated to stack - _bp +26
                                    121 ;sloc1                     Allocated to stack - _bp +1
                                    122 ;sloc2                     Allocated to stack - _bp +4
                                    123 ;sloc3                     Allocated to stack - _bp +8
                                    124 ;------------------------------------------------------------
                                    125 ;	_atof.c:33: float atof(const char * s)
                                    126 ;	-----------------------------------------
                                    127 ;	 function atof
                                    128 ;	-----------------------------------------
      000000                        129 _atof:
                           000007   130 	ar7 = 0x07
                           000006   131 	ar6 = 0x06
                           000005   132 	ar5 = 0x05
                           000004   133 	ar4 = 0x04
                           000003   134 	ar3 = 0x03
                           000002   135 	ar2 = 0x02
                           000001   136 	ar1 = 0x01
                           000000   137 	ar0 = 0x00
      000000 C0*00            [24]  138 	push	_bp
      000002 E5 81            [12]  139 	mov	a,sp
      000004 F5*00            [12]  140 	mov	_bp,a
      000006 24 0F            [12]  141 	add	a,#0x0f
      000008 F5 81            [12]  142 	mov	sp,a
      00000A AD 82            [24]  143 	mov	r5,dpl
      00000C AE 83            [24]  144 	mov	r6,dph
      00000E AF F0            [24]  145 	mov	r7,b
                                    146 ;	_atof.c:40: while (isspace(*s)) s++;
      000010                        147 00101$:
      000010 8D 82            [24]  148 	mov	dpl,r5
      000012 8E 83            [24]  149 	mov	dph,r6
      000014 8F F0            [24]  150 	mov	b,r7
      000016 12r00r00         [24]  151 	lcall	__gptrget
      000019 FC               [12]  152 	mov	r4,a
      00001A 7B 00            [12]  153 	mov	r3,#0x00
      00001C 8C 82            [24]  154 	mov	dpl,r4
      00001E 8B 83            [24]  155 	mov	dph,r3
      000020 C0 07            [24]  156 	push	ar7
      000022 C0 06            [24]  157 	push	ar6
      000024 C0 05            [24]  158 	push	ar5
      000026 12r00r00         [24]  159 	lcall	_isspace
      000029 E5 82            [12]  160 	mov	a,dpl
      00002B 85 83 F0         [24]  161 	mov	b,dph
      00002E D0 05            [24]  162 	pop	ar5
      000030 D0 06            [24]  163 	pop	ar6
      000032 D0 07            [24]  164 	pop	ar7
      000034 45 F0            [12]  165 	orl	a,b
      000036 60 07            [24]  166 	jz	00155$
      000038 0D               [12]  167 	inc	r5
      000039 BD 00 D4         [24]  168 	cjne	r5,#0x00,00101$
      00003C 0E               [12]  169 	inc	r6
      00003D 80 D1            [24]  170 	sjmp	00101$
      00003F                        171 00155$:
      00003F A8*00            [24]  172 	mov	r0,_bp
      000041 08               [12]  173 	inc	r0
      000042 A6 05            [24]  174 	mov	@r0,ar5
      000044 08               [12]  175 	inc	r0
      000045 A6 06            [24]  176 	mov	@r0,ar6
      000047 08               [12]  177 	inc	r0
      000048 A6 07            [24]  178 	mov	@r0,ar7
                                    179 ;	_atof.c:43: if (*s == '-')
      00004A 8D 82            [24]  180 	mov	dpl,r5
      00004C 8E 83            [24]  181 	mov	dph,r6
      00004E 8F F0            [24]  182 	mov	b,r7
      000050 12r00r00         [24]  183 	lcall	__gptrget
      000053 FC               [12]  184 	mov	r4,a
      000054 BC 2D 12         [24]  185 	cjne	r4,#0x2d,00107$
                                    186 ;	_atof.c:45: sign=1;
                                    187 ;	assignBit
      000057 D2*00            [12]  188 	setb	b0
                                    189 ;	_atof.c:46: s++;
      000059 A8*00            [24]  190 	mov	r0,_bp
      00005B 08               [12]  191 	inc	r0
      00005C 74 01            [12]  192 	mov	a,#0x01
      00005E 2D               [12]  193 	add	a,r5
      00005F F6               [12]  194 	mov	@r0,a
      000060 E4               [12]  195 	clr	a
      000061 3E               [12]  196 	addc	a,r6
      000062 08               [12]  197 	inc	r0
      000063 F6               [12]  198 	mov	@r0,a
      000064 08               [12]  199 	inc	r0
      000065 A6 07            [24]  200 	mov	@r0,ar7
      000067 80 13            [24]  201 	sjmp	00108$
      000069                        202 00107$:
                                    203 ;	_atof.c:50: sign=0;
                                    204 ;	assignBit
      000069 C2*00            [12]  205 	clr	b0
                                    206 ;	_atof.c:51: if (*s == '+') s++;
      00006B BC 2B 0E         [24]  207 	cjne	r4,#0x2b,00108$
      00006E A8*00            [24]  208 	mov	r0,_bp
      000070 08               [12]  209 	inc	r0
      000071 74 01            [12]  210 	mov	a,#0x01
      000073 2D               [12]  211 	add	a,r5
      000074 F6               [12]  212 	mov	@r0,a
      000075 E4               [12]  213 	clr	a
      000076 3E               [12]  214 	addc	a,r6
      000077 08               [12]  215 	inc	r0
      000078 F6               [12]  216 	mov	@r0,a
      000079 08               [12]  217 	inc	r0
      00007A A6 07            [24]  218 	mov	@r0,ar7
      00007C                        219 00108$:
                                    220 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00007C E5*00            [12]  221 	mov	a,_bp
      00007E 24 0C            [12]  222 	add	a,#0x0c
      000080 F8               [12]  223 	mov	r0,a
      000081 E4               [12]  224 	clr	a
      000082 F6               [12]  225 	mov	@r0,a
      000083 08               [12]  226 	inc	r0
      000084 F6               [12]  227 	mov	@r0,a
      000085 08               [12]  228 	inc	r0
      000086 F6               [12]  229 	mov	@r0,a
      000087 08               [12]  230 	inc	r0
      000088 F6               [12]  231 	mov	@r0,a
      000089 A8*00            [24]  232 	mov	r0,_bp
      00008B 08               [12]  233 	inc	r0
      00008C                        234 00126$:
      00008C A8*00            [24]  235 	mov	r0,_bp
      00008E 08               [12]  236 	inc	r0
      00008F 86 82            [24]  237 	mov	dpl,@r0
      000091 08               [12]  238 	inc	r0
      000092 86 83            [24]  239 	mov	dph,@r0
      000094 08               [12]  240 	inc	r0
      000095 86 F0            [24]  241 	mov	b,@r0
      000097 12r00r00         [24]  242 	lcall	__gptrget
      00009A FE               [12]  243 	mov	r6,a
                                    244 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      00009B BE 30 00         [24]  245 	cjne	r6,#0x30,00226$
      00009E                        246 00226$:
      00009E 92*00            [24]  247 	mov	b1,c
      0000A0 50 03            [24]  248 	jnc	00227$
      0000A2 02r01r57         [24]  249 	ljmp	00156$
      0000A5                        250 00227$:
      0000A5 EE               [12]  251 	mov	a,r6
      0000A6 24 C6            [12]  252 	add	a,#0xff - 0x39
      0000A8 92*00            [24]  253 	mov	b1,c
      0000AA 50 03            [24]  254 	jnc	00228$
      0000AC 02r01r57         [24]  255 	ljmp	00156$
      0000AF                        256 00228$:
                                    257 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000AF C0*00            [24]  258 	push	bits
      0000B1 E5*00            [12]  259 	mov	a,_bp
      0000B3 24 0C            [12]  260 	add	a,#0x0c
      0000B5 F8               [12]  261 	mov	r0,a
      0000B6 E6               [12]  262 	mov	a,@r0
      0000B7 C0 E0            [24]  263 	push	acc
      0000B9 08               [12]  264 	inc	r0
      0000BA E6               [12]  265 	mov	a,@r0
      0000BB C0 E0            [24]  266 	push	acc
      0000BD 08               [12]  267 	inc	r0
      0000BE E6               [12]  268 	mov	a,@r0
      0000BF C0 E0            [24]  269 	push	acc
      0000C1 08               [12]  270 	inc	r0
      0000C2 E6               [12]  271 	mov	a,@r0
      0000C3 C0 E0            [24]  272 	push	acc
      0000C5 90 00 00         [24]  273 	mov	dptr,#0x0000
      0000C8 75 F0 20         [24]  274 	mov	b,#0x20
      0000CB 74 41            [12]  275 	mov	a,#0x41
      0000CD 12r00r00         [24]  276 	lcall	___fsmul
      0000D0 C8               [12]  277 	xch	a,r0
      0000D1 E5*00            [12]  278 	mov	a,_bp
      0000D3 24 04            [12]  279 	add	a,#0x04
      0000D5 C8               [12]  280 	xch	a,r0
      0000D6 A6 82            [24]  281 	mov	@r0,dpl
      0000D8 08               [12]  282 	inc	r0
      0000D9 A6 83            [24]  283 	mov	@r0,dph
      0000DB 08               [12]  284 	inc	r0
      0000DC A6 F0            [24]  285 	mov	@r0,b
      0000DE 08               [12]  286 	inc	r0
      0000DF F6               [12]  287 	mov	@r0,a
      0000E0 E5 81            [12]  288 	mov	a,sp
      0000E2 24 FC            [12]  289 	add	a,#0xfc
      0000E4 F5 81            [12]  290 	mov	sp,a
      0000E6 D0*00            [24]  291 	pop	bits
      0000E8 A8*00            [24]  292 	mov	r0,_bp
      0000EA 08               [12]  293 	inc	r0
      0000EB 86 82            [24]  294 	mov	dpl,@r0
      0000ED 08               [12]  295 	inc	r0
      0000EE 86 83            [24]  296 	mov	dph,@r0
      0000F0 08               [12]  297 	inc	r0
      0000F1 86 F0            [24]  298 	mov	b,@r0
      0000F3 12r00r00         [24]  299 	lcall	__gptrget
      0000F6 FB               [12]  300 	mov	r3,a
      0000F7 A3               [24]  301 	inc	dptr
      0000F8 18               [12]  302 	dec	r0
      0000F9 18               [12]  303 	dec	r0
      0000FA A6 82            [24]  304 	mov	@r0,dpl
      0000FC 08               [12]  305 	inc	r0
      0000FD A6 83            [24]  306 	mov	@r0,dph
      0000FF 7A 00            [12]  307 	mov	r2,#0x00
      000101 EB               [12]  308 	mov	a,r3
      000102 24 D0            [12]  309 	add	a,#0xd0
      000104 F5 82            [12]  310 	mov	dpl,a
      000106 EA               [12]  311 	mov	a,r2
      000107 34 FF            [12]  312 	addc	a,#0xff
      000109 F5 83            [12]  313 	mov	dph,a
      00010B C0*00            [24]  314 	push	bits
      00010D 12r00r00         [24]  315 	lcall	___sint2fs
      000110 AA 82            [24]  316 	mov	r2,dpl
      000112 AB 83            [24]  317 	mov	r3,dph
      000114 AE F0            [24]  318 	mov	r6,b
      000116 FF               [12]  319 	mov	r7,a
      000117 D0*00            [24]  320 	pop	bits
      000119 C0*00            [24]  321 	push	bits
      00011B C0 02            [24]  322 	push	ar2
      00011D C0 03            [24]  323 	push	ar3
      00011F C0 06            [24]  324 	push	ar6
      000121 C0 07            [24]  325 	push	ar7
      000123 E5*00            [12]  326 	mov	a,_bp
      000125 24 04            [12]  327 	add	a,#0x04
      000127 F8               [12]  328 	mov	r0,a
      000128 86 82            [24]  329 	mov	dpl,@r0
      00012A 08               [12]  330 	inc	r0
      00012B 86 83            [24]  331 	mov	dph,@r0
      00012D 08               [12]  332 	inc	r0
      00012E 86 F0            [24]  333 	mov	b,@r0
      000130 08               [12]  334 	inc	r0
      000131 E6               [12]  335 	mov	a,@r0
      000132 12r00r00         [24]  336 	lcall	___fsadd
      000135 AC 82            [24]  337 	mov	r4,dpl
      000137 AD 83            [24]  338 	mov	r5,dph
      000139 AE F0            [24]  339 	mov	r6,b
      00013B FF               [12]  340 	mov	r7,a
      00013C E5 81            [12]  341 	mov	a,sp
      00013E 24 FC            [12]  342 	add	a,#0xfc
      000140 F5 81            [12]  343 	mov	sp,a
      000142 D0*00            [24]  344 	pop	bits
      000144 E5*00            [12]  345 	mov	a,_bp
      000146 24 0C            [12]  346 	add	a,#0x0c
      000148 F8               [12]  347 	mov	r0,a
      000149 A6 04            [24]  348 	mov	@r0,ar4
      00014B 08               [12]  349 	inc	r0
      00014C A6 05            [24]  350 	mov	@r0,ar5
      00014E 08               [12]  351 	inc	r0
      00014F A6 06            [24]  352 	mov	@r0,ar6
      000151 08               [12]  353 	inc	r0
      000152 A6 07            [24]  354 	mov	@r0,ar7
                                    355 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000154 02r00r8C         [24]  356 	ljmp	00126$
      000157                        357 00156$:
      000157 A8*00            [24]  358 	mov	r0,_bp
      000159 08               [12]  359 	inc	r0
      00015A 86 05            [24]  360 	mov	ar5,@r0
      00015C 08               [12]  361 	inc	r0
      00015D 86 06            [24]  362 	mov	ar6,@r0
      00015F 08               [12]  363 	inc	r0
      000160 86 07            [24]  364 	mov	ar7,@r0
                                    365 ;	_atof.c:61: if (*s == '.')
      000162 A8*00            [24]  366 	mov	r0,_bp
      000164 08               [12]  367 	inc	r0
      000165 86 82            [24]  368 	mov	dpl,@r0
      000167 08               [12]  369 	inc	r0
      000168 86 83            [24]  370 	mov	dph,@r0
      00016A 08               [12]  371 	inc	r0
      00016B 86 F0            [24]  372 	mov	b,@r0
      00016D 12r00r00         [24]  373 	lcall	__gptrget
      000170 FC               [12]  374 	mov	r4,a
      000171 BC 2E 02         [24]  375 	cjne	r4,#0x2e,00229$
      000174 80 03            [24]  376 	sjmp	00230$
      000176                        377 00229$:
      000176 02r02rF0         [24]  378 	ljmp	00112$
      000179                        379 00230$:
                                    380 ;	_atof.c:63: s++;
      000179 A8*00            [24]  381 	mov	r0,_bp
      00017B 08               [12]  382 	inc	r0
      00017C E5*00            [12]  383 	mov	a,_bp
      00017E 24 04            [12]  384 	add	a,#0x04
      000180 F9               [12]  385 	mov	r1,a
      000181 74 01            [12]  386 	mov	a,#0x01
      000183 26               [12]  387 	add	a,@r0
      000184 F7               [12]  388 	mov	@r1,a
      000185 E4               [12]  389 	clr	a
      000186 08               [12]  390 	inc	r0
      000187 36               [12]  391 	addc	a,@r0
      000188 09               [12]  392 	inc	r1
      000189 F7               [12]  393 	mov	@r1,a
      00018A 08               [12]  394 	inc	r0
      00018B E6               [12]  395 	mov	a,@r0
      00018C 09               [12]  396 	inc	r1
      00018D F7               [12]  397 	mov	@r1,a
                                    398 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      00018E 7F CD            [12]  399 	mov	r7,#0xcd
      000190 7E CC            [12]  400 	mov	r6,#0xcc
      000192 7D CC            [12]  401 	mov	r5,#0xcc
      000194 7A 3D            [12]  402 	mov	r2,#0x3d
      000196                        403 00129$:
      000196 E5*00            [12]  404 	mov	a,_bp
      000198 24 04            [12]  405 	add	a,#0x04
      00019A F8               [12]  406 	mov	r0,a
      00019B 86 82            [24]  407 	mov	dpl,@r0
      00019D 08               [12]  408 	inc	r0
      00019E 86 83            [24]  409 	mov	dph,@r0
      0001A0 08               [12]  410 	inc	r0
      0001A1 86 F0            [24]  411 	mov	b,@r0
      0001A3 12r00r00         [24]  412 	lcall	__gptrget
      0001A6 FC               [12]  413 	mov	r4,a
                                    414 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      0001A7 BC 30 00         [24]  415 	cjne	r4,#0x30,00231$
      0001AA                        416 00231$:
      0001AA 92*00            [24]  417 	mov	b1,c
      0001AC 50 03            [24]  418 	jnc	00232$
      0001AE 02r02rE3         [24]  419 	ljmp	00157$
      0001B1                        420 00232$:
      0001B1 EC               [12]  421 	mov	a,r4
      0001B2 24 C6            [12]  422 	add	a,#0xff - 0x39
      0001B4 92*00            [24]  423 	mov	b1,c
      0001B6 50 03            [24]  424 	jnc	00233$
      0001B8 02r02rE3         [24]  425 	ljmp	00157$
      0001BB                        426 00233$:
                                    427 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001BB E5*00            [12]  428 	mov	a,_bp
      0001BD 24 04            [12]  429 	add	a,#0x04
      0001BF F8               [12]  430 	mov	r0,a
      0001C0 86 82            [24]  431 	mov	dpl,@r0
      0001C2 08               [12]  432 	inc	r0
      0001C3 86 83            [24]  433 	mov	dph,@r0
      0001C5 08               [12]  434 	inc	r0
      0001C6 86 F0            [24]  435 	mov	b,@r0
      0001C8 12r00r00         [24]  436 	lcall	__gptrget
      0001CB FC               [12]  437 	mov	r4,a
      0001CC A3               [24]  438 	inc	dptr
      0001CD 18               [12]  439 	dec	r0
      0001CE 18               [12]  440 	dec	r0
      0001CF A6 82            [24]  441 	mov	@r0,dpl
      0001D1 08               [12]  442 	inc	r0
      0001D2 A6 83            [24]  443 	mov	@r0,dph
      0001D4 7B 00            [12]  444 	mov	r3,#0x00
      0001D6 EC               [12]  445 	mov	a,r4
      0001D7 24 D0            [12]  446 	add	a,#0xd0
      0001D9 F5 82            [12]  447 	mov	dpl,a
      0001DB EB               [12]  448 	mov	a,r3
      0001DC 34 FF            [12]  449 	addc	a,#0xff
      0001DE F5 83            [12]  450 	mov	dph,a
      0001E0 C0 07            [24]  451 	push	ar7
      0001E2 C0 06            [24]  452 	push	ar6
      0001E4 C0 05            [24]  453 	push	ar5
      0001E6 C0 02            [24]  454 	push	ar2
      0001E8 C0*00            [24]  455 	push	bits
      0001EA 12r00r00         [24]  456 	lcall	___sint2fs
      0001ED C8               [12]  457 	xch	a,r0
      0001EE E5*00            [12]  458 	mov	a,_bp
      0001F0 24 08            [12]  459 	add	a,#0x08
      0001F2 C8               [12]  460 	xch	a,r0
      0001F3 A6 82            [24]  461 	mov	@r0,dpl
      0001F5 08               [12]  462 	inc	r0
      0001F6 A6 83            [24]  463 	mov	@r0,dph
      0001F8 08               [12]  464 	inc	r0
      0001F9 A6 F0            [24]  465 	mov	@r0,b
      0001FB 08               [12]  466 	inc	r0
      0001FC F6               [12]  467 	mov	@r0,a
      0001FD D0*00            [24]  468 	pop	bits
      0001FF D0 02            [24]  469 	pop	ar2
      000201 D0 05            [24]  470 	pop	ar5
      000203 D0 06            [24]  471 	pop	ar6
      000205 D0 07            [24]  472 	pop	ar7
      000207 C0 07            [24]  473 	push	ar7
      000209 C0 06            [24]  474 	push	ar6
      00020B C0 05            [24]  475 	push	ar5
      00020D C0 02            [24]  476 	push	ar2
      00020F C0*00            [24]  477 	push	bits
      000211 C0 07            [24]  478 	push	ar7
      000213 C0 06            [24]  479 	push	ar6
      000215 C0 05            [24]  480 	push	ar5
      000217 C0 02            [24]  481 	push	ar2
      000219 E5*00            [12]  482 	mov	a,_bp
      00021B 24 08            [12]  483 	add	a,#0x08
      00021D F8               [12]  484 	mov	r0,a
      00021E 86 82            [24]  485 	mov	dpl,@r0
      000220 08               [12]  486 	inc	r0
      000221 86 83            [24]  487 	mov	dph,@r0
      000223 08               [12]  488 	inc	r0
      000224 86 F0            [24]  489 	mov	b,@r0
      000226 08               [12]  490 	inc	r0
      000227 E6               [12]  491 	mov	a,@r0
      000228 12r00r00         [24]  492 	lcall	___fsmul
      00022B C8               [12]  493 	xch	a,r0
      00022C E5*00            [12]  494 	mov	a,_bp
      00022E 24 08            [12]  495 	add	a,#0x08
      000230 C8               [12]  496 	xch	a,r0
      000231 A6 82            [24]  497 	mov	@r0,dpl
      000233 08               [12]  498 	inc	r0
      000234 A6 83            [24]  499 	mov	@r0,dph
      000236 08               [12]  500 	inc	r0
      000237 A6 F0            [24]  501 	mov	@r0,b
      000239 08               [12]  502 	inc	r0
      00023A F6               [12]  503 	mov	@r0,a
      00023B E5 81            [12]  504 	mov	a,sp
      00023D 24 FC            [12]  505 	add	a,#0xfc
      00023F F5 81            [12]  506 	mov	sp,a
      000241 D0*00            [24]  507 	pop	bits
      000243 C0*00            [24]  508 	push	bits
      000245 E5*00            [12]  509 	mov	a,_bp
      000247 24 08            [12]  510 	add	a,#0x08
      000249 F8               [12]  511 	mov	r0,a
      00024A E6               [12]  512 	mov	a,@r0
      00024B C0 E0            [24]  513 	push	acc
      00024D 08               [12]  514 	inc	r0
      00024E E6               [12]  515 	mov	a,@r0
      00024F C0 E0            [24]  516 	push	acc
      000251 08               [12]  517 	inc	r0
      000252 E6               [12]  518 	mov	a,@r0
      000253 C0 E0            [24]  519 	push	acc
      000255 08               [12]  520 	inc	r0
      000256 E6               [12]  521 	mov	a,@r0
      000257 C0 E0            [24]  522 	push	acc
      000259 E5*00            [12]  523 	mov	a,_bp
      00025B 24 0C            [12]  524 	add	a,#0x0c
      00025D F8               [12]  525 	mov	r0,a
      00025E 86 82            [24]  526 	mov	dpl,@r0
      000260 08               [12]  527 	inc	r0
      000261 86 83            [24]  528 	mov	dph,@r0
      000263 08               [12]  529 	inc	r0
      000264 86 F0            [24]  530 	mov	b,@r0
      000266 08               [12]  531 	inc	r0
      000267 E6               [12]  532 	mov	a,@r0
      000268 12r00r00         [24]  533 	lcall	___fsadd
      00026B C8               [12]  534 	xch	a,r0
      00026C E5*00            [12]  535 	mov	a,_bp
      00026E 24 08            [12]  536 	add	a,#0x08
      000270 C8               [12]  537 	xch	a,r0
      000271 A6 82            [24]  538 	mov	@r0,dpl
      000273 08               [12]  539 	inc	r0
      000274 A6 83            [24]  540 	mov	@r0,dph
      000276 08               [12]  541 	inc	r0
      000277 A6 F0            [24]  542 	mov	@r0,b
      000279 08               [12]  543 	inc	r0
      00027A F6               [12]  544 	mov	@r0,a
      00027B E5 81            [12]  545 	mov	a,sp
      00027D 24 FC            [12]  546 	add	a,#0xfc
      00027F F5 81            [12]  547 	mov	sp,a
      000281 D0*00            [24]  548 	pop	bits
      000283 D0 02            [24]  549 	pop	ar2
      000285 D0 05            [24]  550 	pop	ar5
      000287 D0 06            [24]  551 	pop	ar6
      000289 D0 07            [24]  552 	pop	ar7
      00028B E5*00            [12]  553 	mov	a,_bp
      00028D 24 08            [12]  554 	add	a,#0x08
      00028F F8               [12]  555 	mov	r0,a
      000290 E5*00            [12]  556 	mov	a,_bp
      000292 24 0C            [12]  557 	add	a,#0x0c
      000294 F9               [12]  558 	mov	r1,a
      000295 E6               [12]  559 	mov	a,@r0
      000296 F7               [12]  560 	mov	@r1,a
      000297 08               [12]  561 	inc	r0
      000298 E6               [12]  562 	mov	a,@r0
      000299 09               [12]  563 	inc	r1
      00029A F7               [12]  564 	mov	@r1,a
      00029B 08               [12]  565 	inc	r0
      00029C E6               [12]  566 	mov	a,@r0
      00029D 09               [12]  567 	inc	r1
      00029E F7               [12]  568 	mov	@r1,a
      00029F 08               [12]  569 	inc	r0
      0002A0 E6               [12]  570 	mov	a,@r0
      0002A1 09               [12]  571 	inc	r1
      0002A2 F7               [12]  572 	mov	@r1,a
                                    573 ;	_atof.c:67: fraction*=0.1;
      0002A3 C0*00            [24]  574 	push	bits
      0002A5 C0 07            [24]  575 	push	ar7
      0002A7 C0 06            [24]  576 	push	ar6
      0002A9 C0 05            [24]  577 	push	ar5
      0002AB C0 02            [24]  578 	push	ar2
      0002AD 90 CC CD         [24]  579 	mov	dptr,#0xcccd
      0002B0 75 F0 CC         [24]  580 	mov	b,#0xcc
      0002B3 74 3D            [12]  581 	mov	a,#0x3d
      0002B5 12r00r00         [24]  582 	lcall	___fsmul
      0002B8 C8               [12]  583 	xch	a,r0
      0002B9 E5*00            [12]  584 	mov	a,_bp
      0002BB 24 08            [12]  585 	add	a,#0x08
      0002BD C8               [12]  586 	xch	a,r0
      0002BE A6 82            [24]  587 	mov	@r0,dpl
      0002C0 08               [12]  588 	inc	r0
      0002C1 A6 83            [24]  589 	mov	@r0,dph
      0002C3 08               [12]  590 	inc	r0
      0002C4 A6 F0            [24]  591 	mov	@r0,b
      0002C6 08               [12]  592 	inc	r0
      0002C7 F6               [12]  593 	mov	@r0,a
      0002C8 E5 81            [12]  594 	mov	a,sp
      0002CA 24 FC            [12]  595 	add	a,#0xfc
      0002CC F5 81            [12]  596 	mov	sp,a
      0002CE D0*00            [24]  597 	pop	bits
      0002D0 E5*00            [12]  598 	mov	a,_bp
      0002D2 24 08            [12]  599 	add	a,#0x08
      0002D4 F8               [12]  600 	mov	r0,a
      0002D5 86 07            [24]  601 	mov	ar7,@r0
      0002D7 08               [12]  602 	inc	r0
      0002D8 86 06            [24]  603 	mov	ar6,@r0
      0002DA 08               [12]  604 	inc	r0
      0002DB 86 05            [24]  605 	mov	ar5,@r0
      0002DD 08               [12]  606 	inc	r0
      0002DE 86 02            [24]  607 	mov	ar2,@r0
                                    608 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002E0 02r01r96         [24]  609 	ljmp	00129$
      0002E3                        610 00157$:
      0002E3 E5*00            [12]  611 	mov	a,_bp
      0002E5 24 04            [12]  612 	add	a,#0x04
      0002E7 F8               [12]  613 	mov	r0,a
      0002E8 86 05            [24]  614 	mov	ar5,@r0
      0002EA 08               [12]  615 	inc	r0
      0002EB 86 06            [24]  616 	mov	ar6,@r0
      0002ED 08               [12]  617 	inc	r0
      0002EE 86 07            [24]  618 	mov	ar7,@r0
      0002F0                        619 00112$:
                                    620 ;	_atof.c:72: if (toupper(*s)=='E')
      0002F0 8D 82            [24]  621 	mov	dpl,r5
      0002F2 8E 83            [24]  622 	mov	dph,r6
      0002F4 8F F0            [24]  623 	mov	b,r7
      0002F6 12r00r00         [24]  624 	lcall	__gptrget
      0002F9 FC               [12]  625 	mov	r4,a
      0002FA 7B 00            [12]  626 	mov	r3,#0x00
      0002FC 8C 82            [24]  627 	mov	dpl,r4
      0002FE 8B 83            [24]  628 	mov	dph,r3
      000300 C0 07            [24]  629 	push	ar7
      000302 C0 06            [24]  630 	push	ar6
      000304 C0 05            [24]  631 	push	ar5
      000306 C0*00            [24]  632 	push	bits
      000308 12r00r00         [24]  633 	lcall	_toupper
      00030B AB 82            [24]  634 	mov	r3,dpl
      00030D AC 83            [24]  635 	mov	r4,dph
      00030F D0*00            [24]  636 	pop	bits
      000311 D0 05            [24]  637 	pop	ar5
      000313 D0 06            [24]  638 	pop	ar6
      000315 D0 07            [24]  639 	pop	ar7
      000317 BB 45 05         [24]  640 	cjne	r3,#0x45,00234$
      00031A BC 00 02         [24]  641 	cjne	r4,#0x00,00234$
      00031D 80 03            [24]  642 	sjmp	00235$
      00031F                        643 00234$:
      00031F 02r03rD1         [24]  644 	ljmp	00120$
      000322                        645 00235$:
                                    646 ;	_atof.c:74: s++;
      000322 0D               [12]  647 	inc	r5
      000323 BD 00 01         [24]  648 	cjne	r5,#0x00,00236$
      000326 0E               [12]  649 	inc	r6
      000327                        650 00236$:
                                    651 ;	_atof.c:75: iexp=(signed char)atoi(s);
      000327 8D 82            [24]  652 	mov	dpl,r5
      000329 8E 83            [24]  653 	mov	dph,r6
      00032B 8F F0            [24]  654 	mov	b,r7
      00032D C0*00            [24]  655 	push	bits
      00032F 12r00r00         [24]  656 	lcall	_atoi
      000332 AE 82            [24]  657 	mov	r6,dpl
      000334 AF 83            [24]  658 	mov	r7,dph
      000336 D0*00            [24]  659 	pop	bits
                                    660 ;	_atof.c:77: while(iexp!=0)
      000338                        661 00116$:
      000338 EE               [12]  662 	mov	a,r6
      000339 70 03            [24]  663 	jnz	00237$
      00033B 02r03rD1         [24]  664 	ljmp	00120$
      00033E                        665 00237$:
                                    666 ;	_atof.c:79: if(iexp<0)
      00033E EE               [12]  667 	mov	a,r6
      00033F 30 E7 47         [24]  668 	jnb	acc.7,00114$
                                    669 ;	_atof.c:81: value*=0.1;
      000342 C0 06            [24]  670 	push	ar6
      000344 C0*00            [24]  671 	push	bits
      000346 E5*00            [12]  672 	mov	a,_bp
      000348 24 0C            [12]  673 	add	a,#0x0c
      00034A F8               [12]  674 	mov	r0,a
      00034B E6               [12]  675 	mov	a,@r0
      00034C C0 E0            [24]  676 	push	acc
      00034E 08               [12]  677 	inc	r0
      00034F E6               [12]  678 	mov	a,@r0
      000350 C0 E0            [24]  679 	push	acc
      000352 08               [12]  680 	inc	r0
      000353 E6               [12]  681 	mov	a,@r0
      000354 C0 E0            [24]  682 	push	acc
      000356 08               [12]  683 	inc	r0
      000357 E6               [12]  684 	mov	a,@r0
      000358 C0 E0            [24]  685 	push	acc
      00035A 90 CC CD         [24]  686 	mov	dptr,#0xcccd
      00035D 75 F0 CC         [24]  687 	mov	b,#0xcc
      000360 74 3D            [12]  688 	mov	a,#0x3d
      000362 12r00r00         [24]  689 	lcall	___fsmul
      000365 AC 82            [24]  690 	mov	r4,dpl
      000367 AD 83            [24]  691 	mov	r5,dph
      000369 AB F0            [24]  692 	mov	r3,b
      00036B FF               [12]  693 	mov	r7,a
      00036C E5 81            [12]  694 	mov	a,sp
      00036E 24 FC            [12]  695 	add	a,#0xfc
      000370 F5 81            [12]  696 	mov	sp,a
      000372 D0*00            [24]  697 	pop	bits
      000374 D0 06            [24]  698 	pop	ar6
      000376 E5*00            [12]  699 	mov	a,_bp
      000378 24 0C            [12]  700 	add	a,#0x0c
      00037A F8               [12]  701 	mov	r0,a
      00037B A6 04            [24]  702 	mov	@r0,ar4
      00037D 08               [12]  703 	inc	r0
      00037E A6 05            [24]  704 	mov	@r0,ar5
      000380 08               [12]  705 	inc	r0
      000381 A6 03            [24]  706 	mov	@r0,ar3
      000383 08               [12]  707 	inc	r0
      000384 A6 07            [24]  708 	mov	@r0,ar7
                                    709 ;	_atof.c:82: iexp++;
      000386 0E               [12]  710 	inc	r6
      000387 80 AF            [24]  711 	sjmp	00116$
      000389                        712 00114$:
                                    713 ;	_atof.c:86: value*=10.0;
      000389 C0 06            [24]  714 	push	ar6
      00038B C0*00            [24]  715 	push	bits
      00038D E5*00            [12]  716 	mov	a,_bp
      00038F 24 0C            [12]  717 	add	a,#0x0c
      000391 F8               [12]  718 	mov	r0,a
      000392 E6               [12]  719 	mov	a,@r0
      000393 C0 E0            [24]  720 	push	acc
      000395 08               [12]  721 	inc	r0
      000396 E6               [12]  722 	mov	a,@r0
      000397 C0 E0            [24]  723 	push	acc
      000399 08               [12]  724 	inc	r0
      00039A E6               [12]  725 	mov	a,@r0
      00039B C0 E0            [24]  726 	push	acc
      00039D 08               [12]  727 	inc	r0
      00039E E6               [12]  728 	mov	a,@r0
      00039F C0 E0            [24]  729 	push	acc
      0003A1 90 00 00         [24]  730 	mov	dptr,#0x0000
      0003A4 75 F0 20         [24]  731 	mov	b,#0x20
      0003A7 74 41            [12]  732 	mov	a,#0x41
      0003A9 12r00r00         [24]  733 	lcall	___fsmul
      0003AC AC 82            [24]  734 	mov	r4,dpl
      0003AE AD 83            [24]  735 	mov	r5,dph
      0003B0 AB F0            [24]  736 	mov	r3,b
      0003B2 FF               [12]  737 	mov	r7,a
      0003B3 E5 81            [12]  738 	mov	a,sp
      0003B5 24 FC            [12]  739 	add	a,#0xfc
      0003B7 F5 81            [12]  740 	mov	sp,a
      0003B9 D0*00            [24]  741 	pop	bits
      0003BB D0 06            [24]  742 	pop	ar6
      0003BD E5*00            [12]  743 	mov	a,_bp
      0003BF 24 0C            [12]  744 	add	a,#0x0c
      0003C1 F8               [12]  745 	mov	r0,a
      0003C2 A6 04            [24]  746 	mov	@r0,ar4
      0003C4 08               [12]  747 	inc	r0
      0003C5 A6 05            [24]  748 	mov	@r0,ar5
      0003C7 08               [12]  749 	inc	r0
      0003C8 A6 03            [24]  750 	mov	@r0,ar3
      0003CA 08               [12]  751 	inc	r0
      0003CB A6 07            [24]  752 	mov	@r0,ar7
                                    753 ;	_atof.c:87: iexp--;
      0003CD 1E               [12]  754 	dec	r6
      0003CE 02r03r38         [24]  755 	ljmp	00116$
      0003D1                        756 00120$:
                                    757 ;	_atof.c:93: if(sign) value*=-1.0;
      0003D1 30*00 0F         [24]  758 	jnb	b0,00122$
      0003D4 E5*00            [12]  759 	mov	a,_bp
      0003D6 24 0C            [12]  760 	add	a,#0x0c
      0003D8 F8               [12]  761 	mov	r0,a
      0003D9 E6               [12]  762 	mov  a,@r0
      0003DA 08               [12]  763 	inc	r0
      0003DB E6               [12]  764 	mov  a,@r0
      0003DC 08               [12]  765 	inc	r0
      0003DD E6               [12]  766 	mov  a,@r0
      0003DE 08               [12]  767 	inc	r0
      0003DF E6               [12]  768 	mov	a,@r0
      0003E0 B2 E7            [12]  769 	cpl	acc.7
      0003E2 F6               [12]  770 	mov	@r0,a
      0003E3                        771 00122$:
                                    772 ;	_atof.c:94: return (value);
      0003E3 E5*00            [12]  773 	mov	a,_bp
      0003E5 24 0C            [12]  774 	add	a,#0x0c
      0003E7 F8               [12]  775 	mov	r0,a
      0003E8 86 82            [24]  776 	mov	dpl,@r0
      0003EA 08               [12]  777 	inc	r0
      0003EB 86 83            [24]  778 	mov	dph,@r0
      0003ED 08               [12]  779 	inc	r0
      0003EE 86 F0            [24]  780 	mov	b,@r0
      0003F0 08               [12]  781 	inc	r0
      0003F1 E6               [12]  782 	mov	a,@r0
                                    783 ;	_atof.c:95: }
      0003F2 85*00 81         [24]  784 	mov	sp,_bp
      0003F5 D0*00            [24]  785 	pop	_bp
      0003F7 22               [24]  786 	ret
                                    787 	.area CSEG    (CODE)
                                    788 	.area CONST   (CODE)
                                    789 	.area XINIT   (CODE)
                                    790 	.area CABS    (ABS,CODE)
