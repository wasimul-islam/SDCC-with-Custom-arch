                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module wcscmp
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wcscmp
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'wcscmp'
                                     91 ;------------------------------------------------------------
                                     92 ;s2                        Allocated to stack - _bp -5
                                     93 ;s1                        Allocated to registers 
                                     94 ;sloc0                     Allocated to stack - _bp +1
                                     95 ;sloc1                     Allocated to stack - _bp +5
                                     96 ;------------------------------------------------------------
                                     97 ;	wcscmp.c:31: int wcscmp(const wchar_t *s1, const wchar_t *s2)
                                     98 ;	-----------------------------------------
                                     99 ;	 function wcscmp
                                    100 ;	-----------------------------------------
      000000                        101 _wcscmp:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 E5 81            [12]  111 	mov	a,sp
      000004 F5*00            [12]  112 	mov	_bp,a
      000006 24 07            [12]  113 	add	a,#0x07
      000008 F5 81            [12]  114 	mov	sp,a
      00000A AF 82            [24]  115 	mov	r7,dpl
      00000C AD 83            [24]  116 	mov	r5,dph
      00000E AE F0            [24]  117 	mov	r6,b
                                    118 ;	wcscmp.c:33: while(*s1 == *s2 && *s1)
      000010 E5*00            [12]  119 	mov	a,_bp
      000012 24 FB            [12]  120 	add	a,#0xfb
      000014 F8               [12]  121 	mov	r0,a
      000015 E5*00            [12]  122 	mov	a,_bp
      000017 24 05            [12]  123 	add	a,#0x05
      000019 F9               [12]  124 	mov	r1,a
      00001A E6               [12]  125 	mov	a,@r0
      00001B F7               [12]  126 	mov	@r1,a
      00001C 08               [12]  127 	inc	r0
      00001D E6               [12]  128 	mov	a,@r0
      00001E 09               [12]  129 	inc	r1
      00001F F7               [12]  130 	mov	@r1,a
      000020 08               [12]  131 	inc	r0
      000021 E6               [12]  132 	mov	a,@r0
      000022 09               [12]  133 	inc	r1
      000023 F7               [12]  134 	mov	@r1,a
      000024                        135 00102$:
      000024 8F 82            [24]  136 	mov	dpl,r7
      000026 8D 83            [24]  137 	mov	dph,r5
      000028 8E F0            [24]  138 	mov	b,r6
      00002A A8*00            [24]  139 	mov	r0,_bp
      00002C 08               [12]  140 	inc	r0
      00002D 12r00r00         [24]  141 	lcall	__gptrget
      000030 F6               [12]  142 	mov	@r0,a
      000031 A3               [24]  143 	inc	dptr
      000032 12r00r00         [24]  144 	lcall	__gptrget
      000035 08               [12]  145 	inc	r0
      000036 F6               [12]  146 	mov	@r0,a
      000037 A3               [24]  147 	inc	dptr
      000038 12r00r00         [24]  148 	lcall	__gptrget
      00003B 08               [12]  149 	inc	r0
      00003C F6               [12]  150 	mov	@r0,a
      00003D A3               [24]  151 	inc	dptr
      00003E 12r00r00         [24]  152 	lcall	__gptrget
      000041 08               [12]  153 	inc	r0
      000042 F6               [12]  154 	mov	@r0,a
      000043 C0 07            [24]  155 	push	ar7
      000045 C0 05            [24]  156 	push	ar5
      000047 C0 06            [24]  157 	push	ar6
      000049 E5*00            [12]  158 	mov	a,_bp
      00004B 24 05            [12]  159 	add	a,#0x05
      00004D F8               [12]  160 	mov	r0,a
      00004E 86 82            [24]  161 	mov	dpl,@r0
      000050 08               [12]  162 	inc	r0
      000051 86 83            [24]  163 	mov	dph,@r0
      000053 08               [12]  164 	inc	r0
      000054 86 F0            [24]  165 	mov	b,@r0
      000056 12r00r00         [24]  166 	lcall	__gptrget
      000059 FC               [12]  167 	mov	r4,a
      00005A A3               [24]  168 	inc	dptr
      00005B 12r00r00         [24]  169 	lcall	__gptrget
      00005E FD               [12]  170 	mov	r5,a
      00005F A3               [24]  171 	inc	dptr
      000060 12r00r00         [24]  172 	lcall	__gptrget
      000063 FE               [12]  173 	mov	r6,a
      000064 A3               [24]  174 	inc	dptr
      000065 12r00r00         [24]  175 	lcall	__gptrget
      000068 FF               [12]  176 	mov	r7,a
      000069 A8*00            [24]  177 	mov	r0,_bp
      00006B 08               [12]  178 	inc	r0
      00006C E6               [12]  179 	mov	a,@r0
      00006D B5 04 11         [24]  180 	cjne	a,ar4,00132$
      000070 08               [12]  181 	inc	r0
      000071 E6               [12]  182 	mov	a,@r0
      000072 B5 05 0C         [24]  183 	cjne	a,ar5,00132$
      000075 08               [12]  184 	inc	r0
      000076 E6               [12]  185 	mov	a,@r0
      000077 B5 06 07         [24]  186 	cjne	a,ar6,00132$
      00007A 08               [12]  187 	inc	r0
      00007B E6               [12]  188 	mov	a,@r0
      00007C B5 07 02         [24]  189 	cjne	a,ar7,00132$
      00007F 80 08            [24]  190 	sjmp	00133$
      000081                        191 00132$:
      000081 D0 06            [24]  192 	pop	ar6
      000083 D0 05            [24]  193 	pop	ar5
      000085 D0 07            [24]  194 	pop	ar7
      000087 80 29            [24]  195 	sjmp	00104$
      000089                        196 00133$:
      000089 D0 06            [24]  197 	pop	ar6
      00008B D0 05            [24]  198 	pop	ar5
      00008D D0 07            [24]  199 	pop	ar7
      00008F A8*00            [24]  200 	mov	r0,_bp
      000091 08               [12]  201 	inc	r0
      000092 E6               [12]  202 	mov	a,@r0
      000093 08               [12]  203 	inc	r0
      000094 46               [12]  204 	orl	a,@r0
      000095 08               [12]  205 	inc	r0
      000096 46               [12]  206 	orl	a,@r0
      000097 08               [12]  207 	inc	r0
      000098 46               [12]  208 	orl	a,@r0
      000099 60 17            [24]  209 	jz	00104$
                                    210 ;	wcscmp.c:34: s1++, s2++;
      00009B 74 04            [12]  211 	mov	a,#0x04
      00009D 2F               [12]  212 	add	a,r7
      00009E FF               [12]  213 	mov	r7,a
      00009F E4               [12]  214 	clr	a
      0000A0 3D               [12]  215 	addc	a,r5
      0000A1 FD               [12]  216 	mov	r5,a
      0000A2 E5*00            [12]  217 	mov	a,_bp
      0000A4 24 05            [12]  218 	add	a,#0x05
      0000A6 F8               [12]  219 	mov	r0,a
      0000A7 74 04            [12]  220 	mov	a,#0x04
      0000A9 26               [12]  221 	add	a,@r0
      0000AA F6               [12]  222 	mov	@r0,a
      0000AB E4               [12]  223 	clr	a
      0000AC 08               [12]  224 	inc	r0
      0000AD 36               [12]  225 	addc	a,@r0
      0000AE F6               [12]  226 	mov	@r0,a
      0000AF 02r00r24         [24]  227 	ljmp	00102$
      0000B2                        228 00104$:
                                    229 ;	wcscmp.c:36: if(*s1 < *s2)
      0000B2 8F 82            [24]  230 	mov	dpl,r7
      0000B4 8D 83            [24]  231 	mov	dph,r5
      0000B6 8E F0            [24]  232 	mov	b,r6
      0000B8 12r00r00         [24]  233 	lcall	__gptrget
      0000BB FC               [12]  234 	mov	r4,a
      0000BC A3               [24]  235 	inc	dptr
      0000BD 12r00r00         [24]  236 	lcall	__gptrget
      0000C0 FD               [12]  237 	mov	r5,a
      0000C1 A3               [24]  238 	inc	dptr
      0000C2 12r00r00         [24]  239 	lcall	__gptrget
      0000C5 FE               [12]  240 	mov	r6,a
      0000C6 A3               [24]  241 	inc	dptr
      0000C7 12r00r00         [24]  242 	lcall	__gptrget
      0000CA FF               [12]  243 	mov	r7,a
      0000CB E5*00            [12]  244 	mov	a,_bp
      0000CD 24 05            [12]  245 	add	a,#0x05
      0000CF F8               [12]  246 	mov	r0,a
      0000D0 86 82            [24]  247 	mov	dpl,@r0
      0000D2 08               [12]  248 	inc	r0
      0000D3 86 83            [24]  249 	mov	dph,@r0
      0000D5 08               [12]  250 	inc	r0
      0000D6 86 F0            [24]  251 	mov	b,@r0
      0000D8 A9*00            [24]  252 	mov	r1,_bp
      0000DA 09               [12]  253 	inc	r1
      0000DB 12r00r00         [24]  254 	lcall	__gptrget
      0000DE F7               [12]  255 	mov	@r1,a
      0000DF A3               [24]  256 	inc	dptr
      0000E0 12r00r00         [24]  257 	lcall	__gptrget
      0000E3 09               [12]  258 	inc	r1
      0000E4 F7               [12]  259 	mov	@r1,a
      0000E5 A3               [24]  260 	inc	dptr
      0000E6 12r00r00         [24]  261 	lcall	__gptrget
      0000E9 09               [12]  262 	inc	r1
      0000EA F7               [12]  263 	mov	@r1,a
      0000EB A3               [24]  264 	inc	dptr
      0000EC 12r00r00         [24]  265 	lcall	__gptrget
      0000EF 09               [12]  266 	inc	r1
      0000F0 F7               [12]  267 	mov	@r1,a
      0000F1 A8*00            [24]  268 	mov	r0,_bp
      0000F3 08               [12]  269 	inc	r0
      0000F4 C3               [12]  270 	clr	c
      0000F5 EC               [12]  271 	mov	a,r4
      0000F6 96               [12]  272 	subb	a,@r0
      0000F7 ED               [12]  273 	mov	a,r5
      0000F8 08               [12]  274 	inc	r0
      0000F9 96               [12]  275 	subb	a,@r0
      0000FA EE               [12]  276 	mov	a,r6
      0000FB 08               [12]  277 	inc	r0
      0000FC 96               [12]  278 	subb	a,@r0
      0000FD EF               [12]  279 	mov	a,r7
      0000FE 08               [12]  280 	inc	r0
      0000FF 96               [12]  281 	subb	a,@r0
      000100 50 05            [24]  282 	jnc	00106$
                                    283 ;	wcscmp.c:37: return(-1);
      000102 90 FF FF         [24]  284 	mov	dptr,#0xffff
      000105 80 19            [24]  285 	sjmp	00109$
      000107                        286 00106$:
                                    287 ;	wcscmp.c:38: if(*s1 > *s2)
      000107 A8*00            [24]  288 	mov	r0,_bp
      000109 08               [12]  289 	inc	r0
      00010A C3               [12]  290 	clr	c
      00010B E6               [12]  291 	mov	a,@r0
      00010C 9C               [12]  292 	subb	a,r4
      00010D 08               [12]  293 	inc	r0
      00010E E6               [12]  294 	mov	a,@r0
      00010F 9D               [12]  295 	subb	a,r5
      000110 08               [12]  296 	inc	r0
      000111 E6               [12]  297 	mov	a,@r0
      000112 9E               [12]  298 	subb	a,r6
      000113 08               [12]  299 	inc	r0
      000114 E6               [12]  300 	mov	a,@r0
      000115 9F               [12]  301 	subb	a,r7
      000116 50 05            [24]  302 	jnc	00108$
                                    303 ;	wcscmp.c:39: return(1);
      000118 90 00 01         [24]  304 	mov	dptr,#0x0001
      00011B 80 03            [24]  305 	sjmp	00109$
      00011D                        306 00108$:
                                    307 ;	wcscmp.c:40: return(0);
      00011D 90 00 00         [24]  308 	mov	dptr,#0x0000
      000120                        309 00109$:
                                    310 ;	wcscmp.c:41: }
      000120 85*00 81         [24]  311 	mov	sp,_bp
      000123 D0*00            [24]  312 	pop	_bp
      000125 22               [24]  313 	ret
                                    314 	.area CSEG    (CODE)
                                    315 	.area CONST   (CODE)
                                    316 	.area XINIT   (CODE)
                                    317 	.area CABS    (ABS,CODE)
