                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __ltoa
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___ultoa
                                     12 	.globl ___ltoa
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '__ultoa'
                                     92 ;------------------------------------------------------------
                                     93 ;string                    Allocated to stack - _bp -5
                                     94 ;radix                     Allocated to stack - _bp -6
                                     95 ;value                     Allocated to stack - _bp +1
                                     96 ;buffer                    Allocated to stack - _bp +9
                                     97 ;index                     Allocated to registers r4 
                                     98 ;c                         Allocated to registers r6 
                                     99 ;sloc0                     Allocated to stack - _bp +5
                                    100 ;------------------------------------------------------------
                                    101 ;	__ltoa.c:58: void __ultoa(unsigned long value, char* string, unsigned char radix)
                                    102 ;	-----------------------------------------
                                    103 ;	 function __ultoa
                                    104 ;	-----------------------------------------
      000000                        105 ___ultoa:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D E5 81            [12]  120 	mov	a,sp
      00000F 24 24            [12]  121 	add	a,#0x24
      000011 F5 81            [12]  122 	mov	sp,a
                                    123 ;	__ltoa.c:63: do {
      000013 E5*00            [12]  124 	mov	a,_bp
      000015 24 09            [12]  125 	add	a,#0x09
      000017 FB               [12]  126 	mov	r3,a
      000018 7C 20            [12]  127 	mov	r4,#0x20
      00001A                        128 00103$:
                                    129 ;	__ltoa.c:64: unsigned char c = '0' + (value % radix);
      00001A C0 03            [24]  130 	push	ar3
      00001C E5*00            [12]  131 	mov	a,_bp
      00001E 24 FA            [12]  132 	add	a,#0xfa
      000020 F8               [12]  133 	mov	r0,a
      000021 E5*00            [12]  134 	mov	a,_bp
      000023 24 05            [12]  135 	add	a,#0x05
      000025 F9               [12]  136 	mov	r1,a
      000026 E6               [12]  137 	mov	a,@r0
      000027 F7               [12]  138 	mov	@r1,a
      000028 09               [12]  139 	inc	r1
      000029 77 00            [12]  140 	mov	@r1,#0x00
      00002B 09               [12]  141 	inc	r1
      00002C 77 00            [12]  142 	mov	@r1,#0x00
      00002E 09               [12]  143 	inc	r1
      00002F 77 00            [12]  144 	mov	@r1,#0x00
      000031 C0 04            [24]  145 	push	ar4
      000033 E5*00            [12]  146 	mov	a,_bp
      000035 24 05            [12]  147 	add	a,#0x05
      000037 F8               [12]  148 	mov	r0,a
      000038 E6               [12]  149 	mov	a,@r0
      000039 C0 E0            [24]  150 	push	acc
      00003B 08               [12]  151 	inc	r0
      00003C E6               [12]  152 	mov	a,@r0
      00003D C0 E0            [24]  153 	push	acc
      00003F 08               [12]  154 	inc	r0
      000040 E6               [12]  155 	mov	a,@r0
      000041 C0 E0            [24]  156 	push	acc
      000043 08               [12]  157 	inc	r0
      000044 E6               [12]  158 	mov	a,@r0
      000045 C0 E0            [24]  159 	push	acc
      000047 A8*00            [24]  160 	mov	r0,_bp
      000049 08               [12]  161 	inc	r0
      00004A 86 82            [24]  162 	mov	dpl,@r0
      00004C 08               [12]  163 	inc	r0
      00004D 86 83            [24]  164 	mov	dph,@r0
      00004F 08               [12]  165 	inc	r0
      000050 86 F0            [24]  166 	mov	b,@r0
      000052 08               [12]  167 	inc	r0
      000053 E6               [12]  168 	mov	a,@r0
      000054 12r00r00         [24]  169 	lcall	__modulong
      000057 AA 82            [24]  170 	mov	r2,dpl
      000059 E5 81            [12]  171 	mov	a,sp
      00005B 24 FC            [12]  172 	add	a,#0xfc
      00005D F5 81            [12]  173 	mov	sp,a
      00005F D0 04            [24]  174 	pop	ar4
      000061 74 30            [12]  175 	mov	a,#0x30
      000063 2A               [12]  176 	add	a,r2
      000064 FE               [12]  177 	mov	r6,a
                                    178 ;	__ltoa.c:65: if (c > (unsigned char)'9')
      000065 C3               [12]  179 	clr	c
      000066 74 39            [12]  180 	mov	a,#0x39
      000068 9E               [12]  181 	subb	a,r6
      000069 D0 03            [24]  182 	pop	ar3
      00006B 50 06            [24]  183 	jnc	00102$
                                    184 ;	__ltoa.c:66: c += 'A' - '9' - 1;
      00006D 8E 07            [24]  185 	mov	ar7,r6
      00006F 74 07            [12]  186 	mov	a,#0x07
      000071 2F               [12]  187 	add	a,r7
      000072 FE               [12]  188 	mov	r6,a
      000073                        189 00102$:
                                    190 ;	__ltoa.c:67: buffer[--index] = c;
      000073 1C               [12]  191 	dec	r4
      000074 EC               [12]  192 	mov	a,r4
      000075 2B               [12]  193 	add	a,r3
      000076 F8               [12]  194 	mov	r0,a
      000077 A6 06            [24]  195 	mov	@r0,ar6
                                    196 ;	__ltoa.c:68: value /= radix;
      000079 C0 04            [24]  197 	push	ar4
      00007B C0 03            [24]  198 	push	ar3
      00007D E5*00            [12]  199 	mov	a,_bp
      00007F 24 05            [12]  200 	add	a,#0x05
      000081 F8               [12]  201 	mov	r0,a
      000082 E6               [12]  202 	mov	a,@r0
      000083 C0 E0            [24]  203 	push	acc
      000085 08               [12]  204 	inc	r0
      000086 E6               [12]  205 	mov	a,@r0
      000087 C0 E0            [24]  206 	push	acc
      000089 08               [12]  207 	inc	r0
      00008A E6               [12]  208 	mov	a,@r0
      00008B C0 E0            [24]  209 	push	acc
      00008D 08               [12]  210 	inc	r0
      00008E E6               [12]  211 	mov	a,@r0
      00008F C0 E0            [24]  212 	push	acc
      000091 A8*00            [24]  213 	mov	r0,_bp
      000093 08               [12]  214 	inc	r0
      000094 86 82            [24]  215 	mov	dpl,@r0
      000096 08               [12]  216 	inc	r0
      000097 86 83            [24]  217 	mov	dph,@r0
      000099 08               [12]  218 	inc	r0
      00009A 86 F0            [24]  219 	mov	b,@r0
      00009C 08               [12]  220 	inc	r0
      00009D E6               [12]  221 	mov	a,@r0
      00009E 12r00r00         [24]  222 	lcall	__divulong
      0000A1 A8*00            [24]  223 	mov	r0,_bp
      0000A3 08               [12]  224 	inc	r0
      0000A4 A6 82            [24]  225 	mov	@r0,dpl
      0000A6 08               [12]  226 	inc	r0
      0000A7 A6 83            [24]  227 	mov	@r0,dph
      0000A9 08               [12]  228 	inc	r0
      0000AA A6 F0            [24]  229 	mov	@r0,b
      0000AC 08               [12]  230 	inc	r0
      0000AD F6               [12]  231 	mov	@r0,a
      0000AE E5 81            [12]  232 	mov	a,sp
      0000B0 24 FC            [12]  233 	add	a,#0xfc
      0000B2 F5 81            [12]  234 	mov	sp,a
      0000B4 D0 03            [24]  235 	pop	ar3
      0000B6 D0 04            [24]  236 	pop	ar4
                                    237 ;	__ltoa.c:69: } while (value);
      0000B8 A8*00            [24]  238 	mov	r0,_bp
      0000BA 08               [12]  239 	inc	r0
      0000BB E6               [12]  240 	mov	a,@r0
      0000BC 08               [12]  241 	inc	r0
      0000BD 46               [12]  242 	orl	a,@r0
      0000BE 08               [12]  243 	inc	r0
      0000BF 46               [12]  244 	orl	a,@r0
      0000C0 08               [12]  245 	inc	r0
      0000C1 46               [12]  246 	orl	a,@r0
      0000C2 60 03            [24]  247 	jz	00133$
      0000C4 02r00r1A         [24]  248 	ljmp	00103$
      0000C7                        249 00133$:
                                    250 ;	__ltoa.c:71: do {
      0000C7 E5*00            [12]  251 	mov	a,_bp
      0000C9 24 FB            [12]  252 	add	a,#0xfb
      0000CB F8               [12]  253 	mov	r0,a
      0000CC 86 05            [24]  254 	mov	ar5,@r0
      0000CE 08               [12]  255 	inc	r0
      0000CF 86 06            [24]  256 	mov	ar6,@r0
      0000D1 08               [12]  257 	inc	r0
      0000D2 86 07            [24]  258 	mov	ar7,@r0
      0000D4                        259 00106$:
                                    260 ;	__ltoa.c:72: *string++ = buffer[index];
      0000D4 EC               [12]  261 	mov	a,r4
      0000D5 2B               [12]  262 	add	a,r3
      0000D6 F9               [12]  263 	mov	r1,a
      0000D7 87 02            [24]  264 	mov	ar2,@r1
      0000D9 8D 82            [24]  265 	mov	dpl,r5
      0000DB 8E 83            [24]  266 	mov	dph,r6
      0000DD 8F F0            [24]  267 	mov	b,r7
      0000DF EA               [12]  268 	mov	a,r2
      0000E0 12r00r00         [24]  269 	lcall	__gptrput
      0000E3 A3               [24]  270 	inc	dptr
      0000E4 AD 82            [24]  271 	mov	r5,dpl
      0000E6 AE 83            [24]  272 	mov	r6,dph
                                    273 ;	__ltoa.c:73: } while ( ++index != NUMBER_OF_DIGITS );
      0000E8 0C               [12]  274 	inc	r4
      0000E9 BC 20 E8         [24]  275 	cjne	r4,#0x20,00106$
                                    276 ;	__ltoa.c:75: *string = 0;  /* string terminator */
      0000EC 8D 82            [24]  277 	mov	dpl,r5
      0000EE 8E 83            [24]  278 	mov	dph,r6
      0000F0 8F F0            [24]  279 	mov	b,r7
      0000F2 E4               [12]  280 	clr	a
      0000F3 12r00r00         [24]  281 	lcall	__gptrput
                                    282 ;	__ltoa.c:76: }
      0000F6 85*00 81         [24]  283 	mov	sp,_bp
      0000F9 D0*00            [24]  284 	pop	_bp
      0000FB 22               [24]  285 	ret
                                    286 ;------------------------------------------------------------
                                    287 ;Allocation info for local variables in function '__ltoa'
                                    288 ;------------------------------------------------------------
                                    289 ;string                    Allocated to stack - _bp -5
                                    290 ;radix                     Allocated to stack - _bp -6
                                    291 ;value                     Allocated to stack - _bp +1
                                    292 ;------------------------------------------------------------
                                    293 ;	__ltoa.c:78: void __ltoa(long value, char* string, unsigned char radix)
                                    294 ;	-----------------------------------------
                                    295 ;	 function __ltoa
                                    296 ;	-----------------------------------------
      0000FC                        297 ___ltoa:
      0000FC C0*00            [24]  298 	push	_bp
      0000FE 85 81*00         [24]  299 	mov	_bp,sp
      000101 C0 82            [24]  300 	push	dpl
      000103 C0 83            [24]  301 	push	dph
      000105 C0 F0            [24]  302 	push	b
      000107 C0 E0            [24]  303 	push	acc
                                    304 ;	__ltoa.c:80: if (value < 0 && radix == 10) {
      000109 A8*00            [24]  305 	mov	r0,_bp
      00010B 08               [12]  306 	inc	r0
      00010C 08               [12]  307 	inc	r0
      00010D 08               [12]  308 	inc	r0
      00010E 08               [12]  309 	inc	r0
      00010F E6               [12]  310 	mov	a,@r0
      000110 30 E7 43         [24]  311 	jnb	acc.7,00102$
      000113 E5*00            [12]  312 	mov	a,_bp
      000115 24 FA            [12]  313 	add	a,#0xfa
      000117 F8               [12]  314 	mov	r0,a
      000118 B6 0A 3B         [24]  315 	cjne	@r0,#0x0a,00102$
                                    316 ;	__ltoa.c:81: *string++ = '-';
      00011B E5*00            [12]  317 	mov	a,_bp
      00011D 24 FB            [12]  318 	add	a,#0xfb
      00011F F8               [12]  319 	mov	r0,a
      000120 86 02            [24]  320 	mov	ar2,@r0
      000122 08               [12]  321 	inc	r0
      000123 86 03            [24]  322 	mov	ar3,@r0
      000125 08               [12]  323 	inc	r0
      000126 86 07            [24]  324 	mov	ar7,@r0
      000128 8A 82            [24]  325 	mov	dpl,r2
      00012A 8B 83            [24]  326 	mov	dph,r3
      00012C 8F F0            [24]  327 	mov	b,r7
      00012E 74 2D            [12]  328 	mov	a,#0x2d
      000130 12r00r00         [24]  329 	lcall	__gptrput
      000133 E5*00            [12]  330 	mov	a,_bp
      000135 24 FB            [12]  331 	add	a,#0xfb
      000137 F8               [12]  332 	mov	r0,a
      000138 74 01            [12]  333 	mov	a,#0x01
      00013A 2A               [12]  334 	add	a,r2
      00013B F6               [12]  335 	mov	@r0,a
      00013C E4               [12]  336 	clr	a
      00013D 3B               [12]  337 	addc	a,r3
      00013E 08               [12]  338 	inc	r0
      00013F F6               [12]  339 	mov	@r0,a
      000140 08               [12]  340 	inc	r0
      000141 A6 07            [24]  341 	mov	@r0,ar7
                                    342 ;	__ltoa.c:82: value = -value;
      000143 A8*00            [24]  343 	mov	r0,_bp
      000145 08               [12]  344 	inc	r0
      000146 C3               [12]  345 	clr	c
      000147 E4               [12]  346 	clr	a
      000148 96               [12]  347 	subb	a,@r0
      000149 F6               [12]  348 	mov	@r0,a
      00014A 08               [12]  349 	inc	r0
      00014B E4               [12]  350 	clr	a
      00014C 96               [12]  351 	subb	a,@r0
      00014D F6               [12]  352 	mov	@r0,a
      00014E 08               [12]  353 	inc	r0
      00014F E4               [12]  354 	clr	a
      000150 96               [12]  355 	subb	a,@r0
      000151 F6               [12]  356 	mov	@r0,a
      000152 08               [12]  357 	inc	r0
      000153 E4               [12]  358 	clr	a
      000154 96               [12]  359 	subb	a,@r0
      000155 F6               [12]  360 	mov	@r0,a
      000156                        361 00102$:
                                    362 ;	__ltoa.c:84: __ultoa(value, string, radix);
      000156 E5*00            [12]  363 	mov	a,_bp
      000158 24 FA            [12]  364 	add	a,#0xfa
      00015A F8               [12]  365 	mov	r0,a
      00015B E6               [12]  366 	mov	a,@r0
      00015C C0 E0            [24]  367 	push	acc
      00015E E5*00            [12]  368 	mov	a,_bp
      000160 24 FB            [12]  369 	add	a,#0xfb
      000162 F8               [12]  370 	mov	r0,a
      000163 E6               [12]  371 	mov	a,@r0
      000164 C0 E0            [24]  372 	push	acc
      000166 08               [12]  373 	inc	r0
      000167 E6               [12]  374 	mov	a,@r0
      000168 C0 E0            [24]  375 	push	acc
      00016A 08               [12]  376 	inc	r0
      00016B E6               [12]  377 	mov	a,@r0
      00016C C0 E0            [24]  378 	push	acc
      00016E A8*00            [24]  379 	mov	r0,_bp
      000170 08               [12]  380 	inc	r0
      000171 86 82            [24]  381 	mov	dpl,@r0
      000173 08               [12]  382 	inc	r0
      000174 86 83            [24]  383 	mov	dph,@r0
      000176 08               [12]  384 	inc	r0
      000177 86 F0            [24]  385 	mov	b,@r0
      000179 08               [12]  386 	inc	r0
      00017A E6               [12]  387 	mov	a,@r0
      00017B 12r00r00         [24]  388 	lcall	___ultoa
      00017E E5 81            [12]  389 	mov	a,sp
      000180 24 FC            [12]  390 	add	a,#0xfc
      000182 F5 81            [12]  391 	mov	sp,a
                                    392 ;	__ltoa.c:85: }
      000184 85*00 81         [24]  393 	mov	sp,_bp
      000187 D0*00            [24]  394 	pop	_bp
      000189 22               [24]  395 	ret
                                    396 	.area CSEG    (CODE)
                                    397 	.area CONST   (CODE)
                                    398 	.area XINIT   (CODE)
                                    399 	.area CABS    (ABS,CODE)
