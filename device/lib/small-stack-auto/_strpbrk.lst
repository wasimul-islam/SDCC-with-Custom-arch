                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strpbrk
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strchr
                                     12 	.globl _strpbrk
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'strpbrk'
                                     92 ;------------------------------------------------------------
                                     93 ;control                   Allocated to stack - _bp -5
                                     94 ;string                    Allocated to stack - _bp +1
                                     95 ;ret                       Allocated to stack - _bp +4
                                     96 ;ch                        Allocated to registers 
                                     97 ;p                         Allocated to registers r2 r3 r4 
                                     98 ;------------------------------------------------------------
                                     99 ;	_strpbrk.c:31: char * strpbrk ( const char * string, const char * control )
                                    100 ;	-----------------------------------------
                                    101 ;	 function strpbrk
                                    102 ;	-----------------------------------------
      000000                        103 _strpbrk:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 85 81*00         [24]  113 	mov	_bp,sp
      000005 C0 82            [24]  114 	push	dpl
      000007 C0 83            [24]  115 	push	dph
      000009 C0 F0            [24]  116 	push	b
      00000B 05 81            [12]  117 	inc	sp
      00000D 05 81            [12]  118 	inc	sp
      00000F 05 81            [12]  119 	inc	sp
                                    120 ;	_strpbrk.c:33: char *ret = NULL;
      000011 E5*00            [12]  121 	mov	a,_bp
      000013 24 04            [12]  122 	add	a,#0x04
      000015 F8               [12]  123 	mov	r0,a
      000016 E4               [12]  124 	clr	a
      000017 F6               [12]  125 	mov	@r0,a
      000018 08               [12]  126 	inc	r0
      000019 F6               [12]  127 	mov	@r0,a
      00001A 08               [12]  128 	inc	r0
      00001B 76 00            [12]  129 	mov	@r0,#0x00
                                    130 ;	_strpbrk.c:36: while (ch = *control) {
      00001D E5*00            [12]  131 	mov	a,_bp
      00001F 24 FB            [12]  132 	add	a,#0xfb
      000021 F8               [12]  133 	mov	r0,a
      000022 86 05            [24]  134 	mov	ar5,@r0
      000024 08               [12]  135 	inc	r0
      000025 86 06            [24]  136 	mov	ar6,@r0
      000027 08               [12]  137 	inc	r0
      000028 86 07            [24]  138 	mov	ar7,@r0
      00002A                        139 00105$:
      00002A 8D 82            [24]  140 	mov	dpl,r5
      00002C 8E 83            [24]  141 	mov	dph,r6
      00002E 8F F0            [24]  142 	mov	b,r7
      000030 12r00r00         [24]  143 	lcall	__gptrget
      000033 FC               [12]  144 	mov	r4,a
      000034 60 67            [24]  145 	jz	00107$
                                    146 ;	_strpbrk.c:37: char * p = strchr(string, ch);
      000036 C0 07            [24]  147 	push	ar7
      000038 C0 06            [24]  148 	push	ar6
      00003A C0 05            [24]  149 	push	ar5
      00003C C0 04            [24]  150 	push	ar4
      00003E A8*00            [24]  151 	mov	r0,_bp
      000040 08               [12]  152 	inc	r0
      000041 86 82            [24]  153 	mov	dpl,@r0
      000043 08               [12]  154 	inc	r0
      000044 86 83            [24]  155 	mov	dph,@r0
      000046 08               [12]  156 	inc	r0
      000047 86 F0            [24]  157 	mov	b,@r0
      000049 12r00r00         [24]  158 	lcall	_strchr
      00004C AA 82            [24]  159 	mov	r2,dpl
      00004E AB 83            [24]  160 	mov	r3,dph
      000050 AC F0            [24]  161 	mov	r4,b
      000052 15 81            [12]  162 	dec	sp
      000054 D0 05            [24]  163 	pop	ar5
      000056 D0 06            [24]  164 	pop	ar6
      000058 D0 07            [24]  165 	pop	ar7
                                    166 ;	_strpbrk.c:38: if (p != NULL && (ret == NULL || p < ret)) {
      00005A EA               [12]  167 	mov	a,r2
      00005B 4B               [12]  168 	orl	a,r3
      00005C 60 38            [24]  169 	jz	00102$
      00005E E5*00            [12]  170 	mov	a,_bp
      000060 24 04            [12]  171 	add	a,#0x04
      000062 F8               [12]  172 	mov	r0,a
      000063 E6               [12]  173 	mov	a,@r0
      000064 08               [12]  174 	inc	r0
      000065 46               [12]  175 	orl	a,@r0
      000066 60 21            [24]  176 	jz	00101$
      000068 E5*00            [12]  177 	mov	a,_bp
      00006A 24 04            [12]  178 	add	a,#0x04
      00006C F8               [12]  179 	mov	r0,a
      00006D E6               [12]  180 	mov	a,@r0
      00006E C0 E0            [24]  181 	push	acc
      000070 08               [12]  182 	inc	r0
      000071 E6               [12]  183 	mov	a,@r0
      000072 C0 E0            [24]  184 	push	acc
      000074 08               [12]  185 	inc	r0
      000075 E6               [12]  186 	mov	a,@r0
      000076 C0 E0            [24]  187 	push	acc
      000078 8A 82            [24]  188 	mov	dpl,r2
      00007A 8B 83            [24]  189 	mov	dph,r3
      00007C 8C F0            [24]  190 	mov	b,r4
      00007E 12r00r00         [24]  191 	lcall	___gptr_cmp
      000081 15 81            [12]  192 	dec	sp
      000083 15 81            [12]  193 	dec	sp
      000085 15 81            [12]  194 	dec	sp
      000087 50 0D            [24]  195 	jnc	00102$
      000089                        196 00101$:
                                    197 ;	_strpbrk.c:39: ret = p;
      000089 E5*00            [12]  198 	mov	a,_bp
      00008B 24 04            [12]  199 	add	a,#0x04
      00008D F8               [12]  200 	mov	r0,a
      00008E A6 02            [24]  201 	mov	@r0,ar2
      000090 08               [12]  202 	inc	r0
      000091 A6 03            [24]  203 	mov	@r0,ar3
      000093 08               [12]  204 	inc	r0
      000094 A6 04            [24]  205 	mov	@r0,ar4
      000096                        206 00102$:
                                    207 ;	_strpbrk.c:41: control++;
      000096 0D               [12]  208 	inc	r5
      000097 BD 00 90         [24]  209 	cjne	r5,#0x00,00105$
      00009A 0E               [12]  210 	inc	r6
      00009B 80 8D            [24]  211 	sjmp	00105$
      00009D                        212 00107$:
                                    213 ;	_strpbrk.c:44: return (ret);
      00009D E5*00            [12]  214 	mov	a,_bp
      00009F 24 04            [12]  215 	add	a,#0x04
      0000A1 F8               [12]  216 	mov	r0,a
      0000A2 86 82            [24]  217 	mov	dpl,@r0
      0000A4 08               [12]  218 	inc	r0
      0000A5 86 83            [24]  219 	mov	dph,@r0
      0000A7 08               [12]  220 	inc	r0
      0000A8 86 F0            [24]  221 	mov	b,@r0
                                    222 ;	_strpbrk.c:45: }
      0000AA 85*00 81         [24]  223 	mov	sp,_bp
      0000AD D0*00            [24]  224 	pop	_bp
      0000AF 22               [24]  225 	ret
                                    226 	.area CSEG    (CODE)
                                    227 	.area CONST   (CODE)
                                    228 	.area XINIT   (CODE)
                                    229 	.area CABS    (ABS,CODE)
