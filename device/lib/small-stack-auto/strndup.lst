                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strndup
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _malloc
                                     12 	.globl ___memcpy
                                     13 	.globl _strlen
                                     14 	.globl _strndup
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; uninitialized external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; initialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'strndup'
                                     94 ;------------------------------------------------------------
                                     95 ;n                         Allocated to stack - _bp -4
                                     96 ;s                         Allocated to registers r5 r6 r7 
                                     97 ;l                         Allocated to stack - _bp +1
                                     98 ;r                         Allocated to stack - _bp +3
                                     99 ;------------------------------------------------------------
                                    100 ;	strndup.c:33: char *strndup (const char *s, size_t n)
                                    101 ;	-----------------------------------------
                                    102 ;	 function strndup
                                    103 ;	-----------------------------------------
      000000                        104 _strndup:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 C0*00            [24]  113 	push	_bp
      000002 E5 81            [12]  114 	mov	a,sp
      000004 F5*00            [12]  115 	mov	_bp,a
      000006 24 05            [12]  116 	add	a,#0x05
      000008 F5 81            [12]  117 	mov	sp,a
                                    118 ;	strndup.c:35: size_t l = strlen (s);
      00000A AD 82            [24]  119 	mov	r5,dpl
      00000C AE 83            [24]  120 	mov	r6,dph
      00000E AF F0            [24]  121 	mov	r7,b
      000010 C0 07            [24]  122 	push	ar7
      000012 C0 06            [24]  123 	push	ar6
      000014 C0 05            [24]  124 	push	ar5
      000016 12r00r00         [24]  125 	lcall	_strlen
      000019 AB 82            [24]  126 	mov	r3,dpl
      00001B AC 83            [24]  127 	mov	r4,dph
      00001D D0 05            [24]  128 	pop	ar5
      00001F D0 06            [24]  129 	pop	ar6
      000021 D0 07            [24]  130 	pop	ar7
      000023 A8*00            [24]  131 	mov	r0,_bp
      000025 08               [12]  132 	inc	r0
      000026 A6 03            [24]  133 	mov	@r0,ar3
      000028 08               [12]  134 	inc	r0
      000029 A6 04            [24]  135 	mov	@r0,ar4
                                    136 ;	strndup.c:36: if (l > n)
      00002B A8*00            [24]  137 	mov	r0,_bp
      00002D 08               [12]  138 	inc	r0
      00002E E5*00            [12]  139 	mov	a,_bp
      000030 24 FC            [12]  140 	add	a,#0xfc
      000032 F9               [12]  141 	mov	r1,a
      000033 C3               [12]  142 	clr	c
      000034 E7               [12]  143 	mov	a,@r1
      000035 96               [12]  144 	subb	a,@r0
      000036 09               [12]  145 	inc	r1
      000037 E7               [12]  146 	mov	a,@r1
      000038 08               [12]  147 	inc	r0
      000039 96               [12]  148 	subb	a,@r0
      00003A 50 0E            [24]  149 	jnc	00102$
                                    150 ;	strndup.c:37: l = n;
      00003C E5*00            [12]  151 	mov	a,_bp
      00003E 24 FC            [12]  152 	add	a,#0xfc
      000040 F8               [12]  153 	mov	r0,a
      000041 A9*00            [24]  154 	mov	r1,_bp
      000043 09               [12]  155 	inc	r1
      000044 E6               [12]  156 	mov	a,@r0
      000045 F7               [12]  157 	mov	@r1,a
      000046 08               [12]  158 	inc	r0
      000047 E6               [12]  159 	mov	a,@r0
      000048 09               [12]  160 	inc	r1
      000049 F7               [12]  161 	mov	@r1,a
      00004A                        162 00102$:
                                    163 ;	strndup.c:38: char *r = malloc (l + 1);
      00004A C0 05            [24]  164 	push	ar5
      00004C C0 06            [24]  165 	push	ar6
      00004E C0 07            [24]  166 	push	ar7
      000050 A8*00            [24]  167 	mov	r0,_bp
      000052 08               [12]  168 	inc	r0
      000053 86 82            [24]  169 	mov	dpl,@r0
      000055 08               [12]  170 	inc	r0
      000056 86 83            [24]  171 	mov	dph,@r0
      000058 A3               [24]  172 	inc	dptr
      000059 C0 06            [24]  173 	push	ar6
      00005B C0 05            [24]  174 	push	ar5
      00005D 12r00r00         [24]  175 	lcall	_malloc
      000060 AA 82            [24]  176 	mov	r2,dpl
      000062 AF 83            [24]  177 	mov	r7,dph
      000064 D0 05            [24]  178 	pop	ar5
      000066 D0 06            [24]  179 	pop	ar6
      000068 E5*00            [12]  180 	mov	a,_bp
      00006A 24 03            [12]  181 	add	a,#0x03
      00006C F8               [12]  182 	mov	r0,a
      00006D A6 02            [24]  183 	mov	@r0,ar2
      00006F 08               [12]  184 	inc	r0
      000070 A6 07            [24]  185 	mov	@r0,ar7
      000072 08               [12]  186 	inc	r0
      000073 76 00            [12]  187 	mov	@r0,#0x00
                                    188 ;	strndup.c:39: if (r)
      000075 D0 07            [24]  189 	pop	ar7
      000077 D0 06            [24]  190 	pop	ar6
      000079 D0 05            [24]  191 	pop	ar5
      00007B E5*00            [12]  192 	mov	a,_bp
      00007D 24 03            [12]  193 	add	a,#0x03
      00007F F8               [12]  194 	mov	r0,a
      000080 E6               [12]  195 	mov	a,@r0
      000081 08               [12]  196 	inc	r0
      000082 46               [12]  197 	orl	a,@r0
      000083 60 49            [24]  198 	jz	00104$
                                    199 ;	strndup.c:41: memcpy (r, s, l);
      000085 E5*00            [12]  200 	mov	a,_bp
      000087 24 03            [12]  201 	add	a,#0x03
      000089 F8               [12]  202 	mov	r0,a
      00008A 86 02            [24]  203 	mov	ar2,@r0
      00008C 08               [12]  204 	inc	r0
      00008D 86 03            [24]  205 	mov	ar3,@r0
      00008F 08               [12]  206 	inc	r0
      000090 86 04            [24]  207 	mov	ar4,@r0
      000092 A8*00            [24]  208 	mov	r0,_bp
      000094 08               [12]  209 	inc	r0
      000095 E6               [12]  210 	mov	a,@r0
      000096 C0 E0            [24]  211 	push	acc
      000098 08               [12]  212 	inc	r0
      000099 E6               [12]  213 	mov	a,@r0
      00009A C0 E0            [24]  214 	push	acc
      00009C C0 05            [24]  215 	push	ar5
      00009E C0 06            [24]  216 	push	ar6
      0000A0 C0 07            [24]  217 	push	ar7
      0000A2 8A 82            [24]  218 	mov	dpl,r2
      0000A4 8B 83            [24]  219 	mov	dph,r3
      0000A6 8C F0            [24]  220 	mov	b,r4
      0000A8 12r00r00         [24]  221 	lcall	___memcpy
      0000AB E5 81            [12]  222 	mov	a,sp
      0000AD 24 FB            [12]  223 	add	a,#0xfb
      0000AF F5 81            [12]  224 	mov	sp,a
                                    225 ;	strndup.c:42: r[l] = 0;
      0000B1 E5*00            [12]  226 	mov	a,_bp
      0000B3 24 03            [12]  227 	add	a,#0x03
      0000B5 F8               [12]  228 	mov	r0,a
      0000B6 A9*00            [24]  229 	mov	r1,_bp
      0000B8 09               [12]  230 	inc	r1
      0000B9 E7               [12]  231 	mov	a,@r1
      0000BA 26               [12]  232 	add	a,@r0
      0000BB FD               [12]  233 	mov	r5,a
      0000BC 09               [12]  234 	inc	r1
      0000BD E7               [12]  235 	mov	a,@r1
      0000BE 08               [12]  236 	inc	r0
      0000BF 36               [12]  237 	addc	a,@r0
      0000C0 FE               [12]  238 	mov	r6,a
      0000C1 08               [12]  239 	inc	r0
      0000C2 86 07            [24]  240 	mov	ar7,@r0
      0000C4 8D 82            [24]  241 	mov	dpl,r5
      0000C6 8E 83            [24]  242 	mov	dph,r6
      0000C8 8F F0            [24]  243 	mov	b,r7
      0000CA E4               [12]  244 	clr	a
      0000CB 12r00r00         [24]  245 	lcall	__gptrput
      0000CE                        246 00104$:
                                    247 ;	strndup.c:44: return (r);
      0000CE E5*00            [12]  248 	mov	a,_bp
      0000D0 24 03            [12]  249 	add	a,#0x03
      0000D2 F8               [12]  250 	mov	r0,a
      0000D3 86 82            [24]  251 	mov	dpl,@r0
      0000D5 08               [12]  252 	inc	r0
      0000D6 86 83            [24]  253 	mov	dph,@r0
      0000D8 08               [12]  254 	inc	r0
      0000D9 86 F0            [24]  255 	mov	b,@r0
                                    256 ;	strndup.c:45: }
      0000DB 85*00 81         [24]  257 	mov	sp,_bp
      0000DE D0*00            [24]  258 	pop	_bp
      0000E0 22               [24]  259 	ret
                                    260 	.area CSEG    (CODE)
                                    261 	.area CONST   (CODE)
                                    262 	.area XINIT   (CODE)
                                    263 	.area CABS    (ABS,CODE)
