                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strncat
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strncat
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'strncat'
                                     91 ;------------------------------------------------------------
                                     92 ;back                      Allocated to stack - _bp -5
                                     93 ;count                     Allocated to stack - _bp -7
                                     94 ;front                     Allocated to stack - _bp +1
                                     95 ;start                     Allocated to stack - _bp +9
                                     96 ;sloc0                     Allocated to stack - _bp +4
                                     97 ;sloc1                     Allocated to stack - _bp +7
                                     98 ;------------------------------------------------------------
                                     99 ;	_strncat.c:31: char * strncat ( char * front, const char * back, size_t count )
                                    100 ;	-----------------------------------------
                                    101 ;	 function strncat
                                    102 ;	-----------------------------------------
      000000                        103 _strncat:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 E5 81            [12]  113 	mov	a,sp
      000004 F5*00            [12]  114 	mov	_bp,a
      000006 24 0B            [12]  115 	add	a,#0x0b
      000008 F5 81            [12]  116 	mov	sp,a
      00000A AD 82            [24]  117 	mov	r5,dpl
      00000C AE 83            [24]  118 	mov	r6,dph
      00000E AF F0            [24]  119 	mov	r7,b
                                    120 ;	_strncat.c:33: char *start = front;
      000010 E5*00            [12]  121 	mov	a,_bp
      000012 24 09            [12]  122 	add	a,#0x09
      000014 F8               [12]  123 	mov	r0,a
      000015 A6 05            [24]  124 	mov	@r0,ar5
      000017 08               [12]  125 	inc	r0
      000018 A6 06            [24]  126 	mov	@r0,ar6
      00001A 08               [12]  127 	inc	r0
      00001B A6 07            [24]  128 	mov	@r0,ar7
                                    129 ;	_strncat.c:35: while (*front++);
      00001D                        130 00101$:
      00001D 8D 82            [24]  131 	mov	dpl,r5
      00001F 8E 83            [24]  132 	mov	dph,r6
      000021 8F F0            [24]  133 	mov	b,r7
      000023 12r00r00         [24]  134 	lcall	__gptrget
      000026 FC               [12]  135 	mov	r4,a
      000027 A3               [24]  136 	inc	dptr
      000028 AD 82            [24]  137 	mov	r5,dpl
      00002A AE 83            [24]  138 	mov	r6,dph
      00002C EC               [12]  139 	mov	a,r4
      00002D 70 EE            [24]  140 	jnz	00101$
                                    141 ;	_strncat.c:37: front--;
      00002F A8*00            [24]  142 	mov	r0,_bp
      000031 08               [12]  143 	inc	r0
      000032 ED               [12]  144 	mov	a,r5
      000033 24 FF            [12]  145 	add	a,#0xff
      000035 F6               [12]  146 	mov	@r0,a
      000036 EE               [12]  147 	mov	a,r6
      000037 34 FF            [12]  148 	addc	a,#0xff
      000039 08               [12]  149 	inc	r0
      00003A F6               [12]  150 	mov	@r0,a
      00003B 08               [12]  151 	inc	r0
      00003C A6 07            [24]  152 	mov	@r0,ar7
                                    153 ;	_strncat.c:39: while (count--)
      00003E E5*00            [12]  154 	mov	a,_bp
      000040 24 FB            [12]  155 	add	a,#0xfb
      000042 F8               [12]  156 	mov	r0,a
      000043 86 02            [24]  157 	mov	ar2,@r0
      000045 08               [12]  158 	inc	r0
      000046 86 03            [24]  159 	mov	ar3,@r0
      000048 08               [12]  160 	inc	r0
      000049 86 04            [24]  161 	mov	ar4,@r0
      00004B A8*00            [24]  162 	mov	r0,_bp
      00004D 08               [12]  163 	inc	r0
      00004E E5*00            [12]  164 	mov	a,_bp
      000050 24 04            [12]  165 	add	a,#0x04
      000052 F9               [12]  166 	mov	r1,a
      000053 E6               [12]  167 	mov	a,@r0
      000054 F7               [12]  168 	mov	@r1,a
      000055 08               [12]  169 	inc	r0
      000056 E6               [12]  170 	mov	a,@r0
      000057 09               [12]  171 	inc	r1
      000058 F7               [12]  172 	mov	@r1,a
      000059 08               [12]  173 	inc	r0
      00005A E6               [12]  174 	mov	a,@r0
      00005B 09               [12]  175 	inc	r1
      00005C F7               [12]  176 	mov	@r1,a
      00005D E5*00            [12]  177 	mov	a,_bp
      00005F 24 F9            [12]  178 	add	a,#0xf9
      000061 F8               [12]  179 	mov	r0,a
      000062 E5*00            [12]  180 	mov	a,_bp
      000064 24 07            [12]  181 	add	a,#0x07
      000066 F9               [12]  182 	mov	r1,a
      000067 E6               [12]  183 	mov	a,@r0
      000068 F7               [12]  184 	mov	@r1,a
      000069 08               [12]  185 	inc	r0
      00006A E6               [12]  186 	mov	a,@r0
      00006B 09               [12]  187 	inc	r1
      00006C F7               [12]  188 	mov	@r1,a
      00006D                        189 00106$:
      00006D E5*00            [12]  190 	mov	a,_bp
      00006F 24 07            [12]  191 	add	a,#0x07
      000071 F8               [12]  192 	mov	r0,a
      000072 86 06            [24]  193 	mov	ar6,@r0
      000074 08               [12]  194 	inc	r0
      000075 86 07            [24]  195 	mov	ar7,@r0
      000077 E5*00            [12]  196 	mov	a,_bp
      000079 24 07            [12]  197 	add	a,#0x07
      00007B F8               [12]  198 	mov	r0,a
      00007C 16               [12]  199 	dec	@r0
      00007D B6 FF 02         [24]  200 	cjne	@r0,#0xff,00138$
      000080 08               [12]  201 	inc	r0
      000081 16               [12]  202 	dec	@r0
      000082                        203 00138$:
      000082 EE               [12]  204 	mov	a,r6
      000083 4F               [12]  205 	orl	a,r7
      000084 60 4C            [24]  206 	jz	00108$
                                    207 ;	_strncat.c:40: if (!(*front++ = *back++))
      000086 8A 82            [24]  208 	mov	dpl,r2
      000088 8B 83            [24]  209 	mov	dph,r3
      00008A 8C F0            [24]  210 	mov	b,r4
      00008C 12r00r00         [24]  211 	lcall	__gptrget
      00008F FF               [12]  212 	mov	r7,a
      000090 A3               [24]  213 	inc	dptr
      000091 AA 82            [24]  214 	mov	r2,dpl
      000093 AB 83            [24]  215 	mov	r3,dph
      000095 E5*00            [12]  216 	mov	a,_bp
      000097 24 04            [12]  217 	add	a,#0x04
      000099 F8               [12]  218 	mov	r0,a
      00009A 86 82            [24]  219 	mov	dpl,@r0
      00009C 08               [12]  220 	inc	r0
      00009D 86 83            [24]  221 	mov	dph,@r0
      00009F 08               [12]  222 	inc	r0
      0000A0 86 F0            [24]  223 	mov	b,@r0
      0000A2 EF               [12]  224 	mov	a,r7
      0000A3 12r00r00         [24]  225 	lcall	__gptrput
      0000A6 A3               [24]  226 	inc	dptr
      0000A7 18               [12]  227 	dec	r0
      0000A8 18               [12]  228 	dec	r0
      0000A9 A6 82            [24]  229 	mov	@r0,dpl
      0000AB 08               [12]  230 	inc	r0
      0000AC A6 83            [24]  231 	mov	@r0,dph
      0000AE E5*00            [12]  232 	mov	a,_bp
      0000B0 24 04            [12]  233 	add	a,#0x04
      0000B2 F8               [12]  234 	mov	r0,a
      0000B3 A9*00            [24]  235 	mov	r1,_bp
      0000B5 09               [12]  236 	inc	r1
      0000B6 E6               [12]  237 	mov	a,@r0
      0000B7 F7               [12]  238 	mov	@r1,a
      0000B8 08               [12]  239 	inc	r0
      0000B9 E6               [12]  240 	mov	a,@r0
      0000BA 09               [12]  241 	inc	r1
      0000BB F7               [12]  242 	mov	@r1,a
      0000BC 08               [12]  243 	inc	r0
      0000BD E6               [12]  244 	mov	a,@r0
      0000BE 09               [12]  245 	inc	r1
      0000BF F7               [12]  246 	mov	@r1,a
      0000C0 EF               [12]  247 	mov	a,r7
      0000C1 70 AA            [24]  248 	jnz	00106$
                                    249 ;	_strncat.c:41: return(start);
      0000C3 E5*00            [12]  250 	mov	a,_bp
      0000C5 24 09            [12]  251 	add	a,#0x09
      0000C7 F8               [12]  252 	mov	r0,a
      0000C8 86 82            [24]  253 	mov	dpl,@r0
      0000CA 08               [12]  254 	inc	r0
      0000CB 86 83            [24]  255 	mov	dph,@r0
      0000CD 08               [12]  256 	inc	r0
      0000CE 86 F0            [24]  257 	mov	b,@r0
      0000D0 80 1C            [24]  258 	sjmp	00109$
      0000D2                        259 00108$:
                                    260 ;	_strncat.c:43: *front = '\0';
      0000D2 A8*00            [24]  261 	mov	r0,_bp
      0000D4 08               [12]  262 	inc	r0
      0000D5 86 82            [24]  263 	mov	dpl,@r0
      0000D7 08               [12]  264 	inc	r0
      0000D8 86 83            [24]  265 	mov	dph,@r0
      0000DA 08               [12]  266 	inc	r0
      0000DB 86 F0            [24]  267 	mov	b,@r0
      0000DD E4               [12]  268 	clr	a
      0000DE 12r00r00         [24]  269 	lcall	__gptrput
                                    270 ;	_strncat.c:44: return(start);
      0000E1 E5*00            [12]  271 	mov	a,_bp
      0000E3 24 09            [12]  272 	add	a,#0x09
      0000E5 F8               [12]  273 	mov	r0,a
      0000E6 86 82            [24]  274 	mov	dpl,@r0
      0000E8 08               [12]  275 	inc	r0
      0000E9 86 83            [24]  276 	mov	dph,@r0
      0000EB 08               [12]  277 	inc	r0
      0000EC 86 F0            [24]  278 	mov	b,@r0
      0000EE                        279 00109$:
                                    280 ;	_strncat.c:45: }
      0000EE 85*00 81         [24]  281 	mov	sp,_bp
      0000F1 D0*00            [24]  282 	pop	_bp
      0000F3 22               [24]  283 	ret
                                    284 	.area CSEG    (CODE)
                                    285 	.area CONST   (CODE)
                                    286 	.area XINIT   (CODE)
                                    287 	.area CABS    (ABS,CODE)
