                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf
                                     13 	.globl _sprintf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'put_char_to_string'
                                     93 ;------------------------------------------------------------
                                     94 ;p                         Allocated to stack - _bp -5
                                     95 ;c                         Allocated to stack - _bp +1
                                     96 ;buf                       Allocated to stack - _bp +2
                                     97 ;------------------------------------------------------------
                                     98 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                     99 ;	-----------------------------------------
                                    100 ;	 function put_char_to_string
                                    101 ;	-----------------------------------------
      000000                        102 _put_char_to_string:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 C0 82            [24]  113 	push	dpl
      000007 05 81            [12]  114 	inc	sp
      000009 05 81            [12]  115 	inc	sp
      00000B 05 81            [12]  116 	inc	sp
                                    117 ;	sprintf.c:36: char **buf = (char **)p;
      00000D E5*00            [12]  118 	mov	a,_bp
      00000F 24 FB            [12]  119 	add	a,#0xfb
      000011 F8               [12]  120 	mov	r0,a
      000012 A9*00            [24]  121 	mov	r1,_bp
      000014 09               [12]  122 	inc	r1
      000015 09               [12]  123 	inc	r1
      000016 E6               [12]  124 	mov	a,@r0
      000017 F7               [12]  125 	mov	@r1,a
      000018 08               [12]  126 	inc	r0
      000019 E6               [12]  127 	mov	a,@r0
      00001A 09               [12]  128 	inc	r1
      00001B F7               [12]  129 	mov	@r1,a
      00001C 08               [12]  130 	inc	r0
      00001D E6               [12]  131 	mov	a,@r0
      00001E 09               [12]  132 	inc	r1
      00001F F7               [12]  133 	mov	@r1,a
                                    134 ;	sprintf.c:37: *(*buf)++ = c;
      000020 A8*00            [24]  135 	mov	r0,_bp
      000022 08               [12]  136 	inc	r0
      000023 08               [12]  137 	inc	r0
      000024 86 82            [24]  138 	mov	dpl,@r0
      000026 08               [12]  139 	inc	r0
      000027 86 83            [24]  140 	mov	dph,@r0
      000029 08               [12]  141 	inc	r0
      00002A 86 F0            [24]  142 	mov	b,@r0
      00002C 12r00r00         [24]  143 	lcall	__gptrget
      00002F FA               [12]  144 	mov	r2,a
      000030 A3               [24]  145 	inc	dptr
      000031 12r00r00         [24]  146 	lcall	__gptrget
      000034 FB               [12]  147 	mov	r3,a
      000035 A3               [24]  148 	inc	dptr
      000036 12r00r00         [24]  149 	lcall	__gptrget
      000039 FF               [12]  150 	mov	r7,a
      00003A 74 01            [12]  151 	mov	a,#0x01
      00003C 2A               [12]  152 	add	a,r2
      00003D FC               [12]  153 	mov	r4,a
      00003E E4               [12]  154 	clr	a
      00003F 3B               [12]  155 	addc	a,r3
      000040 FD               [12]  156 	mov	r5,a
      000041 8F 06            [24]  157 	mov	ar6,r7
      000043 A8*00            [24]  158 	mov	r0,_bp
      000045 08               [12]  159 	inc	r0
      000046 08               [12]  160 	inc	r0
      000047 86 82            [24]  161 	mov	dpl,@r0
      000049 08               [12]  162 	inc	r0
      00004A 86 83            [24]  163 	mov	dph,@r0
      00004C 08               [12]  164 	inc	r0
      00004D 86 F0            [24]  165 	mov	b,@r0
      00004F EC               [12]  166 	mov	a,r4
      000050 12r00r00         [24]  167 	lcall	__gptrput
      000053 A3               [24]  168 	inc	dptr
      000054 ED               [12]  169 	mov	a,r5
      000055 12r00r00         [24]  170 	lcall	__gptrput
      000058 A3               [24]  171 	inc	dptr
      000059 EE               [12]  172 	mov	a,r6
      00005A 12r00r00         [24]  173 	lcall	__gptrput
      00005D 8A 82            [24]  174 	mov	dpl,r2
      00005F 8B 83            [24]  175 	mov	dph,r3
      000061 8F F0            [24]  176 	mov	b,r7
      000063 A8*00            [24]  177 	mov	r0,_bp
      000065 08               [12]  178 	inc	r0
      000066 E6               [12]  179 	mov	a,@r0
      000067 12r00r00         [24]  180 	lcall	__gptrput
                                    181 ;	sprintf.c:38: }
      00006A 85*00 81         [24]  182 	mov	sp,_bp
      00006D D0*00            [24]  183 	pop	_bp
      00006F 22               [24]  184 	ret
                                    185 ;------------------------------------------------------------
                                    186 ;Allocation info for local variables in function 'vsprintf'
                                    187 ;------------------------------------------------------------
                                    188 ;format                    Allocated to stack - _bp -5
                                    189 ;ap                        Allocated to stack - _bp -6
                                    190 ;buf                       Allocated to stack - _bp +1
                                    191 ;i                         Allocated to registers r6 r7 
                                    192 ;------------------------------------------------------------
                                    193 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    194 ;	-----------------------------------------
                                    195 ;	 function vsprintf
                                    196 ;	-----------------------------------------
      000070                        197 _vsprintf:
      000070 C0*00            [24]  198 	push	_bp
      000072 85 81*00         [24]  199 	mov	_bp,sp
      000075 C0 82            [24]  200 	push	dpl
      000077 C0 83            [24]  201 	push	dph
      000079 C0 F0            [24]  202 	push	b
                                    203 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      00007B AF*00            [24]  204 	mov	r7,_bp
      00007D 0F               [12]  205 	inc	r7
      00007E 7E 00            [12]  206 	mov	r6,#0x00
      000080 7D 40            [12]  207 	mov	r5,#0x40
      000082 E5*00            [12]  208 	mov	a,_bp
      000084 24 FA            [12]  209 	add	a,#0xfa
      000086 F8               [12]  210 	mov	r0,a
      000087 E6               [12]  211 	mov	a,@r0
      000088 C0 E0            [24]  212 	push	acc
      00008A E5*00            [12]  213 	mov	a,_bp
      00008C 24 FB            [12]  214 	add	a,#0xfb
      00008E F8               [12]  215 	mov	r0,a
      00008F E6               [12]  216 	mov	a,@r0
      000090 C0 E0            [24]  217 	push	acc
      000092 08               [12]  218 	inc	r0
      000093 E6               [12]  219 	mov	a,@r0
      000094 C0 E0            [24]  220 	push	acc
      000096 08               [12]  221 	inc	r0
      000097 E6               [12]  222 	mov	a,@r0
      000098 C0 E0            [24]  223 	push	acc
      00009A C0 07            [24]  224 	push	ar7
      00009C C0 06            [24]  225 	push	ar6
      00009E C0 05            [24]  226 	push	ar5
      0000A0 90r00r00         [24]  227 	mov	dptr,#_put_char_to_string
      0000A3 12r00r00         [24]  228 	lcall	__print_format
      0000A6 AE 82            [24]  229 	mov	r6,dpl
      0000A8 AF 83            [24]  230 	mov	r7,dph
      0000AA E5 81            [12]  231 	mov	a,sp
      0000AC 24 F9            [12]  232 	add	a,#0xf9
      0000AE F5 81            [12]  233 	mov	sp,a
                                    234 ;	sprintf.c:45: *buf = 0;
      0000B0 A8*00            [24]  235 	mov	r0,_bp
      0000B2 08               [12]  236 	inc	r0
      0000B3 86 03            [24]  237 	mov	ar3,@r0
      0000B5 08               [12]  238 	inc	r0
      0000B6 86 04            [24]  239 	mov	ar4,@r0
      0000B8 08               [12]  240 	inc	r0
      0000B9 86 05            [24]  241 	mov	ar5,@r0
      0000BB 8B 82            [24]  242 	mov	dpl,r3
      0000BD 8C 83            [24]  243 	mov	dph,r4
      0000BF 8D F0            [24]  244 	mov	b,r5
      0000C1 E4               [12]  245 	clr	a
      0000C2 12r00r00         [24]  246 	lcall	__gptrput
                                    247 ;	sprintf.c:46: return i;
      0000C5 8E 82            [24]  248 	mov	dpl,r6
      0000C7 8F 83            [24]  249 	mov	dph,r7
                                    250 ;	sprintf.c:47: }
      0000C9 85*00 81         [24]  251 	mov	sp,_bp
      0000CC D0*00            [24]  252 	pop	_bp
      0000CE 22               [24]  253 	ret
                                    254 ;------------------------------------------------------------
                                    255 ;Allocation info for local variables in function 'sprintf'
                                    256 ;------------------------------------------------------------
                                    257 ;buf                       Allocated to stack - _bp -5
                                    258 ;format                    Allocated to stack - _bp -8
                                    259 ;arg                       Allocated to registers r7 
                                    260 ;i                         Allocated to registers r6 r7 
                                    261 ;------------------------------------------------------------
                                    262 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    263 ;	-----------------------------------------
                                    264 ;	 function sprintf
                                    265 ;	-----------------------------------------
      0000CF                        266 _sprintf:
      0000CF C0*00            [24]  267 	push	_bp
                                    268 ;	sprintf.c:55: va_start (arg, format);
      0000D1 E5 81            [12]  269 	mov	a,sp
      0000D3 F5*00            [12]  270 	mov	_bp,a
      0000D5 24 F8            [12]  271 	add	a,#0xf8
      0000D7 FF               [12]  272 	mov	r7,a
                                    273 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      0000D8 E5*00            [12]  274 	mov	a,_bp
      0000DA 24 FB            [12]  275 	add	a,#0xfb
      0000DC FE               [12]  276 	mov	r6,a
      0000DD 7D 00            [12]  277 	mov	r5,#0x00
      0000DF 7C 40            [12]  278 	mov	r4,#0x40
      0000E1 C0 07            [24]  279 	push	ar7
      0000E3 E5*00            [12]  280 	mov	a,_bp
      0000E5 24 F8            [12]  281 	add	a,#0xf8
      0000E7 F8               [12]  282 	mov	r0,a
      0000E8 E6               [12]  283 	mov	a,@r0
      0000E9 C0 E0            [24]  284 	push	acc
      0000EB 08               [12]  285 	inc	r0
      0000EC E6               [12]  286 	mov	a,@r0
      0000ED C0 E0            [24]  287 	push	acc
      0000EF 08               [12]  288 	inc	r0
      0000F0 E6               [12]  289 	mov	a,@r0
      0000F1 C0 E0            [24]  290 	push	acc
      0000F3 C0 06            [24]  291 	push	ar6
      0000F5 C0 05            [24]  292 	push	ar5
      0000F7 C0 04            [24]  293 	push	ar4
      0000F9 90r00r00         [24]  294 	mov	dptr,#_put_char_to_string
      0000FC 12r00r00         [24]  295 	lcall	__print_format
      0000FF AE 82            [24]  296 	mov	r6,dpl
      000101 AF 83            [24]  297 	mov	r7,dph
      000103 E5 81            [12]  298 	mov	a,sp
      000105 24 F9            [12]  299 	add	a,#0xf9
      000107 F5 81            [12]  300 	mov	sp,a
                                    301 ;	sprintf.c:57: *buf = 0;
      000109 E5*00            [12]  302 	mov	a,_bp
      00010B 24 FB            [12]  303 	add	a,#0xfb
      00010D F8               [12]  304 	mov	r0,a
      00010E 86 03            [24]  305 	mov	ar3,@r0
      000110 08               [12]  306 	inc	r0
      000111 86 04            [24]  307 	mov	ar4,@r0
      000113 08               [12]  308 	inc	r0
      000114 86 05            [24]  309 	mov	ar5,@r0
      000116 8B 82            [24]  310 	mov	dpl,r3
      000118 8C 83            [24]  311 	mov	dph,r4
      00011A 8D F0            [24]  312 	mov	b,r5
      00011C E4               [12]  313 	clr	a
      00011D 12r00r00         [24]  314 	lcall	__gptrput
                                    315 ;	sprintf.c:60: return i;
      000120 8E 82            [24]  316 	mov	dpl,r6
      000122 8F 83            [24]  317 	mov	dph,r7
                                    318 ;	sprintf.c:61: }
      000124 D0*00            [24]  319 	pop	_bp
      000126 22               [24]  320 	ret
                                    321 	.area CSEG    (CODE)
                                    322 	.area CONST   (CODE)
                                    323 	.area XINIT   (CODE)
                                    324 	.area CABS    (ABS,CODE)
