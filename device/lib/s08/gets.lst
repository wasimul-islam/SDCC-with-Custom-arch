                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module gets
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _gets
                             24 	.globl _putchar
                             25 	.globl _getchar
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
                             30 ;--------------------------------------------------------
                             31 ; overlayable items in ram
                             32 ;--------------------------------------------------------
                             33 ;--------------------------------------------------------
                             34 ; absolute ram data
                             35 ;--------------------------------------------------------
                             36 	.area IABS    (ABS)
                             37 	.area IABS    (ABS)
                             38 ;--------------------------------------------------------
                             39 ; absolute external ram data
                             40 ;--------------------------------------------------------
                             41 	.area XABS    (ABS)
                             42 ;--------------------------------------------------------
                             43 ; initialized external ram data
                             44 ;--------------------------------------------------------
                             45 	.area XISEG
                             46 ;--------------------------------------------------------
                             47 ; extended address mode data
                             48 ;--------------------------------------------------------
                             49 	.area XSEG
   0000                      50 _gets_s_65536_11:
   0000                      51 	.ds 2
   0002                      52 _gets_count_65536_12:
   0002                      53 	.ds 2
                             54 ;--------------------------------------------------------
                             55 ; global & static initialisations
                             56 ;--------------------------------------------------------
                             57 	.area HOME    (CODE)
                             58 	.area GSINIT  (CODE)
                             59 	.area GSFINAL (CODE)
                             60 	.area GSINIT  (CODE)
                             61 ;--------------------------------------------------------
                             62 ; Home
                             63 ;--------------------------------------------------------
                             64 	.area HOME    (CODE)
                             65 	.area HOME    (CODE)
                             66 ;--------------------------------------------------------
                             67 ; code
                             68 ;--------------------------------------------------------
                             69 	.area CSEG    (CODE)
                             70 ;------------------------------------------------------------
                             71 ;Allocation info for local variables in function 'gets'
                             72 ;------------------------------------------------------------
                             73 ;s                         Allocated with name '_gets_s_65536_11'
                             74 ;c                         Allocated to registers a 
                             75 ;count                     Allocated with name '_gets_count_65536_12'
                             76 ;------------------------------------------------------------
                             77 ;../gets.c:32: gets (char *s)
                             78 ;	-----------------------------------------
                             79 ;	 function gets
                             80 ;	-----------------------------------------
                             81 ;	Register assignment is optimal.
                             82 ;	Stack space usage: 0 bytes.
   0000                      83 _gets:
   0000 C7r00r01      [ 4]   84 	sta	(_gets_s_65536_11 + 1)
   0003 CFr00r00      [ 4]   85 	stx	_gets_s_65536_11
                             86 ;../gets.c:35: unsigned int count = 0;
   0006 8C            [ 1]   87 	clrh
   0007 5F            [ 1]   88 	clrx
   0008 96r00r02      [ 5]   89 	sthx	_gets_count_65536_12
                             90 ;../gets.c:37: while (1)
   000B                      91 00109$:
                             92 ;../gets.c:39: c = getchar ();
   000B CDr00r00      [ 6]   93 	jsr	_getchar
                             94 ;../gets.c:40: switch(c)
   000E 41 08 08      [ 4]   95 	cbeqa	#0x08,00101$
   0011 41 0A 31      [ 4]   96 	cbeqa	#0x0a,00105$
   0014 41 0D 2E      [ 4]   97 	cbeqa	#0x0d,00105$
   0017 20 44         [ 3]   98 	bra	00106$
                             99 ;../gets.c:42: case '\b': /* backspace */
   0019                     100 00101$:
                            101 ;../gets.c:43: if (count)
   0019 C6r00r02      [ 4]  102 	lda	_gets_count_65536_12
   001C CAr00r03      [ 4]  103 	ora	(_gets_count_65536_12 + 1)
   001F 27 EA         [ 3]  104 	beq	00109$
                            105 ;../gets.c:45: putchar ('\b');
   0021 A6 08         [ 2]  106 	lda	#0x08
   0023 5F            [ 1]  107 	clrx
   0024 CDr00r00      [ 6]  108 	jsr	_putchar
                            109 ;../gets.c:46: putchar (' ');
   0027 A6 20         [ 2]  110 	lda	#0x20
   0029 5F            [ 1]  111 	clrx
   002A CDr00r00      [ 6]  112 	jsr	_putchar
                            113 ;../gets.c:47: putchar ('\b');
   002D A6 08         [ 2]  114 	lda	#0x08
   002F 5F            [ 1]  115 	clrx
   0030 CDr00r00      [ 6]  116 	jsr	_putchar
                            117 ;../gets.c:48: --s;
   0033 32r00r00      [ 5]  118 	ldhx	_gets_s_65536_11
   0036 AF FF         [ 2]  119 	aix	#-1
   0038 96r00r00      [ 5]  120 	sthx	_gets_s_65536_11
                            121 ;../gets.c:49: --count;
   003B 32r00r02      [ 5]  122 	ldhx	_gets_count_65536_12
   003E AF FF         [ 2]  123 	aix	#-1
   0040 96r00r02      [ 5]  124 	sthx	_gets_count_65536_12
                            125 ;../gets.c:51: break;
   0043 20 C6         [ 3]  126 	bra	00109$
                            127 ;../gets.c:54: case '\r': /* CR or LF */
   0045                     128 00105$:
                            129 ;../gets.c:55: putchar ('\r');
   0045 A6 0D         [ 2]  130 	lda	#0x0d
   0047 5F            [ 1]  131 	clrx
   0048 CDr00r00      [ 6]  132 	jsr	_putchar
                            133 ;../gets.c:56: putchar ('\n');
   004B A6 0A         [ 2]  134 	lda	#0x0a
   004D 5F            [ 1]  135 	clrx
   004E CDr00r00      [ 6]  136 	jsr	_putchar
                            137 ;../gets.c:57: *s = 0;
   0051 32r00r00      [ 5]  138 	ldhx	_gets_s_65536_11
   0054 4F            [ 1]  139 	clra
   0055 F7            [ 2]  140 	sta	,x
                            141 ;../gets.c:58: return s;
   0056 CEr00r00      [ 4]  142 	ldx	_gets_s_65536_11
   0059 C6r00r01      [ 4]  143 	lda	(_gets_s_65536_11 + 1)
   005C 81            [ 6]  144 	rts
                            145 ;../gets.c:60: default:
   005D                     146 00106$:
                            147 ;../gets.c:61: *s++ = c;
   005D 32r00r00      [ 5]  148 	ldhx	_gets_s_65536_11
   0060 F7            [ 2]  149 	sta	,x
   0061 AF 01         [ 2]  150 	aix	#1
   0063 96r00r00      [ 5]  151 	sthx	_gets_s_65536_11
                            152 ;../gets.c:62: ++count;
   0066 32r00r02      [ 5]  153 	ldhx	_gets_count_65536_12
   0069 AF 01         [ 2]  154 	aix	#1
   006B 96r00r02      [ 5]  155 	sthx	_gets_count_65536_12
                            156 ;../gets.c:63: putchar (c);
   006E 5F            [ 1]  157 	clrx
   006F CDr00r00      [ 6]  158 	jsr	_putchar
                            159 ;../gets.c:65: }
   0072 20 97         [ 3]  160 	bra	00109$
                            161 ;../gets.c:67: }
   0074 81            [ 6]  162 	rts
                            163 	.area CSEG    (CODE)
                            164 	.area CONST   (CODE)
                            165 	.area XINIT   (CODE)
                            166 	.area CABS    (ABS,CODE)
