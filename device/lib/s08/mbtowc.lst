                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module mbtowc
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _mbtowc_PARM_3
                             24 	.globl _mbtowc_PARM_2
                             25 	.globl _mbtowc
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
                             30 ;--------------------------------------------------------
                             31 ; overlayable items in ram
                             32 ;--------------------------------------------------------
                             33 	.area	OSEG    (PAG, OVR)
   0000                      34 _mbtowc_sloc0_1_0:
   0000                      35 	.ds 1
   0001                      36 _mbtowc_sloc1_1_0:
   0001                      37 	.ds 2
   0003                      38 _mbtowc_sloc2_1_0:
   0003                      39 	.ds 2
   0005                      40 _mbtowc_sloc3_1_0:
   0005                      41 	.ds 2
   0007                      42 _mbtowc_sloc4_1_0:
   0007                      43 	.ds 4
                             44 ;--------------------------------------------------------
                             45 ; absolute ram data
                             46 ;--------------------------------------------------------
                             47 	.area IABS    (ABS)
                             48 	.area IABS    (ABS)
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area XABS    (ABS)
                             53 ;--------------------------------------------------------
                             54 ; initialized external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XISEG
                             57 ;--------------------------------------------------------
                             58 ; extended address mode data
                             59 ;--------------------------------------------------------
                             60 	.area XSEG
   0000                      61 _mbtowc_PARM_2:
   0000                      62 	.ds 2
   0002                      63 _mbtowc_PARM_3:
   0002                      64 	.ds 2
   0004                      65 _mbtowc_pwc_65536_36:
   0004                      66 	.ds 2
   0006                      67 _mbtowc_codepoint_65536_37:
   0006                      68 	.ds 4
   000A                      69 _mbtowc_first_byte_65536_37:
   000A                      70 	.ds 1
                             71 ;--------------------------------------------------------
                             72 ; global & static initialisations
                             73 ;--------------------------------------------------------
                             74 	.area HOME    (CODE)
                             75 	.area GSINIT  (CODE)
                             76 	.area GSFINAL (CODE)
                             77 	.area GSINIT  (CODE)
                             78 ;--------------------------------------------------------
                             79 ; Home
                             80 ;--------------------------------------------------------
                             81 	.area HOME    (CODE)
                             82 	.area HOME    (CODE)
                             83 ;--------------------------------------------------------
                             84 ; code
                             85 ;--------------------------------------------------------
                             86 	.area CSEG    (CODE)
                             87 ;------------------------------------------------------------
                             88 ;Allocation info for local variables in function 'mbtowc'
                             89 ;------------------------------------------------------------
                             90 ;s                         Allocated with name '_mbtowc_PARM_2'
                             91 ;n                         Allocated with name '_mbtowc_PARM_3'
                             92 ;pwc                       Allocated with name '_mbtowc_pwc_65536_36'
                             93 ;codepoint                 Allocated with name '_mbtowc_codepoint_65536_37'
                             94 ;seqlen                    Allocated to registers 
                             95 ;i                         Allocated to registers 
                             96 ;first_byte                Allocated with name '_mbtowc_first_byte_65536_37'
                             97 ;sloc0                     Allocated with name '_mbtowc_sloc0_1_0'
                             98 ;sloc1                     Allocated with name '_mbtowc_sloc1_1_0'
                             99 ;sloc2                     Allocated with name '_mbtowc_sloc2_1_0'
                            100 ;sloc3                     Allocated with name '_mbtowc_sloc3_1_0'
                            101 ;sloc4                     Allocated with name '_mbtowc_sloc4_1_0'
                            102 ;------------------------------------------------------------
                            103 ;../mbtowc.c:31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                            104 ;	-----------------------------------------
                            105 ;	 function mbtowc
                            106 ;	-----------------------------------------
                            107 ;	Register assignment is optimal.
                            108 ;	Stack space usage: 0 bytes.
   0000                     109 _mbtowc:
   0000 C7r00r05      [ 4]  110 	sta	(_mbtowc_pwc_65536_36 + 1)
   0003 CFr00r04      [ 4]  111 	stx	_mbtowc_pwc_65536_36
                            112 ;../mbtowc.c:37: if(!s)
   0006 C6r00r00      [ 4]  113 	lda	_mbtowc_PARM_2
   0009 CAr00r01      [ 4]  114 	ora	(_mbtowc_PARM_2 + 1)
   000C 26 03         [ 3]  115 	bne	00102$
                            116 ;../mbtowc.c:38: return(0);
   000E 4F            [ 1]  117 	clra
   000F 97            [ 1]  118 	tax
   0010 81            [ 6]  119 	rts
   0011                     120 00102$:
                            121 ;../mbtowc.c:40: seqlen = 1;
   0011 6E 01*00      [ 4]  122 	mov	#0x01,*_mbtowc_sloc0_1_0
                            123 ;../mbtowc.c:41: first_byte = *s;
   0014 32r00r00      [ 5]  124 	ldhx	_mbtowc_PARM_2
   0017 35*01         [ 4]  125 	sthx	*_mbtowc_sloc1_1_0
   0019 55*01         [ 4]  126 	ldhx	*_mbtowc_sloc1_1_0
   001B F6            [ 3]  127 	lda	,x
   001C C7r00r0A      [ 4]  128 	sta	_mbtowc_first_byte_65536_37
                            129 ;../mbtowc.c:43: if(first_byte & 0x80)
   001F C6r00r0A      [ 4]  130 	lda	_mbtowc_first_byte_65536_37
   0022 2A 45         [ 3]  131 	bpl     00107$
                            132 ;../mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
   0024 AE 01         [ 2]  133 	ldx	#0x01
   0026                     134 00103$:
   0026 6E 80*04      [ 4]  135 	mov	#0x80,*(_mbtowc_sloc2_1_0 + 1)
   0029 6E 00*03      [ 4]  136 	mov	#0x00,*_mbtowc_sloc2_1_0
   002C 9F            [ 1]  137 	txa
   002D 4D            [ 1]  138 	tsta
   002E 27 06         [ 3]  139 	beq	00204$
   0030                     140 00203$:
   0030 37*03         [ 5]  141 	asr	*_mbtowc_sloc2_1_0
   0032 36*04         [ 5]  142 	ror	*(_mbtowc_sloc2_1_0 + 1)
   0034 4B FA         [ 4]  143 	dbnza	00203$
   0036                     144 00204$:
   0036 C6r00r0A      [ 4]  145 	lda	_mbtowc_first_byte_65536_37
   0039 B7*06         [ 3]  146 	sta	*(_mbtowc_sloc3_1_0 + 1)
   003B 6E 00*05      [ 4]  147 	mov	#0x00,*_mbtowc_sloc3_1_0
                            148 ;../mbtowc.c:46: seqlen++;
   003E 9F            [ 1]  149 	txa
   003F AB 01         [ 2]  150 	add	#0x01
                            151 ;../mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
   0041 87            [ 2]  152 	psha
   0042 B6*06         [ 3]  153 	lda	*(_mbtowc_sloc3_1_0 + 1)
   0044 B5*04         [ 3]  154 	bit	*(_mbtowc_sloc2_1_0 + 1)
   0046 26 04         [ 3]  155 	bne	00205$
   0048 B6*05         [ 3]  156 	lda	*_mbtowc_sloc3_1_0
   004A B5*03         [ 3]  157 	bit	*_mbtowc_sloc2_1_0
   004C                     158 00205$:
   004C 86            [ 3]  159 	pula
   004D 27 03         [ 3]  160 	beq	00143$
                            161 ;../mbtowc.c:46: seqlen++;
   004F 97            [ 1]  162 	tax
   0050 20 D4         [ 3]  163 	bra	00103$
   0052                     164 00143$:
   0052 BF*00         [ 3]  165 	stx	*_mbtowc_sloc0_1_0
                            166 ;../mbtowc.c:47: first_byte &= (0xff >> (seqlen + 1));
   0054 45 00 FF      [ 3]  167 	ldhx	#0x00ff
   0057 4D            [ 1]  168 	tsta
   0058 27 08         [ 3]  169 	beq	00208$
   005A                     170 00207$:
   005A 8B            [ 2]  171 	pshh
   005B 9E 67 01      [ 6]  172 	asr	1,s
   005E 8A            [ 3]  173 	pulh
   005F 56            [ 1]  174 	rorx
   0060 4B F8         [ 4]  175 	dbnza	00207$
   0062                     176 00208$:
   0062 9F            [ 1]  177 	txa
   0063 C4r00r0A      [ 4]  178 	and	_mbtowc_first_byte_65536_37
   0066 C7r00r0A      [ 4]  179 	sta	_mbtowc_first_byte_65536_37
   0069                     180 00107$:
                            181 ;../mbtowc.c:50: if(seqlen > 4 || n < seqlen)
   0069 B6*00         [ 3]  182 	lda	*_mbtowc_sloc0_1_0
   006B A1 04         [ 2]  183 	cmp	#0x04
   006D 22 08         [ 3]  184 	bhi	00108$
   006F BE*00         [ 3]  185 	ldx	*_mbtowc_sloc0_1_0
   0071 8C            [ 1]  186 	clrh
   0072 3Er00r02      [ 6]  187 	cphx	_mbtowc_PARM_3
   0075 23 04         [ 3]  188 	bls	00136$
   0077                     189 00108$:
                            190 ;../mbtowc.c:51: return(-1);
   0077 A6 FF         [ 2]  191 	lda	#0xff
   0079 97            [ 1]  192 	tax
   007A 81            [ 6]  193 	rts
                            194 ;../mbtowc.c:53: for(i = 1; i < seqlen; i++)
   007B                     195 00136$:
   007B A6 01         [ 2]  196 	lda	#0x01
   007D                     197 00121$:
   007D B1*00         [ 3]  198 	cmp	*_mbtowc_sloc0_1_0
   007F 24 1E         [ 3]  199 	bcc	00113$
                            200 ;../mbtowc.c:54: if((s[i] & 0xc0) != 0x80)
   0081 87            [ 2]  201 	psha
   0082 BB*02         [ 3]  202 	add	*(_mbtowc_sloc1_1_0 + 1)
   0084 97            [ 1]  203 	tax
   0085 4F            [ 1]  204 	clra
   0086 B9*01         [ 3]  205 	adc	*_mbtowc_sloc1_1_0
   0088 87            [ 2]  206 	psha
   0089 8A            [ 3]  207 	pulh
   008A 86            [ 3]  208 	pula
   008B FE            [ 3]  209 	ldx	,x
   008C 8C            [ 1]  210 	clrh
   008D 87            [ 2]  211 	psha
   008E 9F            [ 1]  212 	txa
   008F A4 C0         [ 2]  213 	and	#0xc0
   0091 97            [ 1]  214 	tax
   0092 86            [ 3]  215 	pula
   0093 65 00 80      [ 3]  216 	cphx	#0x0080
   0096 27 04         [ 3]  217 	beq	00122$
                            218 ;../mbtowc.c:55: return(-1);
   0098 A6 FF         [ 2]  219 	lda	#0xff
   009A 97            [ 1]  220 	tax
   009B 81            [ 6]  221 	rts
   009C                     222 00122$:
                            223 ;../mbtowc.c:53: for(i = 1; i < seqlen; i++)
   009C 4C            [ 1]  224 	inca
   009D 20 DE         [ 3]  225 	bra	00121$
   009F                     226 00113$:
                            227 ;../mbtowc.c:57: codepoint = first_byte;
   009F C6r00r0A      [ 4]  228 	lda	_mbtowc_first_byte_65536_37
   00A2 C7r00r09      [ 4]  229 	sta	(_mbtowc_codepoint_65536_37 + 3)
   00A5 4F            [ 1]  230 	clra
   00A6 C7r00r08      [ 4]  231 	sta	(_mbtowc_codepoint_65536_37 + 2)
   00A9 C7r00r07      [ 4]  232 	sta	(_mbtowc_codepoint_65536_37 + 1)
   00AC C7r00r06      [ 4]  233 	sta	_mbtowc_codepoint_65536_37
                            234 ;../mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
   00AF 55*01         [ 4]  235 	ldhx	*_mbtowc_sloc1_1_0
   00B1 AF 01         [ 2]  236 	aix	#1
   00B3 96r00r00      [ 5]  237 	sthx	_mbtowc_PARM_2
   00B6 B6*00         [ 3]  238 	lda	*_mbtowc_sloc0_1_0
   00B8 A0 01         [ 2]  239 	sub	#0x01
   00BA B7*05         [ 3]  240 	sta	*_mbtowc_sloc3_1_0
   00BC 32r00r00      [ 5]  241 	ldhx	_mbtowc_PARM_2
   00BF 35*03         [ 4]  242 	sthx	*_mbtowc_sloc2_1_0
   00C1                     243 00124$:
   00C1 3D*05         [ 4]  244 	tst	*_mbtowc_sloc3_1_0
   00C3 27 78         [ 3]  245 	beq	00114$
                            246 ;../mbtowc.c:61: codepoint <<= 6;
   00C5 C6r00r07      [ 4]  247 	lda	(_mbtowc_codepoint_65536_37 + 1)
   00C8 CEr00r06      [ 4]  248 	ldx	_mbtowc_codepoint_65536_37
   00CB 48            [ 1]  249 	lsla
   00CC 59            [ 1]  250 	rolx
   00CD 48            [ 1]  251 	lsla
   00CE 59            [ 1]  252 	rolx
   00CF 48            [ 1]  253 	lsla
   00D0 59            [ 1]  254 	rolx
   00D1 48            [ 1]  255 	lsla
   00D2 59            [ 1]  256 	rolx
   00D3 48            [ 1]  257 	lsla
   00D4 59            [ 1]  258 	rolx
   00D5 48            [ 1]  259 	lsla
   00D6 59            [ 1]  260 	rolx
   00D7 C7r00r07      [ 4]  261 	sta	(_mbtowc_codepoint_65536_37 + 1)
   00DA CFr00r06      [ 4]  262 	stx	_mbtowc_codepoint_65536_37
   00DD C6r00r08      [ 4]  263 	lda	(_mbtowc_codepoint_65536_37 + 2)
   00E0 44            [ 1]  264 	lsra	
   00E1 44            [ 1]  265 	lsra	
   00E2 CAr00r07      [ 4]  266 	ora	(_mbtowc_codepoint_65536_37 + 1)
   00E5 C7r00r07      [ 4]  267 	sta	(_mbtowc_codepoint_65536_37 + 1)
   00E8 C6r00r09      [ 4]  268 	lda	(_mbtowc_codepoint_65536_37 + 3)
   00EB CEr00r08      [ 4]  269 	ldx	(_mbtowc_codepoint_65536_37 + 2)
   00EE 48            [ 1]  270 	lsla
   00EF 59            [ 1]  271 	rolx
   00F0 48            [ 1]  272 	lsla
   00F1 59            [ 1]  273 	rolx
   00F2 48            [ 1]  274 	lsla
   00F3 59            [ 1]  275 	rolx
   00F4 48            [ 1]  276 	lsla
   00F5 59            [ 1]  277 	rolx
   00F6 48            [ 1]  278 	lsla
   00F7 59            [ 1]  279 	rolx
   00F8 48            [ 1]  280 	lsla
   00F9 59            [ 1]  281 	rolx
   00FA C7r00r09      [ 4]  282 	sta	(_mbtowc_codepoint_65536_37 + 3)
   00FD CFr00r08      [ 4]  283 	stx	(_mbtowc_codepoint_65536_37 + 2)
                            284 ;../mbtowc.c:62: codepoint |= (*s & 0x3f);
   0100 55*03         [ 4]  285 	ldhx	*_mbtowc_sloc2_1_0
   0102 F6            [ 3]  286 	lda	,x
   0103 AF 01         [ 2]  287 	aix	#1
   0105 35*03         [ 4]  288 	sthx	*_mbtowc_sloc2_1_0
   0107 5F            [ 1]  289 	clrx
   0108 A4 3F         [ 2]  290 	and	#0x3f
   010A 87            [ 2]  291 	psha
   010B 86            [ 3]  292 	pula
   010C B7*0A         [ 3]  293 	sta	*(_mbtowc_sloc4_1_0 + 3)
   010E 9F            [ 1]  294 	txa
   010F B7*09         [ 3]  295 	sta	*(_mbtowc_sloc4_1_0 + 2)
   0111 49            [ 1]  296 	rola	
   0112 4F            [ 1]  297 	clra	
   0113 A2 00         [ 2]  298 	sbc	#0x00
   0115 B7*08         [ 3]  299 	sta	*(_mbtowc_sloc4_1_0 + 1)
   0117 B7*07         [ 3]  300 	sta	*_mbtowc_sloc4_1_0
   0119 C6r00r09      [ 4]  301 	lda	(_mbtowc_codepoint_65536_37 + 3)
   011C BA*0A         [ 3]  302 	ora	*(_mbtowc_sloc4_1_0 + 3)
   011E C7r00r09      [ 4]  303 	sta	(_mbtowc_codepoint_65536_37 + 3)
   0121 C6r00r08      [ 4]  304 	lda	(_mbtowc_codepoint_65536_37 + 2)
   0124 BA*09         [ 3]  305 	ora	*(_mbtowc_sloc4_1_0 + 2)
   0126 C7r00r08      [ 4]  306 	sta	(_mbtowc_codepoint_65536_37 + 2)
   0129 C6r00r07      [ 4]  307 	lda	(_mbtowc_codepoint_65536_37 + 1)
   012C BA*08         [ 3]  308 	ora	*(_mbtowc_sloc4_1_0 + 1)
   012E C7r00r07      [ 4]  309 	sta	(_mbtowc_codepoint_65536_37 + 1)
   0131 C6r00r06      [ 4]  310 	lda	_mbtowc_codepoint_65536_37
   0134 BA*07         [ 3]  311 	ora	*_mbtowc_sloc4_1_0
   0136 C7r00r06      [ 4]  312 	sta	_mbtowc_codepoint_65536_37
                            313 ;../mbtowc.c:63: s++;
                            314 ;../mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
   0139 3A*05         [ 5]  315 	dec	*_mbtowc_sloc3_1_0
   013B 20 84         [ 3]  316 	bra	00124$
   013D                     317 00114$:
                            318 ;../mbtowc.c:66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
   013D C6r00r08      [ 4]  319 	lda	(_mbtowc_codepoint_65536_37 + 2)
   0140 A0 D8         [ 2]  320 	sub	#0xd8
   0142 C6r00r07      [ 4]  321 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0145 A2 00         [ 2]  322 	sbc	#0x00
   0147 C6r00r06      [ 4]  323 	lda	_mbtowc_codepoint_65536_37
   014A A2 00         [ 2]  324 	sbc	#0x00
   014C 25 18         [ 3]  325 	bcs	00116$
   014E A6 FF         [ 2]  326 	lda	#0xff
   0150 C0r00r09      [ 4]  327 	sub	(_mbtowc_codepoint_65536_37 + 3)
   0153 A6 DF         [ 2]  328 	lda	#0xdf
   0155 C2r00r08      [ 4]  329 	sbc	(_mbtowc_codepoint_65536_37 + 2)
   0158 4F            [ 1]  330 	clra
   0159 C2r00r07      [ 4]  331 	sbc	(_mbtowc_codepoint_65536_37 + 1)
   015C 4F            [ 1]  332 	clra
   015D C2r00r06      [ 4]  333 	sbc	_mbtowc_codepoint_65536_37
   0160 25 04         [ 3]  334 	bcs	00116$
                            335 ;../mbtowc.c:67: return(-1);
   0162 A6 FF         [ 2]  336 	lda	#0xff
   0164 97            [ 1]  337 	tax
   0165 81            [ 6]  338 	rts
   0166                     339 00116$:
                            340 ;../mbtowc.c:69: if(pwc)
   0166 C6r00r04      [ 4]  341 	lda	_mbtowc_pwc_65536_36
   0169 CAr00r05      [ 4]  342 	ora	(_mbtowc_pwc_65536_36 + 1)
   016C 27 16         [ 3]  343 	beq	00119$
                            344 ;../mbtowc.c:70: *pwc = codepoint;
   016E 32r00r04      [ 5]  345 	ldhx	_mbtowc_pwc_65536_36
   0171 C6r00r06      [ 4]  346 	lda	_mbtowc_codepoint_65536_37
   0174 F7            [ 2]  347 	sta	,x
   0175 C6r00r07      [ 4]  348 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0178 E7 01         [ 3]  349 	sta	1,x
   017A C6r00r08      [ 4]  350 	lda	(_mbtowc_codepoint_65536_37 + 2)
   017D E7 02         [ 3]  351 	sta	2,x
   017F C6r00r09      [ 4]  352 	lda	(_mbtowc_codepoint_65536_37 + 3)
   0182 E7 03         [ 3]  353 	sta	3,x
   0184                     354 00119$:
                            355 ;../mbtowc.c:71: return(codepoint ? seqlen : 0);
   0184 C6r00r06      [ 4]  356 	lda	_mbtowc_codepoint_65536_37
   0187 CAr00r07      [ 4]  357 	ora	(_mbtowc_codepoint_65536_37 + 1)
   018A CAr00r08      [ 4]  358 	ora	(_mbtowc_codepoint_65536_37 + 2)
   018D CAr00r09      [ 4]  359 	ora	(_mbtowc_codepoint_65536_37 + 3)
   0190 27 04         [ 3]  360 	beq	00128$
   0192 B6*00         [ 3]  361 	lda	*_mbtowc_sloc0_1_0
   0194 5F            [ 1]  362 	clrx
   0195 81            [ 6]  363 	rts
   0196                     364 00128$:
   0196 5F            [ 1]  365 	clrx
   0197 9F            [ 1]  366 	txa
                            367 ;../mbtowc.c:72: }
   0198 81            [ 6]  368 	rts
                            369 	.area CSEG    (CODE)
                            370 	.area CONST   (CODE)
                            371 	.area XINIT   (CODE)
                            372 	.area CABS    (ABS,CODE)
