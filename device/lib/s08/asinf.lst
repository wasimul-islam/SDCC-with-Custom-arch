                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module asinf
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _asincosf
                             24 	.globl _asinf
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; initialized external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area HOME    (CODE)
                             53 	.area GSINIT  (CODE)
                             54 	.area GSFINAL (CODE)
                             55 	.area GSINIT  (CODE)
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area HOME    (CODE)
                             60 	.area HOME    (CODE)
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area CSEG    (CODE)
                             65 ;------------------------------------------------------------
                             66 ;Allocation info for local variables in function 'asinf'
                             67 ;------------------------------------------------------------
                             68 ;x                         Allocated to stack - sp +7
                             69 ;sloc0                     Allocated to stack - sp +1
                             70 ;------------------------------------------------------------
                             71 ;../asinf.c:36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             72 ;	-----------------------------------------
                             73 ;	 function asinf
                             74 ;	-----------------------------------------
                             75 ;	Register assignment is optimal.
                             76 ;	Stack space usage: 4 bytes.
   0000                      77 _asinf:
   0000 A7 FC         [ 2]   78 	ais	#-4
                             79 ;../asinf.c:38: if (x == 1.0) return  HALF_PI;
   0002 95            [ 2]   80 	tsx
   0003 E6 06         [ 3]   81 	lda	6,x
   0005 C7r00r00      [ 4]   82 	sta	___fseq_PARM_1
   0008 E6 07         [ 3]   83 	lda	7,x
   000A C7r00r01      [ 4]   84 	sta	(___fseq_PARM_1 + 1)
   000D E6 08         [ 3]   85 	lda	8,x
   000F C7r00r02      [ 4]   86 	sta	(___fseq_PARM_1 + 2)
   0012 E6 09         [ 3]   87 	lda	9,x
   0014 C7r00r03      [ 4]   88 	sta	(___fseq_PARM_1 + 3)
   0017 45 3F 80      [ 3]   89 	ldhx	#0x3f80
   001A 96r00r00      [ 5]   90 	sthx	___fseq_PARM_2
   001D 8C            [ 1]   91 	clrh
   001E 5F            [ 1]   92 	clrx
   001F 96r00r02      [ 5]   93 	sthx	(___fseq_PARM_2 + 2)
   0022 CDr00r00      [ 6]   94 	jsr	___fseq
   0025 4D            [ 1]   95 	tsta
   0026 27 0D         [ 3]   96 	beq	00108$
   0028 A6 DB         [ 2]   97 	lda	#0xdb
   002A AE 0F         [ 2]   98 	ldx	#0x0f
   002C 6E C9*00      [ 4]   99 	mov	#0xc9,*___SDCC_hc08_ret2
   002F 6E 3F*00      [ 4]  100 	mov	#0x3f,*___SDCC_hc08_ret3
   0032 CCr00rB5      [ 4]  101 	jmp	00110$
   0035                     102 00108$:
                            103 ;../asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   0035 95            [ 2]  104 	tsx
   0036 E6 06         [ 3]  105 	lda	6,x
   0038 C7r00r00      [ 4]  106 	sta	___fseq_PARM_1
   003B E6 07         [ 3]  107 	lda	7,x
   003D C7r00r01      [ 4]  108 	sta	(___fseq_PARM_1 + 1)
   0040 E6 08         [ 3]  109 	lda	8,x
   0042 C7r00r02      [ 4]  110 	sta	(___fseq_PARM_1 + 2)
   0045 E6 09         [ 3]  111 	lda	9,x
   0047 C7r00r03      [ 4]  112 	sta	(___fseq_PARM_1 + 3)
   004A 45 BF 80      [ 3]  113 	ldhx	#0xbf80
   004D 96r00r00      [ 5]  114 	sthx	___fseq_PARM_2
   0050 8C            [ 1]  115 	clrh
   0051 5F            [ 1]  116 	clrx
   0052 96r00r02      [ 5]  117 	sthx	(___fseq_PARM_2 + 2)
   0055 CDr00r00      [ 6]  118 	jsr	___fseq
   0058 4D            [ 1]  119 	tsta
   0059 27 0C         [ 3]  120 	beq	00105$
   005B A6 DB         [ 2]  121 	lda	#0xdb
   005D AE 0F         [ 2]  122 	ldx	#0x0f
   005F 6E C9*00      [ 4]  123 	mov	#0xc9,*___SDCC_hc08_ret2
   0062 6E BF*00      [ 4]  124 	mov	#0xbf,*___SDCC_hc08_ret3
   0065 20 4E         [ 3]  125 	bra	00110$
   0067                     126 00105$:
                            127 ;../asinf.c:40: else if (x == 0.0) return 0.0;
   0067 95            [ 2]  128 	tsx
   0068 E6 06         [ 3]  129 	lda	6,x
   006A A4 7F         [ 2]  130 	and	#0x7F
   006C EA 07         [ 3]  131 	ora	7,x
   006E EA 08         [ 3]  132 	ora	8,x
   0070 EA 09         [ 3]  133 	ora	9,x
   0072 26 08         [ 3]  134 	bne	00102$
   0074 4F            [ 1]  135 	clra
   0075 97            [ 1]  136 	tax
   0076 B7*00         [ 3]  137 	sta	*___SDCC_hc08_ret2
   0078 B7*00         [ 3]  138 	sta	*___SDCC_hc08_ret3
   007A 20 39         [ 3]  139 	bra	00110$
   007C                     140 00102$:
                            141 ;../asinf.c:41: else               return asincosf(x, false);
   007C 95            [ 2]  142 	tsx
   007D E6 06         [ 3]  143 	lda	6,x
   007F C7r00r00      [ 4]  144 	sta	_asincosf_PARM_1
   0082 E6 07         [ 3]  145 	lda	7,x
   0084 C7r00r01      [ 4]  146 	sta	(_asincosf_PARM_1 + 1)
   0087 E6 08         [ 3]  147 	lda	8,x
   0089 C7r00r02      [ 4]  148 	sta	(_asincosf_PARM_1 + 2)
   008C E6 09         [ 3]  149 	lda	9,x
   008E C7r00r03      [ 4]  150 	sta	(_asincosf_PARM_1 + 3)
   0091 4F            [ 1]  151 	clra
   0092 C7r00r00      [ 4]  152 	sta	_asincosf_PARM_2
   0095 CDr00r00      [ 6]  153 	jsr	_asincosf
   0098 9E E7 04      [ 4]  154 	sta	4,s
   009B 9E EF 03      [ 4]  155 	stx	3,s
   009E B6*00         [ 3]  156 	lda	*___SDCC_hc08_ret2
   00A0 9E E7 02      [ 4]  157 	sta	2,s
   00A3 B6*00         [ 3]  158 	lda	*___SDCC_hc08_ret3
   00A5 9E E7 01      [ 4]  159 	sta	1,s
   00A8 95            [ 2]  160 	tsx
   00A9 F6            [ 3]  161 	lda	,x
   00AA B7*00         [ 3]  162 	sta	*___SDCC_hc08_ret3
   00AC E6 01         [ 3]  163 	lda	1,x
   00AE B7*00         [ 3]  164 	sta	*___SDCC_hc08_ret2
   00B0 EE 02         [ 3]  165 	ldx	2,x
   00B2 9E E6 04      [ 4]  166 	lda	4,s
   00B5                     167 00110$:
                            168 ;../asinf.c:42: }
   00B5 A7 04         [ 2]  169 	ais	#4
   00B7 81            [ 6]  170 	rts
                            171 	.area CSEG    (CODE)
                            172 	.area CONST   (CODE)
                            173 	.area XINIT   (CODE)
                            174 	.area CABS    (ABS,CODE)
