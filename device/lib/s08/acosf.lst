                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module acosf
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _asincosf
                             24 	.globl _acosf
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; initialized external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area HOME    (CODE)
                             53 	.area GSINIT  (CODE)
                             54 	.area GSFINAL (CODE)
                             55 	.area GSINIT  (CODE)
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area HOME    (CODE)
                             60 	.area HOME    (CODE)
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area CSEG    (CODE)
                             65 ;------------------------------------------------------------
                             66 ;Allocation info for local variables in function 'acosf'
                             67 ;------------------------------------------------------------
                             68 ;x                         Allocated to stack - sp +7
                             69 ;sloc0                     Allocated to stack - sp +1
                             70 ;------------------------------------------------------------
                             71 ;../acosf.c:36: float acosf(float x) _FLOAT_FUNC_REENTRANT
                             72 ;	-----------------------------------------
                             73 ;	 function acosf
                             74 ;	-----------------------------------------
                             75 ;	Register assignment is optimal.
                             76 ;	Stack space usage: 4 bytes.
   0000                      77 _acosf:
   0000 A7 FC         [ 2]   78 	ais	#-4
                             79 ;../acosf.c:38: if (x == 1.0) return 0.0;
   0002 95            [ 2]   80 	tsx
   0003 E6 06         [ 3]   81 	lda	6,x
   0005 C7r00r00      [ 4]   82 	sta	___fseq_PARM_1
   0008 E6 07         [ 3]   83 	lda	7,x
   000A C7r00r01      [ 4]   84 	sta	(___fseq_PARM_1 + 1)
   000D E6 08         [ 3]   85 	lda	8,x
   000F C7r00r02      [ 4]   86 	sta	(___fseq_PARM_1 + 2)
   0012 E6 09         [ 3]   87 	lda	9,x
   0014 C7r00r03      [ 4]   88 	sta	(___fseq_PARM_1 + 3)
   0017 45 3F 80      [ 3]   89 	ldhx	#0x3f80
   001A 96r00r00      [ 5]   90 	sthx	___fseq_PARM_2
   001D 8C            [ 1]   91 	clrh
   001E 5F            [ 1]   92 	clrx
   001F 96r00r02      [ 5]   93 	sthx	(___fseq_PARM_2 + 2)
   0022 CDr00r00      [ 6]   94 	jsr	___fseq
   0025 4D            [ 1]   95 	tsta
   0026 27 09         [ 3]   96 	beq	00108$
   0028 4F            [ 1]   97 	clra
   0029 97            [ 1]   98 	tax
   002A B7*00         [ 3]   99 	sta	*___SDCC_hc08_ret2
   002C B7*00         [ 3]  100 	sta	*___SDCC_hc08_ret3
   002E CCr00rB6      [ 4]  101 	jmp	00110$
   0031                     102 00108$:
                            103 ;../acosf.c:39: else if (x ==-1.0) return PI;
   0031 95            [ 2]  104 	tsx
   0032 E6 06         [ 3]  105 	lda	6,x
   0034 C7r00r00      [ 4]  106 	sta	___fseq_PARM_1
   0037 E6 07         [ 3]  107 	lda	7,x
   0039 C7r00r01      [ 4]  108 	sta	(___fseq_PARM_1 + 1)
   003C E6 08         [ 3]  109 	lda	8,x
   003E C7r00r02      [ 4]  110 	sta	(___fseq_PARM_1 + 2)
   0041 E6 09         [ 3]  111 	lda	9,x
   0043 C7r00r03      [ 4]  112 	sta	(___fseq_PARM_1 + 3)
   0046 45 BF 80      [ 3]  113 	ldhx	#0xbf80
   0049 96r00r00      [ 5]  114 	sthx	___fseq_PARM_2
   004C 8C            [ 1]  115 	clrh
   004D 5F            [ 1]  116 	clrx
   004E 96r00r02      [ 5]  117 	sthx	(___fseq_PARM_2 + 2)
   0051 CDr00r00      [ 6]  118 	jsr	___fseq
   0054 4D            [ 1]  119 	tsta
   0055 27 0C         [ 3]  120 	beq	00105$
   0057 A6 DB         [ 2]  121 	lda	#0xdb
   0059 AE 0F         [ 2]  122 	ldx	#0x0f
   005B 6E 49*00      [ 4]  123 	mov	#0x49,*___SDCC_hc08_ret2
   005E 6E 40*00      [ 4]  124 	mov	#0x40,*___SDCC_hc08_ret3
   0061 20 53         [ 3]  125 	bra	00110$
   0063                     126 00105$:
                            127 ;../acosf.c:40: else if (x == 0.0) return HALF_PI;
   0063 95            [ 2]  128 	tsx
   0064 E6 06         [ 3]  129 	lda	6,x
   0066 A4 7F         [ 2]  130 	and	#0x7F
   0068 EA 07         [ 3]  131 	ora	7,x
   006A EA 08         [ 3]  132 	ora	8,x
   006C EA 09         [ 3]  133 	ora	9,x
   006E 26 0C         [ 3]  134 	bne	00102$
   0070 A6 DB         [ 2]  135 	lda	#0xdb
   0072 AE 0F         [ 2]  136 	ldx	#0x0f
   0074 6E C9*00      [ 4]  137 	mov	#0xc9,*___SDCC_hc08_ret2
   0077 6E 3F*00      [ 4]  138 	mov	#0x3f,*___SDCC_hc08_ret3
   007A 20 3A         [ 3]  139 	bra	00110$
   007C                     140 00102$:
                            141 ;../acosf.c:41: else               return asincosf(x, true);
   007C 95            [ 2]  142 	tsx
   007D E6 06         [ 3]  143 	lda	6,x
   007F C7r00r00      [ 4]  144 	sta	_asincosf_PARM_1
   0082 E6 07         [ 3]  145 	lda	7,x
   0084 C7r00r01      [ 4]  146 	sta	(_asincosf_PARM_1 + 1)
   0087 E6 08         [ 3]  147 	lda	8,x
   0089 C7r00r02      [ 4]  148 	sta	(_asincosf_PARM_1 + 2)
   008C E6 09         [ 3]  149 	lda	9,x
   008E C7r00r03      [ 4]  150 	sta	(_asincosf_PARM_1 + 3)
   0091 A6 01         [ 2]  151 	lda	#0x01
   0093 C7r00r00      [ 4]  152 	sta	_asincosf_PARM_2
   0096 CDr00r00      [ 6]  153 	jsr	_asincosf
   0099 9E E7 04      [ 4]  154 	sta	4,s
   009C 9E EF 03      [ 4]  155 	stx	3,s
   009F B6*00         [ 3]  156 	lda	*___SDCC_hc08_ret2
   00A1 9E E7 02      [ 4]  157 	sta	2,s
   00A4 B6*00         [ 3]  158 	lda	*___SDCC_hc08_ret3
   00A6 9E E7 01      [ 4]  159 	sta	1,s
   00A9 95            [ 2]  160 	tsx
   00AA F6            [ 3]  161 	lda	,x
   00AB B7*00         [ 3]  162 	sta	*___SDCC_hc08_ret3
   00AD E6 01         [ 3]  163 	lda	1,x
   00AF B7*00         [ 3]  164 	sta	*___SDCC_hc08_ret2
   00B1 EE 02         [ 3]  165 	ldx	2,x
   00B3 9E E6 04      [ 4]  166 	lda	4,s
   00B6                     167 00110$:
                            168 ;../acosf.c:42: }
   00B6 A7 04         [ 2]  169 	ais	#4
   00B8 81            [ 6]  170 	rts
                            171 	.area CSEG    (CODE)
                            172 	.area CONST   (CODE)
                            173 	.area XINIT   (CODE)
                            174 	.area CABS    (ABS,CODE)
