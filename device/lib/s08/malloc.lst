                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module malloc
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl ___sdcc_heap_init
                             24 	.globl ___sdcc_heap_free
                             25 	.globl _malloc
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
   0000                      30 _malloc_sloc0_1_0:
   0000                      31 	.ds 2
   0002                      32 _malloc_sloc1_1_0:
   0002                      33 	.ds 2
   0004                      34 _malloc_sloc2_1_0:
   0004                      35 	.ds 2
                             36 ;--------------------------------------------------------
                             37 ; overlayable items in ram
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; absolute ram data
                             41 ;--------------------------------------------------------
                             42 	.area IABS    (ABS)
                             43 	.area IABS    (ABS)
                             44 ;--------------------------------------------------------
                             45 ; absolute external ram data
                             46 ;--------------------------------------------------------
                             47 	.area XABS    (ABS)
                             48 ;--------------------------------------------------------
                             49 ; initialized external ram data
                             50 ;--------------------------------------------------------
                             51 	.area XISEG
                             52 ;--------------------------------------------------------
                             53 ; extended address mode data
                             54 ;--------------------------------------------------------
                             55 	.area XSEG
   0000                      56 ___sdcc_heap_free::
   0000                      57 	.ds 2
   0002                      58 _malloc_size_65536_39:
   0002                      59 	.ds 2
   0004                      60 _malloc_h_65536_40:
   0004                      61 	.ds 2
   0006                      62 _malloc_f_65536_40:
   0006                      63 	.ds 2
   0008                      64 _malloc_blocksize_196608_42:
   0008                      65 	.ds 2
   000A                      66 _malloc_newheader_327680_44:
   000A                      67 	.ds 2
                             68 ;--------------------------------------------------------
                             69 ; global & static initialisations
                             70 ;--------------------------------------------------------
                             71 	.area HOME    (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area GSINIT  (CODE)
                             75 ;--------------------------------------------------------
                             76 ; Home
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area HOME    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; code
                             82 ;--------------------------------------------------------
                             83 	.area CSEG    (CODE)
                             84 ;------------------------------------------------------------
                             85 ;Allocation info for local variables in function '__sdcc_heap_init'
                             86 ;------------------------------------------------------------
                             87 ;../malloc.c:65: void __sdcc_heap_init(void)
                             88 ;	-----------------------------------------
                             89 ;	 function __sdcc_heap_init
                             90 ;	-----------------------------------------
                             91 ;	Register assignment is optimal.
                             92 ;	Stack space usage: 0 bytes.
   0000                      93 ___sdcc_heap_init:
                             94 ;../malloc.c:67: __sdcc_heap_free = HEAP_START;
   0000 45r00r00      [ 3]   95 	ldhx	#___sdcc_heap
   0003 96r00r00      [ 5]   96 	sthx	___sdcc_heap_free
                             97 ;../malloc.c:68: __sdcc_heap_free->next = HEAP_END;
   0006 32r00r00      [ 5]   98 	ldhx	___sdcc_heap_size
   0009 AF FF         [ 2]   99 	aix	#-1
   000B 9F            [ 1]  100 	txa
   000C ABr00         [ 2]  101 	add	#___sdcc_heap
   000E 97            [ 1]  102 	tax
   000F 8B            [ 2]  103 	pshh
   0010 86            [ 3]  104 	pula
   0011 A9s00         [ 2]  105 	adc	#>___sdcc_heap
   0013 87            [ 2]  106 	psha
   0014 8A            [ 3]  107 	pulh
   0015 96r00r00      [ 5]  108 	sthx	___sdcc_heap
                            109 ;../malloc.c:69: __sdcc_heap_free->next_free = 0;
   0018 32r00r00      [ 5]  110 	ldhx	___sdcc_heap_free
   001B 4F            [ 1]  111 	clra
   001C E7 02         [ 3]  112 	sta	2,x
   001E E7 03         [ 3]  113 	sta	3,x
                            114 ;../malloc.c:70: }
   0020 81            [ 6]  115 	rts
                            116 ;------------------------------------------------------------
                            117 ;Allocation info for local variables in function 'malloc'
                            118 ;------------------------------------------------------------
                            119 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                            120 ;sloc1                     Allocated with name '_malloc_sloc1_1_0'
                            121 ;sloc2                     Allocated with name '_malloc_sloc2_1_0'
                            122 ;size                      Allocated with name '_malloc_size_65536_39'
                            123 ;h                         Allocated with name '_malloc_h_65536_40'
                            124 ;f                         Allocated with name '_malloc_f_65536_40'
                            125 ;blocksize                 Allocated with name '_malloc_blocksize_196608_42'
                            126 ;newheader                 Allocated with name '_malloc_newheader_327680_44'
                            127 ;------------------------------------------------------------
                            128 ;../malloc.c:75: void *malloc(size_t size)
                            129 ;	-----------------------------------------
                            130 ;	 function malloc
                            131 ;	-----------------------------------------
                            132 ;	Register assignment is optimal.
                            133 ;	Stack space usage: 0 bytes.
   0021                     134 _malloc:
   0021 B7*01         [ 3]  135 	sta	*(_malloc_sloc0_1_0 + 1)
   0023 BF*00         [ 3]  136 	stx	*_malloc_sloc0_1_0
                            137 ;../malloc.c:82: if(!__sdcc_heap_free)
   0025 C6r00r00      [ 4]  138 	lda	___sdcc_heap_free
   0028 CAr00r01      [ 4]  139 	ora	(___sdcc_heap_free + 1)
   002B 26 03         [ 3]  140 	bne	00102$
                            141 ;../malloc.c:83: __sdcc_heap_init();
   002D CDr00r00      [ 6]  142 	jsr	___sdcc_heap_init
   0030                     143 00102$:
                            144 ;../malloc.c:86: if(!size || size + offsetof(struct header, next_free) < size)
   0030 B6*01         [ 3]  145 	lda	*(_malloc_sloc0_1_0 + 1)
   0032 BA*00         [ 3]  146 	ora	*_malloc_sloc0_1_0
   0034 27 08         [ 3]  147 	beq	00103$
   0036 55*00         [ 4]  148 	ldhx	*_malloc_sloc0_1_0
   0038 AF 02         [ 2]  149 	aix	#2
   003A 75*00         [ 5]  150 	cphx	*_malloc_sloc0_1_0
   003C 24 03         [ 3]  151 	bcc	00104$
   003E                     152 00103$:
                            153 ;../malloc.c:87: return(0);
   003E 4F            [ 1]  154 	clra
   003F 97            [ 1]  155 	tax
   0040 81            [ 6]  156 	rts
   0041                     157 00104$:
                            158 ;../malloc.c:88: size += offsetof(struct header, next_free);
   0041 96r00r02      [ 5]  159 	sthx	_malloc_size_65536_39
                            160 ;../malloc.c:89: if(size < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
   0044 C6r00r03      [ 4]  161 	lda	(_malloc_size_65536_39 + 1)
   0047 A0 04         [ 2]  162 	sub	#0x04
   0049 C6r00r02      [ 4]  163 	lda	_malloc_size_65536_39
   004C A2 00         [ 2]  164 	sbc	#0x00
   004E 24 06         [ 3]  165 	bcc	00107$
                            166 ;../malloc.c:90: size = sizeof(struct header);
   0050 45 00 04      [ 3]  167 	ldhx	#0x0004
   0053 96r00r02      [ 5]  168 	sthx	_malloc_size_65536_39
   0056                     169 00107$:
                            170 ;../malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   0056 32r00r00      [ 5]  171 	ldhx	___sdcc_heap_free
   0059 96r00r04      [ 5]  172 	sthx	_malloc_h_65536_40
   005C 45r00r00      [ 3]  173 	ldhx	#___sdcc_heap_free
   005F 96r00r06      [ 5]  174 	sthx	_malloc_f_65536_40
   0062                     175 00115$:
   0062 C6r00r04      [ 4]  176 	lda	_malloc_h_65536_40
   0065 CAr00r05      [ 4]  177 	ora	(_malloc_h_65536_40 + 1)
   0068 26 03         [ 3]  178 	bne	00158$
   006A CCr01r20      [ 4]  179 	jmp	00113$
   006D                     180 00158$:
                            181 ;../malloc.c:94: size_t blocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
   006D 32r00r04      [ 5]  182 	ldhx	_malloc_h_65536_40
   0070 F6            [ 3]  183 	lda	,x
   0071 B7*00         [ 3]  184 	sta	*_malloc_sloc0_1_0
   0073 E6 01         [ 3]  185 	lda	1,x
   0075 B7*01         [ 3]  186 	sta	*(_malloc_sloc0_1_0 + 1)
   0077 B6*01         [ 3]  187 	lda	*(_malloc_sloc0_1_0 + 1)
   0079 BE*00         [ 3]  188 	ldx	*_malloc_sloc0_1_0
   007B 87            [ 2]  189 	psha
   007C C6r00r05      [ 4]  190 	lda	(_malloc_h_65536_40 + 1)
   007F B7*03         [ 3]  191 	sta	*(_malloc_sloc1_1_0 + 1)
   0081 C6r00r04      [ 4]  192 	lda	_malloc_h_65536_40
   0084 B7*02         [ 3]  193 	sta	*_malloc_sloc1_1_0
   0086 86            [ 3]  194 	pula
   0087 B0*03         [ 3]  195 	sub	*(_malloc_sloc1_1_0 + 1)
   0089 C7r00r09      [ 4]  196 	sta	(_malloc_blocksize_196608_42 + 1)
   008C 9F            [ 1]  197 	txa
   008D B2*02         [ 3]  198 	sbc	*_malloc_sloc1_1_0
   008F C7r00r08      [ 4]  199 	sta	_malloc_blocksize_196608_42
                            200 ;../malloc.c:101: newheader->next_free = h->next_free;
   0092 32r00r04      [ 5]  201 	ldhx	_malloc_h_65536_40
   0095 AF 02         [ 2]  202 	aix	#2
   0097 35*04         [ 4]  203 	sthx	*_malloc_sloc2_1_0
                            204 ;../malloc.c:95: if(blocksize >= size) // Found free block of sufficient size.
   0099 C6r00r09      [ 4]  205 	lda	(_malloc_blocksize_196608_42 + 1)
   009C C0r00r03      [ 4]  206 	sub	(_malloc_size_65536_39 + 1)
   009F C6r00r08      [ 4]  207 	lda	_malloc_blocksize_196608_42
   00A2 C2r00r02      [ 4]  208 	sbc	_malloc_size_65536_39
   00A5 25 65         [ 3]  209 	bcs	00116$
                            210 ;../malloc.c:97: if(blocksize >= size + sizeof(struct header)) // It is worth creating a new free block
   00A7 32r00r02      [ 5]  211 	ldhx	_malloc_size_65536_39
   00AA AF 04         [ 2]  212 	aix	#4
   00AC 3Er00r08      [ 6]  213 	cphx	_malloc_blocksize_196608_42
   00AF 22 49         [ 3]  214 	bhi	00109$
                            215 ;../malloc.c:99: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + size);
   00B1 B6*03         [ 3]  216 	lda	*(_malloc_sloc1_1_0 + 1)
   00B3 CBr00r03      [ 4]  217 	add	(_malloc_size_65536_39 + 1)
   00B6 87            [ 2]  218 	psha
   00B7 B6*02         [ 3]  219 	lda	*_malloc_sloc1_1_0
   00B9 C9r00r02      [ 4]  220 	adc	_malloc_size_65536_39
   00BC 97            [ 1]  221 	tax
   00BD 86            [ 3]  222 	pula
   00BE C7r00r0B      [ 4]  223 	sta	(_malloc_newheader_327680_44 + 1)
   00C1 CFr00r0A      [ 4]  224 	stx	_malloc_newheader_327680_44
                            225 ;../malloc.c:100: newheader->next = h->next;
   00C4 32r00r0A      [ 5]  226 	ldhx	_malloc_newheader_327680_44
   00C7 B6*00         [ 3]  227 	lda	*_malloc_sloc0_1_0
   00C9 F7            [ 2]  228 	sta	,x
   00CA B6*01         [ 3]  229 	lda	*(_malloc_sloc0_1_0 + 1)
   00CC E7 01         [ 3]  230 	sta	1,x
                            231 ;../malloc.c:101: newheader->next_free = h->next_free;
   00CE 32r00r0A      [ 5]  232 	ldhx	_malloc_newheader_327680_44
   00D1 35*02         [ 4]  233 	sthx	*_malloc_sloc1_1_0
   00D3 55*04         [ 4]  234 	ldhx	*_malloc_sloc2_1_0
   00D5 9E AE         [ 5]  235 	ldhx	,x
   00D7 9F            [ 1]  236 	txa
   00D8 8B            [ 2]  237 	pshh
   00D9 55*02         [ 4]  238 	ldhx	*_malloc_sloc1_1_0
   00DB E7 03         [ 3]  239 	sta	3,x
   00DD 86            [ 3]  240 	pula
   00DE E7 02         [ 3]  241 	sta	2,x
                            242 ;../malloc.c:102: *f = newheader;
   00E0 32r00r06      [ 5]  243 	ldhx	_malloc_f_65536_40
   00E3 C6r00r0A      [ 4]  244 	lda	_malloc_newheader_327680_44
   00E6 F7            [ 2]  245 	sta	,x
   00E7 C6r00r0B      [ 4]  246 	lda	(_malloc_newheader_327680_44 + 1)
   00EA E7 01         [ 3]  247 	sta	1,x
                            248 ;../malloc.c:103: h->next = newheader;
   00EC 32r00r04      [ 5]  249 	ldhx	_malloc_h_65536_40
   00EF C6r00r0A      [ 4]  250 	lda	_malloc_newheader_327680_44
   00F2 F7            [ 2]  251 	sta	,x
   00F3 C6r00r0B      [ 4]  252 	lda	(_malloc_newheader_327680_44 + 1)
   00F6 E7 01         [ 3]  253 	sta	1,x
   00F8 20 0D         [ 3]  254 	bra	00110$
   00FA                     255 00109$:
                            256 ;../malloc.c:106: *f = h->next_free;
   00FA 55*04         [ 4]  257 	ldhx	*_malloc_sloc2_1_0
   00FC 9E AE         [ 5]  258 	ldhx	,x
   00FE 9F            [ 1]  259 	txa
   00FF 8B            [ 2]  260 	pshh
   0100 32r00r06      [ 5]  261 	ldhx	_malloc_f_65536_40
   0103 E7 01         [ 3]  262 	sta	1,x
   0105 86            [ 3]  263 	pula
   0106 F7            [ 2]  264 	sta	,x
   0107                     265 00110$:
                            266 ;../malloc.c:108: return(&(h->next_free));
   0107 B6*05         [ 3]  267 	lda	*(_malloc_sloc2_1_0 + 1)
   0109 BE*04         [ 3]  268 	ldx	*_malloc_sloc2_1_0
   010B 81            [ 6]  269 	rts
   010C                     270 00116$:
                            271 ;../malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   010C B6*04         [ 3]  272 	lda	*_malloc_sloc2_1_0
   010E C7r00r06      [ 4]  273 	sta	_malloc_f_65536_40
   0111 B6*05         [ 3]  274 	lda	*(_malloc_sloc2_1_0 + 1)
   0113 C7r00r07      [ 4]  275 	sta	(_malloc_f_65536_40 + 1)
   0116 55*04         [ 4]  276 	ldhx	*_malloc_sloc2_1_0
   0118 9E AE         [ 5]  277 	ldhx	,x
   011A 96r00r04      [ 5]  278 	sthx	_malloc_h_65536_40
   011D CCr00r62      [ 4]  279 	jmp	00115$
   0120                     280 00113$:
                            281 ;../malloc.c:112: return(0);
   0120 4F            [ 1]  282 	clra
   0121 97            [ 1]  283 	tax
                            284 ;../malloc.c:113: }
   0122 81            [ 6]  285 	rts
                            286 	.area CSEG    (CODE)
                            287 	.area CONST   (CODE)
                            288 	.area XINIT   (CODE)
                            289 	.area CABS    (ABS,CODE)
