                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module __stdc_bit_widthull
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl ___stdc_bit_widthull_PARM_1
                             24 	.globl ___stdc_bit_widthull
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
   0000                      29 ___stdc_bit_widthull_sloc0_1_0:
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; overlayable items in ram
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; absolute ram data
                             36 ;--------------------------------------------------------
                             37 	.area IABS    (ABS)
                             38 	.area IABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area XABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; initialized external ram data
                             45 ;--------------------------------------------------------
                             46 	.area XISEG
                             47 ;--------------------------------------------------------
                             48 ; extended address mode data
                             49 ;--------------------------------------------------------
                             50 	.area XSEG
   0000                      51 ___stdc_bit_widthull_PARM_1:
   0000                      52 	.ds 8
   0008                      53 ___stdc_bit_widthull_width_65536_10:
   0008                      54 	.ds 1
                             55 ;--------------------------------------------------------
                             56 ; global & static initialisations
                             57 ;--------------------------------------------------------
                             58 	.area HOME    (CODE)
                             59 	.area GSINIT  (CODE)
                             60 	.area GSFINAL (CODE)
                             61 	.area GSINIT  (CODE)
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area HOME    (CODE)
                             66 	.area HOME    (CODE)
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area CSEG    (CODE)
                             71 ;------------------------------------------------------------
                             72 ;Allocation info for local variables in function '__stdc_bit_widthull'
                             73 ;------------------------------------------------------------
                             74 ;sloc0                     Allocated with name '___stdc_bit_widthull_sloc0_1_0'
                             75 ;value                     Allocated with name '___stdc_bit_widthull_PARM_1'
                             76 ;width                     Allocated with name '___stdc_bit_widthull_width_65536_10'
                             77 ;i                         Allocated to registers 
                             78 ;------------------------------------------------------------
                             79 ;../__stdc_bit_widthull.c:37: int_fast8_t __stdc_bit_widthull(unsigned long long value)
                             80 ;	-----------------------------------------
                             81 ;	 function __stdc_bit_widthull
                             82 ;	-----------------------------------------
                             83 ;	Register assignment is optimal.
                             84 ;	Stack space usage: 0 bytes.
   0000                      85 ___stdc_bit_widthull:
                             86 ;../__stdc_bit_widthull.c:39: int_fast8_t width = 0;
   0000 4F            [ 1]   87 	clra
   0001 C7r00r08      [ 4]   88 	sta	___stdc_bit_widthull_width_65536_10
                             89 ;../__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
   0004                      90 00105$:
   0004 A1 40         [ 2]   91 	cmp	#0x40
   0006 24 6E         [ 3]   92 	bcc	00103$
                             93 ;../__stdc_bit_widthull.c:41: if(value & (1ull << i))
   0008 8C            [ 1]   94 	clrh
   0009 5F            [ 1]   95 	clrx
   000A 96r00r00      [ 5]   96 	sthx	__rlulonglong_PARM_1
   000D 96r00r02      [ 5]   97 	sthx	(__rlulonglong_PARM_1 + 2)
   0010 96r00r04      [ 5]   98 	sthx	(__rlulonglong_PARM_1 + 4)
   0013 5C            [ 1]   99 	incx
   0014 96r00r06      [ 5]  100 	sthx	(__rlulonglong_PARM_1 + 6)
   0017 C7r00r00      [ 4]  101 	sta	__rlulonglong_PARM_2
   001A 87            [ 2]  102 	psha
   001B CDr00r00      [ 6]  103 	jsr	__rlulonglong
   001E B7*07         [ 3]  104 	sta	*(___stdc_bit_widthull_sloc0_1_0 + 7)
   0020 BF*06         [ 3]  105 	stx	*(___stdc_bit_widthull_sloc0_1_0 + 6)
   0022 4E*00*05      [ 6]  106 	mov	*___SDCC_hc08_ret2,*(___stdc_bit_widthull_sloc0_1_0 + 5)
   0025 4E*00*04      [ 6]  107 	mov	*___SDCC_hc08_ret3,*(___stdc_bit_widthull_sloc0_1_0 + 4)
   0028 4E*00*03      [ 6]  108 	mov	*___SDCC_hc08_ret4,*(___stdc_bit_widthull_sloc0_1_0 + 3)
   002B 4E*00*02      [ 6]  109 	mov	*___SDCC_hc08_ret5,*(___stdc_bit_widthull_sloc0_1_0 + 2)
   002E 4E*00*01      [ 6]  110 	mov	*___SDCC_hc08_ret6,*(___stdc_bit_widthull_sloc0_1_0 + 1)
   0031 4E*00*00      [ 6]  111 	mov	*___SDCC_hc08_ret7,*___stdc_bit_widthull_sloc0_1_0
   0034 C6r00r07      [ 4]  112 	lda	(___stdc_bit_widthull_PARM_1 + 7)
   0037 B5*07         [ 3]  113 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 7)
   0039 26 2F         [ 3]  114 	bne	00126$
   003B C6r00r06      [ 4]  115 	lda	(___stdc_bit_widthull_PARM_1 + 6)
   003E B5*06         [ 3]  116 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 6)
   0040 26 28         [ 3]  117 	bne	00126$
   0042 C6r00r05      [ 4]  118 	lda	(___stdc_bit_widthull_PARM_1 + 5)
   0045 B5*05         [ 3]  119 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 5)
   0047 26 21         [ 3]  120 	bne	00126$
   0049 C6r00r04      [ 4]  121 	lda	(___stdc_bit_widthull_PARM_1 + 4)
   004C B5*04         [ 3]  122 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 4)
   004E 26 1A         [ 3]  123 	bne	00126$
   0050 C6r00r03      [ 4]  124 	lda	(___stdc_bit_widthull_PARM_1 + 3)
   0053 B5*03         [ 3]  125 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 3)
   0055 26 13         [ 3]  126 	bne	00126$
   0057 C6r00r02      [ 4]  127 	lda	(___stdc_bit_widthull_PARM_1 + 2)
   005A B5*02         [ 3]  128 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 2)
   005C 26 0C         [ 3]  129 	bne	00126$
   005E C6r00r01      [ 4]  130 	lda	(___stdc_bit_widthull_PARM_1 + 1)
   0061 B5*01         [ 3]  131 	bit	*(___stdc_bit_widthull_sloc0_1_0 + 1)
   0063 26 05         [ 3]  132 	bne	00126$
   0065 C6r00r00      [ 4]  133 	lda	___stdc_bit_widthull_PARM_1
   0068 B5*00         [ 3]  134 	bit	*___stdc_bit_widthull_sloc0_1_0
   006A                     135 00126$:
   006A 86            [ 3]  136 	pula
   006B 27 06         [ 3]  137 	beq	00106$
                            138 ;../__stdc_bit_widthull.c:42: width = (i + 1);
   006D 97            [ 1]  139 	tax
   006E AF 01         [ 2]  140 	aix	#1
   0070 CFr00r08      [ 4]  141 	stx	___stdc_bit_widthull_width_65536_10
   0073                     142 00106$:
                            143 ;../__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
   0073 4C            [ 1]  144 	inca
   0074 20 8E         [ 3]  145 	bra	00105$
   0076                     146 00103$:
                            147 ;../__stdc_bit_widthull.c:43: return width;
   0076 C6r00r08      [ 4]  148 	lda	___stdc_bit_widthull_width_65536_10
                            149 ;../__stdc_bit_widthull.c:44: }
   0079 81            [ 6]  150 	rts
                            151 	.area CSEG    (CODE)
                            152 	.area CONST   (CODE)
                            153 	.area XINIT   (CODE)
                            154 	.area CABS    (ABS,CODE)
