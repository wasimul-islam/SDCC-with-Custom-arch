                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module mbstoc16s
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _mbtowc
                             24 	.globl ___mbstoc16s_PARM_3
                             25 	.globl ___mbstoc16s_PARM_2
                             26 	.globl ___mbstoc16s
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area DSEG    (PAG)
   0000                      31 ___mbstoc16s_sloc0_1_0:
   0000                      32 	.ds 2
   0002                      33 ___mbstoc16s_sloc1_1_0:
   0002                      34 	.ds 2
   0004                      35 ___mbstoc16s_sloc2_1_0:
   0004                      36 	.ds 2
   0006                      37 ___mbstoc16s_sloc3_1_0:
   0006                      38 	.ds 4
                             39 ;--------------------------------------------------------
                             40 ; overlayable items in ram
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ; absolute ram data
                             44 ;--------------------------------------------------------
                             45 	.area IABS    (ABS)
                             46 	.area IABS    (ABS)
                             47 ;--------------------------------------------------------
                             48 ; absolute external ram data
                             49 ;--------------------------------------------------------
                             50 	.area XABS    (ABS)
                             51 ;--------------------------------------------------------
                             52 ; initialized external ram data
                             53 ;--------------------------------------------------------
                             54 	.area XISEG
                             55 ;--------------------------------------------------------
                             56 ; extended address mode data
                             57 ;--------------------------------------------------------
                             58 	.area XSEG
   0000                      59 ___mbstoc16s_PARM_2:
   0000                      60 	.ds 2
   0002                      61 ___mbstoc16s_PARM_3:
   0002                      62 	.ds 2
   0004                      63 ___mbstoc16s_c16s_65536_50:
   0004                      64 	.ds 2
   0006                      65 ___mbstoc16s_m_65536_51:
   0006                      66 	.ds 2
   0008                      67 ___mbstoc16s_l_196608_53:
   0008                      68 	.ds 2
   000A                      69 ___mbstoc16s_codepoint_196608_53:
   000A                      70 	.ds 4
                             71 ;--------------------------------------------------------
                             72 ; global & static initialisations
                             73 ;--------------------------------------------------------
                             74 	.area HOME    (CODE)
                             75 	.area GSINIT  (CODE)
                             76 	.area GSFINAL (CODE)
                             77 	.area GSINIT  (CODE)
                             78 ;--------------------------------------------------------
                             79 ; Home
                             80 ;--------------------------------------------------------
                             81 	.area HOME    (CODE)
                             82 	.area HOME    (CODE)
                             83 ;--------------------------------------------------------
                             84 ; code
                             85 ;--------------------------------------------------------
                             86 	.area CSEG    (CODE)
                             87 ;------------------------------------------------------------
                             88 ;Allocation info for local variables in function '__mbstoc16s'
                             89 ;------------------------------------------------------------
                             90 ;sloc0                     Allocated with name '___mbstoc16s_sloc0_1_0'
                             91 ;sloc1                     Allocated with name '___mbstoc16s_sloc1_1_0'
                             92 ;sloc2                     Allocated with name '___mbstoc16s_sloc2_1_0'
                             93 ;sloc3                     Allocated with name '___mbstoc16s_sloc3_1_0'
                             94 ;s                         Allocated with name '___mbstoc16s_PARM_2'
                             95 ;n                         Allocated with name '___mbstoc16s_PARM_3'
                             96 ;c16s                      Allocated with name '___mbstoc16s_c16s_65536_50'
                             97 ;m                         Allocated with name '___mbstoc16s_m_65536_51'
                             98 ;l                         Allocated with name '___mbstoc16s_l_196608_53'
                             99 ;codepoint                 Allocated with name '___mbstoc16s_codepoint_196608_53'
                            100 ;------------------------------------------------------------
                            101 ;../mbstoc16s.c:44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                            102 ;	-----------------------------------------
                            103 ;	 function __mbstoc16s
                            104 ;	-----------------------------------------
                            105 ;	Register assignment is optimal.
                            106 ;	Stack space usage: 0 bytes.
   0000                     107 ___mbstoc16s:
   0000 B7*01         [ 3]  108 	sta	*(___mbstoc16s_sloc0_1_0 + 1)
   0002 BF*00         [ 3]  109 	stx	*___mbstoc16s_sloc0_1_0
                            110 ;../mbstoc16s.c:46: size_t m = 0;
   0004 8C            [ 1]  111 	clrh
   0005 5F            [ 1]  112 	clrx
   0006 96r00r06      [ 5]  113 	sthx	___mbstoc16s_m_65536_51
                            114 ;../mbstoc16s.c:85: return(m);
   0009                     115 00116$:
                            116 ;../mbstoc16s.c:53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
   0009 32r00r00      [ 5]  117 	ldhx	___mbstoc16s_PARM_2
   000C 96r00r00      [ 5]  118 	sthx	_mbtowc_PARM_2
   000F 45 00 04      [ 3]  119 	ldhx	#0x0004
   0012 96r00r00      [ 5]  120 	sthx	_mbtowc_PARM_3
   0015 A6r0A         [ 2]  121 	lda	#___mbstoc16s_codepoint_196608_53
   0017 AEs00         [ 2]  122 	ldx	#>___mbstoc16s_codepoint_196608_53
   0019 CDr00r00      [ 6]  123 	jsr	_mbtowc
   001C C7r00r09      [ 4]  124 	sta	(___mbstoc16s_l_196608_53 + 1)
   001F CFr00r08      [ 4]  125 	stx	___mbstoc16s_l_196608_53
                            126 ;../mbstoc16s.c:55: if(l < 0)
   0022 C6r00r08      [ 4]  127 	lda	___mbstoc16s_l_196608_53
   0025 A0 00         [ 2]  128 	sub	#0x00
   0027 90 04         [ 3]  129 	bge	00106$
                            130 ;../mbstoc16s.c:56: return(-1);
   0029 A6 FF         [ 2]  131 	lda	#0xff
   002B 97            [ 1]  132 	tax
   002C 81            [ 6]  133 	rts
   002D                     134 00106$:
                            135 ;../mbstoc16s.c:59: if(m < n)
   002D C6r00r07      [ 4]  136 	lda	(___mbstoc16s_m_65536_51 + 1)
   0030 C0r00r03      [ 4]  137 	sub	(___mbstoc16s_PARM_3 + 1)
   0033 C6r00r06      [ 4]  138 	lda	___mbstoc16s_m_65536_51
   0036 C2r00r02      [ 4]  139 	sbc	___mbstoc16s_PARM_3
   0039 25 03         [ 3]  140 	bcs	00156$
   003B 4F            [ 1]  141 	clra
   003C 20 02         [ 3]  142 	bra	00157$
   003E                     143 00156$:
   003E A6 01         [ 2]  144 	lda	#0x01
   0040                     145 00157$:
                            146 ;../mbstoc16s.c:57: else if(!l)
   0040 87            [ 2]  147 	psha
   0041 C6r00r08      [ 4]  148 	lda	___mbstoc16s_l_196608_53
   0044 CAr00r09      [ 4]  149 	ora	(___mbstoc16s_l_196608_53 + 1)
   0047 86            [ 3]  150 	pula
   0048 26 0F         [ 3]  151 	bne	00107$
                            152 ;../mbstoc16s.c:59: if(m < n)
   004A 4D            [ 1]  153 	tsta
   004B 26 03         [ 3]  154 	bne	00159$
   004D CCr01r3F      [ 4]  155 	jmp	00115$
   0050                     156 00159$:
                            157 ;../mbstoc16s.c:60: *c16s = 0;
   0050 55*00         [ 4]  158 	ldhx	*___mbstoc16s_sloc0_1_0
   0052 4F            [ 1]  159 	clra
   0053 F7            [ 2]  160 	sta	,x
   0054 E7 01         [ 3]  161 	sta	1,x
                            162 ;../mbstoc16s.c:61: break;
   0056 CCr01r3F      [ 4]  163 	jmp	00115$
   0059                     164 00107$:
                            165 ;../mbstoc16s.c:69: *c16s++ = codepoint;
   0059 55*00         [ 4]  166 	ldhx	*___mbstoc16s_sloc0_1_0
   005B AF 02         [ 2]  167 	aix	#2
   005D 35*02         [ 4]  168 	sthx	*___mbstoc16s_sloc1_1_0
                            169 ;../mbstoc16s.c:70: m++;
   005F 32r00r06      [ 5]  170 	ldhx	___mbstoc16s_m_65536_51
   0062 AF 01         [ 2]  171 	aix	#1
   0064 35*04         [ 4]  172 	sthx	*___mbstoc16s_sloc2_1_0
                            173 ;../mbstoc16s.c:64: if (codepoint <= 0xffff) // Basic multilingual plane
   0066 87            [ 2]  174 	psha
   0067 A6 FF         [ 2]  175 	lda	#0xff
   0069 C0r00r0D      [ 4]  176 	sub	(___mbstoc16s_codepoint_196608_53 + 3)
   006C A6 FF         [ 2]  177 	lda	#0xff
   006E C2r00r0C      [ 4]  178 	sbc	(___mbstoc16s_codepoint_196608_53 + 2)
   0071 4F            [ 1]  179 	clra
   0072 C2r00r0B      [ 4]  180 	sbc	(___mbstoc16s_codepoint_196608_53 + 1)
   0075 4F            [ 1]  181 	clra
   0076 C2r00r0A      [ 4]  182 	sbc	___mbstoc16s_codepoint_196608_53
   0079 86            [ 3]  183 	pula
   007A 25 26         [ 3]  184 	bcs	00113$
                            185 ;../mbstoc16s.c:66: if (m >= n)
   007C 4D            [ 1]  186 	tsta
   007D 26 03         [ 3]  187 	bne	00161$
   007F CCr01r3F      [ 4]  188 	jmp	00115$
   0082                     189 00161$:
                            190 ;../mbstoc16s.c:69: *c16s++ = codepoint;
   0082 C6r00r0D      [ 4]  191 	lda	(___mbstoc16s_codepoint_196608_53 + 3)
   0085 CEr00r0C      [ 4]  192 	ldx	(___mbstoc16s_codepoint_196608_53 + 2)
   0088 89            [ 2]  193 	pshx
   0089 55*00         [ 4]  194 	ldhx	*___mbstoc16s_sloc0_1_0
   008B E7 01         [ 3]  195 	sta	1,x
   008D 86            [ 3]  196 	pula
   008E F7            [ 2]  197 	sta	,x
   008F 4E*02*00      [ 6]  198 	mov	*___mbstoc16s_sloc1_1_0,*___mbstoc16s_sloc0_1_0
   0092 4E*03*01      [ 6]  199 	mov	*(___mbstoc16s_sloc1_1_0 + 1),*(___mbstoc16s_sloc0_1_0 + 1)
                            200 ;../mbstoc16s.c:70: m++;
   0095 B6*04         [ 3]  201 	lda	*___mbstoc16s_sloc2_1_0
   0097 C7r00r06      [ 4]  202 	sta	___mbstoc16s_m_65536_51
   009A B6*05         [ 3]  203 	lda	*(___mbstoc16s_sloc2_1_0 + 1)
   009C C7r00r07      [ 4]  204 	sta	(___mbstoc16s_m_65536_51 + 1)
   009F CCr01r2D      [ 4]  205 	jmp	00114$
   00A2                     206 00113$:
                            207 ;../mbstoc16s.c:74: if (m + 1 >= n)
   00A2 55*04         [ 4]  208 	ldhx	*___mbstoc16s_sloc2_1_0
   00A4 3Er00r02      [ 6]  209 	cphx	___mbstoc16s_PARM_3
   00A7 25 03         [ 3]  210 	bcs	00162$
   00A9 CCr01r3F      [ 4]  211 	jmp	00115$
   00AC                     212 00162$:
                            213 ;../mbstoc16s.c:77: codepoint -= 0x100000;
   00AC 45r00r0A      [ 3]  214 	ldhx	#___mbstoc16s_codepoint_196608_53
   00AF E6 03         [ 3]  215 	lda	3,x
   00B1 A0 00         [ 2]  216 	sub	#0x00
   00B3 E7 03         [ 3]  217 	sta	3,x
   00B5 E6 02         [ 3]  218 	lda	2,x
   00B7 A2 00         [ 2]  219 	sbc	#0x00
   00B9 E7 02         [ 3]  220 	sta	2,x
   00BB E6 01         [ 3]  221 	lda	1,x
   00BD A2 10         [ 2]  222 	sbc	#0x10
   00BF E7 01         [ 3]  223 	sta	1,x
   00C1 F6            [ 3]  224 	lda	,x
   00C2 A2 00         [ 2]  225 	sbc	#0x00
   00C4 F7            [ 2]  226 	sta	,x
                            227 ;../mbstoc16s.c:78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
   00C5 C6r00r0C      [ 4]  228 	lda	(___mbstoc16s_codepoint_196608_53 + 2)
   00C8 CEr00r0B      [ 4]  229 	ldx	(___mbstoc16s_codepoint_196608_53 + 1)
   00CB 54            [ 1]  230 	lsrx
   00CC 46            [ 1]  231 	rora
   00CD 54            [ 1]  232 	lsrx
   00CE 46            [ 1]  233 	rora
   00CF B7*09         [ 3]  234 	sta	*(___mbstoc16s_sloc3_1_0 + 3)
   00D1 BF*08         [ 3]  235 	stx	*(___mbstoc16s_sloc3_1_0 + 2)
   00D3 CEr00r0A      [ 4]  236 	ldx	___mbstoc16s_codepoint_196608_53
   00D6 4F            [ 1]  237 	clra
   00D7 54            [ 1]  238 	lsrx
   00D8 46            [ 1]  239 	rora
   00D9 54            [ 1]  240 	lsrx
   00DA 46            [ 1]  241 	rora
   00DB BA*08         [ 3]  242 	ora	*(___mbstoc16s_sloc3_1_0 + 2)
   00DD B7*08         [ 3]  243 	sta	*(___mbstoc16s_sloc3_1_0 + 2)
   00DF BF*07         [ 3]  244 	stx	*(___mbstoc16s_sloc3_1_0 + 1)
   00E1 6E 00*06      [ 4]  245 	mov	#0x00,*___mbstoc16s_sloc3_1_0
   00E4 B6*09         [ 3]  246 	lda	*(___mbstoc16s_sloc3_1_0 + 3)
   00E6 BE*08         [ 3]  247 	ldx	*(___mbstoc16s_sloc3_1_0 + 2)
   00E8 87            [ 2]  248 	psha
   00E9 9F            [ 1]  249 	txa
   00EA A4 03         [ 2]  250 	and	#0x03
   00EC 97            [ 1]  251 	tax
   00ED 86            [ 3]  252 	pula
   00EE 87            [ 2]  253 	psha
   00EF 9F            [ 1]  254 	txa
   00F0 AB D8         [ 2]  255 	add	#0xd8
   00F2 97            [ 1]  256 	tax
   00F3 86            [ 3]  257 	pula
   00F4 89            [ 2]  258 	pshx
   00F5 55*00         [ 4]  259 	ldhx	*___mbstoc16s_sloc0_1_0
   00F7 E7 01         [ 3]  260 	sta	1,x
   00F9 86            [ 3]  261 	pula
   00FA F7            [ 2]  262 	sta	,x
   00FB B6*02         [ 3]  263 	lda	*___mbstoc16s_sloc1_1_0
   00FD C7r00r04      [ 4]  264 	sta	___mbstoc16s_c16s_65536_50
   0100 B6*03         [ 3]  265 	lda	*(___mbstoc16s_sloc1_1_0 + 1)
   0102 C7r00r05      [ 4]  266 	sta	(___mbstoc16s_c16s_65536_50 + 1)
                            267 ;../mbstoc16s.c:79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
   0105 32r00r0C      [ 5]  268 	ldhx	(___mbstoc16s_codepoint_196608_53 + 2)
   0108 35*06         [ 4]  269 	sthx	*___mbstoc16s_sloc3_1_0
   010A BE*07         [ 3]  270 	ldx	*(___mbstoc16s_sloc3_1_0 + 1)
   010C B6*06         [ 3]  271 	lda	*___mbstoc16s_sloc3_1_0
   010E A4 03         [ 2]  272 	and	#0x03
   0110 87            [ 2]  273 	psha
   0111 9F            [ 1]  274 	txa
   0112 97            [ 1]  275 	tax
   0113 86            [ 3]  276 	pula
   0114 AB DC         [ 2]  277 	add	#0xdc
   0116 89            [ 2]  278 	pshx
   0117 32r00r04      [ 5]  279 	ldhx	___mbstoc16s_c16s_65536_50
   011A F7            [ 2]  280 	sta	,x
   011B 86            [ 3]  281 	pula
   011C E7 01         [ 3]  282 	sta	1,x
   011E 32r00r04      [ 5]  283 	ldhx	___mbstoc16s_c16s_65536_50
   0121 AF 02         [ 2]  284 	aix	#2
   0123 35*00         [ 4]  285 	sthx	*___mbstoc16s_sloc0_1_0
                            286 ;../mbstoc16s.c:80: m += 2;
   0125 32r00r06      [ 5]  287 	ldhx	___mbstoc16s_m_65536_51
   0128 AF 02         [ 2]  288 	aix	#2
   012A 96r00r06      [ 5]  289 	sthx	___mbstoc16s_m_65536_51
   012D                     290 00114$:
                            291 ;../mbstoc16s.c:82: s += l;
   012D 45r00r00      [ 3]  292 	ldhx	#___mbstoc16s_PARM_2
   0130 C6r00r09      [ 4]  293 	lda	(___mbstoc16s_l_196608_53 + 1)
   0133 EB 01         [ 3]  294 	add	1,x
   0135 E7 01         [ 3]  295 	sta	1,x
   0137 C6r00r08      [ 4]  296 	lda	___mbstoc16s_l_196608_53
   013A F9            [ 3]  297 	adc	,x
   013B F7            [ 2]  298 	sta	,x
   013C CCr00r09      [ 4]  299 	jmp	00116$
   013F                     300 00115$:
                            301 ;../mbstoc16s.c:85: return(m);
   013F CEr00r06      [ 4]  302 	ldx	___mbstoc16s_m_65536_51
   0142 C6r00r07      [ 4]  303 	lda	(___mbstoc16s_m_65536_51 + 1)
                            304 ;../mbstoc16s.c:86: }
   0145 81            [ 6]  305 	rts
                            306 	.area CSEG    (CODE)
                            307 	.area CONST   (CODE)
                            308 	.area XINIT   (CODE)
                            309 	.area CABS    (ABS,CODE)
