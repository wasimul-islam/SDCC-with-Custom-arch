                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module realloc
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl ___sdcc_heap_init
                             24 	.globl ___memcpy
                             25 	.globl _memmove
                             26 	.globl _free
                             27 	.globl _malloc
                             28 	.globl _realloc_PARM_2
                             29 	.globl _realloc
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (PAG)
   0000                      34 _realloc_sloc0_1_0:
   0000                      35 	.ds 2
   0002                      36 _realloc_sloc1_1_0:
   0002                      37 	.ds 2
   0004                      38 _realloc_sloc2_1_0:
   0004                      39 	.ds 2
                             40 ;--------------------------------------------------------
                             41 ; overlayable items in ram
                             42 ;--------------------------------------------------------
                             43 ;--------------------------------------------------------
                             44 ; absolute ram data
                             45 ;--------------------------------------------------------
                             46 	.area IABS    (ABS)
                             47 	.area IABS    (ABS)
                             48 ;--------------------------------------------------------
                             49 ; absolute external ram data
                             50 ;--------------------------------------------------------
                             51 	.area XABS    (ABS)
                             52 ;--------------------------------------------------------
                             53 ; initialized external ram data
                             54 ;--------------------------------------------------------
                             55 	.area XISEG
                             56 ;--------------------------------------------------------
                             57 ; extended address mode data
                             58 ;--------------------------------------------------------
                             59 	.area XSEG
   0000                      60 _realloc_PARM_2:
   0000                      61 	.ds 2
   0002                      62 _realloc_ptr_65536_63:
   0002                      63 	.ds 2
   0004                      64 _realloc_ret_65536_64:
   0004                      65 	.ds 2
   0006                      66 _realloc_h_65536_64:
   0006                      67 	.ds 2
   0008                      68 _realloc_next_free_65536_64:
   0008                      69 	.ds 2
   000A                      70 _realloc_prev_free_65536_64:
   000A                      71 	.ds 2
   000C                      72 _realloc_f_65536_64:
   000C                      73 	.ds 2
   000E                      74 _realloc_pf_65536_64:
   000E                      75 	.ds 2
   0010                      76 _realloc_blocksize_65536_64:
   0010                      77 	.ds 2
   0012                      78 _realloc_oldblocksize_65536_64:
   0012                      79 	.ds 2
   0014                      80 _realloc_maxblocksize_65536_64:
   0014                      81 	.ds 2
   0016                      82 _realloc_newheader_196608_70:
   0016                      83 	.ds 2
                             84 ;--------------------------------------------------------
                             85 ; global & static initialisations
                             86 ;--------------------------------------------------------
                             87 	.area HOME    (CODE)
                             88 	.area GSINIT  (CODE)
                             89 	.area GSFINAL (CODE)
                             90 	.area GSINIT  (CODE)
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area HOME    (CODE)
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area CSEG    (CODE)
                            100 ;------------------------------------------------------------
                            101 ;Allocation info for local variables in function 'realloc'
                            102 ;------------------------------------------------------------
                            103 ;sloc0                     Allocated with name '_realloc_sloc0_1_0'
                            104 ;sloc1                     Allocated with name '_realloc_sloc1_1_0'
                            105 ;sloc2                     Allocated with name '_realloc_sloc2_1_0'
                            106 ;size                      Allocated with name '_realloc_PARM_2'
                            107 ;ptr                       Allocated with name '_realloc_ptr_65536_63'
                            108 ;ret                       Allocated with name '_realloc_ret_65536_64'
                            109 ;h                         Allocated with name '_realloc_h_65536_64'
                            110 ;next_free                 Allocated with name '_realloc_next_free_65536_64'
                            111 ;prev_free                 Allocated with name '_realloc_prev_free_65536_64'
                            112 ;f                         Allocated with name '_realloc_f_65536_64'
                            113 ;pf                        Allocated with name '_realloc_pf_65536_64'
                            114 ;blocksize                 Allocated with name '_realloc_blocksize_65536_64'
                            115 ;oldblocksize              Allocated with name '_realloc_oldblocksize_65536_64'
                            116 ;maxblocksize              Allocated with name '_realloc_maxblocksize_65536_64'
                            117 ;newheader                 Allocated with name '_realloc_newheader_196608_70'
                            118 ;oldsize                   Allocated to registers x h 
                            119 ;------------------------------------------------------------
                            120 ;../realloc.c:60: void *realloc(void *ptr, size_t size)
                            121 ;	-----------------------------------------
                            122 ;	 function realloc
                            123 ;	-----------------------------------------
                            124 ;	Register assignment might be sub-optimal.
                            125 ;	Stack space usage: 0 bytes.
   0000                     126 _realloc:
   0000 C7r00r03      [ 4]  127 	sta	(_realloc_ptr_65536_63 + 1)
   0003 CFr00r02      [ 4]  128 	stx	_realloc_ptr_65536_63
                            129 ;../realloc.c:69: if(!__sdcc_heap_free)
   0006 C6r00r00      [ 4]  130 	lda	___sdcc_heap_free
   0009 CAr00r01      [ 4]  131 	ora	(___sdcc_heap_free + 1)
   000C 26 03         [ 3]  132 	bne	00102$
                            133 ;../realloc.c:70: __sdcc_heap_init();
   000E CDr00r00      [ 6]  134 	jsr	___sdcc_heap_init
   0011                     135 00102$:
                            136 ;../realloc.c:73: if(!ptr)
   0011 C6r00r02      [ 4]  137 	lda	_realloc_ptr_65536_63
   0014 CAr00r03      [ 4]  138 	ora	(_realloc_ptr_65536_63 + 1)
   0017 26 09         [ 3]  139 	bne	00104$
                            140 ;../realloc.c:74: return(malloc(size));
   0019 C6r00r01      [ 4]  141 	lda	(_realloc_PARM_2 + 1)
   001C CEr00r00      [ 4]  142 	ldx	_realloc_PARM_2
   001F CCr00r00      [ 4]  143 	jmp	_malloc
   0022                     144 00104$:
                            145 ;../realloc.c:76: if(!size)
   0022 C6r00r00      [ 4]  146 	lda	_realloc_PARM_2
   0025 CAr00r01      [ 4]  147 	ora	(_realloc_PARM_2 + 1)
   0028 26 0C         [ 3]  148 	bne	00106$
                            149 ;../realloc.c:78: free(ptr);
   002A C6r00r03      [ 4]  150 	lda	(_realloc_ptr_65536_63 + 1)
   002D CEr00r02      [ 4]  151 	ldx	_realloc_ptr_65536_63
   0030 CDr00r00      [ 6]  152 	jsr	_free
                            153 ;../realloc.c:79: return(0);
   0033 4F            [ 1]  154 	clra
   0034 97            [ 1]  155 	tax
   0035 81            [ 6]  156 	rts
   0036                     157 00106$:
                            158 ;../realloc.c:82: prev_free = 0, pf = 0;
   0036 8C            [ 1]  159 	clrh
   0037 5F            [ 1]  160 	clrx
   0038 96r00r0A      [ 5]  161 	sthx	_realloc_prev_free_65536_64
   003B 96r00r0E      [ 5]  162 	sthx	_realloc_pf_65536_64
                            163 ;../realloc.c:83: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h && h < ptr; prev_free = h, pf = f, f = &(h->next_free), h = h->next_free); // Find adjacent blocks in free list
   003E 32r00r00      [ 5]  164 	ldhx	___sdcc_heap_free
   0041 A6r00         [ 2]  165 	lda	#___sdcc_heap_free
   0043 C7r00r0D      [ 4]  166 	sta	(_realloc_f_65536_64 + 1)
   0046 A6s00         [ 2]  167 	lda	#>___sdcc_heap_free
   0048 C7r00r0C      [ 4]  168 	sta	_realloc_f_65536_64
   004B                     169 00131$:
   004B 65 00 00      [ 3]  170 	cphx	#0x00
   004E 27 26         [ 3]  171 	beq	00107$
   0050 C6r00r03      [ 4]  172 	lda	(_realloc_ptr_65536_63 + 1)
   0053 B7*01         [ 3]  173 	sta	*(_realloc_sloc0_1_0 + 1)
   0055 C6r00r02      [ 4]  174 	lda	_realloc_ptr_65536_63
   0058 B7*00         [ 3]  175 	sta	*_realloc_sloc0_1_0
   005A 75*00         [ 5]  176 	cphx	*_realloc_sloc0_1_0
   005C 24 18         [ 3]  177 	bcc	00107$
   005E 96r00r0A      [ 5]  178 	sthx	_realloc_prev_free_65536_64
   0061 C6r00r0C      [ 4]  179 	lda	_realloc_f_65536_64
   0064 C7r00r0E      [ 4]  180 	sta	_realloc_pf_65536_64
   0067 C6r00r0D      [ 4]  181 	lda	(_realloc_f_65536_64 + 1)
   006A C7r00r0F      [ 4]  182 	sta	(_realloc_pf_65536_64 + 1)
   006D AF 02         [ 2]  183 	aix	#2
   006F 96r00r0C      [ 5]  184 	sthx	_realloc_f_65536_64
   0072 9E AE         [ 5]  185 	ldhx	,x
   0074 20 D5         [ 3]  186 	bra	00131$
   0076                     187 00107$:
                            188 ;../realloc.c:84: next_free = h;
   0076 96r00r08      [ 5]  189 	sthx	_realloc_next_free_65536_64
                            190 ;../realloc.c:86: if(size + offsetof(struct header, next_free) < size) // Handle overflow
   0079 32r00r00      [ 5]  191 	ldhx	_realloc_PARM_2
   007C AF 02         [ 2]  192 	aix	#2
   007E 3Er00r00      [ 6]  193 	cphx	_realloc_PARM_2
   0081 24 03         [ 3]  194 	bcc	00109$
                            195 ;../realloc.c:87: return(0);
   0083 4F            [ 1]  196 	clra
   0084 97            [ 1]  197 	tax
   0085 81            [ 6]  198 	rts
   0086                     199 00109$:
                            200 ;../realloc.c:88: blocksize = size + offsetof(struct header, next_free);
   0086 96r00r10      [ 5]  201 	sthx	_realloc_blocksize_65536_64
                            202 ;../realloc.c:89: if(blocksize < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
   0089 C6r00r11      [ 4]  203 	lda	(_realloc_blocksize_65536_64 + 1)
   008C A0 04         [ 2]  204 	sub	#0x04
   008E C6r00r10      [ 4]  205 	lda	_realloc_blocksize_65536_64
   0091 A2 00         [ 2]  206 	sbc	#0x00
   0093 24 06         [ 3]  207 	bcc	00111$
                            208 ;../realloc.c:90: blocksize = sizeof(struct header);
   0095 45 00 04      [ 3]  209 	ldhx	#0x0004
   0098 96r00r10      [ 5]  210 	sthx	_realloc_blocksize_65536_64
   009B                     211 00111$:
                            212 ;../realloc.c:92: h = (void HEAPSPACE *)((char HEAPSPACE *)(ptr) - offsetof(struct header, next_free));
   009B 32r00r02      [ 5]  213 	ldhx	_realloc_ptr_65536_63
   009E AF FE         [ 2]  214 	aix	#-2
   00A0 CFr00r07      [ 4]  215 	stx	(_realloc_h_65536_64 + 1)
   00A3 8B            [ 2]  216 	pshh
   00A4 86            [ 3]  217 	pula
   00A5 C7r00r06      [ 4]  218 	sta	_realloc_h_65536_64
                            219 ;../realloc.c:93: oldblocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
   00A8 32r00r06      [ 5]  220 	ldhx	_realloc_h_65536_64
   00AB F6            [ 3]  221 	lda	,x
   00AC B7*00         [ 3]  222 	sta	*_realloc_sloc0_1_0
   00AE E6 01         [ 3]  223 	lda	1,x
   00B0 B7*01         [ 3]  224 	sta	*(_realloc_sloc0_1_0 + 1)
   00B2 B6*01         [ 3]  225 	lda	*(_realloc_sloc0_1_0 + 1)
   00B4 BE*00         [ 3]  226 	ldx	*_realloc_sloc0_1_0
   00B6 87            [ 2]  227 	psha
   00B7 C6r00r07      [ 4]  228 	lda	(_realloc_h_65536_64 + 1)
   00BA B7*03         [ 3]  229 	sta	*(_realloc_sloc1_1_0 + 1)
   00BC C6r00r06      [ 4]  230 	lda	_realloc_h_65536_64
   00BF B7*02         [ 3]  231 	sta	*_realloc_sloc1_1_0
   00C1 86            [ 3]  232 	pula
   00C2 B0*03         [ 3]  233 	sub	*(_realloc_sloc1_1_0 + 1)
   00C4 C7r00r13      [ 4]  234 	sta	(_realloc_oldblocksize_65536_64 + 1)
   00C7 9F            [ 1]  235 	txa
   00C8 B2*02         [ 3]  236 	sbc	*_realloc_sloc1_1_0
   00CA C7r00r12      [ 4]  237 	sta	_realloc_oldblocksize_65536_64
                            238 ;../realloc.c:95: maxblocksize = oldblocksize;
   00CD 32r00r12      [ 5]  239 	ldhx	_realloc_oldblocksize_65536_64
   00D0 96r00r14      [ 5]  240 	sthx	_realloc_maxblocksize_65536_64
                            241 ;../realloc.c:96: if(prev_free && prev_free->next == h) // Can merge with previous block
   00D3 C6r00r0A      [ 4]  242 	lda	_realloc_prev_free_65536_64
   00D6 CAr00r0B      [ 4]  243 	ora	(_realloc_prev_free_65536_64 + 1)
   00D9 27 27         [ 3]  244 	beq	00113$
   00DB 32r00r0A      [ 5]  245 	ldhx	_realloc_prev_free_65536_64
   00DE 9E AE         [ 5]  246 	ldhx	,x
   00E0 3Er00r06      [ 6]  247 	cphx	_realloc_h_65536_64
   00E3 26 1D         [ 3]  248 	bne	00113$
                            249 ;../realloc.c:97: maxblocksize += (char HEAPSPACE *)h - (char HEAPSPACE *)prev_free;
   00E5 32r00r0A      [ 5]  250 	ldhx	_realloc_prev_free_65536_64
   00E8 35*04         [ 4]  251 	sthx	*_realloc_sloc2_1_0
   00EA B6*03         [ 3]  252 	lda	*(_realloc_sloc1_1_0 + 1)
   00EC B0*05         [ 3]  253 	sub	*(_realloc_sloc2_1_0 + 1)
   00EE 87            [ 2]  254 	psha
   00EF B6*02         [ 3]  255 	lda	*_realloc_sloc1_1_0
   00F1 B2*04         [ 3]  256 	sbc	*_realloc_sloc2_1_0
   00F3 97            [ 1]  257 	tax
   00F4 86            [ 3]  258 	pula
   00F5 CBr00r13      [ 4]  259 	add	(_realloc_oldblocksize_65536_64 + 1)
   00F8 C7r00r15      [ 4]  260 	sta	(_realloc_maxblocksize_65536_64 + 1)
   00FB 9F            [ 1]  261 	txa
   00FC C9r00r12      [ 4]  262 	adc	_realloc_oldblocksize_65536_64
   00FF C7r00r14      [ 4]  263 	sta	_realloc_maxblocksize_65536_64
   0102                     264 00113$:
                            265 ;../realloc.c:98: if(next_free == h->next) // Can merge with next block
   0102 C6r00r09      [ 4]  266 	lda	(_realloc_next_free_65536_64 + 1)
   0105 B1*01         [ 3]  267 	cmp	*(_realloc_sloc0_1_0 + 1)
   0107 26 06         [ 3]  268 	bne	00248$
   0109 C6r00r08      [ 4]  269 	lda	_realloc_next_free_65536_64
   010C 31*00 02      [ 5]  270 	cbeq	*_realloc_sloc0_1_0,00249$
   010F                     271 00248$:
   010F 20 27         [ 3]  272 	bra	00116$
   0111                     273 00249$:
                            274 ;../realloc.c:99: maxblocksize += (char HEAPSPACE *)(next_free->next) - (char HEAPSPACE *)next_free;
   0111 32r00r08      [ 5]  275 	ldhx	_realloc_next_free_65536_64
   0114 E6 01         [ 3]  276 	lda	1,x
   0116 FE            [ 3]  277 	ldx	,x
   0117 87            [ 2]  278 	psha
   0118 C6r00r09      [ 4]  279 	lda	(_realloc_next_free_65536_64 + 1)
   011B B7*05         [ 3]  280 	sta	*(_realloc_sloc2_1_0 + 1)
   011D C6r00r08      [ 4]  281 	lda	_realloc_next_free_65536_64
   0120 B7*04         [ 3]  282 	sta	*_realloc_sloc2_1_0
   0122 86            [ 3]  283 	pula
   0123 B0*05         [ 3]  284 	sub	*(_realloc_sloc2_1_0 + 1)
   0125 87            [ 2]  285 	psha
   0126 9F            [ 1]  286 	txa
   0127 B2*04         [ 3]  287 	sbc	*_realloc_sloc2_1_0
   0129 97            [ 1]  288 	tax
   012A 86            [ 3]  289 	pula
   012B CBr00r15      [ 4]  290 	add	(_realloc_maxblocksize_65536_64 + 1)
   012E C7r00r15      [ 4]  291 	sta	(_realloc_maxblocksize_65536_64 + 1)
   0131 9F            [ 1]  292 	txa
   0132 C9r00r14      [ 4]  293 	adc	_realloc_maxblocksize_65536_64
   0135 C7r00r14      [ 4]  294 	sta	_realloc_maxblocksize_65536_64
   0138                     295 00116$:
                            296 ;../realloc.c:101: if(blocksize <= maxblocksize) // Can resize in place.
   0138 C6r00r15      [ 4]  297 	lda	(_realloc_maxblocksize_65536_64 + 1)
   013B C0r00r11      [ 4]  298 	sub	(_realloc_blocksize_65536_64 + 1)
   013E C6r00r14      [ 4]  299 	lda	_realloc_maxblocksize_65536_64
   0141 C2r00r10      [ 4]  300 	sbc	_realloc_blocksize_65536_64
   0144 24 03         [ 3]  301 	bcc	00250$
   0146 CCr02r38      [ 4]  302 	jmp	00126$
   0149                     303 00250$:
                            304 ;../realloc.c:103: if(prev_free && prev_free->next == h) // Always move into previous block to defragment
   0149 C6r00r0A      [ 4]  305 	lda	_realloc_prev_free_65536_64
   014C CAr00r0B      [ 4]  306 	ora	(_realloc_prev_free_65536_64 + 1)
   014F 27 56         [ 3]  307 	beq	00118$
   0151 32r00r0A      [ 5]  308 	ldhx	_realloc_prev_free_65536_64
   0154 9E AE         [ 5]  309 	ldhx	,x
   0156 3Er00r06      [ 6]  310 	cphx	_realloc_h_65536_64
   0159 26 4C         [ 3]  311 	bne	00118$
                            312 ;../realloc.c:105: memmove(prev_free, h, blocksize <= oldblocksize ? blocksize : oldblocksize);
   015B 32r00r0A      [ 5]  313 	ldhx	_realloc_prev_free_65536_64
   015E 35*04         [ 4]  314 	sthx	*_realloc_sloc2_1_0
   0160 32r00r06      [ 5]  315 	ldhx	_realloc_h_65536_64
   0163 35*02         [ 4]  316 	sthx	*_realloc_sloc1_1_0
   0165 C6r00r13      [ 4]  317 	lda	(_realloc_oldblocksize_65536_64 + 1)
   0168 C0r00r11      [ 4]  318 	sub	(_realloc_blocksize_65536_64 + 1)
   016B C6r00r12      [ 4]  319 	lda	_realloc_oldblocksize_65536_64
   016E C2r00r10      [ 4]  320 	sbc	_realloc_blocksize_65536_64
   0171 25 05         [ 3]  321 	bcs	00135$
   0173 32r00r10      [ 5]  322 	ldhx	_realloc_blocksize_65536_64
   0176 20 03         [ 3]  323 	bra	00136$
   0178                     324 00135$:
   0178 32r00r12      [ 5]  325 	ldhx	_realloc_oldblocksize_65536_64
   017B                     326 00136$:
   017B B6*02         [ 3]  327 	lda	*_realloc_sloc1_1_0
   017D C7r00r00      [ 4]  328 	sta	_memmove_PARM_2
   0180 B6*03         [ 3]  329 	lda	*(_realloc_sloc1_1_0 + 1)
   0182 C7r00r01      [ 4]  330 	sta	(_memmove_PARM_2 + 1)
   0185 96r00r00      [ 5]  331 	sthx	_memmove_PARM_3
   0188 B6*05         [ 3]  332 	lda	*(_realloc_sloc2_1_0 + 1)
   018A BE*04         [ 3]  333 	ldx	*_realloc_sloc2_1_0
   018C CDr00r00      [ 6]  334 	jsr	_memmove
                            335 ;../realloc.c:106: h = prev_free;
   018F 32r00r0A      [ 5]  336 	ldhx	_realloc_prev_free_65536_64
   0192 96r00r06      [ 5]  337 	sthx	_realloc_h_65536_64
                            338 ;../realloc.c:107: *pf = next_free;
   0195 32r00r0E      [ 5]  339 	ldhx	_realloc_pf_65536_64
   0198 C6r00r08      [ 4]  340 	lda	_realloc_next_free_65536_64
   019B F7            [ 2]  341 	sta	,x
   019C C6r00r09      [ 4]  342 	lda	(_realloc_next_free_65536_64 + 1)
   019F E7 01         [ 3]  343 	sta	1,x
                            344 ;../realloc.c:108: f = pf;
   01A1 32r00r0E      [ 5]  345 	ldhx	_realloc_pf_65536_64
   01A4 96r00r0C      [ 5]  346 	sthx	_realloc_f_65536_64
   01A7                     347 00118$:
                            348 ;../realloc.c:111: if(next_free && next_free == h->next) // Merge with following block
   01A7 C6r00r08      [ 4]  349 	lda	_realloc_next_free_65536_64
   01AA CAr00r09      [ 4]  350 	ora	(_realloc_next_free_65536_64 + 1)
   01AD 27 27         [ 3]  351 	beq	00121$
   01AF 32r00r06      [ 5]  352 	ldhx	_realloc_h_65536_64
   01B2 9E AE         [ 5]  353 	ldhx	,x
   01B4 3Er00r08      [ 6]  354 	cphx	_realloc_next_free_65536_64
   01B7 26 1D         [ 3]  355 	bne	00121$
                            356 ;../realloc.c:113: h->next = next_free->next;
   01B9 32r00r08      [ 5]  357 	ldhx	_realloc_next_free_65536_64
   01BC 9E AE         [ 5]  358 	ldhx	,x
   01BE 9F            [ 1]  359 	txa
   01BF 8B            [ 2]  360 	pshh
   01C0 32r00r06      [ 5]  361 	ldhx	_realloc_h_65536_64
   01C3 E7 01         [ 3]  362 	sta	1,x
   01C5 86            [ 3]  363 	pula
   01C6 F7            [ 2]  364 	sta	,x
                            365 ;../realloc.c:114: *f = next_free->next_free;
   01C7 32r00r08      [ 5]  366 	ldhx	_realloc_next_free_65536_64
   01CA E6 03         [ 3]  367 	lda	3,x
   01CC EE 02         [ 3]  368 	ldx	2,x
   01CE 89            [ 2]  369 	pshx
   01CF 32r00r0C      [ 5]  370 	ldhx	_realloc_f_65536_64
   01D2 E7 01         [ 3]  371 	sta	1,x
   01D4 86            [ 3]  372 	pula
   01D5 F7            [ 2]  373 	sta	,x
   01D6                     374 00121$:
                            375 ;../realloc.c:117: if(maxblocksize >= blocksize + sizeof(struct header)) // Create new block from free space
   01D6 32r00r10      [ 5]  376 	ldhx	_realloc_blocksize_65536_64
   01D9 AF 04         [ 2]  377 	aix	#4
   01DB 3Er00r14      [ 6]  378 	cphx	_realloc_maxblocksize_65536_64
   01DE 22 4F         [ 3]  379 	bhi	00124$
                            380 ;../realloc.c:119: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + blocksize);
   01E0 C6r00r07      [ 4]  381 	lda	(_realloc_h_65536_64 + 1)
   01E3 CEr00r06      [ 4]  382 	ldx	_realloc_h_65536_64
   01E6 CBr00r11      [ 4]  383 	add	(_realloc_blocksize_65536_64 + 1)
   01E9 87            [ 2]  384 	psha
   01EA 9F            [ 1]  385 	txa
   01EB C9r00r10      [ 4]  386 	adc	_realloc_blocksize_65536_64
   01EE 97            [ 1]  387 	tax
   01EF 86            [ 3]  388 	pula
   01F0 C7r00r17      [ 4]  389 	sta	(_realloc_newheader_196608_70 + 1)
   01F3 CFr00r16      [ 4]  390 	stx	_realloc_newheader_196608_70
                            391 ;../realloc.c:120: newheader->next = h->next;
   01F6 32r00r06      [ 5]  392 	ldhx	_realloc_h_65536_64
   01F9 9E AE         [ 5]  393 	ldhx	,x
   01FB 9F            [ 1]  394 	txa
   01FC 8B            [ 2]  395 	pshh
   01FD 32r00r16      [ 5]  396 	ldhx	_realloc_newheader_196608_70
   0200 E7 01         [ 3]  397 	sta	1,x
   0202 86            [ 3]  398 	pula
   0203 F7            [ 2]  399 	sta	,x
                            400 ;../realloc.c:121: newheader->next_free = *f;
   0204 32r00r16      [ 5]  401 	ldhx	_realloc_newheader_196608_70
   0207 35*04         [ 4]  402 	sthx	*_realloc_sloc2_1_0
   0209 32r00r0C      [ 5]  403 	ldhx	_realloc_f_65536_64
   020C 9E AE         [ 5]  404 	ldhx	,x
   020E 9F            [ 1]  405 	txa
   020F 8B            [ 2]  406 	pshh
   0210 55*04         [ 4]  407 	ldhx	*_realloc_sloc2_1_0
   0212 E7 03         [ 3]  408 	sta	3,x
   0214 86            [ 3]  409 	pula
   0215 E7 02         [ 3]  410 	sta	2,x
                            411 ;../realloc.c:122: *f = newheader;
   0217 32r00r0C      [ 5]  412 	ldhx	_realloc_f_65536_64
   021A C6r00r16      [ 4]  413 	lda	_realloc_newheader_196608_70
   021D F7            [ 2]  414 	sta	,x
   021E C6r00r17      [ 4]  415 	lda	(_realloc_newheader_196608_70 + 1)
   0221 E7 01         [ 3]  416 	sta	1,x
                            417 ;../realloc.c:123: h->next = newheader;
   0223 32r00r06      [ 5]  418 	ldhx	_realloc_h_65536_64
   0226 C6r00r16      [ 4]  419 	lda	_realloc_newheader_196608_70
   0229 F7            [ 2]  420 	sta	,x
   022A C6r00r17      [ 4]  421 	lda	(_realloc_newheader_196608_70 + 1)
   022D E7 01         [ 3]  422 	sta	1,x
   022F                     423 00124$:
                            424 ;../realloc.c:126: return(&(h->next_free));
   022F 32r00r06      [ 5]  425 	ldhx	_realloc_h_65536_64
   0232 AF 02         [ 2]  426 	aix	#2
   0234 9F            [ 1]  427 	txa
   0235 8B            [ 2]  428 	pshh
   0236 88            [ 3]  429 	pulx
   0237 81            [ 6]  430 	rts
   0238                     431 00126$:
                            432 ;../realloc.c:129: if(ret = malloc(size))
   0238 C6r00r01      [ 4]  433 	lda	(_realloc_PARM_2 + 1)
   023B CEr00r00      [ 4]  434 	ldx	_realloc_PARM_2
   023E CDr00r00      [ 6]  435 	jsr	_malloc
   0241 CFr00r04      [ 4]  436 	stx	_realloc_ret_65536_64
   0244 C7r00r05      [ 4]  437 	sta	(_realloc_ret_65536_64 + 1)
   0247 4D            [ 1]  438 	tsta
   0248 26 01         [ 3]  439 	bne	00257$
   024A 5D            [ 1]  440 	tstx
   024B                     441 00257$:
   024B 27 35         [ 3]  442 	beq	00128$
                            443 ;../realloc.c:131: size_t oldsize = oldblocksize - offsetof(struct header, next_free);
   024D 32r00r12      [ 5]  444 	ldhx	_realloc_oldblocksize_65536_64
   0250 AF FE         [ 2]  445 	aix	#-2
                            446 ;../realloc.c:132: memcpy(ret, ptr, size <= oldsize ? size : oldsize);
   0252 3Er00r00      [ 6]  447 	cphx	_realloc_PARM_2
   0255 25 03         [ 3]  448 	bcs	00137$
   0257 32r00r00      [ 5]  449 	ldhx	_realloc_PARM_2
   025A                     450 00137$:
   025A C6r00r02      [ 4]  451 	lda	_realloc_ptr_65536_63
   025D C7r00r00      [ 4]  452 	sta	___memcpy_PARM_2
   0260 C6r00r03      [ 4]  453 	lda	(_realloc_ptr_65536_63 + 1)
   0263 C7r00r01      [ 4]  454 	sta	(___memcpy_PARM_2 + 1)
   0266 96r00r00      [ 5]  455 	sthx	___memcpy_PARM_3
   0269 C6r00r05      [ 4]  456 	lda	(_realloc_ret_65536_64 + 1)
   026C CEr00r04      [ 4]  457 	ldx	_realloc_ret_65536_64
   026F CDr00r00      [ 6]  458 	jsr	___memcpy
                            459 ;../realloc.c:133: free(ptr);
   0272 C6r00r03      [ 4]  460 	lda	(_realloc_ptr_65536_63 + 1)
   0275 CEr00r02      [ 4]  461 	ldx	_realloc_ptr_65536_63
   0278 CDr00r00      [ 6]  462 	jsr	_free
                            463 ;../realloc.c:134: return(ret);
   027B CEr00r04      [ 4]  464 	ldx	_realloc_ret_65536_64
   027E C6r00r05      [ 4]  465 	lda	(_realloc_ret_65536_64 + 1)
   0281 81            [ 6]  466 	rts
   0282                     467 00128$:
                            468 ;../realloc.c:137: return(0);
   0282 4F            [ 1]  469 	clra
   0283 97            [ 1]  470 	tax
                            471 ;../realloc.c:138: }
   0284 81            [ 6]  472 	rts
                            473 	.area CSEG    (CODE)
                            474 	.area CONST   (CODE)
                            475 	.area XINIT   (CODE)
                            476 	.area CABS    (ABS,CODE)
