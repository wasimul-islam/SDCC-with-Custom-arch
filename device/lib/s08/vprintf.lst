                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.cs08
                              6 	.module vprintf
                              7 	.optsdcc -ms08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _putchar
                             24 	.globl __print_format
                             25 	.globl _vprintf_PARM_2
                             26 	.globl _vprintf
                             27 	.globl _printf
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (PAG)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in ram
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; absolute ram data
                             37 ;--------------------------------------------------------
                             38 	.area IABS    (ABS)
                             39 	.area IABS    (ABS)
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area XABS    (ABS)
                             44 ;--------------------------------------------------------
                             45 ; initialized external ram data
                             46 ;--------------------------------------------------------
                             47 	.area XISEG
                             48 ;--------------------------------------------------------
                             49 ; extended address mode data
                             50 ;--------------------------------------------------------
                             51 	.area XSEG
   0000                      52 _vprintf_PARM_2:
   0000                      53 	.ds 2
                             54 ;--------------------------------------------------------
                             55 ; global & static initialisations
                             56 ;--------------------------------------------------------
                             57 	.area HOME    (CODE)
                             58 	.area GSINIT  (CODE)
                             59 	.area GSFINAL (CODE)
                             60 	.area GSINIT  (CODE)
                             61 ;--------------------------------------------------------
                             62 ; Home
                             63 ;--------------------------------------------------------
                             64 	.area HOME    (CODE)
                             65 	.area HOME    (CODE)
                             66 ;--------------------------------------------------------
                             67 ; code
                             68 ;--------------------------------------------------------
                             69 	.area CSEG    (CODE)
                             70 ;------------------------------------------------------------
                             71 ;Allocation info for local variables in function 'put_char_to_stdout'
                             72 ;------------------------------------------------------------
                             73 ;p                         Allocated to stack - sp +3
                             74 ;c                         Allocated to registers a 
                             75 ;------------------------------------------------------------
                             76 ;../vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                             77 ;	-----------------------------------------
                             78 ;	 function put_char_to_stdout
                             79 ;	-----------------------------------------
                             80 ;	Register assignment is optimal.
                             81 ;	Stack space usage: 0 bytes.
   0000                      82 _put_char_to_stdout:
                             83 ;../vprintf.c:37: putchar (c);
   0000 5F            [ 1]   84 	clrx
                             85 ;../vprintf.c:38: }
   0001 CCr00r00      [ 4]   86 	jmp	_putchar
                             87 ;------------------------------------------------------------
                             88 ;Allocation info for local variables in function 'vprintf'
                             89 ;------------------------------------------------------------
                             90 ;ap                        Allocated with name '_vprintf_PARM_2'
                             91 ;format                    Allocated to registers 
                             92 ;------------------------------------------------------------
                             93 ;../vprintf.c:41: vprintf (const char *format, va_list ap)
                             94 ;	-----------------------------------------
                             95 ;	 function vprintf
                             96 ;	-----------------------------------------
                             97 ;	Register assignment is optimal.
                             98 ;	Stack space usage: 0 bytes.
   0004                      99 _vprintf:
   0004 C7r00r01      [ 4]  100 	sta	(__print_format_PARM_3 + 1)
   0007 CFr00r00      [ 4]  101 	stx	__print_format_PARM_3
                            102 ;../vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
   000A 8C            [ 1]  103 	clrh
   000B 5F            [ 1]  104 	clrx
   000C 96r00r00      [ 5]  105 	sthx	__print_format_PARM_2
   000F 32r00r00      [ 5]  106 	ldhx	_vprintf_PARM_2
   0012 96r00r00      [ 5]  107 	sthx	__print_format_PARM_4
   0015 A6r00         [ 2]  108 	lda	#_put_char_to_stdout
   0017 AEs00         [ 2]  109 	ldx	#>_put_char_to_stdout
                            110 ;../vprintf.c:44: }
   0019 CCr00r00      [ 4]  111 	jmp	__print_format
                            112 ;------------------------------------------------------------
                            113 ;Allocation info for local variables in function 'printf'
                            114 ;------------------------------------------------------------
                            115 ;format                    Allocated to stack - sp +3
                            116 ;arg                       Allocated to registers 
                            117 ;i                         Allocated to registers a x 
                            118 ;------------------------------------------------------------
                            119 ;../vprintf.c:47: printf (const char *format, ...)
                            120 ;	-----------------------------------------
                            121 ;	 function printf
                            122 ;	-----------------------------------------
                            123 ;	Register assignment is optimal.
                            124 ;	Stack space usage: 0 bytes.
   001C                     125 _printf:
                            126 ;../vprintf.c:52: va_start (arg, format);
   001C 95            [ 2]  127 	tsx
   001D AF 02         [ 2]  128 	aix	#2
   001F AF 02         [ 2]  129 	aix	#2
   0021 96r00r00      [ 5]  130 	sthx	__print_format_PARM_4
                            131 ;../vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
   0024 8C            [ 1]  132 	clrh
   0025 5F            [ 1]  133 	clrx
   0026 96r00r00      [ 5]  134 	sthx	__print_format_PARM_2
   0029 95            [ 2]  135 	tsx
   002A E6 02         [ 3]  136 	lda	2,x
   002C C7r00r00      [ 4]  137 	sta	__print_format_PARM_3
   002F E6 03         [ 3]  138 	lda	3,x
   0031 C7r00r01      [ 4]  139 	sta	(__print_format_PARM_3 + 1)
   0034 A6r00         [ 2]  140 	lda	#_put_char_to_stdout
   0036 AEs00         [ 2]  141 	ldx	#>_put_char_to_stdout
                            142 ;../vprintf.c:56: return i;
                            143 ;../vprintf.c:57: }
   0038 CCr00r00      [ 4]  144 	jmp	__print_format
                            145 	.area CSEG    (CODE)
                            146 	.area CONST   (CODE)
                            147 	.area XINIT   (CODE)
                            148 	.area CABS    (ABS,CODE)
