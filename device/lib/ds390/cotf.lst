                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module cotf
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _tancotf
                                     35 	.globl _fabsf
                                     36 	.globl _cotf
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; uninitialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; absolute external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XABS    (ABS,XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; initialized external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XISEG   (XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; Home
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area HOME    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; code
                                     98 ;--------------------------------------------------------
                                     99 	.area CSEG    (CODE)
                                    100 ;------------------------------------------------------------
                                    101 ;Allocation info for local variables in function 'cotf'
                                    102 ;------------------------------------------------------------
                                    103 ;x                         Allocated to registers r2 r3 r4 r5 
                                    104 ;y                         Allocated to registers 
                                    105 ;------------------------------------------------------------
                                    106 ;	cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function cotf
                                    109 ;	-----------------------------------------
      000000                        110 _cotf:
                           000002   111 	ar2 = 0x02
                           000003   112 	ar3 = 0x03
                           000004   113 	ar4 = 0x04
                           000005   114 	ar5 = 0x05
                           000006   115 	ar6 = 0x06
                           000007   116 	ar7 = 0x07
                           000000   117 	ar0 = 0x00
                           000001   118 	ar1 = 0x01
      000000 AA 82            [ 8]  119 	mov	r2,dpl
      000002 AB 83            [ 8]  120 	mov	r3,dph
      000004 AC 93            [ 8]  121 	mov	r4,dpx
      000006 AD F0            [ 8]  122 	mov	r5,b
                                    123 ;	cotf.c:41: y=fabsf(x);
      000008 C0 02            [ 8]  124 	push	ar2
      00000A C0 03            [ 8]  125 	push	ar3
      00000C C0 04            [ 8]  126 	push	ar4
      00000E C0 05            [ 8]  127 	push	ar5
      000010 8A 82            [ 8]  128 	mov	dpl,r2
      000012 8B 83            [ 8]  129 	mov	dph,r3
      000014 8C 93            [ 8]  130 	mov	dpx,r4
      000016 8D F0            [ 8]  131 	mov	b,r5
      000018 12s00r00r00      [16]  132 	lcall	_fabsf
      00001C AE 82            [ 8]  133 	mov	r6,dpl
      00001E AF 83            [ 8]  134 	mov	r7,dph
      000020 A8 93            [ 8]  135 	mov	r0,dpx
      000022 A9 F0            [ 8]  136 	mov	r1,b
      000024 D0 05            [ 8]  137 	pop	ar5
      000026 D0 04            [ 8]  138 	pop	ar4
      000028 D0 03            [ 8]  139 	pop	ar3
      00002A D0 02            [ 8]  140 	pop	ar2
                                    141 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
                                    142 ;	genAssign: resultIsFar = TRUE
      00002C 90s00r00r00      [12]  143 	mov	dptr,#___fslt_PARM_2
      000030 74 60            [ 8]  144 	mov	a,#0x60
      000032 F0               [ 8]  145 	movx	@dptr,a
      000033 A3               [12]  146 	inc	dptr
      000034 74 42            [ 8]  147 	mov	a,#0x42
      000036 F0               [ 8]  148 	movx	@dptr,a
      000037 A3               [12]  149 	inc	dptr
      000038 74 A2            [ 8]  150 	mov	a,#0xa2
      00003A F0               [ 8]  151 	movx	@dptr,a
      00003B A3               [12]  152 	inc	dptr
      00003C 74 0D            [ 8]  153 	mov	a,#0x0d
      00003E F0               [ 8]  154 	movx	@dptr,a
      00003F C0 02            [ 8]  155 	push	ar2
      000041 C0 03            [ 8]  156 	push	ar3
      000043 C0 04            [ 8]  157 	push	ar4
      000045 C0 05            [ 8]  158 	push	ar5
      000047 8E 82            [ 8]  159 	mov	dpl,r6
      000049 8F 83            [ 8]  160 	mov	dph,r7
      00004B 88 93            [ 8]  161 	mov	dpx,r0
      00004D 89 F0            [ 8]  162 	mov	b,r1
      00004F 12s00r00r00      [16]  163 	lcall	___fslt
      000053 D0 05            [ 8]  164 	pop	ar5
      000055 D0 04            [ 8]  165 	pop	ar4
      000057 D0 03            [ 8]  166 	pop	ar3
      000059 D0 02            [ 8]  167 	pop	ar2
      00005B E5 82            [ 8]  168 	mov	a,dpl
      00005D 60 38            [12]  169 	jz  00105$
      00005F                        170 00116$:
                                    171 ;	cotf.c:44: errno = ERANGE;
                                    172 ;	genAssign: resultIsFar = TRUE
      00005F 90s00r00r00      [12]  173 	mov	dptr,#_errno
      000063 74 22            [ 8]  174 	mov	a,#0x22
      000065 F0               [ 8]  175 	movx	@dptr,a
      000066 E4               [ 4]  176 	clr	a
      000067 A3               [12]  177 	inc	dptr
      000068 F0               [ 8]  178 	movx	@dptr,a
                                    179 ;	cotf.c:45: if (x<0.0)
                                    180 ;	genAssign: resultIsFar = TRUE
      000069 90s00r00r00      [12]  181 	mov	dptr,#___fslt_PARM_2
      00006D E4               [ 4]  182 	clr	a
      00006E F0               [ 8]  183 	movx	@dptr,a
      00006F A3               [12]  184 	inc	dptr
      000070 F0               [ 8]  185 	movx	@dptr,a
      000071 A3               [12]  186 	inc	dptr
      000072 F0               [ 8]  187 	movx	@dptr,a
      000073 A3               [12]  188 	inc	dptr
      000074 F0               [ 8]  189 	movx	@dptr,a
      000075 8A 82            [ 8]  190 	mov	dpl,r2
      000077 8B 83            [ 8]  191 	mov	dph,r3
      000079 8C 93            [ 8]  192 	mov	dpx,r4
      00007B 8D F0            [ 8]  193 	mov	b,r5
      00007D 12s00r00r00      [16]  194 	lcall	___fslt
      000081 E5 82            [ 8]  195 	mov	a,dpl
      000083 60 09            [12]  196 	jz  00102$
      000085                        197 00117$:
                                    198 ;	cotf.c:46: return -HUGE_VALF;
      000085 90 7F FF FF      [12]  199 	mov	dptr,#0x7fffff
      000089 75 F0 FF         [12]  200 	mov	b,#0xff
      00008C 80 1C            [12]  201 	sjmp 00106$
      00008E                        202 00102$:
                                    203 ;	cotf.c:48: return +HUGE_VALF;
      00008E 90 7F FF FF      [12]  204 	mov	dptr,#0x7fffff
      000092 75 F0 7F         [12]  205 	mov	b,#0x7f
      000095 80 13            [12]  206 	sjmp 00106$
      000097                        207 00105$:
                                    208 ;	cotf.c:50: return tancotf(x, 1);
                                    209 ;	genAssign: resultIsFar = TRUE
      000097 90s00r00r00      [12]  210 	mov	dptr,#_tancotf_PARM_2
      00009B 74 01            [ 8]  211 	mov	a,#0x01
      00009D F0               [ 8]  212 	movx	@dptr,a
      00009E 8A 82            [ 8]  213 	mov	dpl,r2
      0000A0 8B 83            [ 8]  214 	mov	dph,r3
      0000A2 8C 93            [ 8]  215 	mov	dpx,r4
      0000A4 8D F0            [ 8]  216 	mov	b,r5
      0000A6 12s00r00r00      [16]  217 	lcall	_tancotf
      0000AA                        218 00106$:
                                    219 ;	cotf.c:51: }
      0000AA 22               [16]  220 	ret
                                    221 	.area CSEG    (CODE)
                                    222 	.area CONST   (CODE)
                                    223 	.area XINIT   (CODE)
                                    224 	.area CABS    (ABS,CODE)
