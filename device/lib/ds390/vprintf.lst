                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module vprintf
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _putchar
                                     35 	.globl __print_format
                                     36 	.globl _vprintf_PARM_2
                                     37 	.globl _vprintf
                                     38 	.globl _printf
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _vprintf_PARM_2:
      000000                         79 	.ds 4
                                     80 ;--------------------------------------------------------
                                     81 ; absolute external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XABS    (ABS,XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; initialized external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XISEG   (XDATA)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'put_char_to_stdout'
                                    106 ;------------------------------------------------------------
                                    107 ;p                         Allocated to stack - _bp -8
                                    108 ;c                         Allocated to registers r2 
                                    109 ;------------------------------------------------------------
                                    110 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                                    111 ;	-----------------------------------------
                                    112 ;	 function put_char_to_stdout
                                    113 ;	-----------------------------------------
      000000                        114 _put_char_to_stdout:
                           000002   115 	ar2 = 0x02
                           000003   116 	ar3 = 0x03
                           000004   117 	ar4 = 0x04
                           000005   118 	ar5 = 0x05
                           000006   119 	ar6 = 0x06
                           000007   120 	ar7 = 0x07
                           000000   121 	ar0 = 0x00
                           000001   122 	ar1 = 0x01
      000000 C0*00            [ 8]  123 	push	_bpx
      000002 C0*01            [ 8]  124 	push	_bpx+1
      000004 85 81*00         [12]  125 	mov	_bpx,sp
      000007 85 9B*01         [12]  126 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  127 	anl	_bpx+1,#3
      00000D AA 82            [ 8]  128 	mov	r2,dpl
                                    129 ;	vprintf.c:37: putchar (c);
      00000F 8A 84            [ 8]  130 	mov	dpl1,r2
      000011 75 85 00         [12]  131 	mov	dph1,#0x00
      000014 85 84 82         [12]  132 	mov	dpl,dpl1
      000017 85 85 83         [12]  133 	mov	dph,dph1
      00001A 12s00r00r00      [16]  134 	lcall	_putchar
      00001E                        135 00101$:
                                    136 ;	vprintf.c:38: }
      00001E 85*00 81         [12]  137 	mov	sp,_bpx
      000021 85*01 9B         [12]  138 	mov	esp,_bpx+1
      000024 D0*01            [ 8]  139 	pop	_bpx+1
      000026 D0*00            [ 8]  140 	pop	_bpx
      000028 22               [16]  141 	ret
                                    142 ;------------------------------------------------------------
                                    143 ;Allocation info for local variables in function 'vprintf'
                                    144 ;------------------------------------------------------------
                                    145 ;ap                        Allocated with name '_vprintf_PARM_2'
                                    146 ;format                    Allocated to registers r2 r3 r4 r5 
                                    147 ;------------------------------------------------------------
                                    148 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                                    149 ;	-----------------------------------------
                                    150 ;	 function vprintf
                                    151 ;	-----------------------------------------
      000029                        152 _vprintf:
      000029 AA 82            [ 8]  153 	mov	r2,dpl
      00002B AB 83            [ 8]  154 	mov	r3,dph
      00002D AC 93            [ 8]  155 	mov	r4,dpx
      00002F AD F0            [ 8]  156 	mov	r5,b
                                    157 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
      000031 90s00r00r00      [12]  158 	mov	dptr,#_vprintf_PARM_2
                                    159 ;	genAssign: resultIsFar = FALSE
      000035 E0               [ 8]  160 	movx	a,@dptr
      000036 FE               [ 4]  161 	mov	r6,a
      000037 A3               [12]  162 	inc	dptr
      000038 E0               [ 8]  163 	movx	a,@dptr
      000039 FF               [ 4]  164 	mov	r7,a
      00003A A3               [12]  165 	inc	dptr
      00003B E0               [ 8]  166 	movx	a,@dptr
      00003C F8               [ 4]  167 	mov	r0,a
      00003D A3               [12]  168 	inc	dptr
      00003E E0               [ 8]  169 	movx	a,@dptr
      00003F F9               [ 4]  170 	mov	r1,a
                                    171 ;	genAssign: resultIsFar = TRUE
      000040 90s00r00r00      [12]  172 	mov	dptr,#__print_format_PARM_2
      000044 E4               [ 4]  173 	clr	a
      000045 F0               [ 8]  174 	movx	@dptr,a
      000046 A3               [12]  175 	inc	dptr
      000047 F0               [ 8]  176 	movx	@dptr,a
      000048 A3               [12]  177 	inc	dptr
      000049 F0               [ 8]  178 	movx	@dptr,a
      00004A A3               [12]  179 	inc	dptr
      00004B E4               [ 4]  180 	clr	a
      00004C F0               [ 8]  181 	movx	@dptr,a
                                    182 ;	genAssign: resultIsFar = TRUE
      00004D 90s00r00r00      [12]  183 	mov	dptr,#__print_format_PARM_3
      000051 EA               [ 4]  184 	mov	a,r2
      000052 F0               [ 8]  185 	movx	@dptr,a
      000053 A3               [12]  186 	inc	dptr
      000054 EB               [ 4]  187 	mov	a,r3
      000055 F0               [ 8]  188 	movx	@dptr,a
      000056 A3               [12]  189 	inc	dptr
      000057 EC               [ 4]  190 	mov	a,r4
      000058 F0               [ 8]  191 	movx	@dptr,a
      000059 A3               [12]  192 	inc	dptr
      00005A ED               [ 4]  193 	mov	a,r5
      00005B F0               [ 8]  194 	movx	@dptr,a
                                    195 ;	genAssign: resultIsFar = TRUE
      00005C 90s00r00r00      [12]  196 	mov	dptr,#__print_format_PARM_4
      000060 EE               [ 4]  197 	mov	a,r6
      000061 F0               [ 8]  198 	movx	@dptr,a
      000062 A3               [12]  199 	inc	dptr
      000063 EF               [ 4]  200 	mov	a,r7
      000064 F0               [ 8]  201 	movx	@dptr,a
      000065 A3               [12]  202 	inc	dptr
      000066 E8               [ 4]  203 	mov	a,r0
      000067 F0               [ 8]  204 	movx	@dptr,a
      000068 A3               [12]  205 	inc	dptr
      000069 E9               [ 4]  206 	mov	a,r1
      00006A F0               [ 8]  207 	movx	@dptr,a
      00006B 90s00r00r00      [12]  208 	mov dptr,#_put_char_to_stdout
      00006F 12s00r00r00      [16]  209 	lcall	__print_format
      000073                        210 00101$:
                                    211 ;	vprintf.c:44: }
      000073 22               [16]  212 	ret
                                    213 ;------------------------------------------------------------
                                    214 ;Allocation info for local variables in function 'printf'
                                    215 ;------------------------------------------------------------
                                    216 ;format                    Allocated to stack - _bp -8
                                    217 ;arg                       Allocated to registers r2 r3 r4 r5 
                                    218 ;i                         Allocated to registers r2 r3 
                                    219 ;------------------------------------------------------------
                                    220 ;	vprintf.c:47: printf (const char *format, ...)
                                    221 ;	-----------------------------------------
                                    222 ;	 function printf
                                    223 ;	-----------------------------------------
      000074                        224 _printf:
      000074 C0*00            [ 8]  225 	push	_bpx
      000076 C0*01            [ 8]  226 	push	_bpx+1
      000078 85 81*00         [12]  227 	mov	_bpx,sp
      00007B 85 9B*01         [12]  228 	mov	_bpx+1,esp
      00007E 53*01 03         [12]  229 	anl	_bpx+1,#3
                                    230 ;	vprintf.c:52: va_start (arg, format);
      000081 E5*00            [ 8]  231 	mov	a,_bpx
      000083 24 F8            [ 8]  232 	add	a,#0xf8
      000085 F5 F0            [ 8]  233 	mov	b,a
      000087 E5*01            [ 8]  234 	mov	a,_bpx+1
      000089 34 FF            [ 8]  235 	addc	a,#0xff
      00008B AA F0            [ 8]  236 	mov	r2,b
      00008D FB               [ 4]  237 	mov	r3,a
      00008E 7C 40            [ 8]  238 	mov	r4,#0x40
      000090 7D 00            [ 8]  239 	mov	r5,#0x00
                                    240 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
      000092 E5*00            [ 8]  241 	mov	a,_bpx
      000094 C3               [ 4]  242 	clr	c
      000095 94 08            [ 8]  243 	subb	a,#0x08
      000097 F5 82            [ 8]  244 	mov	dpl,a
      000099 E5*01            [ 8]  245 	mov	a,_bpx+1
      00009B 94 00            [ 8]  246 	subb	a,#0x00
      00009D F5 83            [ 8]  247 	mov	dph,a
      00009F 75 93 40         [12]  248 	mov	dpx,#0x40
                                    249 ;	genAssign: resultIsFar = FALSE
      0000A2 E0               [ 8]  250 	movx	a,@dptr
      0000A3 FE               [ 4]  251 	mov	r6,a
      0000A4 A3               [12]  252 	inc	dptr
      0000A5 E0               [ 8]  253 	movx	a,@dptr
      0000A6 FF               [ 4]  254 	mov	r7,a
      0000A7 A3               [12]  255 	inc	dptr
      0000A8 E0               [ 8]  256 	movx	a,@dptr
      0000A9 F8               [ 4]  257 	mov	r0,a
      0000AA A3               [12]  258 	inc	dptr
      0000AB E0               [ 8]  259 	movx	a,@dptr
      0000AC F9               [ 4]  260 	mov	r1,a
                                    261 ;	genAssign: resultIsFar = TRUE
      0000AD 90s00r00r00      [12]  262 	mov	dptr,#__print_format_PARM_2
      0000B1 E4               [ 4]  263 	clr	a
      0000B2 F0               [ 8]  264 	movx	@dptr,a
      0000B3 A3               [12]  265 	inc	dptr
      0000B4 F0               [ 8]  266 	movx	@dptr,a
      0000B5 A3               [12]  267 	inc	dptr
      0000B6 F0               [ 8]  268 	movx	@dptr,a
      0000B7 A3               [12]  269 	inc	dptr
      0000B8 E4               [ 4]  270 	clr	a
      0000B9 F0               [ 8]  271 	movx	@dptr,a
                                    272 ;	genAssign: resultIsFar = TRUE
      0000BA 90s00r00r00      [12]  273 	mov	dptr,#__print_format_PARM_3
      0000BE EE               [ 4]  274 	mov	a,r6
      0000BF F0               [ 8]  275 	movx	@dptr,a
      0000C0 A3               [12]  276 	inc	dptr
      0000C1 EF               [ 4]  277 	mov	a,r7
      0000C2 F0               [ 8]  278 	movx	@dptr,a
      0000C3 A3               [12]  279 	inc	dptr
      0000C4 E8               [ 4]  280 	mov	a,r0
      0000C5 F0               [ 8]  281 	movx	@dptr,a
      0000C6 A3               [12]  282 	inc	dptr
      0000C7 E9               [ 4]  283 	mov	a,r1
      0000C8 F0               [ 8]  284 	movx	@dptr,a
                                    285 ;	genAssign: resultIsFar = TRUE
      0000C9 90s00r00r00      [12]  286 	mov	dptr,#__print_format_PARM_4
      0000CD EA               [ 4]  287 	mov	a,r2
      0000CE F0               [ 8]  288 	movx	@dptr,a
      0000CF A3               [12]  289 	inc	dptr
      0000D0 EB               [ 4]  290 	mov	a,r3
      0000D1 F0               [ 8]  291 	movx	@dptr,a
      0000D2 A3               [12]  292 	inc	dptr
      0000D3 EC               [ 4]  293 	mov	a,r4
      0000D4 F0               [ 8]  294 	movx	@dptr,a
      0000D5 A3               [12]  295 	inc	dptr
      0000D6 ED               [ 4]  296 	mov	a,r5
      0000D7 F0               [ 8]  297 	movx	@dptr,a
      0000D8 90s00r00r00      [12]  298 	mov dptr,#_put_char_to_stdout
      0000DC 12s00r00r00      [16]  299 	lcall	__print_format
      0000E0 AA 82            [ 8]  300 	mov	r2,dpl
      0000E2 AB 83            [ 8]  301 	mov	r3,dph
                                    302 ;	genAssign: resultIsFar = FALSE
      0000E4 8A 82            [ 8]  303 	mov	dpl,r2
      0000E6 8B 83            [ 8]  304 	mov	dph,r3
                                    305 ;	vprintf.c:56: return i;
      0000E8                        306 00101$:
                                    307 ;	vprintf.c:57: }
      0000E8 85*00 81         [12]  308 	mov	sp,_bpx
      0000EB 85*01 9B         [12]  309 	mov	esp,_bpx+1
      0000EE D0*01            [ 8]  310 	pop	_bpx+1
      0000F0 D0*00            [ 8]  311 	pop	_bpx
      0000F2 22               [16]  312 	ret
                                    313 	.area CSEG    (CODE)
                                    314 	.area CONST   (CODE)
                                    315 	.area XINIT   (CODE)
                                    316 	.area CABS    (ABS,CODE)
