                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _gets
                                     35 	.globl _putchar
                                     36 	.globl _getchar
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; uninitialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 _gets_s_65536_11:
      000000                         77 	.ds 4
                                     78 ;--------------------------------------------------------
                                     79 ; absolute external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XABS    (ABS,XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; initialized external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XISEG   (XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function 'gets'
                                    104 ;------------------------------------------------------------
                                    105 ;s                         Allocated with name '_gets_s_65536_11'
                                    106 ;c                         Allocated to registers r0 
                                    107 ;count                     Allocated to registers r4 r5 
                                    108 ;------------------------------------------------------------
                                    109 ;	gets.c:32: gets (char *s)
                                    110 ;	-----------------------------------------
                                    111 ;	 function gets
                                    112 ;	-----------------------------------------
      000000                        113 _gets:
                           000002   114 	ar2 = 0x02
                           000003   115 	ar3 = 0x03
                           000004   116 	ar4 = 0x04
                           000005   117 	ar5 = 0x05
                           000006   118 	ar6 = 0x06
                           000007   119 	ar7 = 0x07
                           000000   120 	ar0 = 0x00
                           000001   121 	ar1 = 0x01
      000000 75 86 01         [12]  122 	mov     dps, #1
      000003 90s00r00r00      [12]  123 	mov     dptr, #_gets_s_65536_11
      000007 E5 82            [ 8]  124 	mov	a,dpl
      000009 F0               [ 8]  125 	movx	@dptr,a
      00000A A3               [12]  126 	inc	dptr
      00000B E5 83            [ 8]  127 	mov	a,dph
      00000D F0               [ 8]  128 	movx	@dptr,a
      00000E A3               [12]  129 	inc	dptr
      00000F E5 93            [ 8]  130 	mov	a,dpx
      000011 F0               [ 8]  131 	movx	@dptr,a
      000012 A3               [12]  132 	inc	dptr
      000013 E5 F0            [ 8]  133 	mov	a,b
      000015 F0               [ 8]  134 	movx	@dptr,a
      000016 75 86 00         [12]  135 	mov	dps,#0
                                    136 ;	gets.c:35: unsigned int count = 0;
                                    137 ;	genAssign: resultIsFar = FALSE
      000019 7C 00            [ 8]  138 	mov	r4,#0x00
      00001B 7D 00            [ 8]  139 	mov	r5,#0x00
                                    140 ;	gets.c:37: while (1)
      00001D                        141 00109$:
                                    142 ;	gets.c:39: c = getchar ();
      00001D C0 04            [ 8]  143 	push	ar4
      00001F C0 05            [ 8]  144 	push	ar5
      000021 12s00r00r00      [16]  145 	lcall	_getchar
      000025 A8 82            [ 8]  146 	mov	r0,dpl
      000027 A9 83            [ 8]  147 	mov	r1,dph
      000029 D0 05            [ 8]  148 	pop	ar5
      00002B D0 04            [ 8]  149 	pop	ar4
                                    150 ;	gets.c:40: switch(c)
      00002D B8 08 02         [16]  151 	cjne	r0,#0x08,00133$
      000030 80 0E            [12]  152 	sjmp 00101$
      000032                        153 00133$:
      000032 B8 0A 02         [16]  154 	cjne	r0,#0x0a,00134$
      000035 80 71            [12]  155 	sjmp 00105$
      000037                        156 00134$:
      000037 B8 0D 02         [16]  157 	cjne	r0,#0x0d,00135$
      00003A 80 6C            [12]  158 	sjmp 00105$
      00003C                        159 00135$:
      00003C 02s00r00rF1      [16]  160 	ljmp	00106$
                                    161 ;	gets.c:42: case '\b': /* backspace */
      000040                        162 00101$:
                                    163 ;	gets.c:43: if (count)
      000040 EC               [ 4]  164 	mov	a,r4
      000041 4D               [ 4]  165 	orl	a,r5
      000042 60 D9            [12]  166 	jz  00109$
      000044                        167 00136$:
                                    168 ;	gets.c:45: putchar ('\b');
      000044 C0 04            [ 8]  169 	push	ar4
      000046 C0 05            [ 8]  170 	push	ar5
      000048 90 00 00 08      [12]  171 	mov  dptr,#0x0008
      00004C 12s00r00r00      [16]  172 	lcall	_putchar
      000050 D0 05            [ 8]  173 	pop	ar5
      000052 D0 04            [ 8]  174 	pop	ar4
                                    175 ;	gets.c:46: putchar (' ');
      000054 C0 04            [ 8]  176 	push	ar4
      000056 C0 05            [ 8]  177 	push	ar5
      000058 90 00 00 20      [12]  178 	mov  dptr,#0x0020
      00005C 12s00r00r00      [16]  179 	lcall	_putchar
      000060 D0 05            [ 8]  180 	pop	ar5
      000062 D0 04            [ 8]  181 	pop	ar4
                                    182 ;	gets.c:47: putchar ('\b');
      000064 C0 04            [ 8]  183 	push	ar4
      000066 C0 05            [ 8]  184 	push	ar5
      000068 90 00 00 08      [12]  185 	mov  dptr,#0x0008
      00006C 12s00r00r00      [16]  186 	lcall	_putchar
      000070 D0 05            [ 8]  187 	pop	ar5
      000072 D0 04            [ 8]  188 	pop	ar4
                                    189 ;	gets.c:48: --s;
      000074 90s00r00r00      [12]  190 	mov	dptr,#_gets_s_65536_11
      000078 E0               [ 8]  191 	movx	a,@dptr
      000079 24 FF            [ 8]  192 	add	a,#0xff
      00007B F9               [ 4]  193 	mov	r1,a
      00007C A3               [12]  194 	inc	dptr
      00007D E0               [ 8]  195 	movx	a,@dptr
      00007E 34 FF            [ 8]  196 	addc	a,#0xff
      000080 FE               [ 4]  197 	mov	r6,a
      000081 A3               [12]  198 	inc	dptr
      000082 E0               [ 8]  199 	movx	a,@dptr
      000083 34 FF            [ 8]  200 	addc	a,#0xff
      000085 FF               [ 4]  201 	mov	r7,a
      000086 A3               [12]  202 	inc	dptr
      000087 E0               [ 8]  203 	movx	a,@dptr
      000088 FA               [ 4]  204 	mov	r2,a
                                    205 ;	genAssign: resultIsFar = TRUE
      000089 90s00r00r00      [12]  206 	mov	dptr,#_gets_s_65536_11
      00008D E9               [ 4]  207 	mov	a,r1
      00008E F0               [ 8]  208 	movx	@dptr,a
      00008F A3               [12]  209 	inc	dptr
      000090 EE               [ 4]  210 	mov	a,r6
      000091 F0               [ 8]  211 	movx	@dptr,a
      000092 A3               [12]  212 	inc	dptr
      000093 EF               [ 4]  213 	mov	a,r7
      000094 F0               [ 8]  214 	movx	@dptr,a
      000095 A3               [12]  215 	inc	dptr
      000096 EA               [ 4]  216 	mov	a,r2
      000097 F0               [ 8]  217 	movx	@dptr,a
                                    218 ;	gets.c:49: --count;
      000098 EC               [ 4]  219 	mov	a,r4
      000099 24 FF            [ 8]  220 	add	a,#0xff
      00009B FA               [ 4]  221 	mov	r2,a
      00009C ED               [ 4]  222 	mov	a,r5
      00009D 34 FF            [ 8]  223 	addc	a,#0xff
      00009F FB               [ 4]  224 	mov	r3,a
                                    225 ;	genAssign: resultIsFar = FALSE
      0000A0 8A 04            [ 8]  226 	mov	ar4,r2
      0000A2 8B 05            [ 8]  227 	mov	ar5,r3
                                    228 ;	gets.c:51: break;
      0000A4 02s00r00r1D      [16]  229 	ljmp	00109$
                                    230 ;	gets.c:54: case '\r': /* CR or LF */
      0000A8                        231 00105$:
                                    232 ;	gets.c:55: putchar ('\r');
      0000A8 90 00 00 0D      [12]  233 	mov  dptr,#0x000d
      0000AC 12s00r00r00      [16]  234 	lcall	_putchar
                                    235 ;	gets.c:56: putchar ('\n');
      0000B0 90 00 00 0A      [12]  236 	mov  dptr,#0x000a
      0000B4 12s00r00r00      [16]  237 	lcall	_putchar
                                    238 ;	gets.c:57: *s = 0;
      0000B8 90s00r00r00      [12]  239 	mov	dptr,#_gets_s_65536_11
      0000BC E0               [ 8]  240 	movx	a,@dptr
      0000BD C0 E0            [ 8]  241 	push	acc
      0000BF A3               [12]  242 	inc	dptr
      0000C0 E0               [ 8]  243 	movx	a,@dptr
      0000C1 C0 E0            [ 8]  244 	push	acc
      0000C3 A3               [12]  245 	inc	dptr
      0000C4 E0               [ 8]  246 	movx	a,@dptr
      0000C5 C0 E0            [ 8]  247 	push	acc
      0000C7 A3               [12]  248 	inc	dptr
      0000C8 E0               [ 8]  249 	movx	a,@dptr
      0000C9 F5 F0            [ 8]  250 	mov	b,a
      0000CB D0 93            [ 8]  251 	pop	dpx
      0000CD D0 83            [ 8]  252 	pop	dph
      0000CF D0 82            [ 8]  253 	pop	dpl
      0000D1 E4               [ 4]  254 	clr	a
      0000D2 12s00r00r00      [16]  255 	lcall	__gptrput
                                    256 ;	gets.c:58: return s;
      0000D6 75 86 01         [12]  257 	mov     dps, #1
      0000D9 90s00r00r00      [12]  258 	mov     dptr, #_gets_s_65536_11
      0000DD E0               [ 8]  259 	movx	a,@dptr
      0000DE F5 82            [ 8]  260 	mov	dpl,a
      0000E0 A3               [12]  261 	inc	dptr
      0000E1 E0               [ 8]  262 	movx	a,@dptr
      0000E2 F5 83            [ 8]  263 	mov	dph,a
      0000E4 A3               [12]  264 	inc	dptr
      0000E5 E0               [ 8]  265 	movx	a,@dptr
      0000E6 F5 93            [ 8]  266 	mov	dpx,a
      0000E8 A3               [12]  267 	inc	dptr
      0000E9 E0               [ 8]  268 	movx	a,@dptr
      0000EA F5 F0            [ 8]  269 	mov	b,a
      0000EC 75 86 00         [12]  270 	mov	dps,#0
                                    271 ;	gets.c:60: default:
      0000EF 80 53            [12]  272 	sjmp 00111$
      0000F1                        273 00106$:
                                    274 ;	gets.c:61: *s++ = c;
      0000F1 90s00r00r00      [12]  275 	mov	dptr,#_gets_s_65536_11
      0000F5 E0               [ 8]  276 	movx	a,@dptr
      0000F6 C0 E0            [ 8]  277 	push	acc
      0000F8 A3               [12]  278 	inc	dptr
      0000F9 E0               [ 8]  279 	movx	a,@dptr
      0000FA C0 E0            [ 8]  280 	push	acc
      0000FC A3               [12]  281 	inc	dptr
      0000FD E0               [ 8]  282 	movx	a,@dptr
      0000FE C0 E0            [ 8]  283 	push	acc
      000100 A3               [12]  284 	inc	dptr
      000101 E0               [ 8]  285 	movx	a,@dptr
      000102 F5 F0            [ 8]  286 	mov	b,a
      000104 D0 93            [ 8]  287 	pop	dpx
      000106 D0 83            [ 8]  288 	pop	dph
      000108 D0 82            [ 8]  289 	pop	dpl
      00010A E8               [ 4]  290 	mov	a,r0
      00010B 12s00r00r00      [16]  291 	lcall	__gptrput
      00010F 90s00r00r00      [12]  292 	mov	dptr,#_gets_s_65536_11
      000113 E0               [ 8]  293 	movx	a,@dptr
      000114 24 01            [ 8]  294 	add	a,#0x01
      000116 F0               [ 8]  295 	movx	@dptr,a
      000117 A3               [12]  296 	inc	dptr
      000118 E0               [ 8]  297 	movx	a,@dptr
      000119 34 00            [ 8]  298 	addc	a,#0x00
      00011B F0               [ 8]  299 	movx	@dptr,a
      00011C A3               [12]  300 	inc	dptr
      00011D E0               [ 8]  301 	movx	a,@dptr
      00011E 34 00            [ 8]  302 	addc	a,#0x00
      000120 F0               [ 8]  303 	movx	@dptr,a
      000121 A3               [12]  304 	inc	dptr
      000122 E0               [ 8]  305 	movx	a,@dptr
      000123 F0               [ 8]  306 	movx	@dptr,a
                                    307 ;	gets.c:62: ++count;
      000124 0C               [ 4]  308 	inc	r4
      000125 BC 00 01         [16]  309 	cjne	r4,#0x00,00137$
      000128 0D               [ 4]  310 	inc	r5
      000129                        311 00137$:
                                    312 ;	gets.c:63: putchar (c);
      000129 88 84            [ 8]  313 	mov	dpl1,r0
      00012B 75 85 00         [12]  314 	mov	dph1,#0x00
      00012E C0 04            [ 8]  315 	push	ar4
      000130 C0 05            [ 8]  316 	push	ar5
      000132 85 84 82         [12]  317 	mov	dpl,dpl1
      000135 85 85 83         [12]  318 	mov	dph,dph1
      000138 12s00r00r00      [16]  319 	lcall	_putchar
      00013C D0 05            [ 8]  320 	pop	ar5
      00013E D0 04            [ 8]  321 	pop	ar4
                                    322 ;	gets.c:65: }
      000140 02s00r00r1D      [16]  323 	ljmp	00109$
      000144                        324 00111$:
                                    325 ;	gets.c:67: }
      000144 22               [16]  326 	ret
                                    327 	.area CSEG    (CODE)
                                    328 	.area CONST   (CODE)
                                    329 	.area XINIT   (CODE)
                                    330 	.area CABS    (ABS,CODE)
