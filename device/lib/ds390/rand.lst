                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rand
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _rand
                                     35 	.globl _srand
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 	.area	OSEG    (OVR,DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; uninitialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; absolute external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XABS    (ABS,XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; initialized external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XISEG   (XDATA)
      000000                         84 _s:
      000000                         85 	.ds 4
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function 'rand'
                                    104 ;------------------------------------------------------------
                                    105 ;t                         Allocated to registers r2 r3 r4 r5 
                                    106 ;------------------------------------------------------------
                                    107 ;	rand.c:40: int rand(void)
                                    108 ;	-----------------------------------------
                                    109 ;	 function rand
                                    110 ;	-----------------------------------------
      000000                        111 _rand:
                           000002   112 	ar2 = 0x02
                           000003   113 	ar3 = 0x03
                           000004   114 	ar4 = 0x04
                           000005   115 	ar5 = 0x05
                           000006   116 	ar6 = 0x06
                           000007   117 	ar7 = 0x07
                           000000   118 	ar0 = 0x00
                           000001   119 	ar1 = 0x01
                                    120 ;	rand.c:42: register unsigned long t = s;
      000000 90s00r00r00      [12]  121 	mov	dptr,#_s
                                    122 ;	genAssign: resultIsFar = FALSE
      000004 E0               [ 8]  123 	movx	a,@dptr
      000005 FA               [ 4]  124 	mov	r2,a
      000006 A3               [12]  125 	inc	dptr
      000007 E0               [ 8]  126 	movx	a,@dptr
      000008 FB               [ 4]  127 	mov	r3,a
      000009 A3               [12]  128 	inc	dptr
      00000A E0               [ 8]  129 	movx	a,@dptr
      00000B FC               [ 4]  130 	mov	r4,a
      00000C A3               [12]  131 	inc	dptr
      00000D E0               [ 8]  132 	movx	a,@dptr
      00000E FD               [ 4]  133 	mov	r5,a
                                    134 ;	rand.c:44: t ^= t >> 10;
      00000F 8B 06            [ 8]  135 	mov	ar6,r3
      000011 EC               [ 4]  136 	mov	a,r4
      000012 C3               [ 4]  137 	clr	c
      000013 13               [ 4]  138 	rrc	a
      000014 CE               [ 4]  139 	xch	a,r6
      000015 13               [ 4]  140 	rrc	a
      000016 CE               [ 4]  141 	xch	a,r6
      000017 C3               [ 4]  142 	clr	c
      000018 13               [ 4]  143 	rrc	a
      000019 CE               [ 4]  144 	xch	a,r6
      00001A 13               [ 4]  145 	rrc	a
      00001B CE               [ 4]  146 	xch	a,r6
      00001C FF               [ 4]  147 	mov	r7,a
      00001D ED               [ 4]  148 	mov	a,r5
      00001E 03               [ 4]  149 	rr	a
      00001F 03               [ 4]  150 	rr	a
      000020 54 C0            [ 8]  151 	anl	a,#0xc0
      000022 4F               [ 4]  152 	orl	a,r7
      000023 FF               [ 4]  153 	mov	r7,a
      000024 ED               [ 4]  154 	mov	a,r5
      000025 03               [ 4]  155 	rr	a
      000026 03               [ 4]  156 	rr	a
      000027 54 3F            [ 8]  157 	anl	a,#0x3f
      000029 F8               [ 4]  158 	mov	r0,a
      00002A 79 00            [ 8]  159 	mov	r1,#0x00
      00002C EA               [ 4]  160 	mov	a,r2
      00002D 62 06            [ 8]  161 	xrl	ar6,a
      00002F EB               [ 4]  162 	mov	a,r3
      000030 62 07            [ 8]  163 	xrl	ar7,a
      000032 EC               [ 4]  164 	mov	a,r4
      000033 62 00            [ 8]  165 	xrl	ar0,a
      000035 ED               [ 4]  166 	mov	a,r5
      000036 62 01            [ 8]  167 	xrl	ar1,a
                                    168 ;	rand.c:45: t ^= t << 9;
      000038 EE               [ 4]  169 	mov	a,r6
      000039 25 E0            [ 8]  170 	add	a,acc
      00003B FB               [ 4]  171 	mov	r3,a
      00003C EF               [ 4]  172 	mov	a,r7
      00003D 33               [ 4]  173 	rlc	a
      00003E FC               [ 4]  174 	mov	r4,a
      00003F E8               [ 4]  175 	mov	a,r0
      000040 33               [ 4]  176 	rlc	a
      000041 FD               [ 4]  177 	mov	r5,a
      000042 7A 00            [ 8]  178 	mov	r2,#0x00
      000044 EE               [ 4]  179 	mov	a,r6
      000045 62 02            [ 8]  180 	xrl	ar2,a
      000047 EF               [ 4]  181 	mov	a,r7
      000048 62 03            [ 8]  182 	xrl	ar3,a
      00004A E8               [ 4]  183 	mov	a,r0
      00004B 62 04            [ 8]  184 	xrl	ar4,a
      00004D E9               [ 4]  185 	mov	a,r1
      00004E 62 05            [ 8]  186 	xrl	ar5,a
                                    187 ;	rand.c:46: t ^= t >> 25;
      000050 ED               [ 4]  188 	mov	a,r5
      000051 C3               [ 4]  189 	clr	c
      000052 13               [ 4]  190 	rrc	a
      000053 FE               [ 4]  191 	mov	r6,a
      000054 E4               [ 4]  192 	clr  a
      000055 FF               [ 4]  193 	mov  r7,a
      000056 F8               [ 4]  194 	mov  r0,a
      000057 F9               [ 4]  195 	mov  r1,a
      000058 EE               [ 4]  196 	mov  a,r6
      000059 62 02            [ 8]  197 	xrl	ar2,a
      00005B EF               [ 4]  198 	mov	a,r7
      00005C 62 03            [ 8]  199 	xrl	ar3,a
      00005E E8               [ 4]  200 	mov	a,r0
      00005F 62 04            [ 8]  201 	xrl	ar4,a
      000061 E9               [ 4]  202 	mov	a,r1
      000062 62 05            [ 8]  203 	xrl	ar5,a
                                    204 ;	rand.c:48: s = t;
                                    205 ;	genAssign: resultIsFar = TRUE
      000064 90s00r00r00      [12]  206 	mov	dptr,#_s
      000068 EA               [ 4]  207 	mov	a,r2
      000069 F0               [ 8]  208 	movx	@dptr,a
      00006A A3               [12]  209 	inc	dptr
      00006B EB               [ 4]  210 	mov	a,r3
      00006C F0               [ 8]  211 	movx	@dptr,a
      00006D A3               [12]  212 	inc	dptr
      00006E EC               [ 4]  213 	mov	a,r4
      00006F F0               [ 8]  214 	movx	@dptr,a
      000070 A3               [12]  215 	inc	dptr
      000071 ED               [ 4]  216 	mov	a,r5
      000072 F0               [ 8]  217 	movx	@dptr,a
                                    218 ;	rand.c:50: return(t & RAND_MAX);
      000073 8A 82            [ 8]  219 	mov	dpl,r2
      000075 74 7F            [ 8]  220 	mov	a,#0x7f
      000077 5B               [ 4]  221 	anl	a,r3
      000078 F5 83            [ 8]  222 	mov	dph,a
      00007A                        223 00101$:
                                    224 ;	rand.c:51: }
      00007A 22               [16]  225 	ret
                                    226 ;------------------------------------------------------------
                                    227 ;Allocation info for local variables in function 'srand'
                                    228 ;------------------------------------------------------------
                                    229 ;seed                      Allocated to registers r2 r3 
                                    230 ;------------------------------------------------------------
                                    231 ;	rand.c:53: void srand(unsigned int seed)
                                    232 ;	-----------------------------------------
                                    233 ;	 function srand
                                    234 ;	-----------------------------------------
      00007B                        235 _srand:
      00007B 85 82 84         [12]  236 	mov	dpl1,dpl
      00007E 85 83 85         [12]  237 	mov	dph1,dph
                                    238 ;	rand.c:55: s = seed | 0x80000000; /* s shall not become 0 */
      000081 AA 84            [ 8]  239 	mov	r2,dpl1
      000083 AB 85            [ 8]  240 	mov	r3,dph1
      000085 7C 00            [ 8]  241 	mov	r4,#0x00
      000087 7D 00            [ 8]  242 	mov	r5,#0x00
      000089 90s00r00r00      [12]  243 	mov	dptr,#_s
      00008D EA               [ 4]  244 	mov	a,r2
      00008E F0               [ 8]  245 	movx	@dptr,a
      00008F A3               [12]  246 	inc	dptr
      000090 EB               [ 4]  247 	mov	a,r3
      000091 F0               [ 8]  248 	movx	@dptr,a
      000092 A3               [12]  249 	inc	dptr
      000093 EC               [ 4]  250 	mov	a,r4
      000094 F0               [ 8]  251 	movx	@dptr,a
      000095 74 80            [ 8]  252 	mov	a,#0x80
      000097 4D               [ 4]  253 	orl	a,r5
      000098 A3               [12]  254 	inc	dptr
      000099 F0               [ 8]  255 	movx	@dptr,a
      00009A                        256 00101$:
                                    257 ;	rand.c:56: }
      00009A 22               [16]  258 	ret
                                    259 	.area CSEG    (CODE)
                                    260 	.area CONST   (CODE)
                                    261 	.area XINIT   (CODE)
      000000                        262 __xinit__s:
      000000 01 00 00 80            263 	.byte #0x01, #0x00, #0x00, #0x80	; 2147483649
                                    264 	.area CABS    (ABS,CODE)
