                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strndup
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _malloc
                                     35 	.globl ___memcpy
                                     36 	.globl _strlen
                                     37 	.globl _strndup_PARM_2
                                     38 	.globl _strndup
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _strndup_PARM_2:
      000000                         79 	.ds 2
      000002                         80 _strndup_s_65536_62:
      000002                         81 	.ds 4
      000006                         82 _strndup_l_65536_63:
      000006                         83 	.ds 2
      000008                         84 _strndup_r_65537_64:
      000008                         85 	.ds 4
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XABS    (ABS,XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; initialized external ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area XISEG   (XDATA)
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 	.area GSFINAL (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; Home
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME    (CODE)
                                    105 	.area HOME    (CODE)
                                    106 ;--------------------------------------------------------
                                    107 ; code
                                    108 ;--------------------------------------------------------
                                    109 	.area CSEG    (CODE)
                                    110 ;------------------------------------------------------------
                                    111 ;Allocation info for local variables in function 'strndup'
                                    112 ;------------------------------------------------------------
                                    113 ;n                         Allocated with name '_strndup_PARM_2'
                                    114 ;s                         Allocated with name '_strndup_s_65536_62'
                                    115 ;l                         Allocated with name '_strndup_l_65536_63'
                                    116 ;r                         Allocated with name '_strndup_r_65537_64'
                                    117 ;------------------------------------------------------------
                                    118 ;	strndup.c:33: char *strndup (const char *s, size_t n)
                                    119 ;	-----------------------------------------
                                    120 ;	 function strndup
                                    121 ;	-----------------------------------------
      000000                        122 _strndup:
                           000002   123 	ar2 = 0x02
                           000003   124 	ar3 = 0x03
                           000004   125 	ar4 = 0x04
                           000005   126 	ar5 = 0x05
                           000006   127 	ar6 = 0x06
                           000007   128 	ar7 = 0x07
                           000000   129 	ar0 = 0x00
                           000001   130 	ar1 = 0x01
      000000 75 86 01         [12]  131 	mov     dps, #1
      000003 90s00r00r02      [12]  132 	mov     dptr, #_strndup_s_65536_62
      000007 E5 82            [ 8]  133 	mov	a,dpl
      000009 F0               [ 8]  134 	movx	@dptr,a
      00000A A3               [12]  135 	inc	dptr
      00000B E5 83            [ 8]  136 	mov	a,dph
      00000D F0               [ 8]  137 	movx	@dptr,a
      00000E A3               [12]  138 	inc	dptr
      00000F E5 93            [ 8]  139 	mov	a,dpx
      000011 F0               [ 8]  140 	movx	@dptr,a
      000012 A3               [12]  141 	inc	dptr
      000013 E5 F0            [ 8]  142 	mov	a,b
      000015 F0               [ 8]  143 	movx	@dptr,a
                                    144 ;	strndup.c:35: size_t l = strlen (s);
      000016 75 86 01         [12]  145 	mov	dps, #1
      000019 90s00r00r02      [12]  146 	mov	dptr,#_strndup_s_65536_62
      00001D E0               [ 8]  147 	movx	a,@dptr
      00001E F5 82            [ 8]  148 	mov	dpl,a
      000020 A3               [12]  149 	inc	dptr
      000021 E0               [ 8]  150 	movx	a,@dptr
      000022 F5 83            [ 8]  151 	mov	dph,a
      000024 A3               [12]  152 	inc	dptr
      000025 E0               [ 8]  153 	movx	a,@dptr
      000026 F5 93            [ 8]  154 	mov	dpx,a
      000028 A3               [12]  155 	inc	dptr
      000029 E0               [ 8]  156 	movx	a,@dptr
      00002A F5 F0            [ 8]  157 	mov	b,a
      00002C 75 86 00         [12]  158 	mov	dps,#0
      00002F 12s00r00r00      [16]  159 	lcall	_strlen
      000033 AE 82            [ 8]  160 	mov	r6,dpl
      000035 AF 83            [ 8]  161 	mov	r7,dph
                                    162 ;	genAssign: resultIsFar = TRUE
      000037 90s00r00r06      [12]  163 	mov	dptr,#_strndup_l_65536_63
      00003B EE               [ 4]  164 	mov	a,r6
      00003C F0               [ 8]  165 	movx	@dptr,a
      00003D A3               [12]  166 	inc	dptr
      00003E EF               [ 4]  167 	mov	a,r7
      00003F F0               [ 8]  168 	movx	@dptr,a
                                    169 ;	strndup.c:36: if (l > n)
      000040 90s00r00r00      [12]  170 	mov	dptr,#_strndup_PARM_2
      000044 75 86 01         [12]  171 	mov	dps, #1
      000047 90s00r00r06      [12]  172 	mov	dptr, #_strndup_l_65536_63
      00004B 15 86            [ 8]  173 	dec	dps
      00004D C3               [ 4]  174 	clr	c
      00004E E0               [ 8]  175 	movx	a,@dptr
      00004F 75 86 01         [12]  176 	mov	dps,#1
      000052 C5 F0            [ 8]  177 	xch	a, b
      000054 E0               [ 8]  178 	movx	a,@dptr
      000055 75 86 00         [12]  179 	mov	dps,#0
      000058 C5 F0            [ 8]  180 	xch	a, b
      00005A 95 F0            [ 8]  181 	subb	a,b
      00005C A3               [12]  182 	inc	dptr
      00005D E0               [ 8]  183 	movx	a,@dptr
      00005E 75 86 01         [12]  184 	mov	dps,#1
      000061 C5 F0            [ 8]  185 	xch	a, b
      000063 A3               [12]  186 	inc	dptr
      000064 E0               [ 8]  187 	movx	a,@dptr
      000065 75 86 00         [12]  188 	mov	dps,#0
      000068 C5 F0            [ 8]  189 	xch	a, b
      00006A 95 F0            [ 8]  190 	subb	a,b
      00006C 50 14            [12]  191 	jnc  00102$
      00006E                        192 00115$:
                                    193 ;	strndup.c:37: l = n;
      00006E 90s00r00r00      [12]  194 	mov	dptr,#_strndup_PARM_2
                                    195 ;	genAssign: resultIsFar = TRUE
      000072 75 86 21         [12]  196 	mov	dps,#0x21
      000075 90s00r00r06      [12]  197 	mov	dptr,#_strndup_l_65536_63
      000079 E0               [ 8]  198 	movx	a,@dptr
      00007A F0               [ 8]  199 	movx	@dptr,a
      00007B A3               [12]  200 	inc	dptr
      00007C A3               [12]  201 	inc	dptr
      00007D E0               [ 8]  202 	movx	a,@dptr
      00007E F0               [ 8]  203 	movx	@dptr,a
      00007F 75 86 00         [12]  204 	mov	dps,#0
      000082                        205 00102$:
                                    206 ;	strndup.c:38: char *r = malloc (l + 1);
      000082 90s00r00r06      [12]  207 	mov	dptr,#_strndup_l_65536_63
      000086 E0               [ 8]  208 	movx	a,@dptr
      000087 24 01            [ 8]  209 	add	a,#0x01
      000089 F8               [ 4]  210 	mov	r0,a
      00008A A3               [12]  211 	inc	dptr
      00008B E0               [ 8]  212 	movx	a,@dptr
      00008C 34 00            [ 8]  213 	addc	a,#0x00
      00008E F9               [ 4]  214 	mov	r1,a
      00008F 88 82            [ 8]  215 	mov	dpl,r0
      000091 89 83            [ 8]  216 	mov	dph,r1
      000093 12s00r00r00      [16]  217 	lcall	_malloc
      000097 A8 82            [ 8]  218 	mov	r0,dpl
      000099 A9 83            [ 8]  219 	mov	r1,dph
      00009B AA 93            [ 8]  220 	mov	r2,dpx
      00009D 90s00r00r08      [12]  221 	mov	dptr,#_strndup_r_65537_64
      0000A1 E8               [ 4]  222 	mov	a,r0
      0000A2 F0               [ 8]  223 	movx	@dptr,a
      0000A3 A3               [12]  224 	inc	dptr
      0000A4 E9               [ 4]  225 	mov	a,r1
      0000A5 F0               [ 8]  226 	movx	@dptr,a
      0000A6 A3               [12]  227 	inc	dptr
      0000A7 EA               [ 4]  228 	mov	a,r2
      0000A8 F0               [ 8]  229 	movx	@dptr,a
      0000A9 A3               [12]  230 	inc	dptr
      0000AA E4               [ 4]  231 	clr	a
      0000AB F0               [ 8]  232 	movx	@dptr,a
                                    233 ;	strndup.c:39: if (r)
      0000AC 90s00r00r08      [12]  234 	mov	dptr,#_strndup_r_65537_64
      0000B0 E0               [ 8]  235 	movx	a,@dptr
      0000B1 F5 F0            [ 8]  236 	mov	b,a
      0000B3 A3               [12]  237 	inc	dptr
      0000B4 E0               [ 8]  238 	movx	a,@dptr
      0000B5 42 F0            [ 8]  239 	orl	b,a
      0000B7 A3               [12]  240 	inc	dptr
      0000B8 E0               [ 8]  241 	movx	a,@dptr
      0000B9 45 F0            [ 8]  242 	orl	a,b
      0000BB 70 04            [12]  243 	jnz	00116$
      0000BD 02s00r01r55      [16]  244 	ljmp	00104$
      0000C1                        245 00116$:
                                    246 ;	strndup.c:41: memcpy (r, s, l);
      0000C1 90s00r00r08      [12]  247 	mov	dptr,#_strndup_r_65537_64
                                    248 ;	genAssign: resultIsFar = FALSE
      0000C5 E0               [ 8]  249 	movx	a,@dptr
      0000C6 F8               [ 4]  250 	mov	r0,a
      0000C7 A3               [12]  251 	inc	dptr
      0000C8 E0               [ 8]  252 	movx	a,@dptr
      0000C9 F9               [ 4]  253 	mov	r1,a
      0000CA A3               [12]  254 	inc	dptr
      0000CB E0               [ 8]  255 	movx	a,@dptr
      0000CC FA               [ 4]  256 	mov	r2,a
      0000CD A3               [12]  257 	inc	dptr
      0000CE E0               [ 8]  258 	movx	a,@dptr
      0000CF FB               [ 4]  259 	mov	r3,a
      0000D0 90s00r00r02      [12]  260 	mov	dptr,#_strndup_s_65536_62
                                    261 ;	genAssign: resultIsFar = FALSE
      0000D4 E0               [ 8]  262 	movx	a,@dptr
      0000D5 FC               [ 4]  263 	mov	r4,a
      0000D6 A3               [12]  264 	inc	dptr
      0000D7 E0               [ 8]  265 	movx	a,@dptr
      0000D8 FD               [ 4]  266 	mov	r5,a
      0000D9 A3               [12]  267 	inc	dptr
      0000DA E0               [ 8]  268 	movx	a,@dptr
      0000DB FE               [ 4]  269 	mov	r6,a
      0000DC A3               [12]  270 	inc	dptr
      0000DD E0               [ 8]  271 	movx	a,@dptr
      0000DE FF               [ 4]  272 	mov	r7,a
      0000DF 90s00r00r00      [12]  273 	mov	dptr,#___memcpy_PARM_2
      0000E3 EC               [ 4]  274 	mov	a,r4
      0000E4 F0               [ 8]  275 	movx	@dptr,a
      0000E5 A3               [12]  276 	inc	dptr
      0000E6 ED               [ 4]  277 	mov	a,r5
      0000E7 F0               [ 8]  278 	movx	@dptr,a
      0000E8 A3               [12]  279 	inc	dptr
      0000E9 EE               [ 4]  280 	mov	a,r6
      0000EA F0               [ 8]  281 	movx	@dptr,a
      0000EB A3               [12]  282 	inc	dptr
      0000EC EF               [ 4]  283 	mov	a,r7
      0000ED F0               [ 8]  284 	movx	@dptr,a
      0000EE 90s00r00r06      [12]  285 	mov	dptr,#_strndup_l_65536_63
                                    286 ;	genAssign: resultIsFar = TRUE
      0000F2 75 86 21         [12]  287 	mov	dps,#0x21
      0000F5 90s00r00r00      [12]  288 	mov	dptr,#___memcpy_PARM_3
      0000F9 E0               [ 8]  289 	movx	a,@dptr
      0000FA F0               [ 8]  290 	movx	@dptr,a
      0000FB A3               [12]  291 	inc	dptr
      0000FC A3               [12]  292 	inc	dptr
      0000FD E0               [ 8]  293 	movx	a,@dptr
      0000FE F0               [ 8]  294 	movx	@dptr,a
      0000FF 75 86 00         [12]  295 	mov	dps,#0
      000102 88 82            [ 8]  296 	mov	dpl,r0
      000104 89 83            [ 8]  297 	mov	dph,r1
      000106 8A 93            [ 8]  298 	mov	dpx,r2
      000108 8B F0            [ 8]  299 	mov	b,r3
      00010A 12s00r00r00      [16]  300 	lcall	___memcpy
                                    301 ;	strndup.c:42: r[l] = 0;
      00010E 90s00r00r06      [12]  302 	mov	dptr,#_strndup_l_65536_63
      000112 75 86 01         [12]  303 	mov	dps, #1
      000115 90s00r00r08      [12]  304 	mov	dptr, #_strndup_r_65537_64
      000119 15 86            [ 8]  305 	dec	dps
      00011B E0               [ 8]  306 	movx	a,@dptr
      00011C C5 9C            [ 8]  307 	xch	a, acc1
      00011E 05 86            [ 8]  308 	inc	dps
      000120 E0               [ 8]  309 	movx	a,@dptr
      000121 C5 9C            [ 8]  310 	xch	a, acc1
      000123 25 9C            [ 8]  311 	add	a,acc1
      000125 FA               [ 4]  312 	mov	r2,a
      000126 15 86            [ 8]  313 	dec	dps
      000128 A3               [12]  314 	inc	dptr
      000129 E0               [ 8]  315 	movx	a,@dptr
      00012A C5 9C            [ 8]  316 	xch	a, acc1
      00012C 05 86            [ 8]  317 	inc	dps
      00012E A3               [12]  318 	inc	dptr
      00012F E0               [ 8]  319 	movx	a,@dptr
      000130 C5 9C            [ 8]  320 	xch	a, acc1
      000132 35 9C            [ 8]  321 	addc	a,acc1
      000134 FB               [ 4]  322 	mov	r3,a
      000135 E4               [ 4]  323 	clr	a
      000136 C5 9C            [ 8]  324 	xch	a, acc1
      000138 A3               [12]  325 	inc	dptr
      000139 E0               [ 8]  326 	movx	a,@dptr
      00013A C5 9C            [ 8]  327 	xch	a, acc1
      00013C 35 9C            [ 8]  328 	addc	a,acc1
      00013E FC               [ 4]  329 	mov	r4,a
      00013F 75 86 01         [12]  330 	mov     dps, #1
      000142 A3               [12]  331 	inc	dptr
      000143 E0               [ 8]  332 	movx	a,@dptr
      000144 75 86 00         [12]  333 	mov	dps,#0
      000147 FD               [ 4]  334 	mov	r5,a
      000148 8A 82            [ 8]  335 	mov	dpl,r2
      00014A 8B 83            [ 8]  336 	mov	dph,r3
      00014C 8C 93            [ 8]  337 	mov	dpx,r4
      00014E 8D F0            [ 8]  338 	mov	b,r5
      000150 E4               [ 4]  339 	clr	a
      000151 12s00r00r00      [16]  340 	lcall	__gptrput
      000155                        341 00104$:
                                    342 ;	strndup.c:44: return (r);
      000155 75 86 01         [12]  343 	mov     dps, #1
      000158 90s00r00r08      [12]  344 	mov     dptr, #_strndup_r_65537_64
      00015C E0               [ 8]  345 	movx	a,@dptr
      00015D F5 82            [ 8]  346 	mov	dpl,a
      00015F A3               [12]  347 	inc	dptr
      000160 E0               [ 8]  348 	movx	a,@dptr
      000161 F5 83            [ 8]  349 	mov	dph,a
      000163 A3               [12]  350 	inc	dptr
      000164 E0               [ 8]  351 	movx	a,@dptr
      000165 F5 93            [ 8]  352 	mov	dpx,a
      000167 A3               [12]  353 	inc	dptr
      000168 E0               [ 8]  354 	movx	a,@dptr
      000169 F5 F0            [ 8]  355 	mov	b,a
      00016B 75 86 00         [12]  356 	mov	dps,#0
      00016E                        357 00105$:
                                    358 ;	strndup.c:45: }
      00016E 22               [16]  359 	ret
                                    360 	.area CSEG    (CODE)
                                    361 	.area CONST   (CODE)
                                    362 	.area XINIT   (CODE)
                                    363 	.area CABS    (ABS,CODE)
