                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _moduint
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl __moduint_PARM_2
                                     35 	.globl __moduint
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; uninitialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
      000000                         75 __moduint_PARM_2:
      000000                         76 	.ds 2
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XABS    (ABS,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; initialized external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XISEG   (XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function '_moduint'
                                    103 ;------------------------------------------------------------
                                    104 ;b                         Allocated with name '__moduint_PARM_2'
                                    105 ;a                         Allocated to registers r2 r3 
                                    106 ;count                     Allocated to registers r4 
                                    107 ;------------------------------------------------------------
                                    108 ;	_moduint.c:179: _moduint (unsigned int a, unsigned int b) __SDCC_NONBANKED
                                    109 ;	-----------------------------------------
                                    110 ;	 function _moduint
                                    111 ;	-----------------------------------------
      000000                        112 __moduint:
                           000002   113 	ar2 = 0x02
                           000003   114 	ar3 = 0x03
                           000004   115 	ar4 = 0x04
                           000005   116 	ar5 = 0x05
                           000006   117 	ar6 = 0x06
                           000007   118 	ar7 = 0x07
                           000000   119 	ar0 = 0x00
                           000001   120 	ar1 = 0x01
      000000 AA 82            [ 8]  121 	mov	r2,dpl
      000002 AB 83            [ 8]  122 	mov	r3,dph
                                    123 ;	_moduint.c:181: unsigned char count = 0;
                                    124 ;	genAssign: resultIsFar = TRUE
      000004 7C 00            [ 8]  125 	mov	r4,#0x00
                                    126 ;	_moduint.c:183: while (!MSB_SET(b))
                                    127 ;	genAssign: resultIsFar = FALSE
      000006 7D 00            [ 8]  128 	mov	r5,#0x00
      000008                        129 00103$:
      000008 90s00r00r00      [12]  130 	mov	dptr,#__moduint_PARM_2
      00000C A3               [12]  131 	inc	dptr
      00000D E0               [ 8]  132 	movx	a,@dptr
      00000E 23               [ 4]  133 	rl	a
      00000F 54 01            [ 8]  134 	anl	a,#0x01
      000011 FE               [ 4]  135 	mov  r6,a
      000012 70 4D            [12]  136 	jnz  00117$
      000014                        137 00138$:
                                    138 ;	_moduint.c:185: b <<= 1;
      000014 90s00r00r00      [12]  139 	mov	dptr,#__moduint_PARM_2
      000018 E0               [ 8]  140 	movx	a,@dptr
      000019 FE               [ 4]  141 	mov	r6,a
      00001A A3               [12]  142 	inc	dptr
      00001B E0               [ 8]  143 	movx	a,@dptr
      00001C CE               [ 4]  144 	xch	a,r6
      00001D 25 E0            [ 8]  145 	add	a,acc
      00001F CE               [ 4]  146 	xch	a,r6
      000020 33               [ 4]  147 	rlc	a
      000021 FF               [ 4]  148 	mov	r7,a
                                    149 ;	genAssign: resultIsFar = TRUE
      000022 90s00r00r00      [12]  150 	mov	dptr,#__moduint_PARM_2
      000026 EE               [ 4]  151 	mov	a,r6
      000027 F0               [ 8]  152 	movx	@dptr,a
      000028 A3               [12]  153 	inc	dptr
      000029 EF               [ 4]  154 	mov	a,r7
      00002A F0               [ 8]  155 	movx	@dptr,a
                                    156 ;	_moduint.c:186: if (b > a)
      00002B 90s00r00r00      [12]  157 	mov	dptr,#__moduint_PARM_2
      00002F C3               [ 4]  158 	clr	c
      000030 EA               [ 4]  159 	mov	a,r2
      000031 C5 F0            [ 8]  160 	xch	a, b
      000033 E0               [ 8]  161 	movx	a,@dptr
      000034 C5 F0            [ 8]  162 	xch	a, b
      000036 95 F0            [ 8]  163 	subb	a,b
      000038 EB               [ 4]  164 	mov	a,r3
      000039 C5 F0            [ 8]  165 	xch	a, b
      00003B A3               [12]  166 	inc	dptr
      00003C E0               [ 8]  167 	movx	a,@dptr
      00003D C5 F0            [ 8]  168 	xch	a, b
      00003F 95 F0            [ 8]  169 	subb	a,b
      000041 50 19            [12]  170 	jnc  00102$
      000043                        171 00139$:
                                    172 ;	_moduint.c:188: b >>=1;
      000043 90s00r00r00      [12]  173 	mov	dptr,#__moduint_PARM_2
      000047 E0               [ 8]  174 	movx	a,@dptr
      000048 FE               [ 4]  175 	mov	r6,a
      000049 A3               [12]  176 	inc	dptr
      00004A E0               [ 8]  177 	movx	a,@dptr
      00004B C3               [ 4]  178 	clr	c
      00004C 13               [ 4]  179 	rrc	a
      00004D CE               [ 4]  180 	xch	a,r6
      00004E 13               [ 4]  181 	rrc	a
      00004F CE               [ 4]  182 	xch	a,r6
      000050 FF               [ 4]  183 	mov	r7,a
                                    184 ;	genAssign: resultIsFar = TRUE
      000051 90s00r00r00      [12]  185 	mov	dptr,#__moduint_PARM_2
      000055 EE               [ 4]  186 	mov	a,r6
      000056 F0               [ 8]  187 	movx	@dptr,a
      000057 A3               [12]  188 	inc	dptr
      000058 EF               [ 4]  189 	mov	a,r7
      000059 F0               [ 8]  190 	movx	@dptr,a
                                    191 ;	_moduint.c:189: break;
      00005A 80 05            [12]  192 	sjmp 00117$
      00005C                        193 00102$:
                                    194 ;	_moduint.c:191: count++;
      00005C 0D               [ 4]  195 	inc	r5
                                    196 ;	genAssign: resultIsFar = TRUE
      00005D 8D 04            [ 8]  197 	mov	ar4,r5
                                    198 ;	_moduint.c:193: do
      00005F 80 A7            [12]  199 	sjmp 00103$
      000061                        200 00117$:
                                    201 ;	genAssign: resultIsFar = FALSE
      000061                        202 00108$:
                                    203 ;	_moduint.c:195: if (a >= b)
      000061 90s00r00r00      [12]  204 	mov	dptr,#__moduint_PARM_2
      000065 C3               [ 4]  205 	clr	c
      000066 EA               [ 4]  206 	mov	a,r2
      000067 C5 F0            [ 8]  207 	xch	a, b
      000069 E0               [ 8]  208 	movx	a,@dptr
      00006A C5 F0            [ 8]  209 	xch	a, b
      00006C 95 F0            [ 8]  210 	subb	a,b
      00006E EB               [ 4]  211 	mov	a,r3
      00006F C5 F0            [ 8]  212 	xch	a, b
      000071 A3               [12]  213 	inc	dptr
      000072 E0               [ 8]  214 	movx	a,@dptr
      000073 C5 F0            [ 8]  215 	xch	a, b
      000075 95 F0            [ 8]  216 	subb	a,b
      000077 40 18            [12]  217 	jc   00107$
      000079                        218 00140$:
                                    219 ;	_moduint.c:196: a -= b;
      000079 90s00r00r00      [12]  220 	mov	dptr,#__moduint_PARM_2
      00007D C3               [ 4]  221 	clr	c
      00007E E0               [ 8]  222 	movx	a,@dptr
      00007F F5 F0            [ 8]  223 	mov	b,a
      000081 EA               [ 4]  224 	mov	a,r2
      000082 95 F0            [ 8]  225 	subb	a,b
      000084 FD               [ 4]  226 	mov	r5,a
      000085 A3               [12]  227 	inc	dptr
      000086 E0               [ 8]  228 	movx	a,@dptr
      000087 F5 F0            [ 8]  229 	mov	b,a
      000089 EB               [ 4]  230 	mov	a,r3
      00008A 95 F0            [ 8]  231 	subb	a,b
      00008C FE               [ 4]  232 	mov	r6,a
                                    233 ;	genAssign: resultIsFar = TRUE
      00008D 8D 02            [ 8]  234 	mov	ar2,r5
      00008F 8E 03            [ 8]  235 	mov	ar3,r6
      000091                        236 00107$:
                                    237 ;	_moduint.c:197: b >>= 1;
      000091 90s00r00r00      [12]  238 	mov	dptr,#__moduint_PARM_2
      000095 E0               [ 8]  239 	movx	a,@dptr
      000096 FD               [ 4]  240 	mov	r5,a
      000097 A3               [12]  241 	inc	dptr
      000098 E0               [ 8]  242 	movx	a,@dptr
      000099 C3               [ 4]  243 	clr	c
      00009A 13               [ 4]  244 	rrc	a
      00009B CD               [ 4]  245 	xch	a,r5
      00009C 13               [ 4]  246 	rrc	a
      00009D CD               [ 4]  247 	xch	a,r5
      00009E FE               [ 4]  248 	mov	r6,a
                                    249 ;	genAssign: resultIsFar = TRUE
      00009F 90s00r00r00      [12]  250 	mov	dptr,#__moduint_PARM_2
      0000A3 ED               [ 4]  251 	mov	a,r5
      0000A4 F0               [ 8]  252 	movx	@dptr,a
      0000A5 A3               [12]  253 	inc	dptr
      0000A6 EE               [ 4]  254 	mov	a,r6
      0000A7 F0               [ 8]  255 	movx	@dptr,a
                                    256 ;	_moduint.c:199: while (count--);
                                    257 ;	genAssign: resultIsFar = FALSE
      0000A8 8C 05            [ 8]  258 	mov	ar5,r4
      0000AA 1C               [ 4]  259 	dec	r4
      0000AB ED               [ 4]  260 	mov	a,r5
      0000AC 70 B3            [12]  261 	jnz  00108$
      0000AE                        262 00141$:
                                    263 ;	_moduint.c:200: return a;
      0000AE 8A 82            [ 8]  264 	mov	dpl,r2
      0000B0 8B 83            [ 8]  265 	mov	dph,r3
      0000B2                        266 00111$:
                                    267 ;	_moduint.c:201: }
      0000B2 22               [16]  268 	ret
                                    269 	.area CSEG    (CODE)
                                    270 	.area CONST   (CODE)
                                    271 	.area XINIT   (CODE)
                                    272 	.area CABS    (ABS,CODE)
