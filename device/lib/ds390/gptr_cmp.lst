                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gptr_cmp
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; special function registers
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; special function bits
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; overlayable register banks
                                     42 ;--------------------------------------------------------
                                     43 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         44 	.ds 8
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; uninitialized external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; initialized external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; global & static initialisations
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; Home
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area HOME    (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; code
                                     95 ;--------------------------------------------------------
                                     96 	.area CSEG    (CODE)
                                     97 ;------------------------------------------------------------
                                     98 ;Allocation info for local variables in function 'dummy'
                                     99 ;------------------------------------------------------------
                                    100 ;	gptr_cmp.c:31: static void dummy(void) __naked
                                    101 ;	-----------------------------------------
                                    102 ;	 function dummy
                                    103 ;	-----------------------------------------
      000000                        104 _dummy:
                                    105 ;	naked function: no prologue.
                                    106 ;	gptr_cmp.c:94: __endasm;
                                    107 	.area	HOME (CODE)
                                    108 ;	compares two generic pointers.
                                    109 ;	if p1 < p2 return NZ and C
                                    110 ;	if p1 == p2 return Z and NC
                                    111 ;	if p1 > p2 return NZ and NC
                                    112 ;	if both are a NULL pointer (yes, we have several) also return Z and NC
      000000                        113 ___gptr_cmp::
      000000 E5 81            [ 8]  114 	mov	a,sp
      000002 24 FA            [ 8]  115 	add	a,#0xFA
      000004 F5 84            [ 8]  116 	mov	dpl1,a
      000006 E5 9B            [ 8]  117 	mov	a,esp
      000008 54 03            [ 8]  118 	anl	a,#0x03
      00000A 34 FF            [ 8]  119 	addc	a,#0xFF
      00000C F5 85            [ 8]  120 	mov	dph1,a
      00000E 75 95 40         [12]  121 	mov	dpx1,#0x40
      000011 05 86            [ 8]  122 	inc	dps ;select dptr1
      000013 E0               [ 8]  123 	movx	a,@dptr
      000014 F5 9C            [ 8]  124 	mov	ap,a
      000016 A3               [12]  125 	inc	dptr
      000017 E0               [ 8]  126 	movx	a,@dptr
      000018 42 9C            [ 8]  127 	orl	ap,a
      00001A A3               [12]  128 	inc	dptr
      00001B E0               [ 8]  129 	movx	a,@dptr
      00001C 45 9C            [ 8]  130 	orl	a,ap
      00001E C3               [ 4]  131 	clr	c
      00001F 70 08            [12]  132 	jnz	00001$
      000021 E5 82            [ 8]  133 	mov	a,dpl
      000023 45 83            [ 8]  134 	orl	a,dph
      000025 45 93            [ 8]  135 	orl	a,dpx
                                    136 ;	if both are NULL, return Z and NC
      000027 60 1F            [12]  137 	jz	00002$
      000029                        138 00001$:
      000029 43 86 80         [12]  139 	orl	dps,#0x80 ;decrement dptr1
      00002C A3               [12]  140 	inc	dptr
      00002D A3               [12]  141 	inc	dptr
      00002E 53 86 7F         [12]  142 	anl	dps,#0x7F ;increment dptr1
      000031 E0               [ 8]  143 	movx	a,@dptr
      000032 95 82            [ 8]  144 	subb	a,dpl
      000034 F5 9C            [ 8]  145 	mov	ap,a
      000036 A3               [12]  146 	inc	dptr
      000037 E0               [ 8]  147 	movx	a,@dptr
      000038 95 83            [ 8]  148 	subb	a,dph
      00003A 42 9C            [ 8]  149 	orl	ap,a
      00003C A3               [12]  150 	inc	dptr
      00003D E0               [ 8]  151 	movx	a,@dptr
      00003E 95 93            [ 8]  152 	subb	a,dpx
      000040 42 9C            [ 8]  153 	orl	ap,a
      000042 A3               [12]  154 	inc	dptr
      000043 E0               [ 8]  155 	movx	a,@dptr
      000044 95 F0            [ 8]  156 	subb	a,b
      000046 45 9C            [ 8]  157 	orl	a,ap
                                    158 ;	p2 < p1, return NZ and C
                                    159 ;	p2 = p1, return Z and NC
                                    160 ;	p2 > p1, return NZ and NC
      000048                        161 00002$:
      000048 15 86            [ 8]  162 	dec	dps ;select dptr0
      00004A 22               [16]  163 	ret
      00004B                        164 00101$:
                                    165 ;	gptr_cmp.c:95: }
                                    166 ;	naked function: no epilogue.
                                    167 	.area CSEG    (CODE)
                                    168 	.area CONST   (CODE)
                                    169 	.area XINIT   (CODE)
                                    170 	.area CABS    (ABS,CODE)
