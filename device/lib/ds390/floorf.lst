                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module floorf
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _floorf
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; uninitialized external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; initialized external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; global & static initialisations
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; Home
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area HOME    (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; code
                                     96 ;--------------------------------------------------------
                                     97 	.area CSEG    (CODE)
                                     98 ;------------------------------------------------------------
                                     99 ;Allocation info for local variables in function 'floorf'
                                    100 ;------------------------------------------------------------
                                    101 ;x                         Allocated to stack - _bp +1
                                    102 ;r                         Allocated to registers r6 r7 r0 r1 
                                    103 ;------------------------------------------------------------
                                    104 ;	floorf.c:33: float floorf (float x) _FLOAT_FUNC_REENTRANT
                                    105 ;	-----------------------------------------
                                    106 ;	 function floorf
                                    107 ;	-----------------------------------------
      000000                        108 _floorf:
                           000002   109 	ar2 = 0x02
                           000003   110 	ar3 = 0x03
                           000004   111 	ar4 = 0x04
                           000005   112 	ar5 = 0x05
                           000006   113 	ar6 = 0x06
                           000007   114 	ar7 = 0x07
                           000000   115 	ar0 = 0x00
                           000001   116 	ar1 = 0x01
      000000 C0*00            [ 8]  117 	push	_bpx
      000002 C0*01            [ 8]  118 	push	_bpx+1
      000004 85 81*00         [12]  119 	mov	_bpx,sp
      000007 85 9B*01         [12]  120 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  121 	anl	_bpx+1,#3
      00000D C0 E0            [ 8]  122 	push	acc
      00000F C0 E0            [ 8]  123 	push	acc
      000011 C0 E0            [ 8]  124 	push	acc
      000013 C0 E0            [ 8]  125 	push	acc
      000015 75 95 40         [12]  126 	mov	dpx1,#0x40
      000018 85*01 85         [12]  127 	mov	dph1,_bpx+1
      00001B 85*00 84         [12]  128 	mov	dpl1,_bpx
      00001E 75 86 01         [12]  129 	mov	dps,#1
      000021 A3               [12]  130 	inc	dptr
      000022 75 86 01         [12]  131 	mov	dps, #1
      000025 E5 82            [ 8]  132 	mov	a,dpl
      000027 F0               [ 8]  133 	movx	@dptr,a
      000028 A3               [12]  134 	inc	dptr
      000029 E5 83            [ 8]  135 	mov	a,dph
      00002B F0               [ 8]  136 	movx	@dptr,a
      00002C A3               [12]  137 	inc	dptr
      00002D E5 93            [ 8]  138 	mov	a,dpx
      00002F F0               [ 8]  139 	movx	@dptr,a
      000030 A3               [12]  140 	inc	dptr
      000031 E5 F0            [ 8]  141 	mov	a,b
      000033 F0               [ 8]  142 	movx	@dptr,a
      000034 75 86 00         [12]  143 	mov	dps,#0
                                    144 ;	floorf.c:36: r=x;
      000037 75 95 40         [12]  145 	mov	dpx1,#0x40
      00003A 85*01 85         [12]  146 	mov	dph1,_bpx+1
      00003D 85*00 84         [12]  147 	mov	dpl1,_bpx
      000040 75 86 01         [12]  148 	mov	dps,#1
      000043 A3               [12]  149 	inc	dptr
      000044 75 86 01         [12]  150 	mov	dps, #1
      000047 E0               [ 8]  151 	movx	a,@dptr
      000048 F5 82            [ 8]  152 	mov	dpl,a
      00004A A3               [12]  153 	inc	dptr
      00004B E0               [ 8]  154 	movx	a,@dptr
      00004C F5 83            [ 8]  155 	mov	dph,a
      00004E A3               [12]  156 	inc	dptr
      00004F E0               [ 8]  157 	movx	a,@dptr
      000050 F5 93            [ 8]  158 	mov	dpx,a
      000052 A3               [12]  159 	inc	dptr
      000053 E0               [ 8]  160 	movx	a,@dptr
      000054 F5 F0            [ 8]  161 	mov	b,a
      000056 75 86 00         [12]  162 	mov	dps,#0
      000059 12s00r00r00      [16]  163 	lcall	___fs2slong
      00005D AE 82            [ 8]  164 	mov	r6,dpl
      00005F AF 83            [ 8]  165 	mov	r7,dph
      000061 A8 93            [ 8]  166 	mov	r0,dpx
      000063 A9 F0            [ 8]  167 	mov	r1,b
                                    168 ;	genAssign: resultIsFar = TRUE
                                    169 ;	floorf.c:37: if (r<=0)
      000065 C3               [ 4]  170 	clr	c
      000066 E4               [ 4]  171 	clr	a
      000067 9E               [ 4]  172 	subb	a,r6
      000068 E4               [ 4]  173 	clr	a
      000069 9F               [ 4]  174 	subb	a,r7
      00006A E4               [ 4]  175 	clr	a
      00006B 98               [ 4]  176 	subb	a,r0
      00006C E4               [ 4]  177 	clr	a
      00006D 64 80            [ 8]  178 	xrl	a,#0x80
      00006F 89 F0            [ 8]  179 	mov	b,r1
      000071 63 F0 80         [12]  180 	xrl	b,#0x80
      000074 95 F0            [ 8]  181 	subb	a,b
      000076 50 04            [12]  182 	jnc	00116$
      000078 02s00r01r13      [16]  183 	ljmp	00102$
      00007C                        184 00116$:
                                    185 ;	floorf.c:38: return (r+((r>x)?-1:0));
      00007C C0 06            [ 8]  186 	push	ar6
      00007E C0 07            [ 8]  187 	push	ar7
      000080 C0 00            [ 8]  188 	push	ar0
      000082 C0 01            [ 8]  189 	push	ar1
      000084 8E 82            [ 8]  190 	mov	dpl,r6
      000086 8F 83            [ 8]  191 	mov	dph,r7
      000088 88 93            [ 8]  192 	mov	dpx,r0
      00008A 89 F0            [ 8]  193 	mov	b,r1
      00008C 12s00r00r00      [16]  194 	lcall	___slong2fs
      000090 AA 82            [ 8]  195 	mov	r2,dpl
      000092 AB 83            [ 8]  196 	mov	r3,dph
      000094 AC 93            [ 8]  197 	mov	r4,dpx
      000096 AD F0            [ 8]  198 	mov	r5,b
      000098 D0 01            [ 8]  199 	pop	ar1
      00009A D0 00            [ 8]  200 	pop	ar0
      00009C D0 07            [ 8]  201 	pop	ar7
      00009E D0 06            [ 8]  202 	pop	ar6
                                    203 ;	genAssign: resultIsFar = TRUE
      0000A0 90s00r00r00      [12]  204 	mov	dptr,#___fslt_PARM_2
      0000A4 EA               [ 4]  205 	mov	a,r2
      0000A5 F0               [ 8]  206 	movx	@dptr,a
      0000A6 A3               [12]  207 	inc	dptr
      0000A7 EB               [ 4]  208 	mov	a,r3
      0000A8 F0               [ 8]  209 	movx	@dptr,a
      0000A9 A3               [12]  210 	inc	dptr
      0000AA EC               [ 4]  211 	mov	a,r4
      0000AB F0               [ 8]  212 	movx	@dptr,a
      0000AC A3               [12]  213 	inc	dptr
      0000AD ED               [ 4]  214 	mov	a,r5
      0000AE F0               [ 8]  215 	movx	@dptr,a
      0000AF C0 06            [ 8]  216 	push	ar6
      0000B1 C0 07            [ 8]  217 	push	ar7
      0000B3 C0 00            [ 8]  218 	push	ar0
      0000B5 C0 01            [ 8]  219 	push	ar1
      0000B7 75 95 40         [12]  220 	mov	dpx1,#0x40
      0000BA 85*01 85         [12]  221 	mov	dph1,_bpx+1
      0000BD 85*00 84         [12]  222 	mov	dpl1,_bpx
      0000C0 75 86 01         [12]  223 	mov	dps,#1
      0000C3 A3               [12]  224 	inc	dptr
      0000C4 75 86 01         [12]  225 	mov	dps, #1
      0000C7 E0               [ 8]  226 	movx	a,@dptr
      0000C8 F5 82            [ 8]  227 	mov	dpl,a
      0000CA A3               [12]  228 	inc	dptr
      0000CB E0               [ 8]  229 	movx	a,@dptr
      0000CC F5 83            [ 8]  230 	mov	dph,a
      0000CE A3               [12]  231 	inc	dptr
      0000CF E0               [ 8]  232 	movx	a,@dptr
      0000D0 F5 93            [ 8]  233 	mov	dpx,a
      0000D2 A3               [12]  234 	inc	dptr
      0000D3 E0               [ 8]  235 	movx	a,@dptr
      0000D4 F5 F0            [ 8]  236 	mov	b,a
      0000D6 75 86 00         [12]  237 	mov	dps,#0
      0000D9 12s00r00r00      [16]  238 	lcall	___fslt
      0000DD D0 01            [ 8]  239 	pop	ar1
      0000DF D0 00            [ 8]  240 	pop	ar0
      0000E1 D0 07            [ 8]  241 	pop	ar7
      0000E3 D0 06            [ 8]  242 	pop	ar6
      0000E5 E5 82            [ 8]  243 	mov	a,dpl
      0000E7 60 06            [12]  244 	jz  00106$
      0000E9                        245 00117$:
                                    246 ;	genAssign: resultIsFar = FALSE
      0000E9 7A FF            [ 8]  247 	mov	r2,#0xff
      0000EB 7B FF            [ 8]  248 	mov	r3,#0xff
      0000ED 80 04            [12]  249 	sjmp 00107$
      0000EF                        250 00106$:
                                    251 ;	genAssign: resultIsFar = FALSE
      0000EF 7A 00            [ 8]  252 	mov	r2,#0x00
      0000F1 7B 00            [ 8]  253 	mov	r3,#0x00
      0000F3                        254 00107$:
      0000F3 EB               [ 4]  255 	mov	a,r3
      0000F4 33               [ 4]  256 	rlc	a
      0000F5 95 E0            [ 8]  257 	subb	a,acc
      0000F7 FC               [ 4]  258 	mov	r4,a
      0000F8 FD               [ 4]  259 	mov	r5,a
      0000F9 EA               [ 4]  260 	mov	a,r2
      0000FA 2E               [ 4]  261 	add	a,r6
      0000FB FA               [ 4]  262 	mov	r2,a
      0000FC EB               [ 4]  263 	mov	a,r3
      0000FD 3F               [ 4]  264 	addc	a,r7
      0000FE FB               [ 4]  265 	mov	r3,a
      0000FF EC               [ 4]  266 	mov	a,r4
      000100 38               [ 4]  267 	addc	a,r0
      000101 FC               [ 4]  268 	mov	r4,a
      000102 ED               [ 4]  269 	mov	a,r5
      000103 39               [ 4]  270 	addc	a,r1
      000104 FD               [ 4]  271 	mov	r5,a
      000105 8A 82            [ 8]  272 	mov	dpl,r2
      000107 8B 83            [ 8]  273 	mov	dph,r3
      000109 8C 93            [ 8]  274 	mov	dpx,r4
      00010B 8D F0            [ 8]  275 	mov	b,r5
      00010D 12s00r00r00      [16]  276 	lcall	___slong2fs
      000111 80 0C            [12]  277 	sjmp 00104$
      000113                        278 00102$:
                                    279 ;	floorf.c:40: return r;
      000113 8E 82            [ 8]  280 	mov	dpl,r6
      000115 8F 83            [ 8]  281 	mov	dph,r7
      000117 88 93            [ 8]  282 	mov	dpx,r0
      000119 89 F0            [ 8]  283 	mov	b,r1
      00011B 12s00r00r00      [16]  284 	lcall	___slong2fs
      00011F                        285 00104$:
                                    286 ;	floorf.c:41: }
      00011F 85*00 81         [12]  287 	mov	sp,_bpx
      000122 85*01 9B         [12]  288 	mov	esp,_bpx+1
      000125 D0*01            [ 8]  289 	pop	_bpx+1
      000127 D0*00            [ 8]  290 	pop	_bpx
      000129 22               [16]  291 	ret
                                    292 	.area CSEG    (CODE)
                                    293 	.area CONST   (CODE)
                                    294 	.area XINIT   (CODE)
                                    295 	.area CABS    (ABS,CODE)
