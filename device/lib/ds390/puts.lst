                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module puts
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _putchar
                                     35 	.globl _puts
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; uninitialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; absolute external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XABS    (ABS,XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; initialized external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XISEG   (XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'puts'
                                    101 ;------------------------------------------------------------
                                    102 ;s                         Allocated to registers 
                                    103 ;------------------------------------------------------------
                                    104 ;	puts.c:31: int puts (const char *s)
                                    105 ;	-----------------------------------------
                                    106 ;	 function puts
                                    107 ;	-----------------------------------------
      000000                        108 _puts:
                           000002   109 	ar2 = 0x02
                           000003   110 	ar3 = 0x03
                           000004   111 	ar4 = 0x04
                           000005   112 	ar5 = 0x05
                           000006   113 	ar6 = 0x06
                           000007   114 	ar7 = 0x07
                           000000   115 	ar0 = 0x00
                           000001   116 	ar1 = 0x01
      000000 AA 82            [ 8]  117 	mov	r2,dpl
      000002 AB 83            [ 8]  118 	mov	r3,dph
      000004 AC 93            [ 8]  119 	mov	r4,dpx
      000006 AD F0            [ 8]  120 	mov	r5,b
                                    121 ;	puts.c:33: while (*s)
      000008                        122 00103$:
      000008 8A 82            [ 8]  123 	mov	dpl,r2
      00000A 8B 83            [ 8]  124 	mov	dph,r3
      00000C 8C 93            [ 8]  125 	mov	dpx,r4
      00000E 8D F0            [ 8]  126 	mov	b,r5
      000010 12s00r00r00      [16]  127 	lcall	__gptrget
      000014 FE               [ 4]  128 	mov  r6,a
      000015 60 38            [12]  129 	jz  00105$
      000017                        130 00120$:
                                    131 ;	puts.c:34: if (putchar(*s++) == EOF)
                                    132 ;	genAssign: resultIsFar = FALSE
      000017 0A               [ 4]  133 	inc	r2
      000018 BA 00 05         [16]  134 	cjne	r2,#0x00,00121$
      00001B 0B               [ 4]  135 	inc	r3
      00001C BB 00 01         [16]  136 	cjne	r3,#0x00,00121$
      00001F 0C               [ 4]  137 	inc	r4
      000020                        138 00121$:
      000020 8E 84            [ 8]  139 	mov	dpl1,r6
      000022 75 85 00         [12]  140 	mov	dph1,#0x00
      000025 C0 02            [ 8]  141 	push	ar2
      000027 C0 03            [ 8]  142 	push	ar3
      000029 C0 04            [ 8]  143 	push	ar4
      00002B C0 05            [ 8]  144 	push	ar5
      00002D 85 84 82         [12]  145 	mov	dpl,dpl1
      000030 85 85 83         [12]  146 	mov	dph,dph1
      000033 12s00r00r00      [16]  147 	lcall	_putchar
      000037 AE 82            [ 8]  148 	mov	r6,dpl
      000039 AF 83            [ 8]  149 	mov	r7,dph
      00003B D0 05            [ 8]  150 	pop	ar5
      00003D D0 04            [ 8]  151 	pop	ar4
      00003F D0 03            [ 8]  152 	pop	ar3
      000041 D0 02            [ 8]  153 	pop	ar2
      000043 BE FF C2         [16]  154 	cjne r6,#0xff,00103$
      000046 BF FF BF         [16]  155 	cjne r7,#0xff,00103$
      000049                        156 00123$:
                                    157 ;	puts.c:35: return EOF;
      000049 90 00 FF FF      [12]  158 	mov  dptr,#0xffff
      00004D 80 08            [12]  159 	sjmp 00106$
      00004F                        160 00105$:
                                    161 ;	puts.c:36: return putchar('\n');
      00004F 90 00 00 0A      [12]  162 	mov  dptr,#0x000a
      000053 12s00r00r00      [16]  163 	lcall	_putchar
      000057                        164 00106$:
                                    165 ;	puts.c:37: }
      000057 22               [16]  166 	ret
                                    167 	.area CSEG    (CODE)
                                    168 	.area CONST   (CODE)
                                    169 	.area XINIT   (CODE)
                                    170 	.area CABS    (ABS,CODE)
