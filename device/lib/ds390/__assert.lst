                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __assert
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl ___assert
                                     35 	.globl _printf
                                     36 	.globl ___assert_PARM_4
                                     37 	.globl ___assert_PARM_3
                                     38 	.globl ___assert_PARM_2
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 ___assert_PARM_2:
      000000                         79 	.ds 4
      000004                         80 ___assert_PARM_3:
      000004                         81 	.ds 4
      000008                         82 ___assert_PARM_4:
      000008                         83 	.ds 2
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XABS    (ABS,XDATA)
                                     88 ;--------------------------------------------------------
                                     89 ; initialized external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area XISEG   (XDATA)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function '__assert'
                                    110 ;------------------------------------------------------------
                                    111 ;functionname              Allocated with name '___assert_PARM_2'
                                    112 ;filename                  Allocated with name '___assert_PARM_3'
                                    113 ;linenumber                Allocated with name '___assert_PARM_4'
                                    114 ;expression                Allocated to registers r2 r3 r4 r5 
                                    115 ;------------------------------------------------------------
                                    116 ;	__assert.c:32: void __assert(const char *expression, const char *functionname, const char *filename, unsigned int linenumber)
                                    117 ;	-----------------------------------------
                                    118 ;	 function __assert
                                    119 ;	-----------------------------------------
      000000                        120 ___assert:
                           000002   121 	ar2 = 0x02
                           000003   122 	ar3 = 0x03
                           000004   123 	ar4 = 0x04
                           000005   124 	ar5 = 0x05
                           000006   125 	ar6 = 0x06
                           000007   126 	ar7 = 0x07
                           000000   127 	ar0 = 0x00
                           000001   128 	ar1 = 0x01
      000000 AA 82            [ 8]  129 	mov	r2,dpl
      000002 AB 83            [ 8]  130 	mov	r3,dph
      000004 AC 93            [ 8]  131 	mov	r4,dpx
      000006 AD F0            [ 8]  132 	mov	r5,b
                                    133 ;	__assert.c:34: printf("Assert(%s) failed in function %s at line %u in file %s.\n",
      000008 90s00r00r04      [12]  134 	mov	dptr,#___assert_PARM_3
      00000C E0               [ 8]  135 	movx	a,@dptr
      00000D C0 E0            [ 8]  136 	push	acc
      00000F A3               [12]  137 	inc	dptr
      000010 E0               [ 8]  138 	movx	a,@dptr
      000011 C0 E0            [ 8]  139 	push	acc
      000013 A3               [12]  140 	inc	dptr
      000014 E0               [ 8]  141 	movx	a,@dptr
      000015 C0 E0            [ 8]  142 	push	acc
      000017 A3               [12]  143 	inc	dptr
      000018 E0               [ 8]  144 	movx	a,@dptr
      000019 C0 E0            [ 8]  145 	push	acc
      00001B 90s00r00r08      [12]  146 	mov	dptr,#___assert_PARM_4
      00001F E0               [ 8]  147 	movx	a,@dptr
      000020 C0 E0            [ 8]  148 	push	acc
      000022 A3               [12]  149 	inc	dptr
      000023 E0               [ 8]  150 	movx	a,@dptr
      000024 C0 E0            [ 8]  151 	push	acc
      000026 90s00r00r00      [12]  152 	mov	dptr,#___assert_PARM_2
      00002A E0               [ 8]  153 	movx	a,@dptr
      00002B C0 E0            [ 8]  154 	push	acc
      00002D A3               [12]  155 	inc	dptr
      00002E E0               [ 8]  156 	movx	a,@dptr
      00002F C0 E0            [ 8]  157 	push	acc
      000031 A3               [12]  158 	inc	dptr
      000032 E0               [ 8]  159 	movx	a,@dptr
      000033 C0 E0            [ 8]  160 	push	acc
      000035 A3               [12]  161 	inc	dptr
      000036 E0               [ 8]  162 	movx	a,@dptr
      000037 C0 E0            [ 8]  163 	push	acc
      000039 C0 02            [ 8]  164 	push	ar2
      00003B C0 03            [ 8]  165 	push	ar3
      00003D C0 04            [ 8]  166 	push	ar4
      00003F C0 05            [ 8]  167 	push	ar5
      000041 74r00            [ 8]  168 	mov	a,#___str_0
      000043 C0 E0            [ 8]  169 	push	acc
      000045 74s00            [ 8]  170 	mov	a,#(___str_0 >> 8)
      000047 C0 E0            [ 8]  171 	push	acc
      000049 74s00            [ 8]  172 	mov	a,#(___str_0 >> 16)
      00004B C0 E0            [ 8]  173 	push	acc
      00004D 74 80            [ 8]  174 	mov	a,#0x80
      00004F C0 E0            [ 8]  175 	push	acc
      000051 12s00r00r00      [16]  176 	lcall	_printf
      000055 C3               [ 4]  177 	clr	c
      000056 E5 81            [ 8]  178 	mov	a,sp
      000058 94 12            [ 8]  179 	subb	a,#0x12
      00005A F5 81            [ 8]  180 	mov	sp,a
      00005C E5 9B            [ 8]  181 	mov	a,esp
      00005E 54 03            [ 8]  182 	anl	a,#3
      000060 94 00            [ 8]  183 	subb	a,#0x00
      000062 F5 9B            [ 8]  184 	mov	esp,a
      000064                        185 00103$:
      000064 80 FE            [12]  186 	sjmp 00103$
      000066                        187 00104$:
                                    188 ;	__assert.c:37: }
      000066 22               [16]  189 	ret
                                    190 	.area CSEG    (CODE)
                                    191 	.area CONST   (CODE)
                                    192 	.area CONST   (CODE)
      000000                        193 ___str_0:
      000000 41 73 73 65 72 74 28   194 	.ascii "Assert(%s) failed in function %s at line %u in file %s."
             25 73 29 20 66 61 69
             6C 65 64 20 69 6E 20
             66 75 6E 63 74 69 6F
             6E 20 25 73 20 61 74
             20 6C 69 6E 65 20 25
             75 20 69 6E 20 66 69
             6C 65 20 25 73 2E
      000037 0A                     195 	.db 0x0a
      000038 00                     196 	.db 0x00
                                    197 	.area CSEG    (CODE)
                                    198 	.area XINIT   (CODE)
                                    199 	.area CABS    (ABS,CODE)
