                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _fs2sint
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl ___fs2slong
                                     35 	.globl ___fs2sint
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; uninitialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; absolute external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XABS    (ABS,XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; initialized external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XISEG   (XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function '__fs2sint'
                                    101 ;------------------------------------------------------------
                                    102 ;f                         Allocated to registers r2 r3 r4 r5 
                                    103 ;sl                        Allocated to registers r2 r3 r4 r5 
                                    104 ;------------------------------------------------------------
                                    105 ;	_fs2sint.c:81: signed int __fs2sint (float f)
                                    106 ;	-----------------------------------------
                                    107 ;	 function __fs2sint
                                    108 ;	-----------------------------------------
      000000                        109 ___fs2sint:
                           000002   110 	ar2 = 0x02
                           000003   111 	ar3 = 0x03
                           000004   112 	ar4 = 0x04
                           000005   113 	ar5 = 0x05
                           000006   114 	ar6 = 0x06
                           000007   115 	ar7 = 0x07
                           000000   116 	ar0 = 0x00
                           000001   117 	ar1 = 0x01
                                    118 ;	_fs2sint.c:83: signed long sl=__fs2slong(f);
      000000 AA 82            [ 8]  119 	mov     r2,dpl
      000002 AB 83            [ 8]  120 	mov     r3,dph
      000004 AC 93            [ 8]  121 	mov     r4,dpx
      000006 AD F0            [ 8]  122 	mov     r5,b
      000008 8D F0            [ 8]  123 	mov	b,r5
      00000A 12s00r00r00      [16]  124 	lcall	___fs2slong
      00000E AA 82            [ 8]  125 	mov	r2,dpl
      000010 AB 83            [ 8]  126 	mov	r3,dph
      000012 AC 93            [ 8]  127 	mov	r4,dpx
      000014 AD F0            [ 8]  128 	mov	r5,b
                                    129 ;	genAssign: resultIsFar = TRUE
                                    130 ;	_fs2sint.c:84: if (sl>=INT_MAX)
      000016 C3               [ 4]  131 	clr	c
      000017 EA               [ 4]  132 	mov	a,r2
      000018 94 FF            [ 8]  133 	subb	a,#0xff
      00001A EB               [ 4]  134 	mov	a,r3
      00001B 94 7F            [ 8]  135 	subb	a,#0x7f
      00001D EC               [ 4]  136 	mov	a,r4
      00001E 94 00            [ 8]  137 	subb	a,#0x00
      000020 ED               [ 4]  138 	mov	a,r5
      000021 64 80            [ 8]  139 	xrl	a,#0x80
      000023 94 80            [ 8]  140 	subb	a,#0x80
      000025 40 06            [12]  141 	jc   00102$
      000027                        142 00115$:
                                    143 ;	_fs2sint.c:85: return INT_MAX;
      000027 90 00 7F FF      [12]  144 	mov  dptr,#0x7fff
      00002B 80 1E            [12]  145 	sjmp 00105$
      00002D                        146 00102$:
                                    147 ;	_fs2sint.c:86: if (sl<=INT_MIN)
      00002D C3               [ 4]  148 	clr	c
      00002E E4               [ 4]  149 	clr	a
      00002F 9A               [ 4]  150 	subb	a,r2
      000030 74 80            [ 8]  151 	mov	a,#0x80
      000032 9B               [ 4]  152 	subb	a,r3
      000033 74 FF            [ 8]  153 	mov	a,#0xff
      000035 9C               [ 4]  154 	subb	a,r4
      000036 74 7F            [ 8]  155 	mov  a,#(0xff ^ 0x80)
      000038 8D F0            [ 8]  156 	mov	b,r5
      00003A 63 F0 80         [12]  157 	xrl	b,#0x80
      00003D 95 F0            [ 8]  158 	subb	a,b
      00003F 40 06            [12]  159 	jc   00104$
      000041                        160 00116$:
                                    161 ;	_fs2sint.c:87: return -INT_MIN;
      000041 90 00 80 00      [12]  162 	mov  dptr,#0x8000
      000045 80 04            [12]  163 	sjmp 00105$
      000047                        164 00104$:
                                    165 ;	_fs2sint.c:88: return sl;
      000047 8A 82            [ 8]  166 	mov	dpl,r2
      000049 8B 83            [ 8]  167 	mov	dph,r3
      00004B                        168 00105$:
                                    169 ;	_fs2sint.c:89: }
      00004B 22               [16]  170 	ret
                                    171 	.area CSEG    (CODE)
                                    172 	.area CONST   (CODE)
                                    173 	.area XINIT   (CODE)
                                    174 	.area CABS    (ABS,CODE)
