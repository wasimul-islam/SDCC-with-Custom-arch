                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strlen
                                     35 	.globl __print_format_PARM_4
                                     36 	.globl __print_format_PARM_3
                                     37 	.globl __print_format_PARM_2
                                     38 	.globl __print_format
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram
                                     56 ;--------------------------------------------------------
                                     57 	.area	OSEG    (OVR,DATA)
      000000                         58 _calculate_digit_b4_65536_72:
      000000                         59 	.ds 1
                                     60 ;--------------------------------------------------------
                                     61 ; indirectly addressable internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area ISEG    (DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; absolute internal ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area IABS    (ABS,DATA)
                                     68 	.area IABS    (ABS,DATA)
                                     69 ;--------------------------------------------------------
                                     70 ; bit data
                                     71 ;--------------------------------------------------------
                                     72 	.area BSEG    (BIT)
                                     73 ;--------------------------------------------------------
                                     74 ; paged external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area PSEG    (PAG,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; uninitialized external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XSEG    (XDATA)
      000000                         81 _lower_case:
      000000                         82 	.ds 1
      000001                         83 _output_char:
      000001                         84 	.ds 3
      000004                         85 _p:
      000004                         86 	.ds 4
      000008                         87 _value:
      000008                         88 	.ds 5
      00000D                         89 _charsOutputted:
      00000D                         90 	.ds 2
      00000F                         91 _output_float_PARM_2:
      00000F                         92 	.ds 1
      000010                         93 _output_float_PARM_3:
      000010                         94 	.ds 1
      000011                         95 _output_float_PARM_4:
      000011                         96 	.ds 1
      000012                         97 _output_float_PARM_5:
      000012                         98 	.ds 1
      000013                         99 _output_float_PARM_6:
      000013                        100 	.ds 1
      000014                        101 _output_float_PARM_7:
      000014                        102 	.ds 1
      000015                        103 _output_float_f_65536_75:
      000015                        104 	.ds 4
      000019                        105 _output_float_fpBuffer_65536_76:
      000019                        106 	.ds 128
      000099                        107 _output_float_negative_65536_76:
      000099                        108 	.ds 1
      00009A                        109 _output_float_decimalPart_65536_76:
      00009A                        110 	.ds 4
      00009E                        111 _output_float_exp_65536_76:
      00009E                        112 	.ds 1
      00009F                        113 _output_float_sloc0_1_0:
      00009F                        114 	.ds 1
      0000A0                        115 _output_float_sloc1_1_0:
      0000A0                        116 	.ds 4
      0000A4                        117 _output_float_sloc2_1_0:
      0000A4                        118 	.ds 4
      0000A8                        119 _output_float_sloc3_1_0:
      0000A8                        120 	.ds 4
      0000AC                        121 __print_format_PARM_2:
      0000AC                        122 	.ds 4
      0000B0                        123 __print_format_PARM_3:
      0000B0                        124 	.ds 4
      0000B4                        125 __print_format_PARM_4:
      0000B4                        126 	.ds 4
      0000B8                        127 __print_format_left_justify_65536_113:
      0000B8                        128 	.ds 1
      0000B9                        129 __print_format_zero_padding_65536_113:
      0000B9                        130 	.ds 1
      0000BA                        131 __print_format_prefix_sign_65536_113:
      0000BA                        132 	.ds 1
      0000BB                        133 __print_format_prefix_space_65536_113:
      0000BB                        134 	.ds 1
      0000BC                        135 __print_format_signed_argument_65536_113:
      0000BC                        136 	.ds 1
      0000BD                        137 __print_format_char_argument_65536_113:
      0000BD                        138 	.ds 1
      0000BE                        139 __print_format_long_argument_65536_113:
      0000BE                        140 	.ds 1
      0000BF                        141 __print_format_float_argument_65536_113:
      0000BF                        142 	.ds 1
      0000C0                        143 __print_format_radix_65536_113:
      0000C0                        144 	.ds 1
      0000C1                        145 __print_format_decimals_65536_113:
      0000C1                        146 	.ds 2
      0000C3                        147 __print_format_store_262144_135:
      0000C3                        148 	.ds 6
      0000C9                        149 __print_format_pstore_262144_135:
      0000C9                        150 	.ds 3
      0000CC                        151 __print_format_sloc0_1_0:
      0000CC                        152 	.ds 4
      0000D0                        153 __print_format_sloc1_1_0:
      0000D0                        154 	.ds 1
      0000D1                        155 __print_format_sloc2_1_0:
      0000D1                        156 	.ds 2
                                    157 ;--------------------------------------------------------
                                    158 ; absolute external ram data
                                    159 ;--------------------------------------------------------
                                    160 	.area XABS    (ABS,XDATA)
                                    161 ;--------------------------------------------------------
                                    162 ; initialized external ram data
                                    163 ;--------------------------------------------------------
                                    164 	.area XISEG   (XDATA)
                                    165 ;--------------------------------------------------------
                                    166 ; global & static initialisations
                                    167 ;--------------------------------------------------------
                                    168 	.area HOME    (CODE)
                                    169 	.area GSINIT  (CODE)
                                    170 	.area GSFINAL (CODE)
                                    171 	.area GSINIT  (CODE)
                                    172 ;--------------------------------------------------------
                                    173 ; Home
                                    174 ;--------------------------------------------------------
                                    175 	.area HOME    (CODE)
                                    176 	.area HOME    (CODE)
                                    177 ;--------------------------------------------------------
                                    178 ; code
                                    179 ;--------------------------------------------------------
                                    180 	.area CSEG    (CODE)
                                    181 ;------------------------------------------------------------
                                    182 ;Allocation info for local variables in function '_output_char'
                                    183 ;------------------------------------------------------------
                                    184 ;c                         Allocated to registers r2 
                                    185 ;------------------------------------------------------------
                                    186 ;	printf_large.c:105: _output_char (unsigned char c)
                                    187 ;	-----------------------------------------
                                    188 ;	 function _output_char
                                    189 ;	-----------------------------------------
      000000                        190 __output_char:
                           000002   191 	ar2 = 0x02
                           000003   192 	ar3 = 0x03
                           000004   193 	ar4 = 0x04
                           000005   194 	ar5 = 0x05
                           000006   195 	ar6 = 0x06
                           000007   196 	ar7 = 0x07
                           000000   197 	ar0 = 0x00
                           000001   198 	ar1 = 0x01
      000000 AA 82            [ 8]  199 	mov	r2,dpl
                                    200 ;	printf_large.c:107: output_char( c, p );
      000002 90s00r00r04      [12]  201 	mov	dptr,#_p
      000006 E0               [ 8]  202 	movx	a,@dptr
      000007 C0 E0            [ 8]  203 	push	acc
      000009 A3               [12]  204 	inc	dptr
      00000A E0               [ 8]  205 	movx	a,@dptr
      00000B C0 E0            [ 8]  206 	push	acc
      00000D A3               [12]  207 	inc	dptr
      00000E E0               [ 8]  208 	movx	a,@dptr
      00000F C0 E0            [ 8]  209 	push	acc
      000011 A3               [12]  210 	inc	dptr
      000012 E0               [ 8]  211 	movx	a,@dptr
      000013 C0 E0            [ 8]  212 	push	acc
      000015 74r33            [ 8]  213 	mov	a,#00103$
      000017 C0 E0            [ 8]  214 	push	acc
      000019 74s00            [ 8]  215 	mov	a,#(00103$ >> 8)
      00001B C0 E0            [ 8]  216 	push	acc
      00001D 74s00            [ 8]  217 	mov	a,#(00103$ >> 16)
      00001F C0 E0            [ 8]  218 	push	acc
      000021 90s00r00r01      [12]  219 	mov	dptr,#_output_char
      000025 E0               [ 8]  220 	movx	a,@dptr
      000026 C0 E0            [ 8]  221 	push	acc
      000028 A3               [12]  222 	inc	dptr
      000029 E0               [ 8]  223 	movx	a,@dptr
      00002A C0 E0            [ 8]  224 	push	acc
      00002C A3               [12]  225 	inc	dptr
      00002D E0               [ 8]  226 	movx	a,@dptr
      00002E C0 E0            [ 8]  227 	push	acc
      000030 8A 82            [ 8]  228 	mov	dpl,r2
      000032 22               [16]  229 	ret
      000033                        230 00103$:
                                    231 ;	stack adjustment for parms
      000033 D0 E0            [ 8]  232 	pop	acc
      000035 D0 E0            [ 8]  233 	pop	acc
      000037 D0 E0            [ 8]  234 	pop	acc
      000039 D0 E0            [ 8]  235 	pop	acc
                                    236 ;	printf_large.c:108: charsOutputted++;
      00003B 90s00r00r0D      [12]  237 	mov	dptr,#_charsOutputted
      00003F E0               [ 8]  238 	movx	a,@dptr
      000040 24 01            [ 8]  239 	add	a,#0x01
      000042 F0               [ 8]  240 	movx	@dptr,a
      000043 A3               [12]  241 	inc	dptr
      000044 E0               [ 8]  242 	movx	a,@dptr
      000045 34 00            [ 8]  243 	addc	a,#0x00
      000047 F0               [ 8]  244 	movx	@dptr,a
      000048                        245 00101$:
                                    246 ;	printf_large.c:109: }
      000048 22               [16]  247 	ret
                                    248 ;------------------------------------------------------------
                                    249 ;Allocation info for local variables in function 'output_digit'
                                    250 ;------------------------------------------------------------
                                    251 ;c                         Allocated to registers r2 
                                    252 ;n                         Allocated to registers r2 
                                    253 ;------------------------------------------------------------
                                    254 ;	printf_large.c:130: output_digit (unsigned char n)
                                    255 ;	-----------------------------------------
                                    256 ;	 function output_digit
                                    257 ;	-----------------------------------------
      000049                        258 _output_digit:
      000049 AA 82            [ 8]  259 	mov	r2,dpl
                                    260 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      00004B 74 30            [ 8]  261 	mov	a,#0x30
      00004D 2A               [ 4]  262 	add	a,r2
      00004E FA               [ 4]  263 	mov	r2,a
                                    264 ;	printf_large.c:134: if (c > (unsigned char)'9')
      00004F C3               [ 4]  265 	clr	c
      000050 74 39            [ 8]  266 	mov	a,#0x39
      000052 9A               [ 4]  267 	subb	a,r2
      000053 50 0E            [12]  268 	jnc  00104$
      000055                        269 00115$:
                                    270 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000055 74 07            [ 8]  271 	mov	a,#0x07
      000057 2A               [ 4]  272 	add	a,r2
      000058 FA               [ 4]  273 	mov	r2,a
                                    274 ;	printf_large.c:137: if (lower_case)
      000059 90s00r00r00      [12]  275 	mov	dptr,#_lower_case
      00005D E0               [ 8]  276 	movx	a,@dptr
      00005E 60 03            [12]  277 	jz  00104$
      000060                        278 00116$:
                                    279 ;	printf_large.c:138: c = tolower(c);
      000060 43 02 20         [12]  280 	orl	ar2,#0x20
      000063                        281 00104$:
                                    282 ;	printf_large.c:140: _output_char( c );
      000063 8A 82            [ 8]  283 	mov	dpl,r2
      000065 12s00r00r00      [16]  284 	lcall	__output_char
      000069                        285 00105$:
                                    286 ;	printf_large.c:141: }
      000069 22               [16]  287 	ret
                                    288 ;------------------------------------------------------------
                                    289 ;Allocation info for local variables in function 'output_2digits'
                                    290 ;------------------------------------------------------------
                                    291 ;b                         Allocated to registers r2 
                                    292 ;------------------------------------------------------------
                                    293 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    294 ;	-----------------------------------------
                                    295 ;	 function output_2digits
                                    296 ;	-----------------------------------------
      00006A                        297 _output_2digits:
      00006A AA 82            [ 8]  298 	mov	r2,dpl
                                    299 ;	printf_large.c:159: output_digit( b>>4   );
      00006C EA               [ 4]  300 	mov	a,r2
      00006D C4               [ 4]  301 	swap	a
      00006E 54 0F            [ 8]  302 	anl	a,#0x0f
      000070 FB               [ 4]  303 	mov	r3,a
      000071 C0 02            [ 8]  304 	push	ar2
      000073 8B 82            [ 8]  305 	mov	dpl,r3
      000075 12s00r00r49      [16]  306 	lcall	_output_digit
      000079 D0 02            [ 8]  307 	pop	ar2
                                    308 ;	printf_large.c:160: output_digit( b&0x0F );
      00007B 53 02 0F         [12]  309 	anl	ar2,#0x0f
      00007E 8A 82            [ 8]  310 	mov	dpl,r2
      000080 12s00r00r49      [16]  311 	lcall	_output_digit
      000084                        312 00101$:
                                    313 ;	printf_large.c:161: }
      000084 22               [16]  314 	ret
                                    315 ;------------------------------------------------------------
                                    316 ;Allocation info for local variables in function 'calculate_digit'
                                    317 ;------------------------------------------------------------
                                    318 ;radix                     Allocated to registers r2 
                                    319 ;ul                        Allocated to registers r3 r4 r5 r6 
                                    320 ;b4                        Allocated with name '_calculate_digit_b4_65536_72'
                                    321 ;i                         Allocated to registers r0 
                                    322 ;------------------------------------------------------------
                                    323 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    324 ;	-----------------------------------------
                                    325 ;	 function calculate_digit
                                    326 ;	-----------------------------------------
      000085                        327 _calculate_digit:
      000085 AA 82            [ 8]  328 	mov	r2,dpl
                                    329 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000087 90s00r00r08      [12]  330 	mov	dptr,#_value
      00008B E0               [ 8]  331 	movx	a,@dptr
      00008C A3               [12]  332 	inc	dptr
      00008D FB               [ 4]  333 	mov	r3,a
      00008E E0               [ 8]  334 	movx	a,@dptr
      00008F A3               [12]  335 	inc	dptr
      000090 FC               [ 4]  336 	mov	r4,a
      000091 E0               [ 8]  337 	movx	a,@dptr
      000092 A3               [12]  338 	inc	dptr
      000093 FD               [ 4]  339 	mov	r5,a
      000094 E0               [ 8]  340 	movx	a,@dptr
      000095 FE               [ 4]  341 	mov	r6,a
                                    342 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000096 90s00r00r0C      [12]  343 	mov	dptr,#(_value + 0x000004)
      00009A E0               [ 8]  344 	movx	a,@dptr
      00009B FF               [ 4]  345 	mov	r7,a
                                    346 ;	printf_large.c:195: do
                                    347 ;	genAssign: resultIsFar = FALSE
      00009C 78 20            [ 8]  348 	mov	r0,#0x20
      00009E                        349 00103$:
                                    350 ;	printf_large.c:197: b4 = (b4 << 1);
      00009E 8F 01            [ 8]  351 	mov	ar1,r7
      0000A0 E9               [ 4]  352 	mov	a,r1
      0000A1 25 E0            [ 8]  353 	add	a,acc
      0000A3 F5*00            [ 8]  354 	mov	_calculate_digit_b4_65536_72,a
                                    355 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      0000A5 EE               [ 4]  356 	mov	a,r6
      0000A6 23               [ 4]  357 	rl	a
      0000A7 54 01            [ 8]  358 	anl	a,#0x01
      0000A9 F9               [ 4]  359 	mov  r1,a
      0000AA 45*00            [ 8]  360 	orl	a,_calculate_digit_b4_65536_72
      0000AC FF               [ 4]  361 	mov	r7,a
                                    362 ;	printf_large.c:199: ul <<= 1;
      0000AD EB               [ 4]  363 	mov	a,r3
      0000AE 25 E0            [ 8]  364 	add	a,acc
      0000B0 FB               [ 4]  365 	mov	r3,a
      0000B1 EC               [ 4]  366 	mov	a,r4
      0000B2 33               [ 4]  367 	rlc	a
      0000B3 FC               [ 4]  368 	mov	r4,a
      0000B4 ED               [ 4]  369 	mov	a,r5
      0000B5 33               [ 4]  370 	rlc	a
      0000B6 FD               [ 4]  371 	mov	r5,a
      0000B7 EE               [ 4]  372 	mov	a,r6
      0000B8 33               [ 4]  373 	rlc	a
      0000B9 FE               [ 4]  374 	mov	r6,a
                                    375 ;	printf_large.c:201: if (radix <= b4 )
      0000BA C3               [ 4]  376 	clr	c
      0000BB EF               [ 4]  377 	mov	a,r7
      0000BC 9A               [ 4]  378 	subb	a,r2
      0000BD 40 07            [12]  379 	jc   00104$
      0000BF                        380 00124$:
                                    381 ;	printf_large.c:203: b4 -= radix;
      0000BF C3               [ 4]  382 	clr	c
      0000C0 EF               [ 4]  383 	mov	a,r7
      0000C1 9A               [ 4]  384 	subb	a,r2
      0000C2 FF               [ 4]  385 	mov	r7,a
                                    386 ;	printf_large.c:204: ul |= 1;
      0000C3 43 03 01         [12]  387 	orl	ar3,#0x01
      0000C6                        388 00104$:
                                    389 ;	printf_large.c:206: } while (--i);
      0000C6 18               [ 4]  390 	dec	r0
      0000C7 E8               [ 4]  391 	mov	a,r0
      0000C8 70 D4            [12]  392 	jnz  00103$
      0000CA                        393 00125$:
                                    394 ;	printf_large.c:207: value.ul = ul;
      0000CA 90s00r00r08      [12]  395 	mov	dptr,#_value
      0000CE EB               [ 4]  396 	mov	a,r3
      0000CF F0               [ 8]  397 	movx	@dptr,a
      0000D0 A3               [12]  398 	inc	dptr
      0000D1 EC               [ 4]  399 	mov	a,r4
      0000D2 F0               [ 8]  400 	movx	@dptr,a
      0000D3 A3               [12]  401 	inc	dptr
      0000D4 ED               [ 4]  402 	mov	a,r5
      0000D5 F0               [ 8]  403 	movx	@dptr,a
      0000D6 A3               [12]  404 	inc	dptr
      0000D7 EE               [ 4]  405 	mov	a,r6
      0000D8 F0               [ 8]  406 	movx	@dptr,a
                                    407 ;	printf_large.c:208: value.byte[4] = b4;
      0000D9 90s00r00r0C      [12]  408 	mov	dptr,#(_value + 0x000004)
      0000DD EF               [ 4]  409 	mov	a,r7
      0000DE F0               [ 8]  410 	movx	@dptr,a
      0000DF                        411 00106$:
                                    412 ;	printf_large.c:209: }
      0000DF 22               [16]  413 	ret
                                    414 ;------------------------------------------------------------
                                    415 ;Allocation info for local variables in function 'output_float'
                                    416 ;------------------------------------------------------------
                                    417 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                                    418 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                                    419 ;left                      Allocated with name '_output_float_PARM_4'
                                    420 ;zero                      Allocated with name '_output_float_PARM_5'
                                    421 ;sign                      Allocated with name '_output_float_PARM_6'
                                    422 ;space                     Allocated with name '_output_float_PARM_7'
                                    423 ;f                         Allocated with name '_output_float_f_65536_75'
                                    424 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_65536_76'
                                    425 ;negative                  Allocated with name '_output_float_negative_65536_76'
                                    426 ;integerPart               Allocated to registers r2 r3 r4 r5 
                                    427 ;rounding                  Allocated to registers r0 r1 r7 r6 
                                    428 ;decimalPart               Allocated with name '_output_float_decimalPart_65536_76'
                                    429 ;fpBI                      Allocated to registers r6 
                                    430 ;fpBD                      Allocated to registers 
                                    431 ;minWidth                  Allocated to registers r2 
                                    432 ;i                         Allocated to registers 
                                    433 ;exp                       Allocated with name '_output_float_exp_65536_76'
                                    434 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                                    435 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                                    436 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                                    437 ;sloc3                     Allocated with name '_output_float_sloc3_1_0'
                                    438 ;------------------------------------------------------------
                                    439 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                                    440 ;	-----------------------------------------
                                    441 ;	 function output_float
                                    442 ;	-----------------------------------------
      0000E0                        443 _output_float:
      0000E0 AA 82            [ 8]  444 	mov	r2,dpl
      0000E2 AB 83            [ 8]  445 	mov	r3,dph
      0000E4 AC 93            [ 8]  446 	mov	r4,dpx
      0000E6 AD F0            [ 8]  447 	mov	r5,b
                                    448 ;	printf_large.c:247: _Bool negative = 0;
                                    449 ;	genAssign: resultIsFar = TRUE
      0000E8 90s00r00r99      [12]  450 	mov	dptr,#_output_float_negative_65536_76
      0000EC E4               [ 4]  451 	clr	a
      0000ED F0               [ 8]  452 	movx	@dptr,a
                                    453 ;	printf_large.c:253: signed char exp = -128;
                                    454 ;	genAssign: resultIsFar = TRUE
      0000EE 90s00r00r9E      [12]  455 	mov	dptr,#_output_float_exp_65536_76
      0000F2 74 80            [ 8]  456 	mov	a,#0x80
      0000F4 F0               [ 8]  457 	movx	@dptr,a
                                    458 ;	printf_large.c:256: if (f<0)
                                    459 ;	genAssign: resultIsFar = TRUE
      0000F5 90s00r00r00      [12]  460 	mov	dptr,#___fslt_PARM_2
      0000F9 E4               [ 4]  461 	clr	a
      0000FA F0               [ 8]  462 	movx	@dptr,a
      0000FB A3               [12]  463 	inc	dptr
      0000FC F0               [ 8]  464 	movx	@dptr,a
      0000FD A3               [12]  465 	inc	dptr
      0000FE F0               [ 8]  466 	movx	@dptr,a
      0000FF A3               [12]  467 	inc	dptr
      000100 F0               [ 8]  468 	movx	@dptr,a
      000101 C0 02            [ 8]  469 	push	ar2
      000103 C0 03            [ 8]  470 	push	ar3
      000105 C0 04            [ 8]  471 	push	ar4
      000107 C0 05            [ 8]  472 	push	ar5
      000109 8A 82            [ 8]  473 	mov	dpl,r2
      00010B 8B 83            [ 8]  474 	mov	dph,r3
      00010D 8C 93            [ 8]  475 	mov	dpx,r4
      00010F 8D F0            [ 8]  476 	mov	b,r5
      000111 12s00r00r00      [16]  477 	lcall	___fslt
      000115 D0 05            [ 8]  478 	pop	ar5
      000117 D0 04            [ 8]  479 	pop	ar4
      000119 D0 03            [ 8]  480 	pop	ar3
      00011B D0 02            [ 8]  481 	pop	ar2
      00011D E5 82            [ 8]  482 	mov	a,dpl
      00011F 60 0B            [12]  483 	jz  00102$
      000121                        484 00439$:
                                    485 ;	printf_large.c:258: negative=1;
                                    486 ;	genAssign: resultIsFar = TRUE
      000121 90s00r00r99      [12]  487 	mov	dptr,#_output_float_negative_65536_76
      000125 74 01            [ 8]  488 	mov	a,#0x01
      000127 F0               [ 8]  489 	movx	@dptr,a
                                    490 ;	printf_large.c:259: f=-f;
      000128 ED               [ 4]  491 	mov	a,r5
      000129 B2 E7            [ 8]  492 	cpl	acc[7]
      00012B FD               [ 4]  493 	mov	r5,a
      00012C                        494 00102$:
                                    495 ;	printf_large.c:262: if (f>0x00ffffff)
                                    496 ;	genAssign: resultIsFar = TRUE
      00012C 90s00r00r00      [12]  497 	mov	dptr,#___fslt_PARM_2
      000130 EA               [ 4]  498 	mov	a,r2
      000131 F0               [ 8]  499 	movx	@dptr,a
      000132 A3               [12]  500 	inc	dptr
      000133 EB               [ 4]  501 	mov	a,r3
      000134 F0               [ 8]  502 	movx	@dptr,a
      000135 A3               [12]  503 	inc	dptr
      000136 EC               [ 4]  504 	mov	a,r4
      000137 F0               [ 8]  505 	movx	@dptr,a
      000138 A3               [12]  506 	inc	dptr
      000139 ED               [ 4]  507 	mov	a,r5
      00013A F0               [ 8]  508 	movx	@dptr,a
      00013B C0 02            [ 8]  509 	push	ar2
      00013D C0 03            [ 8]  510 	push	ar3
      00013F C0 04            [ 8]  511 	push	ar4
      000141 C0 05            [ 8]  512 	push	ar5
      000143 90 7F FF FF      [12]  513 	mov	dptr,#0x7fffff
      000147 75 F0 4B         [12]  514 	mov	b,#0x4b
      00014A 12s00r00r00      [16]  515 	lcall	___fslt
      00014E D0 05            [ 8]  516 	pop	ar5
      000150 D0 04            [ 8]  517 	pop	ar4
      000152 D0 03            [ 8]  518 	pop	ar3
      000154 D0 02            [ 8]  519 	pop	ar2
      000156 E5 82            [ 8]  520 	mov	a,dpl
      000158 70 04            [12]  521 	jnz	00440$
      00015A 02s00r02rA0      [16]  522 	ljmp	00111$
      00015E                        523 00440$:
                                    524 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
                                    525 ;	genAssign: resultIsFar = TRUE
      00015E 90s00r00r9F      [12]  526 	mov	dptr,#_output_float_sloc0_1_0
      000162 E4               [ 4]  527 	clr	a
      000163 F0               [ 8]  528 	movx	@dptr,a
      000164                        529 00181$:
                                    530 ;	genAssign: resultIsFar = TRUE
      000164 90s00r00r00      [12]  531 	mov	dptr,#___fslt_PARM_2
      000168 E4               [ 4]  532 	clr	a
      000169 F0               [ 8]  533 	movx	@dptr,a
      00016A A3               [12]  534 	inc	dptr
      00016B E4               [ 4]  535 	clr	a
      00016C F0               [ 8]  536 	movx	@dptr,a
      00016D A3               [12]  537 	inc	dptr
      00016E 74 20            [ 8]  538 	mov	a,#0x20
      000170 F0               [ 8]  539 	movx	@dptr,a
      000171 A3               [12]  540 	inc	dptr
      000172 74 41            [ 8]  541 	mov	a,#0x41
      000174 F0               [ 8]  542 	movx	@dptr,a
      000175 C0 02            [ 8]  543 	push	ar2
      000177 C0 03            [ 8]  544 	push	ar3
      000179 C0 04            [ 8]  545 	push	ar4
      00017B C0 05            [ 8]  546 	push	ar5
      00017D 8A 82            [ 8]  547 	mov	dpl,r2
      00017F 8B 83            [ 8]  548 	mov	dph,r3
      000181 8C 93            [ 8]  549 	mov	dpx,r4
      000183 8D F0            [ 8]  550 	mov	b,r5
      000185 12s00r00r00      [16]  551 	lcall	___fslt
      000189 D0 05            [ 8]  552 	pop	ar5
      00018B D0 04            [ 8]  553 	pop	ar4
      00018D D0 03            [ 8]  554 	pop	ar3
      00018F D0 02            [ 8]  555 	pop	ar2
      000191 E5 82            [ 8]  556 	mov	a,dpl
      000193 70 37            [12]  557 	jnz  00205$
      000195                        558 00441$:
                                    559 ;	genAssign: resultIsFar = TRUE
      000195 90s00r00r00      [12]  560 	mov	dptr,#___fsdiv_PARM_2
      000199 E4               [ 4]  561 	clr	a
      00019A F0               [ 8]  562 	movx	@dptr,a
      00019B A3               [12]  563 	inc	dptr
      00019C E4               [ 4]  564 	clr	a
      00019D F0               [ 8]  565 	movx	@dptr,a
      00019E A3               [12]  566 	inc	dptr
      00019F 74 20            [ 8]  567 	mov	a,#0x20
      0001A1 F0               [ 8]  568 	movx	@dptr,a
      0001A2 A3               [12]  569 	inc	dptr
      0001A3 74 41            [ 8]  570 	mov	a,#0x41
      0001A5 F0               [ 8]  571 	movx	@dptr,a
      0001A6 8A 82            [ 8]  572 	mov	dpl,r2
      0001A8 8B 83            [ 8]  573 	mov	dph,r3
      0001AA 8C 93            [ 8]  574 	mov	dpx,r4
      0001AC 8D F0            [ 8]  575 	mov	b,r5
      0001AE 12s00r00r00      [16]  576 	lcall	___fsdiv
      0001B2 AE 82            [ 8]  577 	mov	r6,dpl
      0001B4 AF 83            [ 8]  578 	mov	r7,dph
      0001B6 A8 93            [ 8]  579 	mov	r0,dpx
      0001B8 A9 F0            [ 8]  580 	mov	r1,b
                                    581 ;	genAssign: resultIsFar = FALSE
      0001BA 8E 02            [ 8]  582 	mov	ar2,r6
      0001BC 8F 03            [ 8]  583 	mov	ar3,r7
      0001BE 88 04            [ 8]  584 	mov	ar4,r0
      0001C0 89 05            [ 8]  585 	mov	ar5,r1
      0001C2 90s00r00r9F      [12]  586 	mov	dptr,#_output_float_sloc0_1_0
      0001C6 E0               [ 8]  587 	movx	a,@dptr
      0001C7 24 01            [ 8]  588 	add	a,#0x01
      0001C9 F0               [ 8]  589 	movx	@dptr,a
      0001CA 80 98            [12]  590 	sjmp 00181$
      0001CC                        591 00205$:
      0001CC 90s00r00r9F      [12]  592 	mov	dptr,#_output_float_sloc0_1_0
                                    593 ;	genAssign: resultIsFar = TRUE
      0001D0 E0               [ 8]  594 	movx	a,@dptr
      0001D1 90s00r00rA0      [12]  595 	mov	dptr,#_output_float_sloc1_1_0
      0001D5 F0               [ 8]  596 	movx	@dptr,a
      0001D6                        597 00184$:
                                    598 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
                                    599 ;	genAssign: resultIsFar = TRUE
      0001D6 90s00r00r00      [12]  600 	mov	dptr,#___fslt_PARM_2
      0001DA E4               [ 4]  601 	clr	a
      0001DB F0               [ 8]  602 	movx	@dptr,a
      0001DC A3               [12]  603 	inc	dptr
      0001DD E4               [ 4]  604 	clr	a
      0001DE F0               [ 8]  605 	movx	@dptr,a
      0001DF A3               [12]  606 	inc	dptr
      0001E0 74 80            [ 8]  607 	mov	a,#0x80
      0001E2 F0               [ 8]  608 	movx	@dptr,a
      0001E3 A3               [12]  609 	inc	dptr
      0001E4 74 3F            [ 8]  610 	mov	a,#0x3f
      0001E6 F0               [ 8]  611 	movx	@dptr,a
      0001E7 C0 02            [ 8]  612 	push	ar2
      0001E9 C0 03            [ 8]  613 	push	ar3
      0001EB C0 04            [ 8]  614 	push	ar4
      0001ED C0 05            [ 8]  615 	push	ar5
      0001EF 8A 82            [ 8]  616 	mov	dpl,r2
      0001F1 8B 83            [ 8]  617 	mov	dph,r3
      0001F3 8C 93            [ 8]  618 	mov	dpx,r4
      0001F5 8D F0            [ 8]  619 	mov	b,r5
      0001F7 12s00r00r00      [16]  620 	lcall	___fslt
      0001FB D0 05            [ 8]  621 	pop	ar5
      0001FD D0 04            [ 8]  622 	pop	ar4
      0001FF D0 03            [ 8]  623 	pop	ar3
      000201 D0 02            [ 8]  624 	pop	ar2
      000203 E5 82            [ 8]  625 	mov	a,dpl
      000205 60 36            [12]  626 	jz  00246$
      000207                        627 00442$:
                                    628 ;	genAssign: resultIsFar = TRUE
      000207 90s00r00r00      [12]  629 	mov	dptr,#___fsmul_PARM_2
      00020B EA               [ 4]  630 	mov	a,r2
      00020C F0               [ 8]  631 	movx	@dptr,a
      00020D A3               [12]  632 	inc	dptr
      00020E EB               [ 4]  633 	mov	a,r3
      00020F F0               [ 8]  634 	movx	@dptr,a
      000210 A3               [12]  635 	inc	dptr
      000211 EC               [ 4]  636 	mov	a,r4
      000212 F0               [ 8]  637 	movx	@dptr,a
      000213 A3               [12]  638 	inc	dptr
      000214 ED               [ 4]  639 	mov	a,r5
      000215 F0               [ 8]  640 	movx	@dptr,a
      000216 90 00 00 00      [12]  641 	mov  dptr,#0x0000
      00021A 75 93 20         [12]  642 	mov	dpx,#0x20
      00021D 75 F0 41         [12]  643 	mov	b,#0x41
      000220 12s00r00r00      [16]  644 	lcall	___fsmul
      000224 AE 82            [ 8]  645 	mov	r6,dpl
      000226 AF 83            [ 8]  646 	mov	r7,dph
      000228 A8 93            [ 8]  647 	mov	r0,dpx
      00022A A9 F0            [ 8]  648 	mov	r1,b
                                    649 ;	genAssign: resultIsFar = FALSE
      00022C 8E 02            [ 8]  650 	mov	ar2,r6
      00022E 8F 03            [ 8]  651 	mov	ar3,r7
      000230 88 04            [ 8]  652 	mov	ar4,r0
      000232 89 05            [ 8]  653 	mov	ar5,r1
      000234 90s00r00rA0      [12]  654 	mov	dptr,#_output_float_sloc1_1_0
      000238 E0               [ 8]  655 	movx	a,@dptr
      000239 14               [ 4]  656 	dec	a
      00023A F0               [ 8]  657 	movx	@dptr,a
      00023B 80 99            [12]  658 	sjmp 00184$
      00023D                        659 00246$:
      00023D 90s00r00rA0      [12]  660 	mov	dptr,#_output_float_sloc1_1_0
                                    661 ;	genAssign: resultIsFar = TRUE
      000241 E0               [ 8]  662 	movx	a,@dptr
      000242 90s00r00r9E      [12]  663 	mov	dptr,#_output_float_exp_65536_76
      000246 F0               [ 8]  664 	movx	@dptr,a
                                    665 ;	printf_large.c:269: if (negative)
      000247 90s00r00r99      [12]  666 	mov	dptr,#_output_float_negative_65536_76
      00024B E0               [ 8]  667 	movx	a,@dptr
      00024C 60 19            [12]  668 	jz  00108$
      00024E                        669 00443$:
                                    670 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      00024E C0 02            [ 8]  671 	push	ar2
      000250 C0 03            [ 8]  672 	push	ar3
      000252 C0 04            [ 8]  673 	push	ar4
      000254 C0 05            [ 8]  674 	push	ar5
      000256 75 82 2D         [12]  675 	mov	dpl,#0x2d
      000259 12s00r00r00      [16]  676 	lcall	__output_char
      00025D D0 05            [ 8]  677 	pop	ar5
      00025F D0 04            [ 8]  678 	pop	ar4
      000261 D0 03            [ 8]  679 	pop	ar3
      000263 D0 02            [ 8]  680 	pop	ar2
      000265 80 1E            [12]  681 	sjmp 00109$
      000267                        682 00108$:
                                    683 ;	printf_large.c:275: if (sign)
      000267 90s00r00r13      [12]  684 	mov	dptr,#_output_float_PARM_6
      00026B E0               [ 8]  685 	movx	a,@dptr
      00026C 60 17            [12]  686 	jz  00109$
      00026E                        687 00444$:
                                    688 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      00026E C0 02            [ 8]  689 	push	ar2
      000270 C0 03            [ 8]  690 	push	ar3
      000272 C0 04            [ 8]  691 	push	ar4
      000274 C0 05            [ 8]  692 	push	ar5
      000276 75 82 2B         [12]  693 	mov	dpl,#0x2b
      000279 12s00r00r00      [16]  694 	lcall	__output_char
      00027D D0 05            [ 8]  695 	pop	ar5
      00027F D0 04            [ 8]  696 	pop	ar4
      000281 D0 03            [ 8]  697 	pop	ar3
      000283 D0 02            [ 8]  698 	pop	ar2
      000285                        699 00109$:
                                    700 ;	printf_large.c:280: reqWidth = 0;
                                    701 ;	genAssign: resultIsFar = TRUE
      000285 90s00r00r0F      [12]  702 	mov	dptr,#_output_float_PARM_2
                                    703 ;	printf_large.c:281: left = 0;
                                    704 ;	genAssign: resultIsFar = TRUE
                                    705 ;	printf_large.c:282: zero = 0;
                                    706 ;	genAssign: resultIsFar = TRUE
                                    707 ;	printf_large.c:283: sign = 0;
                                    708 ;	genAssign: resultIsFar = TRUE
      000289 E4               [ 4]  709 	clr   a
      00028A F0               [ 8]  710 	movx  @dptr,a
      00028B 90s00r00r11      [12]  711 	mov   dptr,#_output_float_PARM_4
      00028F F0               [ 8]  712 	movx  @dptr,a
      000290 90s00r00r12      [12]  713 	mov   dptr,#_output_float_PARM_5
      000294 F0               [ 8]  714 	movx  @dptr,a
      000295 90s00r00r13      [12]  715 	mov   dptr,#_output_float_PARM_6
      000299 F0               [ 8]  716 	movx  @dptr,a
                                    717 ;	printf_large.c:284: space = 0;
                                    718 ;	genAssign: resultIsFar = TRUE
      00029A 90s00r00r14      [12]  719 	mov	dptr,#_output_float_PARM_7
      00029E E4               [ 4]  720 	clr	a
      00029F F0               [ 8]  721 	movx	@dptr,a
      0002A0                        722 00111$:
                                    723 ;	printf_large.c:288: if (reqDecimals==-1)
      0002A0 90s00r00r10      [12]  724 	mov	dptr,#_output_float_PARM_3
      0002A4 E0               [ 8]  725 	movx	a,@dptr
      0002A5 B4 FF 07         [16]  726 	cjne a,#0xff,00113$
      0002A8                        727 00446$:
                                    728 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
                                    729 ;	genAssign: resultIsFar = TRUE
      0002A8 90s00r00r10      [12]  730 	mov	dptr,#_output_float_PARM_3
      0002AC 74 06            [ 8]  731 	mov	a,#0x06
      0002AE F0               [ 8]  732 	movx	@dptr,a
      0002AF                        733 00113$:
                                    734 ;	printf_large.c:292: rounding = 0.5;
                                    735 ;	genAssign: resultIsFar = TRUE
      0002AF 78 00            [ 8]  736 	mov	r0,#0x00
      0002B1 79 00            [ 8]  737 	mov	r1,#0x00
      0002B3 7F 00            [ 8]  738 	mov	r7,#0x00
      0002B5 7E 3F            [ 8]  739 	mov	r6,#0x3f
                                    740 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0002B7 90s00r00r10      [12]  741 	mov	dptr,#_output_float_PARM_3
                                    742 ;	genAssign: resultIsFar = TRUE
      0002BB E0               [ 8]  743 	movx	a,@dptr
      0002BC 90s00r00rA4      [12]  744 	mov	dptr,#_output_float_sloc2_1_0
      0002C0 F0               [ 8]  745 	movx	@dptr,a
      0002C1                        746 00187$:
      0002C1 90s00r00rA4      [12]  747 	mov	dptr,#_output_float_sloc2_1_0
      0002C5 E0               [ 8]  748 	movx	a,@dptr
      0002C6 60 46            [12]  749 	jz  00114$
      0002C8                        750 00447$:
                                    751 ;	printf_large.c:295: rounding /= 10.0;
      0002C8 C0 02            [ 8]  752 	push	ar2
      0002CA C0 03            [ 8]  753 	push	ar3
      0002CC C0 04            [ 8]  754 	push	ar4
      0002CE C0 05            [ 8]  755 	push	ar5
                                    756 ;	genAssign: resultIsFar = TRUE
      0002D0 90s00r00r00      [12]  757 	mov	dptr,#___fsdiv_PARM_2
      0002D4 E4               [ 4]  758 	clr	a
      0002D5 F0               [ 8]  759 	movx	@dptr,a
      0002D6 A3               [12]  760 	inc	dptr
      0002D7 E4               [ 4]  761 	clr	a
      0002D8 F0               [ 8]  762 	movx	@dptr,a
      0002D9 A3               [12]  763 	inc	dptr
      0002DA 74 20            [ 8]  764 	mov	a,#0x20
      0002DC F0               [ 8]  765 	movx	@dptr,a
      0002DD A3               [12]  766 	inc	dptr
      0002DE 74 41            [ 8]  767 	mov	a,#0x41
      0002E0 F0               [ 8]  768 	movx	@dptr,a
      0002E1 88 82            [ 8]  769 	mov	dpl,r0
      0002E3 89 83            [ 8]  770 	mov	dph,r1
      0002E5 8F 93            [ 8]  771 	mov	dpx,r7
      0002E7 8E F0            [ 8]  772 	mov	b,r6
      0002E9 12s00r00r00      [16]  773 	lcall	___fsdiv
      0002ED AA 82            [ 8]  774 	mov	r2,dpl
      0002EF AB 83            [ 8]  775 	mov	r3,dph
      0002F1 AC 93            [ 8]  776 	mov	r4,dpx
      0002F3 AD F0            [ 8]  777 	mov	r5,b
                                    778 ;	genAssign: resultIsFar = TRUE
      0002F5 8A 00            [ 8]  779 	mov	ar0,r2
      0002F7 8B 01            [ 8]  780 	mov	ar1,r3
      0002F9 8C 07            [ 8]  781 	mov	ar7,r4
      0002FB 8D 06            [ 8]  782 	mov	ar6,r5
                                    783 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0002FD 90s00r00rA4      [12]  784 	mov	dptr,#_output_float_sloc2_1_0
      000301 E0               [ 8]  785 	movx	a,@dptr
      000302 14               [ 4]  786 	dec	a
      000303 F0               [ 8]  787 	movx	@dptr,a
      000304 D0 05            [ 8]  788 	pop	ar5
      000306 D0 04            [ 8]  789 	pop	ar4
      000308 D0 03            [ 8]  790 	pop	ar3
      00030A D0 02            [ 8]  791 	pop	ar2
      00030C 80 B3            [12]  792 	sjmp 00187$
      00030E                        793 00114$:
                                    794 ;	printf_large.c:297: f += rounding;
                                    795 ;	genAssign: resultIsFar = TRUE
      00030E 90s00r00r00      [12]  796 	mov	dptr,#___fsadd_PARM_2
      000312 E8               [ 4]  797 	mov	a,r0
      000313 F0               [ 8]  798 	movx	@dptr,a
      000314 A3               [12]  799 	inc	dptr
      000315 E9               [ 4]  800 	mov	a,r1
      000316 F0               [ 8]  801 	movx	@dptr,a
      000317 A3               [12]  802 	inc	dptr
      000318 EF               [ 4]  803 	mov	a,r7
      000319 F0               [ 8]  804 	movx	@dptr,a
      00031A A3               [12]  805 	inc	dptr
      00031B EE               [ 4]  806 	mov	a,r6
      00031C F0               [ 8]  807 	movx	@dptr,a
      00031D 8A 82            [ 8]  808 	mov	dpl,r2
      00031F 8B 83            [ 8]  809 	mov	dph,r3
      000321 8C 93            [ 8]  810 	mov	dpx,r4
      000323 8D F0            [ 8]  811 	mov	b,r5
      000325 12s00r00r00      [16]  812 	lcall	___fsadd
      000329 AA 82            [ 8]  813 	mov	r2,dpl
      00032B AB 83            [ 8]  814 	mov	r3,dph
      00032D AC 93            [ 8]  815 	mov	r4,dpx
      00032F AD F0            [ 8]  816 	mov	r5,b
                                    817 ;	genAssign: resultIsFar = TRUE
      000331 90s00r00r15      [12]  818 	mov	dptr,#_output_float_f_65536_75
      000335 EA               [ 4]  819 	mov	a,r2
      000336 F0               [ 8]  820 	movx	@dptr,a
      000337 A3               [12]  821 	inc	dptr
      000338 EB               [ 4]  822 	mov	a,r3
      000339 F0               [ 8]  823 	movx	@dptr,a
      00033A A3               [12]  824 	inc	dptr
      00033B EC               [ 4]  825 	mov	a,r4
      00033C F0               [ 8]  826 	movx	@dptr,a
      00033D A3               [12]  827 	inc	dptr
      00033E ED               [ 4]  828 	mov	a,r5
      00033F F0               [ 8]  829 	movx	@dptr,a
                                    830 ;	printf_large.c:300: integerPart = f;
      000340 05 86            [ 8]  831 	inc	dps
      000342 90s00r00r15      [12]  832 	mov	dptr,#_output_float_f_65536_75
      000346 E0               [ 8]  833 	movx	a,@dptr
      000347 F5 82            [ 8]  834 	mov	dpl,a
      000349 A3               [12]  835 	inc	dptr
      00034A E0               [ 8]  836 	movx	a,@dptr
      00034B F5 83            [ 8]  837 	mov	dph,a
      00034D A3               [12]  838 	inc	dptr
      00034E E0               [ 8]  839 	movx	a,@dptr
      00034F F5 93            [ 8]  840 	mov	dpx,a
      000351 A3               [12]  841 	inc	dptr
      000352 E0               [ 8]  842 	movx	a,@dptr
      000353 F5 F0            [ 8]  843 	mov	b,a
      000355 75 86 00         [12]  844 	mov	dps,#0
      000358 12s00r00r00      [16]  845 	lcall	___fs2ulong
      00035C AE 82            [ 8]  846 	mov	r6,dpl
      00035E AF 83            [ 8]  847 	mov	r7,dph
      000360 A8 93            [ 8]  848 	mov	r0,dpx
      000362 A9 F0            [ 8]  849 	mov	r1,b
                                    850 ;	genAssign: resultIsFar = FALSE
                                    851 ;	printf_large.c:301: decimalPart = f - integerPart;
      000364 C0 06            [ 8]  852 	push	ar6
      000366 C0 07            [ 8]  853 	push	ar7
      000368 C0 00            [ 8]  854 	push	ar0
      00036A C0 01            [ 8]  855 	push	ar1
      00036C 8E 82            [ 8]  856 	mov	dpl,r6
      00036E 8F 83            [ 8]  857 	mov	dph,r7
      000370 88 93            [ 8]  858 	mov	dpx,r0
      000372 89 F0            [ 8]  859 	mov	b,r1
      000374 12s00r00r00      [16]  860 	lcall	___ulong2fs
      000378 AA 82            [ 8]  861 	mov	r2,dpl
      00037A AB 83            [ 8]  862 	mov	r3,dph
      00037C AC 93            [ 8]  863 	mov	r4,dpx
      00037E AD F0            [ 8]  864 	mov	r5,b
      000380 D0 01            [ 8]  865 	pop	ar1
      000382 D0 00            [ 8]  866 	pop	ar0
      000384 D0 07            [ 8]  867 	pop	ar7
      000386 D0 06            [ 8]  868 	pop	ar6
                                    869 ;	genAssign: resultIsFar = TRUE
      000388 90s00r00r00      [12]  870 	mov	dptr,#___fssub_PARM_2
      00038C EA               [ 4]  871 	mov	a,r2
      00038D F0               [ 8]  872 	movx	@dptr,a
      00038E A3               [12]  873 	inc	dptr
      00038F EB               [ 4]  874 	mov	a,r3
      000390 F0               [ 8]  875 	movx	@dptr,a
      000391 A3               [12]  876 	inc	dptr
      000392 EC               [ 4]  877 	mov	a,r4
      000393 F0               [ 8]  878 	movx	@dptr,a
      000394 A3               [12]  879 	inc	dptr
      000395 ED               [ 4]  880 	mov	a,r5
      000396 F0               [ 8]  881 	movx	@dptr,a
      000397 C0 06            [ 8]  882 	push	ar6
      000399 C0 07            [ 8]  883 	push	ar7
      00039B C0 00            [ 8]  884 	push	ar0
      00039D C0 01            [ 8]  885 	push	ar1
      00039F 05 86            [ 8]  886 	inc	dps
      0003A1 90s00r00r15      [12]  887 	mov	dptr,#_output_float_f_65536_75
      0003A5 E0               [ 8]  888 	movx	a,@dptr
      0003A6 F5 82            [ 8]  889 	mov	dpl,a
      0003A8 A3               [12]  890 	inc	dptr
      0003A9 E0               [ 8]  891 	movx	a,@dptr
      0003AA F5 83            [ 8]  892 	mov	dph,a
      0003AC A3               [12]  893 	inc	dptr
      0003AD E0               [ 8]  894 	movx	a,@dptr
      0003AE F5 93            [ 8]  895 	mov	dpx,a
      0003B0 A3               [12]  896 	inc	dptr
      0003B1 E0               [ 8]  897 	movx	a,@dptr
      0003B2 F5 F0            [ 8]  898 	mov	b,a
      0003B4 75 86 00         [12]  899 	mov	dps,#0
      0003B7 12s00r00r00      [16]  900 	lcall	___fssub
      0003BB AA 82            [ 8]  901 	mov	r2,dpl
      0003BD AB 83            [ 8]  902 	mov	r3,dph
      0003BF AC 93            [ 8]  903 	mov	r4,dpx
      0003C1 AD F0            [ 8]  904 	mov	r5,b
      0003C3 D0 01            [ 8]  905 	pop	ar1
      0003C5 D0 00            [ 8]  906 	pop	ar0
      0003C7 D0 07            [ 8]  907 	pop	ar7
      0003C9 D0 06            [ 8]  908 	pop	ar6
                                    909 ;	genAssign: resultIsFar = FALSE
                                    910 ;	printf_large.c:304: while (integerPart)
                                    911 ;	genAssign: resultIsFar = TRUE
      0003CB 90s00r00rA4      [12]  912 	mov	dptr,#_output_float_sloc2_1_0
      0003CF E4               [ 4]  913 	clr	a
      0003D0 F0               [ 8]  914 	movx	@dptr,a
      0003D1                        915 00115$:
      0003D1 EE               [ 4]  916 	mov	a,r6
      0003D2 4F               [ 4]  917 	orl	a,r7
      0003D3 48               [ 4]  918 	orl	a,r0
      0003D4 49               [ 4]  919 	orl	a,r1
      0003D5 70 04            [12]  920 	jnz	00448$
      0003D7 02s00r04r84      [16]  921 	ljmp	00248$
      0003DB                        922 00448$:
                                    923 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      0003DB C0 02            [ 8]  924 	push	ar2
      0003DD C0 03            [ 8]  925 	push	ar3
      0003DF C0 04            [ 8]  926 	push	ar4
      0003E1 C0 05            [ 8]  927 	push	ar5
      0003E3 90s00r00rA4      [12]  928 	mov	dptr,#_output_float_sloc2_1_0
                                    929 ;	genAssign: resultIsFar = FALSE
      0003E7 E0               [ 8]  930 	movx	a,@dptr
      0003E8 FA               [ 4]  931 	mov	r2,a
      0003E9 90s00r00rA4      [12]  932 	mov	dptr,#_output_float_sloc2_1_0
      0003ED E0               [ 8]  933 	movx	a,@dptr
      0003EE 24 01            [ 8]  934 	add	a,#0x01
      0003F0 F0               [ 8]  935 	movx	@dptr,a
      0003F1 90s00r00rA0      [12]  936 	mov	dptr,#_output_float_sloc1_1_0
      0003F5 EA               [ 4]  937 	mov	a,r2
      0003F6 24r19            [ 8]  938 	add	a,#_output_float_fpBuffer_65536_76
      0003F8 F0               [ 8]  939 	movx	@dptr,a
      0003F9 E4               [ 4]  940 	clr	a
      0003FA 34s00            [ 8]  941 	addc	a,#(_output_float_fpBuffer_65536_76 >> 8)
      0003FC A3               [12]  942 	inc	dptr
      0003FD F0               [ 8]  943 	movx	@dptr,a
      0003FE E4               [ 4]  944 	clr	a
      0003FF 34s00            [ 8]  945 	addc	a,#(_output_float_fpBuffer_65536_76 >> 16)
      000401 A3               [12]  946 	inc	dptr
      000402 F0               [ 8]  947 	movx	@dptr,a
                                    948 ;	genAssign: resultIsFar = TRUE
      000403 90s00r00r00      [12]  949 	mov	dptr,#__modulong_PARM_2
      000407 74 0A            [ 8]  950 	mov	a,#0x0a
      000409 F0               [ 8]  951 	movx	@dptr,a
      00040A E4               [ 4]  952 	clr	a
      00040B A3               [12]  953 	inc	dptr
      00040C F0               [ 8]  954 	movx	@dptr,a
      00040D A3               [12]  955 	inc	dptr
      00040E F0               [ 8]  956 	movx	@dptr,a
      00040F A3               [12]  957 	inc	dptr
      000410 F0               [ 8]  958 	movx	@dptr,a
      000411 C0 06            [ 8]  959 	push	ar6
      000413 C0 07            [ 8]  960 	push	ar7
      000415 C0 00            [ 8]  961 	push	ar0
      000417 C0 01            [ 8]  962 	push	ar1
      000419 8E 82            [ 8]  963 	mov	dpl,r6
      00041B 8F 83            [ 8]  964 	mov	dph,r7
      00041D 88 93            [ 8]  965 	mov	dpx,r0
      00041F 89 F0            [ 8]  966 	mov	b,r1
      000421 12s00r00r00      [16]  967 	lcall	__modulong
      000425 AD 82            [ 8]  968 	mov	r5,dpl
      000427 AA 83            [ 8]  969 	mov	r2,dph
      000429 AB 93            [ 8]  970 	mov	r3,dpx
      00042B AC F0            [ 8]  971 	mov	r4,b
      00042D D0 01            [ 8]  972 	pop	ar1
      00042F D0 00            [ 8]  973 	pop	ar0
      000431 D0 07            [ 8]  974 	pop	ar7
      000433 D0 06            [ 8]  975 	pop	ar6
      000435 74 30            [ 8]  976 	mov	a,#0x30
      000437 2D               [ 4]  977 	add	a,r5
      000438 FD               [ 4]  978 	mov	r5,a
      000439 90s00r00rA0      [12]  979 	mov	dptr,#_output_float_sloc1_1_0
      00043D E0               [ 8]  980 	movx	a,@dptr
      00043E C0 E0            [ 8]  981 	push	acc
      000440 A3               [12]  982 	inc	dptr
      000441 E0               [ 8]  983 	movx	a,@dptr
      000442 C0 E0            [ 8]  984 	push	acc
      000444 A3               [12]  985 	inc	dptr
      000445 E0               [ 8]  986 	movx	a,@dptr
      000446 F5 93            [ 8]  987 	mov	dpx,a
      000448 D0 83            [ 8]  988 	pop	dph
      00044A D0 82            [ 8]  989 	pop	dpl
      00044C ED               [ 4]  990 	mov	a,r5
      00044D F0               [ 8]  991 	movx	@dptr,a
                                    992 ;	printf_large.c:307: integerPart /= 10;
                                    993 ;	genAssign: resultIsFar = TRUE
      00044E 90s00r00r00      [12]  994 	mov	dptr,#__divulong_PARM_2
      000452 74 0A            [ 8]  995 	mov	a,#0x0a
      000454 F0               [ 8]  996 	movx	@dptr,a
      000455 E4               [ 4]  997 	clr	a
      000456 A3               [12]  998 	inc	dptr
      000457 F0               [ 8]  999 	movx	@dptr,a
      000458 A3               [12] 1000 	inc	dptr
      000459 F0               [ 8] 1001 	movx	@dptr,a
      00045A A3               [12] 1002 	inc	dptr
      00045B F0               [ 8] 1003 	movx	@dptr,a
      00045C 8E 82            [ 8] 1004 	mov	dpl,r6
      00045E 8F 83            [ 8] 1005 	mov	dph,r7
      000460 88 93            [ 8] 1006 	mov	dpx,r0
      000462 89 F0            [ 8] 1007 	mov	b,r1
      000464 12s00r00r00      [16] 1008 	lcall	__divulong
      000468 AA 82            [ 8] 1009 	mov	r2,dpl
      00046A AB 83            [ 8] 1010 	mov	r3,dph
      00046C AC 93            [ 8] 1011 	mov	r4,dpx
      00046E AD F0            [ 8] 1012 	mov	r5,b
                                   1013 ;	genAssign: resultIsFar = FALSE
      000470 8A 06            [ 8] 1014 	mov	ar6,r2
      000472 8B 07            [ 8] 1015 	mov	ar7,r3
      000474 8C 00            [ 8] 1016 	mov	ar0,r4
      000476 8D 01            [ 8] 1017 	mov	ar1,r5
      000478 D0 05            [ 8] 1018 	pop	ar5
      00047A D0 04            [ 8] 1019 	pop	ar4
      00047C D0 03            [ 8] 1020 	pop	ar3
      00047E D0 02            [ 8] 1021 	pop	ar2
      000480 02s00r03rD1      [16] 1022 	ljmp	00115$
      000484                       1023 00248$:
      000484 90s00r00rA4      [12] 1024 	mov	dptr,#_output_float_sloc2_1_0
                                   1025 ;	genAssign: resultIsFar = TRUE
      000488 E0               [ 8] 1026 	movx	a,@dptr
      000489 FE               [ 4] 1027 	mov	r6,a
                                   1028 ;	printf_large.c:309: if (!fpBI)
      00048A 90s00r00rA4      [12] 1029 	mov	dptr,#_output_float_sloc2_1_0
      00048E E0               [ 8] 1030 	movx	a,@dptr
      00048F 70 21            [12] 1031 	jnz  00119$
      000491                       1032 00449$:
                                   1033 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000491 90s00r00rA4      [12] 1034 	mov	dptr,#_output_float_sloc2_1_0
      000495 E0               [ 8] 1035 	movx	a,@dptr
      000496 24 01            [ 8] 1036 	add	a,#0x01
      000498 FE               [ 4] 1037 	mov	r6,a
      000499 90s00r00rA4      [12] 1038 	mov	dptr,#_output_float_sloc2_1_0
      00049D E0               [ 8] 1039 	movx	a,@dptr
      00049E 24r19            [ 8] 1040 	add	a,#_output_float_fpBuffer_65536_76
      0004A0 FF               [ 4] 1041 	mov	r7,a
      0004A1 E4               [ 4] 1042 	clr	a
      0004A2 34s00            [ 8] 1043 	addc	a,#(_output_float_fpBuffer_65536_76 >> 8)
      0004A4 F8               [ 4] 1044 	mov	r0,a
      0004A5 E4               [ 4] 1045 	clr	a
      0004A6 34s00            [ 8] 1046 	addc	a,#(_output_float_fpBuffer_65536_76 >> 16)
      0004A8 F9               [ 4] 1047 	mov	r1,a
      0004A9 8F 82            [ 8] 1048 	mov	dpl,r7
      0004AB 88 83            [ 8] 1049 	mov	dph,r0
      0004AD 89 93            [ 8] 1050 	mov	dpx,r1
      0004AF 74 30            [ 8] 1051 	mov	a,#0x30
      0004B1 F0               [ 8] 1052 	movx	@dptr,a
      0004B2                       1053 00119$:
                                   1054 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      0004B2 90s00r00r10      [12] 1055 	mov	dptr,#_output_float_PARM_3
                                   1056 ;	genAssign: resultIsFar = FALSE
      0004B6 E0               [ 8] 1057 	movx	a,@dptr
      0004B7 F8               [ 4] 1058 	mov	r0,a
                                   1059 ;	genAssign: resultIsFar = FALSE
      0004B8 8E 07            [ 8] 1060 	mov	ar7,r6
      0004BA                       1061 00190$:
      0004BA E8               [ 4] 1062 	mov	a,r0
      0004BB 70 06            [12] 1063 	jnz  00189$
      0004BD                       1064 00450$:
                                   1065 ;	genAssign: resultIsFar = FALSE
      0004BD 88 01            [ 8] 1066 	mov	ar1,r0
      0004BF 02s00r05rD7      [16] 1067 	ljmp	00120$
      0004C3                       1068 00189$:
                                   1069 ;	printf_large.c:320: decimalPart *= 10.0;
      0004C3 C0 06            [ 8] 1070 	push	ar6
                                   1071 ;	genAssign: resultIsFar = TRUE
      0004C5 90s00r00r00      [12] 1072 	mov	dptr,#___fsmul_PARM_2
      0004C9 EA               [ 4] 1073 	mov	a,r2
      0004CA F0               [ 8] 1074 	movx	@dptr,a
      0004CB A3               [12] 1075 	inc	dptr
      0004CC EB               [ 4] 1076 	mov	a,r3
      0004CD F0               [ 8] 1077 	movx	@dptr,a
      0004CE A3               [12] 1078 	inc	dptr
      0004CF EC               [ 4] 1079 	mov	a,r4
      0004D0 F0               [ 8] 1080 	movx	@dptr,a
      0004D1 A3               [12] 1081 	inc	dptr
      0004D2 ED               [ 4] 1082 	mov	a,r5
      0004D3 F0               [ 8] 1083 	movx	@dptr,a
      0004D4 C0 06            [ 8] 1084 	push	ar6
      0004D6 C0 07            [ 8] 1085 	push	ar7
      0004D8 C0 00            [ 8] 1086 	push	ar0
      0004DA 90 00 00 00      [12] 1087 	mov  dptr,#0x0000
      0004DE 75 93 20         [12] 1088 	mov	dpx,#0x20
      0004E1 75 F0 41         [12] 1089 	mov	b,#0x41
      0004E4 12s00r00r00      [16] 1090 	lcall	___fsmul
      0004E8 AA 82            [ 8] 1091 	mov	r2,dpl
      0004EA AB 83            [ 8] 1092 	mov	r3,dph
      0004EC AC 93            [ 8] 1093 	mov	r4,dpx
      0004EE AD F0            [ 8] 1094 	mov	r5,b
      0004F0 D0 00            [ 8] 1095 	pop	ar0
      0004F2 D0 07            [ 8] 1096 	pop	ar7
      0004F4 D0 06            [ 8] 1097 	pop	ar6
                                   1098 ;	genAssign: resultIsFar = TRUE
      0004F6 90s00r00r9A      [12] 1099 	mov	dptr,#_output_float_decimalPart_65536_76
      0004FA EA               [ 4] 1100 	mov	a,r2
      0004FB F0               [ 8] 1101 	movx	@dptr,a
      0004FC A3               [12] 1102 	inc	dptr
      0004FD EB               [ 4] 1103 	mov	a,r3
      0004FE F0               [ 8] 1104 	movx	@dptr,a
      0004FF A3               [12] 1105 	inc	dptr
      000500 EC               [ 4] 1106 	mov	a,r4
      000501 F0               [ 8] 1107 	movx	@dptr,a
      000502 A3               [12] 1108 	inc	dptr
      000503 ED               [ 4] 1109 	mov	a,r5
      000504 F0               [ 8] 1110 	movx	@dptr,a
                                   1111 ;	printf_large.c:322: integerPart = decimalPart;
      000505 C0 06            [ 8] 1112 	push	ar6
      000507 C0 07            [ 8] 1113 	push	ar7
      000509 C0 00            [ 8] 1114 	push	ar0
      00050B 05 86            [ 8] 1115 	inc	dps
      00050D 90s00r00r9A      [12] 1116 	mov	dptr,#_output_float_decimalPart_65536_76
      000511 E0               [ 8] 1117 	movx	a,@dptr
      000512 F5 82            [ 8] 1118 	mov	dpl,a
      000514 A3               [12] 1119 	inc	dptr
      000515 E0               [ 8] 1120 	movx	a,@dptr
      000516 F5 83            [ 8] 1121 	mov	dph,a
      000518 A3               [12] 1122 	inc	dptr
      000519 E0               [ 8] 1123 	movx	a,@dptr
      00051A F5 93            [ 8] 1124 	mov	dpx,a
      00051C A3               [12] 1125 	inc	dptr
      00051D E0               [ 8] 1126 	movx	a,@dptr
      00051E F5 F0            [ 8] 1127 	mov	b,a
      000520 75 86 00         [12] 1128 	mov	dps,#0
      000523 12s00r00r00      [16] 1129 	lcall	___fs2ulong
      000527 AA 82            [ 8] 1130 	mov	r2,dpl
      000529 AB 83            [ 8] 1131 	mov	r3,dph
      00052B AC 93            [ 8] 1132 	mov	r4,dpx
      00052D AD F0            [ 8] 1133 	mov	r5,b
      00052F D0 00            [ 8] 1134 	pop	ar0
      000531 D0 07            [ 8] 1135 	pop	ar7
      000533 D0 06            [ 8] 1136 	pop	ar6
                                   1137 ;	genAssign: resultIsFar = FALSE
                                   1138 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      000535 EF               [ 4] 1139 	mov	a,r7
      000536 24r19            [ 8] 1140 	add	a,#_output_float_fpBuffer_65536_76
      000538 F5 84            [ 8] 1141 	mov	dpl1,a
      00053A E4               [ 4] 1142 	clr	a
      00053B 34s00            [ 8] 1143 	addc	a,#(_output_float_fpBuffer_65536_76 >> 8)
      00053D F5 85            [ 8] 1144 	mov	dph1,a
      00053F E4               [ 4] 1145 	clr	a
      000540 34s00            [ 8] 1146 	addc	a,#(_output_float_fpBuffer_65536_76 >> 16)
      000542 F5 95            [ 8] 1147 	mov	dpx1,a
      000544 0F               [ 4] 1148 	inc	r7
      000545 8A 06            [ 8] 1149 	mov	ar6,r2
      000547 74 30            [ 8] 1150 	mov	a,#0x30
      000549 2E               [ 4] 1151 	add	a,r6
      00054A FE               [ 4] 1152 	mov  r6,a
      00054B 05 86            [ 8] 1153 	inc	dps
      00054D F0               [ 8] 1154 	movx	@dptr,a
      00054E 75 86 00         [12] 1155 	mov	dps,#0
                                   1156 ;	printf_large.c:324: decimalPart -= integerPart;
      000551 C0 06            [ 8] 1157 	push	ar6
      000553 C0 07            [ 8] 1158 	push	ar7
      000555 C0 00            [ 8] 1159 	push	ar0
      000557 8A 82            [ 8] 1160 	mov	dpl,r2
      000559 8B 83            [ 8] 1161 	mov	dph,r3
      00055B 8C 93            [ 8] 1162 	mov	dpx,r4
      00055D 8D F0            [ 8] 1163 	mov	b,r5
      00055F 12s00r00r00      [16] 1164 	lcall	___ulong2fs
      000563 AA 82            [ 8] 1165 	mov	r2,dpl
      000565 AB 83            [ 8] 1166 	mov	r3,dph
      000567 AC 93            [ 8] 1167 	mov	r4,dpx
      000569 AD F0            [ 8] 1168 	mov	r5,b
      00056B D0 00            [ 8] 1169 	pop	ar0
      00056D D0 07            [ 8] 1170 	pop	ar7
      00056F D0 06            [ 8] 1171 	pop	ar6
                                   1172 ;	genAssign: resultIsFar = TRUE
      000571 90s00r00r00      [12] 1173 	mov	dptr,#___fssub_PARM_2
      000575 EA               [ 4] 1174 	mov	a,r2
      000576 F0               [ 8] 1175 	movx	@dptr,a
      000577 A3               [12] 1176 	inc	dptr
      000578 EB               [ 4] 1177 	mov	a,r3
      000579 F0               [ 8] 1178 	movx	@dptr,a
      00057A A3               [12] 1179 	inc	dptr
      00057B EC               [ 4] 1180 	mov	a,r4
      00057C F0               [ 8] 1181 	movx	@dptr,a
      00057D A3               [12] 1182 	inc	dptr
      00057E ED               [ 4] 1183 	mov	a,r5
      00057F F0               [ 8] 1184 	movx	@dptr,a
      000580 C0 06            [ 8] 1185 	push	ar6
      000582 C0 07            [ 8] 1186 	push	ar7
      000584 C0 00            [ 8] 1187 	push	ar0
      000586 05 86            [ 8] 1188 	inc	dps
      000588 90s00r00r9A      [12] 1189 	mov	dptr,#_output_float_decimalPart_65536_76
      00058C E0               [ 8] 1190 	movx	a,@dptr
      00058D F5 82            [ 8] 1191 	mov	dpl,a
      00058F A3               [12] 1192 	inc	dptr
      000590 E0               [ 8] 1193 	movx	a,@dptr
      000591 F5 83            [ 8] 1194 	mov	dph,a
      000593 A3               [12] 1195 	inc	dptr
      000594 E0               [ 8] 1196 	movx	a,@dptr
      000595 F5 93            [ 8] 1197 	mov	dpx,a
      000597 A3               [12] 1198 	inc	dptr
      000598 E0               [ 8] 1199 	movx	a,@dptr
      000599 F5 F0            [ 8] 1200 	mov	b,a
      00059B 75 86 00         [12] 1201 	mov	dps,#0
      00059E 12s00r00r00      [16] 1202 	lcall	___fssub
      0005A2 75 86 01         [12] 1203 	mov     dps, #1
      0005A5 90s00r00rA8      [12] 1204 	mov     dptr, #_output_float_sloc3_1_0
      0005A9 E5 82            [ 8] 1205 	mov	a,dpl
      0005AB F0               [ 8] 1206 	movx	@dptr,a
      0005AC A3               [12] 1207 	inc	dptr
      0005AD E5 83            [ 8] 1208 	mov	a,dph
      0005AF F0               [ 8] 1209 	movx	@dptr,a
      0005B0 A3               [12] 1210 	inc	dptr
      0005B1 E5 93            [ 8] 1211 	mov	a,dpx
      0005B3 F0               [ 8] 1212 	movx	@dptr,a
      0005B4 A3               [12] 1213 	inc	dptr
      0005B5 E5 F0            [ 8] 1214 	mov	a,b
      0005B7 F0               [ 8] 1215 	movx	@dptr,a
      0005B8 75 86 00         [12] 1216 	mov	dps,#0
      0005BB D0 00            [ 8] 1217 	pop	ar0
      0005BD D0 07            [ 8] 1218 	pop	ar7
      0005BF D0 06            [ 8] 1219 	pop	ar6
      0005C1 90s00r00rA8      [12] 1220 	mov	dptr,#_output_float_sloc3_1_0
                                   1221 ;	genAssign: resultIsFar = FALSE
      0005C5 E0               [ 8] 1222 	movx	a,@dptr
      0005C6 FA               [ 4] 1223 	mov	r2,a
      0005C7 A3               [12] 1224 	inc	dptr
      0005C8 E0               [ 8] 1225 	movx	a,@dptr
      0005C9 FB               [ 4] 1226 	mov	r3,a
      0005CA A3               [12] 1227 	inc	dptr
      0005CB E0               [ 8] 1228 	movx	a,@dptr
      0005CC FC               [ 4] 1229 	mov	r4,a
      0005CD A3               [12] 1230 	inc	dptr
      0005CE E0               [ 8] 1231 	movx	a,@dptr
      0005CF FD               [ 4] 1232 	mov	r5,a
                                   1233 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      0005D0 18               [ 4] 1234 	dec	r0
      0005D1 D0 06            [ 8] 1235 	pop	ar6
      0005D3 02s00r04rBA      [16] 1236 	ljmp	00190$
      0005D7                       1237 00120$:
                                   1238 ;	printf_large.c:327: minWidth=fpBI; // we need at least these
                                   1239 ;	genAssign: resultIsFar = FALSE
      0005D7 8E 02            [ 8] 1240 	mov	ar2,r6
                                   1241 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      0005D9 90s00r00r10      [12] 1242 	mov	dptr,#_output_float_PARM_3
      0005DD E0               [ 8] 1243 	movx	a,@dptr
      0005DE 60 0E            [12] 1244 	jz  00198$
      0005E0                       1245 00451$:
      0005E0 90s00r00r10      [12] 1246 	mov	dptr,#_output_float_PARM_3
      0005E4 E0               [ 8] 1247 	movx	a,@dptr
      0005E5 24 01            [ 8] 1248 	add	a,#0x01
      0005E7 FB               [ 4] 1249 	mov  r3,a
      0005E8 33               [ 4] 1250 	rlc	a
      0005E9 95 E0            [ 8] 1251 	subb	a,acc
      0005EB FC               [ 4] 1252 	mov	r4,a
      0005EC 80 04            [12] 1253 	sjmp 00199$
      0005EE                       1254 00198$:
                                   1255 ;	genAssign: resultIsFar = FALSE
      0005EE 7B 00            [ 8] 1256 	mov	r3,#0x00
      0005F0 7C 00            [ 8] 1257 	mov	r4,#0x00
      0005F2                       1258 00199$:
      0005F2 EB               [ 4] 1259 	mov	a,r3
      0005F3 2A               [ 4] 1260 	add	a,r2
      0005F4 FA               [ 4] 1261 	mov	r2,a
                                   1262 ;	printf_large.c:329: if (negative || sign || space)
      0005F5 90s00r00r99      [12] 1263 	mov	dptr,#_output_float_negative_65536_76
      0005F9 E0               [ 8] 1264 	movx	a,@dptr
      0005FA 70 0E            [12] 1265 	jnz  00121$
      0005FC                       1266 00452$:
      0005FC 90s00r00r13      [12] 1267 	mov	dptr,#_output_float_PARM_6
      000600 E0               [ 8] 1268 	movx	a,@dptr
      000601 70 07            [12] 1269 	jnz  00121$
      000603                       1270 00453$:
      000603 90s00r00r14      [12] 1271 	mov	dptr,#_output_float_PARM_7
      000607 E0               [ 8] 1272 	movx	a,@dptr
      000608 60 01            [12] 1273 	jz  00122$
      00060A                       1274 00454$:
      00060A                       1275 00121$:
                                   1276 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      00060A 0A               [ 4] 1277 	inc	r2
      00060B                       1278 00122$:
                                   1279 ;	printf_large.c:332: if (!left && reqWidth>i)
      00060B 90s00r00r11      [12] 1280 	mov	dptr,#_output_float_PARM_4
      00060F E0               [ 8] 1281 	movx	a,@dptr
      000610 60 04            [12] 1282 	jz	00455$
      000612 02s00r07r10      [16] 1283 	ljmp	00159$
      000616                       1284 00455$:
      000616 90s00r00r0F      [12] 1285 	mov	dptr,#_output_float_PARM_2
      00061A C3               [ 4] 1286 	clr	c
      00061B E9               [ 4] 1287 	mov	a,r1
      00061C C5 F0            [ 8] 1288 	xch	a, b
      00061E E0               [ 8] 1289 	movx	a,@dptr
      00061F C5 F0            [ 8] 1290 	xch	a, b
      000621 95 F0            [ 8] 1291 	subb	a,b
      000623 40 04            [12] 1292 	jc	00456$
      000625 02s00r07r10      [16] 1293 	ljmp	00159$
      000629                       1294 00456$:
                                   1295 ;	printf_large.c:334: if (zero)
      000629 90s00r00r12      [12] 1296 	mov	dptr,#_output_float_PARM_5
      00062D E0               [ 8] 1297 	movx	a,@dptr
      00062E 60 6D            [12] 1298 	jz   00228$
      000630                       1299 00457$:
                                   1300 ;	printf_large.c:336: if (negative)
      000630 90s00r00r99      [12] 1301 	mov	dptr,#_output_float_negative_65536_76
      000634 E0               [ 8] 1302 	movx	a,@dptr
      000635 60 11            [12] 1303 	jz  00131$
      000637                       1304 00458$:
                                   1305 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      000637 C0 02            [ 8] 1306 	push	ar2
      000639 C0 06            [ 8] 1307 	push	ar6
      00063B 75 82 2D         [12] 1308 	mov	dpl,#0x2d
      00063E 12s00r00r00      [16] 1309 	lcall	__output_char
      000642 D0 06            [ 8] 1310 	pop	ar6
      000644 D0 02            [ 8] 1311 	pop	ar2
      000646 80 2E            [12] 1312 	sjmp 00226$
      000648                       1313 00131$:
                                   1314 ;	printf_large.c:340: else if (sign)
      000648 90s00r00r13      [12] 1315 	mov	dptr,#_output_float_PARM_6
      00064C E0               [ 8] 1316 	movx	a,@dptr
      00064D 60 11            [12] 1317 	jz  00128$
      00064F                       1318 00459$:
                                   1319 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      00064F C0 02            [ 8] 1320 	push	ar2
      000651 C0 06            [ 8] 1321 	push	ar6
      000653 75 82 2B         [12] 1322 	mov	dpl,#0x2b
      000656 12s00r00r00      [16] 1323 	lcall	__output_char
      00065A D0 06            [ 8] 1324 	pop	ar6
      00065C D0 02            [ 8] 1325 	pop	ar2
      00065E 80 16            [12] 1326 	sjmp 00226$
      000660                       1327 00128$:
                                   1328 ;	printf_large.c:344: else if (space)
      000660 90s00r00r14      [12] 1329 	mov	dptr,#_output_float_PARM_7
      000664 E0               [ 8] 1330 	movx	a,@dptr
      000665 60 0F            [12] 1331 	jz  00226$
      000667                       1332 00460$:
                                   1333 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      000667 C0 02            [ 8] 1334 	push	ar2
      000669 C0 06            [ 8] 1335 	push	ar6
      00066B 75 82 20         [12] 1336 	mov	dpl,#0x20
      00066E 12s00r00r00      [16] 1337 	lcall	__output_char
      000672 D0 06            [ 8] 1338 	pop	ar6
      000674 D0 02            [ 8] 1339 	pop	ar2
                                   1340 ;	printf_large.c:348: while (reqWidth-->minWidth)
      000676                       1341 00226$:
      000676 90s00r00r0F      [12] 1342 	mov	dptr,#_output_float_PARM_2
                                   1343 ;	genAssign: resultIsFar = FALSE
      00067A E0               [ 8] 1344 	movx	a,@dptr
      00067B FB               [ 4] 1345 	mov	r3,a
      00067C                       1346 00133$:
                                   1347 ;	genAssign: resultIsFar = FALSE
      00067C 8B 04            [ 8] 1348 	mov	ar4,r3
      00067E 1B               [ 4] 1349 	dec	r3
      00067F C3               [ 4] 1350 	clr	c
      000680 EA               [ 4] 1351 	mov	a,r2
      000681 9C               [ 4] 1352 	subb	a,r4
      000682 40 04            [12] 1353 	jc	00461$
      000684 02s00r07r58      [16] 1354 	ljmp	00250$
      000688                       1355 00461$:
                                   1356 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      000688 C0 02            [ 8] 1357 	push	ar2
      00068A C0 03            [ 8] 1358 	push	ar3
      00068C C0 06            [ 8] 1359 	push	ar6
      00068E 75 82 30         [12] 1360 	mov	dpl,#0x30
      000691 12s00r00r00      [16] 1361 	lcall	__output_char
      000695 D0 06            [ 8] 1362 	pop	ar6
      000697 D0 03            [ 8] 1363 	pop	ar3
      000699 D0 02            [ 8] 1364 	pop	ar2
                                   1365 ;	printf_large.c:355: while (reqWidth-->minWidth)
      00069B 80 DF            [12] 1366 	sjmp 00133$
      00069D                       1367 00228$:
      00069D 90s00r00r0F      [12] 1368 	mov	dptr,#_output_float_PARM_2
                                   1369 ;	genAssign: resultIsFar = FALSE
      0006A1 E0               [ 8] 1370 	movx	a,@dptr
      0006A2 FC               [ 4] 1371 	mov	r4,a
      0006A3                       1372 00136$:
                                   1373 ;	genAssign: resultIsFar = FALSE
      0006A3 8C 05            [ 8] 1374 	mov	ar5,r4
      0006A5 1C               [ 4] 1375 	dec	r4
      0006A6 C3               [ 4] 1376 	clr	c
      0006A7 EA               [ 4] 1377 	mov	a,r2
      0006A8 9D               [ 4] 1378 	subb	a,r5
      0006A9 50 15            [12] 1379 	jnc  00251$
      0006AB                       1380 00462$:
                                   1381 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0006AB C0 02            [ 8] 1382 	push	ar2
      0006AD C0 04            [ 8] 1383 	push	ar4
      0006AF C0 06            [ 8] 1384 	push	ar6
      0006B1 75 82 20         [12] 1385 	mov	dpl,#0x20
      0006B4 12s00r00r00      [16] 1386 	lcall	__output_char
      0006B8 D0 06            [ 8] 1387 	pop	ar6
      0006BA D0 04            [ 8] 1388 	pop	ar4
      0006BC D0 02            [ 8] 1389 	pop	ar2
      0006BE 80 E3            [12] 1390 	sjmp 00136$
      0006C0                       1391 00251$:
                                   1392 ;	genAssign: resultIsFar = TRUE
      0006C0 90s00r00r0F      [12] 1393 	mov	dptr,#_output_float_PARM_2
      0006C4 EC               [ 4] 1394 	mov	a,r4
      0006C5 F0               [ 8] 1395 	movx	@dptr,a
                                   1396 ;	printf_large.c:359: if (negative)
      0006C6 90s00r00r99      [12] 1397 	mov	dptr,#_output_float_negative_65536_76
      0006CA E0               [ 8] 1398 	movx	a,@dptr
      0006CB 60 13            [12] 1399 	jz  00145$
      0006CD                       1400 00463$:
                                   1401 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      0006CD C0 02            [ 8] 1402 	push	ar2
      0006CF C0 06            [ 8] 1403 	push	ar6
      0006D1 75 82 2D         [12] 1404 	mov	dpl,#0x2d
      0006D4 12s00r00r00      [16] 1405 	lcall	__output_char
      0006D8 D0 06            [ 8] 1406 	pop	ar6
      0006DA D0 02            [ 8] 1407 	pop	ar2
      0006DC 02s00r07r5E      [16] 1408 	ljmp	00160$
      0006E0                       1409 00145$:
                                   1410 ;	printf_large.c:363: else if (sign)
      0006E0 90s00r00r13      [12] 1411 	mov	dptr,#_output_float_PARM_6
      0006E4 E0               [ 8] 1412 	movx	a,@dptr
      0006E5 60 11            [12] 1413 	jz  00142$
      0006E7                       1414 00464$:
                                   1415 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      0006E7 C0 02            [ 8] 1416 	push	ar2
      0006E9 C0 06            [ 8] 1417 	push	ar6
      0006EB 75 82 2B         [12] 1418 	mov	dpl,#0x2b
      0006EE 12s00r00r00      [16] 1419 	lcall	__output_char
      0006F2 D0 06            [ 8] 1420 	pop	ar6
      0006F4 D0 02            [ 8] 1421 	pop	ar2
      0006F6 80 66            [12] 1422 	sjmp 00160$
      0006F8                       1423 00142$:
                                   1424 ;	printf_large.c:367: else if (space)
      0006F8 90s00r00r14      [12] 1425 	mov	dptr,#_output_float_PARM_7
      0006FC E0               [ 8] 1426 	movx	a,@dptr
      0006FD 60 5F            [12] 1427 	jz  00160$
      0006FF                       1428 00465$:
                                   1429 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      0006FF C0 02            [ 8] 1430 	push	ar2
      000701 C0 06            [ 8] 1431 	push	ar6
      000703 75 82 20         [12] 1432 	mov	dpl,#0x20
      000706 12s00r00r00      [16] 1433 	lcall	__output_char
      00070A D0 06            [ 8] 1434 	pop	ar6
      00070C D0 02            [ 8] 1435 	pop	ar2
      00070E 80 4E            [12] 1436 	sjmp 00160$
      000710                       1437 00159$:
                                   1438 ;	printf_large.c:375: if (negative)
      000710 90s00r00r99      [12] 1439 	mov	dptr,#_output_float_negative_65536_76
      000714 E0               [ 8] 1440 	movx	a,@dptr
      000715 60 11            [12] 1441 	jz  00156$
      000717                       1442 00466$:
                                   1443 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      000717 C0 02            [ 8] 1444 	push	ar2
      000719 C0 06            [ 8] 1445 	push	ar6
      00071B 75 82 2D         [12] 1446 	mov	dpl,#0x2d
      00071E 12s00r00r00      [16] 1447 	lcall	__output_char
      000722 D0 06            [ 8] 1448 	pop	ar6
      000724 D0 02            [ 8] 1449 	pop	ar2
      000726 80 36            [12] 1450 	sjmp 00160$
      000728                       1451 00156$:
                                   1452 ;	printf_large.c:379: else if (sign)
      000728 90s00r00r13      [12] 1453 	mov	dptr,#_output_float_PARM_6
      00072C E0               [ 8] 1454 	movx	a,@dptr
      00072D 60 11            [12] 1455 	jz  00153$
      00072F                       1456 00467$:
                                   1457 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      00072F C0 02            [ 8] 1458 	push	ar2
      000731 C0 06            [ 8] 1459 	push	ar6
      000733 75 82 2B         [12] 1460 	mov	dpl,#0x2b
      000736 12s00r00r00      [16] 1461 	lcall	__output_char
      00073A D0 06            [ 8] 1462 	pop	ar6
      00073C D0 02            [ 8] 1463 	pop	ar2
      00073E 80 1E            [12] 1464 	sjmp 00160$
      000740                       1465 00153$:
                                   1466 ;	printf_large.c:383: else if (space)
      000740 90s00r00r14      [12] 1467 	mov	dptr,#_output_float_PARM_7
      000744 E0               [ 8] 1468 	movx	a,@dptr
      000745 60 17            [12] 1469 	jz  00160$
      000747                       1470 00468$:
                                   1471 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000747 C0 02            [ 8] 1472 	push	ar2
      000749 C0 06            [ 8] 1473 	push	ar6
      00074B 75 82 20         [12] 1474 	mov	dpl,#0x20
      00074E 12s00r00r00      [16] 1475 	lcall	__output_char
      000752 D0 06            [ 8] 1476 	pop	ar6
      000754 D0 02            [ 8] 1477 	pop	ar2
                                   1478 ;	printf_large.c:428: return;
                                   1479 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000756 80 06            [12] 1480 	sjmp 00160$
      000758                       1481 00250$:
                                   1482 ;	genAssign: resultIsFar = TRUE
      000758 90s00r00r0F      [12] 1483 	mov	dptr,#_output_float_PARM_2
      00075C EB               [ 4] 1484 	mov	a,r3
      00075D F0               [ 8] 1485 	movx	@dptr,a
      00075E                       1486 00160$:
                                   1487 ;	printf_large.c:390: i=fpBI-1;
      00075E 8E 03            [ 8] 1488 	mov	ar3,r6
      000760 1B               [ 4] 1489 	dec	r3
                                   1490 ;	printf_large.c:391: do {
      000761                       1491 00162$:
                                   1492 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      000761 EB               [ 4] 1493 	mov	a,r3
      000762 24r19            [ 8] 1494 	add	a,#_output_float_fpBuffer_65536_76
      000764 F5 84            [ 8] 1495 	mov	dpl1,a
      000766 E4               [ 4] 1496 	clr	a
      000767 34s00            [ 8] 1497 	addc	a,#(_output_float_fpBuffer_65536_76 >> 8)
      000769 F5 85            [ 8] 1498 	mov	dph1,a
      00076B E4               [ 4] 1499 	clr	a
      00076C 34s00            [ 8] 1500 	addc	a,#(_output_float_fpBuffer_65536_76 >> 16)
      00076E F5 95            [ 8] 1501 	mov	dpx1,a
      000770 05 86            [ 8] 1502 	inc	dps
      000772 E0               [ 8] 1503 	movx	a,@dptr
      000773 FC               [ 4] 1504 	mov	r4,a
      000774 75 86 00         [12] 1505 	mov	dps,#0
      000777 C0 02            [ 8] 1506 	push	ar2
      000779 C0 03            [ 8] 1507 	push	ar3
      00077B C0 06            [ 8] 1508 	push	ar6
      00077D 8C 82            [ 8] 1509 	mov	dpl,r4
      00077F 12s00r00r00      [16] 1510 	lcall	__output_char
      000783 D0 06            [ 8] 1511 	pop	ar6
      000785 D0 03            [ 8] 1512 	pop	ar3
      000787 D0 02            [ 8] 1513 	pop	ar2
                                   1514 ;	printf_large.c:393: } while (i--);
                                   1515 ;	genAssign: resultIsFar = FALSE
      000789 8B 04            [ 8] 1516 	mov	ar4,r3
      00078B 1B               [ 4] 1517 	dec	r3
      00078C EC               [ 4] 1518 	mov	a,r4
      00078D 70 D2            [12] 1519 	jnz  00162$
      00078F                       1520 00469$:
                                   1521 ;	printf_large.c:396: if (reqDecimals)
      00078F 90s00r00r10      [12] 1522 	mov	dptr,#_output_float_PARM_3
      000793 E0               [ 8] 1523 	movx	a,@dptr
      000794 60 48            [12] 1524 	jz  00169$
      000796                       1525 00470$:
                                   1526 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      000796 C0 02            [ 8] 1527 	push	ar2
      000798 C0 06            [ 8] 1528 	push	ar6
      00079A 75 82 2E         [12] 1529 	mov	dpl,#0x2e
      00079D 12s00r00r00      [16] 1530 	lcall	__output_char
      0007A1 D0 06            [ 8] 1531 	pop	ar6
      0007A3 D0 02            [ 8] 1532 	pop	ar2
                                   1533 ;	printf_large.c:400: while (reqDecimals--)
                                   1534 ;	genAssign: resultIsFar = FALSE
      0007A5 8E 03            [ 8] 1535 	mov	ar3,r6
      0007A7 90s00r00r10      [12] 1536 	mov	dptr,#_output_float_PARM_3
                                   1537 ;	genAssign: resultIsFar = FALSE
      0007AB E0               [ 8] 1538 	movx	a,@dptr
      0007AC FC               [ 4] 1539 	mov	r4,a
      0007AD                       1540 00165$:
                                   1541 ;	genAssign: resultIsFar = FALSE
      0007AD 8C 05            [ 8] 1542 	mov	ar5,r4
      0007AF 1C               [ 4] 1543 	dec	r4
      0007B0 ED               [ 4] 1544 	mov	a,r5
      0007B1 60 2B            [12] 1545 	jz  00169$
      0007B3                       1546 00471$:
                                   1547 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      0007B3 EB               [ 4] 1548 	mov	a,r3
      0007B4 24r19            [ 8] 1549 	add	a,#_output_float_fpBuffer_65536_76
      0007B6 F5 84            [ 8] 1550 	mov	dpl1,a
      0007B8 E4               [ 4] 1551 	clr	a
      0007B9 34s00            [ 8] 1552 	addc	a,#(_output_float_fpBuffer_65536_76 >> 8)
      0007BB F5 85            [ 8] 1553 	mov	dph1,a
      0007BD E4               [ 4] 1554 	clr	a
      0007BE 34s00            [ 8] 1555 	addc	a,#(_output_float_fpBuffer_65536_76 >> 16)
      0007C0 F5 95            [ 8] 1556 	mov	dpx1,a
      0007C2 0B               [ 4] 1557 	inc	r3
      0007C3 05 86            [ 8] 1558 	inc	dps
      0007C5 E0               [ 8] 1559 	movx	a,@dptr
      0007C6 FD               [ 4] 1560 	mov	r5,a
      0007C7 75 86 00         [12] 1561 	mov	dps,#0
      0007CA C0 02            [ 8] 1562 	push	ar2
      0007CC C0 03            [ 8] 1563 	push	ar3
      0007CE C0 04            [ 8] 1564 	push	ar4
      0007D0 8D 82            [ 8] 1565 	mov	dpl,r5
      0007D2 12s00r00r00      [16] 1566 	lcall	__output_char
      0007D6 D0 04            [ 8] 1567 	pop	ar4
      0007D8 D0 03            [ 8] 1568 	pop	ar3
      0007DA D0 02            [ 8] 1569 	pop	ar2
      0007DC 80 CF            [12] 1570 	sjmp 00165$
      0007DE                       1571 00169$:
                                   1572 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      0007DE 90s00r00r11      [12] 1573 	mov	dptr,#_output_float_PARM_4
      0007E2 E0               [ 8] 1574 	movx	a,@dptr
      0007E3 60 2C            [12] 1575 	jz  00174$
      0007E5                       1576 00472$:
      0007E5 90s00r00r0F      [12] 1577 	mov	dptr,#_output_float_PARM_2
      0007E9 C3               [ 4] 1578 	clr	c
      0007EA EA               [ 4] 1579 	mov	a,r2
      0007EB C5 F0            [ 8] 1580 	xch	a, b
      0007ED E0               [ 8] 1581 	movx	a,@dptr
      0007EE C5 F0            [ 8] 1582 	xch	a, b
      0007F0 95 F0            [ 8] 1583 	subb	a,b
      0007F2 50 1D            [12] 1584 	jnc  00174$
      0007F4                       1585 00473$:
                                   1586 ;	printf_large.c:408: while (reqWidth-->minWidth)
      0007F4 90s00r00r0F      [12] 1587 	mov	dptr,#_output_float_PARM_2
                                   1588 ;	genAssign: resultIsFar = FALSE
      0007F8 E0               [ 8] 1589 	movx	a,@dptr
      0007F9 FB               [ 4] 1590 	mov	r3,a
      0007FA                       1591 00170$:
      0007FA C3               [ 4] 1592 	clr	c
      0007FB EA               [ 4] 1593 	mov	a,r2
      0007FC 9B               [ 4] 1594 	subb	a,r3
      0007FD 50 12            [12] 1595 	jnc  00174$
      0007FF                       1596 00474$:
      0007FF 1B               [ 4] 1597 	dec	r3
                                   1598 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000800 C0 02            [ 8] 1599 	push	ar2
      000802 C0 03            [ 8] 1600 	push	ar3
      000804 75 82 20         [12] 1601 	mov	dpl,#0x20
      000807 12s00r00r00      [16] 1602 	lcall	__output_char
      00080B D0 03            [ 8] 1603 	pop	ar3
      00080D D0 02            [ 8] 1604 	pop	ar2
      00080F 80 E9            [12] 1605 	sjmp 00170$
      000811                       1606 00174$:
                                   1607 ;	printf_large.c:414: if (exp != -128)
      000811 90s00r00r9E      [12] 1608 	mov	dptr,#_output_float_exp_65536_76
      000815 E0               [ 8] 1609 	movx	a,@dptr
      000816 B4 80 04         [16] 1610 	cjne	a,#0x80,00475$
      000819 02s00r08rA6      [16] 1611 	ljmp	00179$
      00081D                       1612 00475$:
                                   1613 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      00081D 75 82 65         [12] 1614 	mov	dpl,#0x65
      000820 12s00r00r00      [16] 1615 	lcall	__output_char
                                   1616 ;	printf_large.c:417: if (exp<0)
      000824 90s00r00r9E      [12] 1617 	mov	dptr,#_output_float_exp_65536_76
      000828 E0               [ 8] 1618 	movx	a,@dptr
      000829 30 E7 1F         [12] 1619 	jnb  acc[7],00177$
      00082C                       1620 00476$:
                                   1621 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      00082C 75 82 2D         [12] 1622 	mov	dpl,#0x2d
      00082F 12s00r00r00      [16] 1623 	lcall	__output_char
                                   1624 ;	printf_large.c:420: exp = -exp;
      000833 90s00r00r9E      [12] 1625 	mov	dptr,#_output_float_exp_65536_76
      000837 75 86 01         [12] 1626 	mov	dps, #1
      00083A 90s00r00r9E      [12] 1627 	mov	dptr, #_output_float_exp_65536_76
      00083E 15 86            [ 8] 1628 	dec	dps
      000840 E0               [ 8] 1629 	movx	a,@dptr
      000841 D3               [ 4] 1630 	setb	c
      000842 F4               [ 4] 1631 	cpl	a
      000843 34 00            [ 8] 1632 	addc	a,#0x00
      000845 05 86            [ 8] 1633 	inc	dps
      000847 F0               [ 8] 1634 	movx	@dptr,a
      000848 75 86 00         [12] 1635 	mov	dps,#0
      00084B                       1636 00177$:
                                   1637 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      00084B 90s00r00r9E      [12] 1638 	mov	dptr,#_output_float_exp_65536_76
      00084F E0               [ 8] 1639 	movx	a,@dptr
      000850 FA               [ 4] 1640 	mov	r2,a
      000851 E0               [ 8] 1641 	movx	a,@dptr
      000852 33               [ 4] 1642 	rlc	a
      000853 95 E0            [ 8] 1643 	subb	a,acc
      000855 FB               [ 4] 1644 	mov	r3,a
                                   1645 ;	genAssign: resultIsFar = TRUE
      000856 90s00r00r00      [12] 1646 	mov	dptr,#__divsint_PARM_2
      00085A 74 0A            [ 8] 1647 	mov	a,#0x0a
      00085C F0               [ 8] 1648 	movx	@dptr,a
      00085D E4               [ 4] 1649 	clr	a
      00085E A3               [12] 1650 	inc	dptr
      00085F F0               [ 8] 1651 	movx	@dptr,a
      000860 C0 02            [ 8] 1652 	push	ar2
      000862 C0 03            [ 8] 1653 	push	ar3
      000864 8A 82            [ 8] 1654 	mov	dpl,r2
      000866 8B 83            [ 8] 1655 	mov	dph,r3
      000868 12s00r00r00      [16] 1656 	lcall	__divsint
      00086C AC 82            [ 8] 1657 	mov	r4,dpl
      00086E AD 83            [ 8] 1658 	mov	r5,dph
      000870 D0 03            [ 8] 1659 	pop	ar3
      000872 D0 02            [ 8] 1660 	pop	ar2
      000874 74 30            [ 8] 1661 	mov	a,#0x30
      000876 2C               [ 4] 1662 	add	a,r4
      000877 FC               [ 4] 1663 	mov	r4,a
      000878 C0 02            [ 8] 1664 	push	ar2
      00087A C0 03            [ 8] 1665 	push	ar3
      00087C 8C 82            [ 8] 1666 	mov	dpl,r4
      00087E 12s00r00r00      [16] 1667 	lcall	__output_char
      000882 D0 03            [ 8] 1668 	pop	ar3
      000884 D0 02            [ 8] 1669 	pop	ar2
                                   1670 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
                                   1671 ;	genAssign: resultIsFar = TRUE
      000886 90s00r00r00      [12] 1672 	mov	dptr,#__modsint_PARM_2
      00088A 74 0A            [ 8] 1673 	mov	a,#0x0a
      00088C F0               [ 8] 1674 	movx	@dptr,a
      00088D E4               [ 4] 1675 	clr	a
      00088E A3               [12] 1676 	inc	dptr
      00088F F0               [ 8] 1677 	movx	@dptr,a
      000890 8A 82            [ 8] 1678 	mov	dpl,r2
      000892 8B 83            [ 8] 1679 	mov	dph,r3
      000894 12s00r00r00      [16] 1680 	lcall	__modsint
      000898 AA 82            [ 8] 1681 	mov	r2,dpl
      00089A AB 83            [ 8] 1682 	mov	r3,dph
      00089C 74 30            [ 8] 1683 	mov	a,#0x30
      00089E 2A               [ 4] 1684 	add	a,r2
      00089F FA               [ 4] 1685 	mov	r2,a
      0008A0 8A 82            [ 8] 1686 	mov	dpl,r2
      0008A2 12s00r00r00      [16] 1687 	lcall	__output_char
      0008A6                       1688 00179$:
                                   1689 ;	printf_large.c:428: return;
      0008A6                       1690 00192$:
                                   1691 ;	printf_large.c:430: }
      0008A6 22               [16] 1692 	ret
                                   1693 ;------------------------------------------------------------
                                   1694 ;Allocation info for local variables in function '_print_format'
                                   1695 ;------------------------------------------------------------
                                   1696 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                   1697 ;format                    Allocated with name '__print_format_PARM_3'
                                   1698 ;ap                        Allocated with name '__print_format_PARM_4'
                                   1699 ;pfn                       Allocated to registers 
                                   1700 ;left_justify              Allocated with name '__print_format_left_justify_65536_113'
                                   1701 ;zero_padding              Allocated with name '__print_format_zero_padding_65536_113'
                                   1702 ;prefix_sign               Allocated with name '__print_format_prefix_sign_65536_113'
                                   1703 ;prefix_space              Allocated with name '__print_format_prefix_space_65536_113'
                                   1704 ;signed_argument           Allocated with name '__print_format_signed_argument_65536_113'
                                   1705 ;char_argument             Allocated with name '__print_format_char_argument_65536_113'
                                   1706 ;long_argument             Allocated with name '__print_format_long_argument_65536_113'
                                   1707 ;float_argument            Allocated with name '__print_format_float_argument_65536_113'
                                   1708 ;lsd                       Allocated to registers r2 
                                   1709 ;radix                     Allocated with name '__print_format_radix_65536_113'
                                   1710 ;width                     Allocated to registers 
                                   1711 ;decimals                  Allocated with name '__print_format_decimals_65536_113'
                                   1712 ;length                    Allocated to registers r6 r7 
                                   1713 ;c                         Allocated to registers r2 
                                   1714 ;memtype                   Allocated to registers r6 
                                   1715 ;store                     Allocated with name '__print_format_store_262144_135'
                                   1716 ;pstore                    Allocated with name '__print_format_pstore_262144_135'
                                   1717 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                   1718 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                   1719 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                   1720 ;------------------------------------------------------------
                                   1721 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   1722 ;	-----------------------------------------
                                   1723 ;	 function _print_format
                                   1724 ;	-----------------------------------------
      0008A7                       1725 __print_format:
      0008A7 75 86 01         [12] 1726 	mov     dps, #1
      0008AA 90s00r00r01      [12] 1727 	mov     dptr, #_output_char
      0008AE E5 82            [ 8] 1728 	mov	a,dpl
      0008B0 F0               [ 8] 1729 	movx	@dptr,a
      0008B1 A3               [12] 1730 	inc	dptr
      0008B2 E5 83            [ 8] 1731 	mov	a,dph
      0008B4 F0               [ 8] 1732 	movx	@dptr,a
      0008B5 A3               [12] 1733 	inc	dptr
      0008B6 E5 93            [ 8] 1734 	mov	a,dpx
      0008B8 F0               [ 8] 1735 	movx	@dptr,a
      0008B9 75 86 00         [12] 1736 	mov	dps,#0
                                   1737 ;	printf_large.c:462: p = pvoid;
      0008BC 90s00r00rAC      [12] 1738 	mov	dptr,#__print_format_PARM_2
                                   1739 ;	genAssign: resultIsFar = FALSE
      0008C0 E0               [ 8] 1740 	movx	a,@dptr
      0008C1 FA               [ 4] 1741 	mov	r2,a
      0008C2 A3               [12] 1742 	inc	dptr
      0008C3 E0               [ 8] 1743 	movx	a,@dptr
      0008C4 FB               [ 4] 1744 	mov	r3,a
      0008C5 A3               [12] 1745 	inc	dptr
      0008C6 E0               [ 8] 1746 	movx	a,@dptr
      0008C7 FC               [ 4] 1747 	mov	r4,a
      0008C8 A3               [12] 1748 	inc	dptr
      0008C9 E0               [ 8] 1749 	movx	a,@dptr
      0008CA FD               [ 4] 1750 	mov	r5,a
                                   1751 ;	genAssign: resultIsFar = TRUE
      0008CB 90s00r00r04      [12] 1752 	mov	dptr,#_p
      0008CF EA               [ 4] 1753 	mov	a,r2
      0008D0 F0               [ 8] 1754 	movx	@dptr,a
      0008D1 A3               [12] 1755 	inc	dptr
      0008D2 EB               [ 4] 1756 	mov	a,r3
      0008D3 F0               [ 8] 1757 	movx	@dptr,a
      0008D4 A3               [12] 1758 	inc	dptr
      0008D5 EC               [ 4] 1759 	mov	a,r4
      0008D6 F0               [ 8] 1760 	movx	@dptr,a
      0008D7 A3               [12] 1761 	inc	dptr
      0008D8 ED               [ 4] 1762 	mov	a,r5
      0008D9 F0               [ 8] 1763 	movx	@dptr,a
                                   1764 ;	printf_large.c:466: charsOutputted = 0;
                                   1765 ;	genAssign: resultIsFar = TRUE
      0008DA 90s00r00r0D      [12] 1766 	mov	dptr,#_charsOutputted
      0008DE E4               [ 4] 1767 	clr	a
      0008DF F0               [ 8] 1768 	movx	@dptr,a
      0008E0 A3               [12] 1769 	inc	dptr
      0008E1 F0               [ 8] 1770 	movx	@dptr,a
                                   1771 ;	printf_large.c:469: if (format==0)
      0008E2 90s00r00rB0      [12] 1772 	mov	dptr,#__print_format_PARM_3
      0008E6 E0               [ 8] 1773 	movx	a,@dptr
      0008E7 F5 F0            [ 8] 1774 	mov	b,a
      0008E9 A3               [12] 1775 	inc	dptr
      0008EA E0               [ 8] 1776 	movx	a,@dptr
      0008EB 42 F0            [ 8] 1777 	orl	b,a
      0008ED A3               [12] 1778 	inc	dptr
      0008EE E0               [ 8] 1779 	movx	a,@dptr
      0008EF 45 F0            [ 8] 1780 	orl	a,b
      0008F1 70 13            [12] 1781 	jnz  00253$
      0008F3                       1782 00653$:
                                   1783 ;	printf_large.c:471: format=NULL_STRING;
      0008F3 90s00r00rB0      [12] 1784 	mov	dptr,#__print_format_PARM_3
      0008F7 74r00            [ 8] 1785 	mov	a,#___str_0
      0008F9 F0               [ 8] 1786 	movx	@dptr,a
      0008FA A3               [12] 1787 	inc	dptr
      0008FB 74s00            [ 8] 1788 	mov	a,#(___str_0 >> 8)
      0008FD F0               [ 8] 1789 	movx	@dptr,a
      0008FE A3               [12] 1790 	inc	dptr
      0008FF 74s00            [ 8] 1791 	mov	a,#(___str_0 >> 16)
      000901 F0               [ 8] 1792 	movx	@dptr,a
      000902 A3               [12] 1793 	inc	dptr
      000903 74 80            [ 8] 1794 	mov	a,#0x80
      000905 F0               [ 8] 1795 	movx	@dptr,a
                                   1796 ;	printf_large.c:475: while( c=*format++ )
      000906                       1797 00253$:
      000906                       1798 00242$:
      000906 90s00r00rB0      [12] 1799 	mov	dptr,#__print_format_PARM_3
                                   1800 ;	genAssign: resultIsFar = FALSE
      00090A E0               [ 8] 1801 	movx	a,@dptr
      00090B FA               [ 4] 1802 	mov	r2,a
      00090C A3               [12] 1803 	inc	dptr
      00090D E0               [ 8] 1804 	movx	a,@dptr
      00090E FB               [ 4] 1805 	mov	r3,a
      00090F A3               [12] 1806 	inc	dptr
      000910 E0               [ 8] 1807 	movx	a,@dptr
      000911 FC               [ 4] 1808 	mov	r4,a
      000912 A3               [12] 1809 	inc	dptr
      000913 E0               [ 8] 1810 	movx	a,@dptr
      000914 FD               [ 4] 1811 	mov	r5,a
      000915 8A 82            [ 8] 1812 	mov	dpl,r2
      000917 8B 83            [ 8] 1813 	mov	dph,r3
      000919 8C 93            [ 8] 1814 	mov	dpx,r4
      00091B 8D F0            [ 8] 1815 	mov	b,r5
      00091D 12s00r00r00      [16] 1816 	lcall	__gptrget
      000921 FE               [ 4] 1817 	mov	r6,a
      000922 90s00r00rB0      [12] 1818 	mov	dptr,#__print_format_PARM_3
      000926 74 01            [ 8] 1819 	mov	a,#0x01
      000928 2A               [ 4] 1820 	add	a,r2
      000929 F0               [ 8] 1821 	movx	@dptr,a
      00092A E4               [ 4] 1822 	clr	a
      00092B 3B               [ 4] 1823 	addc	a,r3
      00092C A3               [12] 1824 	inc	dptr
      00092D F0               [ 8] 1825 	movx	@dptr,a
      00092E E4               [ 4] 1826 	clr	a
      00092F 3C               [ 4] 1827 	addc	a,r4
      000930 A3               [12] 1828 	inc	dptr
      000931 F0               [ 8] 1829 	movx	@dptr,a
      000932 A3               [12] 1830 	inc	dptr
      000933 ED               [ 4] 1831 	mov	a,r5
      000934 F0               [ 8] 1832 	movx	@dptr,a
                                   1833 ;	genAssign: resultIsFar = FALSE
      000935 8E 02            [ 8] 1834 	mov	ar2,r6
      000937 EE               [ 4] 1835 	mov	a,r6
      000938 70 04            [12] 1836 	jnz	00654$
      00093A 02s00r14rE8      [16] 1837 	ljmp	00244$
      00093E                       1838 00654$:
                                   1839 ;	printf_large.c:477: if ( c=='%' )
      00093E BA 25 02         [16] 1840 	cjne	r2,#0x25,00655$
      000941 80 04            [12] 1841 	sjmp	00656$
      000943                       1842 00655$:
      000943 02s00r14rDE      [16] 1843 	ljmp	00240$
      000947                       1844 00656$:
                                   1845 ;	printf_large.c:479: left_justify    = 0;
                                   1846 ;	genAssign: resultIsFar = TRUE
      000947 90s00r00rB8      [12] 1847 	mov	dptr,#__print_format_left_justify_65536_113
                                   1848 ;	printf_large.c:480: zero_padding    = 0;
                                   1849 ;	genAssign: resultIsFar = TRUE
                                   1850 ;	printf_large.c:481: prefix_sign     = 0;
                                   1851 ;	genAssign: resultIsFar = TRUE
                                   1852 ;	printf_large.c:482: prefix_space    = 0;
                                   1853 ;	genAssign: resultIsFar = TRUE
      00094B E4               [ 4] 1854 	clr   a
      00094C F0               [ 8] 1855 	movx  @dptr,a
      00094D 90s00r00rB9      [12] 1856 	mov   dptr,#__print_format_zero_padding_65536_113
      000951 F0               [ 8] 1857 	movx  @dptr,a
      000952 90s00r00rBA      [12] 1858 	mov   dptr,#__print_format_prefix_sign_65536_113
      000956 F0               [ 8] 1859 	movx  @dptr,a
      000957 90s00r00rBB      [12] 1860 	mov   dptr,#__print_format_prefix_space_65536_113
      00095B F0               [ 8] 1861 	movx  @dptr,a
                                   1862 ;	printf_large.c:483: signed_argument = 0;
                                   1863 ;	genAssign: resultIsFar = TRUE
      00095C 90s00r00rBC      [12] 1864 	mov	dptr,#__print_format_signed_argument_65536_113
                                   1865 ;	printf_large.c:484: char_argument   = 0;
                                   1866 ;	genAssign: resultIsFar = TRUE
                                   1867 ;	printf_large.c:485: long_argument   = 0;
                                   1868 ;	genAssign: resultIsFar = TRUE
                                   1869 ;	printf_large.c:486: float_argument  = 0;
                                   1870 ;	genAssign: resultIsFar = TRUE
      000960 E4               [ 4] 1871 	clr   a
      000961 F0               [ 8] 1872 	movx  @dptr,a
      000962 90s00r00rBD      [12] 1873 	mov   dptr,#__print_format_char_argument_65536_113
      000966 F0               [ 8] 1874 	movx  @dptr,a
      000967 90s00r00rBE      [12] 1875 	mov   dptr,#__print_format_long_argument_65536_113
      00096B F0               [ 8] 1876 	movx  @dptr,a
      00096C 90s00r00rBF      [12] 1877 	mov   dptr,#__print_format_float_argument_65536_113
      000970 F0               [ 8] 1878 	movx  @dptr,a
                                   1879 ;	printf_large.c:487: radix           = 0;
                                   1880 ;	genAssign: resultIsFar = TRUE
      000971 90s00r00rC0      [12] 1881 	mov	dptr,#__print_format_radix_65536_113
                                   1882 ;	printf_large.c:488: width           = 0;
                                   1883 ;	genAssign: resultIsFar = TRUE
      000975 E4               [ 4] 1884 	clr   a
      000976 F0               [ 8] 1885 	movx  @dptr,a
      000977 90s00r00rD1      [12] 1886 	mov   dptr,#__print_format_sloc2_1_0
      00097B F0               [ 8] 1887 	movx  @dptr,a
      00097C A3               [12] 1888 	inc	dptr
      00097D F0               [ 8] 1889 	movx	@dptr,a
                                   1890 ;	printf_large.c:489: decimals        = -1;
                                   1891 ;	genAssign: resultIsFar = TRUE
      00097E 90s00r00rC1      [12] 1892 	mov	dptr,#__print_format_decimals_65536_113
      000982 74 FF            [ 8] 1893 	mov  a,#0xff
      000984 F0               [ 8] 1894 	movx @dptr,a
      000985 A3               [12] 1895 	inc  dptr
      000986 F0               [ 8] 1896 	movx @dptr,a
                                   1897 ;	printf_large.c:491: get_conversion_spec:
      000987 90s00r00rB0      [12] 1898 	mov	dptr,#__print_format_PARM_3
                                   1899 ;	genAssign: resultIsFar = FALSE
      00098B E0               [ 8] 1900 	movx	a,@dptr
      00098C FA               [ 4] 1901 	mov	r2,a
      00098D A3               [12] 1902 	inc	dptr
      00098E E0               [ 8] 1903 	movx	a,@dptr
      00098F FE               [ 4] 1904 	mov	r6,a
      000990 A3               [12] 1905 	inc	dptr
      000991 E0               [ 8] 1906 	movx	a,@dptr
      000992 F8               [ 4] 1907 	mov	r0,a
      000993 A3               [12] 1908 	inc	dptr
      000994 E0               [ 8] 1909 	movx	a,@dptr
      000995 F9               [ 4] 1910 	mov	r1,a
      000996                       1911 00103$:
                                   1912 ;	printf_large.c:493: c = *format++;
      000996 8A 82            [ 8] 1913 	mov	dpl,r2
      000998 8E 83            [ 8] 1914 	mov	dph,r6
      00099A 88 93            [ 8] 1915 	mov	dpx,r0
      00099C 89 F0            [ 8] 1916 	mov	b,r1
      00099E 75 86 01         [12] 1917 	mov	dps, #1
      0009A1 90s00r00rD0      [12] 1918 	mov	dptr, #__print_format_sloc1_1_0
      0009A5 15 86            [ 8] 1919 	dec	dps
      0009A7 12s00r00r00      [16] 1920 	lcall	__gptrget
      0009AB 75 86 01         [12] 1921 	mov	dps,#1
      0009AE F0               [ 8] 1922 	movx	@dptr,a
      0009AF 75 86 00         [12] 1923 	mov	dps,#0
      0009B2 A3               [12] 1924 	inc	dptr
      0009B3 AA 82            [ 8] 1925 	mov	r2,dpl
      0009B5 AE 83            [ 8] 1926 	mov	r6,dph
      0009B7 A8 93            [ 8] 1927 	mov	r0,dpx
      0009B9 A9 F0            [ 8] 1928 	mov	r1,b
                                   1929 ;	genAssign: resultIsFar = TRUE
      0009BB 90s00r00rB0      [12] 1930 	mov	dptr,#__print_format_PARM_3
      0009BF EA               [ 4] 1931 	mov	a,r2
      0009C0 F0               [ 8] 1932 	movx	@dptr,a
      0009C1 A3               [12] 1933 	inc	dptr
      0009C2 EE               [ 4] 1934 	mov	a,r6
      0009C3 F0               [ 8] 1935 	movx	@dptr,a
      0009C4 A3               [12] 1936 	inc	dptr
      0009C5 E8               [ 4] 1937 	mov	a,r0
      0009C6 F0               [ 8] 1938 	movx	@dptr,a
      0009C7 A3               [12] 1939 	inc	dptr
      0009C8 E9               [ 4] 1940 	mov	a,r1
      0009C9 F0               [ 8] 1941 	movx	@dptr,a
                                   1942 ;	printf_large.c:495: if (c=='%')
      0009CA 90s00r00rD0      [12] 1943 	mov	dptr,#__print_format_sloc1_1_0
      0009CE E0               [ 8] 1944 	movx	a,@dptr
      0009CF B4 25 0F         [16] 1945 	cjne a,#0x25,00105$
      0009D2                       1946 00658$:
                                   1947 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      0009D2 90s00r00rD0      [12] 1948 	mov	dptr,#__print_format_sloc1_1_0
      0009D6 E0               [ 8] 1949 	movx	a,@dptr
      0009D7 F5 82            [ 8] 1950 	mov	dpl,a
      0009D9 12s00r00r00      [16] 1951 	lcall	__output_char
                                   1952 ;	printf_large.c:498: continue;
      0009DD 02s00r09r06      [16] 1953 	ljmp	00242$
      0009E1                       1954 00105$:
                                   1955 ;	printf_large.c:501: if (isdigit(c))
      0009E1 90s00r00rD0      [12] 1956 	mov	dptr,#__print_format_sloc1_1_0
      0009E5 E0               [ 8] 1957 	movx	a,@dptr
      0009E6 B4 30 00         [16] 1958 	cjne	a,#0x30,00659$
      0009E9                       1959 00659$:
      0009E9 50 04            [12] 1960 	jnc	00660$
      0009EB 02s00r0ArCE      [16] 1961 	ljmp	00112$
      0009EF                       1962 00660$:
      0009EF 90s00r00rD0      [12] 1963 	mov	dptr,#__print_format_sloc1_1_0
      0009F3 C3               [ 4] 1964 	clr	c
      0009F4 74 39            [ 8] 1965 	mov	a,#0x39
      0009F6 C5 F0            [ 8] 1966 	xch	a, b
      0009F8 E0               [ 8] 1967 	movx	a,@dptr
      0009F9 C5 F0            [ 8] 1968 	xch	a, b
      0009FB 95 F0            [ 8] 1969 	subb	a,b
      0009FD 50 04            [12] 1970 	jnc	00661$
      0009FF 02s00r0ArCE      [16] 1971 	ljmp	00112$
      000A03                       1972 00661$:
                                   1973 ;	printf_large.c:503: if (decimals==-1)
      000A03 90s00r00rC1      [12] 1974 	mov	dptr,#__print_format_decimals_65536_113
      000A07 E0               [ 8] 1975 	movx	a,@dptr
      000A08 B4 FF 07         [16] 1976 	cjne	a,#0xff,00662$
      000A0B A3               [12] 1977 	inc	dptr
      000A0C E0               [ 8] 1978 	movx	a,@dptr
      000A0D B4 FF 02         [16] 1979 	cjne	a,#0xff,00662$
      000A10 80 02            [12] 1980 	sjmp	00663$
      000A12                       1981 00662$:
      000A12 80 67            [12] 1982 	sjmp 00109$
      000A14                       1983 00663$:
                                   1984 ;	printf_large.c:505: width = 10*width + c - '0';
      000A14 90s00r00rD1      [12] 1985 	mov	dptr,#__print_format_sloc2_1_0
                                   1986 ;	genAssign: resultIsFar = TRUE
      000A18 75 86 21         [12] 1987 	mov	dps,#0x21
      000A1B 90s00r00r00      [12] 1988 	mov	dptr,#__mulint_PARM_2
      000A1F E0               [ 8] 1989 	movx	a,@dptr
      000A20 F0               [ 8] 1990 	movx	@dptr,a
      000A21 A3               [12] 1991 	inc	dptr
      000A22 A3               [12] 1992 	inc	dptr
      000A23 E0               [ 8] 1993 	movx	a,@dptr
      000A24 F0               [ 8] 1994 	movx	@dptr,a
      000A25 75 86 00         [12] 1995 	mov	dps,#0
      000A28 C0 02            [ 8] 1996 	push	ar2
      000A2A C0 06            [ 8] 1997 	push	ar6
      000A2C C0 00            [ 8] 1998 	push	ar0
      000A2E C0 01            [ 8] 1999 	push	ar1
      000A30 90 00 00 0A      [12] 2000 	mov  dptr,#0x000a
      000A34 12s00r00r00      [16] 2001 	lcall	__mulint
      000A38 AB 82            [ 8] 2002 	mov	r3,dpl
      000A3A AC 83            [ 8] 2003 	mov	r4,dph
      000A3C D0 01            [ 8] 2004 	pop	ar1
      000A3E D0 00            [ 8] 2005 	pop	ar0
      000A40 D0 06            [ 8] 2006 	pop	ar6
      000A42 D0 02            [ 8] 2007 	pop	ar2
      000A44 90s00r00rD0      [12] 2008 	mov	dptr,#__print_format_sloc1_1_0
      000A48 E0               [ 8] 2009 	movx	a,@dptr
      000A49 FD               [ 4] 2010 	mov	r5,a
      000A4A 7F 00            [ 8] 2011 	mov	r7,#0x00
      000A4C ED               [ 4] 2012 	mov	a,r5
      000A4D 2B               [ 4] 2013 	add	a,r3
      000A4E FB               [ 4] 2014 	mov	r3,a
      000A4F EF               [ 4] 2015 	mov	a,r7
      000A50 3C               [ 4] 2016 	addc	a,r4
      000A51 FC               [ 4] 2017 	mov	r4,a
      000A52 90s00r00rD1      [12] 2018 	mov	dptr,#__print_format_sloc2_1_0
      000A56 EB               [ 4] 2019 	mov	a,r3
      000A57 24 D0            [ 8] 2020 	add	a,#0xd0
      000A59 F0               [ 8] 2021 	movx	@dptr,a
      000A5A EC               [ 4] 2022 	mov	a,r4
      000A5B 34 FF            [ 8] 2023 	addc	a,#0xff
      000A5D A3               [12] 2024 	inc	dptr
      000A5E F0               [ 8] 2025 	movx	@dptr,a
                                   2026 ;	printf_large.c:506: if (width == 0)
      000A5F 90s00r00rD1      [12] 2027 	mov	dptr,#__print_format_sloc2_1_0
      000A63 E0               [ 8] 2028 	movx	a,@dptr
      000A64 F5 F0            [ 8] 2029 	mov	b,a
      000A66 A3               [12] 2030 	inc	dptr
      000A67 E0               [ 8] 2031 	movx	a,@dptr
      000A68 45 F0            [ 8] 2032 	orl	a,b
      000A6A 60 04            [12] 2033 	jz	00664$
      000A6C 02s00r09r96      [16] 2034 	ljmp	00103$
      000A70                       2035 00664$:
                                   2036 ;	printf_large.c:509: zero_padding = 1;
                                   2037 ;	genAssign: resultIsFar = TRUE
      000A70 90s00r00rB9      [12] 2038 	mov	dptr,#__print_format_zero_padding_65536_113
      000A74 74 01            [ 8] 2039 	mov	a,#0x01
      000A76 F0               [ 8] 2040 	movx	@dptr,a
      000A77 02s00r09r96      [16] 2041 	ljmp	00103$
      000A7B                       2042 00109$:
                                   2043 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000A7B 90s00r00rC1      [12] 2044 	mov	dptr,#__print_format_decimals_65536_113
                                   2045 ;	genAssign: resultIsFar = TRUE
      000A7F 75 86 21         [12] 2046 	mov	dps,#0x21
      000A82 90s00r00r00      [12] 2047 	mov	dptr,#__mulint_PARM_2
      000A86 E0               [ 8] 2048 	movx	a,@dptr
      000A87 F0               [ 8] 2049 	movx	@dptr,a
      000A88 A3               [12] 2050 	inc	dptr
      000A89 A3               [12] 2051 	inc	dptr
      000A8A E0               [ 8] 2052 	movx	a,@dptr
      000A8B F0               [ 8] 2053 	movx	@dptr,a
      000A8C 75 86 00         [12] 2054 	mov	dps,#0
      000A8F C0 02            [ 8] 2055 	push	ar2
      000A91 C0 06            [ 8] 2056 	push	ar6
      000A93 C0 00            [ 8] 2057 	push	ar0
      000A95 C0 01            [ 8] 2058 	push	ar1
      000A97 90 00 00 0A      [12] 2059 	mov  dptr,#0x000a
      000A9B 12s00r00r00      [16] 2060 	lcall	__mulint
      000A9F AC 82            [ 8] 2061 	mov	r4,dpl
      000AA1 AD 83            [ 8] 2062 	mov	r5,dph
      000AA3 D0 01            [ 8] 2063 	pop	ar1
      000AA5 D0 00            [ 8] 2064 	pop	ar0
      000AA7 D0 06            [ 8] 2065 	pop	ar6
      000AA9 D0 02            [ 8] 2066 	pop	ar2
      000AAB 90s00r00rD0      [12] 2067 	mov	dptr,#__print_format_sloc1_1_0
      000AAF E0               [ 8] 2068 	movx	a,@dptr
      000AB0 FF               [ 4] 2069 	mov	r7,a
      000AB1 7B 00            [ 8] 2070 	mov	r3,#0x00
      000AB3 EF               [ 4] 2071 	mov	a,r7
      000AB4 2C               [ 4] 2072 	add	a,r4
      000AB5 FC               [ 4] 2073 	mov	r4,a
      000AB6 EB               [ 4] 2074 	mov	a,r3
      000AB7 3D               [ 4] 2075 	addc	a,r5
      000AB8 FD               [ 4] 2076 	mov	r5,a
      000AB9 EC               [ 4] 2077 	mov	a,r4
      000ABA 24 D0            [ 8] 2078 	add	a,#0xd0
      000ABC FC               [ 4] 2079 	mov	r4,a
      000ABD ED               [ 4] 2080 	mov	a,r5
      000ABE 34 FF            [ 8] 2081 	addc	a,#0xff
      000AC0 FD               [ 4] 2082 	mov	r5,a
                                   2083 ;	genAssign: resultIsFar = TRUE
      000AC1 90s00r00rC1      [12] 2084 	mov	dptr,#__print_format_decimals_65536_113
      000AC5 EC               [ 4] 2085 	mov	a,r4
      000AC6 F0               [ 8] 2086 	movx	@dptr,a
      000AC7 A3               [12] 2087 	inc	dptr
      000AC8 ED               [ 4] 2088 	mov	a,r5
      000AC9 F0               [ 8] 2089 	movx	@dptr,a
                                   2090 ;	printf_large.c:516: goto get_conversion_spec;
      000ACA 02s00r09r96      [16] 2091 	ljmp	00103$
      000ACE                       2092 00112$:
                                   2093 ;	printf_large.c:519: if (c=='.')
      000ACE 90s00r00rD0      [12] 2094 	mov	dptr,#__print_format_sloc1_1_0
      000AD2 E0               [ 8] 2095 	movx	a,@dptr
      000AD3 B4 2E 1F         [16] 2096 	cjne a,#0x2e,00117$
      000AD6                       2097 00666$:
                                   2098 ;	printf_large.c:521: if (decimals==-1)
      000AD6 90s00r00rC1      [12] 2099 	mov	dptr,#__print_format_decimals_65536_113
      000ADA E0               [ 8] 2100 	movx	a,@dptr
      000ADB B4 FF 07         [16] 2101 	cjne	a,#0xff,00667$
      000ADE A3               [12] 2102 	inc	dptr
      000ADF E0               [ 8] 2103 	movx	a,@dptr
      000AE0 B4 FF 02         [16] 2104 	cjne	a,#0xff,00667$
      000AE3 80 04            [12] 2105 	sjmp	00668$
      000AE5                       2106 00667$:
      000AE5 02s00r09r96      [16] 2107 	ljmp	00103$
      000AE9                       2108 00668$:
                                   2109 ;	printf_large.c:522: decimals=0;
                                   2110 ;	genAssign: resultIsFar = TRUE
      000AE9 90s00r00rC1      [12] 2111 	mov	dptr,#__print_format_decimals_65536_113
      000AED E4               [ 4] 2112 	clr	a
      000AEE F0               [ 8] 2113 	movx	@dptr,a
      000AEF A3               [12] 2114 	inc	dptr
      000AF0 F0               [ 8] 2115 	movx	@dptr,a
                                   2116 ;	printf_large.c:525: goto get_conversion_spec;
      000AF1 02s00r09r96      [16] 2117 	ljmp	00103$
      000AF5                       2118 00117$:
                                   2119 ;	printf_large.c:528: if (islower(c))
      000AF5 90s00r00rD0      [12] 2120 	mov	dptr,#__print_format_sloc1_1_0
      000AF9 E0               [ 8] 2121 	movx	a,@dptr
      000AFA B4 61 00         [16] 2122 	cjne	a,#0x61,00669$
      000AFD                       2123 00669$:
      000AFD 40 21            [12] 2124 	jc   00119$
      000AFF                       2125 00670$:
      000AFF 90s00r00rD0      [12] 2126 	mov	dptr,#__print_format_sloc1_1_0
      000B03 C3               [ 4] 2127 	clr	c
      000B04 74 7A            [ 8] 2128 	mov	a,#0x7a
      000B06 C5 F0            [ 8] 2129 	xch	a, b
      000B08 E0               [ 8] 2130 	movx	a,@dptr
      000B09 C5 F0            [ 8] 2131 	xch	a, b
      000B0B 95 F0            [ 8] 2132 	subb	a,b
      000B0D 40 11            [12] 2133 	jc   00119$
      000B0F                       2134 00671$:
                                   2135 ;	printf_large.c:530: c = toupper(c);
      000B0F 90s00r00rD0      [12] 2136 	mov	dptr,#__print_format_sloc1_1_0
      000B13 E0               [ 8] 2137 	movx	a,@dptr
      000B14 54 DF            [ 8] 2138 	anl	a,#0xdf
      000B16 F0               [ 8] 2139 	movx	@dptr,a
                                   2140 ;	printf_large.c:531: lower_case = 1;
                                   2141 ;	genAssign: resultIsFar = TRUE
      000B17 90s00r00r00      [12] 2142 	mov	dptr,#_lower_case
      000B1B 74 01            [ 8] 2143 	mov	a,#0x01
      000B1D F0               [ 8] 2144 	movx	@dptr,a
      000B1E 80 06            [12] 2145 	sjmp 00120$
      000B20                       2146 00119$:
                                   2147 ;	printf_large.c:534: lower_case = 0;
                                   2148 ;	genAssign: resultIsFar = TRUE
      000B20 90s00r00r00      [12] 2149 	mov	dptr,#_lower_case
      000B24 E4               [ 4] 2150 	clr	a
      000B25 F0               [ 8] 2151 	movx	@dptr,a
      000B26                       2152 00120$:
                                   2153 ;	printf_large.c:536: switch( c )
      000B26 90s00r00rD0      [12] 2154 	mov	dptr,#__print_format_sloc1_1_0
      000B2A E0               [ 8] 2155 	movx	a,@dptr
      000B2B B4 20 04         [16] 2156 	cjne	a,#0x20,00672$
      000B2E 02s00r0Cr18      [16] 2157 	ljmp	00124$
      000B32                       2158 00672$:
      000B32 90s00r00rD0      [12] 2159 	mov	dptr,#__print_format_sloc1_1_0
      000B36 E0               [ 8] 2160 	movx	a,@dptr
      000B37 B4 2B 04         [16] 2161 	cjne	a,#0x2b,00673$
      000B3A 02s00r0Cr0D      [16] 2162 	ljmp	00123$
      000B3E                       2163 00673$:
      000B3E 90s00r00rD0      [12] 2164 	mov	dptr,#__print_format_sloc1_1_0
      000B42 E0               [ 8] 2165 	movx	a,@dptr
      000B43 B4 2D 04         [16] 2166 	cjne	a,#0x2d,00674$
      000B46 02s00r0Cr02      [16] 2167 	ljmp	00122$
      000B4A                       2168 00674$:
      000B4A 90s00r00rD0      [12] 2169 	mov	dptr,#__print_format_sloc1_1_0
      000B4E E0               [ 8] 2170 	movx	a,@dptr
      000B4F B4 42 04         [16] 2171 	cjne	a,#0x42,00675$
      000B52 02s00r0Cr23      [16] 2172 	ljmp	00125$
      000B56                       2173 00675$:
      000B56 90s00r00rD0      [12] 2174 	mov	dptr,#__print_format_sloc1_1_0
      000B5A E0               [ 8] 2175 	movx	a,@dptr
      000B5B B4 43 04         [16] 2176 	cjne	a,#0x43,00676$
      000B5E 02s00r0Cr39      [16] 2177 	ljmp	00131$
      000B62                       2178 00676$:
      000B62 90s00r00rD0      [12] 2179 	mov	dptr,#__print_format_sloc1_1_0
      000B66 E0               [ 8] 2180 	movx	a,@dptr
      000B67 B4 44 04         [16] 2181 	cjne	a,#0x44,00677$
      000B6A 02s00r0Fr65      [16] 2182 	ljmp	00168$
      000B6E                       2183 00677$:
      000B6E 90s00r00rD0      [12] 2184 	mov	dptr,#__print_format_sloc1_1_0
      000B72 E0               [ 8] 2185 	movx	a,@dptr
      000B73 B4 46 04         [16] 2186 	cjne	a,#0x46,00678$
      000B76 02s00r0Fr90      [16] 2187 	ljmp	00172$
      000B7A                       2188 00678$:
      000B7A 90s00r00rD0      [12] 2189 	mov	dptr,#__print_format_sloc1_1_0
      000B7E E0               [ 8] 2190 	movx	a,@dptr
      000B7F B4 48 04         [16] 2191 	cjne	a,#0x48,00679$
      000B82 02s00r09r96      [16] 2192 	ljmp	00103$
      000B86                       2193 00679$:
      000B86 90s00r00rD0      [12] 2194 	mov	dptr,#__print_format_sloc1_1_0
      000B8A E0               [ 8] 2195 	movx	a,@dptr
      000B8B B4 49 04         [16] 2196 	cjne	a,#0x49,00680$
      000B8E 02s00r0Fr65      [16] 2197 	ljmp	00168$
      000B92                       2198 00680$:
      000B92 90s00r00rD0      [12] 2199 	mov	dptr,#__print_format_sloc1_1_0
      000B96 E0               [ 8] 2200 	movx	a,@dptr
      000B97 B4 4A 04         [16] 2201 	cjne	a,#0x4a,00681$
      000B9A 02s00r09r96      [16] 2202 	ljmp	00103$
      000B9E                       2203 00681$:
      000B9E 90s00r00rD0      [12] 2204 	mov	dptr,#__print_format_sloc1_1_0
      000BA2 E0               [ 8] 2205 	movx	a,@dptr
      000BA3 B4 4C 04         [16] 2206 	cjne	a,#0x4c,00682$
      000BA6 02s00r0Cr2E      [16] 2207 	ljmp	00130$
      000BAA                       2208 00682$:
      000BAA 90s00r00rD0      [12] 2209 	mov	dptr,#__print_format_sloc1_1_0
      000BAE E0               [ 8] 2210 	movx	a,@dptr
      000BAF B4 4F 04         [16] 2211 	cjne	a,#0x4f,00683$
      000BB2 02s00r0Fr75      [16] 2212 	ljmp	00169$
      000BB6                       2213 00683$:
      000BB6 90s00r00rD0      [12] 2214 	mov	dptr,#__print_format_sloc1_1_0
      000BBA E0               [ 8] 2215 	movx	a,@dptr
      000BBB B4 50 04         [16] 2216 	cjne	a,#0x50,00684$
      000BBE 02s00r0ErB1      [16] 2217 	ljmp	00157$
      000BC2                       2218 00684$:
      000BC2 90s00r00rD0      [12] 2219 	mov	dptr,#__print_format_sloc1_1_0
      000BC6 E0               [ 8] 2220 	movx	a,@dptr
      000BC7 B4 53 04         [16] 2221 	cjne	a,#0x53,00685$
      000BCA 02s00r0CrBB      [16] 2222 	ljmp	00135$
      000BCE                       2223 00685$:
      000BCE 90s00r00rD0      [12] 2224 	mov	dptr,#__print_format_sloc1_1_0
      000BD2 E0               [ 8] 2225 	movx	a,@dptr
      000BD3 B4 54 04         [16] 2226 	cjne	a,#0x54,00686$
      000BD6 02s00r09r96      [16] 2227 	ljmp	00103$
      000BDA                       2228 00686$:
      000BDA 90s00r00rD0      [12] 2229 	mov	dptr,#__print_format_sloc1_1_0
      000BDE E0               [ 8] 2230 	movx	a,@dptr
      000BDF B4 55 04         [16] 2231 	cjne	a,#0x55,00687$
      000BE2 02s00r0Fr7E      [16] 2232 	ljmp	00170$
      000BE6                       2233 00687$:
      000BE6 90s00r00rD0      [12] 2234 	mov	dptr,#__print_format_sloc1_1_0
      000BEA E0               [ 8] 2235 	movx	a,@dptr
      000BEB B4 58 04         [16] 2236 	cjne	a,#0x58,00688$
      000BEE 02s00r0Fr87      [16] 2237 	ljmp	00171$
      000BF2                       2238 00688$:
      000BF2 90s00r00rD0      [12] 2239 	mov	dptr,#__print_format_sloc1_1_0
      000BF6 E0               [ 8] 2240 	movx	a,@dptr
      000BF7 B4 5A 04         [16] 2241 	cjne	a,#0x5a,00689$
      000BFA 02s00r09r96      [16] 2242 	ljmp	00103$
      000BFE                       2243 00689$:
      000BFE 02s00r0Fr99      [16] 2244 	ljmp	00173$
                                   2245 ;	printf_large.c:538: case '-':
      000C02                       2246 00122$:
                                   2247 ;	printf_large.c:539: left_justify = 1;
                                   2248 ;	genAssign: resultIsFar = TRUE
      000C02 90s00r00rB8      [12] 2249 	mov	dptr,#__print_format_left_justify_65536_113
      000C06 74 01            [ 8] 2250 	mov	a,#0x01
      000C08 F0               [ 8] 2251 	movx	@dptr,a
                                   2252 ;	printf_large.c:540: goto get_conversion_spec;
      000C09 02s00r09r96      [16] 2253 	ljmp	00103$
                                   2254 ;	printf_large.c:541: case '+':
      000C0D                       2255 00123$:
                                   2256 ;	printf_large.c:542: prefix_sign = 1;
                                   2257 ;	genAssign: resultIsFar = TRUE
      000C0D 90s00r00rBA      [12] 2258 	mov	dptr,#__print_format_prefix_sign_65536_113
      000C11 74 01            [ 8] 2259 	mov	a,#0x01
      000C13 F0               [ 8] 2260 	movx	@dptr,a
                                   2261 ;	printf_large.c:543: goto get_conversion_spec;
      000C14 02s00r09r96      [16] 2262 	ljmp	00103$
                                   2263 ;	printf_large.c:544: case ' ':
      000C18                       2264 00124$:
                                   2265 ;	printf_large.c:545: prefix_space = 1;
                                   2266 ;	genAssign: resultIsFar = TRUE
      000C18 90s00r00rBB      [12] 2267 	mov	dptr,#__print_format_prefix_space_65536_113
      000C1C 74 01            [ 8] 2268 	mov	a,#0x01
      000C1E F0               [ 8] 2269 	movx	@dptr,a
                                   2270 ;	printf_large.c:546: goto get_conversion_spec;
      000C1F 02s00r09r96      [16] 2271 	ljmp	00103$
                                   2272 ;	printf_large.c:547: case 'B': /* byte */
      000C23                       2273 00125$:
                                   2274 ;	printf_large.c:548: char_argument = 1;
                                   2275 ;	genAssign: resultIsFar = TRUE
      000C23 90s00r00rBD      [12] 2276 	mov	dptr,#__print_format_char_argument_65536_113
      000C27 74 01            [ 8] 2277 	mov	a,#0x01
      000C29 F0               [ 8] 2278 	movx	@dptr,a
                                   2279 ;	printf_large.c:549: goto get_conversion_spec;
      000C2A 02s00r09r96      [16] 2280 	ljmp	00103$
                                   2281 ;	printf_large.c:556: case 'L': /* long */
      000C2E                       2282 00130$:
                                   2283 ;	printf_large.c:557: long_argument = 1;
                                   2284 ;	genAssign: resultIsFar = TRUE
      000C2E 90s00r00rBE      [12] 2285 	mov	dptr,#__print_format_long_argument_65536_113
      000C32 74 01            [ 8] 2286 	mov	a,#0x01
      000C34 F0               [ 8] 2287 	movx	@dptr,a
                                   2288 ;	printf_large.c:558: goto get_conversion_spec;
      000C35 02s00r09r96      [16] 2289 	ljmp	00103$
                                   2290 ;	printf_large.c:560: case 'C':
      000C39                       2291 00131$:
                                   2292 ;	printf_large.c:561: if( char_argument )
      000C39 90s00r00rBD      [12] 2293 	mov	dptr,#__print_format_char_argument_65536_113
      000C3D E0               [ 8] 2294 	movx	a,@dptr
      000C3E 60 38            [12] 2295 	jz  00133$
      000C40                       2296 00690$:
                                   2297 ;	printf_large.c:562: c = va_arg(ap,char);
      000C40 90s00r00rB4      [12] 2298 	mov	dptr,#__print_format_PARM_4
                                   2299 ;	genAssign: resultIsFar = FALSE
      000C44 E0               [ 8] 2300 	movx	a,@dptr
      000C45 FC               [ 4] 2301 	mov	r4,a
      000C46 A3               [12] 2302 	inc	dptr
      000C47 E0               [ 8] 2303 	movx	a,@dptr
      000C48 FD               [ 4] 2304 	mov	r5,a
      000C49 A3               [12] 2305 	inc	dptr
      000C4A E0               [ 8] 2306 	movx	a,@dptr
      000C4B FF               [ 4] 2307 	mov	r7,a
      000C4C A3               [12] 2308 	inc	dptr
      000C4D E0               [ 8] 2309 	movx	a,@dptr
      000C4E FB               [ 4] 2310 	mov	r3,a
      000C4F 1C               [ 4] 2311 	dec	r4
      000C50 BC FF 05         [16] 2312 	cjne	r4,#0xff,00691$
      000C53 1D               [ 4] 2313 	dec	r5
      000C54 BD FF 01         [16] 2314 	cjne	r5,#0xff,00691$
      000C57 1F               [ 4] 2315 	dec	r7
      000C58                       2316 00691$:
                                   2317 ;	genAssign: resultIsFar = TRUE
      000C58 90s00r00rB4      [12] 2318 	mov	dptr,#__print_format_PARM_4
      000C5C EC               [ 4] 2319 	mov	a,r4
      000C5D F0               [ 8] 2320 	movx	@dptr,a
      000C5E A3               [12] 2321 	inc	dptr
      000C5F ED               [ 4] 2322 	mov	a,r5
      000C60 F0               [ 8] 2323 	movx	@dptr,a
      000C61 A3               [12] 2324 	inc	dptr
      000C62 EF               [ 4] 2325 	mov	a,r7
      000C63 F0               [ 8] 2326 	movx	@dptr,a
      000C64 A3               [12] 2327 	inc	dptr
      000C65 EB               [ 4] 2328 	mov	a,r3
      000C66 F0               [ 8] 2329 	movx	@dptr,a
      000C67 8C 82            [ 8] 2330 	mov	dpl,r4
      000C69 8D 83            [ 8] 2331 	mov	dph,r5
      000C6B 8F 93            [ 8] 2332 	mov	dpx,r7
      000C6D 8B F0            [ 8] 2333 	mov	b,r3
      000C6F 12s00r00r00      [16] 2334 	lcall	__gptrget
      000C73 FC               [ 4] 2335 	mov	r4,a
                                   2336 ;	genAssign: resultIsFar = FALSE
      000C74 8C 02            [ 8] 2337 	mov	ar2,r4
      000C76 80 39            [12] 2338 	sjmp 00134$
      000C78                       2339 00133$:
                                   2340 ;	printf_large.c:564: c = va_arg(ap,int);
      000C78 90s00r00rB4      [12] 2341 	mov	dptr,#__print_format_PARM_4
                                   2342 ;	genAssign: resultIsFar = FALSE
      000C7C E0               [ 8] 2343 	movx	a,@dptr
      000C7D FC               [ 4] 2344 	mov	r4,a
      000C7E A3               [12] 2345 	inc	dptr
      000C7F E0               [ 8] 2346 	movx	a,@dptr
      000C80 FD               [ 4] 2347 	mov	r5,a
      000C81 A3               [12] 2348 	inc	dptr
      000C82 E0               [ 8] 2349 	movx	a,@dptr
      000C83 FF               [ 4] 2350 	mov	r7,a
      000C84 A3               [12] 2351 	inc	dptr
      000C85 E0               [ 8] 2352 	movx	a,@dptr
      000C86 FB               [ 4] 2353 	mov	r3,a
      000C87 EC               [ 4] 2354 	mov	a,r4
      000C88 24 FE            [ 8] 2355 	add	a,#0xfe
      000C8A FC               [ 4] 2356 	mov	r4,a
      000C8B ED               [ 4] 2357 	mov	a,r5
      000C8C 34 FF            [ 8] 2358 	addc	a,#0xff
      000C8E FD               [ 4] 2359 	mov	r5,a
      000C8F EF               [ 4] 2360 	mov	a,r7
      000C90 34 FF            [ 8] 2361 	addc	a,#0xff
      000C92 FF               [ 4] 2362 	mov	r7,a
                                   2363 ;	genAssign: resultIsFar = TRUE
      000C93 90s00r00rB4      [12] 2364 	mov	dptr,#__print_format_PARM_4
      000C97 EC               [ 4] 2365 	mov	a,r4
      000C98 F0               [ 8] 2366 	movx	@dptr,a
      000C99 A3               [12] 2367 	inc	dptr
      000C9A ED               [ 4] 2368 	mov	a,r5
      000C9B F0               [ 8] 2369 	movx	@dptr,a
      000C9C A3               [12] 2370 	inc	dptr
      000C9D EF               [ 4] 2371 	mov	a,r7
      000C9E F0               [ 8] 2372 	movx	@dptr,a
      000C9F A3               [12] 2373 	inc	dptr
      000CA0 EB               [ 4] 2374 	mov	a,r3
      000CA1 F0               [ 8] 2375 	movx	@dptr,a
      000CA2 8C 82            [ 8] 2376 	mov	dpl,r4
      000CA4 8D 83            [ 8] 2377 	mov	dph,r5
      000CA6 8F 93            [ 8] 2378 	mov	dpx,r7
      000CA8 8B F0            [ 8] 2379 	mov	b,r3
      000CAA 12s00r00r00      [16] 2380 	lcall	__gptrget
      000CAE FC               [ 4] 2381 	mov	r4,a
                                   2382 ;	genAssign: resultIsFar = FALSE
      000CAF 8C 02            [ 8] 2383 	mov	ar2,r4
                                   2384 ;	printf_large.c:877: return charsOutputted;
                                   2385 ;	printf_large.c:564: c = va_arg(ap,int);
      000CB1                       2386 00134$:
                                   2387 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000CB1 8A 82            [ 8] 2388 	mov	dpl,r2
      000CB3 12s00r00r00      [16] 2389 	lcall	__output_char
                                   2390 ;	printf_large.c:566: break;
      000CB7 02s00r0FrAF      [16] 2391 	ljmp	00174$
                                   2392 ;	printf_large.c:568: case 'S':
      000CBB                       2393 00135$:
                                   2394 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000CBB 90s00r00rB4      [12] 2395 	mov	dptr,#__print_format_PARM_4
                                   2396 ;	genAssign: resultIsFar = FALSE
      000CBF E0               [ 8] 2397 	movx	a,@dptr
      000CC0 FC               [ 4] 2398 	mov	r4,a
      000CC1 A3               [12] 2399 	inc	dptr
      000CC2 E0               [ 8] 2400 	movx	a,@dptr
      000CC3 FD               [ 4] 2401 	mov	r5,a
      000CC4 A3               [12] 2402 	inc	dptr
      000CC5 E0               [ 8] 2403 	movx	a,@dptr
      000CC6 FF               [ 4] 2404 	mov	r7,a
      000CC7 A3               [12] 2405 	inc	dptr
      000CC8 E0               [ 8] 2406 	movx	a,@dptr
      000CC9 FB               [ 4] 2407 	mov	r3,a
      000CCA EC               [ 4] 2408 	mov	a,r4
      000CCB 24 FC            [ 8] 2409 	add	a,#0xfc
      000CCD FC               [ 4] 2410 	mov	r4,a
      000CCE ED               [ 4] 2411 	mov	a,r5
      000CCF 34 FF            [ 8] 2412 	addc	a,#0xff
      000CD1 FD               [ 4] 2413 	mov	r5,a
      000CD2 EF               [ 4] 2414 	mov	a,r7
      000CD3 34 FF            [ 8] 2415 	addc	a,#0xff
      000CD5 FF               [ 4] 2416 	mov	r7,a
                                   2417 ;	genAssign: resultIsFar = TRUE
      000CD6 90s00r00rB4      [12] 2418 	mov	dptr,#__print_format_PARM_4
      000CDA EC               [ 4] 2419 	mov	a,r4
      000CDB F0               [ 8] 2420 	movx	@dptr,a
      000CDC A3               [12] 2421 	inc	dptr
      000CDD ED               [ 4] 2422 	mov	a,r5
      000CDE F0               [ 8] 2423 	movx	@dptr,a
      000CDF A3               [12] 2424 	inc	dptr
      000CE0 EF               [ 4] 2425 	mov	a,r7
      000CE1 F0               [ 8] 2426 	movx	@dptr,a
      000CE2 A3               [12] 2427 	inc	dptr
      000CE3 EB               [ 4] 2428 	mov	a,r3
      000CE4 F0               [ 8] 2429 	movx	@dptr,a
      000CE5 8C 82            [ 8] 2430 	mov	dpl,r4
      000CE7 8D 83            [ 8] 2431 	mov	dph,r5
      000CE9 8F 93            [ 8] 2432 	mov	dpx,r7
      000CEB 8B F0            [ 8] 2433 	mov	b,r3
      000CED 12s00r00r00      [16] 2434 	lcall	__gptrgetWord
      000CF1 FC               [ 4] 2435 	mov	r4,a
      000CF2 AD 9C            [ 8] 2436 	mov	r5,acc1
      000CF4 A3               [12] 2437 	inc	dptr
      000CF5 12s00r00r00      [16] 2438 	lcall	__gptrgetWord
      000CF9 FF               [ 4] 2439 	mov	r7,a
      000CFA AB 9C            [ 8] 2440 	mov	r3,acc1
      000CFC 90s00r00r08      [12] 2441 	mov	dptr,#_value
      000D00 EC               [ 4] 2442 	mov	a,r4
      000D01 F0               [ 8] 2443 	movx	@dptr,a
      000D02 A3               [12] 2444 	inc	dptr
      000D03 ED               [ 4] 2445 	mov	a,r5
      000D04 F0               [ 8] 2446 	movx	@dptr,a
      000D05 A3               [12] 2447 	inc	dptr
      000D06 EF               [ 4] 2448 	mov	a,r7
      000D07 F0               [ 8] 2449 	movx	@dptr,a
      000D08 A3               [12] 2450 	inc	dptr
      000D09 EB               [ 4] 2451 	mov	a,r3
      000D0A F0               [ 8] 2452 	movx	@dptr,a
                                   2453 ;	printf_large.c:572: if (PTR==0)
      000D0B EC               [ 4] 2454 	mov	a,r4
      000D0C 4D               [ 4] 2455 	orl	a,r5
      000D0D 4F               [ 4] 2456 	orl	a,r7
      000D0E 70 19            [12] 2457 	jnz  00137$
      000D10                       2458 00692$:
                                   2459 ;	printf_large.c:574: PTR=NULL_STRING;
      000D10 90s00r00r08      [12] 2460 	mov	dptr,#_value
      000D14 74r00            [ 8] 2461 	mov	a,#___str_0
      000D16 F0               [ 8] 2462 	movx	@dptr,a
      000D17 A3               [12] 2463 	inc	dptr
      000D18 74s00            [ 8] 2464 	mov	a,#(___str_0 >> 8)
      000D1A F0               [ 8] 2465 	movx	@dptr,a
      000D1B A3               [12] 2466 	inc	dptr
      000D1C 74s00            [ 8] 2467 	mov	a,#(___str_0 >> 16)
      000D1E F0               [ 8] 2468 	movx	@dptr,a
      000D1F A3               [12] 2469 	inc	dptr
      000D20 74 80            [ 8] 2470 	mov	a,#0x80
      000D22 F0               [ 8] 2471 	movx	@dptr,a
                                   2472 ;	printf_large.c:575: length=NULL_STRING_LENGTH;
                                   2473 ;	genAssign: resultIsFar = FALSE
      000D23 7C 06            [ 8] 2474 	mov	r4,#0x06
      000D25 7D 00            [ 8] 2475 	mov	r5,#0x00
      000D27 80 23            [12] 2476 	sjmp 00138$
      000D29                       2477 00137$:
                                   2478 ;	printf_large.c:579: length = strlen(PTR);
      000D29 90s00r00r08      [12] 2479 	mov	dptr,#_value
      000D2D E0               [ 8] 2480 	movx	a,@dptr
      000D2E A3               [12] 2481 	inc	dptr
      000D2F FF               [ 4] 2482 	mov	r7,a
      000D30 E0               [ 8] 2483 	movx	a,@dptr
      000D31 A3               [12] 2484 	inc	dptr
      000D32 FB               [ 4] 2485 	mov	r3,a
      000D33 E0               [ 8] 2486 	movx	a,@dptr
      000D34 A3               [12] 2487 	inc	dptr
      000D35 F9               [ 4] 2488 	mov	r1,a
      000D36 E0               [ 8] 2489 	movx	a,@dptr
      000D37 FE               [ 4] 2490 	mov	r6,a
      000D38 8F 82            [ 8] 2491 	mov	dpl,r7
      000D3A 8B 83            [ 8] 2492 	mov	dph,r3
      000D3C 89 93            [ 8] 2493 	mov	dpx,r1
      000D3E 8E F0            [ 8] 2494 	mov	b,r6
      000D40 12s00r00r00      [16] 2495 	lcall	_strlen
      000D44 AB 82            [ 8] 2496 	mov	r3,dpl
      000D46 AE 83            [ 8] 2497 	mov	r6,dph
                                   2498 ;	genAssign: resultIsFar = FALSE
      000D48 8B 04            [ 8] 2499 	mov	ar4,r3
      000D4A 8E 05            [ 8] 2500 	mov	ar5,r6
                                   2501 ;	printf_large.c:877: return charsOutputted;
                                   2502 ;	printf_large.c:579: length = strlen(PTR);
      000D4C                       2503 00138$:
                                   2504 ;	printf_large.c:584: if ( decimals == -1 )
      000D4C 90s00r00rC1      [12] 2505 	mov	dptr,#__print_format_decimals_65536_113
      000D50 E0               [ 8] 2506 	movx	a,@dptr
      000D51 B4 FF 07         [16] 2507 	cjne	a,#0xff,00693$
      000D54 A3               [12] 2508 	inc	dptr
      000D55 E0               [ 8] 2509 	movx	a,@dptr
      000D56 B4 FF 02         [16] 2510 	cjne	a,#0xff,00693$
      000D59 80 02            [12] 2511 	sjmp	00694$
      000D5B                       2512 00693$:
      000D5B 80 09            [12] 2513 	sjmp 00140$
      000D5D                       2514 00694$:
                                   2515 ;	printf_large.c:586: decimals = length;
                                   2516 ;	genAssign: resultIsFar = TRUE
      000D5D 90s00r00rC1      [12] 2517 	mov	dptr,#__print_format_decimals_65536_113
      000D61 EC               [ 4] 2518 	mov	a,r4
      000D62 F0               [ 8] 2519 	movx	@dptr,a
      000D63 A3               [12] 2520 	inc	dptr
      000D64 ED               [ 4] 2521 	mov	a,r5
      000D65 F0               [ 8] 2522 	movx	@dptr,a
      000D66                       2523 00140$:
                                   2524 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000D66 90s00r00rB8      [12] 2525 	mov	dptr,#__print_format_left_justify_65536_113
      000D6A E0               [ 8] 2526 	movx	a,@dptr
      000D6B 70 53            [12] 2527 	jnz  00290$
      000D6D                       2528 00695$:
      000D6D 90s00r00rD1      [12] 2529 	mov	dptr,#__print_format_sloc2_1_0
      000D71 C3               [ 4] 2530 	clr	c
      000D72 EC               [ 4] 2531 	mov	a,r4
      000D73 C5 F0            [ 8] 2532 	xch	a, b
      000D75 E0               [ 8] 2533 	movx	a,@dptr
      000D76 C5 F0            [ 8] 2534 	xch	a, b
      000D78 95 F0            [ 8] 2535 	subb	a,b
      000D7A ED               [ 4] 2536 	mov	a,r5
      000D7B C5 F0            [ 8] 2537 	xch	a, b
      000D7D A3               [12] 2538 	inc	dptr
      000D7E E0               [ 8] 2539 	movx	a,@dptr
      000D7F C5 F0            [ 8] 2540 	xch	a, b
      000D81 95 F0            [ 8] 2541 	subb	a,b
      000D83 50 3B            [12] 2542 	jnc  00290$
      000D85                       2543 00696$:
                                   2544 ;	printf_large.c:590: width -= length;
      000D85 90s00r00rD1      [12] 2545 	mov	dptr,#__print_format_sloc2_1_0
      000D89 C3               [ 4] 2546 	clr	c
      000D8A E0               [ 8] 2547 	movx	a,@dptr
      000D8B 9C               [ 4] 2548 	subb	a,r4
      000D8C FE               [ 4] 2549 	mov	r6,a
      000D8D A3               [12] 2550 	inc	dptr
      000D8E E0               [ 8] 2551 	movx	a,@dptr
      000D8F 9D               [ 4] 2552 	subb	a,r5
      000D90 FF               [ 4] 2553 	mov	r7,a
                                   2554 ;	printf_large.c:591: while( width-- != 0 )
      000D91                       2555 00141$:
                                   2556 ;	genAssign: resultIsFar = FALSE
      000D91 8E 00            [ 8] 2557 	mov	ar0,r6
      000D93 8F 01            [ 8] 2558 	mov	ar1,r7
      000D95 1E               [ 4] 2559 	dec	r6
      000D96 BE FF 01         [16] 2560 	cjne	r6,#0xff,00697$
      000D99 1F               [ 4] 2561 	dec	r7
      000D9A                       2562 00697$:
      000D9A E8               [ 4] 2563 	mov	a,r0
      000D9B 49               [ 4] 2564 	orl	a,r1
      000D9C 60 19            [12] 2565 	jz  00326$
      000D9E                       2566 00698$:
                                   2567 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000D9E C0 04            [ 8] 2568 	push	ar4
      000DA0 C0 05            [ 8] 2569 	push	ar5
      000DA2 C0 06            [ 8] 2570 	push	ar6
      000DA4 C0 07            [ 8] 2571 	push	ar7
      000DA6 75 82 20         [12] 2572 	mov	dpl,#0x20
      000DA9 12s00r00r00      [16] 2573 	lcall	__output_char
      000DAD D0 07            [ 8] 2574 	pop	ar7
      000DAF D0 06            [ 8] 2575 	pop	ar6
      000DB1 D0 05            [ 8] 2576 	pop	ar5
      000DB3 D0 04            [ 8] 2577 	pop	ar4
                                   2578 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000DB5 80 DA            [12] 2579 	sjmp 00141$
      000DB7                       2580 00326$:
                                   2581 ;	genAssign: resultIsFar = TRUE
      000DB7 90s00r00rD1      [12] 2582 	mov	dptr,#__print_format_sloc2_1_0
      000DBB EE               [ 4] 2583 	mov	a,r6
      000DBC F0               [ 8] 2584 	movx	@dptr,a
      000DBD A3               [12] 2585 	inc	dptr
      000DBE EF               [ 4] 2586 	mov	a,r7
      000DBF F0               [ 8] 2587 	movx	@dptr,a
      000DC0                       2588 00290$:
      000DC0 90s00r00rC1      [12] 2589 	mov	dptr,#__print_format_decimals_65536_113
                                   2590 ;	genAssign: resultIsFar = FALSE
      000DC4 E0               [ 8] 2591 	movx	a,@dptr
      000DC5 FE               [ 4] 2592 	mov	r6,a
      000DC6 A3               [12] 2593 	inc	dptr
      000DC7 E0               [ 8] 2594 	movx	a,@dptr
      000DC8 FF               [ 4] 2595 	mov	r7,a
      000DC9                       2596 00148$:
      000DC9 C0 04            [ 8] 2597 	push	ar4
      000DCB C0 05            [ 8] 2598 	push	ar5
      000DCD 90s00r00r08      [12] 2599 	mov	dptr,#_value
      000DD1 E0               [ 8] 2600 	movx	a,@dptr
      000DD2 A3               [12] 2601 	inc	dptr
      000DD3 F8               [ 4] 2602 	mov	r0,a
      000DD4 E0               [ 8] 2603 	movx	a,@dptr
      000DD5 A3               [12] 2604 	inc	dptr
      000DD6 F9               [ 4] 2605 	mov	r1,a
      000DD7 E0               [ 8] 2606 	movx	a,@dptr
      000DD8 A3               [12] 2607 	inc	dptr
      000DD9 FC               [ 4] 2608 	mov	r4,a
      000DDA E0               [ 8] 2609 	movx	a,@dptr
      000DDB FD               [ 4] 2610 	mov	r5,a
      000DDC 88 82            [ 8] 2611 	mov	dpl,r0
      000DDE 89 83            [ 8] 2612 	mov	dph,r1
      000DE0 8C 93            [ 8] 2613 	mov	dpx,r4
      000DE2 8D F0            [ 8] 2614 	mov	b,r5
      000DE4 12s00r00r00      [16] 2615 	lcall	__gptrget
      000DE8 F8               [ 4] 2616 	mov	r0,a
                                   2617 ;	genAssign: resultIsFar = FALSE
      000DE9 88 02            [ 8] 2618 	mov	ar2,r0
      000DEB D0 05            [ 8] 2619 	pop	ar5
      000DED D0 04            [ 8] 2620 	pop	ar4
      000DEF E8               [ 4] 2621 	mov	a,r0
      000DF0 60 61            [12] 2622 	jz  00327$
      000DF2                       2623 00699$:
                                   2624 ;	genAssign: resultIsFar = FALSE
      000DF2 8E 00            [ 8] 2625 	mov	ar0,r6
      000DF4 8F 01            [ 8] 2626 	mov	ar1,r7
      000DF6 1E               [ 4] 2627 	dec	r6
      000DF7 BE FF 01         [16] 2628 	cjne	r6,#0xff,00700$
      000DFA 1F               [ 4] 2629 	dec	r7
      000DFB                       2630 00700$:
      000DFB C3               [ 4] 2631 	clr	c
      000DFC E4               [ 4] 2632 	clr	a
      000DFD 98               [ 4] 2633 	subb	a,r0
      000DFE E4               [ 4] 2634 	clr	a
      000DFF 64 80            [ 8] 2635 	xrl	a,#0x80
      000E01 89 F0            [ 8] 2636 	mov	b,r1
      000E03 63 F0 80         [12] 2637 	xrl	b,#0x80
      000E06 95 F0            [ 8] 2638 	subb	a,b
      000E08 50 49            [12] 2639 	jnc  00327$
      000E0A                       2640 00701$:
                                   2641 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000E0A C0 04            [ 8] 2642 	push	ar4
      000E0C C0 05            [ 8] 2643 	push	ar5
      000E0E C0 04            [ 8] 2644 	push	ar4
      000E10 C0 05            [ 8] 2645 	push	ar5
      000E12 C0 06            [ 8] 2646 	push	ar6
      000E14 C0 07            [ 8] 2647 	push	ar7
      000E16 8A 82            [ 8] 2648 	mov	dpl,r2
      000E18 12s00r00r00      [16] 2649 	lcall	__output_char
      000E1C D0 07            [ 8] 2650 	pop	ar7
      000E1E D0 06            [ 8] 2651 	pop	ar6
      000E20 D0 05            [ 8] 2652 	pop	ar5
      000E22 D0 04            [ 8] 2653 	pop	ar4
                                   2654 ;	printf_large.c:600: PTR++;
      000E24 90s00r00r08      [12] 2655 	mov	dptr,#_value
      000E28 E0               [ 8] 2656 	movx	a,@dptr
      000E29 A3               [12] 2657 	inc	dptr
      000E2A F8               [ 4] 2658 	mov	r0,a
      000E2B E0               [ 8] 2659 	movx	a,@dptr
      000E2C A3               [12] 2660 	inc	dptr
      000E2D F9               [ 4] 2661 	mov	r1,a
      000E2E E0               [ 8] 2662 	movx	a,@dptr
      000E2F A3               [12] 2663 	inc	dptr
      000E30 FC               [ 4] 2664 	mov	r4,a
      000E31 E0               [ 8] 2665 	movx	a,@dptr
      000E32 FD               [ 4] 2666 	mov	r5,a
      000E33 08               [ 4] 2667 	inc	r0
      000E34 B8 00 05         [16] 2668 	cjne	r0,#0x00,00702$
      000E37 09               [ 4] 2669 	inc	r1
      000E38 B9 00 01         [16] 2670 	cjne	r1,#0x00,00702$
      000E3B 0C               [ 4] 2671 	inc	r4
      000E3C                       2672 00702$:
      000E3C 90s00r00r08      [12] 2673 	mov	dptr,#_value
      000E40 E8               [ 4] 2674 	mov	a,r0
      000E41 F0               [ 8] 2675 	movx	@dptr,a
      000E42 A3               [12] 2676 	inc	dptr
      000E43 E9               [ 4] 2677 	mov	a,r1
      000E44 F0               [ 8] 2678 	movx	@dptr,a
      000E45 A3               [12] 2679 	inc	dptr
      000E46 EC               [ 4] 2680 	mov	a,r4
      000E47 F0               [ 8] 2681 	movx	@dptr,a
      000E48 A3               [12] 2682 	inc	dptr
      000E49 ED               [ 4] 2683 	mov	a,r5
      000E4A F0               [ 8] 2684 	movx	@dptr,a
      000E4B D0 05            [ 8] 2685 	pop	ar5
      000E4D D0 04            [ 8] 2686 	pop	ar4
      000E4F 02s00r0DrC9      [16] 2687 	ljmp	00148$
      000E53                       2688 00327$:
                                   2689 ;	genAssign: resultIsFar = TRUE
      000E53 90s00r00rC1      [12] 2690 	mov	dptr,#__print_format_decimals_65536_113
      000E57 EE               [ 4] 2691 	mov	a,r6
      000E58 F0               [ 8] 2692 	movx	@dptr,a
      000E59 A3               [12] 2693 	inc	dptr
      000E5A EF               [ 4] 2694 	mov	a,r7
      000E5B F0               [ 8] 2695 	movx	@dptr,a
                                   2696 ;	printf_large.c:603: if ( left_justify && (length < width))
      000E5C 90s00r00rB8      [12] 2697 	mov	dptr,#__print_format_left_justify_65536_113
      000E60 E0               [ 8] 2698 	movx	a,@dptr
      000E61 70 04            [12] 2699 	jnz	00703$
      000E63 02s00r0FrAF      [16] 2700 	ljmp	00174$
      000E67                       2701 00703$:
      000E67 90s00r00rD1      [12] 2702 	mov	dptr,#__print_format_sloc2_1_0
      000E6B C3               [ 4] 2703 	clr	c
      000E6C EC               [ 4] 2704 	mov	a,r4
      000E6D C5 F0            [ 8] 2705 	xch	a, b
      000E6F E0               [ 8] 2706 	movx	a,@dptr
      000E70 C5 F0            [ 8] 2707 	xch	a, b
      000E72 95 F0            [ 8] 2708 	subb	a,b
      000E74 ED               [ 4] 2709 	mov	a,r5
      000E75 C5 F0            [ 8] 2710 	xch	a, b
      000E77 A3               [12] 2711 	inc	dptr
      000E78 E0               [ 8] 2712 	movx	a,@dptr
      000E79 C5 F0            [ 8] 2713 	xch	a, b
      000E7B 95 F0            [ 8] 2714 	subb	a,b
      000E7D 40 04            [12] 2715 	jc	00704$
      000E7F 02s00r0FrAF      [16] 2716 	ljmp	00174$
      000E83                       2717 00704$:
                                   2718 ;	printf_large.c:605: width -= length;
      000E83 90s00r00rD1      [12] 2719 	mov	dptr,#__print_format_sloc2_1_0
      000E87 C3               [ 4] 2720 	clr	c
      000E88 E0               [ 8] 2721 	movx	a,@dptr
      000E89 9C               [ 4] 2722 	subb	a,r4
      000E8A FC               [ 4] 2723 	mov	r4,a
      000E8B A3               [12] 2724 	inc	dptr
      000E8C E0               [ 8] 2725 	movx	a,@dptr
      000E8D 9D               [ 4] 2726 	subb	a,r5
      000E8E FD               [ 4] 2727 	mov	r5,a
                                   2728 ;	printf_large.c:606: while( width-- != 0 )
      000E8F                       2729 00151$:
                                   2730 ;	genAssign: resultIsFar = FALSE
      000E8F 8C 06            [ 8] 2731 	mov	ar6,r4
      000E91 8D 07            [ 8] 2732 	mov	ar7,r5
      000E93 1C               [ 4] 2733 	dec	r4
      000E94 BC FF 01         [16] 2734 	cjne	r4,#0xff,00705$
      000E97 1D               [ 4] 2735 	dec	r5
      000E98                       2736 00705$:
      000E98 EE               [ 4] 2737 	mov	a,r6
      000E99 4F               [ 4] 2738 	orl	a,r7
      000E9A 70 04            [12] 2739 	jnz	00706$
      000E9C 02s00r0FrA6      [16] 2740 	ljmp	00328$
      000EA0                       2741 00706$:
                                   2742 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000EA0 C0 04            [ 8] 2743 	push	ar4
      000EA2 C0 05            [ 8] 2744 	push	ar5
      000EA4 75 82 20         [12] 2745 	mov	dpl,#0x20
      000EA7 12s00r00r00      [16] 2746 	lcall	__output_char
      000EAB D0 05            [ 8] 2747 	pop	ar5
      000EAD D0 04            [ 8] 2748 	pop	ar4
                                   2749 ;	printf_large.c:613: case 'P':
      000EAF 80 DE            [12] 2750 	sjmp 00151$
      000EB1                       2751 00157$:
                                   2752 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000EB1 90s00r00rB4      [12] 2753 	mov	dptr,#__print_format_PARM_4
                                   2754 ;	genAssign: resultIsFar = FALSE
      000EB5 E0               [ 8] 2755 	movx	a,@dptr
      000EB6 FE               [ 4] 2756 	mov	r6,a
      000EB7 A3               [12] 2757 	inc	dptr
      000EB8 E0               [ 8] 2758 	movx	a,@dptr
      000EB9 FF               [ 4] 2759 	mov	r7,a
      000EBA A3               [12] 2760 	inc	dptr
      000EBB E0               [ 8] 2761 	movx	a,@dptr
      000EBC F8               [ 4] 2762 	mov	r0,a
      000EBD A3               [12] 2763 	inc	dptr
      000EBE E0               [ 8] 2764 	movx	a,@dptr
      000EBF F9               [ 4] 2765 	mov	r1,a
      000EC0 EE               [ 4] 2766 	mov	a,r6
      000EC1 24 FC            [ 8] 2767 	add	a,#0xfc
      000EC3 FE               [ 4] 2768 	mov	r6,a
      000EC4 EF               [ 4] 2769 	mov	a,r7
      000EC5 34 FF            [ 8] 2770 	addc	a,#0xff
      000EC7 FF               [ 4] 2771 	mov	r7,a
      000EC8 E8               [ 4] 2772 	mov	a,r0
      000EC9 34 FF            [ 8] 2773 	addc	a,#0xff
      000ECB F8               [ 4] 2774 	mov	r0,a
                                   2775 ;	genAssign: resultIsFar = TRUE
      000ECC 90s00r00rB4      [12] 2776 	mov	dptr,#__print_format_PARM_4
      000ED0 EE               [ 4] 2777 	mov	a,r6
      000ED1 F0               [ 8] 2778 	movx	@dptr,a
      000ED2 A3               [12] 2779 	inc	dptr
      000ED3 EF               [ 4] 2780 	mov	a,r7
      000ED4 F0               [ 8] 2781 	movx	@dptr,a
      000ED5 A3               [12] 2782 	inc	dptr
      000ED6 E8               [ 4] 2783 	mov	a,r0
      000ED7 F0               [ 8] 2784 	movx	@dptr,a
      000ED8 A3               [12] 2785 	inc	dptr
      000ED9 E9               [ 4] 2786 	mov	a,r1
      000EDA F0               [ 8] 2787 	movx	@dptr,a
      000EDB 8E 82            [ 8] 2788 	mov	dpl,r6
      000EDD 8F 83            [ 8] 2789 	mov	dph,r7
      000EDF 88 93            [ 8] 2790 	mov	dpx,r0
      000EE1 89 F0            [ 8] 2791 	mov	b,r1
      000EE3 12s00r00r00      [16] 2792 	lcall	__gptrgetWord
      000EE7 FE               [ 4] 2793 	mov	r6,a
      000EE8 AF 9C            [ 8] 2794 	mov	r7,acc1
      000EEA A3               [12] 2795 	inc	dptr
      000EEB 12s00r00r00      [16] 2796 	lcall	__gptrgetWord
      000EEF F8               [ 4] 2797 	mov	r0,a
      000EF0 A9 9C            [ 8] 2798 	mov	r1,acc1
      000EF2 90s00r00r08      [12] 2799 	mov	dptr,#_value
      000EF6 EE               [ 4] 2800 	mov	a,r6
      000EF7 F0               [ 8] 2801 	movx	@dptr,a
      000EF8 A3               [12] 2802 	inc	dptr
      000EF9 EF               [ 4] 2803 	mov	a,r7
      000EFA F0               [ 8] 2804 	movx	@dptr,a
      000EFB A3               [12] 2805 	inc	dptr
      000EFC E8               [ 4] 2806 	mov	a,r0
      000EFD F0               [ 8] 2807 	movx	@dptr,a
      000EFE A3               [12] 2808 	inc	dptr
      000EFF E9               [ 4] 2809 	mov	a,r1
      000F00 F0               [ 8] 2810 	movx	@dptr,a
                                   2811 ;	printf_large.c:618: unsigned char memtype = value.byte[3];
      000F01 90s00r00r0B      [12] 2812 	mov	dptr,#(_value + 0x000003)
      000F05 E0               [ 8] 2813 	movx	a,@dptr
      000F06 FE               [ 4] 2814 	mov	r6,a
                                   2815 ;	genAssign: resultIsFar = TRUE
                                   2816 ;	printf_large.c:619: if (memtype >= 0x80)
      000F07 BE 80 00         [16] 2817 	cjne	r6,#0x80,00707$
      000F0A                       2818 00707$:
      000F0A 40 04            [12] 2819 	jc   00165$
      000F0C                       2820 00708$:
                                   2821 ;	printf_large.c:620: c = 'C';
                                   2822 ;	genAssign: resultIsFar = FALSE
      000F0C 7F 43            [ 8] 2823 	mov	r7,#0x43
      000F0E 80 14            [12] 2824 	sjmp 00166$
      000F10                       2825 00165$:
                                   2826 ;	printf_large.c:621: else if (memtype >= 0x60)
      000F10 BE 60 00         [16] 2827 	cjne	r6,#0x60,00709$
      000F13                       2828 00709$:
      000F13 40 04            [12] 2829 	jc   00162$
      000F15                       2830 00710$:
                                   2831 ;	printf_large.c:622: c = 'P';
                                   2832 ;	genAssign: resultIsFar = FALSE
      000F15 7F 50            [ 8] 2833 	mov	r7,#0x50
      000F17 80 0B            [12] 2834 	sjmp 00166$
      000F19                       2835 00162$:
                                   2836 ;	printf_large.c:623: else if (memtype >= 0x40)
      000F19 BE 40 00         [16] 2837 	cjne	r6,#0x40,00711$
      000F1C                       2838 00711$:
      000F1C 40 04            [12] 2839 	jc   00159$
      000F1E                       2840 00712$:
                                   2841 ;	printf_large.c:624: c = 'I';
                                   2842 ;	genAssign: resultIsFar = FALSE
      000F1E 7F 49            [ 8] 2843 	mov	r7,#0x49
      000F20 80 02            [12] 2844 	sjmp 00166$
      000F22                       2845 00159$:
                                   2846 ;	printf_large.c:626: c = 'X';
                                   2847 ;	genAssign: resultIsFar = FALSE
      000F22 7F 58            [ 8] 2848 	mov	r7,#0x58
      000F24                       2849 00166$:
                                   2850 ;	printf_large.c:628: OUTPUT_CHAR(c, p);
      000F24 8F 82            [ 8] 2851 	mov	dpl,r7
      000F26 12s00r00r00      [16] 2852 	lcall	__output_char
                                   2853 ;	printf_large.c:629: OUTPUT_CHAR(':', p);
      000F2A 75 82 3A         [12] 2854 	mov	dpl,#0x3a
      000F2D 12s00r00r00      [16] 2855 	lcall	__output_char
                                   2856 ;	printf_large.c:630: OUTPUT_CHAR('0', p);
      000F31 75 82 30         [12] 2857 	mov	dpl,#0x30
      000F34 12s00r00r00      [16] 2858 	lcall	__output_char
                                   2859 ;	printf_large.c:631: OUTPUT_CHAR('x', p);
      000F38 75 82 78         [12] 2860 	mov	dpl,#0x78
      000F3B 12s00r00r00      [16] 2861 	lcall	__output_char
                                   2862 ;	printf_large.c:632: OUTPUT_2DIGITS( value.byte[2] );
      000F3F 90s00r00r0A      [12] 2863 	mov	dptr,#(_value + 0x000002)
      000F43 E0               [ 8] 2864 	movx	a,@dptr
      000F44 FE               [ 4] 2865 	mov	r6,a
      000F45 8E 82            [ 8] 2866 	mov	dpl,r6
      000F47 12s00r00r6A      [16] 2867 	lcall	_output_2digits
                                   2868 ;	printf_large.c:633: OUTPUT_2DIGITS( value.byte[1] );
      000F4B 90s00r00r09      [12] 2869 	mov	dptr,#(_value + 0x000001)
      000F4F E0               [ 8] 2870 	movx	a,@dptr
      000F50 FE               [ 4] 2871 	mov	r6,a
      000F51 8E 82            [ 8] 2872 	mov	dpl,r6
      000F53 12s00r00r6A      [16] 2873 	lcall	_output_2digits
                                   2874 ;	printf_large.c:634: OUTPUT_2DIGITS( value.byte[0] );
      000F57 90s00r00r08      [12] 2875 	mov	dptr,#_value
      000F5B E0               [ 8] 2876 	movx	a,@dptr
      000F5C FE               [ 4] 2877 	mov	r6,a
      000F5D 8E 82            [ 8] 2878 	mov	dpl,r6
      000F5F 12s00r00r6A      [16] 2879 	lcall	_output_2digits
                                   2880 ;	printf_large.c:668: break;
                                   2881 ;	printf_large.c:671: case 'I':
      000F63 80 4A            [12] 2882 	sjmp 00174$
      000F65                       2883 00168$:
                                   2884 ;	printf_large.c:672: signed_argument = 1;
                                   2885 ;	genAssign: resultIsFar = TRUE
      000F65 90s00r00rBC      [12] 2886 	mov	dptr,#__print_format_signed_argument_65536_113
      000F69 74 01            [ 8] 2887 	mov	a,#0x01
      000F6B F0               [ 8] 2888 	movx	@dptr,a
                                   2889 ;	printf_large.c:673: radix = 10;
                                   2890 ;	genAssign: resultIsFar = TRUE
      000F6C 90s00r00rC0      [12] 2891 	mov	dptr,#__print_format_radix_65536_113
      000F70 74 0A            [ 8] 2892 	mov	a,#0x0a
      000F72 F0               [ 8] 2893 	movx	@dptr,a
                                   2894 ;	printf_large.c:674: break;
                                   2895 ;	printf_large.c:676: case 'O':
      000F73 80 3A            [12] 2896 	sjmp 00174$
      000F75                       2897 00169$:
                                   2898 ;	printf_large.c:677: radix = 8;
                                   2899 ;	genAssign: resultIsFar = TRUE
      000F75 90s00r00rC0      [12] 2900 	mov	dptr,#__print_format_radix_65536_113
      000F79 74 08            [ 8] 2901 	mov	a,#0x08
      000F7B F0               [ 8] 2902 	movx	@dptr,a
                                   2903 ;	printf_large.c:678: break;
                                   2904 ;	printf_large.c:680: case 'U':
      000F7C 80 31            [12] 2905 	sjmp 00174$
      000F7E                       2906 00170$:
                                   2907 ;	printf_large.c:681: radix = 10;
                                   2908 ;	genAssign: resultIsFar = TRUE
      000F7E 90s00r00rC0      [12] 2909 	mov	dptr,#__print_format_radix_65536_113
      000F82 74 0A            [ 8] 2910 	mov	a,#0x0a
      000F84 F0               [ 8] 2911 	movx	@dptr,a
                                   2912 ;	printf_large.c:682: break;
                                   2913 ;	printf_large.c:684: case 'X':
      000F85 80 28            [12] 2914 	sjmp 00174$
      000F87                       2915 00171$:
                                   2916 ;	printf_large.c:685: radix = 16;
                                   2917 ;	genAssign: resultIsFar = TRUE
      000F87 90s00r00rC0      [12] 2918 	mov	dptr,#__print_format_radix_65536_113
      000F8B 74 10            [ 8] 2919 	mov	a,#0x10
      000F8D F0               [ 8] 2920 	movx	@dptr,a
                                   2921 ;	printf_large.c:686: break;
                                   2922 ;	printf_large.c:688: case 'F':
      000F8E 80 1F            [12] 2923 	sjmp 00174$
      000F90                       2924 00172$:
                                   2925 ;	printf_large.c:689: float_argument=1;
                                   2926 ;	genAssign: resultIsFar = TRUE
      000F90 90s00r00rBF      [12] 2927 	mov	dptr,#__print_format_float_argument_65536_113
      000F94 74 01            [ 8] 2928 	mov	a,#0x01
      000F96 F0               [ 8] 2929 	movx	@dptr,a
                                   2930 ;	printf_large.c:690: break;
                                   2931 ;	printf_large.c:692: default:
      000F97 80 16            [12] 2932 	sjmp 00174$
      000F99                       2933 00173$:
                                   2934 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      000F99 90s00r00rD0      [12] 2935 	mov	dptr,#__print_format_sloc1_1_0
      000F9D E0               [ 8] 2936 	movx	a,@dptr
      000F9E F5 82            [ 8] 2937 	mov	dpl,a
      000FA0 12s00r00r00      [16] 2938 	lcall	__output_char
                                   2939 ;	printf_large.c:877: return charsOutputted;
                                   2940 ;	printf_large.c:696: }
      000FA4 80 09            [12] 2941 	sjmp 00174$
      000FA6                       2942 00328$:
                                   2943 ;	genAssign: resultIsFar = TRUE
      000FA6 90s00r00rD1      [12] 2944 	mov	dptr,#__print_format_sloc2_1_0
      000FAA EC               [ 4] 2945 	mov	a,r4
      000FAB F0               [ 8] 2946 	movx	@dptr,a
      000FAC A3               [12] 2947 	inc	dptr
      000FAD ED               [ 4] 2948 	mov	a,r5
      000FAE F0               [ 8] 2949 	movx	@dptr,a
      000FAF                       2950 00174$:
                                   2951 ;	printf_large.c:698: if (float_argument)
      000FAF 90s00r00rBF      [12] 2952 	mov	dptr,#__print_format_float_argument_65536_113
      000FB3 E0               [ 8] 2953 	movx	a,@dptr
      000FB4 70 04            [12] 2954 	jnz	00713$
      000FB6 02s00r10r67      [16] 2955 	ljmp	00237$
      000FBA                       2956 00713$:
                                   2957 ;	printf_large.c:700: value.f = va_arg(ap, float);
      000FBA 90s00r00rB4      [12] 2958 	mov	dptr,#__print_format_PARM_4
                                   2959 ;	genAssign: resultIsFar = FALSE
      000FBE E0               [ 8] 2960 	movx	a,@dptr
      000FBF FC               [ 4] 2961 	mov	r4,a
      000FC0 A3               [12] 2962 	inc	dptr
      000FC1 E0               [ 8] 2963 	movx	a,@dptr
      000FC2 FD               [ 4] 2964 	mov	r5,a
      000FC3 A3               [12] 2965 	inc	dptr
      000FC4 E0               [ 8] 2966 	movx	a,@dptr
      000FC5 FE               [ 4] 2967 	mov	r6,a
      000FC6 A3               [12] 2968 	inc	dptr
      000FC7 E0               [ 8] 2969 	movx	a,@dptr
      000FC8 FF               [ 4] 2970 	mov	r7,a
      000FC9 EC               [ 4] 2971 	mov	a,r4
      000FCA 24 FC            [ 8] 2972 	add	a,#0xfc
      000FCC FC               [ 4] 2973 	mov	r4,a
      000FCD ED               [ 4] 2974 	mov	a,r5
      000FCE 34 FF            [ 8] 2975 	addc	a,#0xff
      000FD0 FD               [ 4] 2976 	mov	r5,a
      000FD1 EE               [ 4] 2977 	mov	a,r6
      000FD2 34 FF            [ 8] 2978 	addc	a,#0xff
      000FD4 FE               [ 4] 2979 	mov	r6,a
                                   2980 ;	genAssign: resultIsFar = TRUE
      000FD5 90s00r00rB4      [12] 2981 	mov	dptr,#__print_format_PARM_4
      000FD9 EC               [ 4] 2982 	mov	a,r4
      000FDA F0               [ 8] 2983 	movx	@dptr,a
      000FDB A3               [12] 2984 	inc	dptr
      000FDC ED               [ 4] 2985 	mov	a,r5
      000FDD F0               [ 8] 2986 	movx	@dptr,a
      000FDE A3               [12] 2987 	inc	dptr
      000FDF EE               [ 4] 2988 	mov	a,r6
      000FE0 F0               [ 8] 2989 	movx	@dptr,a
      000FE1 A3               [12] 2990 	inc	dptr
      000FE2 EF               [ 4] 2991 	mov	a,r7
      000FE3 F0               [ 8] 2992 	movx	@dptr,a
      000FE4 8C 82            [ 8] 2993 	mov	dpl,r4
      000FE6 8D 83            [ 8] 2994 	mov	dph,r5
      000FE8 8E 93            [ 8] 2995 	mov	dpx,r6
      000FEA 8F F0            [ 8] 2996 	mov	b,r7
      000FEC 12s00r00r00      [16] 2997 	lcall	__gptrgetWord
      000FF0 FC               [ 4] 2998 	mov	r4,a
      000FF1 AD 9C            [ 8] 2999 	mov	r5,acc1
      000FF3 A3               [12] 3000 	inc	dptr
      000FF4 12s00r00r00      [16] 3001 	lcall	__gptrgetWord
      000FF8 FE               [ 4] 3002 	mov	r6,a
      000FF9 AF 9C            [ 8] 3003 	mov	r7,acc1
      000FFB 90s00r00r08      [12] 3004 	mov	dptr,#_value
      000FFF EC               [ 4] 3005 	mov	a,r4
      001000 F0               [ 8] 3006 	movx	@dptr,a
      001001 A3               [12] 3007 	inc	dptr
      001002 ED               [ 4] 3008 	mov	a,r5
      001003 F0               [ 8] 3009 	movx	@dptr,a
      001004 A3               [12] 3010 	inc	dptr
      001005 EE               [ 4] 3011 	mov	a,r6
      001006 F0               [ 8] 3012 	movx	@dptr,a
      001007 A3               [12] 3013 	inc	dptr
      001008 EF               [ 4] 3014 	mov	a,r7
      001009 F0               [ 8] 3015 	movx	@dptr,a
                                   3016 ;	printf_large.c:718: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      00100A 90s00r00rD1      [12] 3017 	mov	dptr,#__print_format_sloc2_1_0
      00100E 75 86 01         [12] 3018 	mov	dps, #1
      001011 90s00r00r0F      [12] 3019 	mov	dptr, #_output_float_PARM_2
      001015 15 86            [ 8] 3020 	dec	dps
      001017 E0               [ 8] 3021 	movx	a,@dptr
      001018 05 86            [ 8] 3022 	inc	dps
      00101A F0               [ 8] 3023 	movx	@dptr,a
      00101B 75 86 01         [12] 3024 	mov	dps, #1
      00101E 90s00r00r10      [12] 3025 	mov	dptr, #_output_float_PARM_3
      001022 15 86            [ 8] 3026 	dec	dps
      001024 90s00r00rC1      [12] 3027 	mov	dptr, #__print_format_decimals_65536_113
      001028 E0               [ 8] 3028 	movx	a,@dptr
      001029 05 86            [ 8] 3029 	inc	dps
      00102B F0               [ 8] 3030 	movx	@dptr,a
      00102C 75 86 00         [12] 3031 	mov	dps,#0
      00102F 90s00r00rB8      [12] 3032 	mov	dptr,#__print_format_left_justify_65536_113
                                   3033 ;	genAssign: resultIsFar = TRUE
      001033 E0               [ 8] 3034 	movx	a,@dptr
      001034 90s00r00r11      [12] 3035 	mov	dptr,#_output_float_PARM_4
      001038 F0               [ 8] 3036 	movx	@dptr,a
      001039 90s00r00rB9      [12] 3037 	mov	dptr,#__print_format_zero_padding_65536_113
                                   3038 ;	genAssign: resultIsFar = TRUE
      00103D E0               [ 8] 3039 	movx	a,@dptr
      00103E 90s00r00r12      [12] 3040 	mov	dptr,#_output_float_PARM_5
      001042 F0               [ 8] 3041 	movx	@dptr,a
      001043 90s00r00rBA      [12] 3042 	mov	dptr,#__print_format_prefix_sign_65536_113
                                   3043 ;	genAssign: resultIsFar = TRUE
      001047 E0               [ 8] 3044 	movx	a,@dptr
      001048 90s00r00r13      [12] 3045 	mov	dptr,#_output_float_PARM_6
      00104C F0               [ 8] 3046 	movx	@dptr,a
      00104D 90s00r00rBB      [12] 3047 	mov	dptr,#__print_format_prefix_space_65536_113
                                   3048 ;	genAssign: resultIsFar = TRUE
      001051 E0               [ 8] 3049 	movx	a,@dptr
      001052 90s00r00r14      [12] 3050 	mov	dptr,#_output_float_PARM_7
      001056 F0               [ 8] 3051 	movx	@dptr,a
      001057 8C 82            [ 8] 3052 	mov	dpl,r4
      001059 8D 83            [ 8] 3053 	mov	dph,r5
      00105B 8E 93            [ 8] 3054 	mov	dpx,r6
      00105D 8F F0            [ 8] 3055 	mov	b,r7
      00105F 12s00r00rE0      [16] 3056 	lcall	_output_float
      001063 02s00r09r06      [16] 3057 	ljmp	00242$
      001067                       3058 00237$:
                                   3059 ;	printf_large.c:723: else if (radix != 0)
      001067 90s00r00rC0      [12] 3060 	mov	dptr,#__print_format_radix_65536_113
      00106B E0               [ 8] 3061 	movx	a,@dptr
      00106C 70 04            [12] 3062 	jnz	00714$
      00106E 02s00r09r06      [16] 3063 	ljmp	00242$
      001072                       3064 00714$:
                                   3065 ;	printf_large.c:728: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                                   3066 ;	printf_large.c:731: if (char_argument)
      001072 90s00r00rBD      [12] 3067 	mov	dptr,#__print_format_char_argument_65536_113
      001076 E0               [ 8] 3068 	movx	a,@dptr
      001077 70 04            [12] 3069 	jnz	00715$
      001079 02s00r10rF9      [16] 3070 	ljmp	00183$
      00107D                       3071 00715$:
                                   3072 ;	printf_large.c:733: value.l = va_arg(ap, char);
      00107D 90s00r00rB4      [12] 3073 	mov	dptr,#__print_format_PARM_4
                                   3074 ;	genAssign: resultIsFar = FALSE
      001081 E0               [ 8] 3075 	movx	a,@dptr
      001082 FC               [ 4] 3076 	mov	r4,a
      001083 A3               [12] 3077 	inc	dptr
      001084 E0               [ 8] 3078 	movx	a,@dptr
      001085 FD               [ 4] 3079 	mov	r5,a
      001086 A3               [12] 3080 	inc	dptr
      001087 E0               [ 8] 3081 	movx	a,@dptr
      001088 FE               [ 4] 3082 	mov	r6,a
      001089 A3               [12] 3083 	inc	dptr
      00108A E0               [ 8] 3084 	movx	a,@dptr
      00108B FF               [ 4] 3085 	mov	r7,a
      00108C 1C               [ 4] 3086 	dec	r4
      00108D BC FF 05         [16] 3087 	cjne	r4,#0xff,00716$
      001090 1D               [ 4] 3088 	dec	r5
      001091 BD FF 01         [16] 3089 	cjne	r5,#0xff,00716$
      001094 1E               [ 4] 3090 	dec	r6
      001095                       3091 00716$:
                                   3092 ;	genAssign: resultIsFar = TRUE
      001095 90s00r00rB4      [12] 3093 	mov	dptr,#__print_format_PARM_4
      001099 EC               [ 4] 3094 	mov	a,r4
      00109A F0               [ 8] 3095 	movx	@dptr,a
      00109B A3               [12] 3096 	inc	dptr
      00109C ED               [ 4] 3097 	mov	a,r5
      00109D F0               [ 8] 3098 	movx	@dptr,a
      00109E A3               [12] 3099 	inc	dptr
      00109F EE               [ 4] 3100 	mov	a,r6
      0010A0 F0               [ 8] 3101 	movx	@dptr,a
      0010A1 A3               [12] 3102 	inc	dptr
      0010A2 EF               [ 4] 3103 	mov	a,r7
      0010A3 F0               [ 8] 3104 	movx	@dptr,a
      0010A4 8C 82            [ 8] 3105 	mov	dpl,r4
      0010A6 8D 83            [ 8] 3106 	mov	dph,r5
      0010A8 8E 93            [ 8] 3107 	mov	dpx,r6
      0010AA 8F F0            [ 8] 3108 	mov	b,r7
      0010AC 12s00r00r00      [16] 3109 	lcall	__gptrget
      0010B0 FC               [ 4] 3110 	mov	r4,a
      0010B1 7D 00            [ 8] 3111 	mov	r5,#0x00
      0010B3 7E 00            [ 8] 3112 	mov	r6,#0x00
      0010B5 7F 00            [ 8] 3113 	mov	r7,#0x00
      0010B7 90s00r00r08      [12] 3114 	mov	dptr,#_value
      0010BB EC               [ 4] 3115 	mov	a,r4
      0010BC F0               [ 8] 3116 	movx	@dptr,a
      0010BD A3               [12] 3117 	inc	dptr
      0010BE ED               [ 4] 3118 	mov	a,r5
      0010BF F0               [ 8] 3119 	movx	@dptr,a
      0010C0 A3               [12] 3120 	inc	dptr
      0010C1 EE               [ 4] 3121 	mov	a,r6
      0010C2 F0               [ 8] 3122 	movx	@dptr,a
      0010C3 A3               [12] 3123 	inc	dptr
      0010C4 EF               [ 4] 3124 	mov	a,r7
      0010C5 F0               [ 8] 3125 	movx	@dptr,a
                                   3126 ;	printf_large.c:734: if (!signed_argument)
      0010C6 90s00r00rBC      [12] 3127 	mov	dptr,#__print_format_signed_argument_65536_113
      0010CA E0               [ 8] 3128 	movx	a,@dptr
      0010CB 60 04            [12] 3129 	jz	00717$
      0010CD 02s00r11rC9      [16] 3130 	ljmp	00184$
      0010D1                       3131 00717$:
                                   3132 ;	printf_large.c:736: value.l &= 0xFF;
      0010D1 90s00r00r08      [12] 3133 	mov	dptr,#_value
      0010D5 E0               [ 8] 3134 	movx	a,@dptr
      0010D6 A3               [12] 3135 	inc	dptr
      0010D7 FC               [ 4] 3136 	mov	r4,a
      0010D8 E0               [ 8] 3137 	movx	a,@dptr
      0010D9 A3               [12] 3138 	inc	dptr
      0010DA FD               [ 4] 3139 	mov	r5,a
      0010DB E0               [ 8] 3140 	movx	a,@dptr
      0010DC A3               [12] 3141 	inc	dptr
      0010DD FE               [ 4] 3142 	mov	r6,a
      0010DE E0               [ 8] 3143 	movx	a,@dptr
      0010DF FF               [ 4] 3144 	mov	r7,a
      0010E0 7D 00            [ 8] 3145 	mov	r5,#0x00
      0010E2 7E 00            [ 8] 3146 	mov	r6,#0x00
      0010E4 7F 00            [ 8] 3147 	mov	r7,#0x00
      0010E6 90s00r00r08      [12] 3148 	mov	dptr,#_value
      0010EA EC               [ 4] 3149 	mov	a,r4
      0010EB F0               [ 8] 3150 	movx	@dptr,a
      0010EC A3               [12] 3151 	inc	dptr
      0010ED ED               [ 4] 3152 	mov	a,r5
      0010EE F0               [ 8] 3153 	movx	@dptr,a
      0010EF A3               [12] 3154 	inc	dptr
      0010F0 EE               [ 4] 3155 	mov	a,r6
      0010F1 F0               [ 8] 3156 	movx	@dptr,a
      0010F2 A3               [12] 3157 	inc	dptr
      0010F3 EF               [ 4] 3158 	mov	a,r7
      0010F4 F0               [ 8] 3159 	movx	@dptr,a
      0010F5 02s00r11rC9      [16] 3160 	ljmp	00184$
      0010F9                       3161 00183$:
                                   3162 ;	printf_large.c:739: else if (long_argument)
      0010F9 90s00r00rBE      [12] 3163 	mov	dptr,#__print_format_long_argument_65536_113
      0010FD E0               [ 8] 3164 	movx	a,@dptr
      0010FE 60 52            [12] 3165 	jz  00180$
      001100                       3166 00718$:
                                   3167 ;	printf_large.c:741: value.l = va_arg(ap, long);
      001100 90s00r00rB4      [12] 3168 	mov	dptr,#__print_format_PARM_4
                                   3169 ;	genAssign: resultIsFar = FALSE
      001104 E0               [ 8] 3170 	movx	a,@dptr
      001105 FC               [ 4] 3171 	mov	r4,a
      001106 A3               [12] 3172 	inc	dptr
      001107 E0               [ 8] 3173 	movx	a,@dptr
      001108 FD               [ 4] 3174 	mov	r5,a
      001109 A3               [12] 3175 	inc	dptr
      00110A E0               [ 8] 3176 	movx	a,@dptr
      00110B FE               [ 4] 3177 	mov	r6,a
      00110C A3               [12] 3178 	inc	dptr
      00110D E0               [ 8] 3179 	movx	a,@dptr
      00110E FF               [ 4] 3180 	mov	r7,a
      00110F EC               [ 4] 3181 	mov	a,r4
      001110 24 FC            [ 8] 3182 	add	a,#0xfc
      001112 FC               [ 4] 3183 	mov	r4,a
      001113 ED               [ 4] 3184 	mov	a,r5
      001114 34 FF            [ 8] 3185 	addc	a,#0xff
      001116 FD               [ 4] 3186 	mov	r5,a
      001117 EE               [ 4] 3187 	mov	a,r6
      001118 34 FF            [ 8] 3188 	addc	a,#0xff
      00111A FE               [ 4] 3189 	mov	r6,a
                                   3190 ;	genAssign: resultIsFar = TRUE
      00111B 90s00r00rB4      [12] 3191 	mov	dptr,#__print_format_PARM_4
      00111F EC               [ 4] 3192 	mov	a,r4
      001120 F0               [ 8] 3193 	movx	@dptr,a
      001121 A3               [12] 3194 	inc	dptr
      001122 ED               [ 4] 3195 	mov	a,r5
      001123 F0               [ 8] 3196 	movx	@dptr,a
      001124 A3               [12] 3197 	inc	dptr
      001125 EE               [ 4] 3198 	mov	a,r6
      001126 F0               [ 8] 3199 	movx	@dptr,a
      001127 A3               [12] 3200 	inc	dptr
      001128 EF               [ 4] 3201 	mov	a,r7
      001129 F0               [ 8] 3202 	movx	@dptr,a
      00112A 8C 82            [ 8] 3203 	mov	dpl,r4
      00112C 8D 83            [ 8] 3204 	mov	dph,r5
      00112E 8E 93            [ 8] 3205 	mov	dpx,r6
      001130 8F F0            [ 8] 3206 	mov	b,r7
      001132 12s00r00r00      [16] 3207 	lcall	__gptrgetWord
      001136 FC               [ 4] 3208 	mov	r4,a
      001137 AD 9C            [ 8] 3209 	mov	r5,acc1
      001139 A3               [12] 3210 	inc	dptr
      00113A 12s00r00r00      [16] 3211 	lcall	__gptrgetWord
      00113E FE               [ 4] 3212 	mov	r6,a
      00113F AF 9C            [ 8] 3213 	mov	r7,acc1
      001141 90s00r00r08      [12] 3214 	mov	dptr,#_value
      001145 EC               [ 4] 3215 	mov	a,r4
      001146 F0               [ 8] 3216 	movx	@dptr,a
      001147 A3               [12] 3217 	inc	dptr
      001148 ED               [ 4] 3218 	mov	a,r5
      001149 F0               [ 8] 3219 	movx	@dptr,a
      00114A A3               [12] 3220 	inc	dptr
      00114B EE               [ 4] 3221 	mov	a,r6
      00114C F0               [ 8] 3222 	movx	@dptr,a
      00114D A3               [12] 3223 	inc	dptr
      00114E EF               [ 4] 3224 	mov	a,r7
      00114F F0               [ 8] 3225 	movx	@dptr,a
      001150 80 77            [12] 3226 	sjmp 00184$
      001152                       3227 00180$:
                                   3228 ;	printf_large.c:745: value.l = va_arg(ap, int);
      001152 90s00r00rB4      [12] 3229 	mov	dptr,#__print_format_PARM_4
                                   3230 ;	genAssign: resultIsFar = FALSE
      001156 E0               [ 8] 3231 	movx	a,@dptr
      001157 FC               [ 4] 3232 	mov	r4,a
      001158 A3               [12] 3233 	inc	dptr
      001159 E0               [ 8] 3234 	movx	a,@dptr
      00115A FD               [ 4] 3235 	mov	r5,a
      00115B A3               [12] 3236 	inc	dptr
      00115C E0               [ 8] 3237 	movx	a,@dptr
      00115D FE               [ 4] 3238 	mov	r6,a
      00115E A3               [12] 3239 	inc	dptr
      00115F E0               [ 8] 3240 	movx	a,@dptr
      001160 FF               [ 4] 3241 	mov	r7,a
      001161 EC               [ 4] 3242 	mov	a,r4
      001162 24 FE            [ 8] 3243 	add	a,#0xfe
      001164 FC               [ 4] 3244 	mov	r4,a
      001165 ED               [ 4] 3245 	mov	a,r5
      001166 34 FF            [ 8] 3246 	addc	a,#0xff
      001168 FD               [ 4] 3247 	mov	r5,a
      001169 EE               [ 4] 3248 	mov	a,r6
      00116A 34 FF            [ 8] 3249 	addc	a,#0xff
      00116C FE               [ 4] 3250 	mov	r6,a
                                   3251 ;	genAssign: resultIsFar = TRUE
      00116D 90s00r00rB4      [12] 3252 	mov	dptr,#__print_format_PARM_4
      001171 EC               [ 4] 3253 	mov	a,r4
      001172 F0               [ 8] 3254 	movx	@dptr,a
      001173 A3               [12] 3255 	inc	dptr
      001174 ED               [ 4] 3256 	mov	a,r5
      001175 F0               [ 8] 3257 	movx	@dptr,a
      001176 A3               [12] 3258 	inc	dptr
      001177 EE               [ 4] 3259 	mov	a,r6
      001178 F0               [ 8] 3260 	movx	@dptr,a
      001179 A3               [12] 3261 	inc	dptr
      00117A EF               [ 4] 3262 	mov	a,r7
      00117B F0               [ 8] 3263 	movx	@dptr,a
      00117C 8C 82            [ 8] 3264 	mov	dpl,r4
      00117E 8D 83            [ 8] 3265 	mov	dph,r5
      001180 8E 93            [ 8] 3266 	mov	dpx,r6
      001182 8F F0            [ 8] 3267 	mov	b,r7
      001184 12s00r00r00      [16] 3268 	lcall	__gptrgetWord
      001188 FC               [ 4] 3269 	mov	r4,a
      001189 AD 9C            [ 8] 3270 	mov	r5,acc1
      00118B ED               [ 4] 3271 	mov	a,r5
      00118C 33               [ 4] 3272 	rlc	a
      00118D 95 E0            [ 8] 3273 	subb	a,acc
      00118F FE               [ 4] 3274 	mov	r6,a
      001190 FF               [ 4] 3275 	mov	r7,a
      001191 90s00r00r08      [12] 3276 	mov	dptr,#_value
      001195 EC               [ 4] 3277 	mov	a,r4
      001196 F0               [ 8] 3278 	movx	@dptr,a
      001197 A3               [12] 3279 	inc	dptr
      001198 ED               [ 4] 3280 	mov	a,r5
      001199 F0               [ 8] 3281 	movx	@dptr,a
      00119A A3               [12] 3282 	inc	dptr
      00119B EE               [ 4] 3283 	mov	a,r6
      00119C F0               [ 8] 3284 	movx	@dptr,a
      00119D A3               [12] 3285 	inc	dptr
      00119E EF               [ 4] 3286 	mov	a,r7
      00119F F0               [ 8] 3287 	movx	@dptr,a
                                   3288 ;	printf_large.c:746: if (!signed_argument)
      0011A0 90s00r00rBC      [12] 3289 	mov	dptr,#__print_format_signed_argument_65536_113
      0011A4 E0               [ 8] 3290 	movx	a,@dptr
      0011A5 70 22            [12] 3291 	jnz  00184$
      0011A7                       3292 00719$:
                                   3293 ;	printf_large.c:748: value.l &= 0xFFFF;
      0011A7 90s00r00r08      [12] 3294 	mov	dptr,#_value
      0011AB E0               [ 8] 3295 	movx	a,@dptr
      0011AC A3               [12] 3296 	inc	dptr
      0011AD FC               [ 4] 3297 	mov	r4,a
      0011AE E0               [ 8] 3298 	movx	a,@dptr
      0011AF A3               [12] 3299 	inc	dptr
      0011B0 FD               [ 4] 3300 	mov	r5,a
      0011B1 E0               [ 8] 3301 	movx	a,@dptr
      0011B2 A3               [12] 3302 	inc	dptr
      0011B3 FE               [ 4] 3303 	mov	r6,a
      0011B4 E0               [ 8] 3304 	movx	a,@dptr
      0011B5 FF               [ 4] 3305 	mov	r7,a
      0011B6 7E 00            [ 8] 3306 	mov	r6,#0x00
      0011B8 7F 00            [ 8] 3307 	mov	r7,#0x00
      0011BA 90s00r00r08      [12] 3308 	mov	dptr,#_value
      0011BE EC               [ 4] 3309 	mov	a,r4
      0011BF F0               [ 8] 3310 	movx	@dptr,a
      0011C0 A3               [12] 3311 	inc	dptr
      0011C1 ED               [ 4] 3312 	mov	a,r5
      0011C2 F0               [ 8] 3313 	movx	@dptr,a
      0011C3 A3               [12] 3314 	inc	dptr
      0011C4 EE               [ 4] 3315 	mov	a,r6
      0011C5 F0               [ 8] 3316 	movx	@dptr,a
      0011C6 A3               [12] 3317 	inc	dptr
      0011C7 EF               [ 4] 3318 	mov	a,r7
      0011C8 F0               [ 8] 3319 	movx	@dptr,a
      0011C9                       3320 00184$:
                                   3321 ;	printf_large.c:752: if ( signed_argument )
      0011C9 90s00r00rBC      [12] 3322 	mov	dptr,#__print_format_signed_argument_65536_113
      0011CD E0               [ 8] 3323 	movx	a,@dptr
      0011CE 60 45            [12] 3324 	jz  00189$
      0011D0                       3325 00720$:
                                   3326 ;	printf_large.c:754: if (value.l < 0)
      0011D0 90s00r00r08      [12] 3327 	mov	dptr,#_value
      0011D4 E0               [ 8] 3328 	movx	a,@dptr
      0011D5 A3               [12] 3329 	inc	dptr
      0011D6 FC               [ 4] 3330 	mov	r4,a
      0011D7 E0               [ 8] 3331 	movx	a,@dptr
      0011D8 A3               [12] 3332 	inc	dptr
      0011D9 FD               [ 4] 3333 	mov	r5,a
      0011DA E0               [ 8] 3334 	movx	a,@dptr
      0011DB A3               [12] 3335 	inc	dptr
      0011DC FE               [ 4] 3336 	mov	r6,a
      0011DD E0               [ 8] 3337 	movx	a,@dptr
      0011DE FF               [ 4] 3338 	mov  r7,a
      0011DF 30 E7 2D         [12] 3339 	jnb  acc[7],00186$
      0011E2                       3340 00721$:
                                   3341 ;	printf_large.c:755: value.l = -value.l;
      0011E2 90s00r00r08      [12] 3342 	mov	dptr,#_value
      0011E6 E0               [ 8] 3343 	movx	a,@dptr
      0011E7 A3               [12] 3344 	inc	dptr
      0011E8 FC               [ 4] 3345 	mov	r4,a
      0011E9 E0               [ 8] 3346 	movx	a,@dptr
      0011EA A3               [12] 3347 	inc	dptr
      0011EB FD               [ 4] 3348 	mov	r5,a
      0011EC E0               [ 8] 3349 	movx	a,@dptr
      0011ED A3               [12] 3350 	inc	dptr
      0011EE FE               [ 4] 3351 	mov	r6,a
      0011EF E0               [ 8] 3352 	movx	a,@dptr
      0011F0 FF               [ 4] 3353 	mov	r7,a
      0011F1 C3               [ 4] 3354 	clr	c
      0011F2 E4               [ 4] 3355 	clr	a
      0011F3 9C               [ 4] 3356 	subb	a,r4
      0011F4 FC               [ 4] 3357 	mov	r4,a
      0011F5 E4               [ 4] 3358 	clr	a
      0011F6 9D               [ 4] 3359 	subb	a,r5
      0011F7 FD               [ 4] 3360 	mov	r5,a
      0011F8 E4               [ 4] 3361 	clr	a
      0011F9 9E               [ 4] 3362 	subb	a,r6
      0011FA FE               [ 4] 3363 	mov	r6,a
      0011FB E4               [ 4] 3364 	clr	a
      0011FC 9F               [ 4] 3365 	subb	a,r7
      0011FD FF               [ 4] 3366 	mov	r7,a
      0011FE 90s00r00r08      [12] 3367 	mov	dptr,#_value
      001202 EC               [ 4] 3368 	mov	a,r4
      001203 F0               [ 8] 3369 	movx	@dptr,a
      001204 A3               [12] 3370 	inc	dptr
      001205 ED               [ 4] 3371 	mov	a,r5
      001206 F0               [ 8] 3372 	movx	@dptr,a
      001207 A3               [12] 3373 	inc	dptr
      001208 EE               [ 4] 3374 	mov	a,r6
      001209 F0               [ 8] 3375 	movx	@dptr,a
      00120A A3               [12] 3376 	inc	dptr
      00120B EF               [ 4] 3377 	mov	a,r7
      00120C F0               [ 8] 3378 	movx	@dptr,a
      00120D 80 06            [12] 3379 	sjmp 00189$
      00120F                       3380 00186$:
                                   3381 ;	printf_large.c:757: signed_argument = 0;
                                   3382 ;	genAssign: resultIsFar = TRUE
      00120F 90s00r00rBC      [12] 3383 	mov	dptr,#__print_format_signed_argument_65536_113
      001213 E4               [ 4] 3384 	clr	a
      001214 F0               [ 8] 3385 	movx	@dptr,a
      001215                       3386 00189$:
                                   3387 ;	printf_large.c:761: lsd = 1;
                                   3388 ;	genAssign: resultIsFar = FALSE
      001215 7A 01            [ 8] 3389 	mov	r2,#0x01
                                   3390 ;	printf_large.c:763: do {
                                   3391 ;	genAssign: resultIsFar = FALSE
      001217 7DrC8            [ 8] 3392 	mov	r5,#(__print_format_store_262144_135 + 0x000005)
      001219 7Es00            [ 8] 3393 	mov	r6,#((__print_format_store_262144_135 + 0x000005) >> 8)
      00121B 7Fs00            [ 8] 3394 	mov	r7,#((__print_format_store_262144_135 + 0x000005) >> 16)
                                   3395 ;	genAssign: resultIsFar = TRUE
      00121D 90s00r00rCC      [12] 3396 	mov	dptr,#__print_format_sloc0_1_0
      001221 E4               [ 4] 3397 	clr	a
      001222 F0               [ 8] 3398 	movx	@dptr,a
      001223 A3               [12] 3399 	inc	dptr
      001224 F0               [ 8] 3400 	movx	@dptr,a
      001225                       3401 00193$:
                                   3402 ;	printf_large.c:764: value.byte[4] = 0;
      001225 90s00r00r0C      [12] 3403 	mov	dptr,#(_value + 0x000004)
      001229 E4               [ 4] 3404 	clr	a
      00122A F0               [ 8] 3405 	movx	@dptr,a
                                   3406 ;	printf_large.c:768: calculate_digit(radix);
      00122B C0 02            [ 8] 3407 	push	ar2
      00122D C0 05            [ 8] 3408 	push	ar5
      00122F C0 06            [ 8] 3409 	push	ar6
      001231 C0 07            [ 8] 3410 	push	ar7
      001233 90s00r00rC0      [12] 3411 	mov	dptr,#__print_format_radix_65536_113
      001237 E0               [ 8] 3412 	movx	a,@dptr
      001238 F5 82            [ 8] 3413 	mov	dpl,a
      00123A 12s00r00r85      [16] 3414 	lcall	_calculate_digit
      00123E D0 07            [ 8] 3415 	pop	ar7
      001240 D0 06            [ 8] 3416 	pop	ar6
      001242 D0 05            [ 8] 3417 	pop	ar5
      001244 D0 02            [ 8] 3418 	pop	ar2
                                   3419 ;	printf_large.c:770: if (!lsd)
      001246 EA               [ 4] 3420 	mov	a,r2
      001247 70 33            [12] 3421 	jnz  00191$
      001249                       3422 00722$:
                                   3423 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      001249 90s00r00r0C      [12] 3424 	mov	dptr,#(_value + 0x000004)
      00124D E0               [ 8] 3425 	movx	a,@dptr
      00124E FB               [ 4] 3426 	mov  r3,a
      00124F C4               [ 4] 3427 	swap	a
      001250 54 F0            [ 8] 3428 	anl	a,#0xf0
      001252 FB               [ 4] 3429 	mov	r3,a
      001253 90s00r00r0C      [12] 3430 	mov	dptr,#(_value + 0x000004)
      001257 E0               [ 8] 3431 	movx	a,@dptr
      001258 FC               [ 4] 3432 	mov  r4,a
      001259 C4               [ 4] 3433 	swap	a
      00125A 54 0F            [ 8] 3434 	anl	a,#0x0f
      00125C FC               [ 4] 3435 	mov  r4,a
      00125D 42 03            [ 8] 3436 	orl	ar3,a
      00125F 8D 82            [ 8] 3437 	mov	dpl,r5
      001261 8E 83            [ 8] 3438 	mov	dph,r6
      001263 8F 93            [ 8] 3439 	mov	dpx,r7
      001265 E0               [ 8] 3440 	movx	a,@dptr
      001266 FC               [ 4] 3441 	mov  r4,a
      001267 42 03            [ 8] 3442 	orl	ar3,a
      001269 8D 82            [ 8] 3443 	mov	dpl,r5
      00126B 8E 83            [ 8] 3444 	mov	dph,r6
      00126D 8F 93            [ 8] 3445 	mov	dpx,r7
      00126F EB               [ 4] 3446 	mov	a,r3
      001270 F0               [ 8] 3447 	movx	@dptr,a
                                   3448 ;	printf_large.c:773: pstore--;
      001271 1D               [ 4] 3449 	dec	r5
      001272 BD FF 05         [16] 3450 	cjne	r5,#0xff,00723$
      001275 1E               [ 4] 3451 	dec	r6
      001276 BE FF 01         [16] 3452 	cjne	r6,#0xff,00723$
      001279 1F               [ 4] 3453 	dec	r7
      00127A                       3454 00723$:
      00127A 80 0D            [12] 3455 	sjmp 00192$
      00127C                       3456 00191$:
                                   3457 ;	printf_large.c:777: *pstore = value.byte[4];
      00127C 90s00r00r0C      [12] 3458 	mov	dptr,#(_value + 0x000004)
      001280 E0               [ 8] 3459 	movx	a,@dptr
      001281 FC               [ 4] 3460 	mov  r4,a
      001282 8D 82            [ 8] 3461 	mov  dpl,r5
      001284 8E 83            [ 8] 3462 	mov  dph,r6
      001286 8F 93            [ 8] 3463 	mov  dpx,r7
      001288 F0               [ 8] 3464 	movx	@dptr,a
      001289                       3465 00192$:
                                   3466 ;	printf_large.c:779: length++;
      001289 90s00r00rCC      [12] 3467 	mov	dptr,#__print_format_sloc0_1_0
      00128D E0               [ 8] 3468 	movx	a,@dptr
      00128E 24 01            [ 8] 3469 	add	a,#0x01
      001290 F0               [ 8] 3470 	movx	@dptr,a
      001291 A3               [12] 3471 	inc	dptr
      001292 E0               [ 8] 3472 	movx	a,@dptr
      001293 34 00            [ 8] 3473 	addc	a,#0x00
      001295 F0               [ 8] 3474 	movx	@dptr,a
                                   3475 ;	printf_large.c:780: lsd = !lsd;
      001296 EA               [ 4] 3476 	mov	a,r2
      001297 B4 01 00         [16] 3477 	cjne	a,#0x01,00724$
      00129A                       3478 00724$:
      00129A E4               [ 4] 3479 	clr	a
      00129B 33               [ 4] 3480 	rlc	a
      00129C FA               [ 4] 3481 	mov	r2,a
                                   3482 ;	printf_large.c:781: } while( value.ul );
      00129D 90s00r00r08      [12] 3483 	mov	dptr,#_value
      0012A1 E0               [ 8] 3484 	movx	a,@dptr
      0012A2 A3               [12] 3485 	inc	dptr
      0012A3 FC               [ 4] 3486 	mov	r4,a
      0012A4 E0               [ 8] 3487 	movx	a,@dptr
      0012A5 A3               [12] 3488 	inc	dptr
      0012A6 FB               [ 4] 3489 	mov	r3,a
      0012A7 E0               [ 8] 3490 	movx	a,@dptr
      0012A8 A3               [12] 3491 	inc	dptr
      0012A9 F8               [ 4] 3492 	mov	r0,a
      0012AA E0               [ 8] 3493 	movx	a,@dptr
      0012AB F9               [ 4] 3494 	mov	r1,a
      0012AC EC               [ 4] 3495 	mov	a,r4
      0012AD 4B               [ 4] 3496 	orl	a,r3
      0012AE 48               [ 4] 3497 	orl	a,r0
      0012AF 49               [ 4] 3498 	orl	a,r1
      0012B0 60 04            [12] 3499 	jz	00725$
      0012B2 02s00r12r25      [16] 3500 	ljmp	00193$
      0012B6                       3501 00725$:
                                   3502 ;	printf_large.c:783: if (width == 0)
                                   3503 ;	genAssign: resultIsFar = TRUE
      0012B6 90s00r00rC9      [12] 3504 	mov	dptr,#__print_format_pstore_262144_135
      0012BA ED               [ 4] 3505 	mov	a,r5
      0012BB F0               [ 8] 3506 	movx	@dptr,a
      0012BC A3               [12] 3507 	inc	dptr
      0012BD EE               [ 4] 3508 	mov	a,r6
      0012BE F0               [ 8] 3509 	movx	@dptr,a
      0012BF A3               [12] 3510 	inc	dptr
      0012C0 EF               [ 4] 3511 	mov	a,r7
      0012C1 F0               [ 8] 3512 	movx	@dptr,a
      0012C2 90s00r00rCC      [12] 3513 	mov	dptr,#__print_format_sloc0_1_0
                                   3514 ;	genAssign: resultIsFar = TRUE
      0012C6 E0               [ 8] 3515 	movx	a,@dptr
      0012C7 FE               [ 4] 3516 	mov	r6,a
      0012C8 A3               [12] 3517 	inc	dptr
      0012C9 E0               [ 8] 3518 	movx	a,@dptr
      0012CA FF               [ 4] 3519 	mov	r7,a
      0012CB 90s00r00rD1      [12] 3520 	mov	dptr,#__print_format_sloc2_1_0
      0012CF E0               [ 8] 3521 	movx	a,@dptr
      0012D0 F5 F0            [ 8] 3522 	mov	b,a
      0012D2 A3               [12] 3523 	inc	dptr
      0012D3 E0               [ 8] 3524 	movx	a,@dptr
      0012D4 45 F0            [ 8] 3525 	orl	a,b
      0012D6 70 0A            [12] 3526 	jnz  00197$
      0012D8                       3527 00726$:
                                   3528 ;	printf_large.c:788: width = 1;
                                   3529 ;	genAssign: resultIsFar = TRUE
      0012D8 90s00r00rD1      [12] 3530 	mov	dptr,#__print_format_sloc2_1_0
      0012DC 74 01            [ 8] 3531 	mov	a,#0x01
      0012DE F0               [ 8] 3532 	movx	@dptr,a
      0012DF E4               [ 4] 3533 	clr	a
      0012E0 A3               [12] 3534 	inc	dptr
      0012E1 F0               [ 8] 3535 	movx	@dptr,a
      0012E2                       3536 00197$:
                                   3537 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      0012E2 90s00r00rB9      [12] 3538 	mov	dptr,#__print_format_zero_padding_65536_113
      0012E6 E0               [ 8] 3539 	movx	a,@dptr
      0012E7 70 47            [12] 3540 	jnz  00202$
      0012E9                       3541 00727$:
      0012E9 90s00r00rB8      [12] 3542 	mov	dptr,#__print_format_left_justify_65536_113
      0012ED E0               [ 8] 3543 	movx	a,@dptr
      0012EE 70 40            [12] 3544 	jnz  00202$
      0012F0                       3545 00728$:
                                   3546 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      0012F0 90s00r00rD1      [12] 3547 	mov	dptr,#__print_format_sloc2_1_0
                                   3548 ;	genAssign: resultIsFar = FALSE
      0012F4 E0               [ 8] 3549 	movx	a,@dptr
      0012F5 F8               [ 4] 3550 	mov	r0,a
      0012F6 A3               [12] 3551 	inc	dptr
      0012F7 E0               [ 8] 3552 	movx	a,@dptr
      0012F8 F9               [ 4] 3553 	mov	r1,a
      0012F9                       3554 00198$:
      0012F9 8E 03            [ 8] 3555 	mov	ar3,r6
      0012FB 0B               [ 4] 3556 	inc	r3
      0012FC 7C 00            [ 8] 3557 	mov	r4,#0x00
      0012FE C3               [ 4] 3558 	clr	c
      0012FF EB               [ 4] 3559 	mov	a,r3
      001300 98               [ 4] 3560 	subb	a,r0
      001301 EC               [ 4] 3561 	mov	a,r4
      001302 99               [ 4] 3562 	subb	a,r1
      001303 50 22            [12] 3563 	jnc  00330$
      001305                       3564 00729$:
                                   3565 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      001305 C0 02            [ 8] 3566 	push	ar2
      001307 C0 06            [ 8] 3567 	push	ar6
      001309 C0 07            [ 8] 3568 	push	ar7
      00130B C0 00            [ 8] 3569 	push	ar0
      00130D C0 01            [ 8] 3570 	push	ar1
      00130F 75 82 20         [12] 3571 	mov	dpl,#0x20
      001312 12s00r00r00      [16] 3572 	lcall	__output_char
      001316 D0 01            [ 8] 3573 	pop	ar1
      001318 D0 00            [ 8] 3574 	pop	ar0
      00131A D0 07            [ 8] 3575 	pop	ar7
      00131C D0 06            [ 8] 3576 	pop	ar6
      00131E D0 02            [ 8] 3577 	pop	ar2
                                   3578 ;	printf_large.c:797: width--;
      001320 18               [ 4] 3579 	dec	r0
      001321 B8 FF 01         [16] 3580 	cjne	r0,#0xff,00730$
      001324 19               [ 4] 3581 	dec	r1
      001325                       3582 00730$:
      001325 80 D2            [12] 3583 	sjmp 00198$
      001327                       3584 00330$:
                                   3585 ;	genAssign: resultIsFar = TRUE
      001327 90s00r00rD1      [12] 3586 	mov	dptr,#__print_format_sloc2_1_0
      00132B E8               [ 4] 3587 	mov	a,r0
      00132C F0               [ 8] 3588 	movx	@dptr,a
      00132D A3               [12] 3589 	inc	dptr
      00132E E9               [ 4] 3590 	mov	a,r1
      00132F F0               [ 8] 3591 	movx	@dptr,a
      001330                       3592 00202$:
                                   3593 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      001330 90s00r00rBC      [12] 3594 	mov	dptr,#__print_format_signed_argument_65536_113
      001334 E0               [ 8] 3595 	movx	a,@dptr
      001335 60 22            [12] 3596 	jz  00212$
      001337                       3597 00731$:
                                   3598 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      001337 C0 02            [ 8] 3599 	push	ar2
      001339 C0 06            [ 8] 3600 	push	ar6
      00133B C0 07            [ 8] 3601 	push	ar7
      00133D 75 82 2D         [12] 3602 	mov	dpl,#0x2d
      001340 12s00r00r00      [16] 3603 	lcall	__output_char
      001344 D0 07            [ 8] 3604 	pop	ar7
      001346 D0 06            [ 8] 3605 	pop	ar6
      001348 D0 02            [ 8] 3606 	pop	ar2
                                   3607 ;	printf_large.c:805: width--;
      00134A 90s00r00rD1      [12] 3608 	mov	dptr,#__print_format_sloc2_1_0
      00134E E0               [ 8] 3609 	movx	a,@dptr
      00134F 24 FF            [ 8] 3610 	add	a,#0xff
      001351 F0               [ 8] 3611 	movx	@dptr,a
      001352 A3               [12] 3612 	inc	dptr
      001353 E0               [ 8] 3613 	movx	a,@dptr
      001354 34 FF            [ 8] 3614 	addc	a,#0xff
      001356 F0               [ 8] 3615 	movx	@dptr,a
      001357 80 54            [12] 3616 	sjmp 00213$
      001359                       3617 00212$:
                                   3618 ;	printf_large.c:807: else if (length != 0)
      001359 EE               [ 4] 3619 	mov	a,r6
      00135A 4F               [ 4] 3620 	orl	a,r7
      00135B 60 50            [12] 3621 	jz  00213$
      00135D                       3622 00732$:
                                   3623 ;	printf_large.c:810: if (prefix_sign)
      00135D 90s00r00rBA      [12] 3624 	mov	dptr,#__print_format_prefix_sign_65536_113
      001361 E0               [ 8] 3625 	movx	a,@dptr
      001362 60 22            [12] 3626 	jz  00207$
      001364                       3627 00733$:
                                   3628 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      001364 C0 02            [ 8] 3629 	push	ar2
      001366 C0 06            [ 8] 3630 	push	ar6
      001368 C0 07            [ 8] 3631 	push	ar7
      00136A 75 82 2B         [12] 3632 	mov	dpl,#0x2b
      00136D 12s00r00r00      [16] 3633 	lcall	__output_char
      001371 D0 07            [ 8] 3634 	pop	ar7
      001373 D0 06            [ 8] 3635 	pop	ar6
      001375 D0 02            [ 8] 3636 	pop	ar2
                                   3637 ;	printf_large.c:814: width--;
      001377 90s00r00rD1      [12] 3638 	mov	dptr,#__print_format_sloc2_1_0
      00137B E0               [ 8] 3639 	movx	a,@dptr
      00137C 24 FF            [ 8] 3640 	add	a,#0xff
      00137E F0               [ 8] 3641 	movx	@dptr,a
      00137F A3               [12] 3642 	inc	dptr
      001380 E0               [ 8] 3643 	movx	a,@dptr
      001381 34 FF            [ 8] 3644 	addc	a,#0xff
      001383 F0               [ 8] 3645 	movx	@dptr,a
      001384 80 27            [12] 3646 	sjmp 00213$
      001386                       3647 00207$:
                                   3648 ;	printf_large.c:816: else if (prefix_space)
      001386 90s00r00rBB      [12] 3649 	mov	dptr,#__print_format_prefix_space_65536_113
      00138A E0               [ 8] 3650 	movx	a,@dptr
      00138B 60 20            [12] 3651 	jz  00213$
      00138D                       3652 00734$:
                                   3653 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      00138D C0 02            [ 8] 3654 	push	ar2
      00138F C0 06            [ 8] 3655 	push	ar6
      001391 C0 07            [ 8] 3656 	push	ar7
      001393 75 82 20         [12] 3657 	mov	dpl,#0x20
      001396 12s00r00r00      [16] 3658 	lcall	__output_char
      00139A D0 07            [ 8] 3659 	pop	ar7
      00139C D0 06            [ 8] 3660 	pop	ar6
      00139E D0 02            [ 8] 3661 	pop	ar2
                                   3662 ;	printf_large.c:820: width--;
      0013A0 90s00r00rD1      [12] 3663 	mov	dptr,#__print_format_sloc2_1_0
      0013A4 E0               [ 8] 3664 	movx	a,@dptr
      0013A5 24 FF            [ 8] 3665 	add	a,#0xff
      0013A7 F0               [ 8] 3666 	movx	@dptr,a
      0013A8 A3               [12] 3667 	inc	dptr
      0013A9 E0               [ 8] 3668 	movx	a,@dptr
      0013AA 34 FF            [ 8] 3669 	addc	a,#0xff
      0013AC F0               [ 8] 3670 	movx	@dptr,a
      0013AD                       3671 00213$:
                                   3672 ;	printf_large.c:825: if (!left_justify)
      0013AD 90s00r00rB8      [12] 3673 	mov	dptr,#__print_format_left_justify_65536_113
      0013B1 E0               [ 8] 3674 	movx	a,@dptr
      0013B2 70 46            [12] 3675 	jnz  00221$
      0013B4                       3676 00735$:
                                   3677 ;	printf_large.c:827: while ( width-- > length )
      0013B4 90s00r00rD1      [12] 3678 	mov	dptr,#__print_format_sloc2_1_0
                                   3679 ;	genAssign: resultIsFar = FALSE
      0013B8 E0               [ 8] 3680 	movx	a,@dptr
      0013B9 F8               [ 4] 3681 	mov	r0,a
      0013BA A3               [12] 3682 	inc	dptr
      0013BB E0               [ 8] 3683 	movx	a,@dptr
      0013BC F9               [ 4] 3684 	mov	r1,a
      0013BD                       3685 00214$:
                                   3686 ;	genAssign: resultIsFar = FALSE
      0013BD 88 03            [ 8] 3687 	mov	ar3,r0
      0013BF 89 04            [ 8] 3688 	mov	ar4,r1
      0013C1 18               [ 4] 3689 	dec	r0
      0013C2 B8 FF 01         [16] 3690 	cjne	r0,#0xff,00736$
      0013C5 19               [ 4] 3691 	dec	r1
      0013C6                       3692 00736$:
      0013C6 C3               [ 4] 3693 	clr	c
      0013C7 EE               [ 4] 3694 	mov	a,r6
      0013C8 9B               [ 4] 3695 	subb	a,r3
      0013C9 EF               [ 4] 3696 	mov	a,r7
      0013CA 9C               [ 4] 3697 	subb	a,r4
      0013CB 50 5D            [12] 3698 	jnc  00331$
      0013CD                       3699 00737$:
                                   3700 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0013CD 90s00r00rB9      [12] 3701 	mov	dptr,#__print_format_zero_padding_65536_113
      0013D1 E0               [ 8] 3702 	movx	a,@dptr
      0013D2 60 06            [12] 3703 	jz  00247$
      0013D4                       3704 00738$:
                                   3705 ;	genAssign: resultIsFar = FALSE
      0013D4 7B 30            [ 8] 3706 	mov	r3,#0x30
      0013D6 7C 00            [ 8] 3707 	mov	r4,#0x00
      0013D8 80 04            [12] 3708 	sjmp 00248$
      0013DA                       3709 00247$:
                                   3710 ;	genAssign: resultIsFar = FALSE
      0013DA 7B 20            [ 8] 3711 	mov	r3,#0x20
      0013DC 7C 00            [ 8] 3712 	mov	r4,#0x00
      0013DE                       3713 00248$:
      0013DE C0 02            [ 8] 3714 	push	ar2
      0013E0 C0 06            [ 8] 3715 	push	ar6
      0013E2 C0 07            [ 8] 3716 	push	ar7
      0013E4 C0 00            [ 8] 3717 	push	ar0
      0013E6 C0 01            [ 8] 3718 	push	ar1
      0013E8 8B 82            [ 8] 3719 	mov	dpl,r3
      0013EA 12s00r00r00      [16] 3720 	lcall	__output_char
      0013EE D0 01            [ 8] 3721 	pop	ar1
      0013F0 D0 00            [ 8] 3722 	pop	ar0
      0013F2 D0 07            [ 8] 3723 	pop	ar7
      0013F4 D0 06            [ 8] 3724 	pop	ar6
      0013F6 D0 02            [ 8] 3725 	pop	ar2
      0013F8 80 C3            [12] 3726 	sjmp 00214$
      0013FA                       3727 00221$:
                                   3728 ;	printf_large.c:835: if (width > length)
      0013FA 90s00r00rD1      [12] 3729 	mov	dptr,#__print_format_sloc2_1_0
      0013FE C3               [ 4] 3730 	clr	c
      0013FF EE               [ 4] 3731 	mov	a,r6
      001400 C5 F0            [ 8] 3732 	xch	a, b
      001402 E0               [ 8] 3733 	movx	a,@dptr
      001403 C5 F0            [ 8] 3734 	xch	a, b
      001405 95 F0            [ 8] 3735 	subb	a,b
      001407 EF               [ 4] 3736 	mov	a,r7
      001408 C5 F0            [ 8] 3737 	xch	a, b
      00140A A3               [12] 3738 	inc	dptr
      00140B E0               [ 8] 3739 	movx	a,@dptr
      00140C C5 F0            [ 8] 3740 	xch	a, b
      00140E 95 F0            [ 8] 3741 	subb	a,b
      001410 50 0E            [12] 3742 	jnc  00218$
      001412                       3743 00739$:
                                   3744 ;	printf_large.c:836: width -= length;
      001412 90s00r00rD1      [12] 3745 	mov	dptr,#__print_format_sloc2_1_0
      001416 C3               [ 4] 3746 	clr	c
      001417 E0               [ 8] 3747 	movx	a,@dptr
      001418 9E               [ 4] 3748 	subb	a,r6
      001419 F0               [ 8] 3749 	movx	@dptr,a
      00141A A3               [12] 3750 	inc	dptr
      00141B E0               [ 8] 3751 	movx	a,@dptr
      00141C 9F               [ 4] 3752 	subb	a,r7
      00141D F0               [ 8] 3753 	movx	@dptr,a
      00141E 80 13            [12] 3754 	sjmp 00323$
      001420                       3755 00218$:
                                   3756 ;	printf_large.c:838: width = 0;
                                   3757 ;	genAssign: resultIsFar = TRUE
      001420 90s00r00rD1      [12] 3758 	mov	dptr,#__print_format_sloc2_1_0
      001424 E4               [ 4] 3759 	clr	a
      001425 F0               [ 8] 3760 	movx	@dptr,a
      001426 A3               [12] 3761 	inc	dptr
      001427 F0               [ 8] 3762 	movx	@dptr,a
                                   3763 ;	printf_large.c:877: return charsOutputted;
                                   3764 ;	printf_large.c:842: while( length-- )
      001428 80 09            [12] 3765 	sjmp 00323$
      00142A                       3766 00331$:
                                   3767 ;	genAssign: resultIsFar = TRUE
      00142A 90s00r00rD1      [12] 3768 	mov	dptr,#__print_format_sloc2_1_0
      00142E E8               [ 4] 3769 	mov	a,r0
      00142F F0               [ 8] 3770 	movx	@dptr,a
      001430 A3               [12] 3771 	inc	dptr
      001431 E9               [ 4] 3772 	mov	a,r1
      001432 F0               [ 8] 3773 	movx	@dptr,a
      001433                       3774 00323$:
      001433 90s00r00rC9      [12] 3775 	mov	dptr,#__print_format_pstore_262144_135
                                   3776 ;	genAssign: resultIsFar = FALSE
      001437 E0               [ 8] 3777 	movx	a,@dptr
      001438 FD               [ 4] 3778 	mov	r5,a
      001439 A3               [12] 3779 	inc	dptr
      00143A E0               [ 8] 3780 	movx	a,@dptr
      00143B F8               [ 4] 3781 	mov	r0,a
      00143C A3               [12] 3782 	inc	dptr
      00143D E0               [ 8] 3783 	movx	a,@dptr
      00143E F9               [ 4] 3784 	mov	r1,a
                                   3785 ;	genAssign: resultIsFar = FALSE
      00143F                       3786 00226$:
                                   3787 ;	genAssign: resultIsFar = FALSE
      00143F 8E 03            [ 8] 3788 	mov	ar3,r6
      001441 8F 04            [ 8] 3789 	mov	ar4,r7
      001443 1E               [ 4] 3790 	dec	r6
      001444 BE FF 01         [16] 3791 	cjne	r6,#0xff,00740$
      001447 1F               [ 4] 3792 	dec	r7
      001448                       3793 00740$:
      001448 EB               [ 4] 3794 	mov	a,r3
      001449 4C               [ 4] 3795 	orl	a,r4
      00144A 60 5C            [12] 3796 	jz  00228$
      00144C                       3797 00741$:
                                   3798 ;	printf_large.c:844: lsd = !lsd;
      00144C EA               [ 4] 3799 	mov	a,r2
      00144D B4 01 00         [16] 3800 	cjne	a,#0x01,00742$
      001450                       3801 00742$:
      001450 E4               [ 4] 3802 	clr	a
      001451 33               [ 4] 3803 	rlc	a
                                   3804 ;	printf_large.c:845: if (!lsd)
      001452 FA               [ 4] 3805 	mov  r2,a
      001453 70 1C            [12] 3806 	jnz  00224$
      001455                       3807 00743$:
                                   3808 ;	printf_large.c:847: pstore++;
      001455 0D               [ 4] 3809 	inc	r5
      001456 BD 00 05         [16] 3810 	cjne	r5,#0x00,00744$
      001459 08               [ 4] 3811 	inc	r0
      00145A B8 00 01         [16] 3812 	cjne	r0,#0x00,00744$
      00145D 09               [ 4] 3813 	inc	r1
      00145E                       3814 00744$:
                                   3815 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      00145E 8D 82            [ 8] 3816 	mov	dpl,r5
      001460 88 83            [ 8] 3817 	mov	dph,r0
      001462 89 93            [ 8] 3818 	mov	dpx,r1
      001464 E0               [ 8] 3819 	movx	a,@dptr
      001465 FB               [ 4] 3820 	mov  r3,a
      001466 C4               [ 4] 3821 	swap	a
      001467 54 0F            [ 8] 3822 	anl	a,#0x0f
      001469 FB               [ 4] 3823 	mov  r3,a
      00146A 90s00r00r0C      [12] 3824 	mov  dptr,#(_value + 0x000004)
      00146E F0               [ 8] 3825 	movx @dptr,a
      00146F 80 11            [12] 3826 	sjmp 00225$
      001471                       3827 00224$:
                                   3828 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      001471 8D 82            [ 8] 3829 	mov	dpl,r5
      001473 88 83            [ 8] 3830 	mov	dph,r0
      001475 89 93            [ 8] 3831 	mov	dpx,r1
      001477 E0               [ 8] 3832 	movx	a,@dptr
      001478 FB               [ 4] 3833 	mov	r3,a
      001479 53 03 0F         [12] 3834 	anl	ar3,#0x0f
      00147C 90s00r00r0C      [12] 3835 	mov	dptr,#(_value + 0x000004)
      001480 EB               [ 4] 3836 	mov	a,r3
      001481 F0               [ 8] 3837 	movx	@dptr,a
      001482                       3838 00225$:
                                   3839 ;	printf_large.c:858: output_digit( value.byte[4] );
      001482 90s00r00r0C      [12] 3840 	mov	dptr,#(_value + 0x000004)
      001486 E0               [ 8] 3841 	movx	a,@dptr
      001487 FB               [ 4] 3842 	mov	r3,a
      001488 C0 02            [ 8] 3843 	push	ar2
      00148A C0 05            [ 8] 3844 	push	ar5
      00148C C0 06            [ 8] 3845 	push	ar6
      00148E C0 07            [ 8] 3846 	push	ar7
      001490 C0 00            [ 8] 3847 	push	ar0
      001492 C0 01            [ 8] 3848 	push	ar1
      001494 8B 82            [ 8] 3849 	mov	dpl,r3
      001496 12s00r00r49      [16] 3850 	lcall	_output_digit
      00149A D0 01            [ 8] 3851 	pop	ar1
      00149C D0 00            [ 8] 3852 	pop	ar0
      00149E D0 07            [ 8] 3853 	pop	ar7
      0014A0 D0 06            [ 8] 3854 	pop	ar6
      0014A2 D0 05            [ 8] 3855 	pop	ar5
      0014A4 D0 02            [ 8] 3856 	pop	ar2
      0014A6 80 97            [12] 3857 	sjmp 00226$
      0014A8                       3858 00228$:
                                   3859 ;	printf_large.c:861: if (left_justify)
      0014A8 90s00r00rB8      [12] 3860 	mov	dptr,#__print_format_left_justify_65536_113
      0014AC E0               [ 8] 3861 	movx	a,@dptr
      0014AD 70 04            [12] 3862 	jnz	00745$
      0014AF 02s00r09r06      [16] 3863 	ljmp	00242$
      0014B3                       3864 00745$:
                                   3865 ;	printf_large.c:863: while (width-- > 0)
      0014B3 90s00r00rD1      [12] 3866 	mov	dptr,#__print_format_sloc2_1_0
                                   3867 ;	genAssign: resultIsFar = FALSE
      0014B7 E0               [ 8] 3868 	movx	a,@dptr
      0014B8 FB               [ 4] 3869 	mov	r3,a
      0014B9 A3               [12] 3870 	inc	dptr
      0014BA E0               [ 8] 3871 	movx	a,@dptr
      0014BB FC               [ 4] 3872 	mov	r4,a
      0014BC                       3873 00229$:
                                   3874 ;	genAssign: resultIsFar = FALSE
      0014BC 8B 05            [ 8] 3875 	mov	ar5,r3
      0014BE 8C 06            [ 8] 3876 	mov	ar6,r4
      0014C0 1B               [ 4] 3877 	dec	r3
      0014C1 BB FF 01         [16] 3878 	cjne	r3,#0xff,00746$
      0014C4 1C               [ 4] 3879 	dec	r4
      0014C5                       3880 00746$:
      0014C5 ED               [ 4] 3881 	mov	a,r5
      0014C6 4E               [ 4] 3882 	orl	a,r6
      0014C7 70 04            [12] 3883 	jnz	00747$
      0014C9 02s00r09r06      [16] 3884 	ljmp	00242$
      0014CD                       3885 00747$:
                                   3886 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      0014CD C0 03            [ 8] 3887 	push	ar3
      0014CF C0 04            [ 8] 3888 	push	ar4
      0014D1 75 82 20         [12] 3889 	mov	dpl,#0x20
      0014D4 12s00r00r00      [16] 3890 	lcall	__output_char
      0014D8 D0 04            [ 8] 3891 	pop	ar4
      0014DA D0 03            [ 8] 3892 	pop	ar3
      0014DC 80 DE            [12] 3893 	sjmp 00229$
      0014DE                       3894 00240$:
                                   3895 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      0014DE 8A 82            [ 8] 3896 	mov	dpl,r2
      0014E0 12s00r00r00      [16] 3897 	lcall	__output_char
      0014E4 02s00r09r06      [16] 3898 	ljmp	00242$
      0014E8                       3899 00244$:
                                   3900 ;	printf_large.c:877: return charsOutputted;
      0014E8 75 86 01         [12] 3901 	mov     dps, #1
      0014EB 90s00r00r0D      [12] 3902 	mov     dptr, #_charsOutputted
      0014EF E0               [ 8] 3903 	movx	a,@dptr
      0014F0 F5 82            [ 8] 3904 	mov	dpl,a
      0014F2 A3               [12] 3905 	inc	dptr
      0014F3 E0               [ 8] 3906 	movx	a,@dptr
      0014F4 F5 83            [ 8] 3907 	mov	dph,a
      0014F6 75 86 00         [12] 3908 	mov	dps,#0
      0014F9                       3909 00245$:
                                   3910 ;	printf_large.c:878: }
      0014F9 22               [16] 3911 	ret
                                   3912 	.area CSEG    (CODE)
                                   3913 	.area CONST   (CODE)
                                   3914 	.area CONST   (CODE)
      000000                       3915 ___str_0:
      000000 3C 4E 55 4C 4C 3E     3916 	.ascii "<NULL>"
      000006 00                    3917 	.db 0x00
                                   3918 	.area CSEG    (CODE)
                                   3919 	.area XINIT   (CODE)
                                   3920 	.area CABS    (ABS,CODE)
