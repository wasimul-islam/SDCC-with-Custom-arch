                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module expf
                                      6 	.optsdcc -mds390 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _ldexpf
                                     35 	.globl _expf
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; uninitialized external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; absolute external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XABS    (ABS,XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; initialized external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XISEG   (XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'expf'
                                    101 ;------------------------------------------------------------
                                    102 ;x                         Allocated to registers r2 r3 r4 r5 
                                    103 ;n                         Allocated to registers 
                                    104 ;xn                        Allocated to stack - _bp +3
                                    105 ;g                         Allocated to registers r2 r3 r4 r5 
                                    106 ;r                         Allocated to registers 
                                    107 ;z                         Allocated to stack - _bp +7
                                    108 ;y                         Allocated to registers r6 r7 r0 r1 
                                    109 ;sign                      Allocated to stack - _bp +11
                                    110 ;sloc0                     Allocated to stack - _bp +1
                                    111 ;------------------------------------------------------------
                                    112 ;	expf.c:331: float expf(float x) _FLOAT_FUNC_REENTRANT
                                    113 ;	-----------------------------------------
                                    114 ;	 function expf
                                    115 ;	-----------------------------------------
      000000                        116 _expf:
                           000002   117 	ar2 = 0x02
                           000003   118 	ar3 = 0x03
                           000004   119 	ar4 = 0x04
                           000005   120 	ar5 = 0x05
                           000006   121 	ar6 = 0x06
                           000007   122 	ar7 = 0x07
                           000000   123 	ar0 = 0x00
                           000001   124 	ar1 = 0x01
      000000 C0*00            [ 8]  125 	push	_bpx
      000002 C0*01            [ 8]  126 	push	_bpx+1
      000004 85 81*00         [12]  127 	mov	_bpx,sp
      000007 85 9B*01         [12]  128 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  129 	anl	_bpx+1,#3
      00000D E5 81            [ 8]  130 	mov	a,sp
      00000F 24 0B            [ 8]  131 	add	a,#0x0b
      000011 F5 81            [ 8]  132 	mov	sp,a
      000013 E5 9B            [ 8]  133 	mov	a,esp
      000015 54 03            [ 8]  134 	anl	a,#3
      000017 34 00            [ 8]  135 	addc	a,#0x00
      000019 F5 9B            [ 8]  136 	mov	esp,a
      00001B AA 82            [ 8]  137 	mov	r2,dpl
      00001D AB 83            [ 8]  138 	mov	r3,dph
      00001F AC 93            [ 8]  139 	mov	r4,dpx
      000021 AD F0            [ 8]  140 	mov	r5,b
                                    141 ;	expf.c:337: if(x>=0.0)
                                    142 ;	genAssign: resultIsFar = TRUE
      000023 90s00r00r00      [12]  143 	mov	dptr,#___fslt_PARM_2
      000027 E4               [ 4]  144 	clr	a
      000028 F0               [ 8]  145 	movx	@dptr,a
      000029 A3               [12]  146 	inc	dptr
      00002A F0               [ 8]  147 	movx	@dptr,a
      00002B A3               [12]  148 	inc	dptr
      00002C F0               [ 8]  149 	movx	@dptr,a
      00002D A3               [12]  150 	inc	dptr
      00002E F0               [ 8]  151 	movx	@dptr,a
      00002F C0 02            [ 8]  152 	push	ar2
      000031 C0 03            [ 8]  153 	push	ar3
      000033 C0 04            [ 8]  154 	push	ar4
      000035 C0 05            [ 8]  155 	push	ar5
      000037 8A 82            [ 8]  156 	mov	dpl,r2
      000039 8B 83            [ 8]  157 	mov	dph,r3
      00003B 8C 93            [ 8]  158 	mov	dpx,r4
      00003D 8D F0            [ 8]  159 	mov	b,r5
      00003F 12s00r00r00      [16]  160 	lcall	___fslt
      000043 D0 05            [ 8]  161 	pop	ar5
      000045 D0 04            [ 8]  162 	pop	ar4
      000047 D0 03            [ 8]  163 	pop	ar3
      000049 D0 02            [ 8]  164 	pop	ar2
      00004B E5 82            [ 8]  165 	mov	a,dpl
      00004D 70 1C            [12]  166 	jnz  00102$
      00004F                        167 00155$:
                                    168 ;	expf.c:338: { y=x;  sign=0; }
                                    169 ;	genAssign: resultIsFar = TRUE
      00004F 8A 06            [ 8]  170 	mov	ar6,r2
      000051 8B 07            [ 8]  171 	mov	ar7,r3
      000053 8C 00            [ 8]  172 	mov	ar0,r4
      000055 8D 01            [ 8]  173 	mov	ar1,r5
                                    174 ;	genAssign: resultIsFar = TRUE
      000057 E5*00            [ 8]  175 	mov	a,_bpx
      000059 C3               [ 4]  176 	clr	c
      00005A 94 F5            [ 8]  177 	subb	a,#0xf5
      00005C F5 82            [ 8]  178 	mov	dpl,a
      00005E E5*01            [ 8]  179 	mov	a,_bpx+1
      000060 94 FF            [ 8]  180 	subb	a,#0xff
      000062 F5 83            [ 8]  181 	mov	dph,a
      000064 75 93 40         [12]  182 	mov	dpx,#0x40
      000067 E4               [ 4]  183 	clr	a
      000068 F0               [ 8]  184 	movx	@dptr,a
      000069 80 1F            [12]  185 	sjmp 00103$
      00006B                        186 00102$:
                                    187 ;	expf.c:340: { y=-x; sign=1; }
      00006B ED               [ 4]  188 	mov	a,r5
      00006C B2 E7            [ 8]  189 	cpl	acc[7]
      00006E FD               [ 4]  190 	mov	r5,a
                                    191 ;	genAssign: resultIsFar = TRUE
      00006F 8A 06            [ 8]  192 	mov	ar6,r2
      000071 8B 07            [ 8]  193 	mov	ar7,r3
      000073 8C 00            [ 8]  194 	mov	ar0,r4
      000075 8D 01            [ 8]  195 	mov	ar1,r5
                                    196 ;	genAssign: resultIsFar = TRUE
      000077 E5*00            [ 8]  197 	mov	a,_bpx
      000079 C3               [ 4]  198 	clr	c
      00007A 94 F5            [ 8]  199 	subb	a,#0xf5
      00007C F5 82            [ 8]  200 	mov	dpl,a
      00007E E5*01            [ 8]  201 	mov	a,_bpx+1
      000080 94 FF            [ 8]  202 	subb	a,#0xff
      000082 F5 83            [ 8]  203 	mov	dph,a
      000084 75 93 40         [12]  204 	mov	dpx,#0x40
      000087 74 01            [ 8]  205 	mov	a,#0x01
      000089 F0               [ 8]  206 	movx	@dptr,a
      00008A                        207 00103$:
                                    208 ;	expf.c:342: if(y<EXPEPS) return 1.0;
                                    209 ;	genAssign: resultIsFar = TRUE
      00008A 90s00r00r00      [12]  210 	mov	dptr,#___fslt_PARM_2
      00008E 74 95            [ 8]  211 	mov	a,#0x95
      000090 F0               [ 8]  212 	movx	@dptr,a
      000091 A3               [12]  213 	inc	dptr
      000092 74 BF            [ 8]  214 	mov	a,#0xbf
      000094 F0               [ 8]  215 	movx	@dptr,a
      000095 A3               [12]  216 	inc	dptr
      000096 74 D6            [ 8]  217 	mov	a,#0xd6
      000098 F0               [ 8]  218 	movx	@dptr,a
      000099 A3               [12]  219 	inc	dptr
      00009A 74 33            [ 8]  220 	mov	a,#0x33
      00009C F0               [ 8]  221 	movx	@dptr,a
      00009D C0 06            [ 8]  222 	push	ar6
      00009F C0 07            [ 8]  223 	push	ar7
      0000A1 C0 00            [ 8]  224 	push	ar0
      0000A3 C0 01            [ 8]  225 	push	ar1
      0000A5 8E 82            [ 8]  226 	mov	dpl,r6
      0000A7 8F 83            [ 8]  227 	mov	dph,r7
      0000A9 88 93            [ 8]  228 	mov	dpx,r0
      0000AB 89 F0            [ 8]  229 	mov	b,r1
      0000AD 12s00r00r00      [16]  230 	lcall	___fslt
      0000B1 D0 01            [ 8]  231 	pop	ar1
      0000B3 D0 00            [ 8]  232 	pop	ar0
      0000B5 D0 07            [ 8]  233 	pop	ar7
      0000B7 D0 06            [ 8]  234 	pop	ar6
      0000B9 E5 82            [ 8]  235 	mov	a,dpl
      0000BB 60 0E            [12]  236 	jz  00105$
      0000BD                        237 00156$:
      0000BD 90 00 00 00      [12]  238 	mov  dptr,#0x0000
      0000C1 75 93 80         [12]  239 	mov	dpx,#0x80
      0000C4 75 F0 3F         [12]  240 	mov	b,#0x3f
      0000C7 02s00r06r01      [16]  241 	ljmp	00118$
      0000CB                        242 00105$:
                                    243 ;	expf.c:344: if(y>BIGX)
                                    244 ;	genAssign: resultIsFar = TRUE
      0000CB 90s00r00r00      [12]  245 	mov	dptr,#___fslt_PARM_2
      0000CF EE               [ 4]  246 	mov	a,r6
      0000D0 F0               [ 8]  247 	movx	@dptr,a
      0000D1 A3               [12]  248 	inc	dptr
      0000D2 EF               [ 4]  249 	mov	a,r7
      0000D3 F0               [ 8]  250 	movx	@dptr,a
      0000D4 A3               [12]  251 	inc	dptr
      0000D5 E8               [ 4]  252 	mov	a,r0
      0000D6 F0               [ 8]  253 	movx	@dptr,a
      0000D7 A3               [12]  254 	inc	dptr
      0000D8 E9               [ 4]  255 	mov	a,r1
      0000D9 F0               [ 8]  256 	movx	@dptr,a
      0000DA C0 06            [ 8]  257 	push	ar6
      0000DC C0 07            [ 8]  258 	push	ar7
      0000DE C0 00            [ 8]  259 	push	ar0
      0000E0 C0 01            [ 8]  260 	push	ar1
      0000E2 90 B1 72 18      [12]  261 	mov	dptr,#0xb17218
      0000E6 75 F0 42         [12]  262 	mov	b,#0x42
      0000E9 12s00r00r00      [16]  263 	lcall	___fslt
      0000ED D0 01            [ 8]  264 	pop	ar1
      0000EF D0 00            [ 8]  265 	pop	ar0
      0000F1 D0 07            [ 8]  266 	pop	ar7
      0000F3 D0 06            [ 8]  267 	pop	ar6
      0000F5 E5 82            [ 8]  268 	mov	a,dpl
      0000F7 60 33            [12]  269 	jz  00110$
      0000F9                        270 00157$:
                                    271 ;	expf.c:346: if(sign)
      0000F9 E5*00            [ 8]  272 	mov	a,_bpx
      0000FB C3               [ 4]  273 	clr	c
      0000FC 94 F5            [ 8]  274 	subb	a,#0xf5
      0000FE F5 82            [ 8]  275 	mov	dpl,a
      000100 E5*01            [ 8]  276 	mov	a,_bpx+1
      000102 94 FF            [ 8]  277 	subb	a,#0xff
      000104 F5 83            [ 8]  278 	mov	dph,a
      000106 75 93 40         [12]  279 	mov	dpx,#0x40
      000109 E0               [ 8]  280 	movx	a,@dptr
      00010A 60 15            [12]  281 	jz  00107$
      00010C                        282 00158$:
                                    283 ;	expf.c:348: errno=ERANGE;
                                    284 ;	genAssign: resultIsFar = TRUE
      00010C 90s00r00r00      [12]  285 	mov	dptr,#_errno
      000110 74 22            [ 8]  286 	mov	a,#0x22
      000112 F0               [ 8]  287 	movx	@dptr,a
      000113 E4               [ 4]  288 	clr	a
      000114 A3               [12]  289 	inc	dptr
      000115 F0               [ 8]  290 	movx	@dptr,a
                                    291 ;	expf.c:350: ;
      000116 90 7F FF FF      [12]  292 	mov	dptr,#0x7fffff
      00011A 75 F0 7F         [12]  293 	mov	b,#0x7f
      00011D 02s00r06r01      [16]  294 	ljmp	00118$
      000121                        295 00107$:
                                    296 ;	expf.c:354: return 0.0;
      000121 90 00 00 00      [12]  297 	mov  dptr,#0x0000
      000125 75 F0 00         [12]  298 	mov	b,#0x00
      000128 02s00r06r01      [16]  299 	ljmp	00118$
      00012C                        300 00110$:
                                    301 ;	expf.c:358: z=y*K1;
                                    302 ;	genAssign: resultIsFar = TRUE
      00012C 90s00r00r00      [12]  303 	mov	dptr,#___fsmul_PARM_2
      000130 EE               [ 4]  304 	mov	a,r6
      000131 F0               [ 8]  305 	movx	@dptr,a
      000132 A3               [12]  306 	inc	dptr
      000133 EF               [ 4]  307 	mov	a,r7
      000134 F0               [ 8]  308 	movx	@dptr,a
      000135 A3               [12]  309 	inc	dptr
      000136 E8               [ 4]  310 	mov	a,r0
      000137 F0               [ 8]  311 	movx	@dptr,a
      000138 A3               [12]  312 	inc	dptr
      000139 E9               [ 4]  313 	mov	a,r1
      00013A F0               [ 8]  314 	movx	@dptr,a
      00013B C0 06            [ 8]  315 	push	ar6
      00013D C0 07            [ 8]  316 	push	ar7
      00013F C0 00            [ 8]  317 	push	ar0
      000141 C0 01            [ 8]  318 	push	ar1
      000143 90 B8 AA 3B      [12]  319 	mov	dptr,#0xb8aa3b
      000147 75 F0 3F         [12]  320 	mov	b,#0x3f
      00014A 12s00r00r00      [16]  321 	lcall	___fsmul
      00014E D0 01            [ 8]  322 	pop	ar1
      000150 D0 00            [ 8]  323 	pop	ar0
      000152 D0 07            [ 8]  324 	pop	ar7
      000154 D0 06            [ 8]  325 	pop	ar6
                                    326 ;	genAssign: resultIsFar = FALSE
      000156 AA 82            [ 8]  327 	mov	r2,dpl
      000158 AB 83            [ 8]  328 	mov	r3,dph
      00015A AC 93            [ 8]  329 	mov	r4,dpx
      00015C AD F0            [ 8]  330 	mov	r5,b
                                    331 ;	expf.c:359: n=z;
      00015E C0 02            [ 8]  332 	push	ar2
      000160 C0 03            [ 8]  333 	push	ar3
      000162 C0 04            [ 8]  334 	push	ar4
      000164 C0 05            [ 8]  335 	push	ar5
      000166 C0 06            [ 8]  336 	push	ar6
      000168 C0 07            [ 8]  337 	push	ar7
      00016A C0 00            [ 8]  338 	push	ar0
      00016C C0 01            [ 8]  339 	push	ar1
      00016E 8A 82            [ 8]  340 	mov	dpl,r2
      000170 8B 83            [ 8]  341 	mov	dph,r3
      000172 8C 93            [ 8]  342 	mov	dpx,r4
      000174 8D F0            [ 8]  343 	mov	b,r5
      000176 12s00r00r00      [16]  344 	lcall	___fs2sint
      00017A D0 01            [ 8]  345 	pop	ar1
      00017C D0 00            [ 8]  346 	pop	ar0
      00017E D0 07            [ 8]  347 	pop	ar7
      000180 D0 06            [ 8]  348 	pop	ar6
      000182 D0 05            [ 8]  349 	pop	ar5
      000184 D0 04            [ 8]  350 	pop	ar4
      000186 D0 03            [ 8]  351 	pop	ar3
      000188 D0 02            [ 8]  352 	pop	ar2
                                    353 ;	genAssign: resultIsFar = TRUE
      00018A 75 95 40         [12]  354 	mov	dpx1,#0x40
      00018D 85*01 85         [12]  355 	mov	dph1,_bpx+1
      000190 85*00 84         [12]  356 	mov	dpl1,_bpx
      000193 75 86 01         [12]  357 	mov	dps,#1
      000196 A3               [12]  358 	inc	dptr
      000197 75 86 01         [12]  359 	mov	dps, #1
      00019A E5 82            [ 8]  360 	mov	a,dpl
      00019C F0               [ 8]  361 	movx	@dptr,a
      00019D A3               [12]  362 	inc	dptr
      00019E E5 83            [ 8]  363 	mov	a,dph
      0001A0 F0               [ 8]  364 	movx	@dptr,a
      0001A1 75 86 00         [12]  365 	mov	dps,#0
                                    366 ;	expf.c:361: if(n<0) --n;
      0001A4 75 93 40         [12]  367 	mov	dpx,#0x40
      0001A7 85*01 83         [12]  368 	mov	dph,_bpx+1
      0001AA 85*00 82         [12]  369 	mov	dpl,_bpx
      0001AD A3               [12]  370 	inc	dptr
      0001AE A3               [12]  371 	inc	dptr
      0001AF E0               [ 8]  372 	movx	a,@dptr
      0001B0 30 E7 13         [12]  373 	jnb  acc[7],00112$
      0001B3                        374 00159$:
      0001B3 75 93 40         [12]  375 	mov	dpx,#0x40
      0001B6 85*01 83         [12]  376 	mov	dph,_bpx+1
      0001B9 85*00 82         [12]  377 	mov	dpl,_bpx
      0001BC A3               [12]  378 	inc	dptr
      0001BD E0               [ 8]  379 	movx	a,@dptr
      0001BE 24 FF            [ 8]  380 	add	a,#0xff
      0001C0 F0               [ 8]  381 	movx	@dptr,a
      0001C1 A3               [12]  382 	inc	dptr
      0001C2 E0               [ 8]  383 	movx	a,@dptr
      0001C3 34 FF            [ 8]  384 	addc	a,#0xff
      0001C5 F0               [ 8]  385 	movx	@dptr,a
      0001C6                        386 00112$:
                                    387 ;	expf.c:362: if(z-n>=0.5) ++n;
      0001C6 C0 06            [ 8]  388 	push	ar6
      0001C8 C0 07            [ 8]  389 	push	ar7
      0001CA C0 00            [ 8]  390 	push	ar0
      0001CC C0 01            [ 8]  391 	push	ar1
      0001CE C0 02            [ 8]  392 	push	ar2
      0001D0 C0 03            [ 8]  393 	push	ar3
      0001D2 C0 04            [ 8]  394 	push	ar4
      0001D4 C0 05            [ 8]  395 	push	ar5
      0001D6 75 95 40         [12]  396 	mov	dpx1,#0x40
      0001D9 85*01 85         [12]  397 	mov	dph1,_bpx+1
      0001DC 85*00 84         [12]  398 	mov	dpl1,_bpx
      0001DF 75 86 01         [12]  399 	mov	dps,#1
      0001E2 A3               [12]  400 	inc	dptr
      0001E3 75 86 01         [12]  401 	mov	dps, #1
      0001E6 E0               [ 8]  402 	movx	a,@dptr
      0001E7 F5 82            [ 8]  403 	mov	dpl,a
      0001E9 A3               [12]  404 	inc	dptr
      0001EA E0               [ 8]  405 	movx	a,@dptr
      0001EB F5 83            [ 8]  406 	mov	dph,a
      0001ED 75 86 00         [12]  407 	mov	dps,#0
      0001F0 12s00r00r00      [16]  408 	lcall	___sint2fs
      0001F4 AE 82            [ 8]  409 	mov	r6,dpl
      0001F6 AF 83            [ 8]  410 	mov	r7,dph
      0001F8 A8 93            [ 8]  411 	mov	r0,dpx
      0001FA A9 F0            [ 8]  412 	mov	r1,b
      0001FC D0 05            [ 8]  413 	pop	ar5
      0001FE D0 04            [ 8]  414 	pop	ar4
      000200 D0 03            [ 8]  415 	pop	ar3
      000202 D0 02            [ 8]  416 	pop	ar2
                                    417 ;	genAssign: resultIsFar = TRUE
      000204 90s00r00r00      [12]  418 	mov	dptr,#___fssub_PARM_2
      000208 EE               [ 4]  419 	mov	a,r6
      000209 F0               [ 8]  420 	movx	@dptr,a
      00020A A3               [12]  421 	inc	dptr
      00020B EF               [ 4]  422 	mov	a,r7
      00020C F0               [ 8]  423 	movx	@dptr,a
      00020D A3               [12]  424 	inc	dptr
      00020E E8               [ 4]  425 	mov	a,r0
      00020F F0               [ 8]  426 	movx	@dptr,a
      000210 A3               [12]  427 	inc	dptr
      000211 E9               [ 4]  428 	mov	a,r1
      000212 F0               [ 8]  429 	movx	@dptr,a
      000213 C0 06            [ 8]  430 	push	ar6
      000215 C0 07            [ 8]  431 	push	ar7
      000217 C0 00            [ 8]  432 	push	ar0
      000219 C0 01            [ 8]  433 	push	ar1
      00021B 8A 82            [ 8]  434 	mov	dpl,r2
      00021D 8B 83            [ 8]  435 	mov	dph,r3
      00021F 8C 93            [ 8]  436 	mov	dpx,r4
      000221 8D F0            [ 8]  437 	mov	b,r5
      000223 12s00r00r00      [16]  438 	lcall	___fssub
      000227 AA 82            [ 8]  439 	mov	r2,dpl
      000229 AB 83            [ 8]  440 	mov	r3,dph
      00022B AC 93            [ 8]  441 	mov	r4,dpx
      00022D AD F0            [ 8]  442 	mov	r5,b
      00022F D0 01            [ 8]  443 	pop	ar1
      000231 D0 00            [ 8]  444 	pop	ar0
      000233 D0 07            [ 8]  445 	pop	ar7
      000235 D0 06            [ 8]  446 	pop	ar6
                                    447 ;	genAssign: resultIsFar = TRUE
      000237 90s00r00r00      [12]  448 	mov	dptr,#___fslt_PARM_2
      00023B E4               [ 4]  449 	clr	a
      00023C F0               [ 8]  450 	movx	@dptr,a
      00023D A3               [12]  451 	inc	dptr
      00023E E4               [ 4]  452 	clr	a
      00023F F0               [ 8]  453 	movx	@dptr,a
      000240 A3               [12]  454 	inc	dptr
      000241 E4               [ 4]  455 	clr	a
      000242 F0               [ 8]  456 	movx	@dptr,a
      000243 A3               [12]  457 	inc	dptr
      000244 74 3F            [ 8]  458 	mov	a,#0x3f
      000246 F0               [ 8]  459 	movx	@dptr,a
      000247 C0 06            [ 8]  460 	push	ar6
      000249 C0 07            [ 8]  461 	push	ar7
      00024B C0 00            [ 8]  462 	push	ar0
      00024D C0 01            [ 8]  463 	push	ar1
      00024F 8A 82            [ 8]  464 	mov	dpl,r2
      000251 8B 83            [ 8]  465 	mov	dph,r3
      000253 8C 93            [ 8]  466 	mov	dpx,r4
      000255 8D F0            [ 8]  467 	mov	b,r5
      000257 12s00r00r00      [16]  468 	lcall	___fslt
      00025B D0 01            [ 8]  469 	pop	ar1
      00025D D0 00            [ 8]  470 	pop	ar0
      00025F D0 07            [ 8]  471 	pop	ar7
      000261 D0 06            [ 8]  472 	pop	ar6
      000263 D0 01            [ 8]  473 	pop	ar1
      000265 D0 00            [ 8]  474 	pop	ar0
      000267 D0 07            [ 8]  475 	pop	ar7
      000269 D0 06            [ 8]  476 	pop	ar6
      00026B E5 82            [ 8]  477 	mov	a,dpl
      00026D 70 13            [12]  478 	jnz  00114$
      00026F                        479 00160$:
      00026F 75 93 40         [12]  480 	mov	dpx,#0x40
      000272 85*01 83         [12]  481 	mov	dph,_bpx+1
      000275 85*00 82         [12]  482 	mov	dpl,_bpx
      000278 A3               [12]  483 	inc	dptr
      000279 E0               [ 8]  484 	movx	a,@dptr
      00027A 24 01            [ 8]  485 	add	a,#0x01
      00027C F0               [ 8]  486 	movx	@dptr,a
      00027D A3               [12]  487 	inc	dptr
      00027E E0               [ 8]  488 	movx	a,@dptr
      00027F 34 00            [ 8]  489 	addc	a,#0x00
      000281 F0               [ 8]  490 	movx	@dptr,a
      000282                        491 00114$:
                                    492 ;	expf.c:363: xn=n;
      000282 C0 06            [ 8]  493 	push	ar6
      000284 C0 07            [ 8]  494 	push	ar7
      000286 C0 00            [ 8]  495 	push	ar0
      000288 C0 01            [ 8]  496 	push	ar1
      00028A 75 95 40         [12]  497 	mov	dpx1,#0x40
      00028D 85*01 85         [12]  498 	mov	dph1,_bpx+1
      000290 85*00 84         [12]  499 	mov	dpl1,_bpx
      000293 75 86 01         [12]  500 	mov	dps,#1
      000296 A3               [12]  501 	inc	dptr
      000297 75 86 01         [12]  502 	mov	dps, #1
      00029A E0               [ 8]  503 	movx	a,@dptr
      00029B F5 82            [ 8]  504 	mov	dpl,a
      00029D A3               [12]  505 	inc	dptr
      00029E E0               [ 8]  506 	movx	a,@dptr
      00029F F5 83            [ 8]  507 	mov	dph,a
      0002A1 75 86 00         [12]  508 	mov	dps,#0
      0002A4 12s00r00r00      [16]  509 	lcall	___sint2fs
      0002A8 AA 82            [ 8]  510 	mov	r2,dpl
      0002AA AB 83            [ 8]  511 	mov	r3,dph
      0002AC AC 93            [ 8]  512 	mov	r4,dpx
      0002AE AD F0            [ 8]  513 	mov	r5,b
      0002B0 D0 01            [ 8]  514 	pop	ar1
      0002B2 D0 00            [ 8]  515 	pop	ar0
      0002B4 D0 07            [ 8]  516 	pop	ar7
      0002B6 D0 06            [ 8]  517 	pop	ar6
                                    518 ;	genAssign: resultIsFar = TRUE
      0002B8 75 93 40         [12]  519 	mov	dpx,#0x40
      0002BB 85*01 83         [12]  520 	mov	dph,_bpx+1
      0002BE 85*00 82         [12]  521 	mov	dpl,_bpx
      0002C1 A3               [12]  522 	inc	dptr
      0002C2 A3               [12]  523 	inc	dptr
      0002C3 A3               [12]  524 	inc	dptr
      0002C4 EA               [ 4]  525 	mov	a,r2
      0002C5 F0               [ 8]  526 	movx	@dptr,a
      0002C6 A3               [12]  527 	inc	dptr
      0002C7 EB               [ 4]  528 	mov	a,r3
      0002C8 F0               [ 8]  529 	movx	@dptr,a
      0002C9 A3               [12]  530 	inc	dptr
      0002CA EC               [ 4]  531 	mov	a,r4
      0002CB F0               [ 8]  532 	movx	@dptr,a
      0002CC A3               [12]  533 	inc	dptr
      0002CD ED               [ 4]  534 	mov	a,r5
      0002CE F0               [ 8]  535 	movx	@dptr,a
                                    536 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      0002CF 75 93 40         [12]  537 	mov	dpx,#0x40
      0002D2 85*01 83         [12]  538 	mov	dph,_bpx+1
      0002D5 85*00 82         [12]  539 	mov	dpl,_bpx
      0002D8 A3               [12]  540 	inc	dptr
      0002D9 A3               [12]  541 	inc	dptr
      0002DA A3               [12]  542 	inc	dptr
                                    543 ;	genAssign: resultIsFar = TRUE
      0002DB 75 86 21         [12]  544 	mov	dps,#0x21
      0002DE 90s00r00r00      [12]  545 	mov	dptr,#___fsmul_PARM_2
      0002E2 E0               [ 8]  546 	movx	a,@dptr
      0002E3 F0               [ 8]  547 	movx	@dptr,a
      0002E4 A3               [12]  548 	inc	dptr
      0002E5 A3               [12]  549 	inc	dptr
      0002E6 E0               [ 8]  550 	movx	a,@dptr
      0002E7 F0               [ 8]  551 	movx	@dptr,a
      0002E8 A3               [12]  552 	inc	dptr
      0002E9 A3               [12]  553 	inc	dptr
      0002EA E0               [ 8]  554 	movx	a,@dptr
      0002EB F0               [ 8]  555 	movx	@dptr,a
      0002EC A3               [12]  556 	inc	dptr
      0002ED A3               [12]  557 	inc	dptr
      0002EE E0               [ 8]  558 	movx	a,@dptr
      0002EF F0               [ 8]  559 	movx	@dptr,a
      0002F0 75 86 00         [12]  560 	mov	dps,#0
      0002F3 C0 06            [ 8]  561 	push	ar6
      0002F5 C0 07            [ 8]  562 	push	ar7
      0002F7 C0 00            [ 8]  563 	push	ar0
      0002F9 C0 01            [ 8]  564 	push	ar1
      0002FB 90 31 80 00      [12]  565 	mov	dptr,#0x318000
      0002FF 75 F0 3F         [12]  566 	mov	b,#0x3f
      000302 12s00r00r00      [16]  567 	lcall	___fsmul
      000306 AA 82            [ 8]  568 	mov	r2,dpl
      000308 AB 83            [ 8]  569 	mov	r3,dph
      00030A AC 93            [ 8]  570 	mov	r4,dpx
      00030C AD F0            [ 8]  571 	mov	r5,b
      00030E D0 01            [ 8]  572 	pop	ar1
      000310 D0 00            [ 8]  573 	pop	ar0
      000312 D0 07            [ 8]  574 	pop	ar7
      000314 D0 06            [ 8]  575 	pop	ar6
                                    576 ;	genAssign: resultIsFar = TRUE
      000316 90s00r00r00      [12]  577 	mov	dptr,#___fssub_PARM_2
      00031A EA               [ 4]  578 	mov	a,r2
      00031B F0               [ 8]  579 	movx	@dptr,a
      00031C A3               [12]  580 	inc	dptr
      00031D EB               [ 4]  581 	mov	a,r3
      00031E F0               [ 8]  582 	movx	@dptr,a
      00031F A3               [12]  583 	inc	dptr
      000320 EC               [ 4]  584 	mov	a,r4
      000321 F0               [ 8]  585 	movx	@dptr,a
      000322 A3               [12]  586 	inc	dptr
      000323 ED               [ 4]  587 	mov	a,r5
      000324 F0               [ 8]  588 	movx	@dptr,a
      000325 8E 82            [ 8]  589 	mov	dpl,r6
      000327 8F 83            [ 8]  590 	mov	dph,r7
      000329 88 93            [ 8]  591 	mov	dpx,r0
      00032B 89 F0            [ 8]  592 	mov	b,r1
      00032D 12s00r00r00      [16]  593 	lcall	___fssub
      000331 AA 82            [ 8]  594 	mov	r2,dpl
      000333 AB 83            [ 8]  595 	mov	r3,dph
      000335 AC 93            [ 8]  596 	mov	r4,dpx
      000337 AD F0            [ 8]  597 	mov	r5,b
      000339 75 93 40         [12]  598 	mov	dpx,#0x40
      00033C 85*01 83         [12]  599 	mov	dph,_bpx+1
      00033F 85*00 82         [12]  600 	mov	dpl,_bpx
      000342 A3               [12]  601 	inc	dptr
      000343 A3               [12]  602 	inc	dptr
      000344 A3               [12]  603 	inc	dptr
                                    604 ;	genAssign: resultIsFar = TRUE
      000345 75 86 21         [12]  605 	mov	dps,#0x21
      000348 90s00r00r00      [12]  606 	mov	dptr,#___fsmul_PARM_2
      00034C E0               [ 8]  607 	movx	a,@dptr
      00034D F0               [ 8]  608 	movx	@dptr,a
      00034E A3               [12]  609 	inc	dptr
      00034F A3               [12]  610 	inc	dptr
      000350 E0               [ 8]  611 	movx	a,@dptr
      000351 F0               [ 8]  612 	movx	@dptr,a
      000352 A3               [12]  613 	inc	dptr
      000353 A3               [12]  614 	inc	dptr
      000354 E0               [ 8]  615 	movx	a,@dptr
      000355 F0               [ 8]  616 	movx	@dptr,a
      000356 A3               [12]  617 	inc	dptr
      000357 A3               [12]  618 	inc	dptr
      000358 E0               [ 8]  619 	movx	a,@dptr
      000359 F0               [ 8]  620 	movx	@dptr,a
      00035A 75 86 00         [12]  621 	mov	dps,#0
      00035D C0 02            [ 8]  622 	push	ar2
      00035F C0 03            [ 8]  623 	push	ar3
      000361 C0 04            [ 8]  624 	push	ar4
      000363 C0 05            [ 8]  625 	push	ar5
      000365 90 5E 80 83      [12]  626 	mov	dptr,#0x5e8083
      000369 75 F0 B9         [12]  627 	mov	b,#0xb9
      00036C 12s00r00r00      [16]  628 	lcall	___fsmul
      000370 AE 82            [ 8]  629 	mov	r6,dpl
      000372 AF 83            [ 8]  630 	mov	r7,dph
      000374 A8 93            [ 8]  631 	mov	r0,dpx
      000376 A9 F0            [ 8]  632 	mov	r1,b
      000378 D0 05            [ 8]  633 	pop	ar5
      00037A D0 04            [ 8]  634 	pop	ar4
      00037C D0 03            [ 8]  635 	pop	ar3
      00037E D0 02            [ 8]  636 	pop	ar2
                                    637 ;	genAssign: resultIsFar = TRUE
      000380 90s00r00r00      [12]  638 	mov	dptr,#___fssub_PARM_2
      000384 EE               [ 4]  639 	mov	a,r6
      000385 F0               [ 8]  640 	movx	@dptr,a
      000386 A3               [12]  641 	inc	dptr
      000387 EF               [ 4]  642 	mov	a,r7
      000388 F0               [ 8]  643 	movx	@dptr,a
      000389 A3               [12]  644 	inc	dptr
      00038A E8               [ 4]  645 	mov	a,r0
      00038B F0               [ 8]  646 	movx	@dptr,a
      00038C A3               [12]  647 	inc	dptr
      00038D E9               [ 4]  648 	mov	a,r1
      00038E F0               [ 8]  649 	movx	@dptr,a
      00038F 8A 82            [ 8]  650 	mov	dpl,r2
      000391 8B 83            [ 8]  651 	mov	dph,r3
      000393 8C 93            [ 8]  652 	mov	dpx,r4
      000395 8D F0            [ 8]  653 	mov	b,r5
      000397 12s00r00r00      [16]  654 	lcall	___fssub
      00039B AA 82            [ 8]  655 	mov	r2,dpl
      00039D AB 83            [ 8]  656 	mov	r3,dph
      00039F AC 93            [ 8]  657 	mov	r4,dpx
      0003A1 AD F0            [ 8]  658 	mov	r5,b
                                    659 ;	genAssign: resultIsFar = TRUE
                                    660 ;	expf.c:365: z=g*g;
                                    661 ;	genAssign: resultIsFar = TRUE
      0003A3 90s00r00r00      [12]  662 	mov	dptr,#___fsmul_PARM_2
      0003A7 EA               [ 4]  663 	mov	a,r2
      0003A8 F0               [ 8]  664 	movx	@dptr,a
      0003A9 A3               [12]  665 	inc	dptr
      0003AA EB               [ 4]  666 	mov	a,r3
      0003AB F0               [ 8]  667 	movx	@dptr,a
      0003AC A3               [12]  668 	inc	dptr
      0003AD EC               [ 4]  669 	mov	a,r4
      0003AE F0               [ 8]  670 	movx	@dptr,a
      0003AF A3               [12]  671 	inc	dptr
      0003B0 ED               [ 4]  672 	mov	a,r5
      0003B1 F0               [ 8]  673 	movx	@dptr,a
      0003B2 C0 02            [ 8]  674 	push	ar2
      0003B4 C0 03            [ 8]  675 	push	ar3
      0003B6 C0 04            [ 8]  676 	push	ar4
      0003B8 C0 05            [ 8]  677 	push	ar5
      0003BA 8A 82            [ 8]  678 	mov	dpl,r2
      0003BC 8B 83            [ 8]  679 	mov	dph,r3
      0003BE 8C 93            [ 8]  680 	mov	dpx,r4
      0003C0 8D F0            [ 8]  681 	mov	b,r5
      0003C2 12s00r00r00      [16]  682 	lcall	___fsmul
      0003C6 AE 82            [ 8]  683 	mov	r6,dpl
      0003C8 AF 83            [ 8]  684 	mov	r7,dph
      0003CA A8 93            [ 8]  685 	mov	r0,dpx
      0003CC A9 F0            [ 8]  686 	mov	r1,b
      0003CE D0 05            [ 8]  687 	pop	ar5
      0003D0 D0 04            [ 8]  688 	pop	ar4
      0003D2 D0 03            [ 8]  689 	pop	ar3
      0003D4 D0 02            [ 8]  690 	pop	ar2
                                    691 ;	genAssign: resultIsFar = TRUE
      0003D6 E5*00            [ 8]  692 	mov	a,_bpx
      0003D8 C3               [ 4]  693 	clr	c
      0003D9 94 F9            [ 8]  694 	subb	a,#0xf9
      0003DB F5 82            [ 8]  695 	mov	dpl,a
      0003DD E5*01            [ 8]  696 	mov	a,_bpx+1
      0003DF 94 FF            [ 8]  697 	subb	a,#0xff
      0003E1 F5 83            [ 8]  698 	mov	dph,a
      0003E3 75 93 40         [12]  699 	mov	dpx,#0x40
      0003E6 EE               [ 4]  700 	mov	a,r6
      0003E7 F0               [ 8]  701 	movx	@dptr,a
      0003E8 A3               [12]  702 	inc	dptr
      0003E9 EF               [ 4]  703 	mov	a,r7
      0003EA F0               [ 8]  704 	movx	@dptr,a
      0003EB A3               [12]  705 	inc	dptr
      0003EC E8               [ 4]  706 	mov	a,r0
      0003ED F0               [ 8]  707 	movx	@dptr,a
      0003EE A3               [12]  708 	inc	dptr
      0003EF E9               [ 4]  709 	mov	a,r1
      0003F0 F0               [ 8]  710 	movx	@dptr,a
                                    711 ;	expf.c:366: r=P(z)*g;
      0003F1 E5*00            [ 8]  712 	mov	a,_bpx
      0003F3 C3               [ 4]  713 	clr	c
      0003F4 94 F9            [ 8]  714 	subb	a,#0xf9
      0003F6 F5 82            [ 8]  715 	mov	dpl,a
      0003F8 E5*01            [ 8]  716 	mov	a,_bpx+1
      0003FA 94 FF            [ 8]  717 	subb	a,#0xff
      0003FC F5 83            [ 8]  718 	mov	dph,a
      0003FE 75 93 40         [12]  719 	mov	dpx,#0x40
                                    720 ;	genAssign: resultIsFar = TRUE
      000401 75 86 21         [12]  721 	mov	dps,#0x21
      000404 90s00r00r00      [12]  722 	mov	dptr,#___fsmul_PARM_2
      000408 E0               [ 8]  723 	movx	a,@dptr
      000409 F0               [ 8]  724 	movx	@dptr,a
      00040A A3               [12]  725 	inc	dptr
      00040B A3               [12]  726 	inc	dptr
      00040C E0               [ 8]  727 	movx	a,@dptr
      00040D F0               [ 8]  728 	movx	@dptr,a
      00040E A3               [12]  729 	inc	dptr
      00040F A3               [12]  730 	inc	dptr
      000410 E0               [ 8]  731 	movx	a,@dptr
      000411 F0               [ 8]  732 	movx	@dptr,a
      000412 A3               [12]  733 	inc	dptr
      000413 A3               [12]  734 	inc	dptr
      000414 E0               [ 8]  735 	movx	a,@dptr
      000415 F0               [ 8]  736 	movx	@dptr,a
      000416 75 86 00         [12]  737 	mov	dps,#0
      000419 C0 02            [ 8]  738 	push	ar2
      00041B C0 03            [ 8]  739 	push	ar3
      00041D C0 04            [ 8]  740 	push	ar4
      00041F C0 05            [ 8]  741 	push	ar5
      000421 90 88 53 08      [12]  742 	mov	dptr,#0x885308
      000425 75 F0 3B         [12]  743 	mov	b,#0x3b
      000428 12s00r00r00      [16]  744 	lcall	___fsmul
      00042C AE 82            [ 8]  745 	mov	r6,dpl
      00042E AF 83            [ 8]  746 	mov	r7,dph
      000430 A8 93            [ 8]  747 	mov	r0,dpx
      000432 A9 F0            [ 8]  748 	mov	r1,b
      000434 D0 05            [ 8]  749 	pop	ar5
      000436 D0 04            [ 8]  750 	pop	ar4
      000438 D0 03            [ 8]  751 	pop	ar3
      00043A D0 02            [ 8]  752 	pop	ar2
                                    753 ;	genAssign: resultIsFar = TRUE
      00043C 90s00r00r00      [12]  754 	mov	dptr,#___fsadd_PARM_2
      000440 E4               [ 4]  755 	clr	a
      000441 F0               [ 8]  756 	movx	@dptr,a
      000442 A3               [12]  757 	inc	dptr
      000443 E4               [ 4]  758 	clr	a
      000444 F0               [ 8]  759 	movx	@dptr,a
      000445 A3               [12]  760 	inc	dptr
      000446 74 80            [ 8]  761 	mov	a,#0x80
      000448 F0               [ 8]  762 	movx	@dptr,a
      000449 A3               [12]  763 	inc	dptr
      00044A 74 3E            [ 8]  764 	mov	a,#0x3e
      00044C F0               [ 8]  765 	movx	@dptr,a
      00044D C0 02            [ 8]  766 	push	ar2
      00044F C0 03            [ 8]  767 	push	ar3
      000451 C0 04            [ 8]  768 	push	ar4
      000453 C0 05            [ 8]  769 	push	ar5
      000455 8E 82            [ 8]  770 	mov	dpl,r6
      000457 8F 83            [ 8]  771 	mov	dph,r7
      000459 88 93            [ 8]  772 	mov	dpx,r0
      00045B 89 F0            [ 8]  773 	mov	b,r1
      00045D 12s00r00r00      [16]  774 	lcall	___fsadd
      000461 AE 82            [ 8]  775 	mov	r6,dpl
      000463 AF 83            [ 8]  776 	mov	r7,dph
      000465 A8 93            [ 8]  777 	mov	r0,dpx
      000467 A9 F0            [ 8]  778 	mov	r1,b
      000469 D0 05            [ 8]  779 	pop	ar5
      00046B D0 04            [ 8]  780 	pop	ar4
      00046D D0 03            [ 8]  781 	pop	ar3
      00046F D0 02            [ 8]  782 	pop	ar2
                                    783 ;	genAssign: resultIsFar = TRUE
      000471 90s00r00r00      [12]  784 	mov	dptr,#___fsmul_PARM_2
      000475 EA               [ 4]  785 	mov	a,r2
      000476 F0               [ 8]  786 	movx	@dptr,a
      000477 A3               [12]  787 	inc	dptr
      000478 EB               [ 4]  788 	mov	a,r3
      000479 F0               [ 8]  789 	movx	@dptr,a
      00047A A3               [12]  790 	inc	dptr
      00047B EC               [ 4]  791 	mov	a,r4
      00047C F0               [ 8]  792 	movx	@dptr,a
      00047D A3               [12]  793 	inc	dptr
      00047E ED               [ 4]  794 	mov	a,r5
      00047F F0               [ 8]  795 	movx	@dptr,a
      000480 8E 82            [ 8]  796 	mov	dpl,r6
      000482 8F 83            [ 8]  797 	mov	dph,r7
      000484 88 93            [ 8]  798 	mov	dpx,r0
      000486 89 F0            [ 8]  799 	mov	b,r1
      000488 12s00r00r00      [16]  800 	lcall	___fsmul
                                    801 ;	genAssign: resultIsFar = FALSE
      00048C AA 82            [ 8]  802 	mov	r2,dpl
      00048E AB 83            [ 8]  803 	mov	r3,dph
      000490 AC 93            [ 8]  804 	mov	r4,dpx
      000492 AD F0            [ 8]  805 	mov	r5,b
                                    806 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      000494 E5*00            [ 8]  807 	mov	a,_bpx
      000496 C3               [ 4]  808 	clr	c
      000497 94 F9            [ 8]  809 	subb	a,#0xf9
      000499 F5 82            [ 8]  810 	mov	dpl,a
      00049B E5*01            [ 8]  811 	mov	a,_bpx+1
      00049D 94 FF            [ 8]  812 	subb	a,#0xff
      00049F F5 83            [ 8]  813 	mov	dph,a
      0004A1 75 93 40         [12]  814 	mov	dpx,#0x40
                                    815 ;	genAssign: resultIsFar = TRUE
      0004A4 75 86 21         [12]  816 	mov	dps,#0x21
      0004A7 90s00r00r00      [12]  817 	mov	dptr,#___fsmul_PARM_2
      0004AB E0               [ 8]  818 	movx	a,@dptr
      0004AC F0               [ 8]  819 	movx	@dptr,a
      0004AD A3               [12]  820 	inc	dptr
      0004AE A3               [12]  821 	inc	dptr
      0004AF E0               [ 8]  822 	movx	a,@dptr
      0004B0 F0               [ 8]  823 	movx	@dptr,a
      0004B1 A3               [12]  824 	inc	dptr
      0004B2 A3               [12]  825 	inc	dptr
      0004B3 E0               [ 8]  826 	movx	a,@dptr
      0004B4 F0               [ 8]  827 	movx	@dptr,a
      0004B5 A3               [12]  828 	inc	dptr
      0004B6 A3               [12]  829 	inc	dptr
      0004B7 E0               [ 8]  830 	movx	a,@dptr
      0004B8 F0               [ 8]  831 	movx	@dptr,a
      0004B9 75 86 00         [12]  832 	mov	dps,#0
      0004BC C0 02            [ 8]  833 	push	ar2
      0004BE C0 03            [ 8]  834 	push	ar3
      0004C0 C0 04            [ 8]  835 	push	ar4
      0004C2 C0 05            [ 8]  836 	push	ar5
      0004C4 90 4C BF 5B      [12]  837 	mov	dptr,#0x4cbf5b
      0004C8 75 F0 3D         [12]  838 	mov	b,#0x3d
      0004CB 12s00r00r00      [16]  839 	lcall	___fsmul
      0004CF AE 82            [ 8]  840 	mov	r6,dpl
      0004D1 AF 83            [ 8]  841 	mov	r7,dph
      0004D3 A8 93            [ 8]  842 	mov	r0,dpx
      0004D5 A9 F0            [ 8]  843 	mov	r1,b
      0004D7 D0 05            [ 8]  844 	pop	ar5
      0004D9 D0 04            [ 8]  845 	pop	ar4
      0004DB D0 03            [ 8]  846 	pop	ar3
      0004DD D0 02            [ 8]  847 	pop	ar2
                                    848 ;	genAssign: resultIsFar = TRUE
      0004DF 90s00r00r00      [12]  849 	mov	dptr,#___fsadd_PARM_2
      0004E3 E4               [ 4]  850 	clr	a
      0004E4 F0               [ 8]  851 	movx	@dptr,a
      0004E5 A3               [12]  852 	inc	dptr
      0004E6 E4               [ 4]  853 	clr	a
      0004E7 F0               [ 8]  854 	movx	@dptr,a
      0004E8 A3               [12]  855 	inc	dptr
      0004E9 E4               [ 4]  856 	clr	a
      0004EA F0               [ 8]  857 	movx	@dptr,a
      0004EB A3               [12]  858 	inc	dptr
      0004EC 74 3F            [ 8]  859 	mov	a,#0x3f
      0004EE F0               [ 8]  860 	movx	@dptr,a
      0004EF C0 02            [ 8]  861 	push	ar2
      0004F1 C0 03            [ 8]  862 	push	ar3
      0004F3 C0 04            [ 8]  863 	push	ar4
      0004F5 C0 05            [ 8]  864 	push	ar5
      0004F7 8E 82            [ 8]  865 	mov	dpl,r6
      0004F9 8F 83            [ 8]  866 	mov	dph,r7
      0004FB 88 93            [ 8]  867 	mov	dpx,r0
      0004FD 89 F0            [ 8]  868 	mov	b,r1
      0004FF 12s00r00r00      [16]  869 	lcall	___fsadd
      000503 AE 82            [ 8]  870 	mov	r6,dpl
      000505 AF 83            [ 8]  871 	mov	r7,dph
      000507 A8 93            [ 8]  872 	mov	r0,dpx
      000509 A9 F0            [ 8]  873 	mov	r1,b
      00050B D0 05            [ 8]  874 	pop	ar5
      00050D D0 04            [ 8]  875 	pop	ar4
      00050F D0 03            [ 8]  876 	pop	ar3
      000511 D0 02            [ 8]  877 	pop	ar2
                                    878 ;	genAssign: resultIsFar = TRUE
      000513 90s00r00r00      [12]  879 	mov	dptr,#___fssub_PARM_2
      000517 EA               [ 4]  880 	mov	a,r2
      000518 F0               [ 8]  881 	movx	@dptr,a
      000519 A3               [12]  882 	inc	dptr
      00051A EB               [ 4]  883 	mov	a,r3
      00051B F0               [ 8]  884 	movx	@dptr,a
      00051C A3               [12]  885 	inc	dptr
      00051D EC               [ 4]  886 	mov	a,r4
      00051E F0               [ 8]  887 	movx	@dptr,a
      00051F A3               [12]  888 	inc	dptr
      000520 ED               [ 4]  889 	mov	a,r5
      000521 F0               [ 8]  890 	movx	@dptr,a
      000522 C0 02            [ 8]  891 	push	ar2
      000524 C0 03            [ 8]  892 	push	ar3
      000526 C0 04            [ 8]  893 	push	ar4
      000528 C0 05            [ 8]  894 	push	ar5
      00052A 8E 82            [ 8]  895 	mov	dpl,r6
      00052C 8F 83            [ 8]  896 	mov	dph,r7
      00052E 88 93            [ 8]  897 	mov	dpx,r0
      000530 89 F0            [ 8]  898 	mov	b,r1
      000532 12s00r00r00      [16]  899 	lcall	___fssub
      000536 AE 82            [ 8]  900 	mov	r6,dpl
      000538 AF 83            [ 8]  901 	mov	r7,dph
      00053A A8 93            [ 8]  902 	mov	r0,dpx
      00053C A9 F0            [ 8]  903 	mov	r1,b
      00053E D0 05            [ 8]  904 	pop	ar5
      000540 D0 04            [ 8]  905 	pop	ar4
      000542 D0 03            [ 8]  906 	pop	ar3
      000544 D0 02            [ 8]  907 	pop	ar2
                                    908 ;	genAssign: resultIsFar = TRUE
      000546 90s00r00r00      [12]  909 	mov	dptr,#___fsdiv_PARM_2
      00054A EE               [ 4]  910 	mov	a,r6
      00054B F0               [ 8]  911 	movx	@dptr,a
      00054C A3               [12]  912 	inc	dptr
      00054D EF               [ 4]  913 	mov	a,r7
      00054E F0               [ 8]  914 	movx	@dptr,a
      00054F A3               [12]  915 	inc	dptr
      000550 E8               [ 4]  916 	mov	a,r0
      000551 F0               [ 8]  917 	movx	@dptr,a
      000552 A3               [12]  918 	inc	dptr
      000553 E9               [ 4]  919 	mov	a,r1
      000554 F0               [ 8]  920 	movx	@dptr,a
      000555 8A 82            [ 8]  921 	mov	dpl,r2
      000557 8B 83            [ 8]  922 	mov	dph,r3
      000559 8C 93            [ 8]  923 	mov	dpx,r4
      00055B 8D F0            [ 8]  924 	mov	b,r5
      00055D 12s00r00r00      [16]  925 	lcall	___fsdiv
      000561 AA 82            [ 8]  926 	mov	r2,dpl
      000563 AB 83            [ 8]  927 	mov	r3,dph
      000565 AC 93            [ 8]  928 	mov	r4,dpx
      000567 AD F0            [ 8]  929 	mov	r5,b
                                    930 ;	genAssign: resultIsFar = TRUE
      000569 90s00r00r00      [12]  931 	mov	dptr,#___fsadd_PARM_2
      00056D E4               [ 4]  932 	clr	a
      00056E F0               [ 8]  933 	movx	@dptr,a
      00056F A3               [12]  934 	inc	dptr
      000570 E4               [ 4]  935 	clr	a
      000571 F0               [ 8]  936 	movx	@dptr,a
      000572 A3               [12]  937 	inc	dptr
      000573 E4               [ 4]  938 	clr	a
      000574 F0               [ 8]  939 	movx	@dptr,a
      000575 A3               [12]  940 	inc	dptr
      000576 74 3F            [ 8]  941 	mov	a,#0x3f
      000578 F0               [ 8]  942 	movx	@dptr,a
      000579 8A 82            [ 8]  943 	mov	dpl,r2
      00057B 8B 83            [ 8]  944 	mov	dph,r3
      00057D 8C 93            [ 8]  945 	mov	dpx,r4
      00057F 8D F0            [ 8]  946 	mov	b,r5
      000581 12s00r00r00      [16]  947 	lcall	___fsadd
      000585 AA 82            [ 8]  948 	mov	r2,dpl
      000587 AB 83            [ 8]  949 	mov	r3,dph
      000589 AC 93            [ 8]  950 	mov	r4,dpx
      00058B AD F0            [ 8]  951 	mov	r5,b
                                    952 ;	expf.c:369: n++;
      00058D 75 93 40         [12]  953 	mov	dpx,#0x40
      000590 85*01 83         [12]  954 	mov	dph,_bpx+1
      000593 85*00 82         [12]  955 	mov	dpl,_bpx
      000596 A3               [12]  956 	inc	dptr
      000597 75 86 01         [12]  957 	mov	dps, #1
      00059A 90s00r00r00      [12]  958 	mov	dptr, #_ldexpf_PARM_2
      00059E 15 86            [ 8]  959 	dec	dps
      0005A0 E0               [ 8]  960 	movx	a,@dptr
      0005A1 24 01            [ 8]  961 	add	a,#0x01
      0005A3 05 86            [ 8]  962 	inc	dps
      0005A5 F0               [ 8]  963 	movx	@dptr,a
      0005A6 15 86            [ 8]  964 	dec	dps
      0005A8 A3               [12]  965 	inc	dptr
      0005A9 E0               [ 8]  966 	movx	a,@dptr
      0005AA 34 00            [ 8]  967 	addc	a,#0x00
      0005AC 05 86            [ 8]  968 	inc	dps
      0005AE A3               [12]  969 	inc	dptr
      0005AF F0               [ 8]  970 	movx	@dptr,a
      0005B0 75 86 00         [12]  971 	mov	dps,#0
                                    972 ;	expf.c:370: z=ldexpf(r, n);
      0005B3 8A 82            [ 8]  973 	mov	dpl,r2
      0005B5 8B 83            [ 8]  974 	mov	dph,r3
      0005B7 8C 93            [ 8]  975 	mov	dpx,r4
      0005B9 8D F0            [ 8]  976 	mov	b,r5
      0005BB 12s00r00r00      [16]  977 	lcall	_ldexpf
                                    978 ;	genAssign: resultIsFar = FALSE
      0005BF AA 82            [ 8]  979 	mov	r2,dpl
      0005C1 AB 83            [ 8]  980 	mov	r3,dph
      0005C3 AC 93            [ 8]  981 	mov	r4,dpx
      0005C5 AD F0            [ 8]  982 	mov	r5,b
                                    983 ;	expf.c:371: if(sign)
      0005C7 E5*00            [ 8]  984 	mov	a,_bpx
      0005C9 C3               [ 4]  985 	clr	c
      0005CA 94 F5            [ 8]  986 	subb	a,#0xf5
      0005CC F5 82            [ 8]  987 	mov	dpl,a
      0005CE E5*01            [ 8]  988 	mov	a,_bpx+1
      0005D0 94 FF            [ 8]  989 	subb	a,#0xff
      0005D2 F5 83            [ 8]  990 	mov	dph,a
      0005D4 75 93 40         [12]  991 	mov	dpx,#0x40
      0005D7 E0               [ 8]  992 	movx	a,@dptr
      0005D8 60 1F            [12]  993 	jz  00116$
      0005DA                        994 00161$:
                                    995 ;	expf.c:372: return 1.0/z;
                                    996 ;	genAssign: resultIsFar = TRUE
      0005DA 90s00r00r00      [12]  997 	mov	dptr,#___fsdiv_PARM_2
      0005DE EA               [ 4]  998 	mov	a,r2
      0005DF F0               [ 8]  999 	movx	@dptr,a
      0005E0 A3               [12] 1000 	inc	dptr
      0005E1 EB               [ 4] 1001 	mov	a,r3
      0005E2 F0               [ 8] 1002 	movx	@dptr,a
      0005E3 A3               [12] 1003 	inc	dptr
      0005E4 EC               [ 4] 1004 	mov	a,r4
      0005E5 F0               [ 8] 1005 	movx	@dptr,a
      0005E6 A3               [12] 1006 	inc	dptr
      0005E7 ED               [ 4] 1007 	mov	a,r5
      0005E8 F0               [ 8] 1008 	movx	@dptr,a
      0005E9 90 00 00 00      [12] 1009 	mov  dptr,#0x0000
      0005ED 75 93 80         [12] 1010 	mov	dpx,#0x80
      0005F0 75 F0 3F         [12] 1011 	mov	b,#0x3f
      0005F3 12s00r00r00      [16] 1012 	lcall	___fsdiv
      0005F7 80 08            [12] 1013 	sjmp 00118$
      0005F9                       1014 00116$:
                                   1015 ;	expf.c:374: return z;
      0005F9 8A 82            [ 8] 1016 	mov	dpl,r2
      0005FB 8B 83            [ 8] 1017 	mov	dph,r3
      0005FD 8C 93            [ 8] 1018 	mov	dpx,r4
      0005FF 8D F0            [ 8] 1019 	mov	b,r5
      000601                       1020 00118$:
                                   1021 ;	expf.c:375: }
      000601 85*00 81         [12] 1022 	mov	sp,_bpx
      000604 85*01 9B         [12] 1023 	mov	esp,_bpx+1
      000607 D0*01            [ 8] 1024 	pop	_bpx+1
      000609 D0*00            [ 8] 1025 	pop	_bpx
      00060B 22               [16] 1026 	ret
                                   1027 	.area CSEG    (CODE)
                                   1028 	.area CONST   (CODE)
                                   1029 	.area XINIT   (CODE)
                                   1030 	.area CABS    (ABS,CODE)
