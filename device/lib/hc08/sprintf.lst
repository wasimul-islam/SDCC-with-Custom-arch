                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module sprintf
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl __print_format
                             23 	.globl _vsprintf_PARM_3
                             24 	.globl _vsprintf_PARM_2
                             25 	.globl _vsprintf
                             26 	.globl _sprintf
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area DSEG    (PAG)
                             31 ;--------------------------------------------------------
                             32 ; overlayable items in ram
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; absolute ram data
                             36 ;--------------------------------------------------------
                             37 	.area IABS    (ABS)
                             38 	.area IABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area XABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; initialized external ram data
                             45 ;--------------------------------------------------------
                             46 	.area XISEG
                             47 ;--------------------------------------------------------
                             48 ; extended address mode data
                             49 ;--------------------------------------------------------
                             50 	.area XSEG
   0000                      51 _vsprintf_PARM_2:
   0000                      52 	.ds 2
   0002                      53 _vsprintf_PARM_3:
   0002                      54 	.ds 2
   0004                      55 _vsprintf_buf_65536_13:
   0004                      56 	.ds 2
   0006                      57 _vsprintf_i_65536_14:
   0006                      58 	.ds 2
                             59 ;--------------------------------------------------------
                             60 ; global & static initialisations
                             61 ;--------------------------------------------------------
                             62 	.area HOME    (CODE)
                             63 	.area GSINIT  (CODE)
                             64 	.area GSFINAL (CODE)
                             65 	.area GSINIT  (CODE)
                             66 ;--------------------------------------------------------
                             67 ; Home
                             68 ;--------------------------------------------------------
                             69 	.area HOME    (CODE)
                             70 	.area HOME    (CODE)
                             71 ;--------------------------------------------------------
                             72 ; code
                             73 ;--------------------------------------------------------
                             74 	.area CSEG    (CODE)
                             75 ;------------------------------------------------------------
                             76 ;Allocation info for local variables in function 'put_char_to_string'
                             77 ;------------------------------------------------------------
                             78 ;p                         Allocated to stack - sp +7
                             79 ;c                         Allocated to registers a 
                             80 ;buf                       Allocated to registers x h 
                             81 ;sloc0                     Allocated to stack - sp +3
                             82 ;sloc1                     Allocated to stack - sp +1
                             83 ;------------------------------------------------------------
                             84 ;../sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                             85 ;	-----------------------------------------
                             86 ;	 function put_char_to_string
                             87 ;	-----------------------------------------
                             88 ;	Register assignment is optimal.
                             89 ;	Stack space usage: 4 bytes.
   0000                      90 _put_char_to_string:
   0000 A7 FC         [ 2]   91 	ais	#-4
                             92 ;../sprintf.c:36: char **buf = (char **)p;
   0002 9E EE 07      [ 4]   93 	ldx	7,s
   0005 89            [ 2]   94 	pshx
   0006 8A            [ 2]   95 	pulh
   0007 9E EE 08      [ 4]   96 	ldx	8,s
                             97 ;../sprintf.c:37: *(*buf)++ = c;
   000A 87            [ 2]   98 	psha
   000B F6            [ 2]   99 	lda	,x
   000C 9E E7 04      [ 4]  100 	sta	4,s
   000F E6 01         [ 3]  101 	lda	1,x
   0011 9E E7 05      [ 4]  102 	sta	5,s
   0014 9E E6 05      [ 4]  103 	lda	5,s
   0017 AB 01         [ 2]  104 	add	#0x01
   0019 9E E7 03      [ 4]  105 	sta	3,s
   001C 9E E6 04      [ 4]  106 	lda	4,s
   001F A9 00         [ 2]  107 	adc	#0
   0021 9E E7 02      [ 4]  108 	sta	2,s
   0024 9E E6 02      [ 4]  109 	lda	2,s
   0027 F7            [ 2]  110 	sta	,x
   0028 9E E6 03      [ 4]  111 	lda	3,s
   002B E7 01         [ 3]  112 	sta	1,x
   002D 86            [ 2]  113 	pula
   002E 9E EE 03      [ 4]  114 	ldx	3,s
   0031 89            [ 2]  115 	pshx
   0032 8A            [ 2]  116 	pulh
   0033 9E EE 04      [ 4]  117 	ldx	4,s
   0036 F7            [ 2]  118 	sta	,x
                            119 ;../sprintf.c:38: }
   0037 A7 04         [ 2]  120 	ais	#4
   0039 81            [ 4]  121 	rts
                            122 ;------------------------------------------------------------
                            123 ;Allocation info for local variables in function 'vsprintf'
                            124 ;------------------------------------------------------------
                            125 ;format                    Allocated with name '_vsprintf_PARM_2'
                            126 ;ap                        Allocated with name '_vsprintf_PARM_3'
                            127 ;buf                       Allocated with name '_vsprintf_buf_65536_13'
                            128 ;i                         Allocated with name '_vsprintf_i_65536_14'
                            129 ;------------------------------------------------------------
                            130 ;../sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            131 ;	-----------------------------------------
                            132 ;	 function vsprintf
                            133 ;	-----------------------------------------
                            134 ;	Register assignment is optimal.
                            135 ;	Stack space usage: 0 bytes.
   003A                     136 _vsprintf:
   003A C7r00r05      [ 4]  137 	sta	(_vsprintf_buf_65536_13 + 1)
   003D CFr00r04      [ 4]  138 	stx	_vsprintf_buf_65536_13
                            139 ;../sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0040 A6r04         [ 2]  140 	lda	#_vsprintf_buf_65536_13
   0042 C7r00r01      [ 4]  141 	sta	(__print_format_PARM_2 + 1)
   0045 A6s00         [ 2]  142 	lda	#>_vsprintf_buf_65536_13
   0047 C7r00r00      [ 4]  143 	sta	__print_format_PARM_2
   004A C6r00r00      [ 4]  144 	lda	_vsprintf_PARM_2
   004D C7r00r00      [ 4]  145 	sta	__print_format_PARM_3
   0050 C6r00r01      [ 4]  146 	lda	(_vsprintf_PARM_2 + 1)
   0053 C7r00r01      [ 4]  147 	sta	(__print_format_PARM_3 + 1)
   0056 C6r00r02      [ 4]  148 	lda	_vsprintf_PARM_3
   0059 C7r00r00      [ 4]  149 	sta	__print_format_PARM_4
   005C C6r00r03      [ 4]  150 	lda	(_vsprintf_PARM_3 + 1)
   005F C7r00r01      [ 4]  151 	sta	(__print_format_PARM_4 + 1)
   0062 A6r00         [ 2]  152 	lda	#_put_char_to_string
   0064 AEs00         [ 2]  153 	ldx	#>_put_char_to_string
   0066 CDr00r00      [ 5]  154 	jsr	__print_format
   0069 C7r00r07      [ 4]  155 	sta	(_vsprintf_i_65536_14 + 1)
   006C CFr00r06      [ 4]  156 	stx	_vsprintf_i_65536_14
                            157 ;../sprintf.c:45: *buf = 0;
   006F C6r00r04      [ 4]  158 	lda	_vsprintf_buf_65536_13
   0072 CEr00r05      [ 4]  159 	ldx	(_vsprintf_buf_65536_13 + 1)
   0075 87            [ 2]  160 	psha
   0076 8A            [ 2]  161 	pulh
   0077 4F            [ 1]  162 	clra
   0078 F7            [ 2]  163 	sta	,x
                            164 ;../sprintf.c:46: return i;
   0079 CEr00r06      [ 4]  165 	ldx	_vsprintf_i_65536_14
   007C C6r00r07      [ 4]  166 	lda	(_vsprintf_i_65536_14 + 1)
                            167 ;../sprintf.c:47: }
   007F 81            [ 4]  168 	rts
                            169 ;------------------------------------------------------------
                            170 ;Allocation info for local variables in function 'sprintf'
                            171 ;------------------------------------------------------------
                            172 ;buf                       Allocated to stack - sp +5
                            173 ;format                    Allocated to stack - sp +7
                            174 ;arg                       Allocated to registers 
                            175 ;i                         Allocated to stack - sp +1
                            176 ;------------------------------------------------------------
                            177 ;../sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            178 ;	-----------------------------------------
                            179 ;	 function sprintf
                            180 ;	-----------------------------------------
                            181 ;	Register assignment is optimal.
                            182 ;	Stack space usage: 2 bytes.
   0080                     183 _sprintf:
   0080 A7 FE         [ 2]  184 	ais	#-2
                            185 ;../sprintf.c:55: va_start (arg, format);
   0082 95            [ 2]  186 	tsx
   0083 AF 06         [ 2]  187 	aix	#6
   0085 AF 02         [ 2]  188 	aix	#2
   0087 8B            [ 2]  189 	pshh
   0088 86            [ 2]  190 	pula
   0089 C7r00r00      [ 4]  191 	sta	__print_format_PARM_4
   008C CFr00r01      [ 4]  192 	stx	(__print_format_PARM_4 + 1)
                            193 ;../sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   008F 95            [ 2]  194 	tsx
   0090 AF 04         [ 2]  195 	aix	#4
   0092 CFr00r01      [ 4]  196 	stx	(__print_format_PARM_2 + 1)
   0095 8B            [ 2]  197 	pshh
   0096 86            [ 2]  198 	pula
   0097 C7r00r00      [ 4]  199 	sta	__print_format_PARM_2
   009A 95            [ 2]  200 	tsx
   009B E6 06         [ 3]  201 	lda	6,x
   009D C7r00r00      [ 4]  202 	sta	__print_format_PARM_3
   00A0 E6 07         [ 3]  203 	lda	7,x
   00A2 C7r00r01      [ 4]  204 	sta	(__print_format_PARM_3 + 1)
   00A5 A6r00         [ 2]  205 	lda	#_put_char_to_string
   00A7 AEs00         [ 2]  206 	ldx	#>_put_char_to_string
   00A9 CDr00r00      [ 5]  207 	jsr	__print_format
   00AC 9E E7 02      [ 4]  208 	sta	2,s
   00AF 9E EF 01      [ 4]  209 	stx	1,s
                            210 ;../sprintf.c:57: *buf = 0;
   00B2 9E E6 05      [ 4]  211 	lda	5,s
   00B5 9E EE 06      [ 4]  212 	ldx	6,s
   00B8 87            [ 2]  213 	psha
   00B9 8A            [ 2]  214 	pulh
   00BA 4F            [ 1]  215 	clra
   00BB F7            [ 2]  216 	sta	,x
                            217 ;../sprintf.c:60: return i;
   00BC 95            [ 2]  218 	tsx
   00BD FE            [ 2]  219 	ldx	,x
   00BE 9E E6 02      [ 4]  220 	lda	2,s
                            221 ;../sprintf.c:61: }
   00C1 A7 02         [ 2]  222 	ais	#2
   00C3 81            [ 4]  223 	rts
                            224 	.area CSEG    (CODE)
                            225 	.area CONST   (CODE)
                            226 	.area XINIT   (CODE)
                            227 	.area CABS    (ABS,CODE)
