                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbstoc16s
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _mbtowc
                             23 	.globl ___mbstoc16s_PARM_3
                             24 	.globl ___mbstoc16s_PARM_2
                             25 	.globl ___mbstoc16s
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
   0000                      30 ___mbstoc16s_sloc0_1_0:
   0000                      31 	.ds 2
   0002                      32 ___mbstoc16s_sloc1_1_0:
   0002                      33 	.ds 2
   0004                      34 ___mbstoc16s_sloc2_1_0:
   0004                      35 	.ds 2
   0006                      36 ___mbstoc16s_sloc3_1_0:
   0006                      37 	.ds 4
                             38 ;--------------------------------------------------------
                             39 ; overlayable items in ram
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; absolute ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS)
                             45 	.area IABS    (ABS)
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area XABS    (ABS)
                             50 ;--------------------------------------------------------
                             51 ; initialized external ram data
                             52 ;--------------------------------------------------------
                             53 	.area XISEG
                             54 ;--------------------------------------------------------
                             55 ; extended address mode data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG
   0000                      58 ___mbstoc16s_PARM_2:
   0000                      59 	.ds 2
   0002                      60 ___mbstoc16s_PARM_3:
   0002                      61 	.ds 2
   0004                      62 ___mbstoc16s_c16s_65536_50:
   0004                      63 	.ds 2
   0006                      64 ___mbstoc16s_m_65536_51:
   0006                      65 	.ds 2
   0008                      66 ___mbstoc16s_l_196608_53:
   0008                      67 	.ds 2
   000A                      68 ___mbstoc16s_codepoint_196608_53:
   000A                      69 	.ds 4
                             70 ;--------------------------------------------------------
                             71 ; global & static initialisations
                             72 ;--------------------------------------------------------
                             73 	.area HOME    (CODE)
                             74 	.area GSINIT  (CODE)
                             75 	.area GSFINAL (CODE)
                             76 	.area GSINIT  (CODE)
                             77 ;--------------------------------------------------------
                             78 ; Home
                             79 ;--------------------------------------------------------
                             80 	.area HOME    (CODE)
                             81 	.area HOME    (CODE)
                             82 ;--------------------------------------------------------
                             83 ; code
                             84 ;--------------------------------------------------------
                             85 	.area CSEG    (CODE)
                             86 ;------------------------------------------------------------
                             87 ;Allocation info for local variables in function '__mbstoc16s'
                             88 ;------------------------------------------------------------
                             89 ;sloc0                     Allocated with name '___mbstoc16s_sloc0_1_0'
                             90 ;sloc1                     Allocated with name '___mbstoc16s_sloc1_1_0'
                             91 ;sloc2                     Allocated with name '___mbstoc16s_sloc2_1_0'
                             92 ;sloc3                     Allocated with name '___mbstoc16s_sloc3_1_0'
                             93 ;s                         Allocated with name '___mbstoc16s_PARM_2'
                             94 ;n                         Allocated with name '___mbstoc16s_PARM_3'
                             95 ;c16s                      Allocated with name '___mbstoc16s_c16s_65536_50'
                             96 ;m                         Allocated with name '___mbstoc16s_m_65536_51'
                             97 ;l                         Allocated with name '___mbstoc16s_l_196608_53'
                             98 ;codepoint                 Allocated with name '___mbstoc16s_codepoint_196608_53'
                             99 ;------------------------------------------------------------
                            100 ;../mbstoc16s.c:44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                            101 ;	-----------------------------------------
                            102 ;	 function __mbstoc16s
                            103 ;	-----------------------------------------
                            104 ;	Register assignment is optimal.
                            105 ;	Stack space usage: 0 bytes.
   0000                     106 ___mbstoc16s:
   0000 B7*01         [ 3]  107 	sta	*(___mbstoc16s_sloc0_1_0 + 1)
   0002 BF*00         [ 3]  108 	stx	*___mbstoc16s_sloc0_1_0
                            109 ;../mbstoc16s.c:46: size_t m = 0;
   0004 4F            [ 1]  110 	clra
   0005 C7r00r06      [ 4]  111 	sta	___mbstoc16s_m_65536_51
   0008 C7r00r07      [ 4]  112 	sta	(___mbstoc16s_m_65536_51 + 1)
                            113 ;../mbstoc16s.c:85: return(m);
   000B                     114 00116$:
                            115 ;../mbstoc16s.c:53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
   000B C6r00r00      [ 4]  116 	lda	___mbstoc16s_PARM_2
   000E C7r00r00      [ 4]  117 	sta	_mbtowc_PARM_2
   0011 C6r00r01      [ 4]  118 	lda	(___mbstoc16s_PARM_2 + 1)
   0014 C7r00r01      [ 4]  119 	sta	(_mbtowc_PARM_2 + 1)
   0017 4F            [ 1]  120 	clra
   0018 C7r00r00      [ 4]  121 	sta	_mbtowc_PARM_3
   001B A6 04         [ 2]  122 	lda	#0x04
   001D C7r00r01      [ 4]  123 	sta	(_mbtowc_PARM_3 + 1)
   0020 A6r0A         [ 2]  124 	lda	#___mbstoc16s_codepoint_196608_53
   0022 AEs00         [ 2]  125 	ldx	#>___mbstoc16s_codepoint_196608_53
   0024 CDr00r00      [ 5]  126 	jsr	_mbtowc
   0027 C7r00r09      [ 4]  127 	sta	(___mbstoc16s_l_196608_53 + 1)
   002A CFr00r08      [ 4]  128 	stx	___mbstoc16s_l_196608_53
                            129 ;../mbstoc16s.c:55: if(l < 0)
   002D C6r00r08      [ 4]  130 	lda	___mbstoc16s_l_196608_53
   0030 A0 00         [ 2]  131 	sub	#0x00
   0032 90 04         [ 3]  132 	bge	00106$
                            133 ;../mbstoc16s.c:56: return(-1);
   0034 A6 FF         [ 2]  134 	lda	#0xff
   0036 97            [ 1]  135 	tax
   0037 81            [ 4]  136 	rts
   0038                     137 00106$:
                            138 ;../mbstoc16s.c:59: if(m < n)
   0038 C6r00r07      [ 4]  139 	lda	(___mbstoc16s_m_65536_51 + 1)
   003B C0r00r03      [ 4]  140 	sub	(___mbstoc16s_PARM_3 + 1)
   003E C6r00r06      [ 4]  141 	lda	___mbstoc16s_m_65536_51
   0041 C2r00r02      [ 4]  142 	sbc	___mbstoc16s_PARM_3
   0044 25 03         [ 3]  143 	bcs	00156$
   0046 4F            [ 1]  144 	clra
   0047 20 02         [ 3]  145 	bra	00157$
   0049                     146 00156$:
   0049 A6 01         [ 2]  147 	lda	#0x01
   004B                     148 00157$:
                            149 ;../mbstoc16s.c:57: else if(!l)
   004B 87            [ 2]  150 	psha
   004C C6r00r08      [ 4]  151 	lda	___mbstoc16s_l_196608_53
   004F CAr00r09      [ 4]  152 	ora	(___mbstoc16s_l_196608_53 + 1)
   0052 86            [ 2]  153 	pula
   0053 26 0F         [ 3]  154 	bne	00107$
                            155 ;../mbstoc16s.c:59: if(m < n)
   0055 4D            [ 1]  156 	tsta
   0056 26 03         [ 3]  157 	bne	00159$
   0058 CCr01r67      [ 3]  158 	jmp	00115$
   005B                     159 00159$:
                            160 ;../mbstoc16s.c:60: *c16s = 0;
   005B 55*00         [ 4]  161 	ldhx	*___mbstoc16s_sloc0_1_0
   005D 4F            [ 1]  162 	clra
   005E F7            [ 2]  163 	sta	,x
   005F E7 01         [ 3]  164 	sta	1,x
                            165 ;../mbstoc16s.c:61: break;
   0061 CCr01r67      [ 3]  166 	jmp	00115$
   0064                     167 00107$:
                            168 ;../mbstoc16s.c:69: *c16s++ = codepoint;
   0064 55*00         [ 4]  169 	ldhx	*___mbstoc16s_sloc0_1_0
   0066 AF 02         [ 2]  170 	aix	#2
   0068 35*02         [ 4]  171 	sthx	*___mbstoc16s_sloc1_1_0
                            172 ;../mbstoc16s.c:70: m++;
   006A 45r00r06      [ 3]  173 	ldhx	#___mbstoc16s_m_65536_51
   006D 87            [ 2]  174 	psha
   006E E6 01         [ 3]  175 	lda	1,x
   0070 AB 01         [ 2]  176 	add	#0x01
   0072 B7*05         [ 3]  177 	sta	*(___mbstoc16s_sloc2_1_0 + 1)
   0074 F6            [ 2]  178 	lda	,x
   0075 A9 00         [ 2]  179 	adc	#0
   0077 B7*04         [ 3]  180 	sta	*___mbstoc16s_sloc2_1_0
                            181 ;../mbstoc16s.c:64: if (codepoint <= 0xffff) // Basic multilingual plane
   0079 A6 FF         [ 2]  182 	lda	#0xff
   007B C0r00r0D      [ 4]  183 	sub	(___mbstoc16s_codepoint_196608_53 + 3)
   007E A6 FF         [ 2]  184 	lda	#0xff
   0080 C2r00r0C      [ 4]  185 	sbc	(___mbstoc16s_codepoint_196608_53 + 2)
   0083 4F            [ 1]  186 	clra
   0084 C2r00r0B      [ 4]  187 	sbc	(___mbstoc16s_codepoint_196608_53 + 1)
   0087 4F            [ 1]  188 	clra
   0088 C2r00r0A      [ 4]  189 	sbc	___mbstoc16s_codepoint_196608_53
   008B 86            [ 2]  190 	pula
   008C 25 26         [ 3]  191 	bcs	00113$
                            192 ;../mbstoc16s.c:66: if (m >= n)
   008E 4D            [ 1]  193 	tsta
   008F 26 03         [ 3]  194 	bne	00161$
   0091 CCr01r67      [ 3]  195 	jmp	00115$
   0094                     196 00161$:
                            197 ;../mbstoc16s.c:69: *c16s++ = codepoint;
   0094 C6r00r0D      [ 4]  198 	lda	(___mbstoc16s_codepoint_196608_53 + 3)
   0097 CEr00r0C      [ 4]  199 	ldx	(___mbstoc16s_codepoint_196608_53 + 2)
   009A 89            [ 2]  200 	pshx
   009B 55*00         [ 4]  201 	ldhx	*___mbstoc16s_sloc0_1_0
   009D E7 01         [ 3]  202 	sta	1,x
   009F 86            [ 2]  203 	pula
   00A0 F7            [ 2]  204 	sta	,x
   00A1 4E*02*00      [ 5]  205 	mov	*___mbstoc16s_sloc1_1_0,*___mbstoc16s_sloc0_1_0
   00A4 4E*03*01      [ 5]  206 	mov	*(___mbstoc16s_sloc1_1_0 + 1),*(___mbstoc16s_sloc0_1_0 + 1)
                            207 ;../mbstoc16s.c:70: m++;
   00A7 B6*04         [ 3]  208 	lda	*___mbstoc16s_sloc2_1_0
   00A9 C7r00r06      [ 4]  209 	sta	___mbstoc16s_m_65536_51
   00AC B6*05         [ 3]  210 	lda	*(___mbstoc16s_sloc2_1_0 + 1)
   00AE C7r00r07      [ 4]  211 	sta	(___mbstoc16s_m_65536_51 + 1)
   00B1 CCr01r55      [ 3]  212 	jmp	00114$
   00B4                     213 00113$:
                            214 ;../mbstoc16s.c:74: if (m + 1 >= n)
   00B4 B6*05         [ 3]  215 	lda	*(___mbstoc16s_sloc2_1_0 + 1)
   00B6 C0r00r03      [ 4]  216 	sub	(___mbstoc16s_PARM_3 + 1)
   00B9 B6*04         [ 3]  217 	lda	*___mbstoc16s_sloc2_1_0
   00BB C2r00r02      [ 4]  218 	sbc	___mbstoc16s_PARM_3
   00BE 25 03         [ 3]  219 	bcs	00162$
   00C0 CCr01r67      [ 3]  220 	jmp	00115$
   00C3                     221 00162$:
                            222 ;../mbstoc16s.c:77: codepoint -= 0x100000;
   00C3 45r00r0A      [ 3]  223 	ldhx	#___mbstoc16s_codepoint_196608_53
   00C6 E6 03         [ 3]  224 	lda	3,x
   00C8 A0 00         [ 2]  225 	sub	#0x00
   00CA E7 03         [ 3]  226 	sta	3,x
   00CC E6 02         [ 3]  227 	lda	2,x
   00CE A2 00         [ 2]  228 	sbc	#0x00
   00D0 E7 02         [ 3]  229 	sta	2,x
   00D2 E6 01         [ 3]  230 	lda	1,x
   00D4 A2 10         [ 2]  231 	sbc	#0x10
   00D6 E7 01         [ 3]  232 	sta	1,x
   00D8 F6            [ 2]  233 	lda	,x
   00D9 A2 00         [ 2]  234 	sbc	#0x00
   00DB F7            [ 2]  235 	sta	,x
                            236 ;../mbstoc16s.c:78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
   00DC C6r00r0C      [ 4]  237 	lda	(___mbstoc16s_codepoint_196608_53 + 2)
   00DF CEr00r0B      [ 4]  238 	ldx	(___mbstoc16s_codepoint_196608_53 + 1)
   00E2 54            [ 1]  239 	lsrx
   00E3 46            [ 1]  240 	rora
   00E4 54            [ 1]  241 	lsrx
   00E5 46            [ 1]  242 	rora
   00E6 B7*09         [ 3]  243 	sta	*(___mbstoc16s_sloc3_1_0 + 3)
   00E8 BF*08         [ 3]  244 	stx	*(___mbstoc16s_sloc3_1_0 + 2)
   00EA CEr00r0A      [ 4]  245 	ldx	___mbstoc16s_codepoint_196608_53
   00ED 4F            [ 1]  246 	clra
   00EE 54            [ 1]  247 	lsrx
   00EF 46            [ 1]  248 	rora
   00F0 54            [ 1]  249 	lsrx
   00F1 46            [ 1]  250 	rora
   00F2 BA*08         [ 3]  251 	ora	*(___mbstoc16s_sloc3_1_0 + 2)
   00F4 B7*08         [ 3]  252 	sta	*(___mbstoc16s_sloc3_1_0 + 2)
   00F6 BF*07         [ 3]  253 	stx	*(___mbstoc16s_sloc3_1_0 + 1)
   00F8 6E 00*06      [ 4]  254 	mov	#0x00,*___mbstoc16s_sloc3_1_0
   00FB B6*09         [ 3]  255 	lda	*(___mbstoc16s_sloc3_1_0 + 3)
   00FD BE*08         [ 3]  256 	ldx	*(___mbstoc16s_sloc3_1_0 + 2)
   00FF 87            [ 2]  257 	psha
   0100 9F            [ 1]  258 	txa
   0101 A4 03         [ 2]  259 	and	#0x03
   0103 97            [ 1]  260 	tax
   0104 86            [ 2]  261 	pula
   0105 87            [ 2]  262 	psha
   0106 9F            [ 1]  263 	txa
   0107 AB D8         [ 2]  264 	add	#0xd8
   0109 97            [ 1]  265 	tax
   010A 86            [ 2]  266 	pula
   010B 89            [ 2]  267 	pshx
   010C 55*00         [ 4]  268 	ldhx	*___mbstoc16s_sloc0_1_0
   010E E7 01         [ 3]  269 	sta	1,x
   0110 86            [ 2]  270 	pula
   0111 F7            [ 2]  271 	sta	,x
   0112 B6*02         [ 3]  272 	lda	*___mbstoc16s_sloc1_1_0
   0114 C7r00r04      [ 4]  273 	sta	___mbstoc16s_c16s_65536_50
   0117 B6*03         [ 3]  274 	lda	*(___mbstoc16s_sloc1_1_0 + 1)
   0119 C7r00r05      [ 4]  275 	sta	(___mbstoc16s_c16s_65536_50 + 1)
                            276 ;../mbstoc16s.c:79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
   011C C6r00r0D      [ 4]  277 	lda	(___mbstoc16s_codepoint_196608_53 + 3)
   011F CEr00r0C      [ 4]  278 	ldx	(___mbstoc16s_codepoint_196608_53 + 2)
   0122 87            [ 2]  279 	psha
   0123 9F            [ 1]  280 	txa
   0124 A4 03         [ 2]  281 	and	#0x03
   0126 97            [ 1]  282 	tax
   0127 86            [ 2]  283 	pula
   0128 87            [ 2]  284 	psha
   0129 9F            [ 1]  285 	txa
   012A AB DC         [ 2]  286 	add	#0xdc
   012C 97            [ 1]  287 	tax
   012D 86            [ 2]  288 	pula
   012E 89            [ 2]  289 	pshx
   012F CEr00r04      [ 4]  290 	ldx	___mbstoc16s_c16s_65536_50
   0132 89            [ 2]  291 	pshx
   0133 8A            [ 2]  292 	pulh
   0134 CEr00r05      [ 4]  293 	ldx	(___mbstoc16s_c16s_65536_50 + 1)
   0137 E7 01         [ 3]  294 	sta	1,x
   0139 86            [ 2]  295 	pula
   013A F7            [ 2]  296 	sta	,x
   013B 45r00r04      [ 3]  297 	ldhx	#___mbstoc16s_c16s_65536_50
   013E E6 01         [ 3]  298 	lda	1,x
   0140 AB 02         [ 2]  299 	add	#0x02
   0142 B7*01         [ 3]  300 	sta	*(___mbstoc16s_sloc0_1_0 + 1)
   0144 F6            [ 2]  301 	lda	,x
   0145 A9 00         [ 2]  302 	adc	#0
   0147 B7*00         [ 3]  303 	sta	*___mbstoc16s_sloc0_1_0
                            304 ;../mbstoc16s.c:80: m += 2;
   0149 45r00r06      [ 3]  305 	ldhx	#___mbstoc16s_m_65536_51
   014C E6 01         [ 3]  306 	lda	1,x
   014E AB 02         [ 2]  307 	add	#0x02
   0150 E7 01         [ 3]  308 	sta	1,x
   0152 24 01         [ 3]  309 	bcc	00163$
   0154 7C            [ 3]  310 	inc	,x
   0155                     311 00163$:
   0155                     312 00114$:
                            313 ;../mbstoc16s.c:82: s += l;
   0155 45r00r00      [ 3]  314 	ldhx	#___mbstoc16s_PARM_2
   0158 C6r00r09      [ 4]  315 	lda	(___mbstoc16s_l_196608_53 + 1)
   015B EB 01         [ 3]  316 	add	1,x
   015D E7 01         [ 3]  317 	sta	1,x
   015F C6r00r08      [ 4]  318 	lda	___mbstoc16s_l_196608_53
   0162 F9            [ 2]  319 	adc	,x
   0163 F7            [ 2]  320 	sta	,x
   0164 CCr00r0B      [ 3]  321 	jmp	00116$
   0167                     322 00115$:
                            323 ;../mbstoc16s.c:85: return(m);
   0167 CEr00r06      [ 4]  324 	ldx	___mbstoc16s_m_65536_51
   016A C6r00r07      [ 4]  325 	lda	(___mbstoc16s_m_65536_51 + 1)
                            326 ;../mbstoc16s.c:86: }
   016D 81            [ 4]  327 	rts
                            328 	.area CSEG    (CODE)
                            329 	.area CONST   (CODE)
                            330 	.area XINIT   (CODE)
                            331 	.area CABS    (ABS,CODE)
