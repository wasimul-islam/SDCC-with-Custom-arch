                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mblen
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _mblen_PARM_2
                             23 	.globl _mblen
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area DSEG    (PAG)
                             28 ;--------------------------------------------------------
                             29 ; overlayable items in ram
                             30 ;--------------------------------------------------------
                             31 	.area	OSEG    (PAG, OVR)
   0000                      32 _mblen_sloc0_1_0:
   0000                      33 	.ds 2
   0002                      34 _mblen_sloc1_1_0:
   0002                      35 	.ds 2
                             36 ;--------------------------------------------------------
                             37 ; absolute ram data
                             38 ;--------------------------------------------------------
                             39 	.area IABS    (ABS)
                             40 	.area IABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XABS    (ABS)
                             45 ;--------------------------------------------------------
                             46 ; initialized external ram data
                             47 ;--------------------------------------------------------
                             48 	.area XISEG
                             49 ;--------------------------------------------------------
                             50 ; extended address mode data
                             51 ;--------------------------------------------------------
                             52 	.area XSEG
   0000                      53 _mblen_PARM_2:
   0000                      54 	.ds 2
   0002                      55 _mblen_s_65536_36:
   0002                      56 	.ds 2
                             57 ;--------------------------------------------------------
                             58 ; global & static initialisations
                             59 ;--------------------------------------------------------
                             60 	.area HOME    (CODE)
                             61 	.area GSINIT  (CODE)
                             62 	.area GSFINAL (CODE)
                             63 	.area GSINIT  (CODE)
                             64 ;--------------------------------------------------------
                             65 ; Home
                             66 ;--------------------------------------------------------
                             67 	.area HOME    (CODE)
                             68 	.area HOME    (CODE)
                             69 ;--------------------------------------------------------
                             70 ; code
                             71 ;--------------------------------------------------------
                             72 	.area CSEG    (CODE)
                             73 ;------------------------------------------------------------
                             74 ;Allocation info for local variables in function 'mblen'
                             75 ;------------------------------------------------------------
                             76 ;n                         Allocated with name '_mblen_PARM_2'
                             77 ;s                         Allocated with name '_mblen_s_65536_36'
                             78 ;m                         Allocated to registers 
                             79 ;c                         Allocated to registers a 
                             80 ;sloc0                     Allocated with name '_mblen_sloc0_1_0'
                             81 ;sloc1                     Allocated with name '_mblen_sloc1_1_0'
                             82 ;------------------------------------------------------------
                             83 ;../mblen.c:31: int mblen(const char *s, size_t n)
                             84 ;	-----------------------------------------
                             85 ;	 function mblen
                             86 ;	-----------------------------------------
                             87 ;	Register assignment is optimal.
                             88 ;	Stack space usage: 0 bytes.
   0000                      89 _mblen:
   0000 C7r00r03      [ 4]   90 	sta	(_mblen_s_65536_36 + 1)
   0003 CFr00r02      [ 4]   91 	stx	_mblen_s_65536_36
                             92 ;../mblen.c:36: if(!s)
   0006 C6r00r02      [ 4]   93 	lda	_mblen_s_65536_36
   0009 CAr00r03      [ 4]   94 	ora	(_mblen_s_65536_36 + 1)
   000C 26 03         [ 3]   95 	bne	00102$
                             96 ;../mblen.c:37: return(0);
   000E 4F            [ 1]   97 	clra
   000F 97            [ 1]   98 	tax
   0010 81            [ 4]   99 	rts
   0011                     100 00102$:
                            101 ;../mblen.c:39: if(!n)
   0011 C6r00r00      [ 4]  102 	lda	_mblen_PARM_2
   0014 CAr00r01      [ 4]  103 	ora	(_mblen_PARM_2 + 1)
   0017 26 04         [ 3]  104 	bne	00104$
                            105 ;../mblen.c:40: return(-1);
   0019 A6 FF         [ 2]  106 	lda	#0xff
   001B 97            [ 1]  107 	tax
   001C 81            [ 4]  108 	rts
   001D                     109 00104$:
                            110 ;../mblen.c:42: c = *s;
   001D C6r00r02      [ 4]  111 	lda	_mblen_s_65536_36
   0020 87            [ 2]  112 	psha
   0021 8A            [ 2]  113 	pulh
   0022 CEr00r03      [ 4]  114 	ldx	(_mblen_s_65536_36 + 1)
   0025 F6            [ 2]  115 	lda	,x
                            116 ;../mblen.c:44: if(!c)
   0026 4D            [ 1]  117 	tsta
   0027 26 03         [ 3]  118 	bne	00106$
                            119 ;../mblen.c:45: return(0);
   0029 4F            [ 1]  120 	clra
   002A 97            [ 1]  121 	tax
   002B 81            [ 4]  122 	rts
   002C                     123 00106$:
                            124 ;../mblen.c:47: if(c <= 0x7f)
   002C A1 7F         [ 2]  125 	cmp	#0x7f
   002E 22 04         [ 3]  126 	bhi	00126$
                            127 ;../mblen.c:48: return(1);
   0030 A6 01         [ 2]  128 	lda	#0x01
   0032 5F            [ 1]  129 	clrx
   0033 81            [ 4]  130 	rts
                            131 ;../mblen.c:50: while(c & 0x80)
   0034                     132 00126$:
   0034 5F            [ 1]  133 	clrx
   0035                     134 00109$:
   0035 4D            [ 1]  135 	tsta
   0036 2A 05         [ 3]  136 	bpl     00111$
                            137 ;../mblen.c:52: c <<= 1;
   0038 48            [ 1]  138 	lsla	
                            139 ;../mblen.c:53: m++;
   0039 AF 01         [ 2]  140 	aix	#1
   003B 20 F8         [ 3]  141 	bra	00109$
   003D                     142 00111$:
                            143 ;../mblen.c:56: if(m > n)
   003D BF*01         [ 3]  144 	stx	*(_mblen_sloc0_1_0 + 1)
   003F 6E 00*00      [ 4]  145 	mov	#0x00,*_mblen_sloc0_1_0
   0042 C6r00r01      [ 4]  146 	lda	(_mblen_PARM_2 + 1)
   0045 B0*01         [ 3]  147 	sub	*(_mblen_sloc0_1_0 + 1)
   0047 C6r00r00      [ 4]  148 	lda	_mblen_PARM_2
   004A B2*00         [ 3]  149 	sbc	*_mblen_sloc0_1_0
   004C 24 04         [ 3]  150 	bcc	00129$
                            151 ;../mblen.c:57: return(-1);
   004E A6 FF         [ 2]  152 	lda	#0xff
   0050 97            [ 1]  153 	tax
   0051 81            [ 4]  154 	rts
                            155 ;../mblen.c:60: while(--m)
   0052                     156 00129$:
   0052 C6r00r02      [ 4]  157 	lda	_mblen_s_65536_36
   0055 B7*02         [ 3]  158 	sta	*_mblen_sloc1_1_0
   0057 C6r00r03      [ 4]  159 	lda	(_mblen_s_65536_36 + 1)
   005A B7*03         [ 3]  160 	sta	*(_mblen_sloc1_1_0 + 1)
   005C 9F            [ 1]  161 	txa
   005D                     162 00116$:
   005D 4A            [ 1]  163 	deca
   005E 4D            [ 1]  164 	tsta
   005F 27 19         [ 3]  165 	beq	00118$
                            166 ;../mblen.c:61: if((*++s & 0xc0) != 0x80)
   0061 55*02         [ 4]  167 	ldhx	*_mblen_sloc1_1_0
   0063 AF 01         [ 2]  168 	aix	#1
   0065 35*02         [ 4]  169 	sthx	*_mblen_sloc1_1_0
   0067 55*02         [ 4]  170 	ldhx	*_mblen_sloc1_1_0
   0069 FE            [ 2]  171 	ldx	,x
   006A 8C            [ 1]  172 	clrh
   006B 87            [ 2]  173 	psha
   006C 9F            [ 1]  174 	txa
   006D A4 C0         [ 2]  175 	and	#0xc0
   006F 97            [ 1]  176 	tax
   0070 86            [ 2]  177 	pula
   0071 65 00 80      [ 3]  178 	cphx	#0x0080
   0074 27 E7         [ 3]  179 	beq	00116$
                            180 ;../mblen.c:62: return(-1);
   0076 A6 FF         [ 2]  181 	lda	#0xff
   0078 97            [ 1]  182 	tax
   0079 81            [ 4]  183 	rts
   007A                     184 00118$:
                            185 ;../mblen.c:64: return(n);
   007A BE*00         [ 3]  186 	ldx	*_mblen_sloc0_1_0
   007C B6*01         [ 3]  187 	lda	*(_mblen_sloc0_1_0 + 1)
                            188 ;../mblen.c:65: }
   007E 81            [ 4]  189 	rts
                            190 	.area CSEG    (CODE)
                            191 	.area CONST   (CODE)
                            192 	.area XINIT   (CODE)
                            193 	.area CABS    (ABS,CODE)
