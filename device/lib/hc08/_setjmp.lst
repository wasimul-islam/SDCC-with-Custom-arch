                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _setjmp
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area DSEG    (PAG)
                             26 ;--------------------------------------------------------
                             27 ; overlayable items in ram
                             28 ;--------------------------------------------------------
                             29 ;--------------------------------------------------------
                             30 ; absolute ram data
                             31 ;--------------------------------------------------------
                             32 	.area IABS    (ABS)
                             33 	.area IABS    (ABS)
                             34 ;--------------------------------------------------------
                             35 ; absolute external ram data
                             36 ;--------------------------------------------------------
                             37 	.area XABS    (ABS)
                             38 ;--------------------------------------------------------
                             39 ; initialized external ram data
                             40 ;--------------------------------------------------------
                             41 	.area XISEG
                             42 ;--------------------------------------------------------
                             43 ; extended address mode data
                             44 ;--------------------------------------------------------
                             45 	.area XSEG
                             46 ;--------------------------------------------------------
                             47 ; global & static initialisations
                             48 ;--------------------------------------------------------
                             49 	.area HOME    (CODE)
                             50 	.area GSINIT  (CODE)
                             51 	.area GSFINAL (CODE)
                             52 	.area GSINIT  (CODE)
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area HOME    (CODE)
                             57 	.area HOME    (CODE)
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area CSEG    (CODE)
                             62 ;------------------------------------------------------------
                             63 ;Allocation info for local variables in function 'dummy'
                             64 ;------------------------------------------------------------
                             65 ;_setjmp.c:33: static void dummy (void) __naked
                             66 ;	-----------------------------------------
                             67 ;	 function dummy
                             68 ;	-----------------------------------------
                             69 ;	Register assignment is optimal.
                             70 ;	Stack space usage: 0 bytes.
   0000                      71 _dummy:
                             72 ;	naked function: no prologue.
                             73 ;_setjmp.c:134: __endasm;
                             74 ;--------------------------------------------------------
                             75 ;	overlayable items in ram
                             76 ;--------------------------------------------------------
                             77 	        .area	OSEG (PAG, OVR)
   0000                      78 	___setjmp_buf:
   0000                      79 	        .ds	2
                             80 	        .area	OSEG (PAG, OVR)
   0000                      81 	_longjmp_buf:
   0000                      82 	        .ds	2
                             83 ;--------------------------------------------------------
                             84 ;	extended address mode data
                             85 ;--------------------------------------------------------
                             86 	        .area	XSEG
   0000                      87 	_longjmp_PARM_2:
   0000                      88 	        .ds	2
                             89 ;--------------------------------------------------------
                             90 ;	code
                             91 ;--------------------------------------------------------
                             92 	        .area	CSEG (CODE)
                             93 ;------------------------------------------------------------
                             94 ;Allocation	info for local variables in function '__setjmp'
                             95 ;------------------------------------------------------------
                             96 ;buf	Allocated with name '___setjmp_buf'
                             97 ;------------------------------------------------------------
                             98 ;_setjmp.c:205:	int __setjmp (jmp_buf buf)
                             99 ;	-----------------------------------------
                            100 ;	function __setjmp
                            101 ;	-----------------------------------------
                            102 ;	Stack space usage: 1 bytes.
                            103 	        .globl	___setjmp
   0000                     104 	___setjmp:
   0000 CFr00r00      [ 4]  105 	        stx	(___setjmp_buf + 0) ; msb(buf)
   0003 C7r00r01      [ 4]  106 	        sta	(___setjmp_buf + 1) ; lsb(buf)
                            107         ;	save stack pointer
   0006 95            [ 2]  108 	        tsx
   0007 8B            [ 2]  109 	        pshh
   0008 9F            [ 1]  110 	        txa
   0009 55*00         [ 4]  111 	        ldhx	(___setjmp_buf)
   000B E7 01         [ 3]  112 	        sta	1,x
   000D 86            [ 2]  113 	        pula
   000E E7 00         [ 3]  114 	        sta	0,x
                            115         ;	save return address
   0010 9E E6 01      [ 4]  116 	        lda	1,s
   0013 E7 02         [ 3]  117 	        sta	2,x
   0015 9E E6 02      [ 4]  118 	        lda	2,s
   0018 E7 03         [ 3]  119 	        sta	3,x
                            120         ;	return 0
   001A 4F            [ 1]  121 	        clra
   001B 97            [ 1]  122 	        tax
   001C 81            [ 4]  123 	        rts
                            124 ;------------------------------------------------------------
                            125 ;Allocation	info for local variables in function 'longjmp'
                            126 ;------------------------------------------------------------
                            127 ;rv	Allocated with name '_longjmp_PARM_2'
                            128 ;buf	Allocated with name '_longjmp_buf'
                            129 ;------------------------------------------------------------
                            130 ;_setjmp.c:216:	int longjmp (jmp_buf buf, int rv)
                            131 ;	-----------------------------------------
                            132 ;	function longjmp
                            133 ;	-----------------------------------------
                            134 ;	Stack space usage: 1 bytes.
                            135 	        .globl	_longjmp
                            136 	        .globl	_longjmp_PARM_2
   001D                     137 	_longjmp:
   001D CFr00r00      [ 4]  138 	        stx	(_longjmp_buf + 0) ; msb(buf)
   0020 C7r00r01      [ 4]  139 	        sta	(_longjmp_buf + 1) ; lsb(buf)
                            140         ;	restore stack pointer
   0023 55*00         [ 4]  141 	        ldhx	(_longjmp_buf)
   0025 E6 00         [ 3]  142 	        lda	0,x
   0027 87            [ 2]  143 	        psha
   0028 EE 01         [ 3]  144 	        ldx	1,x
   002A 8A            [ 2]  145 	        pulh
   002B 94            [ 2]  146 	        txs
                            147         ;	set return address
   002C 55*00         [ 4]  148 	        ldhx	(_longjmp_buf)
   002E E6 02         [ 3]  149 	        lda	2,x
   0030 9E E7 01      [ 4]  150 	        sta	1,s
   0033 E6 03         [ 3]  151 	        lda	3,x
   0035 9E E7 02      [ 4]  152 	        sta	2,s
                            153 ;_setjmp.c:224:	return rv ? rv : 1;
   0038 CEr00r00      [ 4]  154 	        ldx	(_longjmp_PARM_2 + 0)
   003B 9F            [ 1]  155 	        txa
   003C CAr00r01      [ 4]  156 	        ora	(_longjmp_PARM_2 + 1)
   003F 27 04         [ 3]  157 	        beq	0001$
   0041 C6r00r01      [ 4]  158 	        lda	(_longjmp_PARM_2 + 1)
   0044 81            [ 4]  159 	        rts
   0045                     160 	0001$:
   0045 A6 01         [ 2]  161 	        lda	#0x01
   0047 81            [ 4]  162 	        rts
                            163 ;_setjmp.c:135: }
                            164 ;	naked function: no epilogue.
                            165 	.area CSEG    (CODE)
                            166 	.area CONST   (CODE)
                            167 	.area XINIT   (CODE)
                            168 	.area CABS    (ABS,CODE)
