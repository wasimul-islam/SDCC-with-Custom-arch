                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module malloc
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl ___sdcc_heap_init
                             23 	.globl ___sdcc_heap_free
                             24 	.globl _malloc
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
   0000                      29 _malloc_sloc0_1_0:
   0000                      30 	.ds 2
   0002                      31 _malloc_sloc1_1_0:
   0002                      32 	.ds 2
   0004                      33 _malloc_sloc2_1_0:
   0004                      34 	.ds 2
                             35 ;--------------------------------------------------------
                             36 ; overlayable items in ram
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; absolute ram data
                             40 ;--------------------------------------------------------
                             41 	.area IABS    (ABS)
                             42 	.area IABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; absolute external ram data
                             45 ;--------------------------------------------------------
                             46 	.area XABS    (ABS)
                             47 ;--------------------------------------------------------
                             48 ; initialized external ram data
                             49 ;--------------------------------------------------------
                             50 	.area XISEG
                             51 ;--------------------------------------------------------
                             52 ; extended address mode data
                             53 ;--------------------------------------------------------
                             54 	.area XSEG
   0000                      55 ___sdcc_heap_free::
   0000                      56 	.ds 2
   0002                      57 _malloc_size_65536_39:
   0002                      58 	.ds 2
   0004                      59 _malloc_h_65536_40:
   0004                      60 	.ds 2
   0006                      61 _malloc_f_65536_40:
   0006                      62 	.ds 2
   0008                      63 _malloc_blocksize_196608_42:
   0008                      64 	.ds 2
   000A                      65 _malloc_newheader_327680_44:
   000A                      66 	.ds 2
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area HOME    (CODE)
                             71 	.area GSINIT  (CODE)
                             72 	.area GSFINAL (CODE)
                             73 	.area GSINIT  (CODE)
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area HOME    (CODE)
                             78 	.area HOME    (CODE)
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area CSEG    (CODE)
                             83 ;------------------------------------------------------------
                             84 ;Allocation info for local variables in function '__sdcc_heap_init'
                             85 ;------------------------------------------------------------
                             86 ;../malloc.c:65: void __sdcc_heap_init(void)
                             87 ;	-----------------------------------------
                             88 ;	 function __sdcc_heap_init
                             89 ;	-----------------------------------------
                             90 ;	Register assignment is optimal.
                             91 ;	Stack space usage: 0 bytes.
   0000                      92 ___sdcc_heap_init:
                             93 ;../malloc.c:67: __sdcc_heap_free = HEAP_START;
   0000 A6s00         [ 2]   94 	lda	#>___sdcc_heap
   0002 C7r00r00      [ 4]   95 	sta	___sdcc_heap_free
   0005 A6r00         [ 2]   96 	lda	#___sdcc_heap
   0007 C7r00r01      [ 4]   97 	sta	(___sdcc_heap_free + 1)
                             98 ;../malloc.c:68: __sdcc_heap_free->next = HEAP_END;
   000A C6r00r00      [ 4]   99 	lda	___sdcc_heap_size
   000D 87            [ 2]  100 	psha
   000E 8A            [ 2]  101 	pulh
   000F CEr00r01      [ 4]  102 	ldx	(___sdcc_heap_size + 1)
   0012 AF FF         [ 2]  103 	aix	#-1
   0014 9F            [ 1]  104 	txa
   0015 ABr00         [ 2]  105 	add	#___sdcc_heap
   0017 87            [ 2]  106 	psha
   0018 8B            [ 2]  107 	pshh
   0019 86            [ 2]  108 	pula
   001A A9s00         [ 2]  109 	adc	#>___sdcc_heap
   001C 97            [ 1]  110 	tax
   001D 86            [ 2]  111 	pula
   001E CFr00r00      [ 4]  112 	stx	___sdcc_heap
   0021 C7r00r01      [ 4]  113 	sta	(___sdcc_heap + 1)
                            114 ;../malloc.c:69: __sdcc_heap_free->next_free = 0;
   0024 C6r00r00      [ 4]  115 	lda	___sdcc_heap_free
   0027 CEr00r01      [ 4]  116 	ldx	(___sdcc_heap_free + 1)
   002A 87            [ 2]  117 	psha
   002B 8A            [ 2]  118 	pulh
   002C 4F            [ 1]  119 	clra
   002D E7 02         [ 3]  120 	sta	2,x
   002F E7 03         [ 3]  121 	sta	3,x
                            122 ;../malloc.c:70: }
   0031 81            [ 4]  123 	rts
                            124 ;------------------------------------------------------------
                            125 ;Allocation info for local variables in function 'malloc'
                            126 ;------------------------------------------------------------
                            127 ;sloc0                     Allocated with name '_malloc_sloc0_1_0'
                            128 ;sloc1                     Allocated with name '_malloc_sloc1_1_0'
                            129 ;sloc2                     Allocated with name '_malloc_sloc2_1_0'
                            130 ;size                      Allocated with name '_malloc_size_65536_39'
                            131 ;h                         Allocated with name '_malloc_h_65536_40'
                            132 ;f                         Allocated with name '_malloc_f_65536_40'
                            133 ;blocksize                 Allocated with name '_malloc_blocksize_196608_42'
                            134 ;newheader                 Allocated with name '_malloc_newheader_327680_44'
                            135 ;------------------------------------------------------------
                            136 ;../malloc.c:75: void *malloc(size_t size)
                            137 ;	-----------------------------------------
                            138 ;	 function malloc
                            139 ;	-----------------------------------------
                            140 ;	Register assignment is optimal.
                            141 ;	Stack space usage: 0 bytes.
   0032                     142 _malloc:
   0032 B7*01         [ 3]  143 	sta	*(_malloc_sloc0_1_0 + 1)
   0034 BF*00         [ 3]  144 	stx	*_malloc_sloc0_1_0
                            145 ;../malloc.c:82: if(!__sdcc_heap_free)
   0036 C6r00r00      [ 4]  146 	lda	___sdcc_heap_free
   0039 CAr00r01      [ 4]  147 	ora	(___sdcc_heap_free + 1)
   003C 26 03         [ 3]  148 	bne	00102$
                            149 ;../malloc.c:83: __sdcc_heap_init();
   003E CDr00r00      [ 5]  150 	jsr	___sdcc_heap_init
   0041                     151 00102$:
                            152 ;../malloc.c:86: if(!size || size + offsetof(struct header, next_free) < size)
   0041 B6*01         [ 3]  153 	lda	*(_malloc_sloc0_1_0 + 1)
   0043 BA*00         [ 3]  154 	ora	*_malloc_sloc0_1_0
   0045 27 08         [ 3]  155 	beq	00103$
   0047 55*00         [ 4]  156 	ldhx	*_malloc_sloc0_1_0
   0049 AF 02         [ 2]  157 	aix	#2
   004B 75*00         [ 4]  158 	cphx	*_malloc_sloc0_1_0
   004D 24 03         [ 3]  159 	bcc	00104$
   004F                     160 00103$:
                            161 ;../malloc.c:87: return(0);
   004F 4F            [ 1]  162 	clra
   0050 97            [ 1]  163 	tax
   0051 81            [ 4]  164 	rts
   0052                     165 00104$:
                            166 ;../malloc.c:88: size += offsetof(struct header, next_free);
   0052 8B            [ 2]  167 	pshh
   0053 86            [ 2]  168 	pula
   0054 C7r00r02      [ 4]  169 	sta	_malloc_size_65536_39
   0057 CFr00r03      [ 4]  170 	stx	(_malloc_size_65536_39 + 1)
                            171 ;../malloc.c:89: if(size < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
   005A C6r00r03      [ 4]  172 	lda	(_malloc_size_65536_39 + 1)
   005D A0 04         [ 2]  173 	sub	#0x04
   005F C6r00r02      [ 4]  174 	lda	_malloc_size_65536_39
   0062 A2 00         [ 2]  175 	sbc	#0x00
   0064 24 09         [ 3]  176 	bcc	00107$
                            177 ;../malloc.c:90: size = sizeof(struct header);
   0066 4F            [ 1]  178 	clra
   0067 C7r00r02      [ 4]  179 	sta	_malloc_size_65536_39
   006A A6 04         [ 2]  180 	lda	#0x04
   006C C7r00r03      [ 4]  181 	sta	(_malloc_size_65536_39 + 1)
   006F                     182 00107$:
                            183 ;../malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   006F C6r00r00      [ 4]  184 	lda	___sdcc_heap_free
   0072 C7r00r04      [ 4]  185 	sta	_malloc_h_65536_40
   0075 C6r00r01      [ 4]  186 	lda	(___sdcc_heap_free + 1)
   0078 C7r00r05      [ 4]  187 	sta	(_malloc_h_65536_40 + 1)
   007B A6r00         [ 2]  188 	lda	#___sdcc_heap_free
   007D C7r00r07      [ 4]  189 	sta	(_malloc_f_65536_40 + 1)
   0080 A6s00         [ 2]  190 	lda	#>___sdcc_heap_free
   0082 C7r00r06      [ 4]  191 	sta	_malloc_f_65536_40
   0085                     192 00115$:
   0085 C6r00r04      [ 4]  193 	lda	_malloc_h_65536_40
   0088 CAr00r05      [ 4]  194 	ora	(_malloc_h_65536_40 + 1)
   008B 26 03         [ 3]  195 	bne	00158$
   008D CCr01r83      [ 3]  196 	jmp	00113$
   0090                     197 00158$:
                            198 ;../malloc.c:94: size_t blocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
   0090 C6r00r04      [ 4]  199 	lda	_malloc_h_65536_40
   0093 87            [ 2]  200 	psha
   0094 8A            [ 2]  201 	pulh
   0095 CEr00r05      [ 4]  202 	ldx	(_malloc_h_65536_40 + 1)
   0098 F6            [ 2]  203 	lda	,x
   0099 B7*00         [ 3]  204 	sta	*_malloc_sloc0_1_0
   009B E6 01         [ 3]  205 	lda	1,x
   009D B7*01         [ 3]  206 	sta	*(_malloc_sloc0_1_0 + 1)
   009F B6*01         [ 3]  207 	lda	*(_malloc_sloc0_1_0 + 1)
   00A1 BE*00         [ 3]  208 	ldx	*_malloc_sloc0_1_0
   00A3 87            [ 2]  209 	psha
   00A4 C6r00r05      [ 4]  210 	lda	(_malloc_h_65536_40 + 1)
   00A7 B7*03         [ 3]  211 	sta	*(_malloc_sloc1_1_0 + 1)
   00A9 C6r00r04      [ 4]  212 	lda	_malloc_h_65536_40
   00AC B7*02         [ 3]  213 	sta	*_malloc_sloc1_1_0
   00AE 86            [ 2]  214 	pula
   00AF B0*03         [ 3]  215 	sub	*(_malloc_sloc1_1_0 + 1)
   00B1 C7r00r09      [ 4]  216 	sta	(_malloc_blocksize_196608_42 + 1)
   00B4 9F            [ 1]  217 	txa
   00B5 B2*02         [ 3]  218 	sbc	*_malloc_sloc1_1_0
   00B7 C7r00r08      [ 4]  219 	sta	_malloc_blocksize_196608_42
                            220 ;../malloc.c:101: newheader->next_free = h->next_free;
   00BA 45r00r04      [ 3]  221 	ldhx	#_malloc_h_65536_40
   00BD E6 01         [ 3]  222 	lda	1,x
   00BF AB 02         [ 2]  223 	add	#0x02
   00C1 B7*05         [ 3]  224 	sta	*(_malloc_sloc2_1_0 + 1)
   00C3 F6            [ 2]  225 	lda	,x
   00C4 A9 00         [ 2]  226 	adc	#0
   00C6 B7*04         [ 3]  227 	sta	*_malloc_sloc2_1_0
                            228 ;../malloc.c:95: if(blocksize >= size) // Found free block of sufficient size.
   00C8 C6r00r09      [ 4]  229 	lda	(_malloc_blocksize_196608_42 + 1)
   00CB C0r00r03      [ 4]  230 	sub	(_malloc_size_65536_39 + 1)
   00CE C6r00r08      [ 4]  231 	lda	_malloc_blocksize_196608_42
   00D1 C2r00r02      [ 4]  232 	sbc	_malloc_size_65536_39
   00D4 24 03         [ 3]  233 	bcc	00159$
   00D6 CCr01r6B      [ 3]  234 	jmp	00116$
   00D9                     235 00159$:
                            236 ;../malloc.c:97: if(blocksize >= size + sizeof(struct header)) // It is worth creating a new free block
   00D9 C6r00r02      [ 4]  237 	lda	_malloc_size_65536_39
   00DC 87            [ 2]  238 	psha
   00DD 8A            [ 2]  239 	pulh
   00DE CEr00r03      [ 4]  240 	ldx	(_malloc_size_65536_39 + 1)
   00E1 AF 04         [ 2]  241 	aix	#4
   00E3 C6r00r09      [ 4]  242 	lda	(_malloc_blocksize_196608_42 + 1)
   00E6 89            [ 2]  243 	pshx
   00E7 9E E0 01      [ 4]  244 	sub	1,s
   00EA A7 01         [ 2]  245 	ais	#1
   00EC C6r00r08      [ 4]  246 	lda	_malloc_blocksize_196608_42
   00EF 8B            [ 2]  247 	pshh
   00F0 9E E2 01      [ 4]  248 	sbc	1,s
   00F3 A7 01         [ 2]  249 	ais	#1
   00F5 25 5D         [ 3]  250 	bcs	00109$
                            251 ;../malloc.c:99: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + size);
   00F7 B6*03         [ 3]  252 	lda	*(_malloc_sloc1_1_0 + 1)
   00F9 CBr00r03      [ 4]  253 	add	(_malloc_size_65536_39 + 1)
   00FC 87            [ 2]  254 	psha
   00FD B6*02         [ 3]  255 	lda	*_malloc_sloc1_1_0
   00FF C9r00r02      [ 4]  256 	adc	_malloc_size_65536_39
   0102 97            [ 1]  257 	tax
   0103 86            [ 2]  258 	pula
   0104 C7r00r0B      [ 4]  259 	sta	(_malloc_newheader_327680_44 + 1)
   0107 CFr00r0A      [ 4]  260 	stx	_malloc_newheader_327680_44
                            261 ;../malloc.c:100: newheader->next = h->next;
   010A C6r00r0A      [ 4]  262 	lda	_malloc_newheader_327680_44
   010D 87            [ 2]  263 	psha
   010E 8A            [ 2]  264 	pulh
   010F CEr00r0B      [ 4]  265 	ldx	(_malloc_newheader_327680_44 + 1)
   0112 B6*00         [ 3]  266 	lda	*_malloc_sloc0_1_0
   0114 F7            [ 2]  267 	sta	,x
   0115 B6*01         [ 3]  268 	lda	*(_malloc_sloc0_1_0 + 1)
   0117 E7 01         [ 3]  269 	sta	1,x
                            270 ;../malloc.c:101: newheader->next_free = h->next_free;
   0119 C6r00r0A      [ 4]  271 	lda	_malloc_newheader_327680_44
   011C B7*02         [ 3]  272 	sta	*_malloc_sloc1_1_0
   011E C6r00r0B      [ 4]  273 	lda	(_malloc_newheader_327680_44 + 1)
   0121 B7*03         [ 3]  274 	sta	*(_malloc_sloc1_1_0 + 1)
   0123 55*04         [ 4]  275 	ldhx	*_malloc_sloc2_1_0
   0125 E6 01         [ 3]  276 	lda	1,x
   0127 FE            [ 2]  277 	ldx	,x
   0128 89            [ 2]  278 	pshx
   0129 55*02         [ 4]  279 	ldhx	*_malloc_sloc1_1_0
   012B E7 03         [ 3]  280 	sta	3,x
   012D 86            [ 2]  281 	pula
   012E E7 02         [ 3]  282 	sta	2,x
                            283 ;../malloc.c:102: *f = newheader;
   0130 C6r00r06      [ 4]  284 	lda	_malloc_f_65536_40
   0133 87            [ 2]  285 	psha
   0134 8A            [ 2]  286 	pulh
   0135 CEr00r07      [ 4]  287 	ldx	(_malloc_f_65536_40 + 1)
   0138 C6r00r0A      [ 4]  288 	lda	_malloc_newheader_327680_44
   013B F7            [ 2]  289 	sta	,x
   013C C6r00r0B      [ 4]  290 	lda	(_malloc_newheader_327680_44 + 1)
   013F E7 01         [ 3]  291 	sta	1,x
                            292 ;../malloc.c:103: h->next = newheader;
   0141 C6r00r04      [ 4]  293 	lda	_malloc_h_65536_40
   0144 87            [ 2]  294 	psha
   0145 8A            [ 2]  295 	pulh
   0146 CEr00r05      [ 4]  296 	ldx	(_malloc_h_65536_40 + 1)
   0149 C6r00r0A      [ 4]  297 	lda	_malloc_newheader_327680_44
   014C F7            [ 2]  298 	sta	,x
   014D C6r00r0B      [ 4]  299 	lda	(_malloc_newheader_327680_44 + 1)
   0150 E7 01         [ 3]  300 	sta	1,x
   0152 20 12         [ 3]  301 	bra	00110$
   0154                     302 00109$:
                            303 ;../malloc.c:106: *f = h->next_free;
   0154 55*04         [ 4]  304 	ldhx	*_malloc_sloc2_1_0
   0156 E6 01         [ 3]  305 	lda	1,x
   0158 FE            [ 2]  306 	ldx	,x
   0159 89            [ 2]  307 	pshx
   015A CEr00r06      [ 4]  308 	ldx	_malloc_f_65536_40
   015D 89            [ 2]  309 	pshx
   015E 8A            [ 2]  310 	pulh
   015F CEr00r07      [ 4]  311 	ldx	(_malloc_f_65536_40 + 1)
   0162 E7 01         [ 3]  312 	sta	1,x
   0164 86            [ 2]  313 	pula
   0165 F7            [ 2]  314 	sta	,x
   0166                     315 00110$:
                            316 ;../malloc.c:108: return(&(h->next_free));
   0166 B6*05         [ 3]  317 	lda	*(_malloc_sloc2_1_0 + 1)
   0168 BE*04         [ 3]  318 	ldx	*_malloc_sloc2_1_0
   016A 81            [ 4]  319 	rts
   016B                     320 00116$:
                            321 ;../malloc.c:92: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h; f = &(h->next_free), h = h->next_free)
   016B B6*04         [ 3]  322 	lda	*_malloc_sloc2_1_0
   016D C7r00r06      [ 4]  323 	sta	_malloc_f_65536_40
   0170 B6*05         [ 3]  324 	lda	*(_malloc_sloc2_1_0 + 1)
   0172 C7r00r07      [ 4]  325 	sta	(_malloc_f_65536_40 + 1)
   0175 55*04         [ 4]  326 	ldhx	*_malloc_sloc2_1_0
   0177 F6            [ 2]  327 	lda	,x
   0178 C7r00r04      [ 4]  328 	sta	_malloc_h_65536_40
   017B E6 01         [ 3]  329 	lda	1,x
   017D C7r00r05      [ 4]  330 	sta	(_malloc_h_65536_40 + 1)
   0180 CCr00r85      [ 3]  331 	jmp	00115$
   0183                     332 00113$:
                            333 ;../malloc.c:112: return(0);
   0183 4F            [ 1]  334 	clra
   0184 97            [ 1]  335 	tax
                            336 ;../malloc.c:113: }
   0185 81            [ 4]  337 	rts
                            338 	.area CSEG    (CODE)
                            339 	.area CONST   (CODE)
                            340 	.area XINIT   (CODE)
                            341 	.area CABS    (ABS,CODE)
