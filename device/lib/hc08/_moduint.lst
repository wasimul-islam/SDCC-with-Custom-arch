                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _moduint
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl __moduint_PARM_2
                             23 	.globl __moduint
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area DSEG    (PAG)
                             28 ;--------------------------------------------------------
                             29 ; overlayable items in ram
                             30 ;--------------------------------------------------------
                             31 ;--------------------------------------------------------
                             32 ; absolute ram data
                             33 ;--------------------------------------------------------
                             34 	.area IABS    (ABS)
                             35 	.area IABS    (ABS)
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area XABS    (ABS)
                             40 ;--------------------------------------------------------
                             41 ; initialized external ram data
                             42 ;--------------------------------------------------------
                             43 	.area XISEG
                             44 ;--------------------------------------------------------
                             45 ; extended address mode data
                             46 ;--------------------------------------------------------
                             47 	.area XSEG
   0000                      48 __moduint_PARM_2:
   0000                      49 	.ds 2
   0002                      50 __moduint_a_65536_1:
   0002                      51 	.ds 2
                             52 ;--------------------------------------------------------
                             53 ; global & static initialisations
                             54 ;--------------------------------------------------------
                             55 	.area HOME    (CODE)
                             56 	.area GSINIT  (CODE)
                             57 	.area GSFINAL (CODE)
                             58 	.area GSINIT  (CODE)
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area HOME    (CODE)
                             63 	.area HOME    (CODE)
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area CSEG    (CODE)
                             68 ;------------------------------------------------------------
                             69 ;Allocation info for local variables in function '_moduint'
                             70 ;------------------------------------------------------------
                             71 ;b                         Allocated with name '__moduint_PARM_2'
                             72 ;a                         Allocated with name '__moduint_a_65536_1'
                             73 ;count                     Allocated to registers h 
                             74 ;------------------------------------------------------------
                             75 ;../_moduint.c:179: _moduint (unsigned int a, unsigned int b) __SDCC_NONBANKED
                             76 ;	-----------------------------------------
                             77 ;	 function _moduint
                             78 ;	-----------------------------------------
                             79 ;	Register assignment is optimal.
                             80 ;	Stack space usage: 0 bytes.
   0000                      81 __moduint:
   0000 C7r00r03      [ 4]   82 	sta	(__moduint_a_65536_1 + 1)
   0003 CFr00r02      [ 4]   83 	stx	__moduint_a_65536_1
                             84 ;../_moduint.c:181: unsigned char count = 0;
   0006 8C            [ 1]   85 	clrh
                             86 ;../_moduint.c:183: while (!MSB_SET(b))
   0007 5F            [ 1]   87 	clrx
   0008                      88 00103$:
   0008 C6r00r00      [ 4]   89 	lda	__moduint_PARM_2
   000B 49            [ 1]   90 	rola
   000C 4F            [ 1]   91 	clra
   000D 49            [ 1]   92 	rola
   000E 4D            [ 1]   93 	tsta
   000F 26 34         [ 3]   94 	bne	00117$
                             95 ;../_moduint.c:185: b <<= 1;
   0011 89            [ 2]   96 	pshx
   0012 C6r00r01      [ 4]   97 	lda	(__moduint_PARM_2 + 1)
   0015 CEr00r00      [ 4]   98 	ldx	__moduint_PARM_2
   0018 48            [ 1]   99 	lsla
   0019 59            [ 1]  100 	rolx
   001A C7r00r01      [ 4]  101 	sta	(__moduint_PARM_2 + 1)
   001D CFr00r00      [ 4]  102 	stx	__moduint_PARM_2
   0020 88            [ 2]  103 	pulx
                            104 ;../_moduint.c:186: if (b > a)
   0021 C6r00r03      [ 4]  105 	lda	(__moduint_a_65536_1 + 1)
   0024 C0r00r01      [ 4]  106 	sub	(__moduint_PARM_2 + 1)
   0027 C6r00r02      [ 4]  107 	lda	__moduint_a_65536_1
   002A C2r00r00      [ 4]  108 	sbc	__moduint_PARM_2
   002D 24 10         [ 3]  109 	bcc	00102$
                            110 ;../_moduint.c:188: b >>=1;
   002F C6r00r01      [ 4]  111 	lda	(__moduint_PARM_2 + 1)
   0032 CEr00r00      [ 4]  112 	ldx	__moduint_PARM_2
   0035 54            [ 1]  113 	lsrx
   0036 46            [ 1]  114 	rora
   0037 C7r00r01      [ 4]  115 	sta	(__moduint_PARM_2 + 1)
   003A CFr00r00      [ 4]  116 	stx	__moduint_PARM_2
                            117 ;../_moduint.c:189: break;
   003D 20 06         [ 3]  118 	bra	00117$
   003F                     119 00102$:
                            120 ;../_moduint.c:191: count++;
   003F AF 01         [ 2]  121 	aix	#1
   0041 89            [ 2]  122 	pshx
   0042 8A            [ 2]  123 	pulh
   0043 20 C3         [ 3]  124 	bra	00103$
                            125 ;../_moduint.c:193: do
   0045                     126 00117$:
   0045 8B            [ 2]  127 	pshh
   0046 88            [ 2]  128 	pulx
   0047                     129 00108$:
                            130 ;../_moduint.c:195: if (a >= b)
   0047 C6r00r03      [ 4]  131 	lda	(__moduint_a_65536_1 + 1)
   004A C0r00r01      [ 4]  132 	sub	(__moduint_PARM_2 + 1)
   004D C6r00r02      [ 4]  133 	lda	__moduint_a_65536_1
   0050 C2r00r00      [ 4]  134 	sbc	__moduint_PARM_2
   0053 25 12         [ 3]  135 	bcs	00107$
                            136 ;../_moduint.c:196: a -= b;
   0055 C6r00r03      [ 4]  137 	lda	(__moduint_a_65536_1 + 1)
   0058 C0r00r01      [ 4]  138 	sub	(__moduint_PARM_2 + 1)
   005B C7r00r03      [ 4]  139 	sta	(__moduint_a_65536_1 + 1)
   005E C6r00r02      [ 4]  140 	lda	__moduint_a_65536_1
   0061 C2r00r00      [ 4]  141 	sbc	__moduint_PARM_2
   0064 C7r00r02      [ 4]  142 	sta	__moduint_a_65536_1
   0067                     143 00107$:
                            144 ;../_moduint.c:197: b >>= 1;
   0067 89            [ 2]  145 	pshx
   0068 C6r00r01      [ 4]  146 	lda	(__moduint_PARM_2 + 1)
   006B CEr00r00      [ 4]  147 	ldx	__moduint_PARM_2
   006E 54            [ 1]  148 	lsrx
   006F 46            [ 1]  149 	rora
   0070 C7r00r01      [ 4]  150 	sta	(__moduint_PARM_2 + 1)
   0073 CFr00r00      [ 4]  151 	stx	__moduint_PARM_2
   0076 88            [ 2]  152 	pulx
                            153 ;../_moduint.c:199: while (count--);
   0077 9F            [ 1]  154 	txa
   0078 5A            [ 1]  155 	decx
   0079 4D            [ 1]  156 	tsta
   007A 26 CB         [ 3]  157 	bne	00108$
                            158 ;../_moduint.c:200: return a;
   007C CEr00r02      [ 4]  159 	ldx	__moduint_a_65536_1
   007F C6r00r03      [ 4]  160 	lda	(__moduint_a_65536_1 + 1)
                            161 ;../_moduint.c:201: }
   0082 81            [ 4]  162 	rts
                            163 	.area CSEG    (CODE)
                            164 	.area CONST   (CODE)
                            165 	.area XINIT   (CODE)
                            166 	.area CABS    (ABS,CODE)
