                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module vprintf
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _putchar
                             23 	.globl __print_format
                             24 	.globl _vprintf_PARM_2
                             25 	.globl _vprintf
                             26 	.globl _printf
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area DSEG    (PAG)
                             31 ;--------------------------------------------------------
                             32 ; overlayable items in ram
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; absolute ram data
                             36 ;--------------------------------------------------------
                             37 	.area IABS    (ABS)
                             38 	.area IABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area XABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; initialized external ram data
                             45 ;--------------------------------------------------------
                             46 	.area XISEG
                             47 ;--------------------------------------------------------
                             48 ; extended address mode data
                             49 ;--------------------------------------------------------
                             50 	.area XSEG
   0000                      51 _vprintf_PARM_2:
   0000                      52 	.ds 2
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area HOME    (CODE)
                             57 	.area GSINIT  (CODE)
                             58 	.area GSFINAL (CODE)
                             59 	.area GSINIT  (CODE)
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area HOME    (CODE)
                             64 	.area HOME    (CODE)
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area CSEG    (CODE)
                             69 ;------------------------------------------------------------
                             70 ;Allocation info for local variables in function 'put_char_to_stdout'
                             71 ;------------------------------------------------------------
                             72 ;p                         Allocated to stack - sp +3
                             73 ;c                         Allocated to registers a 
                             74 ;------------------------------------------------------------
                             75 ;../vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                             76 ;	-----------------------------------------
                             77 ;	 function put_char_to_stdout
                             78 ;	-----------------------------------------
                             79 ;	Register assignment is optimal.
                             80 ;	Stack space usage: 0 bytes.
   0000                      81 _put_char_to_stdout:
                             82 ;../vprintf.c:37: putchar (c);
   0000 5F            [ 1]   83 	clrx
                             84 ;../vprintf.c:38: }
   0001 CCr00r00      [ 3]   85 	jmp	_putchar
                             86 ;------------------------------------------------------------
                             87 ;Allocation info for local variables in function 'vprintf'
                             88 ;------------------------------------------------------------
                             89 ;ap                        Allocated with name '_vprintf_PARM_2'
                             90 ;format                    Allocated to registers 
                             91 ;------------------------------------------------------------
                             92 ;../vprintf.c:41: vprintf (const char *format, va_list ap)
                             93 ;	-----------------------------------------
                             94 ;	 function vprintf
                             95 ;	-----------------------------------------
                             96 ;	Register assignment is optimal.
                             97 ;	Stack space usage: 0 bytes.
   0004                      98 _vprintf:
   0004 C7r00r01      [ 4]   99 	sta	(__print_format_PARM_3 + 1)
   0007 CFr00r00      [ 4]  100 	stx	__print_format_PARM_3
                            101 ;../vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
   000A 4F            [ 1]  102 	clra
   000B C7r00r00      [ 4]  103 	sta	__print_format_PARM_2
   000E C7r00r01      [ 4]  104 	sta	(__print_format_PARM_2 + 1)
   0011 C6r00r00      [ 4]  105 	lda	_vprintf_PARM_2
   0014 C7r00r00      [ 4]  106 	sta	__print_format_PARM_4
   0017 C6r00r01      [ 4]  107 	lda	(_vprintf_PARM_2 + 1)
   001A C7r00r01      [ 4]  108 	sta	(__print_format_PARM_4 + 1)
   001D A6r00         [ 2]  109 	lda	#_put_char_to_stdout
   001F AEs00         [ 2]  110 	ldx	#>_put_char_to_stdout
                            111 ;../vprintf.c:44: }
   0021 CCr00r00      [ 3]  112 	jmp	__print_format
                            113 ;------------------------------------------------------------
                            114 ;Allocation info for local variables in function 'printf'
                            115 ;------------------------------------------------------------
                            116 ;format                    Allocated to stack - sp +3
                            117 ;arg                       Allocated to registers 
                            118 ;i                         Allocated to registers a x 
                            119 ;------------------------------------------------------------
                            120 ;../vprintf.c:47: printf (const char *format, ...)
                            121 ;	-----------------------------------------
                            122 ;	 function printf
                            123 ;	-----------------------------------------
                            124 ;	Register assignment is optimal.
                            125 ;	Stack space usage: 0 bytes.
   0024                     126 _printf:
                            127 ;../vprintf.c:52: va_start (arg, format);
   0024 95            [ 2]  128 	tsx
   0025 AF 02         [ 2]  129 	aix	#2
   0027 AF 02         [ 2]  130 	aix	#2
   0029 8B            [ 2]  131 	pshh
   002A 86            [ 2]  132 	pula
   002B C7r00r00      [ 4]  133 	sta	__print_format_PARM_4
   002E CFr00r01      [ 4]  134 	stx	(__print_format_PARM_4 + 1)
                            135 ;../vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
   0031 4F            [ 1]  136 	clra
   0032 C7r00r00      [ 4]  137 	sta	__print_format_PARM_2
   0035 C7r00r01      [ 4]  138 	sta	(__print_format_PARM_2 + 1)
   0038 95            [ 2]  139 	tsx
   0039 E6 02         [ 3]  140 	lda	2,x
   003B C7r00r00      [ 4]  141 	sta	__print_format_PARM_3
   003E E6 03         [ 3]  142 	lda	3,x
   0040 C7r00r01      [ 4]  143 	sta	(__print_format_PARM_3 + 1)
   0043 A6r00         [ 2]  144 	lda	#_put_char_to_stdout
   0045 AEs00         [ 2]  145 	ldx	#>_put_char_to_stdout
                            146 ;../vprintf.c:56: return i;
                            147 ;../vprintf.c:57: }
   0047 CCr00r00      [ 3]  148 	jmp	__print_format
                            149 	.area CSEG    (CODE)
                            150 	.area CONST   (CODE)
                            151 	.area XINIT   (CODE)
                            152 	.area CABS    (ABS,CODE)
