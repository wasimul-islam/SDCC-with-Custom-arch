                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module strtol
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _strtoul
                             23 	.globl _strtol_PARM_3
                             24 	.globl _strtol_PARM_2
                             25 	.globl _strtol
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
   0000                      30 _strtol_sloc0_1_0:
   0000                      31 	.ds 1
   0001                      32 _strtol_sloc1_1_0:
   0001                      33 	.ds 2
   0003                      34 _strtol_sloc2_1_0:
   0003                      35 	.ds 4
   0007                      36 _strtol_sloc3_1_0:
   0007                      37 	.ds 4
                             38 ;--------------------------------------------------------
                             39 ; overlayable items in ram
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; absolute ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS)
                             45 	.area IABS    (ABS)
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area XABS    (ABS)
                             50 ;--------------------------------------------------------
                             51 ; initialized external ram data
                             52 ;--------------------------------------------------------
                             53 	.area XISEG
                             54 ;--------------------------------------------------------
                             55 ; extended address mode data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG
   0000                      58 _strtol_PARM_2:
   0000                      59 	.ds 2
   0002                      60 _strtol_PARM_3:
   0002                      61 	.ds 2
   0004                      62 _strtol_nptr_65536_56:
   0004                      63 	.ds 2
   0006                      64 _strtol_rptr_65536_57:
   0006                      65 	.ds 2
   0008                      66 _strtol_neg_65536_57:
   0008                      67 	.ds 1
                             68 ;--------------------------------------------------------
                             69 ; global & static initialisations
                             70 ;--------------------------------------------------------
                             71 	.area HOME    (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area GSINIT  (CODE)
                             75 ;--------------------------------------------------------
                             76 ; Home
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area HOME    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; code
                             82 ;--------------------------------------------------------
                             83 	.area CSEG    (CODE)
                             84 ;------------------------------------------------------------
                             85 ;Allocation info for local variables in function 'strtol'
                             86 ;------------------------------------------------------------
                             87 ;sloc0                     Allocated with name '_strtol_sloc0_1_0'
                             88 ;sloc1                     Allocated with name '_strtol_sloc1_1_0'
                             89 ;sloc2                     Allocated with name '_strtol_sloc2_1_0'
                             90 ;sloc3                     Allocated with name '_strtol_sloc3_1_0'
                             91 ;endptr                    Allocated with name '_strtol_PARM_2'
                             92 ;base                      Allocated with name '_strtol_PARM_3'
                             93 ;nptr                      Allocated with name '_strtol_nptr_65536_56'
                             94 ;__1310720007              Allocated to registers 
                             95 ;__1310720004              Allocated to registers 
                             96 ;ptr                       Allocated to registers x h 
                             97 ;rptr                      Allocated with name '_strtol_rptr_65536_57'
                             98 ;u                         Allocated with name '_strtol_u_65536_57'
                             99 ;neg                       Allocated with name '_strtol_neg_65536_57'
                            100 ;__1310720005              Allocated to registers 
                            101 ;c                         Allocated to registers 
                            102 ;__1310720008              Allocated to registers 
                            103 ;c                         Allocated to registers 
                            104 ;------------------------------------------------------------
                            105 ;../strtol.c:38: long int strtol(const char *nptr, char **endptr, int base)
                            106 ;	-----------------------------------------
                            107 ;	 function strtol
                            108 ;	-----------------------------------------
                            109 ;	Register assignment might be sub-optimal.
                            110 ;	Stack space usage: 0 bytes.
   0000                     111 _strtol:
   0000 C7r00r05      [ 4]  112 	sta	(_strtol_nptr_65536_56 + 1)
   0003 CFr00r04      [ 4]  113 	stx	_strtol_nptr_65536_56
                            114 ;../strtol.c:45: while (isblank (*ptr))
   0006 C6r00r04      [ 4]  115 	lda	_strtol_nptr_65536_56
   0009 87            [ 2]  116 	psha
   000A 8A            [ 2]  117 	pulh
   000B CEr00r05      [ 4]  118 	ldx	(_strtol_nptr_65536_56 + 1)
   000E                     119 00101$:
   000E F6            [ 2]  120 	lda	,x
   000F B7*00         [ 3]  121 	sta	*_strtol_sloc0_1_0
   0011 B6*00         [ 3]  122 	lda	*_strtol_sloc0_1_0
                            123 ;../strtol.c:46: ptr++;
   0013 89            [ 2]  124 	pshx
   0014 8B            [ 2]  125 	pshh
   0015 AF 01         [ 2]  126 	aix	#1
   0017 35*01         [ 4]  127 	sthx	*_strtol_sloc1_1_0
   0019 8A            [ 2]  128 	pulh
   001A 88            [ 2]  129 	pulx
                            130 ;./../../include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   001B 41 20 04      [ 4]  131 	cbeqa	#0x20,00132$
   001E A1 09         [ 2]  132 	cmp	#0x09
   0020 26 04         [ 3]  133 	bne	00158$
   0022                     134 00132$:
                            135 ;../strtol.c:46: ptr++;
   0022 55*01         [ 4]  136 	ldhx	*_strtol_sloc1_1_0
   0024 20 E8         [ 3]  137 	bra	00101$
   0026                     138 00158$:
                            139 ;../strtol.c:50: if (*ptr == '-')
   0026 B6*00         [ 3]  140 	lda	*_strtol_sloc0_1_0
   0028 A1 2D         [ 2]  141 	cmp	#0x2d
   002A 26 09         [ 3]  142 	bne	00105$
                            143 ;../strtol.c:52: neg = true;
   002C A6 01         [ 2]  144 	lda	#0x01
   002E C7r00r08      [ 4]  145 	sta	_strtol_neg_65536_57
                            146 ;../strtol.c:53: ptr++;
   0031 55*01         [ 4]  147 	ldhx	*_strtol_sloc1_1_0
   0033 20 04         [ 3]  148 	bra	00106$
   0035                     149 00105$:
                            150 ;../strtol.c:56: neg = false;
   0035 4F            [ 1]  151 	clra
   0036 C7r00r08      [ 4]  152 	sta	_strtol_neg_65536_57
   0039                     153 00106$:
                            154 ;../strtol.c:62: *endptr = nptr;
   0039 C6r00r00      [ 4]  155 	lda	_strtol_PARM_2
   003C B7*01         [ 3]  156 	sta	*_strtol_sloc1_1_0
   003E C6r00r01      [ 4]  157 	lda	(_strtol_PARM_2 + 1)
   0041 B7*02         [ 3]  158 	sta	*(_strtol_sloc1_1_0 + 1)
                            159 ;../strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
   0043 C6r00r08      [ 4]  160 	lda	_strtol_neg_65536_57
   0046 27 30         [ 3]  161 	beq	00110$
   0048 F6            [ 2]  162 	lda	,x
   0049 B7*00         [ 3]  163 	sta	*_strtol_sloc0_1_0
   004B B6*00         [ 3]  164 	lda	*_strtol_sloc0_1_0
                            165 ;./../../include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   004D 41 20 0E      [ 4]  166 	cbeqa	#0x20,00109$
   0050 41 09 0B      [ 4]  167 	cbeqa	#0x09,00109$
                            168 ;../strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
   0053 B6*00         [ 3]  169 	lda	*_strtol_sloc0_1_0
   0055 41 2D 06      [ 4]  170 	cbeqa	#0x2d,00109$
   0058 B6*00         [ 3]  171 	lda	*_strtol_sloc0_1_0
   005A A1 2B         [ 2]  172 	cmp	#0x2b
   005C 26 1A         [ 3]  173 	bne	00110$
   005E                     174 00109$:
                            175 ;../strtol.c:61: if (endptr)
   005E C6r00r00      [ 4]  176 	lda	_strtol_PARM_2
   0061 CAr00r01      [ 4]  177 	ora	(_strtol_PARM_2 + 1)
   0064 27 0B         [ 3]  178 	beq	00108$
                            179 ;../strtol.c:62: *endptr = nptr;
   0066 55*01         [ 4]  180 	ldhx	*_strtol_sloc1_1_0
   0068 C6r00r04      [ 4]  181 	lda	_strtol_nptr_65536_56
   006B F7            [ 2]  182 	sta	,x
   006C C6r00r05      [ 4]  183 	lda	(_strtol_nptr_65536_56 + 1)
   006F E7 01         [ 3]  184 	sta	1,x
   0071                     185 00108$:
                            186 ;../strtol.c:63: return (0);
   0071 4F            [ 1]  187 	clra
   0072 97            [ 1]  188 	tax
   0073 B7*00         [ 3]  189 	sta	*___SDCC_hc08_ret2
   0075 B7*00         [ 3]  190 	sta	*___SDCC_hc08_ret3
   0077 81            [ 4]  191 	rts
   0078                     192 00110$:
                            193 ;../strtol.c:66: u = strtoul(ptr, &rptr, base);
   0078 A6r06         [ 2]  194 	lda	#_strtol_rptr_65536_57
   007A C7r00r01      [ 4]  195 	sta	(_strtoul_PARM_2 + 1)
   007D A6s00         [ 2]  196 	lda	#>_strtol_rptr_65536_57
   007F C7r00r00      [ 4]  197 	sta	_strtoul_PARM_2
   0082 C6r00r02      [ 4]  198 	lda	_strtol_PARM_3
   0085 C7r00r00      [ 4]  199 	sta	_strtoul_PARM_3
   0088 C6r00r03      [ 4]  200 	lda	(_strtol_PARM_3 + 1)
   008B C7r00r01      [ 4]  201 	sta	(_strtoul_PARM_3 + 1)
   008E 89            [ 2]  202 	pshx
   008F 8B            [ 2]  203 	pshh
   0090 9F            [ 1]  204 	txa
   0091 8B            [ 2]  205 	pshh
   0092 88            [ 2]  206 	pulx
   0093 CDr00r00      [ 5]  207 	jsr	_strtoul
   0096 B7*06         [ 3]  208 	sta	*(_strtol_sloc2_1_0 + 3)
   0098 BF*05         [ 3]  209 	stx	*(_strtol_sloc2_1_0 + 2)
   009A 4E*00*04      [ 5]  210 	mov	*___SDCC_hc08_ret2,*(_strtol_sloc2_1_0 + 1)
   009D 4E*00*03      [ 5]  211 	mov	*___SDCC_hc08_ret3,*_strtol_sloc2_1_0
   00A0 8A            [ 2]  212 	pulh
   00A1 88            [ 2]  213 	pulx
                            214 ;../strtol.c:69: if (rptr == ptr)
   00A2 C3r00r07      [ 4]  215 	cpx	(_strtol_rptr_65536_57 + 1)
   00A5 26 07         [ 3]  216 	bne	00234$
   00A7 8B            [ 2]  217 	pshh
   00A8 86            [ 2]  218 	pula
   00A9 C1r00r06      [ 4]  219 	cmp	_strtol_rptr_65536_57
   00AC 27 02         [ 3]  220 	beq	00235$
   00AE                     221 00234$:
   00AE 20 1A         [ 3]  222 	bra	00117$
   00B0                     223 00235$:
                            224 ;../strtol.c:71: if (endptr)
   00B0 C6r00r00      [ 4]  225 	lda	_strtol_PARM_2
   00B3 CAr00r01      [ 4]  226 	ora	(_strtol_PARM_2 + 1)
   00B6 27 0B         [ 3]  227 	beq	00115$
                            228 ;../strtol.c:72: *endptr = nptr;
   00B8 55*01         [ 4]  229 	ldhx	*_strtol_sloc1_1_0
   00BA C6r00r04      [ 4]  230 	lda	_strtol_nptr_65536_56
   00BD F7            [ 2]  231 	sta	,x
   00BE C6r00r05      [ 4]  232 	lda	(_strtol_nptr_65536_56 + 1)
   00C1 E7 01         [ 3]  233 	sta	1,x
   00C3                     234 00115$:
                            235 ;../strtol.c:73: return (0);
   00C3 4F            [ 1]  236 	clra
   00C4 97            [ 1]  237 	tax
   00C5 B7*00         [ 3]  238 	sta	*___SDCC_hc08_ret2
   00C7 B7*00         [ 3]  239 	sta	*___SDCC_hc08_ret3
   00C9 81            [ 4]  240 	rts
   00CA                     241 00117$:
                            242 ;../strtol.c:76: if (endptr)
   00CA C6r00r00      [ 4]  243 	lda	_strtol_PARM_2
   00CD CAr00r01      [ 4]  244 	ora	(_strtol_PARM_2 + 1)
   00D0 27 0B         [ 3]  245 	beq	00119$
                            246 ;../strtol.c:77: *endptr = rptr;
   00D2 55*01         [ 4]  247 	ldhx	*_strtol_sloc1_1_0
   00D4 C6r00r06      [ 4]  248 	lda	_strtol_rptr_65536_57
   00D7 F7            [ 2]  249 	sta	,x
   00D8 C6r00r07      [ 4]  250 	lda	(_strtol_rptr_65536_57 + 1)
   00DB E7 01         [ 3]  251 	sta	1,x
   00DD                     252 00119$:
                            253 ;../strtol.c:80: if (!neg && u > LONG_MAX)
   00DD C6r00r08      [ 4]  254 	lda	_strtol_neg_65536_57
   00E0 26 24         [ 3]  255 	bne	00124$
   00E2 A6 FF         [ 2]  256 	lda	#0xff
   00E4 B0*06         [ 3]  257 	sub	*(_strtol_sloc2_1_0 + 3)
   00E6 A6 FF         [ 2]  258 	lda	#0xff
   00E8 B2*05         [ 3]  259 	sbc	*(_strtol_sloc2_1_0 + 2)
   00EA A6 FF         [ 2]  260 	lda	#0xff
   00EC B2*04         [ 3]  261 	sbc	*(_strtol_sloc2_1_0 + 1)
   00EE A6 7F         [ 2]  262 	lda	#0x7f
   00F0 B2*03         [ 3]  263 	sbc	*_strtol_sloc2_1_0
   00F2 24 12         [ 3]  264 	bcc	00124$
                            265 ;../strtol.c:82: errno = ERANGE;
   00F4 4F            [ 1]  266 	clra
   00F5 C7r00r00      [ 4]  267 	sta	_errno
   00F8 A6 22         [ 2]  268 	lda	#0x22
   00FA C7r00r01      [ 4]  269 	sta	(_errno + 1)
                            270 ;../strtol.c:83: return (LONG_MAX);
   00FD A6 FF         [ 2]  271 	lda	#0xff
   00FF 97            [ 1]  272 	tax
   0100 B7*00         [ 3]  273 	sta	*___SDCC_hc08_ret2
   0102 6E 7F*00      [ 4]  274 	mov	#0x7f,*___SDCC_hc08_ret3
   0105 81            [ 4]  275 	rts
   0106                     276 00124$:
                            277 ;../strtol.c:85: else if (neg && u > -LONG_MIN)
   0106 C6r00r08      [ 4]  278 	lda	_strtol_neg_65536_57
   0109 27 20         [ 3]  279 	beq	00125$
   010B 4F            [ 1]  280 	clra
   010C B0*06         [ 3]  281 	sub	*(_strtol_sloc2_1_0 + 3)
   010E 4F            [ 1]  282 	clra
   010F B2*05         [ 3]  283 	sbc	*(_strtol_sloc2_1_0 + 2)
   0111 4F            [ 1]  284 	clra
   0112 B2*04         [ 3]  285 	sbc	*(_strtol_sloc2_1_0 + 1)
   0114 A6 80         [ 2]  286 	lda	#0x80
   0116 B2*03         [ 3]  287 	sbc	*_strtol_sloc2_1_0
   0118 24 11         [ 3]  288 	bcc	00125$
                            289 ;../strtol.c:87: errno = ERANGE;
   011A 4F            [ 1]  290 	clra
   011B C7r00r00      [ 4]  291 	sta	_errno
   011E A6 22         [ 2]  292 	lda	#0x22
   0120 C7r00r01      [ 4]  293 	sta	(_errno + 1)
                            294 ;../strtol.c:88: return (LONG_MIN);
   0123 4F            [ 1]  295 	clra
   0124 97            [ 1]  296 	tax
   0125 B7*00         [ 3]  297 	sta	*___SDCC_hc08_ret2
   0127 6E 80*00      [ 4]  298 	mov	#0x80,*___SDCC_hc08_ret3
   012A 81            [ 4]  299 	rts
   012B                     300 00125$:
                            301 ;../strtol.c:91: return (neg ? -u : u);
   012B C6r00r08      [ 4]  302 	lda	_strtol_neg_65536_57
   012E 27 16         [ 3]  303 	beq	00137$
   0130 4F            [ 1]  304 	clra
   0131 B0*06         [ 3]  305 	sub	*(_strtol_sloc2_1_0 + 3)
   0133 B7*0A         [ 3]  306 	sta	*(_strtol_sloc3_1_0 + 3)
   0135 4F            [ 1]  307 	clra
   0136 B2*05         [ 3]  308 	sbc	*(_strtol_sloc2_1_0 + 2)
   0138 B7*09         [ 3]  309 	sta	*(_strtol_sloc3_1_0 + 2)
   013A 4F            [ 1]  310 	clra
   013B B2*04         [ 3]  311 	sbc	*(_strtol_sloc2_1_0 + 1)
   013D B7*08         [ 3]  312 	sta	*(_strtol_sloc3_1_0 + 1)
   013F 4F            [ 1]  313 	clra
   0140 B2*03         [ 3]  314 	sbc	*_strtol_sloc2_1_0
   0142 B7*07         [ 3]  315 	sta	*_strtol_sloc3_1_0
   0144 20 0C         [ 3]  316 	bra	00138$
   0146                     317 00137$:
   0146 4E*03*07      [ 5]  318 	mov	*_strtol_sloc2_1_0,*_strtol_sloc3_1_0
   0149 4E*04*08      [ 5]  319 	mov	*(_strtol_sloc2_1_0 + 1),*(_strtol_sloc3_1_0 + 1)
   014C 4E*05*09      [ 5]  320 	mov	*(_strtol_sloc2_1_0 + 2),*(_strtol_sloc3_1_0 + 2)
   014F 4E*06*0A      [ 5]  321 	mov	*(_strtol_sloc2_1_0 + 3),*(_strtol_sloc3_1_0 + 3)
   0152                     322 00138$:
   0152 4E*07*00      [ 5]  323 	mov	*_strtol_sloc3_1_0,*___SDCC_hc08_ret3
   0155 4E*08*00      [ 5]  324 	mov	*(_strtol_sloc3_1_0 + 1),*___SDCC_hc08_ret2
   0158 BE*09         [ 3]  325 	ldx	*(_strtol_sloc3_1_0 + 2)
   015A B6*0A         [ 3]  326 	lda	*(_strtol_sloc3_1_0 + 3)
                            327 ;../strtol.c:92: }
   015C 81            [ 4]  328 	rts
                            329 	.area CSEG    (CODE)
                            330 	.area CONST   (CODE)
                            331 	.area XINIT   (CODE)
                            332 	.area CABS    (ABS,CODE)
