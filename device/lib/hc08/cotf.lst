                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module cotf
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _tancotf
                             23 	.globl _fabsf
                             24 	.globl _cotf
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; initialized external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area HOME    (CODE)
                             53 	.area GSINIT  (CODE)
                             54 	.area GSFINAL (CODE)
                             55 	.area GSINIT  (CODE)
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area HOME    (CODE)
                             60 	.area HOME    (CODE)
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area CSEG    (CODE)
                             65 ;------------------------------------------------------------
                             66 ;Allocation info for local variables in function 'cotf'
                             67 ;------------------------------------------------------------
                             68 ;x                         Allocated to stack - sp +7
                             69 ;y                         Allocated to stack - sp +1
                             70 ;sloc0                     Allocated to stack - sp +1
                             71 ;------------------------------------------------------------
                             72 ;../cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                             73 ;	-----------------------------------------
                             74 ;	 function cotf
                             75 ;	-----------------------------------------
                             76 ;	Register assignment is optimal.
                             77 ;	Stack space usage: 4 bytes.
   0000                      78 _cotf:
   0000 A7 FC         [ 2]   79 	ais	#-4
                             80 ;../cotf.c:41: y=fabsf(x);
   0002 95            [ 2]   81 	tsx
   0003 E6 09         [ 3]   82 	lda	9,x
   0005 87            [ 2]   83 	psha
   0006 E6 08         [ 3]   84 	lda	8,x
   0008 87            [ 2]   85 	psha
   0009 E6 07         [ 3]   86 	lda	7,x
   000B 87            [ 2]   87 	psha
   000C E6 06         [ 3]   88 	lda	6,x
   000E 87            [ 2]   89 	psha
   000F CDr00r00      [ 5]   90 	jsr	_fabsf
   0012 C7r00r03      [ 4]   91 	sta	(___fslt_PARM_1 + 3)
   0015 CFr00r02      [ 4]   92 	stx	(___fslt_PARM_1 + 2)
   0018 B6*00         [ 3]   93 	lda	*___SDCC_hc08_ret2
   001A C7r00r01      [ 4]   94 	sta	(___fslt_PARM_1 + 1)
   001D B6*00         [ 3]   95 	lda	*___SDCC_hc08_ret3
   001F C7r00r00      [ 4]   96 	sta	___fslt_PARM_1
   0022 A7 04         [ 2]   97 	ais	#4
                             98 ;../cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
   0024 45r00r00      [ 3]   99 	ldhx	#___fslt_PARM_2
   0027 A6 0D         [ 2]  100 	lda	#0x0d
   0029 F7            [ 2]  101 	sta	,x
   002A A6 A2         [ 2]  102 	lda	#0xa2
   002C E7 01         [ 3]  103 	sta	1,x
   002E A6 42         [ 2]  104 	lda	#0x42
   0030 E7 02         [ 3]  105 	sta	2,x
   0032 A6 60         [ 2]  106 	lda	#0x60
   0034 E7 03         [ 3]  107 	sta	3,x
   0036 CDr00r00      [ 5]  108 	jsr	___fslt
   0039 4D            [ 1]  109 	tsta
   003A 27 46         [ 3]  110 	beq	00105$
                            111 ;../cotf.c:44: errno = ERANGE;
   003C 4F            [ 1]  112 	clra
   003D C7r00r00      [ 4]  113 	sta	_errno
   0040 A6 22         [ 2]  114 	lda	#0x22
   0042 C7r00r01      [ 4]  115 	sta	(_errno + 1)
                            116 ;../cotf.c:45: if (x<0.0)
   0045 95            [ 2]  117 	tsx
   0046 45r00r00      [ 3]  118 	ldhx	#___fslt_PARM_1
   0049 9E E6 07      [ 4]  119 	lda	7,s
   004C F7            [ 2]  120 	sta	,x
   004D 9E E6 08      [ 4]  121 	lda	8,s
   0050 E7 01         [ 3]  122 	sta	1,x
   0052 9E E6 09      [ 4]  123 	lda	9,s
   0055 E7 02         [ 3]  124 	sta	2,x
   0057 9E E6 0A      [ 4]  125 	lda	10,s
   005A E7 03         [ 3]  126 	sta	3,x
   005C 45r00r00      [ 3]  127 	ldhx	#___fslt_PARM_2
   005F 4F            [ 1]  128 	clra
   0060 F7            [ 2]  129 	sta	,x
   0061 E7 01         [ 3]  130 	sta	1,x
   0063 E7 02         [ 3]  131 	sta	2,x
   0065 E7 03         [ 3]  132 	sta	3,x
   0067 CDr00r00      [ 5]  133 	jsr	___fslt
   006A 4D            [ 1]  134 	tsta
   006B 27 0A         [ 3]  135 	beq	00102$
                            136 ;../cotf.c:46: return -HUGE_VALF;
   006D A6 FF         [ 2]  137 	lda	#0xff
   006F 97            [ 1]  138 	tax
   0070 6E 7F*00      [ 4]  139 	mov	#0x7f,*___SDCC_hc08_ret2
   0073 B7*00         [ 3]  140 	sta	*___SDCC_hc08_ret3
   0075 20 47         [ 3]  141 	bra	00106$
   0077                     142 00102$:
                            143 ;../cotf.c:48: return +HUGE_VALF;
   0077 A6 FF         [ 2]  144 	lda	#0xff
   0079 97            [ 1]  145 	tax
   007A 6E 7F*00      [ 4]  146 	mov	#0x7f,*___SDCC_hc08_ret2
   007D 6E 7F*00      [ 4]  147 	mov	#0x7f,*___SDCC_hc08_ret3
   0080 20 3C         [ 3]  148 	bra	00106$
   0082                     149 00105$:
                            150 ;../cotf.c:50: return tancotf(x, 1);
   0082 95            [ 2]  151 	tsx
   0083 45r00r00      [ 3]  152 	ldhx	#_tancotf_PARM_1
   0086 9E E6 07      [ 4]  153 	lda	7,s
   0089 F7            [ 2]  154 	sta	,x
   008A 9E E6 08      [ 4]  155 	lda	8,s
   008D E7 01         [ 3]  156 	sta	1,x
   008F 9E E6 09      [ 4]  157 	lda	9,s
   0092 E7 02         [ 3]  158 	sta	2,x
   0094 9E E6 0A      [ 4]  159 	lda	10,s
   0097 E7 03         [ 3]  160 	sta	3,x
   0099 A6 01         [ 2]  161 	lda	#0x01
   009B C7r00r00      [ 4]  162 	sta	_tancotf_PARM_2
   009E CDr00r00      [ 5]  163 	jsr	_tancotf
   00A1 9E E7 04      [ 4]  164 	sta	4,s
   00A4 9E EF 03      [ 4]  165 	stx	3,s
   00A7 B6*00         [ 3]  166 	lda	*___SDCC_hc08_ret2
   00A9 9E E7 02      [ 4]  167 	sta	2,s
   00AC B6*00         [ 3]  168 	lda	*___SDCC_hc08_ret3
   00AE 9E E7 01      [ 4]  169 	sta	1,s
   00B1 95            [ 2]  170 	tsx
   00B2 F6            [ 2]  171 	lda	,x
   00B3 B7*00         [ 3]  172 	sta	*___SDCC_hc08_ret3
   00B5 E6 01         [ 3]  173 	lda	1,x
   00B7 B7*00         [ 3]  174 	sta	*___SDCC_hc08_ret2
   00B9 EE 02         [ 3]  175 	ldx	2,x
   00BB 9E E6 04      [ 4]  176 	lda	4,s
   00BE                     177 00106$:
                            178 ;../cotf.c:51: }
   00BE A7 04         [ 2]  179 	ais	#4
   00C0 81            [ 4]  180 	rts
                            181 	.area CSEG    (CODE)
                            182 	.area CONST   (CODE)
                            183 	.area XINIT   (CODE)
                            184 	.area CABS    (ABS,CODE)
