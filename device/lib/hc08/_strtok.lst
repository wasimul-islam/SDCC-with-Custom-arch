                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _strtok
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _strchr
                             23 	.globl _strtok_PARM_2
                             24 	.globl _strtok
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; initialized external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
   0000                      49 _strtok_PARM_2:
   0000                      50 	.ds 2
   0002                      51 _strtok_s_65536_27:
   0002                      52 	.ds 2
   0004                      53 _strtok_s1_65536_27:
   0004                      54 	.ds 2
                             55 ;--------------------------------------------------------
                             56 ; global & static initialisations
                             57 ;--------------------------------------------------------
                             58 	.area HOME    (CODE)
                             59 	.area GSINIT  (CODE)
                             60 	.area GSFINAL (CODE)
                             61 	.area GSINIT  (CODE)
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area HOME    (CODE)
                             66 	.area HOME    (CODE)
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area CSEG    (CODE)
                             71 ;------------------------------------------------------------
                             72 ;Allocation info for local variables in function 'strtok'
                             73 ;------------------------------------------------------------
                             74 ;control                   Allocated with name '_strtok_PARM_2'
                             75 ;str                       Allocated to registers a x 
                             76 ;s                         Allocated with name '_strtok_s_65536_27'
                             77 ;s1                        Allocated with name '_strtok_s1_65536_27'
                             78 ;------------------------------------------------------------
                             79 ;../_strtok.c:36: char * strtok ( char * str, const char * control )
                             80 ;	-----------------------------------------
                             81 ;	 function strtok
                             82 ;	-----------------------------------------
                             83 ;	Register assignment is optimal.
                             84 ;	Stack space usage: 0 bytes.
   0000                      85 _strtok:
                             86 ;../_strtok.c:41: if ( str )
   0000 4D            [ 1]   87 	tsta
   0001 26 01         [ 3]   88 	bne	00166$
   0003 5D            [ 1]   89 	tstx
   0004                      90 00166$:
   0004 27 06         [ 3]   91 	beq	00102$
                             92 ;../_strtok.c:42: s = str;
   0006 CFr00r02      [ 4]   93 	stx	_strtok_s_65536_27
   0009 C7r00r03      [ 4]   94 	sta	(_strtok_s_65536_27 + 1)
   000C                      95 00102$:
                             96 ;../_strtok.c:43: if ( !s )
   000C C6r00r02      [ 4]   97 	lda	_strtok_s_65536_27
   000F CAr00r03      [ 4]   98 	ora	(_strtok_s_65536_27 + 1)
   0012 26 03         [ 3]   99 	bne	00108$
                            100 ;../_strtok.c:44: return NULL;
   0014 4F            [ 1]  101 	clra
   0015 97            [ 1]  102 	tax
   0016 81            [ 4]  103 	rts
                            104 ;../_strtok.c:46: while (*s) {
   0017                     105 00108$:
   0017 C6r00r02      [ 4]  106 	lda	_strtok_s_65536_27
   001A 87            [ 2]  107 	psha
   001B 8A            [ 2]  108 	pulh
   001C CEr00r03      [ 4]  109 	ldx	(_strtok_s_65536_27 + 1)
   001F F6            [ 2]  110 	lda	,x
   0020 4D            [ 1]  111 	tsta
   0021 27 1C         [ 3]  112 	beq	00110$
                            113 ;../_strtok.c:47: if (strchr(control,*s))
   0023 C7r00r00      [ 4]  114 	sta	_strchr_PARM_2
   0026 C6r00r01      [ 4]  115 	lda	(_strtok_PARM_2 + 1)
   0029 CEr00r00      [ 4]  116 	ldx	_strtok_PARM_2
   002C CDr00r00      [ 5]  117 	jsr	_strchr
   002F 4D            [ 1]  118 	tsta
   0030 26 01         [ 3]  119 	bne	00170$
   0032 5D            [ 1]  120 	tstx
   0033                     121 00170$:
   0033 27 0A         [ 3]  122 	beq	00110$
                            123 ;../_strtok.c:48: s++;
   0035 45r00r02      [ 3]  124 	ldhx	#_strtok_s_65536_27
   0038 6C 01         [ 4]  125 	inc	1,x
   003A 26 01         [ 3]  126 	bne	00172$
   003C 7C            [ 3]  127 	inc	,x
   003D                     128 00172$:
   003D 20 D8         [ 3]  129 	bra	00108$
                            130 ;../_strtok.c:50: break;
   003F                     131 00110$:
                            132 ;../_strtok.c:53: s1 = s;
   003F C6r00r02      [ 4]  133 	lda	_strtok_s_65536_27
   0042 C7r00r04      [ 4]  134 	sta	_strtok_s1_65536_27
   0045 C6r00r03      [ 4]  135 	lda	(_strtok_s_65536_27 + 1)
   0048 C7r00r05      [ 4]  136 	sta	(_strtok_s1_65536_27 + 1)
                            137 ;../_strtok.c:55: while (*s) {
   004B                     138 00113$:
   004B C6r00r02      [ 4]  139 	lda	_strtok_s_65536_27
   004E 87            [ 2]  140 	psha
   004F 8A            [ 2]  141 	pulh
   0050 CEr00r03      [ 4]  142 	ldx	(_strtok_s_65536_27 + 1)
   0053 F6            [ 2]  143 	lda	,x
   0054 4D            [ 1]  144 	tsta
   0055 27 35         [ 3]  145 	beq	00115$
                            146 ;../_strtok.c:56: if (strchr(control,*s)) {
   0057 C7r00r00      [ 4]  147 	sta	_strchr_PARM_2
   005A C6r00r01      [ 4]  148 	lda	(_strtok_PARM_2 + 1)
   005D CEr00r00      [ 4]  149 	ldx	_strtok_PARM_2
   0060 CDr00r00      [ 5]  150 	jsr	_strchr
   0063 4D            [ 1]  151 	tsta
   0064 26 01         [ 3]  152 	bne	00174$
   0066 5D            [ 1]  153 	tstx
   0067                     154 00174$:
   0067 27 19         [ 3]  155 	beq	00112$
                            156 ;../_strtok.c:57: *s++ = '\0';
   0069 C6r00r02      [ 4]  157 	lda	_strtok_s_65536_27
   006C CEr00r03      [ 4]  158 	ldx	(_strtok_s_65536_27 + 1)
   006F 87            [ 2]  159 	psha
   0070 8A            [ 2]  160 	pulh
   0071 4F            [ 1]  161 	clra
   0072 F7            [ 2]  162 	sta	,x
   0073 45r00r02      [ 3]  163 	ldhx	#_strtok_s_65536_27
   0076 6C 01         [ 4]  164 	inc	1,x
   0078 26 01         [ 3]  165 	bne	00176$
   007A 7C            [ 3]  166 	inc	,x
   007B                     167 00176$:
                            168 ;../_strtok.c:58: return s1;
   007B CEr00r04      [ 4]  169 	ldx	_strtok_s1_65536_27
   007E C6r00r05      [ 4]  170 	lda	(_strtok_s1_65536_27 + 1)
   0081 81            [ 4]  171 	rts
   0082                     172 00112$:
                            173 ;../_strtok.c:60: s++ ;
   0082 45r00r02      [ 3]  174 	ldhx	#_strtok_s_65536_27
   0085 6C 01         [ 4]  175 	inc	1,x
   0087 26 01         [ 3]  176 	bne	00177$
   0089 7C            [ 3]  177 	inc	,x
   008A                     178 00177$:
   008A 20 BF         [ 3]  179 	bra	00113$
   008C                     180 00115$:
                            181 ;../_strtok.c:63: s = NULL;
   008C 4F            [ 1]  182 	clra
   008D C7r00r02      [ 4]  183 	sta	_strtok_s_65536_27
   0090 C7r00r03      [ 4]  184 	sta	(_strtok_s_65536_27 + 1)
                            185 ;../_strtok.c:65: if (*s1)
   0093 C6r00r04      [ 4]  186 	lda	_strtok_s1_65536_27
   0096 87            [ 2]  187 	psha
   0097 8A            [ 2]  188 	pulh
   0098 CEr00r05      [ 4]  189 	ldx	(_strtok_s1_65536_27 + 1)
   009B F6            [ 2]  190 	lda	,x
   009C 27 07         [ 3]  191 	beq	00117$
                            192 ;../_strtok.c:66: return s1;
   009E CEr00r04      [ 4]  193 	ldx	_strtok_s1_65536_27
   00A1 C6r00r05      [ 4]  194 	lda	(_strtok_s1_65536_27 + 1)
   00A4 81            [ 4]  195 	rts
   00A5                     196 00117$:
                            197 ;../_strtok.c:68: return NULL;
   00A5 4F            [ 1]  198 	clra
   00A6 97            [ 1]  199 	tax
                            200 ;../_strtok.c:69: }
   00A7 81            [ 4]  201 	rts
                            202 	.area CSEG    (CODE)
                            203 	.area CONST   (CODE)
                            204 	.area XINIT   (CODE)
                            205 	.area CABS    (ABS,CODE)
