                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ISO C Compiler 
                              3 ; Version 4.2.14 #0 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module mbtowc
                              6 	.optsdcc -mhc08
                              7 	
                              8 	.area HOME    (CODE)
                              9 	.area GSINIT0 (CODE)
                             10 	.area GSINIT  (CODE)
                             11 	.area GSFINAL (CODE)
                             12 	.area CSEG    (CODE)
                             13 	.area XINIT   (CODE)
                             14 	.area CONST   (CODE)
                             15 	.area DSEG    (PAG)
                             16 	.area OSEG    (PAG, OVR)
                             17 	.area XSEG
                             18 	.area XISEG
                             19 ;--------------------------------------------------------
                             20 ; Public variables in this module
                             21 ;--------------------------------------------------------
                             22 	.globl _mbtowc_PARM_3
                             23 	.globl _mbtowc_PARM_2
                             24 	.globl _mbtowc
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram
                             31 ;--------------------------------------------------------
                             32 	.area	OSEG    (PAG, OVR)
   0000                      33 _mbtowc_sloc0_1_0:
   0000                      34 	.ds 1
   0001                      35 _mbtowc_sloc1_1_0:
   0001                      36 	.ds 2
   0003                      37 _mbtowc_sloc2_1_0:
   0003                      38 	.ds 2
   0005                      39 _mbtowc_sloc3_1_0:
   0005                      40 	.ds 2
   0007                      41 _mbtowc_sloc4_1_0:
   0007                      42 	.ds 4
                             43 ;--------------------------------------------------------
                             44 ; absolute ram data
                             45 ;--------------------------------------------------------
                             46 	.area IABS    (ABS)
                             47 	.area IABS    (ABS)
                             48 ;--------------------------------------------------------
                             49 ; absolute external ram data
                             50 ;--------------------------------------------------------
                             51 	.area XABS    (ABS)
                             52 ;--------------------------------------------------------
                             53 ; initialized external ram data
                             54 ;--------------------------------------------------------
                             55 	.area XISEG
                             56 ;--------------------------------------------------------
                             57 ; extended address mode data
                             58 ;--------------------------------------------------------
                             59 	.area XSEG
   0000                      60 _mbtowc_PARM_2:
   0000                      61 	.ds 2
   0002                      62 _mbtowc_PARM_3:
   0002                      63 	.ds 2
   0004                      64 _mbtowc_pwc_65536_36:
   0004                      65 	.ds 2
   0006                      66 _mbtowc_codepoint_65536_37:
   0006                      67 	.ds 4
   000A                      68 _mbtowc_first_byte_65536_37:
   000A                      69 	.ds 1
                             70 ;--------------------------------------------------------
                             71 ; global & static initialisations
                             72 ;--------------------------------------------------------
                             73 	.area HOME    (CODE)
                             74 	.area GSINIT  (CODE)
                             75 	.area GSFINAL (CODE)
                             76 	.area GSINIT  (CODE)
                             77 ;--------------------------------------------------------
                             78 ; Home
                             79 ;--------------------------------------------------------
                             80 	.area HOME    (CODE)
                             81 	.area HOME    (CODE)
                             82 ;--------------------------------------------------------
                             83 ; code
                             84 ;--------------------------------------------------------
                             85 	.area CSEG    (CODE)
                             86 ;------------------------------------------------------------
                             87 ;Allocation info for local variables in function 'mbtowc'
                             88 ;------------------------------------------------------------
                             89 ;s                         Allocated with name '_mbtowc_PARM_2'
                             90 ;n                         Allocated with name '_mbtowc_PARM_3'
                             91 ;pwc                       Allocated with name '_mbtowc_pwc_65536_36'
                             92 ;codepoint                 Allocated with name '_mbtowc_codepoint_65536_37'
                             93 ;seqlen                    Allocated to registers 
                             94 ;i                         Allocated to registers 
                             95 ;first_byte                Allocated with name '_mbtowc_first_byte_65536_37'
                             96 ;sloc0                     Allocated with name '_mbtowc_sloc0_1_0'
                             97 ;sloc1                     Allocated with name '_mbtowc_sloc1_1_0'
                             98 ;sloc2                     Allocated with name '_mbtowc_sloc2_1_0'
                             99 ;sloc3                     Allocated with name '_mbtowc_sloc3_1_0'
                            100 ;sloc4                     Allocated with name '_mbtowc_sloc4_1_0'
                            101 ;------------------------------------------------------------
                            102 ;../mbtowc.c:31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                            103 ;	-----------------------------------------
                            104 ;	 function mbtowc
                            105 ;	-----------------------------------------
                            106 ;	Register assignment is optimal.
                            107 ;	Stack space usage: 0 bytes.
   0000                     108 _mbtowc:
   0000 C7r00r05      [ 4]  109 	sta	(_mbtowc_pwc_65536_36 + 1)
   0003 CFr00r04      [ 4]  110 	stx	_mbtowc_pwc_65536_36
                            111 ;../mbtowc.c:37: if(!s)
   0006 C6r00r00      [ 4]  112 	lda	_mbtowc_PARM_2
   0009 CAr00r01      [ 4]  113 	ora	(_mbtowc_PARM_2 + 1)
   000C 26 03         [ 3]  114 	bne	00102$
                            115 ;../mbtowc.c:38: return(0);
   000E 4F            [ 1]  116 	clra
   000F 97            [ 1]  117 	tax
   0010 81            [ 4]  118 	rts
   0011                     119 00102$:
                            120 ;../mbtowc.c:40: seqlen = 1;
   0011 6E 01*00      [ 4]  121 	mov	#0x01,*_mbtowc_sloc0_1_0
                            122 ;../mbtowc.c:41: first_byte = *s;
   0014 C6r00r00      [ 4]  123 	lda	_mbtowc_PARM_2
   0017 B7*01         [ 3]  124 	sta	*_mbtowc_sloc1_1_0
   0019 C6r00r01      [ 4]  125 	lda	(_mbtowc_PARM_2 + 1)
   001C B7*02         [ 3]  126 	sta	*(_mbtowc_sloc1_1_0 + 1)
   001E 55*01         [ 4]  127 	ldhx	*_mbtowc_sloc1_1_0
   0020 F6            [ 2]  128 	lda	,x
   0021 C7r00r0A      [ 4]  129 	sta	_mbtowc_first_byte_65536_37
                            130 ;../mbtowc.c:43: if(first_byte & 0x80)
   0024 C6r00r0A      [ 4]  131 	lda	_mbtowc_first_byte_65536_37
   0027 2A 45         [ 3]  132 	bpl     00107$
                            133 ;../mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
   0029 AE 01         [ 2]  134 	ldx	#0x01
   002B                     135 00103$:
   002B 6E 80*04      [ 4]  136 	mov	#0x80,*(_mbtowc_sloc2_1_0 + 1)
   002E 6E 00*03      [ 4]  137 	mov	#0x00,*_mbtowc_sloc2_1_0
   0031 9F            [ 1]  138 	txa
   0032 4D            [ 1]  139 	tsta
   0033 27 06         [ 3]  140 	beq	00204$
   0035                     141 00203$:
   0035 37*03         [ 4]  142 	asr	*_mbtowc_sloc2_1_0
   0037 36*04         [ 4]  143 	ror	*(_mbtowc_sloc2_1_0 + 1)
   0039 4B FA         [ 3]  144 	dbnza	00203$
   003B                     145 00204$:
   003B C6r00r0A      [ 4]  146 	lda	_mbtowc_first_byte_65536_37
   003E B7*06         [ 3]  147 	sta	*(_mbtowc_sloc3_1_0 + 1)
   0040 6E 00*05      [ 4]  148 	mov	#0x00,*_mbtowc_sloc3_1_0
                            149 ;../mbtowc.c:46: seqlen++;
   0043 9F            [ 1]  150 	txa
   0044 AB 01         [ 2]  151 	add	#0x01
                            152 ;../mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
   0046 87            [ 2]  153 	psha
   0047 B6*06         [ 3]  154 	lda	*(_mbtowc_sloc3_1_0 + 1)
   0049 B5*04         [ 3]  155 	bit	*(_mbtowc_sloc2_1_0 + 1)
   004B 26 04         [ 3]  156 	bne	00205$
   004D B6*05         [ 3]  157 	lda	*_mbtowc_sloc3_1_0
   004F B5*03         [ 3]  158 	bit	*_mbtowc_sloc2_1_0
   0051                     159 00205$:
   0051 86            [ 2]  160 	pula
   0052 27 03         [ 3]  161 	beq	00143$
                            162 ;../mbtowc.c:46: seqlen++;
   0054 97            [ 1]  163 	tax
   0055 20 D4         [ 3]  164 	bra	00103$
   0057                     165 00143$:
   0057 BF*00         [ 3]  166 	stx	*_mbtowc_sloc0_1_0
                            167 ;../mbtowc.c:47: first_byte &= (0xff >> (seqlen + 1));
   0059 45 00 FF      [ 3]  168 	ldhx	#0x00ff
   005C 4D            [ 1]  169 	tsta
   005D 27 08         [ 3]  170 	beq	00208$
   005F                     171 00207$:
   005F 8B            [ 2]  172 	pshh
   0060 9E 67 01      [ 5]  173 	asr	1,s
   0063 8A            [ 2]  174 	pulh
   0064 56            [ 1]  175 	rorx
   0065 4B F8         [ 3]  176 	dbnza	00207$
   0067                     177 00208$:
   0067 9F            [ 1]  178 	txa
   0068 C4r00r0A      [ 4]  179 	and	_mbtowc_first_byte_65536_37
   006B C7r00r0A      [ 4]  180 	sta	_mbtowc_first_byte_65536_37
   006E                     181 00107$:
                            182 ;../mbtowc.c:50: if(seqlen > 4 || n < seqlen)
   006E B6*00         [ 3]  183 	lda	*_mbtowc_sloc0_1_0
   0070 A1 04         [ 2]  184 	cmp	#0x04
   0072 22 12         [ 3]  185 	bhi	00108$
   0074 4E*00*06      [ 5]  186 	mov	*_mbtowc_sloc0_1_0,*(_mbtowc_sloc3_1_0 + 1)
   0077 6E 00*05      [ 4]  187 	mov	#0x00,*_mbtowc_sloc3_1_0
   007A C6r00r03      [ 4]  188 	lda	(_mbtowc_PARM_3 + 1)
   007D B0*06         [ 3]  189 	sub	*(_mbtowc_sloc3_1_0 + 1)
   007F C6r00r02      [ 4]  190 	lda	_mbtowc_PARM_3
   0082 B2*05         [ 3]  191 	sbc	*_mbtowc_sloc3_1_0
   0084 24 04         [ 3]  192 	bcc	00136$
   0086                     193 00108$:
                            194 ;../mbtowc.c:51: return(-1);
   0086 A6 FF         [ 2]  195 	lda	#0xff
   0088 97            [ 1]  196 	tax
   0089 81            [ 4]  197 	rts
                            198 ;../mbtowc.c:53: for(i = 1; i < seqlen; i++)
   008A                     199 00136$:
   008A A6 01         [ 2]  200 	lda	#0x01
   008C                     201 00121$:
   008C B1*00         [ 3]  202 	cmp	*_mbtowc_sloc0_1_0
   008E 24 1E         [ 3]  203 	bcc	00113$
                            204 ;../mbtowc.c:54: if((s[i] & 0xc0) != 0x80)
   0090 87            [ 2]  205 	psha
   0091 BB*02         [ 3]  206 	add	*(_mbtowc_sloc1_1_0 + 1)
   0093 97            [ 1]  207 	tax
   0094 4F            [ 1]  208 	clra
   0095 B9*01         [ 3]  209 	adc	*_mbtowc_sloc1_1_0
   0097 87            [ 2]  210 	psha
   0098 8A            [ 2]  211 	pulh
   0099 86            [ 2]  212 	pula
   009A FE            [ 2]  213 	ldx	,x
   009B 8C            [ 1]  214 	clrh
   009C 87            [ 2]  215 	psha
   009D 9F            [ 1]  216 	txa
   009E A4 C0         [ 2]  217 	and	#0xc0
   00A0 97            [ 1]  218 	tax
   00A1 86            [ 2]  219 	pula
   00A2 65 00 80      [ 3]  220 	cphx	#0x0080
   00A5 27 04         [ 3]  221 	beq	00122$
                            222 ;../mbtowc.c:55: return(-1);
   00A7 A6 FF         [ 2]  223 	lda	#0xff
   00A9 97            [ 1]  224 	tax
   00AA 81            [ 4]  225 	rts
   00AB                     226 00122$:
                            227 ;../mbtowc.c:53: for(i = 1; i < seqlen; i++)
   00AB 4C            [ 1]  228 	inca
   00AC 20 DE         [ 3]  229 	bra	00121$
   00AE                     230 00113$:
                            231 ;../mbtowc.c:57: codepoint = first_byte;
   00AE C6r00r0A      [ 4]  232 	lda	_mbtowc_first_byte_65536_37
   00B1 C7r00r09      [ 4]  233 	sta	(_mbtowc_codepoint_65536_37 + 3)
   00B4 4F            [ 1]  234 	clra
   00B5 C7r00r08      [ 4]  235 	sta	(_mbtowc_codepoint_65536_37 + 2)
   00B8 C7r00r07      [ 4]  236 	sta	(_mbtowc_codepoint_65536_37 + 1)
   00BB C7r00r06      [ 4]  237 	sta	_mbtowc_codepoint_65536_37
                            238 ;../mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
   00BE 45r00r00      [ 3]  239 	ldhx	#_mbtowc_PARM_2
   00C1 B6*02         [ 3]  240 	lda	*(_mbtowc_sloc1_1_0 + 1)
   00C3 AB 01         [ 2]  241 	add	#0x01
   00C5 E7 01         [ 3]  242 	sta	1,x
   00C7 B6*01         [ 3]  243 	lda	*_mbtowc_sloc1_1_0
   00C9 A9 00         [ 2]  244 	adc	#0
   00CB F7            [ 2]  245 	sta	,x
   00CC B6*00         [ 3]  246 	lda	*_mbtowc_sloc0_1_0
   00CE A0 01         [ 2]  247 	sub	#0x01
   00D0 B7*05         [ 3]  248 	sta	*_mbtowc_sloc3_1_0
   00D2 C6r00r00      [ 4]  249 	lda	_mbtowc_PARM_2
   00D5 B7*03         [ 3]  250 	sta	*_mbtowc_sloc2_1_0
   00D7 C6r00r01      [ 4]  251 	lda	(_mbtowc_PARM_2 + 1)
   00DA B7*04         [ 3]  252 	sta	*(_mbtowc_sloc2_1_0 + 1)
   00DC                     253 00124$:
   00DC 3D*05         [ 3]  254 	tst	*_mbtowc_sloc3_1_0
   00DE 27 78         [ 3]  255 	beq	00114$
                            256 ;../mbtowc.c:61: codepoint <<= 6;
   00E0 C6r00r07      [ 4]  257 	lda	(_mbtowc_codepoint_65536_37 + 1)
   00E3 CEr00r06      [ 4]  258 	ldx	_mbtowc_codepoint_65536_37
   00E6 48            [ 1]  259 	lsla
   00E7 59            [ 1]  260 	rolx
   00E8 48            [ 1]  261 	lsla
   00E9 59            [ 1]  262 	rolx
   00EA 48            [ 1]  263 	lsla
   00EB 59            [ 1]  264 	rolx
   00EC 48            [ 1]  265 	lsla
   00ED 59            [ 1]  266 	rolx
   00EE 48            [ 1]  267 	lsla
   00EF 59            [ 1]  268 	rolx
   00F0 48            [ 1]  269 	lsla
   00F1 59            [ 1]  270 	rolx
   00F2 C7r00r07      [ 4]  271 	sta	(_mbtowc_codepoint_65536_37 + 1)
   00F5 CFr00r06      [ 4]  272 	stx	_mbtowc_codepoint_65536_37
   00F8 C6r00r08      [ 4]  273 	lda	(_mbtowc_codepoint_65536_37 + 2)
   00FB 44            [ 1]  274 	lsra	
   00FC 44            [ 1]  275 	lsra	
   00FD CAr00r07      [ 4]  276 	ora	(_mbtowc_codepoint_65536_37 + 1)
   0100 C7r00r07      [ 4]  277 	sta	(_mbtowc_codepoint_65536_37 + 1)
   0103 C6r00r09      [ 4]  278 	lda	(_mbtowc_codepoint_65536_37 + 3)
   0106 CEr00r08      [ 4]  279 	ldx	(_mbtowc_codepoint_65536_37 + 2)
   0109 48            [ 1]  280 	lsla
   010A 59            [ 1]  281 	rolx
   010B 48            [ 1]  282 	lsla
   010C 59            [ 1]  283 	rolx
   010D 48            [ 1]  284 	lsla
   010E 59            [ 1]  285 	rolx
   010F 48            [ 1]  286 	lsla
   0110 59            [ 1]  287 	rolx
   0111 48            [ 1]  288 	lsla
   0112 59            [ 1]  289 	rolx
   0113 48            [ 1]  290 	lsla
   0114 59            [ 1]  291 	rolx
   0115 C7r00r09      [ 4]  292 	sta	(_mbtowc_codepoint_65536_37 + 3)
   0118 CFr00r08      [ 4]  293 	stx	(_mbtowc_codepoint_65536_37 + 2)
                            294 ;../mbtowc.c:62: codepoint |= (*s & 0x3f);
   011B 55*03         [ 4]  295 	ldhx	*_mbtowc_sloc2_1_0
   011D F6            [ 2]  296 	lda	,x
   011E AF 01         [ 2]  297 	aix	#1
   0120 35*03         [ 4]  298 	sthx	*_mbtowc_sloc2_1_0
   0122 5F            [ 1]  299 	clrx
   0123 A4 3F         [ 2]  300 	and	#0x3f
   0125 87            [ 2]  301 	psha
   0126 86            [ 2]  302 	pula
   0127 B7*0A         [ 3]  303 	sta	*(_mbtowc_sloc4_1_0 + 3)
   0129 9F            [ 1]  304 	txa
   012A B7*09         [ 3]  305 	sta	*(_mbtowc_sloc4_1_0 + 2)
   012C 49            [ 1]  306 	rola	
   012D 4F            [ 1]  307 	clra	
   012E A2 00         [ 2]  308 	sbc	#0x00
   0130 B7*08         [ 3]  309 	sta	*(_mbtowc_sloc4_1_0 + 1)
   0132 B7*07         [ 3]  310 	sta	*_mbtowc_sloc4_1_0
   0134 C6r00r09      [ 4]  311 	lda	(_mbtowc_codepoint_65536_37 + 3)
   0137 BA*0A         [ 3]  312 	ora	*(_mbtowc_sloc4_1_0 + 3)
   0139 C7r00r09      [ 4]  313 	sta	(_mbtowc_codepoint_65536_37 + 3)
   013C C6r00r08      [ 4]  314 	lda	(_mbtowc_codepoint_65536_37 + 2)
   013F BA*09         [ 3]  315 	ora	*(_mbtowc_sloc4_1_0 + 2)
   0141 C7r00r08      [ 4]  316 	sta	(_mbtowc_codepoint_65536_37 + 2)
   0144 C6r00r07      [ 4]  317 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0147 BA*08         [ 3]  318 	ora	*(_mbtowc_sloc4_1_0 + 1)
   0149 C7r00r07      [ 4]  319 	sta	(_mbtowc_codepoint_65536_37 + 1)
   014C C6r00r06      [ 4]  320 	lda	_mbtowc_codepoint_65536_37
   014F BA*07         [ 3]  321 	ora	*_mbtowc_sloc4_1_0
   0151 C7r00r06      [ 4]  322 	sta	_mbtowc_codepoint_65536_37
                            323 ;../mbtowc.c:63: s++;
                            324 ;../mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
   0154 3A*05         [ 4]  325 	dec	*_mbtowc_sloc3_1_0
   0156 20 84         [ 3]  326 	bra	00124$
   0158                     327 00114$:
                            328 ;../mbtowc.c:66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
   0158 C6r00r08      [ 4]  329 	lda	(_mbtowc_codepoint_65536_37 + 2)
   015B A0 D8         [ 2]  330 	sub	#0xd8
   015D C6r00r07      [ 4]  331 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0160 A2 00         [ 2]  332 	sbc	#0x00
   0162 C6r00r06      [ 4]  333 	lda	_mbtowc_codepoint_65536_37
   0165 A2 00         [ 2]  334 	sbc	#0x00
   0167 25 18         [ 3]  335 	bcs	00116$
   0169 A6 FF         [ 2]  336 	lda	#0xff
   016B C0r00r09      [ 4]  337 	sub	(_mbtowc_codepoint_65536_37 + 3)
   016E A6 DF         [ 2]  338 	lda	#0xdf
   0170 C2r00r08      [ 4]  339 	sbc	(_mbtowc_codepoint_65536_37 + 2)
   0173 4F            [ 1]  340 	clra
   0174 C2r00r07      [ 4]  341 	sbc	(_mbtowc_codepoint_65536_37 + 1)
   0177 4F            [ 1]  342 	clra
   0178 C2r00r06      [ 4]  343 	sbc	_mbtowc_codepoint_65536_37
   017B 25 04         [ 3]  344 	bcs	00116$
                            345 ;../mbtowc.c:67: return(-1);
   017D A6 FF         [ 2]  346 	lda	#0xff
   017F 97            [ 1]  347 	tax
   0180 81            [ 4]  348 	rts
   0181                     349 00116$:
                            350 ;../mbtowc.c:69: if(pwc)
   0181 C6r00r04      [ 4]  351 	lda	_mbtowc_pwc_65536_36
   0184 CAr00r05      [ 4]  352 	ora	(_mbtowc_pwc_65536_36 + 1)
   0187 27 1B         [ 3]  353 	beq	00119$
                            354 ;../mbtowc.c:70: *pwc = codepoint;
   0189 C6r00r04      [ 4]  355 	lda	_mbtowc_pwc_65536_36
   018C 87            [ 2]  356 	psha
   018D 8A            [ 2]  357 	pulh
   018E CEr00r05      [ 4]  358 	ldx	(_mbtowc_pwc_65536_36 + 1)
   0191 C6r00r06      [ 4]  359 	lda	_mbtowc_codepoint_65536_37
   0194 F7            [ 2]  360 	sta	,x
   0195 C6r00r07      [ 4]  361 	lda	(_mbtowc_codepoint_65536_37 + 1)
   0198 E7 01         [ 3]  362 	sta	1,x
   019A C6r00r08      [ 4]  363 	lda	(_mbtowc_codepoint_65536_37 + 2)
   019D E7 02         [ 3]  364 	sta	2,x
   019F C6r00r09      [ 4]  365 	lda	(_mbtowc_codepoint_65536_37 + 3)
   01A2 E7 03         [ 3]  366 	sta	3,x
   01A4                     367 00119$:
                            368 ;../mbtowc.c:71: return(codepoint ? seqlen : 0);
   01A4 C6r00r06      [ 4]  369 	lda	_mbtowc_codepoint_65536_37
   01A7 CAr00r07      [ 4]  370 	ora	(_mbtowc_codepoint_65536_37 + 1)
   01AA CAr00r08      [ 4]  371 	ora	(_mbtowc_codepoint_65536_37 + 2)
   01AD CAr00r09      [ 4]  372 	ora	(_mbtowc_codepoint_65536_37 + 3)
   01B0 27 04         [ 3]  373 	beq	00128$
   01B2 B6*00         [ 3]  374 	lda	*_mbtowc_sloc0_1_0
   01B4 5F            [ 1]  375 	clrx
   01B5 81            [ 4]  376 	rts
   01B6                     377 00128$:
   01B6 5F            [ 1]  378 	clrx
   01B7 9F            [ 1]  379 	txa
                            380 ;../mbtowc.c:72: }
   01B8 81            [ 4]  381 	rts
                            382 	.area CSEG    (CODE)
                            383 	.area CONST   (CODE)
                            384 	.area XINIT   (CODE)
                            385 	.area CABS    (ABS,CODE)
