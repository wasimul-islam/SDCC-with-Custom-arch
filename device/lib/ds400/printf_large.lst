                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strlen
                                     35 	.globl __print_format_PARM_4
                                     36 	.globl __print_format_PARM_3
                                     37 	.globl __print_format_PARM_2
                                     38 	.globl __print_format
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                           000080    42 _P4	=	0x0080
                           000081    43 _SP	=	0x0081
                           000082    44 _DPL	=	0x0082
                           000083    45 _DPH	=	0x0083
                           000084    46 _DPL1	=	0x0084
                           000085    47 _DPH1	=	0x0085
                           000086    48 _DPS	=	0x0086
                           000087    49 _PCON	=	0x0087
                           000088    50 _TCON	=	0x0088
                           000089    51 _TMOD	=	0x0089
                           00008A    52 _TL0	=	0x008a
                           00008B    53 _TL1	=	0x008b
                           00008C    54 _TH0	=	0x008c
                           00008D    55 _TH1	=	0x008d
                           00008E    56 _CKCON	=	0x008e
                           000090    57 _P1	=	0x0090
                           000091    58 _EXIF	=	0x0091
                           000092    59 _P4CNT	=	0x0092
                           000093    60 _DPX	=	0x0093
                           000095    61 _DPX1	=	0x0095
                           000098    62 _SCON0	=	0x0098
                           000099    63 _SBUF0	=	0x0099
                           00009B    64 _ESP	=	0x009b
                           00009C    65 _AP	=	0x009c
                           00009D    66 _ACON	=	0x009d
                           0000A0    67 _P2	=	0x00a0
                           0000A1    68 _P5	=	0x00a1
                           0000A2    69 _P5CNT	=	0x00a2
                           0000A8    70 _IE	=	0x00a8
                           0000B0    71 _P3	=	0x00b0
                           0000B8    72 _IP	=	0x00b8
                           0000C0    73 _SCON1	=	0x00c0
                           0000C1    74 _SBUF1	=	0x00c1
                           0000C4    75 _PMR	=	0x00c4
                           0000C6    76 _MCON	=	0x00c6
                           0000C7    77 _TA	=	0x00c7
                           0000C8    78 _T2CON	=	0x00c8
                           0000C9    79 _T2MOD	=	0x00c9
                           0000CA    80 _RCAP2L	=	0x00ca
                           0000CA    81 _RTL2	=	0x00ca
                           0000CB    82 _RCAP2H	=	0x00cb
                           0000CB    83 _RTH2	=	0x00cb
                           0000CC    84 _TL2	=	0x00cc
                           0000CD    85 _TH2	=	0x00cd
                           0000D0    86 _PSW	=	0x00d0
                           0000D1    87 _MCNT0	=	0x00d1
                           0000D2    88 _MCNT1	=	0x00d2
                           0000D3    89 _MA	=	0x00d3
                           0000D4    90 _MB	=	0x00d4
                           0000D5    91 _MC	=	0x00d5
                           0000D8    92 _WDCON	=	0x00d8
                           0000E0    93 _ACC	=	0x00e0
                           0000E8    94 _EIE	=	0x00e8
                           0000EA    95 _MXAX	=	0x00ea
                           0000F0    96 _B	=	0x00f0
                           0000F8    97 _EIP	=	0x00f8
                           008C8A    98 _TMR0	=	0x8c8a
                           008D8B    99 _TMR1	=	0x8d8b
                           00CDCC   100 _TMR2	=	0xcdcc
                           00CBCA   101 _RCAP2	=	0xcbca
                                    102 ;--------------------------------------------------------
                                    103 ; special function bits
                                    104 ;--------------------------------------------------------
                           000088   105 _IT0	=	0x0088
                           000089   106 _IE0	=	0x0089
                           00008A   107 _IT1	=	0x008a
                           00008B   108 _IE1	=	0x008b
                           00008C   109 _TR0	=	0x008c
                           00008D   110 _TF0	=	0x008d
                           00008E   111 _TR1	=	0x008e
                           00008F   112 _TF1	=	0x008f
                           000090   113 _T2	=	0x0090
                           000091   114 _T2EX	=	0x0091
                           000092   115 _RXD1	=	0x0092
                           000093   116 _TXD1	=	0x0093
                           000094   117 _INT2	=	0x0094
                           000095   118 _INT3	=	0x0095
                           000096   119 _INT4	=	0x0096
                           000097   120 _INT5	=	0x0097
                           000098   121 _RI_0	=	0x0098
                           000099   122 _TI_0	=	0x0099
                           00009A   123 _RB8_0	=	0x009a
                           00009B   124 _TB8_0	=	0x009b
                           00009C   125 _REN_0	=	0x009c
                           00009D   126 _SM2_0	=	0x009d
                           00009E   127 _SM1_0	=	0x009e
                           00009F   128 _SM0_0	=	0x009f
                           00009F   129 _FE_0	=	0x009f
                           0000A8   130 _EX0	=	0x00a8
                           0000A9   131 _ET0	=	0x00a9
                           0000AA   132 _EX1	=	0x00aa
                           0000AB   133 _ET1	=	0x00ab
                           0000AC   134 _ES0	=	0x00ac
                           0000AD   135 _ET2	=	0x00ad
                           0000AE   136 _ES1	=	0x00ae
                           0000AF   137 _EA	=	0x00af
                           0000B0   138 _RXD0	=	0x00b0
                           0000B1   139 _TXD0	=	0x00b1
                           0000B2   140 _INT0	=	0x00b2
                           0000B3   141 _INT1	=	0x00b3
                           0000B4   142 _T0	=	0x00b4
                           0000B5   143 _T1	=	0x00b5
                           0000B6   144 _WR	=	0x00b6
                           0000B7   145 _RD	=	0x00b7
                           0000B8   146 _PX0	=	0x00b8
                           0000B9   147 _PT0	=	0x00b9
                           0000BA   148 _PX1	=	0x00ba
                           0000BB   149 _PT1	=	0x00bb
                           0000BC   150 _PS0	=	0x00bc
                           0000BD   151 _PT2	=	0x00bd
                           0000BE   152 _PS1	=	0x00be
                           0000C0   153 _RI_1	=	0x00c0
                           0000C1   154 _TI_1	=	0x00c1
                           0000C2   155 _RB8_1	=	0x00c2
                           0000C3   156 _TB8_1	=	0x00c3
                           0000C4   157 _REN_1	=	0x00c4
                           0000C5   158 _SM2_1	=	0x00c5
                           0000C6   159 _SM1_1	=	0x00c6
                           0000C7   160 _SM0_1	=	0x00c7
                           0000C7   161 _FE_1	=	0x00c7
                           0000C8   162 _CP_RL	=	0x00c8
                           0000C9   163 _C_T	=	0x00c9
                           0000CA   164 _TR2	=	0x00ca
                           0000CB   165 _EXEN2	=	0x00cb
                           0000CC   166 _TCLK	=	0x00cc
                           0000CD   167 _RCLK	=	0x00cd
                           0000CE   168 _EXF2	=	0x00ce
                           0000CF   169 _TF2	=	0x00cf
                           0000D0   170 _P	=	0x00d0
                           0000D1   171 _F1	=	0x00d1
                           0000D2   172 _OV	=	0x00d2
                           0000D3   173 _RS0	=	0x00d3
                           0000D4   174 _RS1	=	0x00d4
                           0000D5   175 _F0	=	0x00d5
                           0000D6   176 _AC	=	0x00d6
                           0000D7   177 _CY	=	0x00d7
                           0000D8   178 _RWT	=	0x00d8
                           0000D9   179 _EWT	=	0x00d9
                           0000DA   180 _WDRF	=	0x00da
                           0000DB   181 _WDIF	=	0x00db
                           0000DC   182 _PFI	=	0x00dc
                           0000DD   183 _EPFI	=	0x00dd
                           0000DE   184 _POR	=	0x00de
                           0000DF   185 _SMOD_1	=	0x00df
                           0000E8   186 _EX2	=	0x00e8
                           0000E9   187 _EX3	=	0x00e9
                           0000EA   188 _EX4	=	0x00ea
                           0000EB   189 _EX5	=	0x00eb
                           0000EC   190 _EWDI	=	0x00ec
                           0000ED   191 _C1IE	=	0x00ed
                           0000EE   192 _C0IE	=	0x00ee
                           0000EF   193 _CANBIE	=	0x00ef
                           0000F8   194 _PX2	=	0x00f8
                           0000F9   195 _PX3	=	0x00f9
                           0000FA   196 _PX4	=	0x00fa
                           0000FB   197 _PX5	=	0x00fb
                           0000FC   198 _PWDI	=	0x00fc
                           0000FD   199 _C1IP	=	0x00fd
                           0000FE   200 _C0IP	=	0x00fe
                           0000FF   201 _CANBIP	=	0x00ff
                                    202 ;--------------------------------------------------------
                                    203 ; overlayable register banks
                                    204 ;--------------------------------------------------------
                                    205 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        206 	.ds 8
                                    207 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        208 	.ds 8
                                    209 ;--------------------------------------------------------
                                    210 ; internal ram data
                                    211 ;--------------------------------------------------------
                                    212 	.area DSEG    (DATA)
                                    213 ;--------------------------------------------------------
                                    214 ; overlayable items in internal ram
                                    215 ;--------------------------------------------------------
                                    216 	.area	OSEG    (OVR,DATA)
      000000                        217 _calculate_digit_b4_65536_122:
      000000                        218 	.ds 1
                                    219 ;--------------------------------------------------------
                                    220 ; indirectly addressable internal ram data
                                    221 ;--------------------------------------------------------
                                    222 	.area ISEG    (DATA)
                                    223 ;--------------------------------------------------------
                                    224 ; absolute internal ram data
                                    225 ;--------------------------------------------------------
                                    226 	.area IABS    (ABS,DATA)
                                    227 	.area IABS    (ABS,DATA)
                                    228 ;--------------------------------------------------------
                                    229 ; bit data
                                    230 ;--------------------------------------------------------
                                    231 	.area BSEG    (BIT)
                                    232 ;--------------------------------------------------------
                                    233 ; paged external ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area PSEG    (PAG,XDATA)
                                    236 ;--------------------------------------------------------
                                    237 ; uninitialized external ram data
                                    238 ;--------------------------------------------------------
                                    239 	.area XSEG    (XDATA)
      000000                        240 _lower_case:
      000000                        241 	.ds 1
      000001                        242 _output_char:
      000001                        243 	.ds 3
      000004                        244 _p:
      000004                        245 	.ds 4
      000008                        246 _value:
      000008                        247 	.ds 5
      00000D                        248 _charsOutputted:
      00000D                        249 	.ds 2
      00000F                        250 _output_float_PARM_2:
      00000F                        251 	.ds 1
      000010                        252 _output_float_PARM_3:
      000010                        253 	.ds 1
      000011                        254 _output_float_PARM_4:
      000011                        255 	.ds 1
      000012                        256 _output_float_PARM_5:
      000012                        257 	.ds 1
      000013                        258 _output_float_PARM_6:
      000013                        259 	.ds 1
      000014                        260 _output_float_PARM_7:
      000014                        261 	.ds 1
      000015                        262 _output_float_f_65536_125:
      000015                        263 	.ds 4
      000019                        264 _output_float_fpBuffer_65536_126:
      000019                        265 	.ds 128
      000099                        266 _output_float_negative_65536_126:
      000099                        267 	.ds 1
      00009A                        268 _output_float_decimalPart_65536_126:
      00009A                        269 	.ds 4
      00009E                        270 _output_float_exp_65536_126:
      00009E                        271 	.ds 1
      00009F                        272 _output_float_sloc0_1_0:
      00009F                        273 	.ds 1
      0000A0                        274 _output_float_sloc1_1_0:
      0000A0                        275 	.ds 4
      0000A4                        276 _output_float_sloc2_1_0:
      0000A4                        277 	.ds 4
      0000A8                        278 _output_float_sloc3_1_0:
      0000A8                        279 	.ds 4
      0000AC                        280 __print_format_PARM_2:
      0000AC                        281 	.ds 4
      0000B0                        282 __print_format_PARM_3:
      0000B0                        283 	.ds 4
      0000B4                        284 __print_format_PARM_4:
      0000B4                        285 	.ds 4
      0000B8                        286 __print_format_left_justify_65536_163:
      0000B8                        287 	.ds 1
      0000B9                        288 __print_format_zero_padding_65536_163:
      0000B9                        289 	.ds 1
      0000BA                        290 __print_format_prefix_sign_65536_163:
      0000BA                        291 	.ds 1
      0000BB                        292 __print_format_prefix_space_65536_163:
      0000BB                        293 	.ds 1
      0000BC                        294 __print_format_signed_argument_65536_163:
      0000BC                        295 	.ds 1
      0000BD                        296 __print_format_char_argument_65536_163:
      0000BD                        297 	.ds 1
      0000BE                        298 __print_format_long_argument_65536_163:
      0000BE                        299 	.ds 1
      0000BF                        300 __print_format_float_argument_65536_163:
      0000BF                        301 	.ds 1
      0000C0                        302 __print_format_radix_65536_163:
      0000C0                        303 	.ds 1
      0000C1                        304 __print_format_decimals_65536_163:
      0000C1                        305 	.ds 2
      0000C3                        306 __print_format_store_262144_185:
      0000C3                        307 	.ds 6
      0000C9                        308 __print_format_pstore_262144_185:
      0000C9                        309 	.ds 3
      0000CC                        310 __print_format_sloc0_1_0:
      0000CC                        311 	.ds 4
      0000D0                        312 __print_format_sloc1_1_0:
      0000D0                        313 	.ds 1
      0000D1                        314 __print_format_sloc2_1_0:
      0000D1                        315 	.ds 2
                                    316 ;--------------------------------------------------------
                                    317 ; absolute external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XABS    (ABS,XDATA)
                                    320 ;--------------------------------------------------------
                                    321 ; initialized external ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XISEG   (XDATA)
                                    324 ;--------------------------------------------------------
                                    325 ; global & static initialisations
                                    326 ;--------------------------------------------------------
                                    327 	.area HOME    (CODE)
                                    328 	.area GSINIT  (CODE)
                                    329 	.area GSFINAL (CODE)
                                    330 	.area GSINIT  (CODE)
                                    331 ;--------------------------------------------------------
                                    332 ; Home
                                    333 ;--------------------------------------------------------
                                    334 	.area HOME    (CODE)
                                    335 	.area HOME    (CODE)
                                    336 ;--------------------------------------------------------
                                    337 ; code
                                    338 ;--------------------------------------------------------
                                    339 	.area CSEG    (CODE)
                                    340 ;------------------------------------------------------------
                                    341 ;Allocation info for local variables in function '_output_char'
                                    342 ;------------------------------------------------------------
                                    343 ;c                         Allocated to registers r2 
                                    344 ;------------------------------------------------------------
                                    345 ;	printf_large.c:105: _output_char (unsigned char c)
                                    346 ;	-----------------------------------------
                                    347 ;	 function _output_char
                                    348 ;	-----------------------------------------
      000000                        349 __output_char:
                           000002   350 	ar2 = 0x02
                           000003   351 	ar3 = 0x03
                           000004   352 	ar4 = 0x04
                           000005   353 	ar5 = 0x05
                           000006   354 	ar6 = 0x06
                           000007   355 	ar7 = 0x07
                           000000   356 	ar0 = 0x00
                           000001   357 	ar1 = 0x01
      000000 AA 82            [ 8]  358 	mov	r2,dpl
                                    359 ;	printf_large.c:107: output_char( c, p );
      000002 90s00r00r04      [12]  360 	mov	dptr,#_p
      000006 E0               [ 8]  361 	movx	a,@dptr
      000007 C0 E0            [ 8]  362 	push	acc
      000009 A3               [12]  363 	inc	dptr
      00000A E0               [ 8]  364 	movx	a,@dptr
      00000B C0 E0            [ 8]  365 	push	acc
      00000D A3               [12]  366 	inc	dptr
      00000E E0               [ 8]  367 	movx	a,@dptr
      00000F C0 E0            [ 8]  368 	push	acc
      000011 A3               [12]  369 	inc	dptr
      000012 E0               [ 8]  370 	movx	a,@dptr
      000013 C0 E0            [ 8]  371 	push	acc
      000015 74r33            [ 8]  372 	mov	a,#00103$
      000017 C0 E0            [ 8]  373 	push	acc
      000019 74s00            [ 8]  374 	mov	a,#(00103$ >> 8)
      00001B C0 E0            [ 8]  375 	push	acc
      00001D 74s00            [ 8]  376 	mov	a,#(00103$ >> 16)
      00001F C0 E0            [ 8]  377 	push	acc
      000021 90s00r00r01      [12]  378 	mov	dptr,#_output_char
      000025 E0               [ 8]  379 	movx	a,@dptr
      000026 C0 E0            [ 8]  380 	push	acc
      000028 A3               [12]  381 	inc	dptr
      000029 E0               [ 8]  382 	movx	a,@dptr
      00002A C0 E0            [ 8]  383 	push	acc
      00002C A3               [12]  384 	inc	dptr
      00002D E0               [ 8]  385 	movx	a,@dptr
      00002E C0 E0            [ 8]  386 	push	acc
      000030 8A 82            [ 8]  387 	mov	dpl,r2
      000032 22               [16]  388 	ret
      000033                        389 00103$:
                                    390 ;	stack adjustment for parms
      000033 D0 E0            [ 8]  391 	pop	acc
      000035 D0 E0            [ 8]  392 	pop	acc
      000037 D0 E0            [ 8]  393 	pop	acc
      000039 D0 E0            [ 8]  394 	pop	acc
                                    395 ;	printf_large.c:108: charsOutputted++;
      00003B 90s00r00r0D      [12]  396 	mov	dptr,#_charsOutputted
      00003F E0               [ 8]  397 	movx	a,@dptr
      000040 24 01            [ 8]  398 	add	a,#0x01
      000042 F0               [ 8]  399 	movx	@dptr,a
      000043 A3               [12]  400 	inc	dptr
      000044 E0               [ 8]  401 	movx	a,@dptr
      000045 34 00            [ 8]  402 	addc	a,#0x00
      000047 F0               [ 8]  403 	movx	@dptr,a
      000048                        404 00101$:
                                    405 ;	printf_large.c:109: }
      000048 22               [16]  406 	ret
                                    407 ;------------------------------------------------------------
                                    408 ;Allocation info for local variables in function 'output_digit'
                                    409 ;------------------------------------------------------------
                                    410 ;c                         Allocated to registers r2 
                                    411 ;n                         Allocated to registers r2 
                                    412 ;------------------------------------------------------------
                                    413 ;	printf_large.c:130: output_digit (unsigned char n)
                                    414 ;	-----------------------------------------
                                    415 ;	 function output_digit
                                    416 ;	-----------------------------------------
      000049                        417 _output_digit:
      000049 AA 82            [ 8]  418 	mov	r2,dpl
                                    419 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      00004B 74 30            [ 8]  420 	mov	a,#0x30
      00004D 2A               [ 4]  421 	add	a,r2
      00004E FA               [ 4]  422 	mov	r2,a
                                    423 ;	printf_large.c:134: if (c > (unsigned char)'9')
      00004F C3               [ 4]  424 	clr	c
      000050 74 39            [ 8]  425 	mov	a,#0x39
      000052 9A               [ 4]  426 	subb	a,r2
      000053 50 0E            [12]  427 	jnc  00104$
      000055                        428 00115$:
                                    429 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000055 74 07            [ 8]  430 	mov	a,#0x07
      000057 2A               [ 4]  431 	add	a,r2
      000058 FA               [ 4]  432 	mov	r2,a
                                    433 ;	printf_large.c:137: if (lower_case)
      000059 90s00r00r00      [12]  434 	mov	dptr,#_lower_case
      00005D E0               [ 8]  435 	movx	a,@dptr
      00005E 60 03            [12]  436 	jz  00104$
      000060                        437 00116$:
                                    438 ;	printf_large.c:138: c = tolower(c);
      000060 43 02 20         [12]  439 	orl	ar2,#0x20
      000063                        440 00104$:
                                    441 ;	printf_large.c:140: _output_char( c );
      000063 8A 82            [ 8]  442 	mov	dpl,r2
      000065 12s00r00r00      [16]  443 	lcall	__output_char
      000069                        444 00105$:
                                    445 ;	printf_large.c:141: }
      000069 22               [16]  446 	ret
                                    447 ;------------------------------------------------------------
                                    448 ;Allocation info for local variables in function 'output_2digits'
                                    449 ;------------------------------------------------------------
                                    450 ;b                         Allocated to registers r2 
                                    451 ;------------------------------------------------------------
                                    452 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    453 ;	-----------------------------------------
                                    454 ;	 function output_2digits
                                    455 ;	-----------------------------------------
      00006A                        456 _output_2digits:
      00006A AA 82            [ 8]  457 	mov	r2,dpl
                                    458 ;	printf_large.c:159: output_digit( b>>4   );
      00006C EA               [ 4]  459 	mov	a,r2
      00006D C4               [ 4]  460 	swap	a
      00006E 54 0F            [ 8]  461 	anl	a,#0x0f
      000070 FB               [ 4]  462 	mov	r3,a
      000071 C0 02            [ 8]  463 	push	ar2
      000073 8B 82            [ 8]  464 	mov	dpl,r3
      000075 12s00r00r49      [16]  465 	lcall	_output_digit
      000079 D0 02            [ 8]  466 	pop	ar2
                                    467 ;	printf_large.c:160: output_digit( b&0x0F );
      00007B 53 02 0F         [12]  468 	anl	ar2,#0x0f
      00007E 8A 82            [ 8]  469 	mov	dpl,r2
      000080 12s00r00r49      [16]  470 	lcall	_output_digit
      000084                        471 00101$:
                                    472 ;	printf_large.c:161: }
      000084 22               [16]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'calculate_digit'
                                    476 ;------------------------------------------------------------
                                    477 ;radix                     Allocated to registers r2 
                                    478 ;ul                        Allocated to registers r3 r4 r5 r6 
                                    479 ;b4                        Allocated with name '_calculate_digit_b4_65536_122'
                                    480 ;i                         Allocated to registers r0 
                                    481 ;------------------------------------------------------------
                                    482 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    483 ;	-----------------------------------------
                                    484 ;	 function calculate_digit
                                    485 ;	-----------------------------------------
      000085                        486 _calculate_digit:
      000085 AA 82            [ 8]  487 	mov	r2,dpl
                                    488 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000087 90s00r00r08      [12]  489 	mov	dptr,#_value
      00008B E0               [ 8]  490 	movx	a,@dptr
      00008C A3               [12]  491 	inc	dptr
      00008D FB               [ 4]  492 	mov	r3,a
      00008E E0               [ 8]  493 	movx	a,@dptr
      00008F A3               [12]  494 	inc	dptr
      000090 FC               [ 4]  495 	mov	r4,a
      000091 E0               [ 8]  496 	movx	a,@dptr
      000092 A3               [12]  497 	inc	dptr
      000093 FD               [ 4]  498 	mov	r5,a
      000094 E0               [ 8]  499 	movx	a,@dptr
      000095 FE               [ 4]  500 	mov	r6,a
                                    501 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000096 90s00r00r0C      [12]  502 	mov	dptr,#(_value + 0x000004)
      00009A E0               [ 8]  503 	movx	a,@dptr
      00009B FF               [ 4]  504 	mov	r7,a
                                    505 ;	printf_large.c:195: do
                                    506 ;	genAssign: resultIsFar = FALSE
      00009C 78 20            [ 8]  507 	mov	r0,#0x20
      00009E                        508 00103$:
                                    509 ;	printf_large.c:197: b4 = (b4 << 1);
      00009E 8F 01            [ 8]  510 	mov	ar1,r7
      0000A0 E9               [ 4]  511 	mov	a,r1
      0000A1 25 E0            [ 8]  512 	add	a,acc
      0000A3 F5*00            [ 8]  513 	mov	_calculate_digit_b4_65536_122,a
                                    514 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      0000A5 EE               [ 4]  515 	mov	a,r6
      0000A6 23               [ 4]  516 	rl	a
      0000A7 54 01            [ 8]  517 	anl	a,#0x01
      0000A9 F9               [ 4]  518 	mov  r1,a
      0000AA 45*00            [ 8]  519 	orl	a,_calculate_digit_b4_65536_122
      0000AC FF               [ 4]  520 	mov	r7,a
                                    521 ;	printf_large.c:199: ul <<= 1;
      0000AD EB               [ 4]  522 	mov	a,r3
      0000AE 25 E0            [ 8]  523 	add	a,acc
      0000B0 FB               [ 4]  524 	mov	r3,a
      0000B1 EC               [ 4]  525 	mov	a,r4
      0000B2 33               [ 4]  526 	rlc	a
      0000B3 FC               [ 4]  527 	mov	r4,a
      0000B4 ED               [ 4]  528 	mov	a,r5
      0000B5 33               [ 4]  529 	rlc	a
      0000B6 FD               [ 4]  530 	mov	r5,a
      0000B7 EE               [ 4]  531 	mov	a,r6
      0000B8 33               [ 4]  532 	rlc	a
      0000B9 FE               [ 4]  533 	mov	r6,a
                                    534 ;	printf_large.c:201: if (radix <= b4 )
      0000BA C3               [ 4]  535 	clr	c
      0000BB EF               [ 4]  536 	mov	a,r7
      0000BC 9A               [ 4]  537 	subb	a,r2
      0000BD 40 07            [12]  538 	jc   00104$
      0000BF                        539 00124$:
                                    540 ;	printf_large.c:203: b4 -= radix;
      0000BF C3               [ 4]  541 	clr	c
      0000C0 EF               [ 4]  542 	mov	a,r7
      0000C1 9A               [ 4]  543 	subb	a,r2
      0000C2 FF               [ 4]  544 	mov	r7,a
                                    545 ;	printf_large.c:204: ul |= 1;
      0000C3 43 03 01         [12]  546 	orl	ar3,#0x01
      0000C6                        547 00104$:
                                    548 ;	printf_large.c:206: } while (--i);
      0000C6 18               [ 4]  549 	dec	r0
      0000C7 E8               [ 4]  550 	mov	a,r0
      0000C8 70 D4            [12]  551 	jnz  00103$
      0000CA                        552 00125$:
                                    553 ;	printf_large.c:207: value.ul = ul;
      0000CA 90s00r00r08      [12]  554 	mov	dptr,#_value
      0000CE EB               [ 4]  555 	mov	a,r3
      0000CF F0               [ 8]  556 	movx	@dptr,a
      0000D0 A3               [12]  557 	inc	dptr
      0000D1 EC               [ 4]  558 	mov	a,r4
      0000D2 F0               [ 8]  559 	movx	@dptr,a
      0000D3 A3               [12]  560 	inc	dptr
      0000D4 ED               [ 4]  561 	mov	a,r5
      0000D5 F0               [ 8]  562 	movx	@dptr,a
      0000D6 A3               [12]  563 	inc	dptr
      0000D7 EE               [ 4]  564 	mov	a,r6
      0000D8 F0               [ 8]  565 	movx	@dptr,a
                                    566 ;	printf_large.c:208: value.byte[4] = b4;
      0000D9 90s00r00r0C      [12]  567 	mov	dptr,#(_value + 0x000004)
      0000DD EF               [ 4]  568 	mov	a,r7
      0000DE F0               [ 8]  569 	movx	@dptr,a
      0000DF                        570 00106$:
                                    571 ;	printf_large.c:209: }
      0000DF 22               [16]  572 	ret
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'output_float'
                                    575 ;------------------------------------------------------------
                                    576 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                                    577 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                                    578 ;left                      Allocated with name '_output_float_PARM_4'
                                    579 ;zero                      Allocated with name '_output_float_PARM_5'
                                    580 ;sign                      Allocated with name '_output_float_PARM_6'
                                    581 ;space                     Allocated with name '_output_float_PARM_7'
                                    582 ;f                         Allocated with name '_output_float_f_65536_125'
                                    583 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_65536_126'
                                    584 ;negative                  Allocated with name '_output_float_negative_65536_126'
                                    585 ;integerPart               Allocated to registers r2 r3 r4 r5 
                                    586 ;rounding                  Allocated to registers r0 r1 r7 r6 
                                    587 ;decimalPart               Allocated with name '_output_float_decimalPart_65536_126'
                                    588 ;fpBI                      Allocated to registers r6 
                                    589 ;fpBD                      Allocated to registers 
                                    590 ;minWidth                  Allocated to registers r2 
                                    591 ;i                         Allocated to registers 
                                    592 ;exp                       Allocated with name '_output_float_exp_65536_126'
                                    593 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                                    594 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                                    595 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                                    596 ;sloc3                     Allocated with name '_output_float_sloc3_1_0'
                                    597 ;------------------------------------------------------------
                                    598 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                                    599 ;	-----------------------------------------
                                    600 ;	 function output_float
                                    601 ;	-----------------------------------------
      0000E0                        602 _output_float:
      0000E0 AA 82            [ 8]  603 	mov	r2,dpl
      0000E2 AB 83            [ 8]  604 	mov	r3,dph
      0000E4 AC 93            [ 8]  605 	mov	r4,dpx
      0000E6 AD F0            [ 8]  606 	mov	r5,b
                                    607 ;	printf_large.c:247: _Bool negative = 0;
                                    608 ;	genAssign: resultIsFar = TRUE
      0000E8 90s00r00r99      [12]  609 	mov	dptr,#_output_float_negative_65536_126
      0000EC E4               [ 4]  610 	clr	a
      0000ED F0               [ 8]  611 	movx	@dptr,a
                                    612 ;	printf_large.c:253: signed char exp = -128;
                                    613 ;	genAssign: resultIsFar = TRUE
      0000EE 90s00r00r9E      [12]  614 	mov	dptr,#_output_float_exp_65536_126
      0000F2 74 80            [ 8]  615 	mov	a,#0x80
      0000F4 F0               [ 8]  616 	movx	@dptr,a
                                    617 ;	printf_large.c:256: if (f<0)
                                    618 ;	genAssign: resultIsFar = TRUE
      0000F5 90s00r00r00      [12]  619 	mov	dptr,#___fslt_PARM_2
      0000F9 E4               [ 4]  620 	clr	a
      0000FA F0               [ 8]  621 	movx	@dptr,a
      0000FB A3               [12]  622 	inc	dptr
      0000FC F0               [ 8]  623 	movx	@dptr,a
      0000FD A3               [12]  624 	inc	dptr
      0000FE F0               [ 8]  625 	movx	@dptr,a
      0000FF A3               [12]  626 	inc	dptr
      000100 F0               [ 8]  627 	movx	@dptr,a
      000101 C0 02            [ 8]  628 	push	ar2
      000103 C0 03            [ 8]  629 	push	ar3
      000105 C0 04            [ 8]  630 	push	ar4
      000107 C0 05            [ 8]  631 	push	ar5
      000109 8A 82            [ 8]  632 	mov	dpl,r2
      00010B 8B 83            [ 8]  633 	mov	dph,r3
      00010D 8C 93            [ 8]  634 	mov	dpx,r4
      00010F 8D F0            [ 8]  635 	mov	b,r5
      000111 12s00r00r00      [16]  636 	lcall	___fslt
      000115 D0 05            [ 8]  637 	pop	ar5
      000117 D0 04            [ 8]  638 	pop	ar4
      000119 D0 03            [ 8]  639 	pop	ar3
      00011B D0 02            [ 8]  640 	pop	ar2
      00011D E5 82            [ 8]  641 	mov	a,dpl
      00011F 60 0B            [12]  642 	jz  00102$
      000121                        643 00439$:
                                    644 ;	printf_large.c:258: negative=1;
                                    645 ;	genAssign: resultIsFar = TRUE
      000121 90s00r00r99      [12]  646 	mov	dptr,#_output_float_negative_65536_126
      000125 74 01            [ 8]  647 	mov	a,#0x01
      000127 F0               [ 8]  648 	movx	@dptr,a
                                    649 ;	printf_large.c:259: f=-f;
      000128 ED               [ 4]  650 	mov	a,r5
      000129 B2 E7            [ 8]  651 	cpl	acc[7]
      00012B FD               [ 4]  652 	mov	r5,a
      00012C                        653 00102$:
                                    654 ;	printf_large.c:262: if (f>0x00ffffff)
                                    655 ;	genAssign: resultIsFar = TRUE
      00012C 90s00r00r00      [12]  656 	mov	dptr,#___fslt_PARM_2
      000130 EA               [ 4]  657 	mov	a,r2
      000131 F0               [ 8]  658 	movx	@dptr,a
      000132 A3               [12]  659 	inc	dptr
      000133 EB               [ 4]  660 	mov	a,r3
      000134 F0               [ 8]  661 	movx	@dptr,a
      000135 A3               [12]  662 	inc	dptr
      000136 EC               [ 4]  663 	mov	a,r4
      000137 F0               [ 8]  664 	movx	@dptr,a
      000138 A3               [12]  665 	inc	dptr
      000139 ED               [ 4]  666 	mov	a,r5
      00013A F0               [ 8]  667 	movx	@dptr,a
      00013B C0 02            [ 8]  668 	push	ar2
      00013D C0 03            [ 8]  669 	push	ar3
      00013F C0 04            [ 8]  670 	push	ar4
      000141 C0 05            [ 8]  671 	push	ar5
      000143 90 7F FF FF      [12]  672 	mov	dptr,#0x7fffff
      000147 75 F0 4B         [12]  673 	mov	b,#0x4b
      00014A 12s00r00r00      [16]  674 	lcall	___fslt
      00014E D0 05            [ 8]  675 	pop	ar5
      000150 D0 04            [ 8]  676 	pop	ar4
      000152 D0 03            [ 8]  677 	pop	ar3
      000154 D0 02            [ 8]  678 	pop	ar2
      000156 E5 82            [ 8]  679 	mov	a,dpl
      000158 70 04            [12]  680 	jnz	00440$
      00015A 02s00r02rA0      [16]  681 	ljmp	00111$
      00015E                        682 00440$:
                                    683 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
                                    684 ;	genAssign: resultIsFar = TRUE
      00015E 90s00r00r9F      [12]  685 	mov	dptr,#_output_float_sloc0_1_0
      000162 E4               [ 4]  686 	clr	a
      000163 F0               [ 8]  687 	movx	@dptr,a
      000164                        688 00181$:
                                    689 ;	genAssign: resultIsFar = TRUE
      000164 90s00r00r00      [12]  690 	mov	dptr,#___fslt_PARM_2
      000168 E4               [ 4]  691 	clr	a
      000169 F0               [ 8]  692 	movx	@dptr,a
      00016A A3               [12]  693 	inc	dptr
      00016B E4               [ 4]  694 	clr	a
      00016C F0               [ 8]  695 	movx	@dptr,a
      00016D A3               [12]  696 	inc	dptr
      00016E 74 20            [ 8]  697 	mov	a,#0x20
      000170 F0               [ 8]  698 	movx	@dptr,a
      000171 A3               [12]  699 	inc	dptr
      000172 74 41            [ 8]  700 	mov	a,#0x41
      000174 F0               [ 8]  701 	movx	@dptr,a
      000175 C0 02            [ 8]  702 	push	ar2
      000177 C0 03            [ 8]  703 	push	ar3
      000179 C0 04            [ 8]  704 	push	ar4
      00017B C0 05            [ 8]  705 	push	ar5
      00017D 8A 82            [ 8]  706 	mov	dpl,r2
      00017F 8B 83            [ 8]  707 	mov	dph,r3
      000181 8C 93            [ 8]  708 	mov	dpx,r4
      000183 8D F0            [ 8]  709 	mov	b,r5
      000185 12s00r00r00      [16]  710 	lcall	___fslt
      000189 D0 05            [ 8]  711 	pop	ar5
      00018B D0 04            [ 8]  712 	pop	ar4
      00018D D0 03            [ 8]  713 	pop	ar3
      00018F D0 02            [ 8]  714 	pop	ar2
      000191 E5 82            [ 8]  715 	mov	a,dpl
      000193 70 37            [12]  716 	jnz  00205$
      000195                        717 00441$:
                                    718 ;	genAssign: resultIsFar = TRUE
      000195 90s00r00r00      [12]  719 	mov	dptr,#___fsdiv_PARM_2
      000199 E4               [ 4]  720 	clr	a
      00019A F0               [ 8]  721 	movx	@dptr,a
      00019B A3               [12]  722 	inc	dptr
      00019C E4               [ 4]  723 	clr	a
      00019D F0               [ 8]  724 	movx	@dptr,a
      00019E A3               [12]  725 	inc	dptr
      00019F 74 20            [ 8]  726 	mov	a,#0x20
      0001A1 F0               [ 8]  727 	movx	@dptr,a
      0001A2 A3               [12]  728 	inc	dptr
      0001A3 74 41            [ 8]  729 	mov	a,#0x41
      0001A5 F0               [ 8]  730 	movx	@dptr,a
      0001A6 8A 82            [ 8]  731 	mov	dpl,r2
      0001A8 8B 83            [ 8]  732 	mov	dph,r3
      0001AA 8C 93            [ 8]  733 	mov	dpx,r4
      0001AC 8D F0            [ 8]  734 	mov	b,r5
      0001AE 12s00r00r00      [16]  735 	lcall	___fsdiv
      0001B2 AE 82            [ 8]  736 	mov	r6,dpl
      0001B4 AF 83            [ 8]  737 	mov	r7,dph
      0001B6 A8 93            [ 8]  738 	mov	r0,dpx
      0001B8 A9 F0            [ 8]  739 	mov	r1,b
                                    740 ;	genAssign: resultIsFar = FALSE
      0001BA 8E 02            [ 8]  741 	mov	ar2,r6
      0001BC 8F 03            [ 8]  742 	mov	ar3,r7
      0001BE 88 04            [ 8]  743 	mov	ar4,r0
      0001C0 89 05            [ 8]  744 	mov	ar5,r1
      0001C2 90s00r00r9F      [12]  745 	mov	dptr,#_output_float_sloc0_1_0
      0001C6 E0               [ 8]  746 	movx	a,@dptr
      0001C7 24 01            [ 8]  747 	add	a,#0x01
      0001C9 F0               [ 8]  748 	movx	@dptr,a
      0001CA 80 98            [12]  749 	sjmp 00181$
      0001CC                        750 00205$:
      0001CC 90s00r00r9F      [12]  751 	mov	dptr,#_output_float_sloc0_1_0
                                    752 ;	genAssign: resultIsFar = TRUE
      0001D0 E0               [ 8]  753 	movx	a,@dptr
      0001D1 90s00r00rA0      [12]  754 	mov	dptr,#_output_float_sloc1_1_0
      0001D5 F0               [ 8]  755 	movx	@dptr,a
      0001D6                        756 00184$:
                                    757 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
                                    758 ;	genAssign: resultIsFar = TRUE
      0001D6 90s00r00r00      [12]  759 	mov	dptr,#___fslt_PARM_2
      0001DA E4               [ 4]  760 	clr	a
      0001DB F0               [ 8]  761 	movx	@dptr,a
      0001DC A3               [12]  762 	inc	dptr
      0001DD E4               [ 4]  763 	clr	a
      0001DE F0               [ 8]  764 	movx	@dptr,a
      0001DF A3               [12]  765 	inc	dptr
      0001E0 74 80            [ 8]  766 	mov	a,#0x80
      0001E2 F0               [ 8]  767 	movx	@dptr,a
      0001E3 A3               [12]  768 	inc	dptr
      0001E4 74 3F            [ 8]  769 	mov	a,#0x3f
      0001E6 F0               [ 8]  770 	movx	@dptr,a
      0001E7 C0 02            [ 8]  771 	push	ar2
      0001E9 C0 03            [ 8]  772 	push	ar3
      0001EB C0 04            [ 8]  773 	push	ar4
      0001ED C0 05            [ 8]  774 	push	ar5
      0001EF 8A 82            [ 8]  775 	mov	dpl,r2
      0001F1 8B 83            [ 8]  776 	mov	dph,r3
      0001F3 8C 93            [ 8]  777 	mov	dpx,r4
      0001F5 8D F0            [ 8]  778 	mov	b,r5
      0001F7 12s00r00r00      [16]  779 	lcall	___fslt
      0001FB D0 05            [ 8]  780 	pop	ar5
      0001FD D0 04            [ 8]  781 	pop	ar4
      0001FF D0 03            [ 8]  782 	pop	ar3
      000201 D0 02            [ 8]  783 	pop	ar2
      000203 E5 82            [ 8]  784 	mov	a,dpl
      000205 60 36            [12]  785 	jz  00246$
      000207                        786 00442$:
                                    787 ;	genAssign: resultIsFar = TRUE
      000207 90s00r00r00      [12]  788 	mov	dptr,#___fsmul_PARM_2
      00020B EA               [ 4]  789 	mov	a,r2
      00020C F0               [ 8]  790 	movx	@dptr,a
      00020D A3               [12]  791 	inc	dptr
      00020E EB               [ 4]  792 	mov	a,r3
      00020F F0               [ 8]  793 	movx	@dptr,a
      000210 A3               [12]  794 	inc	dptr
      000211 EC               [ 4]  795 	mov	a,r4
      000212 F0               [ 8]  796 	movx	@dptr,a
      000213 A3               [12]  797 	inc	dptr
      000214 ED               [ 4]  798 	mov	a,r5
      000215 F0               [ 8]  799 	movx	@dptr,a
      000216 90 00 00 00      [12]  800 	mov  dptr,#0x0000
      00021A 75 93 20         [12]  801 	mov	dpx,#0x20
      00021D 75 F0 41         [12]  802 	mov	b,#0x41
      000220 12s00r00r00      [16]  803 	lcall	___fsmul
      000224 AE 82            [ 8]  804 	mov	r6,dpl
      000226 AF 83            [ 8]  805 	mov	r7,dph
      000228 A8 93            [ 8]  806 	mov	r0,dpx
      00022A A9 F0            [ 8]  807 	mov	r1,b
                                    808 ;	genAssign: resultIsFar = FALSE
      00022C 8E 02            [ 8]  809 	mov	ar2,r6
      00022E 8F 03            [ 8]  810 	mov	ar3,r7
      000230 88 04            [ 8]  811 	mov	ar4,r0
      000232 89 05            [ 8]  812 	mov	ar5,r1
      000234 90s00r00rA0      [12]  813 	mov	dptr,#_output_float_sloc1_1_0
      000238 E0               [ 8]  814 	movx	a,@dptr
      000239 14               [ 4]  815 	dec	a
      00023A F0               [ 8]  816 	movx	@dptr,a
      00023B 80 99            [12]  817 	sjmp 00184$
      00023D                        818 00246$:
      00023D 90s00r00rA0      [12]  819 	mov	dptr,#_output_float_sloc1_1_0
                                    820 ;	genAssign: resultIsFar = TRUE
      000241 E0               [ 8]  821 	movx	a,@dptr
      000242 90s00r00r9E      [12]  822 	mov	dptr,#_output_float_exp_65536_126
      000246 F0               [ 8]  823 	movx	@dptr,a
                                    824 ;	printf_large.c:269: if (negative)
      000247 90s00r00r99      [12]  825 	mov	dptr,#_output_float_negative_65536_126
      00024B E0               [ 8]  826 	movx	a,@dptr
      00024C 60 19            [12]  827 	jz  00108$
      00024E                        828 00443$:
                                    829 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      00024E C0 02            [ 8]  830 	push	ar2
      000250 C0 03            [ 8]  831 	push	ar3
      000252 C0 04            [ 8]  832 	push	ar4
      000254 C0 05            [ 8]  833 	push	ar5
      000256 75 82 2D         [12]  834 	mov	dpl,#0x2d
      000259 12s00r00r00      [16]  835 	lcall	__output_char
      00025D D0 05            [ 8]  836 	pop	ar5
      00025F D0 04            [ 8]  837 	pop	ar4
      000261 D0 03            [ 8]  838 	pop	ar3
      000263 D0 02            [ 8]  839 	pop	ar2
      000265 80 1E            [12]  840 	sjmp 00109$
      000267                        841 00108$:
                                    842 ;	printf_large.c:275: if (sign)
      000267 90s00r00r13      [12]  843 	mov	dptr,#_output_float_PARM_6
      00026B E0               [ 8]  844 	movx	a,@dptr
      00026C 60 17            [12]  845 	jz  00109$
      00026E                        846 00444$:
                                    847 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      00026E C0 02            [ 8]  848 	push	ar2
      000270 C0 03            [ 8]  849 	push	ar3
      000272 C0 04            [ 8]  850 	push	ar4
      000274 C0 05            [ 8]  851 	push	ar5
      000276 75 82 2B         [12]  852 	mov	dpl,#0x2b
      000279 12s00r00r00      [16]  853 	lcall	__output_char
      00027D D0 05            [ 8]  854 	pop	ar5
      00027F D0 04            [ 8]  855 	pop	ar4
      000281 D0 03            [ 8]  856 	pop	ar3
      000283 D0 02            [ 8]  857 	pop	ar2
      000285                        858 00109$:
                                    859 ;	printf_large.c:280: reqWidth = 0;
                                    860 ;	genAssign: resultIsFar = TRUE
      000285 90s00r00r0F      [12]  861 	mov	dptr,#_output_float_PARM_2
                                    862 ;	printf_large.c:281: left = 0;
                                    863 ;	genAssign: resultIsFar = TRUE
                                    864 ;	printf_large.c:282: zero = 0;
                                    865 ;	genAssign: resultIsFar = TRUE
                                    866 ;	printf_large.c:283: sign = 0;
                                    867 ;	genAssign: resultIsFar = TRUE
      000289 E4               [ 4]  868 	clr   a
      00028A F0               [ 8]  869 	movx  @dptr,a
      00028B 90s00r00r11      [12]  870 	mov   dptr,#_output_float_PARM_4
      00028F F0               [ 8]  871 	movx  @dptr,a
      000290 90s00r00r12      [12]  872 	mov   dptr,#_output_float_PARM_5
      000294 F0               [ 8]  873 	movx  @dptr,a
      000295 90s00r00r13      [12]  874 	mov   dptr,#_output_float_PARM_6
      000299 F0               [ 8]  875 	movx  @dptr,a
                                    876 ;	printf_large.c:284: space = 0;
                                    877 ;	genAssign: resultIsFar = TRUE
      00029A 90s00r00r14      [12]  878 	mov	dptr,#_output_float_PARM_7
      00029E E4               [ 4]  879 	clr	a
      00029F F0               [ 8]  880 	movx	@dptr,a
      0002A0                        881 00111$:
                                    882 ;	printf_large.c:288: if (reqDecimals==-1)
      0002A0 90s00r00r10      [12]  883 	mov	dptr,#_output_float_PARM_3
      0002A4 E0               [ 8]  884 	movx	a,@dptr
      0002A5 B4 FF 07         [16]  885 	cjne a,#0xff,00113$
      0002A8                        886 00446$:
                                    887 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
                                    888 ;	genAssign: resultIsFar = TRUE
      0002A8 90s00r00r10      [12]  889 	mov	dptr,#_output_float_PARM_3
      0002AC 74 06            [ 8]  890 	mov	a,#0x06
      0002AE F0               [ 8]  891 	movx	@dptr,a
      0002AF                        892 00113$:
                                    893 ;	printf_large.c:292: rounding = 0.5;
                                    894 ;	genAssign: resultIsFar = TRUE
      0002AF 78 00            [ 8]  895 	mov	r0,#0x00
      0002B1 79 00            [ 8]  896 	mov	r1,#0x00
      0002B3 7F 00            [ 8]  897 	mov	r7,#0x00
      0002B5 7E 3F            [ 8]  898 	mov	r6,#0x3f
                                    899 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0002B7 90s00r00r10      [12]  900 	mov	dptr,#_output_float_PARM_3
                                    901 ;	genAssign: resultIsFar = TRUE
      0002BB E0               [ 8]  902 	movx	a,@dptr
      0002BC 90s00r00rA4      [12]  903 	mov	dptr,#_output_float_sloc2_1_0
      0002C0 F0               [ 8]  904 	movx	@dptr,a
      0002C1                        905 00187$:
      0002C1 90s00r00rA4      [12]  906 	mov	dptr,#_output_float_sloc2_1_0
      0002C5 E0               [ 8]  907 	movx	a,@dptr
      0002C6 60 46            [12]  908 	jz  00114$
      0002C8                        909 00447$:
                                    910 ;	printf_large.c:295: rounding /= 10.0;
      0002C8 C0 02            [ 8]  911 	push	ar2
      0002CA C0 03            [ 8]  912 	push	ar3
      0002CC C0 04            [ 8]  913 	push	ar4
      0002CE C0 05            [ 8]  914 	push	ar5
                                    915 ;	genAssign: resultIsFar = TRUE
      0002D0 90s00r00r00      [12]  916 	mov	dptr,#___fsdiv_PARM_2
      0002D4 E4               [ 4]  917 	clr	a
      0002D5 F0               [ 8]  918 	movx	@dptr,a
      0002D6 A3               [12]  919 	inc	dptr
      0002D7 E4               [ 4]  920 	clr	a
      0002D8 F0               [ 8]  921 	movx	@dptr,a
      0002D9 A3               [12]  922 	inc	dptr
      0002DA 74 20            [ 8]  923 	mov	a,#0x20
      0002DC F0               [ 8]  924 	movx	@dptr,a
      0002DD A3               [12]  925 	inc	dptr
      0002DE 74 41            [ 8]  926 	mov	a,#0x41
      0002E0 F0               [ 8]  927 	movx	@dptr,a
      0002E1 88 82            [ 8]  928 	mov	dpl,r0
      0002E3 89 83            [ 8]  929 	mov	dph,r1
      0002E5 8F 93            [ 8]  930 	mov	dpx,r7
      0002E7 8E F0            [ 8]  931 	mov	b,r6
      0002E9 12s00r00r00      [16]  932 	lcall	___fsdiv
      0002ED AA 82            [ 8]  933 	mov	r2,dpl
      0002EF AB 83            [ 8]  934 	mov	r3,dph
      0002F1 AC 93            [ 8]  935 	mov	r4,dpx
      0002F3 AD F0            [ 8]  936 	mov	r5,b
                                    937 ;	genAssign: resultIsFar = TRUE
      0002F5 8A 00            [ 8]  938 	mov	ar0,r2
      0002F7 8B 01            [ 8]  939 	mov	ar1,r3
      0002F9 8C 07            [ 8]  940 	mov	ar7,r4
      0002FB 8D 06            [ 8]  941 	mov	ar6,r5
                                    942 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0002FD 90s00r00rA4      [12]  943 	mov	dptr,#_output_float_sloc2_1_0
      000301 E0               [ 8]  944 	movx	a,@dptr
      000302 14               [ 4]  945 	dec	a
      000303 F0               [ 8]  946 	movx	@dptr,a
      000304 D0 05            [ 8]  947 	pop	ar5
      000306 D0 04            [ 8]  948 	pop	ar4
      000308 D0 03            [ 8]  949 	pop	ar3
      00030A D0 02            [ 8]  950 	pop	ar2
      00030C 80 B3            [12]  951 	sjmp 00187$
      00030E                        952 00114$:
                                    953 ;	printf_large.c:297: f += rounding;
                                    954 ;	genAssign: resultIsFar = TRUE
      00030E 90s00r00r00      [12]  955 	mov	dptr,#___fsadd_PARM_2
      000312 E8               [ 4]  956 	mov	a,r0
      000313 F0               [ 8]  957 	movx	@dptr,a
      000314 A3               [12]  958 	inc	dptr
      000315 E9               [ 4]  959 	mov	a,r1
      000316 F0               [ 8]  960 	movx	@dptr,a
      000317 A3               [12]  961 	inc	dptr
      000318 EF               [ 4]  962 	mov	a,r7
      000319 F0               [ 8]  963 	movx	@dptr,a
      00031A A3               [12]  964 	inc	dptr
      00031B EE               [ 4]  965 	mov	a,r6
      00031C F0               [ 8]  966 	movx	@dptr,a
      00031D 8A 82            [ 8]  967 	mov	dpl,r2
      00031F 8B 83            [ 8]  968 	mov	dph,r3
      000321 8C 93            [ 8]  969 	mov	dpx,r4
      000323 8D F0            [ 8]  970 	mov	b,r5
      000325 12s00r00r00      [16]  971 	lcall	___fsadd
      000329 AA 82            [ 8]  972 	mov	r2,dpl
      00032B AB 83            [ 8]  973 	mov	r3,dph
      00032D AC 93            [ 8]  974 	mov	r4,dpx
      00032F AD F0            [ 8]  975 	mov	r5,b
                                    976 ;	genAssign: resultIsFar = TRUE
      000331 90s00r00r15      [12]  977 	mov	dptr,#_output_float_f_65536_125
      000335 EA               [ 4]  978 	mov	a,r2
      000336 F0               [ 8]  979 	movx	@dptr,a
      000337 A3               [12]  980 	inc	dptr
      000338 EB               [ 4]  981 	mov	a,r3
      000339 F0               [ 8]  982 	movx	@dptr,a
      00033A A3               [12]  983 	inc	dptr
      00033B EC               [ 4]  984 	mov	a,r4
      00033C F0               [ 8]  985 	movx	@dptr,a
      00033D A3               [12]  986 	inc	dptr
      00033E ED               [ 4]  987 	mov	a,r5
      00033F F0               [ 8]  988 	movx	@dptr,a
                                    989 ;	printf_large.c:300: integerPart = f;
      000340 05 86            [ 8]  990 	inc	dps
      000342 90s00r00r15      [12]  991 	mov	dptr,#_output_float_f_65536_125
      000346 E0               [ 8]  992 	movx	a,@dptr
      000347 F5 82            [ 8]  993 	mov	dpl,a
      000349 A3               [12]  994 	inc	dptr
      00034A E0               [ 8]  995 	movx	a,@dptr
      00034B F5 83            [ 8]  996 	mov	dph,a
      00034D A3               [12]  997 	inc	dptr
      00034E E0               [ 8]  998 	movx	a,@dptr
      00034F F5 93            [ 8]  999 	mov	dpx,a
      000351 A3               [12] 1000 	inc	dptr
      000352 E0               [ 8] 1001 	movx	a,@dptr
      000353 F5 F0            [ 8] 1002 	mov	b,a
      000355 75 86 00         [12] 1003 	mov	dps,#0
      000358 12s00r00r00      [16] 1004 	lcall	___fs2ulong
      00035C AE 82            [ 8] 1005 	mov	r6,dpl
      00035E AF 83            [ 8] 1006 	mov	r7,dph
      000360 A8 93            [ 8] 1007 	mov	r0,dpx
      000362 A9 F0            [ 8] 1008 	mov	r1,b
                                   1009 ;	genAssign: resultIsFar = FALSE
                                   1010 ;	printf_large.c:301: decimalPart = f - integerPart;
      000364 C0 06            [ 8] 1011 	push	ar6
      000366 C0 07            [ 8] 1012 	push	ar7
      000368 C0 00            [ 8] 1013 	push	ar0
      00036A C0 01            [ 8] 1014 	push	ar1
      00036C 8E 82            [ 8] 1015 	mov	dpl,r6
      00036E 8F 83            [ 8] 1016 	mov	dph,r7
      000370 88 93            [ 8] 1017 	mov	dpx,r0
      000372 89 F0            [ 8] 1018 	mov	b,r1
      000374 12s00r00r00      [16] 1019 	lcall	___ulong2fs
      000378 AA 82            [ 8] 1020 	mov	r2,dpl
      00037A AB 83            [ 8] 1021 	mov	r3,dph
      00037C AC 93            [ 8] 1022 	mov	r4,dpx
      00037E AD F0            [ 8] 1023 	mov	r5,b
      000380 D0 01            [ 8] 1024 	pop	ar1
      000382 D0 00            [ 8] 1025 	pop	ar0
      000384 D0 07            [ 8] 1026 	pop	ar7
      000386 D0 06            [ 8] 1027 	pop	ar6
                                   1028 ;	genAssign: resultIsFar = TRUE
      000388 90s00r00r00      [12] 1029 	mov	dptr,#___fssub_PARM_2
      00038C EA               [ 4] 1030 	mov	a,r2
      00038D F0               [ 8] 1031 	movx	@dptr,a
      00038E A3               [12] 1032 	inc	dptr
      00038F EB               [ 4] 1033 	mov	a,r3
      000390 F0               [ 8] 1034 	movx	@dptr,a
      000391 A3               [12] 1035 	inc	dptr
      000392 EC               [ 4] 1036 	mov	a,r4
      000393 F0               [ 8] 1037 	movx	@dptr,a
      000394 A3               [12] 1038 	inc	dptr
      000395 ED               [ 4] 1039 	mov	a,r5
      000396 F0               [ 8] 1040 	movx	@dptr,a
      000397 C0 06            [ 8] 1041 	push	ar6
      000399 C0 07            [ 8] 1042 	push	ar7
      00039B C0 00            [ 8] 1043 	push	ar0
      00039D C0 01            [ 8] 1044 	push	ar1
      00039F 05 86            [ 8] 1045 	inc	dps
      0003A1 90s00r00r15      [12] 1046 	mov	dptr,#_output_float_f_65536_125
      0003A5 E0               [ 8] 1047 	movx	a,@dptr
      0003A6 F5 82            [ 8] 1048 	mov	dpl,a
      0003A8 A3               [12] 1049 	inc	dptr
      0003A9 E0               [ 8] 1050 	movx	a,@dptr
      0003AA F5 83            [ 8] 1051 	mov	dph,a
      0003AC A3               [12] 1052 	inc	dptr
      0003AD E0               [ 8] 1053 	movx	a,@dptr
      0003AE F5 93            [ 8] 1054 	mov	dpx,a
      0003B0 A3               [12] 1055 	inc	dptr
      0003B1 E0               [ 8] 1056 	movx	a,@dptr
      0003B2 F5 F0            [ 8] 1057 	mov	b,a
      0003B4 75 86 00         [12] 1058 	mov	dps,#0
      0003B7 12s00r00r00      [16] 1059 	lcall	___fssub
      0003BB AA 82            [ 8] 1060 	mov	r2,dpl
      0003BD AB 83            [ 8] 1061 	mov	r3,dph
      0003BF AC 93            [ 8] 1062 	mov	r4,dpx
      0003C1 AD F0            [ 8] 1063 	mov	r5,b
      0003C3 D0 01            [ 8] 1064 	pop	ar1
      0003C5 D0 00            [ 8] 1065 	pop	ar0
      0003C7 D0 07            [ 8] 1066 	pop	ar7
      0003C9 D0 06            [ 8] 1067 	pop	ar6
                                   1068 ;	genAssign: resultIsFar = FALSE
                                   1069 ;	printf_large.c:304: while (integerPart)
                                   1070 ;	genAssign: resultIsFar = TRUE
      0003CB 90s00r00rA4      [12] 1071 	mov	dptr,#_output_float_sloc2_1_0
      0003CF E4               [ 4] 1072 	clr	a
      0003D0 F0               [ 8] 1073 	movx	@dptr,a
      0003D1                       1074 00115$:
      0003D1 EE               [ 4] 1075 	mov	a,r6
      0003D2 4F               [ 4] 1076 	orl	a,r7
      0003D3 48               [ 4] 1077 	orl	a,r0
      0003D4 49               [ 4] 1078 	orl	a,r1
      0003D5 70 04            [12] 1079 	jnz	00448$
      0003D7 02s00r04r84      [16] 1080 	ljmp	00248$
      0003DB                       1081 00448$:
                                   1082 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      0003DB C0 02            [ 8] 1083 	push	ar2
      0003DD C0 03            [ 8] 1084 	push	ar3
      0003DF C0 04            [ 8] 1085 	push	ar4
      0003E1 C0 05            [ 8] 1086 	push	ar5
      0003E3 90s00r00rA4      [12] 1087 	mov	dptr,#_output_float_sloc2_1_0
                                   1088 ;	genAssign: resultIsFar = FALSE
      0003E7 E0               [ 8] 1089 	movx	a,@dptr
      0003E8 FA               [ 4] 1090 	mov	r2,a
      0003E9 90s00r00rA4      [12] 1091 	mov	dptr,#_output_float_sloc2_1_0
      0003ED E0               [ 8] 1092 	movx	a,@dptr
      0003EE 24 01            [ 8] 1093 	add	a,#0x01
      0003F0 F0               [ 8] 1094 	movx	@dptr,a
      0003F1 90s00r00rA0      [12] 1095 	mov	dptr,#_output_float_sloc1_1_0
      0003F5 EA               [ 4] 1096 	mov	a,r2
      0003F6 24r19            [ 8] 1097 	add	a,#_output_float_fpBuffer_65536_126
      0003F8 F0               [ 8] 1098 	movx	@dptr,a
      0003F9 E4               [ 4] 1099 	clr	a
      0003FA 34s00            [ 8] 1100 	addc	a,#(_output_float_fpBuffer_65536_126 >> 8)
      0003FC A3               [12] 1101 	inc	dptr
      0003FD F0               [ 8] 1102 	movx	@dptr,a
      0003FE E4               [ 4] 1103 	clr	a
      0003FF 34s00            [ 8] 1104 	addc	a,#(_output_float_fpBuffer_65536_126 >> 16)
      000401 A3               [12] 1105 	inc	dptr
      000402 F0               [ 8] 1106 	movx	@dptr,a
                                   1107 ;	genAssign: resultIsFar = TRUE
      000403 90s00r00r00      [12] 1108 	mov	dptr,#__modulong_PARM_2
      000407 74 0A            [ 8] 1109 	mov	a,#0x0a
      000409 F0               [ 8] 1110 	movx	@dptr,a
      00040A E4               [ 4] 1111 	clr	a
      00040B A3               [12] 1112 	inc	dptr
      00040C F0               [ 8] 1113 	movx	@dptr,a
      00040D A3               [12] 1114 	inc	dptr
      00040E F0               [ 8] 1115 	movx	@dptr,a
      00040F A3               [12] 1116 	inc	dptr
      000410 F0               [ 8] 1117 	movx	@dptr,a
      000411 C0 06            [ 8] 1118 	push	ar6
      000413 C0 07            [ 8] 1119 	push	ar7
      000415 C0 00            [ 8] 1120 	push	ar0
      000417 C0 01            [ 8] 1121 	push	ar1
      000419 8E 82            [ 8] 1122 	mov	dpl,r6
      00041B 8F 83            [ 8] 1123 	mov	dph,r7
      00041D 88 93            [ 8] 1124 	mov	dpx,r0
      00041F 89 F0            [ 8] 1125 	mov	b,r1
      000421 12s00r00r00      [16] 1126 	lcall	__modulong
      000425 AD 82            [ 8] 1127 	mov	r5,dpl
      000427 AA 83            [ 8] 1128 	mov	r2,dph
      000429 AB 93            [ 8] 1129 	mov	r3,dpx
      00042B AC F0            [ 8] 1130 	mov	r4,b
      00042D D0 01            [ 8] 1131 	pop	ar1
      00042F D0 00            [ 8] 1132 	pop	ar0
      000431 D0 07            [ 8] 1133 	pop	ar7
      000433 D0 06            [ 8] 1134 	pop	ar6
      000435 74 30            [ 8] 1135 	mov	a,#0x30
      000437 2D               [ 4] 1136 	add	a,r5
      000438 FD               [ 4] 1137 	mov	r5,a
      000439 90s00r00rA0      [12] 1138 	mov	dptr,#_output_float_sloc1_1_0
      00043D E0               [ 8] 1139 	movx	a,@dptr
      00043E C0 E0            [ 8] 1140 	push	acc
      000440 A3               [12] 1141 	inc	dptr
      000441 E0               [ 8] 1142 	movx	a,@dptr
      000442 C0 E0            [ 8] 1143 	push	acc
      000444 A3               [12] 1144 	inc	dptr
      000445 E0               [ 8] 1145 	movx	a,@dptr
      000446 F5 93            [ 8] 1146 	mov	dpx,a
      000448 D0 83            [ 8] 1147 	pop	dph
      00044A D0 82            [ 8] 1148 	pop	dpl
      00044C ED               [ 4] 1149 	mov	a,r5
      00044D F0               [ 8] 1150 	movx	@dptr,a
                                   1151 ;	printf_large.c:307: integerPart /= 10;
                                   1152 ;	genAssign: resultIsFar = TRUE
      00044E 90s00r00r00      [12] 1153 	mov	dptr,#__divulong_PARM_2
      000452 74 0A            [ 8] 1154 	mov	a,#0x0a
      000454 F0               [ 8] 1155 	movx	@dptr,a
      000455 E4               [ 4] 1156 	clr	a
      000456 A3               [12] 1157 	inc	dptr
      000457 F0               [ 8] 1158 	movx	@dptr,a
      000458 A3               [12] 1159 	inc	dptr
      000459 F0               [ 8] 1160 	movx	@dptr,a
      00045A A3               [12] 1161 	inc	dptr
      00045B F0               [ 8] 1162 	movx	@dptr,a
      00045C 8E 82            [ 8] 1163 	mov	dpl,r6
      00045E 8F 83            [ 8] 1164 	mov	dph,r7
      000460 88 93            [ 8] 1165 	mov	dpx,r0
      000462 89 F0            [ 8] 1166 	mov	b,r1
      000464 12s00r00r00      [16] 1167 	lcall	__divulong
      000468 AA 82            [ 8] 1168 	mov	r2,dpl
      00046A AB 83            [ 8] 1169 	mov	r3,dph
      00046C AC 93            [ 8] 1170 	mov	r4,dpx
      00046E AD F0            [ 8] 1171 	mov	r5,b
                                   1172 ;	genAssign: resultIsFar = FALSE
      000470 8A 06            [ 8] 1173 	mov	ar6,r2
      000472 8B 07            [ 8] 1174 	mov	ar7,r3
      000474 8C 00            [ 8] 1175 	mov	ar0,r4
      000476 8D 01            [ 8] 1176 	mov	ar1,r5
      000478 D0 05            [ 8] 1177 	pop	ar5
      00047A D0 04            [ 8] 1178 	pop	ar4
      00047C D0 03            [ 8] 1179 	pop	ar3
      00047E D0 02            [ 8] 1180 	pop	ar2
      000480 02s00r03rD1      [16] 1181 	ljmp	00115$
      000484                       1182 00248$:
      000484 90s00r00rA4      [12] 1183 	mov	dptr,#_output_float_sloc2_1_0
                                   1184 ;	genAssign: resultIsFar = TRUE
      000488 E0               [ 8] 1185 	movx	a,@dptr
      000489 FE               [ 4] 1186 	mov	r6,a
                                   1187 ;	printf_large.c:309: if (!fpBI)
      00048A 90s00r00rA4      [12] 1188 	mov	dptr,#_output_float_sloc2_1_0
      00048E E0               [ 8] 1189 	movx	a,@dptr
      00048F 70 21            [12] 1190 	jnz  00119$
      000491                       1191 00449$:
                                   1192 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000491 90s00r00rA4      [12] 1193 	mov	dptr,#_output_float_sloc2_1_0
      000495 E0               [ 8] 1194 	movx	a,@dptr
      000496 24 01            [ 8] 1195 	add	a,#0x01
      000498 FE               [ 4] 1196 	mov	r6,a
      000499 90s00r00rA4      [12] 1197 	mov	dptr,#_output_float_sloc2_1_0
      00049D E0               [ 8] 1198 	movx	a,@dptr
      00049E 24r19            [ 8] 1199 	add	a,#_output_float_fpBuffer_65536_126
      0004A0 FF               [ 4] 1200 	mov	r7,a
      0004A1 E4               [ 4] 1201 	clr	a
      0004A2 34s00            [ 8] 1202 	addc	a,#(_output_float_fpBuffer_65536_126 >> 8)
      0004A4 F8               [ 4] 1203 	mov	r0,a
      0004A5 E4               [ 4] 1204 	clr	a
      0004A6 34s00            [ 8] 1205 	addc	a,#(_output_float_fpBuffer_65536_126 >> 16)
      0004A8 F9               [ 4] 1206 	mov	r1,a
      0004A9 8F 82            [ 8] 1207 	mov	dpl,r7
      0004AB 88 83            [ 8] 1208 	mov	dph,r0
      0004AD 89 93            [ 8] 1209 	mov	dpx,r1
      0004AF 74 30            [ 8] 1210 	mov	a,#0x30
      0004B1 F0               [ 8] 1211 	movx	@dptr,a
      0004B2                       1212 00119$:
                                   1213 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      0004B2 90s00r00r10      [12] 1214 	mov	dptr,#_output_float_PARM_3
                                   1215 ;	genAssign: resultIsFar = FALSE
      0004B6 E0               [ 8] 1216 	movx	a,@dptr
      0004B7 F8               [ 4] 1217 	mov	r0,a
                                   1218 ;	genAssign: resultIsFar = FALSE
      0004B8 8E 07            [ 8] 1219 	mov	ar7,r6
      0004BA                       1220 00190$:
      0004BA E8               [ 4] 1221 	mov	a,r0
      0004BB 70 06            [12] 1222 	jnz  00189$
      0004BD                       1223 00450$:
                                   1224 ;	genAssign: resultIsFar = FALSE
      0004BD 88 01            [ 8] 1225 	mov	ar1,r0
      0004BF 02s00r05rD7      [16] 1226 	ljmp	00120$
      0004C3                       1227 00189$:
                                   1228 ;	printf_large.c:320: decimalPart *= 10.0;
      0004C3 C0 06            [ 8] 1229 	push	ar6
                                   1230 ;	genAssign: resultIsFar = TRUE
      0004C5 90s00r00r00      [12] 1231 	mov	dptr,#___fsmul_PARM_2
      0004C9 EA               [ 4] 1232 	mov	a,r2
      0004CA F0               [ 8] 1233 	movx	@dptr,a
      0004CB A3               [12] 1234 	inc	dptr
      0004CC EB               [ 4] 1235 	mov	a,r3
      0004CD F0               [ 8] 1236 	movx	@dptr,a
      0004CE A3               [12] 1237 	inc	dptr
      0004CF EC               [ 4] 1238 	mov	a,r4
      0004D0 F0               [ 8] 1239 	movx	@dptr,a
      0004D1 A3               [12] 1240 	inc	dptr
      0004D2 ED               [ 4] 1241 	mov	a,r5
      0004D3 F0               [ 8] 1242 	movx	@dptr,a
      0004D4 C0 06            [ 8] 1243 	push	ar6
      0004D6 C0 07            [ 8] 1244 	push	ar7
      0004D8 C0 00            [ 8] 1245 	push	ar0
      0004DA 90 00 00 00      [12] 1246 	mov  dptr,#0x0000
      0004DE 75 93 20         [12] 1247 	mov	dpx,#0x20
      0004E1 75 F0 41         [12] 1248 	mov	b,#0x41
      0004E4 12s00r00r00      [16] 1249 	lcall	___fsmul
      0004E8 AA 82            [ 8] 1250 	mov	r2,dpl
      0004EA AB 83            [ 8] 1251 	mov	r3,dph
      0004EC AC 93            [ 8] 1252 	mov	r4,dpx
      0004EE AD F0            [ 8] 1253 	mov	r5,b
      0004F0 D0 00            [ 8] 1254 	pop	ar0
      0004F2 D0 07            [ 8] 1255 	pop	ar7
      0004F4 D0 06            [ 8] 1256 	pop	ar6
                                   1257 ;	genAssign: resultIsFar = TRUE
      0004F6 90s00r00r9A      [12] 1258 	mov	dptr,#_output_float_decimalPart_65536_126
      0004FA EA               [ 4] 1259 	mov	a,r2
      0004FB F0               [ 8] 1260 	movx	@dptr,a
      0004FC A3               [12] 1261 	inc	dptr
      0004FD EB               [ 4] 1262 	mov	a,r3
      0004FE F0               [ 8] 1263 	movx	@dptr,a
      0004FF A3               [12] 1264 	inc	dptr
      000500 EC               [ 4] 1265 	mov	a,r4
      000501 F0               [ 8] 1266 	movx	@dptr,a
      000502 A3               [12] 1267 	inc	dptr
      000503 ED               [ 4] 1268 	mov	a,r5
      000504 F0               [ 8] 1269 	movx	@dptr,a
                                   1270 ;	printf_large.c:322: integerPart = decimalPart;
      000505 C0 06            [ 8] 1271 	push	ar6
      000507 C0 07            [ 8] 1272 	push	ar7
      000509 C0 00            [ 8] 1273 	push	ar0
      00050B 05 86            [ 8] 1274 	inc	dps
      00050D 90s00r00r9A      [12] 1275 	mov	dptr,#_output_float_decimalPart_65536_126
      000511 E0               [ 8] 1276 	movx	a,@dptr
      000512 F5 82            [ 8] 1277 	mov	dpl,a
      000514 A3               [12] 1278 	inc	dptr
      000515 E0               [ 8] 1279 	movx	a,@dptr
      000516 F5 83            [ 8] 1280 	mov	dph,a
      000518 A3               [12] 1281 	inc	dptr
      000519 E0               [ 8] 1282 	movx	a,@dptr
      00051A F5 93            [ 8] 1283 	mov	dpx,a
      00051C A3               [12] 1284 	inc	dptr
      00051D E0               [ 8] 1285 	movx	a,@dptr
      00051E F5 F0            [ 8] 1286 	mov	b,a
      000520 75 86 00         [12] 1287 	mov	dps,#0
      000523 12s00r00r00      [16] 1288 	lcall	___fs2ulong
      000527 AA 82            [ 8] 1289 	mov	r2,dpl
      000529 AB 83            [ 8] 1290 	mov	r3,dph
      00052B AC 93            [ 8] 1291 	mov	r4,dpx
      00052D AD F0            [ 8] 1292 	mov	r5,b
      00052F D0 00            [ 8] 1293 	pop	ar0
      000531 D0 07            [ 8] 1294 	pop	ar7
      000533 D0 06            [ 8] 1295 	pop	ar6
                                   1296 ;	genAssign: resultIsFar = FALSE
                                   1297 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      000535 EF               [ 4] 1298 	mov	a,r7
      000536 24r19            [ 8] 1299 	add	a,#_output_float_fpBuffer_65536_126
      000538 F5 84            [ 8] 1300 	mov	dpl1,a
      00053A E4               [ 4] 1301 	clr	a
      00053B 34s00            [ 8] 1302 	addc	a,#(_output_float_fpBuffer_65536_126 >> 8)
      00053D F5 85            [ 8] 1303 	mov	dph1,a
      00053F E4               [ 4] 1304 	clr	a
      000540 34s00            [ 8] 1305 	addc	a,#(_output_float_fpBuffer_65536_126 >> 16)
      000542 F5 95            [ 8] 1306 	mov	dpx1,a
      000544 0F               [ 4] 1307 	inc	r7
      000545 8A 06            [ 8] 1308 	mov	ar6,r2
      000547 74 30            [ 8] 1309 	mov	a,#0x30
      000549 2E               [ 4] 1310 	add	a,r6
      00054A FE               [ 4] 1311 	mov  r6,a
      00054B 05 86            [ 8] 1312 	inc	dps
      00054D F0               [ 8] 1313 	movx	@dptr,a
      00054E 75 86 00         [12] 1314 	mov	dps,#0
                                   1315 ;	printf_large.c:324: decimalPart -= integerPart;
      000551 C0 06            [ 8] 1316 	push	ar6
      000553 C0 07            [ 8] 1317 	push	ar7
      000555 C0 00            [ 8] 1318 	push	ar0
      000557 8A 82            [ 8] 1319 	mov	dpl,r2
      000559 8B 83            [ 8] 1320 	mov	dph,r3
      00055B 8C 93            [ 8] 1321 	mov	dpx,r4
      00055D 8D F0            [ 8] 1322 	mov	b,r5
      00055F 12s00r00r00      [16] 1323 	lcall	___ulong2fs
      000563 AA 82            [ 8] 1324 	mov	r2,dpl
      000565 AB 83            [ 8] 1325 	mov	r3,dph
      000567 AC 93            [ 8] 1326 	mov	r4,dpx
      000569 AD F0            [ 8] 1327 	mov	r5,b
      00056B D0 00            [ 8] 1328 	pop	ar0
      00056D D0 07            [ 8] 1329 	pop	ar7
      00056F D0 06            [ 8] 1330 	pop	ar6
                                   1331 ;	genAssign: resultIsFar = TRUE
      000571 90s00r00r00      [12] 1332 	mov	dptr,#___fssub_PARM_2
      000575 EA               [ 4] 1333 	mov	a,r2
      000576 F0               [ 8] 1334 	movx	@dptr,a
      000577 A3               [12] 1335 	inc	dptr
      000578 EB               [ 4] 1336 	mov	a,r3
      000579 F0               [ 8] 1337 	movx	@dptr,a
      00057A A3               [12] 1338 	inc	dptr
      00057B EC               [ 4] 1339 	mov	a,r4
      00057C F0               [ 8] 1340 	movx	@dptr,a
      00057D A3               [12] 1341 	inc	dptr
      00057E ED               [ 4] 1342 	mov	a,r5
      00057F F0               [ 8] 1343 	movx	@dptr,a
      000580 C0 06            [ 8] 1344 	push	ar6
      000582 C0 07            [ 8] 1345 	push	ar7
      000584 C0 00            [ 8] 1346 	push	ar0
      000586 05 86            [ 8] 1347 	inc	dps
      000588 90s00r00r9A      [12] 1348 	mov	dptr,#_output_float_decimalPart_65536_126
      00058C E0               [ 8] 1349 	movx	a,@dptr
      00058D F5 82            [ 8] 1350 	mov	dpl,a
      00058F A3               [12] 1351 	inc	dptr
      000590 E0               [ 8] 1352 	movx	a,@dptr
      000591 F5 83            [ 8] 1353 	mov	dph,a
      000593 A3               [12] 1354 	inc	dptr
      000594 E0               [ 8] 1355 	movx	a,@dptr
      000595 F5 93            [ 8] 1356 	mov	dpx,a
      000597 A3               [12] 1357 	inc	dptr
      000598 E0               [ 8] 1358 	movx	a,@dptr
      000599 F5 F0            [ 8] 1359 	mov	b,a
      00059B 75 86 00         [12] 1360 	mov	dps,#0
      00059E 12s00r00r00      [16] 1361 	lcall	___fssub
      0005A2 75 86 01         [12] 1362 	mov     dps, #1
      0005A5 90s00r00rA8      [12] 1363 	mov     dptr, #_output_float_sloc3_1_0
      0005A9 E5 82            [ 8] 1364 	mov	a,dpl
      0005AB F0               [ 8] 1365 	movx	@dptr,a
      0005AC A3               [12] 1366 	inc	dptr
      0005AD E5 83            [ 8] 1367 	mov	a,dph
      0005AF F0               [ 8] 1368 	movx	@dptr,a
      0005B0 A3               [12] 1369 	inc	dptr
      0005B1 E5 93            [ 8] 1370 	mov	a,dpx
      0005B3 F0               [ 8] 1371 	movx	@dptr,a
      0005B4 A3               [12] 1372 	inc	dptr
      0005B5 E5 F0            [ 8] 1373 	mov	a,b
      0005B7 F0               [ 8] 1374 	movx	@dptr,a
      0005B8 75 86 00         [12] 1375 	mov	dps,#0
      0005BB D0 00            [ 8] 1376 	pop	ar0
      0005BD D0 07            [ 8] 1377 	pop	ar7
      0005BF D0 06            [ 8] 1378 	pop	ar6
      0005C1 90s00r00rA8      [12] 1379 	mov	dptr,#_output_float_sloc3_1_0
                                   1380 ;	genAssign: resultIsFar = FALSE
      0005C5 E0               [ 8] 1381 	movx	a,@dptr
      0005C6 FA               [ 4] 1382 	mov	r2,a
      0005C7 A3               [12] 1383 	inc	dptr
      0005C8 E0               [ 8] 1384 	movx	a,@dptr
      0005C9 FB               [ 4] 1385 	mov	r3,a
      0005CA A3               [12] 1386 	inc	dptr
      0005CB E0               [ 8] 1387 	movx	a,@dptr
      0005CC FC               [ 4] 1388 	mov	r4,a
      0005CD A3               [12] 1389 	inc	dptr
      0005CE E0               [ 8] 1390 	movx	a,@dptr
      0005CF FD               [ 4] 1391 	mov	r5,a
                                   1392 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      0005D0 18               [ 4] 1393 	dec	r0
      0005D1 D0 06            [ 8] 1394 	pop	ar6
      0005D3 02s00r04rBA      [16] 1395 	ljmp	00190$
      0005D7                       1396 00120$:
                                   1397 ;	printf_large.c:327: minWidth=fpBI; // we need at least these
                                   1398 ;	genAssign: resultIsFar = FALSE
      0005D7 8E 02            [ 8] 1399 	mov	ar2,r6
                                   1400 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      0005D9 90s00r00r10      [12] 1401 	mov	dptr,#_output_float_PARM_3
      0005DD E0               [ 8] 1402 	movx	a,@dptr
      0005DE 60 0E            [12] 1403 	jz  00198$
      0005E0                       1404 00451$:
      0005E0 90s00r00r10      [12] 1405 	mov	dptr,#_output_float_PARM_3
      0005E4 E0               [ 8] 1406 	movx	a,@dptr
      0005E5 24 01            [ 8] 1407 	add	a,#0x01
      0005E7 FB               [ 4] 1408 	mov  r3,a
      0005E8 33               [ 4] 1409 	rlc	a
      0005E9 95 E0            [ 8] 1410 	subb	a,acc
      0005EB FC               [ 4] 1411 	mov	r4,a
      0005EC 80 04            [12] 1412 	sjmp 00199$
      0005EE                       1413 00198$:
                                   1414 ;	genAssign: resultIsFar = FALSE
      0005EE 7B 00            [ 8] 1415 	mov	r3,#0x00
      0005F0 7C 00            [ 8] 1416 	mov	r4,#0x00
      0005F2                       1417 00199$:
      0005F2 EB               [ 4] 1418 	mov	a,r3
      0005F3 2A               [ 4] 1419 	add	a,r2
      0005F4 FA               [ 4] 1420 	mov	r2,a
                                   1421 ;	printf_large.c:329: if (negative || sign || space)
      0005F5 90s00r00r99      [12] 1422 	mov	dptr,#_output_float_negative_65536_126
      0005F9 E0               [ 8] 1423 	movx	a,@dptr
      0005FA 70 0E            [12] 1424 	jnz  00121$
      0005FC                       1425 00452$:
      0005FC 90s00r00r13      [12] 1426 	mov	dptr,#_output_float_PARM_6
      000600 E0               [ 8] 1427 	movx	a,@dptr
      000601 70 07            [12] 1428 	jnz  00121$
      000603                       1429 00453$:
      000603 90s00r00r14      [12] 1430 	mov	dptr,#_output_float_PARM_7
      000607 E0               [ 8] 1431 	movx	a,@dptr
      000608 60 01            [12] 1432 	jz  00122$
      00060A                       1433 00454$:
      00060A                       1434 00121$:
                                   1435 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      00060A 0A               [ 4] 1436 	inc	r2
      00060B                       1437 00122$:
                                   1438 ;	printf_large.c:332: if (!left && reqWidth>i)
      00060B 90s00r00r11      [12] 1439 	mov	dptr,#_output_float_PARM_4
      00060F E0               [ 8] 1440 	movx	a,@dptr
      000610 60 04            [12] 1441 	jz	00455$
      000612 02s00r07r10      [16] 1442 	ljmp	00159$
      000616                       1443 00455$:
      000616 90s00r00r0F      [12] 1444 	mov	dptr,#_output_float_PARM_2
      00061A C3               [ 4] 1445 	clr	c
      00061B E9               [ 4] 1446 	mov	a,r1
      00061C C5 F0            [ 8] 1447 	xch	a, b
      00061E E0               [ 8] 1448 	movx	a,@dptr
      00061F C5 F0            [ 8] 1449 	xch	a, b
      000621 95 F0            [ 8] 1450 	subb	a,b
      000623 40 04            [12] 1451 	jc	00456$
      000625 02s00r07r10      [16] 1452 	ljmp	00159$
      000629                       1453 00456$:
                                   1454 ;	printf_large.c:334: if (zero)
      000629 90s00r00r12      [12] 1455 	mov	dptr,#_output_float_PARM_5
      00062D E0               [ 8] 1456 	movx	a,@dptr
      00062E 60 6D            [12] 1457 	jz   00228$
      000630                       1458 00457$:
                                   1459 ;	printf_large.c:336: if (negative)
      000630 90s00r00r99      [12] 1460 	mov	dptr,#_output_float_negative_65536_126
      000634 E0               [ 8] 1461 	movx	a,@dptr
      000635 60 11            [12] 1462 	jz  00131$
      000637                       1463 00458$:
                                   1464 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      000637 C0 02            [ 8] 1465 	push	ar2
      000639 C0 06            [ 8] 1466 	push	ar6
      00063B 75 82 2D         [12] 1467 	mov	dpl,#0x2d
      00063E 12s00r00r00      [16] 1468 	lcall	__output_char
      000642 D0 06            [ 8] 1469 	pop	ar6
      000644 D0 02            [ 8] 1470 	pop	ar2
      000646 80 2E            [12] 1471 	sjmp 00226$
      000648                       1472 00131$:
                                   1473 ;	printf_large.c:340: else if (sign)
      000648 90s00r00r13      [12] 1474 	mov	dptr,#_output_float_PARM_6
      00064C E0               [ 8] 1475 	movx	a,@dptr
      00064D 60 11            [12] 1476 	jz  00128$
      00064F                       1477 00459$:
                                   1478 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      00064F C0 02            [ 8] 1479 	push	ar2
      000651 C0 06            [ 8] 1480 	push	ar6
      000653 75 82 2B         [12] 1481 	mov	dpl,#0x2b
      000656 12s00r00r00      [16] 1482 	lcall	__output_char
      00065A D0 06            [ 8] 1483 	pop	ar6
      00065C D0 02            [ 8] 1484 	pop	ar2
      00065E 80 16            [12] 1485 	sjmp 00226$
      000660                       1486 00128$:
                                   1487 ;	printf_large.c:344: else if (space)
      000660 90s00r00r14      [12] 1488 	mov	dptr,#_output_float_PARM_7
      000664 E0               [ 8] 1489 	movx	a,@dptr
      000665 60 0F            [12] 1490 	jz  00226$
      000667                       1491 00460$:
                                   1492 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      000667 C0 02            [ 8] 1493 	push	ar2
      000669 C0 06            [ 8] 1494 	push	ar6
      00066B 75 82 20         [12] 1495 	mov	dpl,#0x20
      00066E 12s00r00r00      [16] 1496 	lcall	__output_char
      000672 D0 06            [ 8] 1497 	pop	ar6
      000674 D0 02            [ 8] 1498 	pop	ar2
                                   1499 ;	printf_large.c:348: while (reqWidth-->minWidth)
      000676                       1500 00226$:
      000676 90s00r00r0F      [12] 1501 	mov	dptr,#_output_float_PARM_2
                                   1502 ;	genAssign: resultIsFar = FALSE
      00067A E0               [ 8] 1503 	movx	a,@dptr
      00067B FB               [ 4] 1504 	mov	r3,a
      00067C                       1505 00133$:
                                   1506 ;	genAssign: resultIsFar = FALSE
      00067C 8B 04            [ 8] 1507 	mov	ar4,r3
      00067E 1B               [ 4] 1508 	dec	r3
      00067F C3               [ 4] 1509 	clr	c
      000680 EA               [ 4] 1510 	mov	a,r2
      000681 9C               [ 4] 1511 	subb	a,r4
      000682 40 04            [12] 1512 	jc	00461$
      000684 02s00r07r58      [16] 1513 	ljmp	00250$
      000688                       1514 00461$:
                                   1515 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      000688 C0 02            [ 8] 1516 	push	ar2
      00068A C0 03            [ 8] 1517 	push	ar3
      00068C C0 06            [ 8] 1518 	push	ar6
      00068E 75 82 30         [12] 1519 	mov	dpl,#0x30
      000691 12s00r00r00      [16] 1520 	lcall	__output_char
      000695 D0 06            [ 8] 1521 	pop	ar6
      000697 D0 03            [ 8] 1522 	pop	ar3
      000699 D0 02            [ 8] 1523 	pop	ar2
                                   1524 ;	printf_large.c:355: while (reqWidth-->minWidth)
      00069B 80 DF            [12] 1525 	sjmp 00133$
      00069D                       1526 00228$:
      00069D 90s00r00r0F      [12] 1527 	mov	dptr,#_output_float_PARM_2
                                   1528 ;	genAssign: resultIsFar = FALSE
      0006A1 E0               [ 8] 1529 	movx	a,@dptr
      0006A2 FC               [ 4] 1530 	mov	r4,a
      0006A3                       1531 00136$:
                                   1532 ;	genAssign: resultIsFar = FALSE
      0006A3 8C 05            [ 8] 1533 	mov	ar5,r4
      0006A5 1C               [ 4] 1534 	dec	r4
      0006A6 C3               [ 4] 1535 	clr	c
      0006A7 EA               [ 4] 1536 	mov	a,r2
      0006A8 9D               [ 4] 1537 	subb	a,r5
      0006A9 50 15            [12] 1538 	jnc  00251$
      0006AB                       1539 00462$:
                                   1540 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0006AB C0 02            [ 8] 1541 	push	ar2
      0006AD C0 04            [ 8] 1542 	push	ar4
      0006AF C0 06            [ 8] 1543 	push	ar6
      0006B1 75 82 20         [12] 1544 	mov	dpl,#0x20
      0006B4 12s00r00r00      [16] 1545 	lcall	__output_char
      0006B8 D0 06            [ 8] 1546 	pop	ar6
      0006BA D0 04            [ 8] 1547 	pop	ar4
      0006BC D0 02            [ 8] 1548 	pop	ar2
      0006BE 80 E3            [12] 1549 	sjmp 00136$
      0006C0                       1550 00251$:
                                   1551 ;	genAssign: resultIsFar = TRUE
      0006C0 90s00r00r0F      [12] 1552 	mov	dptr,#_output_float_PARM_2
      0006C4 EC               [ 4] 1553 	mov	a,r4
      0006C5 F0               [ 8] 1554 	movx	@dptr,a
                                   1555 ;	printf_large.c:359: if (negative)
      0006C6 90s00r00r99      [12] 1556 	mov	dptr,#_output_float_negative_65536_126
      0006CA E0               [ 8] 1557 	movx	a,@dptr
      0006CB 60 13            [12] 1558 	jz  00145$
      0006CD                       1559 00463$:
                                   1560 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      0006CD C0 02            [ 8] 1561 	push	ar2
      0006CF C0 06            [ 8] 1562 	push	ar6
      0006D1 75 82 2D         [12] 1563 	mov	dpl,#0x2d
      0006D4 12s00r00r00      [16] 1564 	lcall	__output_char
      0006D8 D0 06            [ 8] 1565 	pop	ar6
      0006DA D0 02            [ 8] 1566 	pop	ar2
      0006DC 02s00r07r5E      [16] 1567 	ljmp	00160$
      0006E0                       1568 00145$:
                                   1569 ;	printf_large.c:363: else if (sign)
      0006E0 90s00r00r13      [12] 1570 	mov	dptr,#_output_float_PARM_6
      0006E4 E0               [ 8] 1571 	movx	a,@dptr
      0006E5 60 11            [12] 1572 	jz  00142$
      0006E7                       1573 00464$:
                                   1574 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      0006E7 C0 02            [ 8] 1575 	push	ar2
      0006E9 C0 06            [ 8] 1576 	push	ar6
      0006EB 75 82 2B         [12] 1577 	mov	dpl,#0x2b
      0006EE 12s00r00r00      [16] 1578 	lcall	__output_char
      0006F2 D0 06            [ 8] 1579 	pop	ar6
      0006F4 D0 02            [ 8] 1580 	pop	ar2
      0006F6 80 66            [12] 1581 	sjmp 00160$
      0006F8                       1582 00142$:
                                   1583 ;	printf_large.c:367: else if (space)
      0006F8 90s00r00r14      [12] 1584 	mov	dptr,#_output_float_PARM_7
      0006FC E0               [ 8] 1585 	movx	a,@dptr
      0006FD 60 5F            [12] 1586 	jz  00160$
      0006FF                       1587 00465$:
                                   1588 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      0006FF C0 02            [ 8] 1589 	push	ar2
      000701 C0 06            [ 8] 1590 	push	ar6
      000703 75 82 20         [12] 1591 	mov	dpl,#0x20
      000706 12s00r00r00      [16] 1592 	lcall	__output_char
      00070A D0 06            [ 8] 1593 	pop	ar6
      00070C D0 02            [ 8] 1594 	pop	ar2
      00070E 80 4E            [12] 1595 	sjmp 00160$
      000710                       1596 00159$:
                                   1597 ;	printf_large.c:375: if (negative)
      000710 90s00r00r99      [12] 1598 	mov	dptr,#_output_float_negative_65536_126
      000714 E0               [ 8] 1599 	movx	a,@dptr
      000715 60 11            [12] 1600 	jz  00156$
      000717                       1601 00466$:
                                   1602 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      000717 C0 02            [ 8] 1603 	push	ar2
      000719 C0 06            [ 8] 1604 	push	ar6
      00071B 75 82 2D         [12] 1605 	mov	dpl,#0x2d
      00071E 12s00r00r00      [16] 1606 	lcall	__output_char
      000722 D0 06            [ 8] 1607 	pop	ar6
      000724 D0 02            [ 8] 1608 	pop	ar2
      000726 80 36            [12] 1609 	sjmp 00160$
      000728                       1610 00156$:
                                   1611 ;	printf_large.c:379: else if (sign)
      000728 90s00r00r13      [12] 1612 	mov	dptr,#_output_float_PARM_6
      00072C E0               [ 8] 1613 	movx	a,@dptr
      00072D 60 11            [12] 1614 	jz  00153$
      00072F                       1615 00467$:
                                   1616 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      00072F C0 02            [ 8] 1617 	push	ar2
      000731 C0 06            [ 8] 1618 	push	ar6
      000733 75 82 2B         [12] 1619 	mov	dpl,#0x2b
      000736 12s00r00r00      [16] 1620 	lcall	__output_char
      00073A D0 06            [ 8] 1621 	pop	ar6
      00073C D0 02            [ 8] 1622 	pop	ar2
      00073E 80 1E            [12] 1623 	sjmp 00160$
      000740                       1624 00153$:
                                   1625 ;	printf_large.c:383: else if (space)
      000740 90s00r00r14      [12] 1626 	mov	dptr,#_output_float_PARM_7
      000744 E0               [ 8] 1627 	movx	a,@dptr
      000745 60 17            [12] 1628 	jz  00160$
      000747                       1629 00468$:
                                   1630 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000747 C0 02            [ 8] 1631 	push	ar2
      000749 C0 06            [ 8] 1632 	push	ar6
      00074B 75 82 20         [12] 1633 	mov	dpl,#0x20
      00074E 12s00r00r00      [16] 1634 	lcall	__output_char
      000752 D0 06            [ 8] 1635 	pop	ar6
      000754 D0 02            [ 8] 1636 	pop	ar2
                                   1637 ;	printf_large.c:428: return;
                                   1638 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000756 80 06            [12] 1639 	sjmp 00160$
      000758                       1640 00250$:
                                   1641 ;	genAssign: resultIsFar = TRUE
      000758 90s00r00r0F      [12] 1642 	mov	dptr,#_output_float_PARM_2
      00075C EB               [ 4] 1643 	mov	a,r3
      00075D F0               [ 8] 1644 	movx	@dptr,a
      00075E                       1645 00160$:
                                   1646 ;	printf_large.c:390: i=fpBI-1;
      00075E 8E 03            [ 8] 1647 	mov	ar3,r6
      000760 1B               [ 4] 1648 	dec	r3
                                   1649 ;	printf_large.c:391: do {
      000761                       1650 00162$:
                                   1651 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      000761 EB               [ 4] 1652 	mov	a,r3
      000762 24r19            [ 8] 1653 	add	a,#_output_float_fpBuffer_65536_126
      000764 F5 84            [ 8] 1654 	mov	dpl1,a
      000766 E4               [ 4] 1655 	clr	a
      000767 34s00            [ 8] 1656 	addc	a,#(_output_float_fpBuffer_65536_126 >> 8)
      000769 F5 85            [ 8] 1657 	mov	dph1,a
      00076B E4               [ 4] 1658 	clr	a
      00076C 34s00            [ 8] 1659 	addc	a,#(_output_float_fpBuffer_65536_126 >> 16)
      00076E F5 95            [ 8] 1660 	mov	dpx1,a
      000770 05 86            [ 8] 1661 	inc	dps
      000772 E0               [ 8] 1662 	movx	a,@dptr
      000773 FC               [ 4] 1663 	mov	r4,a
      000774 75 86 00         [12] 1664 	mov	dps,#0
      000777 C0 02            [ 8] 1665 	push	ar2
      000779 C0 03            [ 8] 1666 	push	ar3
      00077B C0 06            [ 8] 1667 	push	ar6
      00077D 8C 82            [ 8] 1668 	mov	dpl,r4
      00077F 12s00r00r00      [16] 1669 	lcall	__output_char
      000783 D0 06            [ 8] 1670 	pop	ar6
      000785 D0 03            [ 8] 1671 	pop	ar3
      000787 D0 02            [ 8] 1672 	pop	ar2
                                   1673 ;	printf_large.c:393: } while (i--);
                                   1674 ;	genAssign: resultIsFar = FALSE
      000789 8B 04            [ 8] 1675 	mov	ar4,r3
      00078B 1B               [ 4] 1676 	dec	r3
      00078C EC               [ 4] 1677 	mov	a,r4
      00078D 70 D2            [12] 1678 	jnz  00162$
      00078F                       1679 00469$:
                                   1680 ;	printf_large.c:396: if (reqDecimals)
      00078F 90s00r00r10      [12] 1681 	mov	dptr,#_output_float_PARM_3
      000793 E0               [ 8] 1682 	movx	a,@dptr
      000794 60 48            [12] 1683 	jz  00169$
      000796                       1684 00470$:
                                   1685 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      000796 C0 02            [ 8] 1686 	push	ar2
      000798 C0 06            [ 8] 1687 	push	ar6
      00079A 75 82 2E         [12] 1688 	mov	dpl,#0x2e
      00079D 12s00r00r00      [16] 1689 	lcall	__output_char
      0007A1 D0 06            [ 8] 1690 	pop	ar6
      0007A3 D0 02            [ 8] 1691 	pop	ar2
                                   1692 ;	printf_large.c:400: while (reqDecimals--)
                                   1693 ;	genAssign: resultIsFar = FALSE
      0007A5 8E 03            [ 8] 1694 	mov	ar3,r6
      0007A7 90s00r00r10      [12] 1695 	mov	dptr,#_output_float_PARM_3
                                   1696 ;	genAssign: resultIsFar = FALSE
      0007AB E0               [ 8] 1697 	movx	a,@dptr
      0007AC FC               [ 4] 1698 	mov	r4,a
      0007AD                       1699 00165$:
                                   1700 ;	genAssign: resultIsFar = FALSE
      0007AD 8C 05            [ 8] 1701 	mov	ar5,r4
      0007AF 1C               [ 4] 1702 	dec	r4
      0007B0 ED               [ 4] 1703 	mov	a,r5
      0007B1 60 2B            [12] 1704 	jz  00169$
      0007B3                       1705 00471$:
                                   1706 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      0007B3 EB               [ 4] 1707 	mov	a,r3
      0007B4 24r19            [ 8] 1708 	add	a,#_output_float_fpBuffer_65536_126
      0007B6 F5 84            [ 8] 1709 	mov	dpl1,a
      0007B8 E4               [ 4] 1710 	clr	a
      0007B9 34s00            [ 8] 1711 	addc	a,#(_output_float_fpBuffer_65536_126 >> 8)
      0007BB F5 85            [ 8] 1712 	mov	dph1,a
      0007BD E4               [ 4] 1713 	clr	a
      0007BE 34s00            [ 8] 1714 	addc	a,#(_output_float_fpBuffer_65536_126 >> 16)
      0007C0 F5 95            [ 8] 1715 	mov	dpx1,a
      0007C2 0B               [ 4] 1716 	inc	r3
      0007C3 05 86            [ 8] 1717 	inc	dps
      0007C5 E0               [ 8] 1718 	movx	a,@dptr
      0007C6 FD               [ 4] 1719 	mov	r5,a
      0007C7 75 86 00         [12] 1720 	mov	dps,#0
      0007CA C0 02            [ 8] 1721 	push	ar2
      0007CC C0 03            [ 8] 1722 	push	ar3
      0007CE C0 04            [ 8] 1723 	push	ar4
      0007D0 8D 82            [ 8] 1724 	mov	dpl,r5
      0007D2 12s00r00r00      [16] 1725 	lcall	__output_char
      0007D6 D0 04            [ 8] 1726 	pop	ar4
      0007D8 D0 03            [ 8] 1727 	pop	ar3
      0007DA D0 02            [ 8] 1728 	pop	ar2
      0007DC 80 CF            [12] 1729 	sjmp 00165$
      0007DE                       1730 00169$:
                                   1731 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      0007DE 90s00r00r11      [12] 1732 	mov	dptr,#_output_float_PARM_4
      0007E2 E0               [ 8] 1733 	movx	a,@dptr
      0007E3 60 2C            [12] 1734 	jz  00174$
      0007E5                       1735 00472$:
      0007E5 90s00r00r0F      [12] 1736 	mov	dptr,#_output_float_PARM_2
      0007E9 C3               [ 4] 1737 	clr	c
      0007EA EA               [ 4] 1738 	mov	a,r2
      0007EB C5 F0            [ 8] 1739 	xch	a, b
      0007ED E0               [ 8] 1740 	movx	a,@dptr
      0007EE C5 F0            [ 8] 1741 	xch	a, b
      0007F0 95 F0            [ 8] 1742 	subb	a,b
      0007F2 50 1D            [12] 1743 	jnc  00174$
      0007F4                       1744 00473$:
                                   1745 ;	printf_large.c:408: while (reqWidth-->minWidth)
      0007F4 90s00r00r0F      [12] 1746 	mov	dptr,#_output_float_PARM_2
                                   1747 ;	genAssign: resultIsFar = FALSE
      0007F8 E0               [ 8] 1748 	movx	a,@dptr
      0007F9 FB               [ 4] 1749 	mov	r3,a
      0007FA                       1750 00170$:
      0007FA C3               [ 4] 1751 	clr	c
      0007FB EA               [ 4] 1752 	mov	a,r2
      0007FC 9B               [ 4] 1753 	subb	a,r3
      0007FD 50 12            [12] 1754 	jnc  00174$
      0007FF                       1755 00474$:
      0007FF 1B               [ 4] 1756 	dec	r3
                                   1757 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000800 C0 02            [ 8] 1758 	push	ar2
      000802 C0 03            [ 8] 1759 	push	ar3
      000804 75 82 20         [12] 1760 	mov	dpl,#0x20
      000807 12s00r00r00      [16] 1761 	lcall	__output_char
      00080B D0 03            [ 8] 1762 	pop	ar3
      00080D D0 02            [ 8] 1763 	pop	ar2
      00080F 80 E9            [12] 1764 	sjmp 00170$
      000811                       1765 00174$:
                                   1766 ;	printf_large.c:414: if (exp != -128)
      000811 90s00r00r9E      [12] 1767 	mov	dptr,#_output_float_exp_65536_126
      000815 E0               [ 8] 1768 	movx	a,@dptr
      000816 B4 80 04         [16] 1769 	cjne	a,#0x80,00475$
      000819 02s00r08rA6      [16] 1770 	ljmp	00179$
      00081D                       1771 00475$:
                                   1772 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      00081D 75 82 65         [12] 1773 	mov	dpl,#0x65
      000820 12s00r00r00      [16] 1774 	lcall	__output_char
                                   1775 ;	printf_large.c:417: if (exp<0)
      000824 90s00r00r9E      [12] 1776 	mov	dptr,#_output_float_exp_65536_126
      000828 E0               [ 8] 1777 	movx	a,@dptr
      000829 30 E7 1F         [12] 1778 	jnb  acc[7],00177$
      00082C                       1779 00476$:
                                   1780 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      00082C 75 82 2D         [12] 1781 	mov	dpl,#0x2d
      00082F 12s00r00r00      [16] 1782 	lcall	__output_char
                                   1783 ;	printf_large.c:420: exp = -exp;
      000833 90s00r00r9E      [12] 1784 	mov	dptr,#_output_float_exp_65536_126
      000837 75 86 01         [12] 1785 	mov	dps, #1
      00083A 90s00r00r9E      [12] 1786 	mov	dptr, #_output_float_exp_65536_126
      00083E 15 86            [ 8] 1787 	dec	dps
      000840 E0               [ 8] 1788 	movx	a,@dptr
      000841 D3               [ 4] 1789 	setb	c
      000842 F4               [ 4] 1790 	cpl	a
      000843 34 00            [ 8] 1791 	addc	a,#0x00
      000845 05 86            [ 8] 1792 	inc	dps
      000847 F0               [ 8] 1793 	movx	@dptr,a
      000848 75 86 00         [12] 1794 	mov	dps,#0
      00084B                       1795 00177$:
                                   1796 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      00084B 90s00r00r9E      [12] 1797 	mov	dptr,#_output_float_exp_65536_126
      00084F E0               [ 8] 1798 	movx	a,@dptr
      000850 FA               [ 4] 1799 	mov	r2,a
      000851 E0               [ 8] 1800 	movx	a,@dptr
      000852 33               [ 4] 1801 	rlc	a
      000853 95 E0            [ 8] 1802 	subb	a,acc
      000855 FB               [ 4] 1803 	mov	r3,a
                                   1804 ;	genAssign: resultIsFar = TRUE
      000856 90s00r00r00      [12] 1805 	mov	dptr,#__divsint_PARM_2
      00085A 74 0A            [ 8] 1806 	mov	a,#0x0a
      00085C F0               [ 8] 1807 	movx	@dptr,a
      00085D E4               [ 4] 1808 	clr	a
      00085E A3               [12] 1809 	inc	dptr
      00085F F0               [ 8] 1810 	movx	@dptr,a
      000860 C0 02            [ 8] 1811 	push	ar2
      000862 C0 03            [ 8] 1812 	push	ar3
      000864 8A 82            [ 8] 1813 	mov	dpl,r2
      000866 8B 83            [ 8] 1814 	mov	dph,r3
      000868 12s00r00r00      [16] 1815 	lcall	__divsint
      00086C AC 82            [ 8] 1816 	mov	r4,dpl
      00086E AD 83            [ 8] 1817 	mov	r5,dph
      000870 D0 03            [ 8] 1818 	pop	ar3
      000872 D0 02            [ 8] 1819 	pop	ar2
      000874 74 30            [ 8] 1820 	mov	a,#0x30
      000876 2C               [ 4] 1821 	add	a,r4
      000877 FC               [ 4] 1822 	mov	r4,a
      000878 C0 02            [ 8] 1823 	push	ar2
      00087A C0 03            [ 8] 1824 	push	ar3
      00087C 8C 82            [ 8] 1825 	mov	dpl,r4
      00087E 12s00r00r00      [16] 1826 	lcall	__output_char
      000882 D0 03            [ 8] 1827 	pop	ar3
      000884 D0 02            [ 8] 1828 	pop	ar2
                                   1829 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
                                   1830 ;	genAssign: resultIsFar = TRUE
      000886 90s00r00r00      [12] 1831 	mov	dptr,#__modsint_PARM_2
      00088A 74 0A            [ 8] 1832 	mov	a,#0x0a
      00088C F0               [ 8] 1833 	movx	@dptr,a
      00088D E4               [ 4] 1834 	clr	a
      00088E A3               [12] 1835 	inc	dptr
      00088F F0               [ 8] 1836 	movx	@dptr,a
      000890 8A 82            [ 8] 1837 	mov	dpl,r2
      000892 8B 83            [ 8] 1838 	mov	dph,r3
      000894 12s00r00r00      [16] 1839 	lcall	__modsint
      000898 AA 82            [ 8] 1840 	mov	r2,dpl
      00089A AB 83            [ 8] 1841 	mov	r3,dph
      00089C 74 30            [ 8] 1842 	mov	a,#0x30
      00089E 2A               [ 4] 1843 	add	a,r2
      00089F FA               [ 4] 1844 	mov	r2,a
      0008A0 8A 82            [ 8] 1845 	mov	dpl,r2
      0008A2 12s00r00r00      [16] 1846 	lcall	__output_char
      0008A6                       1847 00179$:
                                   1848 ;	printf_large.c:428: return;
      0008A6                       1849 00192$:
                                   1850 ;	printf_large.c:430: }
      0008A6 22               [16] 1851 	ret
                                   1852 ;------------------------------------------------------------
                                   1853 ;Allocation info for local variables in function '_print_format'
                                   1854 ;------------------------------------------------------------
                                   1855 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                   1856 ;format                    Allocated with name '__print_format_PARM_3'
                                   1857 ;ap                        Allocated with name '__print_format_PARM_4'
                                   1858 ;pfn                       Allocated to registers 
                                   1859 ;left_justify              Allocated with name '__print_format_left_justify_65536_163'
                                   1860 ;zero_padding              Allocated with name '__print_format_zero_padding_65536_163'
                                   1861 ;prefix_sign               Allocated with name '__print_format_prefix_sign_65536_163'
                                   1862 ;prefix_space              Allocated with name '__print_format_prefix_space_65536_163'
                                   1863 ;signed_argument           Allocated with name '__print_format_signed_argument_65536_163'
                                   1864 ;char_argument             Allocated with name '__print_format_char_argument_65536_163'
                                   1865 ;long_argument             Allocated with name '__print_format_long_argument_65536_163'
                                   1866 ;float_argument            Allocated with name '__print_format_float_argument_65536_163'
                                   1867 ;lsd                       Allocated to registers r2 
                                   1868 ;radix                     Allocated with name '__print_format_radix_65536_163'
                                   1869 ;width                     Allocated to registers 
                                   1870 ;decimals                  Allocated with name '__print_format_decimals_65536_163'
                                   1871 ;length                    Allocated to registers r6 r7 
                                   1872 ;c                         Allocated to registers r2 
                                   1873 ;memtype                   Allocated to registers r6 
                                   1874 ;store                     Allocated with name '__print_format_store_262144_185'
                                   1875 ;pstore                    Allocated with name '__print_format_pstore_262144_185'
                                   1876 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                   1877 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                   1878 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                   1879 ;------------------------------------------------------------
                                   1880 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   1881 ;	-----------------------------------------
                                   1882 ;	 function _print_format
                                   1883 ;	-----------------------------------------
      0008A7                       1884 __print_format:
      0008A7 75 86 01         [12] 1885 	mov     dps, #1
      0008AA 90s00r00r01      [12] 1886 	mov     dptr, #_output_char
      0008AE E5 82            [ 8] 1887 	mov	a,dpl
      0008B0 F0               [ 8] 1888 	movx	@dptr,a
      0008B1 A3               [12] 1889 	inc	dptr
      0008B2 E5 83            [ 8] 1890 	mov	a,dph
      0008B4 F0               [ 8] 1891 	movx	@dptr,a
      0008B5 A3               [12] 1892 	inc	dptr
      0008B6 E5 93            [ 8] 1893 	mov	a,dpx
      0008B8 F0               [ 8] 1894 	movx	@dptr,a
      0008B9 75 86 00         [12] 1895 	mov	dps,#0
                                   1896 ;	printf_large.c:462: p = pvoid;
      0008BC 90s00r00rAC      [12] 1897 	mov	dptr,#__print_format_PARM_2
                                   1898 ;	genAssign: resultIsFar = FALSE
      0008C0 E0               [ 8] 1899 	movx	a,@dptr
      0008C1 FA               [ 4] 1900 	mov	r2,a
      0008C2 A3               [12] 1901 	inc	dptr
      0008C3 E0               [ 8] 1902 	movx	a,@dptr
      0008C4 FB               [ 4] 1903 	mov	r3,a
      0008C5 A3               [12] 1904 	inc	dptr
      0008C6 E0               [ 8] 1905 	movx	a,@dptr
      0008C7 FC               [ 4] 1906 	mov	r4,a
      0008C8 A3               [12] 1907 	inc	dptr
      0008C9 E0               [ 8] 1908 	movx	a,@dptr
      0008CA FD               [ 4] 1909 	mov	r5,a
                                   1910 ;	genAssign: resultIsFar = TRUE
      0008CB 90s00r00r04      [12] 1911 	mov	dptr,#_p
      0008CF EA               [ 4] 1912 	mov	a,r2
      0008D0 F0               [ 8] 1913 	movx	@dptr,a
      0008D1 A3               [12] 1914 	inc	dptr
      0008D2 EB               [ 4] 1915 	mov	a,r3
      0008D3 F0               [ 8] 1916 	movx	@dptr,a
      0008D4 A3               [12] 1917 	inc	dptr
      0008D5 EC               [ 4] 1918 	mov	a,r4
      0008D6 F0               [ 8] 1919 	movx	@dptr,a
      0008D7 A3               [12] 1920 	inc	dptr
      0008D8 ED               [ 4] 1921 	mov	a,r5
      0008D9 F0               [ 8] 1922 	movx	@dptr,a
                                   1923 ;	printf_large.c:466: charsOutputted = 0;
                                   1924 ;	genAssign: resultIsFar = TRUE
      0008DA 90s00r00r0D      [12] 1925 	mov	dptr,#_charsOutputted
      0008DE E4               [ 4] 1926 	clr	a
      0008DF F0               [ 8] 1927 	movx	@dptr,a
      0008E0 A3               [12] 1928 	inc	dptr
      0008E1 F0               [ 8] 1929 	movx	@dptr,a
                                   1930 ;	printf_large.c:469: if (format==0)
      0008E2 90s00r00rB0      [12] 1931 	mov	dptr,#__print_format_PARM_3
      0008E6 E0               [ 8] 1932 	movx	a,@dptr
      0008E7 F5 F0            [ 8] 1933 	mov	b,a
      0008E9 A3               [12] 1934 	inc	dptr
      0008EA E0               [ 8] 1935 	movx	a,@dptr
      0008EB 42 F0            [ 8] 1936 	orl	b,a
      0008ED A3               [12] 1937 	inc	dptr
      0008EE E0               [ 8] 1938 	movx	a,@dptr
      0008EF 45 F0            [ 8] 1939 	orl	a,b
      0008F1 70 13            [12] 1940 	jnz  00253$
      0008F3                       1941 00653$:
                                   1942 ;	printf_large.c:471: format=NULL_STRING;
      0008F3 90s00r00rB0      [12] 1943 	mov	dptr,#__print_format_PARM_3
      0008F7 74r00            [ 8] 1944 	mov	a,#___str_0
      0008F9 F0               [ 8] 1945 	movx	@dptr,a
      0008FA A3               [12] 1946 	inc	dptr
      0008FB 74s00            [ 8] 1947 	mov	a,#(___str_0 >> 8)
      0008FD F0               [ 8] 1948 	movx	@dptr,a
      0008FE A3               [12] 1949 	inc	dptr
      0008FF 74s00            [ 8] 1950 	mov	a,#(___str_0 >> 16)
      000901 F0               [ 8] 1951 	movx	@dptr,a
      000902 A3               [12] 1952 	inc	dptr
      000903 74 80            [ 8] 1953 	mov	a,#0x80
      000905 F0               [ 8] 1954 	movx	@dptr,a
                                   1955 ;	printf_large.c:475: while( c=*format++ )
      000906                       1956 00253$:
      000906                       1957 00242$:
      000906 90s00r00rB0      [12] 1958 	mov	dptr,#__print_format_PARM_3
                                   1959 ;	genAssign: resultIsFar = FALSE
      00090A E0               [ 8] 1960 	movx	a,@dptr
      00090B FA               [ 4] 1961 	mov	r2,a
      00090C A3               [12] 1962 	inc	dptr
      00090D E0               [ 8] 1963 	movx	a,@dptr
      00090E FB               [ 4] 1964 	mov	r3,a
      00090F A3               [12] 1965 	inc	dptr
      000910 E0               [ 8] 1966 	movx	a,@dptr
      000911 FC               [ 4] 1967 	mov	r4,a
      000912 A3               [12] 1968 	inc	dptr
      000913 E0               [ 8] 1969 	movx	a,@dptr
      000914 FD               [ 4] 1970 	mov	r5,a
      000915 8A 82            [ 8] 1971 	mov	dpl,r2
      000917 8B 83            [ 8] 1972 	mov	dph,r3
      000919 8C 93            [ 8] 1973 	mov	dpx,r4
      00091B 8D F0            [ 8] 1974 	mov	b,r5
      00091D 12s00r00r00      [16] 1975 	lcall	__gptrget
      000921 FE               [ 4] 1976 	mov	r6,a
      000922 90s00r00rB0      [12] 1977 	mov	dptr,#__print_format_PARM_3
      000926 74 01            [ 8] 1978 	mov	a,#0x01
      000928 2A               [ 4] 1979 	add	a,r2
      000929 F0               [ 8] 1980 	movx	@dptr,a
      00092A E4               [ 4] 1981 	clr	a
      00092B 3B               [ 4] 1982 	addc	a,r3
      00092C A3               [12] 1983 	inc	dptr
      00092D F0               [ 8] 1984 	movx	@dptr,a
      00092E E4               [ 4] 1985 	clr	a
      00092F 3C               [ 4] 1986 	addc	a,r4
      000930 A3               [12] 1987 	inc	dptr
      000931 F0               [ 8] 1988 	movx	@dptr,a
      000932 A3               [12] 1989 	inc	dptr
      000933 ED               [ 4] 1990 	mov	a,r5
      000934 F0               [ 8] 1991 	movx	@dptr,a
                                   1992 ;	genAssign: resultIsFar = FALSE
      000935 8E 02            [ 8] 1993 	mov	ar2,r6
      000937 EE               [ 4] 1994 	mov	a,r6
      000938 70 04            [12] 1995 	jnz	00654$
      00093A 02s00r14rE8      [16] 1996 	ljmp	00244$
      00093E                       1997 00654$:
                                   1998 ;	printf_large.c:477: if ( c=='%' )
      00093E BA 25 02         [16] 1999 	cjne	r2,#0x25,00655$
      000941 80 04            [12] 2000 	sjmp	00656$
      000943                       2001 00655$:
      000943 02s00r14rDE      [16] 2002 	ljmp	00240$
      000947                       2003 00656$:
                                   2004 ;	printf_large.c:479: left_justify    = 0;
                                   2005 ;	genAssign: resultIsFar = TRUE
      000947 90s00r00rB8      [12] 2006 	mov	dptr,#__print_format_left_justify_65536_163
                                   2007 ;	printf_large.c:480: zero_padding    = 0;
                                   2008 ;	genAssign: resultIsFar = TRUE
                                   2009 ;	printf_large.c:481: prefix_sign     = 0;
                                   2010 ;	genAssign: resultIsFar = TRUE
                                   2011 ;	printf_large.c:482: prefix_space    = 0;
                                   2012 ;	genAssign: resultIsFar = TRUE
      00094B E4               [ 4] 2013 	clr   a
      00094C F0               [ 8] 2014 	movx  @dptr,a
      00094D 90s00r00rB9      [12] 2015 	mov   dptr,#__print_format_zero_padding_65536_163
      000951 F0               [ 8] 2016 	movx  @dptr,a
      000952 90s00r00rBA      [12] 2017 	mov   dptr,#__print_format_prefix_sign_65536_163
      000956 F0               [ 8] 2018 	movx  @dptr,a
      000957 90s00r00rBB      [12] 2019 	mov   dptr,#__print_format_prefix_space_65536_163
      00095B F0               [ 8] 2020 	movx  @dptr,a
                                   2021 ;	printf_large.c:483: signed_argument = 0;
                                   2022 ;	genAssign: resultIsFar = TRUE
      00095C 90s00r00rBC      [12] 2023 	mov	dptr,#__print_format_signed_argument_65536_163
                                   2024 ;	printf_large.c:484: char_argument   = 0;
                                   2025 ;	genAssign: resultIsFar = TRUE
                                   2026 ;	printf_large.c:485: long_argument   = 0;
                                   2027 ;	genAssign: resultIsFar = TRUE
                                   2028 ;	printf_large.c:486: float_argument  = 0;
                                   2029 ;	genAssign: resultIsFar = TRUE
      000960 E4               [ 4] 2030 	clr   a
      000961 F0               [ 8] 2031 	movx  @dptr,a
      000962 90s00r00rBD      [12] 2032 	mov   dptr,#__print_format_char_argument_65536_163
      000966 F0               [ 8] 2033 	movx  @dptr,a
      000967 90s00r00rBE      [12] 2034 	mov   dptr,#__print_format_long_argument_65536_163
      00096B F0               [ 8] 2035 	movx  @dptr,a
      00096C 90s00r00rBF      [12] 2036 	mov   dptr,#__print_format_float_argument_65536_163
      000970 F0               [ 8] 2037 	movx  @dptr,a
                                   2038 ;	printf_large.c:487: radix           = 0;
                                   2039 ;	genAssign: resultIsFar = TRUE
      000971 90s00r00rC0      [12] 2040 	mov	dptr,#__print_format_radix_65536_163
                                   2041 ;	printf_large.c:488: width           = 0;
                                   2042 ;	genAssign: resultIsFar = TRUE
      000975 E4               [ 4] 2043 	clr   a
      000976 F0               [ 8] 2044 	movx  @dptr,a
      000977 90s00r00rD1      [12] 2045 	mov   dptr,#__print_format_sloc2_1_0
      00097B F0               [ 8] 2046 	movx  @dptr,a
      00097C A3               [12] 2047 	inc	dptr
      00097D F0               [ 8] 2048 	movx	@dptr,a
                                   2049 ;	printf_large.c:489: decimals        = -1;
                                   2050 ;	genAssign: resultIsFar = TRUE
      00097E 90s00r00rC1      [12] 2051 	mov	dptr,#__print_format_decimals_65536_163
      000982 74 FF            [ 8] 2052 	mov  a,#0xff
      000984 F0               [ 8] 2053 	movx @dptr,a
      000985 A3               [12] 2054 	inc  dptr
      000986 F0               [ 8] 2055 	movx @dptr,a
                                   2056 ;	printf_large.c:491: get_conversion_spec:
      000987 90s00r00rB0      [12] 2057 	mov	dptr,#__print_format_PARM_3
                                   2058 ;	genAssign: resultIsFar = FALSE
      00098B E0               [ 8] 2059 	movx	a,@dptr
      00098C FA               [ 4] 2060 	mov	r2,a
      00098D A3               [12] 2061 	inc	dptr
      00098E E0               [ 8] 2062 	movx	a,@dptr
      00098F FE               [ 4] 2063 	mov	r6,a
      000990 A3               [12] 2064 	inc	dptr
      000991 E0               [ 8] 2065 	movx	a,@dptr
      000992 F8               [ 4] 2066 	mov	r0,a
      000993 A3               [12] 2067 	inc	dptr
      000994 E0               [ 8] 2068 	movx	a,@dptr
      000995 F9               [ 4] 2069 	mov	r1,a
      000996                       2070 00103$:
                                   2071 ;	printf_large.c:493: c = *format++;
      000996 8A 82            [ 8] 2072 	mov	dpl,r2
      000998 8E 83            [ 8] 2073 	mov	dph,r6
      00099A 88 93            [ 8] 2074 	mov	dpx,r0
      00099C 89 F0            [ 8] 2075 	mov	b,r1
      00099E 75 86 01         [12] 2076 	mov	dps, #1
      0009A1 90s00r00rD0      [12] 2077 	mov	dptr, #__print_format_sloc1_1_0
      0009A5 15 86            [ 8] 2078 	dec	dps
      0009A7 12s00r00r00      [16] 2079 	lcall	__gptrget
      0009AB 75 86 01         [12] 2080 	mov	dps,#1
      0009AE F0               [ 8] 2081 	movx	@dptr,a
      0009AF 75 86 00         [12] 2082 	mov	dps,#0
      0009B2 A3               [12] 2083 	inc	dptr
      0009B3 AA 82            [ 8] 2084 	mov	r2,dpl
      0009B5 AE 83            [ 8] 2085 	mov	r6,dph
      0009B7 A8 93            [ 8] 2086 	mov	r0,dpx
      0009B9 A9 F0            [ 8] 2087 	mov	r1,b
                                   2088 ;	genAssign: resultIsFar = TRUE
      0009BB 90s00r00rB0      [12] 2089 	mov	dptr,#__print_format_PARM_3
      0009BF EA               [ 4] 2090 	mov	a,r2
      0009C0 F0               [ 8] 2091 	movx	@dptr,a
      0009C1 A3               [12] 2092 	inc	dptr
      0009C2 EE               [ 4] 2093 	mov	a,r6
      0009C3 F0               [ 8] 2094 	movx	@dptr,a
      0009C4 A3               [12] 2095 	inc	dptr
      0009C5 E8               [ 4] 2096 	mov	a,r0
      0009C6 F0               [ 8] 2097 	movx	@dptr,a
      0009C7 A3               [12] 2098 	inc	dptr
      0009C8 E9               [ 4] 2099 	mov	a,r1
      0009C9 F0               [ 8] 2100 	movx	@dptr,a
                                   2101 ;	printf_large.c:495: if (c=='%')
      0009CA 90s00r00rD0      [12] 2102 	mov	dptr,#__print_format_sloc1_1_0
      0009CE E0               [ 8] 2103 	movx	a,@dptr
      0009CF B4 25 0F         [16] 2104 	cjne a,#0x25,00105$
      0009D2                       2105 00658$:
                                   2106 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      0009D2 90s00r00rD0      [12] 2107 	mov	dptr,#__print_format_sloc1_1_0
      0009D6 E0               [ 8] 2108 	movx	a,@dptr
      0009D7 F5 82            [ 8] 2109 	mov	dpl,a
      0009D9 12s00r00r00      [16] 2110 	lcall	__output_char
                                   2111 ;	printf_large.c:498: continue;
      0009DD 02s00r09r06      [16] 2112 	ljmp	00242$
      0009E1                       2113 00105$:
                                   2114 ;	printf_large.c:501: if (isdigit(c))
      0009E1 90s00r00rD0      [12] 2115 	mov	dptr,#__print_format_sloc1_1_0
      0009E5 E0               [ 8] 2116 	movx	a,@dptr
      0009E6 B4 30 00         [16] 2117 	cjne	a,#0x30,00659$
      0009E9                       2118 00659$:
      0009E9 50 04            [12] 2119 	jnc	00660$
      0009EB 02s00r0ArCE      [16] 2120 	ljmp	00112$
      0009EF                       2121 00660$:
      0009EF 90s00r00rD0      [12] 2122 	mov	dptr,#__print_format_sloc1_1_0
      0009F3 C3               [ 4] 2123 	clr	c
      0009F4 74 39            [ 8] 2124 	mov	a,#0x39
      0009F6 C5 F0            [ 8] 2125 	xch	a, b
      0009F8 E0               [ 8] 2126 	movx	a,@dptr
      0009F9 C5 F0            [ 8] 2127 	xch	a, b
      0009FB 95 F0            [ 8] 2128 	subb	a,b
      0009FD 50 04            [12] 2129 	jnc	00661$
      0009FF 02s00r0ArCE      [16] 2130 	ljmp	00112$
      000A03                       2131 00661$:
                                   2132 ;	printf_large.c:503: if (decimals==-1)
      000A03 90s00r00rC1      [12] 2133 	mov	dptr,#__print_format_decimals_65536_163
      000A07 E0               [ 8] 2134 	movx	a,@dptr
      000A08 B4 FF 07         [16] 2135 	cjne	a,#0xff,00662$
      000A0B A3               [12] 2136 	inc	dptr
      000A0C E0               [ 8] 2137 	movx	a,@dptr
      000A0D B4 FF 02         [16] 2138 	cjne	a,#0xff,00662$
      000A10 80 02            [12] 2139 	sjmp	00663$
      000A12                       2140 00662$:
      000A12 80 67            [12] 2141 	sjmp 00109$
      000A14                       2142 00663$:
                                   2143 ;	printf_large.c:505: width = 10*width + c - '0';
      000A14 90s00r00rD1      [12] 2144 	mov	dptr,#__print_format_sloc2_1_0
                                   2145 ;	genAssign: resultIsFar = TRUE
      000A18 75 86 21         [12] 2146 	mov	dps,#0x21
      000A1B 90s00r00r00      [12] 2147 	mov	dptr,#__mulint_PARM_2
      000A1F E0               [ 8] 2148 	movx	a,@dptr
      000A20 F0               [ 8] 2149 	movx	@dptr,a
      000A21 A3               [12] 2150 	inc	dptr
      000A22 A3               [12] 2151 	inc	dptr
      000A23 E0               [ 8] 2152 	movx	a,@dptr
      000A24 F0               [ 8] 2153 	movx	@dptr,a
      000A25 75 86 00         [12] 2154 	mov	dps,#0
      000A28 C0 02            [ 8] 2155 	push	ar2
      000A2A C0 06            [ 8] 2156 	push	ar6
      000A2C C0 00            [ 8] 2157 	push	ar0
      000A2E C0 01            [ 8] 2158 	push	ar1
      000A30 90 00 00 0A      [12] 2159 	mov  dptr,#0x000a
      000A34 12s00r00r00      [16] 2160 	lcall	__mulint
      000A38 AB 82            [ 8] 2161 	mov	r3,dpl
      000A3A AC 83            [ 8] 2162 	mov	r4,dph
      000A3C D0 01            [ 8] 2163 	pop	ar1
      000A3E D0 00            [ 8] 2164 	pop	ar0
      000A40 D0 06            [ 8] 2165 	pop	ar6
      000A42 D0 02            [ 8] 2166 	pop	ar2
      000A44 90s00r00rD0      [12] 2167 	mov	dptr,#__print_format_sloc1_1_0
      000A48 E0               [ 8] 2168 	movx	a,@dptr
      000A49 FD               [ 4] 2169 	mov	r5,a
      000A4A 7F 00            [ 8] 2170 	mov	r7,#0x00
      000A4C ED               [ 4] 2171 	mov	a,r5
      000A4D 2B               [ 4] 2172 	add	a,r3
      000A4E FB               [ 4] 2173 	mov	r3,a
      000A4F EF               [ 4] 2174 	mov	a,r7
      000A50 3C               [ 4] 2175 	addc	a,r4
      000A51 FC               [ 4] 2176 	mov	r4,a
      000A52 90s00r00rD1      [12] 2177 	mov	dptr,#__print_format_sloc2_1_0
      000A56 EB               [ 4] 2178 	mov	a,r3
      000A57 24 D0            [ 8] 2179 	add	a,#0xd0
      000A59 F0               [ 8] 2180 	movx	@dptr,a
      000A5A EC               [ 4] 2181 	mov	a,r4
      000A5B 34 FF            [ 8] 2182 	addc	a,#0xff
      000A5D A3               [12] 2183 	inc	dptr
      000A5E F0               [ 8] 2184 	movx	@dptr,a
                                   2185 ;	printf_large.c:506: if (width == 0)
      000A5F 90s00r00rD1      [12] 2186 	mov	dptr,#__print_format_sloc2_1_0
      000A63 E0               [ 8] 2187 	movx	a,@dptr
      000A64 F5 F0            [ 8] 2188 	mov	b,a
      000A66 A3               [12] 2189 	inc	dptr
      000A67 E0               [ 8] 2190 	movx	a,@dptr
      000A68 45 F0            [ 8] 2191 	orl	a,b
      000A6A 60 04            [12] 2192 	jz	00664$
      000A6C 02s00r09r96      [16] 2193 	ljmp	00103$
      000A70                       2194 00664$:
                                   2195 ;	printf_large.c:509: zero_padding = 1;
                                   2196 ;	genAssign: resultIsFar = TRUE
      000A70 90s00r00rB9      [12] 2197 	mov	dptr,#__print_format_zero_padding_65536_163
      000A74 74 01            [ 8] 2198 	mov	a,#0x01
      000A76 F0               [ 8] 2199 	movx	@dptr,a
      000A77 02s00r09r96      [16] 2200 	ljmp	00103$
      000A7B                       2201 00109$:
                                   2202 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000A7B 90s00r00rC1      [12] 2203 	mov	dptr,#__print_format_decimals_65536_163
                                   2204 ;	genAssign: resultIsFar = TRUE
      000A7F 75 86 21         [12] 2205 	mov	dps,#0x21
      000A82 90s00r00r00      [12] 2206 	mov	dptr,#__mulint_PARM_2
      000A86 E0               [ 8] 2207 	movx	a,@dptr
      000A87 F0               [ 8] 2208 	movx	@dptr,a
      000A88 A3               [12] 2209 	inc	dptr
      000A89 A3               [12] 2210 	inc	dptr
      000A8A E0               [ 8] 2211 	movx	a,@dptr
      000A8B F0               [ 8] 2212 	movx	@dptr,a
      000A8C 75 86 00         [12] 2213 	mov	dps,#0
      000A8F C0 02            [ 8] 2214 	push	ar2
      000A91 C0 06            [ 8] 2215 	push	ar6
      000A93 C0 00            [ 8] 2216 	push	ar0
      000A95 C0 01            [ 8] 2217 	push	ar1
      000A97 90 00 00 0A      [12] 2218 	mov  dptr,#0x000a
      000A9B 12s00r00r00      [16] 2219 	lcall	__mulint
      000A9F AC 82            [ 8] 2220 	mov	r4,dpl
      000AA1 AD 83            [ 8] 2221 	mov	r5,dph
      000AA3 D0 01            [ 8] 2222 	pop	ar1
      000AA5 D0 00            [ 8] 2223 	pop	ar0
      000AA7 D0 06            [ 8] 2224 	pop	ar6
      000AA9 D0 02            [ 8] 2225 	pop	ar2
      000AAB 90s00r00rD0      [12] 2226 	mov	dptr,#__print_format_sloc1_1_0
      000AAF E0               [ 8] 2227 	movx	a,@dptr
      000AB0 FF               [ 4] 2228 	mov	r7,a
      000AB1 7B 00            [ 8] 2229 	mov	r3,#0x00
      000AB3 EF               [ 4] 2230 	mov	a,r7
      000AB4 2C               [ 4] 2231 	add	a,r4
      000AB5 FC               [ 4] 2232 	mov	r4,a
      000AB6 EB               [ 4] 2233 	mov	a,r3
      000AB7 3D               [ 4] 2234 	addc	a,r5
      000AB8 FD               [ 4] 2235 	mov	r5,a
      000AB9 EC               [ 4] 2236 	mov	a,r4
      000ABA 24 D0            [ 8] 2237 	add	a,#0xd0
      000ABC FC               [ 4] 2238 	mov	r4,a
      000ABD ED               [ 4] 2239 	mov	a,r5
      000ABE 34 FF            [ 8] 2240 	addc	a,#0xff
      000AC0 FD               [ 4] 2241 	mov	r5,a
                                   2242 ;	genAssign: resultIsFar = TRUE
      000AC1 90s00r00rC1      [12] 2243 	mov	dptr,#__print_format_decimals_65536_163
      000AC5 EC               [ 4] 2244 	mov	a,r4
      000AC6 F0               [ 8] 2245 	movx	@dptr,a
      000AC7 A3               [12] 2246 	inc	dptr
      000AC8 ED               [ 4] 2247 	mov	a,r5
      000AC9 F0               [ 8] 2248 	movx	@dptr,a
                                   2249 ;	printf_large.c:516: goto get_conversion_spec;
      000ACA 02s00r09r96      [16] 2250 	ljmp	00103$
      000ACE                       2251 00112$:
                                   2252 ;	printf_large.c:519: if (c=='.')
      000ACE 90s00r00rD0      [12] 2253 	mov	dptr,#__print_format_sloc1_1_0
      000AD2 E0               [ 8] 2254 	movx	a,@dptr
      000AD3 B4 2E 1F         [16] 2255 	cjne a,#0x2e,00117$
      000AD6                       2256 00666$:
                                   2257 ;	printf_large.c:521: if (decimals==-1)
      000AD6 90s00r00rC1      [12] 2258 	mov	dptr,#__print_format_decimals_65536_163
      000ADA E0               [ 8] 2259 	movx	a,@dptr
      000ADB B4 FF 07         [16] 2260 	cjne	a,#0xff,00667$
      000ADE A3               [12] 2261 	inc	dptr
      000ADF E0               [ 8] 2262 	movx	a,@dptr
      000AE0 B4 FF 02         [16] 2263 	cjne	a,#0xff,00667$
      000AE3 80 04            [12] 2264 	sjmp	00668$
      000AE5                       2265 00667$:
      000AE5 02s00r09r96      [16] 2266 	ljmp	00103$
      000AE9                       2267 00668$:
                                   2268 ;	printf_large.c:522: decimals=0;
                                   2269 ;	genAssign: resultIsFar = TRUE
      000AE9 90s00r00rC1      [12] 2270 	mov	dptr,#__print_format_decimals_65536_163
      000AED E4               [ 4] 2271 	clr	a
      000AEE F0               [ 8] 2272 	movx	@dptr,a
      000AEF A3               [12] 2273 	inc	dptr
      000AF0 F0               [ 8] 2274 	movx	@dptr,a
                                   2275 ;	printf_large.c:525: goto get_conversion_spec;
      000AF1 02s00r09r96      [16] 2276 	ljmp	00103$
      000AF5                       2277 00117$:
                                   2278 ;	printf_large.c:528: if (islower(c))
      000AF5 90s00r00rD0      [12] 2279 	mov	dptr,#__print_format_sloc1_1_0
      000AF9 E0               [ 8] 2280 	movx	a,@dptr
      000AFA B4 61 00         [16] 2281 	cjne	a,#0x61,00669$
      000AFD                       2282 00669$:
      000AFD 40 21            [12] 2283 	jc   00119$
      000AFF                       2284 00670$:
      000AFF 90s00r00rD0      [12] 2285 	mov	dptr,#__print_format_sloc1_1_0
      000B03 C3               [ 4] 2286 	clr	c
      000B04 74 7A            [ 8] 2287 	mov	a,#0x7a
      000B06 C5 F0            [ 8] 2288 	xch	a, b
      000B08 E0               [ 8] 2289 	movx	a,@dptr
      000B09 C5 F0            [ 8] 2290 	xch	a, b
      000B0B 95 F0            [ 8] 2291 	subb	a,b
      000B0D 40 11            [12] 2292 	jc   00119$
      000B0F                       2293 00671$:
                                   2294 ;	printf_large.c:530: c = toupper(c);
      000B0F 90s00r00rD0      [12] 2295 	mov	dptr,#__print_format_sloc1_1_0
      000B13 E0               [ 8] 2296 	movx	a,@dptr
      000B14 54 DF            [ 8] 2297 	anl	a,#0xdf
      000B16 F0               [ 8] 2298 	movx	@dptr,a
                                   2299 ;	printf_large.c:531: lower_case = 1;
                                   2300 ;	genAssign: resultIsFar = TRUE
      000B17 90s00r00r00      [12] 2301 	mov	dptr,#_lower_case
      000B1B 74 01            [ 8] 2302 	mov	a,#0x01
      000B1D F0               [ 8] 2303 	movx	@dptr,a
      000B1E 80 06            [12] 2304 	sjmp 00120$
      000B20                       2305 00119$:
                                   2306 ;	printf_large.c:534: lower_case = 0;
                                   2307 ;	genAssign: resultIsFar = TRUE
      000B20 90s00r00r00      [12] 2308 	mov	dptr,#_lower_case
      000B24 E4               [ 4] 2309 	clr	a
      000B25 F0               [ 8] 2310 	movx	@dptr,a
      000B26                       2311 00120$:
                                   2312 ;	printf_large.c:536: switch( c )
      000B26 90s00r00rD0      [12] 2313 	mov	dptr,#__print_format_sloc1_1_0
      000B2A E0               [ 8] 2314 	movx	a,@dptr
      000B2B B4 20 04         [16] 2315 	cjne	a,#0x20,00672$
      000B2E 02s00r0Cr18      [16] 2316 	ljmp	00124$
      000B32                       2317 00672$:
      000B32 90s00r00rD0      [12] 2318 	mov	dptr,#__print_format_sloc1_1_0
      000B36 E0               [ 8] 2319 	movx	a,@dptr
      000B37 B4 2B 04         [16] 2320 	cjne	a,#0x2b,00673$
      000B3A 02s00r0Cr0D      [16] 2321 	ljmp	00123$
      000B3E                       2322 00673$:
      000B3E 90s00r00rD0      [12] 2323 	mov	dptr,#__print_format_sloc1_1_0
      000B42 E0               [ 8] 2324 	movx	a,@dptr
      000B43 B4 2D 04         [16] 2325 	cjne	a,#0x2d,00674$
      000B46 02s00r0Cr02      [16] 2326 	ljmp	00122$
      000B4A                       2327 00674$:
      000B4A 90s00r00rD0      [12] 2328 	mov	dptr,#__print_format_sloc1_1_0
      000B4E E0               [ 8] 2329 	movx	a,@dptr
      000B4F B4 42 04         [16] 2330 	cjne	a,#0x42,00675$
      000B52 02s00r0Cr23      [16] 2331 	ljmp	00125$
      000B56                       2332 00675$:
      000B56 90s00r00rD0      [12] 2333 	mov	dptr,#__print_format_sloc1_1_0
      000B5A E0               [ 8] 2334 	movx	a,@dptr
      000B5B B4 43 04         [16] 2335 	cjne	a,#0x43,00676$
      000B5E 02s00r0Cr39      [16] 2336 	ljmp	00131$
      000B62                       2337 00676$:
      000B62 90s00r00rD0      [12] 2338 	mov	dptr,#__print_format_sloc1_1_0
      000B66 E0               [ 8] 2339 	movx	a,@dptr
      000B67 B4 44 04         [16] 2340 	cjne	a,#0x44,00677$
      000B6A 02s00r0Fr65      [16] 2341 	ljmp	00168$
      000B6E                       2342 00677$:
      000B6E 90s00r00rD0      [12] 2343 	mov	dptr,#__print_format_sloc1_1_0
      000B72 E0               [ 8] 2344 	movx	a,@dptr
      000B73 B4 46 04         [16] 2345 	cjne	a,#0x46,00678$
      000B76 02s00r0Fr90      [16] 2346 	ljmp	00172$
      000B7A                       2347 00678$:
      000B7A 90s00r00rD0      [12] 2348 	mov	dptr,#__print_format_sloc1_1_0
      000B7E E0               [ 8] 2349 	movx	a,@dptr
      000B7F B4 48 04         [16] 2350 	cjne	a,#0x48,00679$
      000B82 02s00r09r96      [16] 2351 	ljmp	00103$
      000B86                       2352 00679$:
      000B86 90s00r00rD0      [12] 2353 	mov	dptr,#__print_format_sloc1_1_0
      000B8A E0               [ 8] 2354 	movx	a,@dptr
      000B8B B4 49 04         [16] 2355 	cjne	a,#0x49,00680$
      000B8E 02s00r0Fr65      [16] 2356 	ljmp	00168$
      000B92                       2357 00680$:
      000B92 90s00r00rD0      [12] 2358 	mov	dptr,#__print_format_sloc1_1_0
      000B96 E0               [ 8] 2359 	movx	a,@dptr
      000B97 B4 4A 04         [16] 2360 	cjne	a,#0x4a,00681$
      000B9A 02s00r09r96      [16] 2361 	ljmp	00103$
      000B9E                       2362 00681$:
      000B9E 90s00r00rD0      [12] 2363 	mov	dptr,#__print_format_sloc1_1_0
      000BA2 E0               [ 8] 2364 	movx	a,@dptr
      000BA3 B4 4C 04         [16] 2365 	cjne	a,#0x4c,00682$
      000BA6 02s00r0Cr2E      [16] 2366 	ljmp	00130$
      000BAA                       2367 00682$:
      000BAA 90s00r00rD0      [12] 2368 	mov	dptr,#__print_format_sloc1_1_0
      000BAE E0               [ 8] 2369 	movx	a,@dptr
      000BAF B4 4F 04         [16] 2370 	cjne	a,#0x4f,00683$
      000BB2 02s00r0Fr75      [16] 2371 	ljmp	00169$
      000BB6                       2372 00683$:
      000BB6 90s00r00rD0      [12] 2373 	mov	dptr,#__print_format_sloc1_1_0
      000BBA E0               [ 8] 2374 	movx	a,@dptr
      000BBB B4 50 04         [16] 2375 	cjne	a,#0x50,00684$
      000BBE 02s00r0ErB1      [16] 2376 	ljmp	00157$
      000BC2                       2377 00684$:
      000BC2 90s00r00rD0      [12] 2378 	mov	dptr,#__print_format_sloc1_1_0
      000BC6 E0               [ 8] 2379 	movx	a,@dptr
      000BC7 B4 53 04         [16] 2380 	cjne	a,#0x53,00685$
      000BCA 02s00r0CrBB      [16] 2381 	ljmp	00135$
      000BCE                       2382 00685$:
      000BCE 90s00r00rD0      [12] 2383 	mov	dptr,#__print_format_sloc1_1_0
      000BD2 E0               [ 8] 2384 	movx	a,@dptr
      000BD3 B4 54 04         [16] 2385 	cjne	a,#0x54,00686$
      000BD6 02s00r09r96      [16] 2386 	ljmp	00103$
      000BDA                       2387 00686$:
      000BDA 90s00r00rD0      [12] 2388 	mov	dptr,#__print_format_sloc1_1_0
      000BDE E0               [ 8] 2389 	movx	a,@dptr
      000BDF B4 55 04         [16] 2390 	cjne	a,#0x55,00687$
      000BE2 02s00r0Fr7E      [16] 2391 	ljmp	00170$
      000BE6                       2392 00687$:
      000BE6 90s00r00rD0      [12] 2393 	mov	dptr,#__print_format_sloc1_1_0
      000BEA E0               [ 8] 2394 	movx	a,@dptr
      000BEB B4 58 04         [16] 2395 	cjne	a,#0x58,00688$
      000BEE 02s00r0Fr87      [16] 2396 	ljmp	00171$
      000BF2                       2397 00688$:
      000BF2 90s00r00rD0      [12] 2398 	mov	dptr,#__print_format_sloc1_1_0
      000BF6 E0               [ 8] 2399 	movx	a,@dptr
      000BF7 B4 5A 04         [16] 2400 	cjne	a,#0x5a,00689$
      000BFA 02s00r09r96      [16] 2401 	ljmp	00103$
      000BFE                       2402 00689$:
      000BFE 02s00r0Fr99      [16] 2403 	ljmp	00173$
                                   2404 ;	printf_large.c:538: case '-':
      000C02                       2405 00122$:
                                   2406 ;	printf_large.c:539: left_justify = 1;
                                   2407 ;	genAssign: resultIsFar = TRUE
      000C02 90s00r00rB8      [12] 2408 	mov	dptr,#__print_format_left_justify_65536_163
      000C06 74 01            [ 8] 2409 	mov	a,#0x01
      000C08 F0               [ 8] 2410 	movx	@dptr,a
                                   2411 ;	printf_large.c:540: goto get_conversion_spec;
      000C09 02s00r09r96      [16] 2412 	ljmp	00103$
                                   2413 ;	printf_large.c:541: case '+':
      000C0D                       2414 00123$:
                                   2415 ;	printf_large.c:542: prefix_sign = 1;
                                   2416 ;	genAssign: resultIsFar = TRUE
      000C0D 90s00r00rBA      [12] 2417 	mov	dptr,#__print_format_prefix_sign_65536_163
      000C11 74 01            [ 8] 2418 	mov	a,#0x01
      000C13 F0               [ 8] 2419 	movx	@dptr,a
                                   2420 ;	printf_large.c:543: goto get_conversion_spec;
      000C14 02s00r09r96      [16] 2421 	ljmp	00103$
                                   2422 ;	printf_large.c:544: case ' ':
      000C18                       2423 00124$:
                                   2424 ;	printf_large.c:545: prefix_space = 1;
                                   2425 ;	genAssign: resultIsFar = TRUE
      000C18 90s00r00rBB      [12] 2426 	mov	dptr,#__print_format_prefix_space_65536_163
      000C1C 74 01            [ 8] 2427 	mov	a,#0x01
      000C1E F0               [ 8] 2428 	movx	@dptr,a
                                   2429 ;	printf_large.c:546: goto get_conversion_spec;
      000C1F 02s00r09r96      [16] 2430 	ljmp	00103$
                                   2431 ;	printf_large.c:547: case 'B': /* byte */
      000C23                       2432 00125$:
                                   2433 ;	printf_large.c:548: char_argument = 1;
                                   2434 ;	genAssign: resultIsFar = TRUE
      000C23 90s00r00rBD      [12] 2435 	mov	dptr,#__print_format_char_argument_65536_163
      000C27 74 01            [ 8] 2436 	mov	a,#0x01
      000C29 F0               [ 8] 2437 	movx	@dptr,a
                                   2438 ;	printf_large.c:549: goto get_conversion_spec;
      000C2A 02s00r09r96      [16] 2439 	ljmp	00103$
                                   2440 ;	printf_large.c:556: case 'L': /* long */
      000C2E                       2441 00130$:
                                   2442 ;	printf_large.c:557: long_argument = 1;
                                   2443 ;	genAssign: resultIsFar = TRUE
      000C2E 90s00r00rBE      [12] 2444 	mov	dptr,#__print_format_long_argument_65536_163
      000C32 74 01            [ 8] 2445 	mov	a,#0x01
      000C34 F0               [ 8] 2446 	movx	@dptr,a
                                   2447 ;	printf_large.c:558: goto get_conversion_spec;
      000C35 02s00r09r96      [16] 2448 	ljmp	00103$
                                   2449 ;	printf_large.c:560: case 'C':
      000C39                       2450 00131$:
                                   2451 ;	printf_large.c:561: if( char_argument )
      000C39 90s00r00rBD      [12] 2452 	mov	dptr,#__print_format_char_argument_65536_163
      000C3D E0               [ 8] 2453 	movx	a,@dptr
      000C3E 60 38            [12] 2454 	jz  00133$
      000C40                       2455 00690$:
                                   2456 ;	printf_large.c:562: c = va_arg(ap,char);
      000C40 90s00r00rB4      [12] 2457 	mov	dptr,#__print_format_PARM_4
                                   2458 ;	genAssign: resultIsFar = FALSE
      000C44 E0               [ 8] 2459 	movx	a,@dptr
      000C45 FC               [ 4] 2460 	mov	r4,a
      000C46 A3               [12] 2461 	inc	dptr
      000C47 E0               [ 8] 2462 	movx	a,@dptr
      000C48 FD               [ 4] 2463 	mov	r5,a
      000C49 A3               [12] 2464 	inc	dptr
      000C4A E0               [ 8] 2465 	movx	a,@dptr
      000C4B FF               [ 4] 2466 	mov	r7,a
      000C4C A3               [12] 2467 	inc	dptr
      000C4D E0               [ 8] 2468 	movx	a,@dptr
      000C4E FB               [ 4] 2469 	mov	r3,a
      000C4F 1C               [ 4] 2470 	dec	r4
      000C50 BC FF 05         [16] 2471 	cjne	r4,#0xff,00691$
      000C53 1D               [ 4] 2472 	dec	r5
      000C54 BD FF 01         [16] 2473 	cjne	r5,#0xff,00691$
      000C57 1F               [ 4] 2474 	dec	r7
      000C58                       2475 00691$:
                                   2476 ;	genAssign: resultIsFar = TRUE
      000C58 90s00r00rB4      [12] 2477 	mov	dptr,#__print_format_PARM_4
      000C5C EC               [ 4] 2478 	mov	a,r4
      000C5D F0               [ 8] 2479 	movx	@dptr,a
      000C5E A3               [12] 2480 	inc	dptr
      000C5F ED               [ 4] 2481 	mov	a,r5
      000C60 F0               [ 8] 2482 	movx	@dptr,a
      000C61 A3               [12] 2483 	inc	dptr
      000C62 EF               [ 4] 2484 	mov	a,r7
      000C63 F0               [ 8] 2485 	movx	@dptr,a
      000C64 A3               [12] 2486 	inc	dptr
      000C65 EB               [ 4] 2487 	mov	a,r3
      000C66 F0               [ 8] 2488 	movx	@dptr,a
      000C67 8C 82            [ 8] 2489 	mov	dpl,r4
      000C69 8D 83            [ 8] 2490 	mov	dph,r5
      000C6B 8F 93            [ 8] 2491 	mov	dpx,r7
      000C6D 8B F0            [ 8] 2492 	mov	b,r3
      000C6F 12s00r00r00      [16] 2493 	lcall	__gptrget
      000C73 FC               [ 4] 2494 	mov	r4,a
                                   2495 ;	genAssign: resultIsFar = FALSE
      000C74 8C 02            [ 8] 2496 	mov	ar2,r4
      000C76 80 39            [12] 2497 	sjmp 00134$
      000C78                       2498 00133$:
                                   2499 ;	printf_large.c:564: c = va_arg(ap,int);
      000C78 90s00r00rB4      [12] 2500 	mov	dptr,#__print_format_PARM_4
                                   2501 ;	genAssign: resultIsFar = FALSE
      000C7C E0               [ 8] 2502 	movx	a,@dptr
      000C7D FC               [ 4] 2503 	mov	r4,a
      000C7E A3               [12] 2504 	inc	dptr
      000C7F E0               [ 8] 2505 	movx	a,@dptr
      000C80 FD               [ 4] 2506 	mov	r5,a
      000C81 A3               [12] 2507 	inc	dptr
      000C82 E0               [ 8] 2508 	movx	a,@dptr
      000C83 FF               [ 4] 2509 	mov	r7,a
      000C84 A3               [12] 2510 	inc	dptr
      000C85 E0               [ 8] 2511 	movx	a,@dptr
      000C86 FB               [ 4] 2512 	mov	r3,a
      000C87 EC               [ 4] 2513 	mov	a,r4
      000C88 24 FE            [ 8] 2514 	add	a,#0xfe
      000C8A FC               [ 4] 2515 	mov	r4,a
      000C8B ED               [ 4] 2516 	mov	a,r5
      000C8C 34 FF            [ 8] 2517 	addc	a,#0xff
      000C8E FD               [ 4] 2518 	mov	r5,a
      000C8F EF               [ 4] 2519 	mov	a,r7
      000C90 34 FF            [ 8] 2520 	addc	a,#0xff
      000C92 FF               [ 4] 2521 	mov	r7,a
                                   2522 ;	genAssign: resultIsFar = TRUE
      000C93 90s00r00rB4      [12] 2523 	mov	dptr,#__print_format_PARM_4
      000C97 EC               [ 4] 2524 	mov	a,r4
      000C98 F0               [ 8] 2525 	movx	@dptr,a
      000C99 A3               [12] 2526 	inc	dptr
      000C9A ED               [ 4] 2527 	mov	a,r5
      000C9B F0               [ 8] 2528 	movx	@dptr,a
      000C9C A3               [12] 2529 	inc	dptr
      000C9D EF               [ 4] 2530 	mov	a,r7
      000C9E F0               [ 8] 2531 	movx	@dptr,a
      000C9F A3               [12] 2532 	inc	dptr
      000CA0 EB               [ 4] 2533 	mov	a,r3
      000CA1 F0               [ 8] 2534 	movx	@dptr,a
      000CA2 8C 82            [ 8] 2535 	mov	dpl,r4
      000CA4 8D 83            [ 8] 2536 	mov	dph,r5
      000CA6 8F 93            [ 8] 2537 	mov	dpx,r7
      000CA8 8B F0            [ 8] 2538 	mov	b,r3
      000CAA 12s00r00r00      [16] 2539 	lcall	__gptrget
      000CAE FC               [ 4] 2540 	mov	r4,a
                                   2541 ;	genAssign: resultIsFar = FALSE
      000CAF 8C 02            [ 8] 2542 	mov	ar2,r4
                                   2543 ;	printf_large.c:877: return charsOutputted;
                                   2544 ;	printf_large.c:564: c = va_arg(ap,int);
      000CB1                       2545 00134$:
                                   2546 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000CB1 8A 82            [ 8] 2547 	mov	dpl,r2
      000CB3 12s00r00r00      [16] 2548 	lcall	__output_char
                                   2549 ;	printf_large.c:566: break;
      000CB7 02s00r0FrAF      [16] 2550 	ljmp	00174$
                                   2551 ;	printf_large.c:568: case 'S':
      000CBB                       2552 00135$:
                                   2553 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000CBB 90s00r00rB4      [12] 2554 	mov	dptr,#__print_format_PARM_4
                                   2555 ;	genAssign: resultIsFar = FALSE
      000CBF E0               [ 8] 2556 	movx	a,@dptr
      000CC0 FC               [ 4] 2557 	mov	r4,a
      000CC1 A3               [12] 2558 	inc	dptr
      000CC2 E0               [ 8] 2559 	movx	a,@dptr
      000CC3 FD               [ 4] 2560 	mov	r5,a
      000CC4 A3               [12] 2561 	inc	dptr
      000CC5 E0               [ 8] 2562 	movx	a,@dptr
      000CC6 FF               [ 4] 2563 	mov	r7,a
      000CC7 A3               [12] 2564 	inc	dptr
      000CC8 E0               [ 8] 2565 	movx	a,@dptr
      000CC9 FB               [ 4] 2566 	mov	r3,a
      000CCA EC               [ 4] 2567 	mov	a,r4
      000CCB 24 FC            [ 8] 2568 	add	a,#0xfc
      000CCD FC               [ 4] 2569 	mov	r4,a
      000CCE ED               [ 4] 2570 	mov	a,r5
      000CCF 34 FF            [ 8] 2571 	addc	a,#0xff
      000CD1 FD               [ 4] 2572 	mov	r5,a
      000CD2 EF               [ 4] 2573 	mov	a,r7
      000CD3 34 FF            [ 8] 2574 	addc	a,#0xff
      000CD5 FF               [ 4] 2575 	mov	r7,a
                                   2576 ;	genAssign: resultIsFar = TRUE
      000CD6 90s00r00rB4      [12] 2577 	mov	dptr,#__print_format_PARM_4
      000CDA EC               [ 4] 2578 	mov	a,r4
      000CDB F0               [ 8] 2579 	movx	@dptr,a
      000CDC A3               [12] 2580 	inc	dptr
      000CDD ED               [ 4] 2581 	mov	a,r5
      000CDE F0               [ 8] 2582 	movx	@dptr,a
      000CDF A3               [12] 2583 	inc	dptr
      000CE0 EF               [ 4] 2584 	mov	a,r7
      000CE1 F0               [ 8] 2585 	movx	@dptr,a
      000CE2 A3               [12] 2586 	inc	dptr
      000CE3 EB               [ 4] 2587 	mov	a,r3
      000CE4 F0               [ 8] 2588 	movx	@dptr,a
      000CE5 8C 82            [ 8] 2589 	mov	dpl,r4
      000CE7 8D 83            [ 8] 2590 	mov	dph,r5
      000CE9 8F 93            [ 8] 2591 	mov	dpx,r7
      000CEB 8B F0            [ 8] 2592 	mov	b,r3
      000CED 12s00r00r00      [16] 2593 	lcall	__gptrgetWord
      000CF1 FC               [ 4] 2594 	mov	r4,a
      000CF2 AD 9C            [ 8] 2595 	mov	r5,acc1
      000CF4 A3               [12] 2596 	inc	dptr
      000CF5 12s00r00r00      [16] 2597 	lcall	__gptrgetWord
      000CF9 FF               [ 4] 2598 	mov	r7,a
      000CFA AB 9C            [ 8] 2599 	mov	r3,acc1
      000CFC 90s00r00r08      [12] 2600 	mov	dptr,#_value
      000D00 EC               [ 4] 2601 	mov	a,r4
      000D01 F0               [ 8] 2602 	movx	@dptr,a
      000D02 A3               [12] 2603 	inc	dptr
      000D03 ED               [ 4] 2604 	mov	a,r5
      000D04 F0               [ 8] 2605 	movx	@dptr,a
      000D05 A3               [12] 2606 	inc	dptr
      000D06 EF               [ 4] 2607 	mov	a,r7
      000D07 F0               [ 8] 2608 	movx	@dptr,a
      000D08 A3               [12] 2609 	inc	dptr
      000D09 EB               [ 4] 2610 	mov	a,r3
      000D0A F0               [ 8] 2611 	movx	@dptr,a
                                   2612 ;	printf_large.c:572: if (PTR==0)
      000D0B EC               [ 4] 2613 	mov	a,r4
      000D0C 4D               [ 4] 2614 	orl	a,r5
      000D0D 4F               [ 4] 2615 	orl	a,r7
      000D0E 70 19            [12] 2616 	jnz  00137$
      000D10                       2617 00692$:
                                   2618 ;	printf_large.c:574: PTR=NULL_STRING;
      000D10 90s00r00r08      [12] 2619 	mov	dptr,#_value
      000D14 74r00            [ 8] 2620 	mov	a,#___str_0
      000D16 F0               [ 8] 2621 	movx	@dptr,a
      000D17 A3               [12] 2622 	inc	dptr
      000D18 74s00            [ 8] 2623 	mov	a,#(___str_0 >> 8)
      000D1A F0               [ 8] 2624 	movx	@dptr,a
      000D1B A3               [12] 2625 	inc	dptr
      000D1C 74s00            [ 8] 2626 	mov	a,#(___str_0 >> 16)
      000D1E F0               [ 8] 2627 	movx	@dptr,a
      000D1F A3               [12] 2628 	inc	dptr
      000D20 74 80            [ 8] 2629 	mov	a,#0x80
      000D22 F0               [ 8] 2630 	movx	@dptr,a
                                   2631 ;	printf_large.c:575: length=NULL_STRING_LENGTH;
                                   2632 ;	genAssign: resultIsFar = FALSE
      000D23 7C 06            [ 8] 2633 	mov	r4,#0x06
      000D25 7D 00            [ 8] 2634 	mov	r5,#0x00
      000D27 80 23            [12] 2635 	sjmp 00138$
      000D29                       2636 00137$:
                                   2637 ;	printf_large.c:579: length = strlen(PTR);
      000D29 90s00r00r08      [12] 2638 	mov	dptr,#_value
      000D2D E0               [ 8] 2639 	movx	a,@dptr
      000D2E A3               [12] 2640 	inc	dptr
      000D2F FF               [ 4] 2641 	mov	r7,a
      000D30 E0               [ 8] 2642 	movx	a,@dptr
      000D31 A3               [12] 2643 	inc	dptr
      000D32 FB               [ 4] 2644 	mov	r3,a
      000D33 E0               [ 8] 2645 	movx	a,@dptr
      000D34 A3               [12] 2646 	inc	dptr
      000D35 F9               [ 4] 2647 	mov	r1,a
      000D36 E0               [ 8] 2648 	movx	a,@dptr
      000D37 FE               [ 4] 2649 	mov	r6,a
      000D38 8F 82            [ 8] 2650 	mov	dpl,r7
      000D3A 8B 83            [ 8] 2651 	mov	dph,r3
      000D3C 89 93            [ 8] 2652 	mov	dpx,r1
      000D3E 8E F0            [ 8] 2653 	mov	b,r6
      000D40 12s00r00r00      [16] 2654 	lcall	_strlen
      000D44 AB 82            [ 8] 2655 	mov	r3,dpl
      000D46 AE 83            [ 8] 2656 	mov	r6,dph
                                   2657 ;	genAssign: resultIsFar = FALSE
      000D48 8B 04            [ 8] 2658 	mov	ar4,r3
      000D4A 8E 05            [ 8] 2659 	mov	ar5,r6
                                   2660 ;	printf_large.c:877: return charsOutputted;
                                   2661 ;	printf_large.c:579: length = strlen(PTR);
      000D4C                       2662 00138$:
                                   2663 ;	printf_large.c:584: if ( decimals == -1 )
      000D4C 90s00r00rC1      [12] 2664 	mov	dptr,#__print_format_decimals_65536_163
      000D50 E0               [ 8] 2665 	movx	a,@dptr
      000D51 B4 FF 07         [16] 2666 	cjne	a,#0xff,00693$
      000D54 A3               [12] 2667 	inc	dptr
      000D55 E0               [ 8] 2668 	movx	a,@dptr
      000D56 B4 FF 02         [16] 2669 	cjne	a,#0xff,00693$
      000D59 80 02            [12] 2670 	sjmp	00694$
      000D5B                       2671 00693$:
      000D5B 80 09            [12] 2672 	sjmp 00140$
      000D5D                       2673 00694$:
                                   2674 ;	printf_large.c:586: decimals = length;
                                   2675 ;	genAssign: resultIsFar = TRUE
      000D5D 90s00r00rC1      [12] 2676 	mov	dptr,#__print_format_decimals_65536_163
      000D61 EC               [ 4] 2677 	mov	a,r4
      000D62 F0               [ 8] 2678 	movx	@dptr,a
      000D63 A3               [12] 2679 	inc	dptr
      000D64 ED               [ 4] 2680 	mov	a,r5
      000D65 F0               [ 8] 2681 	movx	@dptr,a
      000D66                       2682 00140$:
                                   2683 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000D66 90s00r00rB8      [12] 2684 	mov	dptr,#__print_format_left_justify_65536_163
      000D6A E0               [ 8] 2685 	movx	a,@dptr
      000D6B 70 53            [12] 2686 	jnz  00290$
      000D6D                       2687 00695$:
      000D6D 90s00r00rD1      [12] 2688 	mov	dptr,#__print_format_sloc2_1_0
      000D71 C3               [ 4] 2689 	clr	c
      000D72 EC               [ 4] 2690 	mov	a,r4
      000D73 C5 F0            [ 8] 2691 	xch	a, b
      000D75 E0               [ 8] 2692 	movx	a,@dptr
      000D76 C5 F0            [ 8] 2693 	xch	a, b
      000D78 95 F0            [ 8] 2694 	subb	a,b
      000D7A ED               [ 4] 2695 	mov	a,r5
      000D7B C5 F0            [ 8] 2696 	xch	a, b
      000D7D A3               [12] 2697 	inc	dptr
      000D7E E0               [ 8] 2698 	movx	a,@dptr
      000D7F C5 F0            [ 8] 2699 	xch	a, b
      000D81 95 F0            [ 8] 2700 	subb	a,b
      000D83 50 3B            [12] 2701 	jnc  00290$
      000D85                       2702 00696$:
                                   2703 ;	printf_large.c:590: width -= length;
      000D85 90s00r00rD1      [12] 2704 	mov	dptr,#__print_format_sloc2_1_0
      000D89 C3               [ 4] 2705 	clr	c
      000D8A E0               [ 8] 2706 	movx	a,@dptr
      000D8B 9C               [ 4] 2707 	subb	a,r4
      000D8C FE               [ 4] 2708 	mov	r6,a
      000D8D A3               [12] 2709 	inc	dptr
      000D8E E0               [ 8] 2710 	movx	a,@dptr
      000D8F 9D               [ 4] 2711 	subb	a,r5
      000D90 FF               [ 4] 2712 	mov	r7,a
                                   2713 ;	printf_large.c:591: while( width-- != 0 )
      000D91                       2714 00141$:
                                   2715 ;	genAssign: resultIsFar = FALSE
      000D91 8E 00            [ 8] 2716 	mov	ar0,r6
      000D93 8F 01            [ 8] 2717 	mov	ar1,r7
      000D95 1E               [ 4] 2718 	dec	r6
      000D96 BE FF 01         [16] 2719 	cjne	r6,#0xff,00697$
      000D99 1F               [ 4] 2720 	dec	r7
      000D9A                       2721 00697$:
      000D9A E8               [ 4] 2722 	mov	a,r0
      000D9B 49               [ 4] 2723 	orl	a,r1
      000D9C 60 19            [12] 2724 	jz  00326$
      000D9E                       2725 00698$:
                                   2726 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000D9E C0 04            [ 8] 2727 	push	ar4
      000DA0 C0 05            [ 8] 2728 	push	ar5
      000DA2 C0 06            [ 8] 2729 	push	ar6
      000DA4 C0 07            [ 8] 2730 	push	ar7
      000DA6 75 82 20         [12] 2731 	mov	dpl,#0x20
      000DA9 12s00r00r00      [16] 2732 	lcall	__output_char
      000DAD D0 07            [ 8] 2733 	pop	ar7
      000DAF D0 06            [ 8] 2734 	pop	ar6
      000DB1 D0 05            [ 8] 2735 	pop	ar5
      000DB3 D0 04            [ 8] 2736 	pop	ar4
                                   2737 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000DB5 80 DA            [12] 2738 	sjmp 00141$
      000DB7                       2739 00326$:
                                   2740 ;	genAssign: resultIsFar = TRUE
      000DB7 90s00r00rD1      [12] 2741 	mov	dptr,#__print_format_sloc2_1_0
      000DBB EE               [ 4] 2742 	mov	a,r6
      000DBC F0               [ 8] 2743 	movx	@dptr,a
      000DBD A3               [12] 2744 	inc	dptr
      000DBE EF               [ 4] 2745 	mov	a,r7
      000DBF F0               [ 8] 2746 	movx	@dptr,a
      000DC0                       2747 00290$:
      000DC0 90s00r00rC1      [12] 2748 	mov	dptr,#__print_format_decimals_65536_163
                                   2749 ;	genAssign: resultIsFar = FALSE
      000DC4 E0               [ 8] 2750 	movx	a,@dptr
      000DC5 FE               [ 4] 2751 	mov	r6,a
      000DC6 A3               [12] 2752 	inc	dptr
      000DC7 E0               [ 8] 2753 	movx	a,@dptr
      000DC8 FF               [ 4] 2754 	mov	r7,a
      000DC9                       2755 00148$:
      000DC9 C0 04            [ 8] 2756 	push	ar4
      000DCB C0 05            [ 8] 2757 	push	ar5
      000DCD 90s00r00r08      [12] 2758 	mov	dptr,#_value
      000DD1 E0               [ 8] 2759 	movx	a,@dptr
      000DD2 A3               [12] 2760 	inc	dptr
      000DD3 F8               [ 4] 2761 	mov	r0,a
      000DD4 E0               [ 8] 2762 	movx	a,@dptr
      000DD5 A3               [12] 2763 	inc	dptr
      000DD6 F9               [ 4] 2764 	mov	r1,a
      000DD7 E0               [ 8] 2765 	movx	a,@dptr
      000DD8 A3               [12] 2766 	inc	dptr
      000DD9 FC               [ 4] 2767 	mov	r4,a
      000DDA E0               [ 8] 2768 	movx	a,@dptr
      000DDB FD               [ 4] 2769 	mov	r5,a
      000DDC 88 82            [ 8] 2770 	mov	dpl,r0
      000DDE 89 83            [ 8] 2771 	mov	dph,r1
      000DE0 8C 93            [ 8] 2772 	mov	dpx,r4
      000DE2 8D F0            [ 8] 2773 	mov	b,r5
      000DE4 12s00r00r00      [16] 2774 	lcall	__gptrget
      000DE8 F8               [ 4] 2775 	mov	r0,a
                                   2776 ;	genAssign: resultIsFar = FALSE
      000DE9 88 02            [ 8] 2777 	mov	ar2,r0
      000DEB D0 05            [ 8] 2778 	pop	ar5
      000DED D0 04            [ 8] 2779 	pop	ar4
      000DEF E8               [ 4] 2780 	mov	a,r0
      000DF0 60 61            [12] 2781 	jz  00327$
      000DF2                       2782 00699$:
                                   2783 ;	genAssign: resultIsFar = FALSE
      000DF2 8E 00            [ 8] 2784 	mov	ar0,r6
      000DF4 8F 01            [ 8] 2785 	mov	ar1,r7
      000DF6 1E               [ 4] 2786 	dec	r6
      000DF7 BE FF 01         [16] 2787 	cjne	r6,#0xff,00700$
      000DFA 1F               [ 4] 2788 	dec	r7
      000DFB                       2789 00700$:
      000DFB C3               [ 4] 2790 	clr	c
      000DFC E4               [ 4] 2791 	clr	a
      000DFD 98               [ 4] 2792 	subb	a,r0
      000DFE E4               [ 4] 2793 	clr	a
      000DFF 64 80            [ 8] 2794 	xrl	a,#0x80
      000E01 89 F0            [ 8] 2795 	mov	b,r1
      000E03 63 F0 80         [12] 2796 	xrl	b,#0x80
      000E06 95 F0            [ 8] 2797 	subb	a,b
      000E08 50 49            [12] 2798 	jnc  00327$
      000E0A                       2799 00701$:
                                   2800 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000E0A C0 04            [ 8] 2801 	push	ar4
      000E0C C0 05            [ 8] 2802 	push	ar5
      000E0E C0 04            [ 8] 2803 	push	ar4
      000E10 C0 05            [ 8] 2804 	push	ar5
      000E12 C0 06            [ 8] 2805 	push	ar6
      000E14 C0 07            [ 8] 2806 	push	ar7
      000E16 8A 82            [ 8] 2807 	mov	dpl,r2
      000E18 12s00r00r00      [16] 2808 	lcall	__output_char
      000E1C D0 07            [ 8] 2809 	pop	ar7
      000E1E D0 06            [ 8] 2810 	pop	ar6
      000E20 D0 05            [ 8] 2811 	pop	ar5
      000E22 D0 04            [ 8] 2812 	pop	ar4
                                   2813 ;	printf_large.c:600: PTR++;
      000E24 90s00r00r08      [12] 2814 	mov	dptr,#_value
      000E28 E0               [ 8] 2815 	movx	a,@dptr
      000E29 A3               [12] 2816 	inc	dptr
      000E2A F8               [ 4] 2817 	mov	r0,a
      000E2B E0               [ 8] 2818 	movx	a,@dptr
      000E2C A3               [12] 2819 	inc	dptr
      000E2D F9               [ 4] 2820 	mov	r1,a
      000E2E E0               [ 8] 2821 	movx	a,@dptr
      000E2F A3               [12] 2822 	inc	dptr
      000E30 FC               [ 4] 2823 	mov	r4,a
      000E31 E0               [ 8] 2824 	movx	a,@dptr
      000E32 FD               [ 4] 2825 	mov	r5,a
      000E33 08               [ 4] 2826 	inc	r0
      000E34 B8 00 05         [16] 2827 	cjne	r0,#0x00,00702$
      000E37 09               [ 4] 2828 	inc	r1
      000E38 B9 00 01         [16] 2829 	cjne	r1,#0x00,00702$
      000E3B 0C               [ 4] 2830 	inc	r4
      000E3C                       2831 00702$:
      000E3C 90s00r00r08      [12] 2832 	mov	dptr,#_value
      000E40 E8               [ 4] 2833 	mov	a,r0
      000E41 F0               [ 8] 2834 	movx	@dptr,a
      000E42 A3               [12] 2835 	inc	dptr
      000E43 E9               [ 4] 2836 	mov	a,r1
      000E44 F0               [ 8] 2837 	movx	@dptr,a
      000E45 A3               [12] 2838 	inc	dptr
      000E46 EC               [ 4] 2839 	mov	a,r4
      000E47 F0               [ 8] 2840 	movx	@dptr,a
      000E48 A3               [12] 2841 	inc	dptr
      000E49 ED               [ 4] 2842 	mov	a,r5
      000E4A F0               [ 8] 2843 	movx	@dptr,a
      000E4B D0 05            [ 8] 2844 	pop	ar5
      000E4D D0 04            [ 8] 2845 	pop	ar4
      000E4F 02s00r0DrC9      [16] 2846 	ljmp	00148$
      000E53                       2847 00327$:
                                   2848 ;	genAssign: resultIsFar = TRUE
      000E53 90s00r00rC1      [12] 2849 	mov	dptr,#__print_format_decimals_65536_163
      000E57 EE               [ 4] 2850 	mov	a,r6
      000E58 F0               [ 8] 2851 	movx	@dptr,a
      000E59 A3               [12] 2852 	inc	dptr
      000E5A EF               [ 4] 2853 	mov	a,r7
      000E5B F0               [ 8] 2854 	movx	@dptr,a
                                   2855 ;	printf_large.c:603: if ( left_justify && (length < width))
      000E5C 90s00r00rB8      [12] 2856 	mov	dptr,#__print_format_left_justify_65536_163
      000E60 E0               [ 8] 2857 	movx	a,@dptr
      000E61 70 04            [12] 2858 	jnz	00703$
      000E63 02s00r0FrAF      [16] 2859 	ljmp	00174$
      000E67                       2860 00703$:
      000E67 90s00r00rD1      [12] 2861 	mov	dptr,#__print_format_sloc2_1_0
      000E6B C3               [ 4] 2862 	clr	c
      000E6C EC               [ 4] 2863 	mov	a,r4
      000E6D C5 F0            [ 8] 2864 	xch	a, b
      000E6F E0               [ 8] 2865 	movx	a,@dptr
      000E70 C5 F0            [ 8] 2866 	xch	a, b
      000E72 95 F0            [ 8] 2867 	subb	a,b
      000E74 ED               [ 4] 2868 	mov	a,r5
      000E75 C5 F0            [ 8] 2869 	xch	a, b
      000E77 A3               [12] 2870 	inc	dptr
      000E78 E0               [ 8] 2871 	movx	a,@dptr
      000E79 C5 F0            [ 8] 2872 	xch	a, b
      000E7B 95 F0            [ 8] 2873 	subb	a,b
      000E7D 40 04            [12] 2874 	jc	00704$
      000E7F 02s00r0FrAF      [16] 2875 	ljmp	00174$
      000E83                       2876 00704$:
                                   2877 ;	printf_large.c:605: width -= length;
      000E83 90s00r00rD1      [12] 2878 	mov	dptr,#__print_format_sloc2_1_0
      000E87 C3               [ 4] 2879 	clr	c
      000E88 E0               [ 8] 2880 	movx	a,@dptr
      000E89 9C               [ 4] 2881 	subb	a,r4
      000E8A FC               [ 4] 2882 	mov	r4,a
      000E8B A3               [12] 2883 	inc	dptr
      000E8C E0               [ 8] 2884 	movx	a,@dptr
      000E8D 9D               [ 4] 2885 	subb	a,r5
      000E8E FD               [ 4] 2886 	mov	r5,a
                                   2887 ;	printf_large.c:606: while( width-- != 0 )
      000E8F                       2888 00151$:
                                   2889 ;	genAssign: resultIsFar = FALSE
      000E8F 8C 06            [ 8] 2890 	mov	ar6,r4
      000E91 8D 07            [ 8] 2891 	mov	ar7,r5
      000E93 1C               [ 4] 2892 	dec	r4
      000E94 BC FF 01         [16] 2893 	cjne	r4,#0xff,00705$
      000E97 1D               [ 4] 2894 	dec	r5
      000E98                       2895 00705$:
      000E98 EE               [ 4] 2896 	mov	a,r6
      000E99 4F               [ 4] 2897 	orl	a,r7
      000E9A 70 04            [12] 2898 	jnz	00706$
      000E9C 02s00r0FrA6      [16] 2899 	ljmp	00328$
      000EA0                       2900 00706$:
                                   2901 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000EA0 C0 04            [ 8] 2902 	push	ar4
      000EA2 C0 05            [ 8] 2903 	push	ar5
      000EA4 75 82 20         [12] 2904 	mov	dpl,#0x20
      000EA7 12s00r00r00      [16] 2905 	lcall	__output_char
      000EAB D0 05            [ 8] 2906 	pop	ar5
      000EAD D0 04            [ 8] 2907 	pop	ar4
                                   2908 ;	printf_large.c:613: case 'P':
      000EAF 80 DE            [12] 2909 	sjmp 00151$
      000EB1                       2910 00157$:
                                   2911 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000EB1 90s00r00rB4      [12] 2912 	mov	dptr,#__print_format_PARM_4
                                   2913 ;	genAssign: resultIsFar = FALSE
      000EB5 E0               [ 8] 2914 	movx	a,@dptr
      000EB6 FE               [ 4] 2915 	mov	r6,a
      000EB7 A3               [12] 2916 	inc	dptr
      000EB8 E0               [ 8] 2917 	movx	a,@dptr
      000EB9 FF               [ 4] 2918 	mov	r7,a
      000EBA A3               [12] 2919 	inc	dptr
      000EBB E0               [ 8] 2920 	movx	a,@dptr
      000EBC F8               [ 4] 2921 	mov	r0,a
      000EBD A3               [12] 2922 	inc	dptr
      000EBE E0               [ 8] 2923 	movx	a,@dptr
      000EBF F9               [ 4] 2924 	mov	r1,a
      000EC0 EE               [ 4] 2925 	mov	a,r6
      000EC1 24 FC            [ 8] 2926 	add	a,#0xfc
      000EC3 FE               [ 4] 2927 	mov	r6,a
      000EC4 EF               [ 4] 2928 	mov	a,r7
      000EC5 34 FF            [ 8] 2929 	addc	a,#0xff
      000EC7 FF               [ 4] 2930 	mov	r7,a
      000EC8 E8               [ 4] 2931 	mov	a,r0
      000EC9 34 FF            [ 8] 2932 	addc	a,#0xff
      000ECB F8               [ 4] 2933 	mov	r0,a
                                   2934 ;	genAssign: resultIsFar = TRUE
      000ECC 90s00r00rB4      [12] 2935 	mov	dptr,#__print_format_PARM_4
      000ED0 EE               [ 4] 2936 	mov	a,r6
      000ED1 F0               [ 8] 2937 	movx	@dptr,a
      000ED2 A3               [12] 2938 	inc	dptr
      000ED3 EF               [ 4] 2939 	mov	a,r7
      000ED4 F0               [ 8] 2940 	movx	@dptr,a
      000ED5 A3               [12] 2941 	inc	dptr
      000ED6 E8               [ 4] 2942 	mov	a,r0
      000ED7 F0               [ 8] 2943 	movx	@dptr,a
      000ED8 A3               [12] 2944 	inc	dptr
      000ED9 E9               [ 4] 2945 	mov	a,r1
      000EDA F0               [ 8] 2946 	movx	@dptr,a
      000EDB 8E 82            [ 8] 2947 	mov	dpl,r6
      000EDD 8F 83            [ 8] 2948 	mov	dph,r7
      000EDF 88 93            [ 8] 2949 	mov	dpx,r0
      000EE1 89 F0            [ 8] 2950 	mov	b,r1
      000EE3 12s00r00r00      [16] 2951 	lcall	__gptrgetWord
      000EE7 FE               [ 4] 2952 	mov	r6,a
      000EE8 AF 9C            [ 8] 2953 	mov	r7,acc1
      000EEA A3               [12] 2954 	inc	dptr
      000EEB 12s00r00r00      [16] 2955 	lcall	__gptrgetWord
      000EEF F8               [ 4] 2956 	mov	r0,a
      000EF0 A9 9C            [ 8] 2957 	mov	r1,acc1
      000EF2 90s00r00r08      [12] 2958 	mov	dptr,#_value
      000EF6 EE               [ 4] 2959 	mov	a,r6
      000EF7 F0               [ 8] 2960 	movx	@dptr,a
      000EF8 A3               [12] 2961 	inc	dptr
      000EF9 EF               [ 4] 2962 	mov	a,r7
      000EFA F0               [ 8] 2963 	movx	@dptr,a
      000EFB A3               [12] 2964 	inc	dptr
      000EFC E8               [ 4] 2965 	mov	a,r0
      000EFD F0               [ 8] 2966 	movx	@dptr,a
      000EFE A3               [12] 2967 	inc	dptr
      000EFF E9               [ 4] 2968 	mov	a,r1
      000F00 F0               [ 8] 2969 	movx	@dptr,a
                                   2970 ;	printf_large.c:618: unsigned char memtype = value.byte[3];
      000F01 90s00r00r0B      [12] 2971 	mov	dptr,#(_value + 0x000003)
      000F05 E0               [ 8] 2972 	movx	a,@dptr
      000F06 FE               [ 4] 2973 	mov	r6,a
                                   2974 ;	genAssign: resultIsFar = TRUE
                                   2975 ;	printf_large.c:619: if (memtype >= 0x80)
      000F07 BE 80 00         [16] 2976 	cjne	r6,#0x80,00707$
      000F0A                       2977 00707$:
      000F0A 40 04            [12] 2978 	jc   00165$
      000F0C                       2979 00708$:
                                   2980 ;	printf_large.c:620: c = 'C';
                                   2981 ;	genAssign: resultIsFar = FALSE
      000F0C 7F 43            [ 8] 2982 	mov	r7,#0x43
      000F0E 80 14            [12] 2983 	sjmp 00166$
      000F10                       2984 00165$:
                                   2985 ;	printf_large.c:621: else if (memtype >= 0x60)
      000F10 BE 60 00         [16] 2986 	cjne	r6,#0x60,00709$
      000F13                       2987 00709$:
      000F13 40 04            [12] 2988 	jc   00162$
      000F15                       2989 00710$:
                                   2990 ;	printf_large.c:622: c = 'P';
                                   2991 ;	genAssign: resultIsFar = FALSE
      000F15 7F 50            [ 8] 2992 	mov	r7,#0x50
      000F17 80 0B            [12] 2993 	sjmp 00166$
      000F19                       2994 00162$:
                                   2995 ;	printf_large.c:623: else if (memtype >= 0x40)
      000F19 BE 40 00         [16] 2996 	cjne	r6,#0x40,00711$
      000F1C                       2997 00711$:
      000F1C 40 04            [12] 2998 	jc   00159$
      000F1E                       2999 00712$:
                                   3000 ;	printf_large.c:624: c = 'I';
                                   3001 ;	genAssign: resultIsFar = FALSE
      000F1E 7F 49            [ 8] 3002 	mov	r7,#0x49
      000F20 80 02            [12] 3003 	sjmp 00166$
      000F22                       3004 00159$:
                                   3005 ;	printf_large.c:626: c = 'X';
                                   3006 ;	genAssign: resultIsFar = FALSE
      000F22 7F 58            [ 8] 3007 	mov	r7,#0x58
      000F24                       3008 00166$:
                                   3009 ;	printf_large.c:628: OUTPUT_CHAR(c, p);
      000F24 8F 82            [ 8] 3010 	mov	dpl,r7
      000F26 12s00r00r00      [16] 3011 	lcall	__output_char
                                   3012 ;	printf_large.c:629: OUTPUT_CHAR(':', p);
      000F2A 75 82 3A         [12] 3013 	mov	dpl,#0x3a
      000F2D 12s00r00r00      [16] 3014 	lcall	__output_char
                                   3015 ;	printf_large.c:630: OUTPUT_CHAR('0', p);
      000F31 75 82 30         [12] 3016 	mov	dpl,#0x30
      000F34 12s00r00r00      [16] 3017 	lcall	__output_char
                                   3018 ;	printf_large.c:631: OUTPUT_CHAR('x', p);
      000F38 75 82 78         [12] 3019 	mov	dpl,#0x78
      000F3B 12s00r00r00      [16] 3020 	lcall	__output_char
                                   3021 ;	printf_large.c:632: OUTPUT_2DIGITS( value.byte[2] );
      000F3F 90s00r00r0A      [12] 3022 	mov	dptr,#(_value + 0x000002)
      000F43 E0               [ 8] 3023 	movx	a,@dptr
      000F44 FE               [ 4] 3024 	mov	r6,a
      000F45 8E 82            [ 8] 3025 	mov	dpl,r6
      000F47 12s00r00r6A      [16] 3026 	lcall	_output_2digits
                                   3027 ;	printf_large.c:633: OUTPUT_2DIGITS( value.byte[1] );
      000F4B 90s00r00r09      [12] 3028 	mov	dptr,#(_value + 0x000001)
      000F4F E0               [ 8] 3029 	movx	a,@dptr
      000F50 FE               [ 4] 3030 	mov	r6,a
      000F51 8E 82            [ 8] 3031 	mov	dpl,r6
      000F53 12s00r00r6A      [16] 3032 	lcall	_output_2digits
                                   3033 ;	printf_large.c:634: OUTPUT_2DIGITS( value.byte[0] );
      000F57 90s00r00r08      [12] 3034 	mov	dptr,#_value
      000F5B E0               [ 8] 3035 	movx	a,@dptr
      000F5C FE               [ 4] 3036 	mov	r6,a
      000F5D 8E 82            [ 8] 3037 	mov	dpl,r6
      000F5F 12s00r00r6A      [16] 3038 	lcall	_output_2digits
                                   3039 ;	printf_large.c:668: break;
                                   3040 ;	printf_large.c:671: case 'I':
      000F63 80 4A            [12] 3041 	sjmp 00174$
      000F65                       3042 00168$:
                                   3043 ;	printf_large.c:672: signed_argument = 1;
                                   3044 ;	genAssign: resultIsFar = TRUE
      000F65 90s00r00rBC      [12] 3045 	mov	dptr,#__print_format_signed_argument_65536_163
      000F69 74 01            [ 8] 3046 	mov	a,#0x01
      000F6B F0               [ 8] 3047 	movx	@dptr,a
                                   3048 ;	printf_large.c:673: radix = 10;
                                   3049 ;	genAssign: resultIsFar = TRUE
      000F6C 90s00r00rC0      [12] 3050 	mov	dptr,#__print_format_radix_65536_163
      000F70 74 0A            [ 8] 3051 	mov	a,#0x0a
      000F72 F0               [ 8] 3052 	movx	@dptr,a
                                   3053 ;	printf_large.c:674: break;
                                   3054 ;	printf_large.c:676: case 'O':
      000F73 80 3A            [12] 3055 	sjmp 00174$
      000F75                       3056 00169$:
                                   3057 ;	printf_large.c:677: radix = 8;
                                   3058 ;	genAssign: resultIsFar = TRUE
      000F75 90s00r00rC0      [12] 3059 	mov	dptr,#__print_format_radix_65536_163
      000F79 74 08            [ 8] 3060 	mov	a,#0x08
      000F7B F0               [ 8] 3061 	movx	@dptr,a
                                   3062 ;	printf_large.c:678: break;
                                   3063 ;	printf_large.c:680: case 'U':
      000F7C 80 31            [12] 3064 	sjmp 00174$
      000F7E                       3065 00170$:
                                   3066 ;	printf_large.c:681: radix = 10;
                                   3067 ;	genAssign: resultIsFar = TRUE
      000F7E 90s00r00rC0      [12] 3068 	mov	dptr,#__print_format_radix_65536_163
      000F82 74 0A            [ 8] 3069 	mov	a,#0x0a
      000F84 F0               [ 8] 3070 	movx	@dptr,a
                                   3071 ;	printf_large.c:682: break;
                                   3072 ;	printf_large.c:684: case 'X':
      000F85 80 28            [12] 3073 	sjmp 00174$
      000F87                       3074 00171$:
                                   3075 ;	printf_large.c:685: radix = 16;
                                   3076 ;	genAssign: resultIsFar = TRUE
      000F87 90s00r00rC0      [12] 3077 	mov	dptr,#__print_format_radix_65536_163
      000F8B 74 10            [ 8] 3078 	mov	a,#0x10
      000F8D F0               [ 8] 3079 	movx	@dptr,a
                                   3080 ;	printf_large.c:686: break;
                                   3081 ;	printf_large.c:688: case 'F':
      000F8E 80 1F            [12] 3082 	sjmp 00174$
      000F90                       3083 00172$:
                                   3084 ;	printf_large.c:689: float_argument=1;
                                   3085 ;	genAssign: resultIsFar = TRUE
      000F90 90s00r00rBF      [12] 3086 	mov	dptr,#__print_format_float_argument_65536_163
      000F94 74 01            [ 8] 3087 	mov	a,#0x01
      000F96 F0               [ 8] 3088 	movx	@dptr,a
                                   3089 ;	printf_large.c:690: break;
                                   3090 ;	printf_large.c:692: default:
      000F97 80 16            [12] 3091 	sjmp 00174$
      000F99                       3092 00173$:
                                   3093 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      000F99 90s00r00rD0      [12] 3094 	mov	dptr,#__print_format_sloc1_1_0
      000F9D E0               [ 8] 3095 	movx	a,@dptr
      000F9E F5 82            [ 8] 3096 	mov	dpl,a
      000FA0 12s00r00r00      [16] 3097 	lcall	__output_char
                                   3098 ;	printf_large.c:877: return charsOutputted;
                                   3099 ;	printf_large.c:696: }
      000FA4 80 09            [12] 3100 	sjmp 00174$
      000FA6                       3101 00328$:
                                   3102 ;	genAssign: resultIsFar = TRUE
      000FA6 90s00r00rD1      [12] 3103 	mov	dptr,#__print_format_sloc2_1_0
      000FAA EC               [ 4] 3104 	mov	a,r4
      000FAB F0               [ 8] 3105 	movx	@dptr,a
      000FAC A3               [12] 3106 	inc	dptr
      000FAD ED               [ 4] 3107 	mov	a,r5
      000FAE F0               [ 8] 3108 	movx	@dptr,a
      000FAF                       3109 00174$:
                                   3110 ;	printf_large.c:698: if (float_argument)
      000FAF 90s00r00rBF      [12] 3111 	mov	dptr,#__print_format_float_argument_65536_163
      000FB3 E0               [ 8] 3112 	movx	a,@dptr
      000FB4 70 04            [12] 3113 	jnz	00713$
      000FB6 02s00r10r67      [16] 3114 	ljmp	00237$
      000FBA                       3115 00713$:
                                   3116 ;	printf_large.c:700: value.f = va_arg(ap, float);
      000FBA 90s00r00rB4      [12] 3117 	mov	dptr,#__print_format_PARM_4
                                   3118 ;	genAssign: resultIsFar = FALSE
      000FBE E0               [ 8] 3119 	movx	a,@dptr
      000FBF FC               [ 4] 3120 	mov	r4,a
      000FC0 A3               [12] 3121 	inc	dptr
      000FC1 E0               [ 8] 3122 	movx	a,@dptr
      000FC2 FD               [ 4] 3123 	mov	r5,a
      000FC3 A3               [12] 3124 	inc	dptr
      000FC4 E0               [ 8] 3125 	movx	a,@dptr
      000FC5 FE               [ 4] 3126 	mov	r6,a
      000FC6 A3               [12] 3127 	inc	dptr
      000FC7 E0               [ 8] 3128 	movx	a,@dptr
      000FC8 FF               [ 4] 3129 	mov	r7,a
      000FC9 EC               [ 4] 3130 	mov	a,r4
      000FCA 24 FC            [ 8] 3131 	add	a,#0xfc
      000FCC FC               [ 4] 3132 	mov	r4,a
      000FCD ED               [ 4] 3133 	mov	a,r5
      000FCE 34 FF            [ 8] 3134 	addc	a,#0xff
      000FD0 FD               [ 4] 3135 	mov	r5,a
      000FD1 EE               [ 4] 3136 	mov	a,r6
      000FD2 34 FF            [ 8] 3137 	addc	a,#0xff
      000FD4 FE               [ 4] 3138 	mov	r6,a
                                   3139 ;	genAssign: resultIsFar = TRUE
      000FD5 90s00r00rB4      [12] 3140 	mov	dptr,#__print_format_PARM_4
      000FD9 EC               [ 4] 3141 	mov	a,r4
      000FDA F0               [ 8] 3142 	movx	@dptr,a
      000FDB A3               [12] 3143 	inc	dptr
      000FDC ED               [ 4] 3144 	mov	a,r5
      000FDD F0               [ 8] 3145 	movx	@dptr,a
      000FDE A3               [12] 3146 	inc	dptr
      000FDF EE               [ 4] 3147 	mov	a,r6
      000FE0 F0               [ 8] 3148 	movx	@dptr,a
      000FE1 A3               [12] 3149 	inc	dptr
      000FE2 EF               [ 4] 3150 	mov	a,r7
      000FE3 F0               [ 8] 3151 	movx	@dptr,a
      000FE4 8C 82            [ 8] 3152 	mov	dpl,r4
      000FE6 8D 83            [ 8] 3153 	mov	dph,r5
      000FE8 8E 93            [ 8] 3154 	mov	dpx,r6
      000FEA 8F F0            [ 8] 3155 	mov	b,r7
      000FEC 12s00r00r00      [16] 3156 	lcall	__gptrgetWord
      000FF0 FC               [ 4] 3157 	mov	r4,a
      000FF1 AD 9C            [ 8] 3158 	mov	r5,acc1
      000FF3 A3               [12] 3159 	inc	dptr
      000FF4 12s00r00r00      [16] 3160 	lcall	__gptrgetWord
      000FF8 FE               [ 4] 3161 	mov	r6,a
      000FF9 AF 9C            [ 8] 3162 	mov	r7,acc1
      000FFB 90s00r00r08      [12] 3163 	mov	dptr,#_value
      000FFF EC               [ 4] 3164 	mov	a,r4
      001000 F0               [ 8] 3165 	movx	@dptr,a
      001001 A3               [12] 3166 	inc	dptr
      001002 ED               [ 4] 3167 	mov	a,r5
      001003 F0               [ 8] 3168 	movx	@dptr,a
      001004 A3               [12] 3169 	inc	dptr
      001005 EE               [ 4] 3170 	mov	a,r6
      001006 F0               [ 8] 3171 	movx	@dptr,a
      001007 A3               [12] 3172 	inc	dptr
      001008 EF               [ 4] 3173 	mov	a,r7
      001009 F0               [ 8] 3174 	movx	@dptr,a
                                   3175 ;	printf_large.c:718: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      00100A 90s00r00rD1      [12] 3176 	mov	dptr,#__print_format_sloc2_1_0
      00100E 75 86 01         [12] 3177 	mov	dps, #1
      001011 90s00r00r0F      [12] 3178 	mov	dptr, #_output_float_PARM_2
      001015 15 86            [ 8] 3179 	dec	dps
      001017 E0               [ 8] 3180 	movx	a,@dptr
      001018 05 86            [ 8] 3181 	inc	dps
      00101A F0               [ 8] 3182 	movx	@dptr,a
      00101B 75 86 01         [12] 3183 	mov	dps, #1
      00101E 90s00r00r10      [12] 3184 	mov	dptr, #_output_float_PARM_3
      001022 15 86            [ 8] 3185 	dec	dps
      001024 90s00r00rC1      [12] 3186 	mov	dptr, #__print_format_decimals_65536_163
      001028 E0               [ 8] 3187 	movx	a,@dptr
      001029 05 86            [ 8] 3188 	inc	dps
      00102B F0               [ 8] 3189 	movx	@dptr,a
      00102C 75 86 00         [12] 3190 	mov	dps,#0
      00102F 90s00r00rB8      [12] 3191 	mov	dptr,#__print_format_left_justify_65536_163
                                   3192 ;	genAssign: resultIsFar = TRUE
      001033 E0               [ 8] 3193 	movx	a,@dptr
      001034 90s00r00r11      [12] 3194 	mov	dptr,#_output_float_PARM_4
      001038 F0               [ 8] 3195 	movx	@dptr,a
      001039 90s00r00rB9      [12] 3196 	mov	dptr,#__print_format_zero_padding_65536_163
                                   3197 ;	genAssign: resultIsFar = TRUE
      00103D E0               [ 8] 3198 	movx	a,@dptr
      00103E 90s00r00r12      [12] 3199 	mov	dptr,#_output_float_PARM_5
      001042 F0               [ 8] 3200 	movx	@dptr,a
      001043 90s00r00rBA      [12] 3201 	mov	dptr,#__print_format_prefix_sign_65536_163
                                   3202 ;	genAssign: resultIsFar = TRUE
      001047 E0               [ 8] 3203 	movx	a,@dptr
      001048 90s00r00r13      [12] 3204 	mov	dptr,#_output_float_PARM_6
      00104C F0               [ 8] 3205 	movx	@dptr,a
      00104D 90s00r00rBB      [12] 3206 	mov	dptr,#__print_format_prefix_space_65536_163
                                   3207 ;	genAssign: resultIsFar = TRUE
      001051 E0               [ 8] 3208 	movx	a,@dptr
      001052 90s00r00r14      [12] 3209 	mov	dptr,#_output_float_PARM_7
      001056 F0               [ 8] 3210 	movx	@dptr,a
      001057 8C 82            [ 8] 3211 	mov	dpl,r4
      001059 8D 83            [ 8] 3212 	mov	dph,r5
      00105B 8E 93            [ 8] 3213 	mov	dpx,r6
      00105D 8F F0            [ 8] 3214 	mov	b,r7
      00105F 12s00r00rE0      [16] 3215 	lcall	_output_float
      001063 02s00r09r06      [16] 3216 	ljmp	00242$
      001067                       3217 00237$:
                                   3218 ;	printf_large.c:723: else if (radix != 0)
      001067 90s00r00rC0      [12] 3219 	mov	dptr,#__print_format_radix_65536_163
      00106B E0               [ 8] 3220 	movx	a,@dptr
      00106C 70 04            [12] 3221 	jnz	00714$
      00106E 02s00r09r06      [16] 3222 	ljmp	00242$
      001072                       3223 00714$:
                                   3224 ;	printf_large.c:728: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                                   3225 ;	printf_large.c:731: if (char_argument)
      001072 90s00r00rBD      [12] 3226 	mov	dptr,#__print_format_char_argument_65536_163
      001076 E0               [ 8] 3227 	movx	a,@dptr
      001077 70 04            [12] 3228 	jnz	00715$
      001079 02s00r10rF9      [16] 3229 	ljmp	00183$
      00107D                       3230 00715$:
                                   3231 ;	printf_large.c:733: value.l = va_arg(ap, char);
      00107D 90s00r00rB4      [12] 3232 	mov	dptr,#__print_format_PARM_4
                                   3233 ;	genAssign: resultIsFar = FALSE
      001081 E0               [ 8] 3234 	movx	a,@dptr
      001082 FC               [ 4] 3235 	mov	r4,a
      001083 A3               [12] 3236 	inc	dptr
      001084 E0               [ 8] 3237 	movx	a,@dptr
      001085 FD               [ 4] 3238 	mov	r5,a
      001086 A3               [12] 3239 	inc	dptr
      001087 E0               [ 8] 3240 	movx	a,@dptr
      001088 FE               [ 4] 3241 	mov	r6,a
      001089 A3               [12] 3242 	inc	dptr
      00108A E0               [ 8] 3243 	movx	a,@dptr
      00108B FF               [ 4] 3244 	mov	r7,a
      00108C 1C               [ 4] 3245 	dec	r4
      00108D BC FF 05         [16] 3246 	cjne	r4,#0xff,00716$
      001090 1D               [ 4] 3247 	dec	r5
      001091 BD FF 01         [16] 3248 	cjne	r5,#0xff,00716$
      001094 1E               [ 4] 3249 	dec	r6
      001095                       3250 00716$:
                                   3251 ;	genAssign: resultIsFar = TRUE
      001095 90s00r00rB4      [12] 3252 	mov	dptr,#__print_format_PARM_4
      001099 EC               [ 4] 3253 	mov	a,r4
      00109A F0               [ 8] 3254 	movx	@dptr,a
      00109B A3               [12] 3255 	inc	dptr
      00109C ED               [ 4] 3256 	mov	a,r5
      00109D F0               [ 8] 3257 	movx	@dptr,a
      00109E A3               [12] 3258 	inc	dptr
      00109F EE               [ 4] 3259 	mov	a,r6
      0010A0 F0               [ 8] 3260 	movx	@dptr,a
      0010A1 A3               [12] 3261 	inc	dptr
      0010A2 EF               [ 4] 3262 	mov	a,r7
      0010A3 F0               [ 8] 3263 	movx	@dptr,a
      0010A4 8C 82            [ 8] 3264 	mov	dpl,r4
      0010A6 8D 83            [ 8] 3265 	mov	dph,r5
      0010A8 8E 93            [ 8] 3266 	mov	dpx,r6
      0010AA 8F F0            [ 8] 3267 	mov	b,r7
      0010AC 12s00r00r00      [16] 3268 	lcall	__gptrget
      0010B0 FC               [ 4] 3269 	mov	r4,a
      0010B1 7D 00            [ 8] 3270 	mov	r5,#0x00
      0010B3 7E 00            [ 8] 3271 	mov	r6,#0x00
      0010B5 7F 00            [ 8] 3272 	mov	r7,#0x00
      0010B7 90s00r00r08      [12] 3273 	mov	dptr,#_value
      0010BB EC               [ 4] 3274 	mov	a,r4
      0010BC F0               [ 8] 3275 	movx	@dptr,a
      0010BD A3               [12] 3276 	inc	dptr
      0010BE ED               [ 4] 3277 	mov	a,r5
      0010BF F0               [ 8] 3278 	movx	@dptr,a
      0010C0 A3               [12] 3279 	inc	dptr
      0010C1 EE               [ 4] 3280 	mov	a,r6
      0010C2 F0               [ 8] 3281 	movx	@dptr,a
      0010C3 A3               [12] 3282 	inc	dptr
      0010C4 EF               [ 4] 3283 	mov	a,r7
      0010C5 F0               [ 8] 3284 	movx	@dptr,a
                                   3285 ;	printf_large.c:734: if (!signed_argument)
      0010C6 90s00r00rBC      [12] 3286 	mov	dptr,#__print_format_signed_argument_65536_163
      0010CA E0               [ 8] 3287 	movx	a,@dptr
      0010CB 60 04            [12] 3288 	jz	00717$
      0010CD 02s00r11rC9      [16] 3289 	ljmp	00184$
      0010D1                       3290 00717$:
                                   3291 ;	printf_large.c:736: value.l &= 0xFF;
      0010D1 90s00r00r08      [12] 3292 	mov	dptr,#_value
      0010D5 E0               [ 8] 3293 	movx	a,@dptr
      0010D6 A3               [12] 3294 	inc	dptr
      0010D7 FC               [ 4] 3295 	mov	r4,a
      0010D8 E0               [ 8] 3296 	movx	a,@dptr
      0010D9 A3               [12] 3297 	inc	dptr
      0010DA FD               [ 4] 3298 	mov	r5,a
      0010DB E0               [ 8] 3299 	movx	a,@dptr
      0010DC A3               [12] 3300 	inc	dptr
      0010DD FE               [ 4] 3301 	mov	r6,a
      0010DE E0               [ 8] 3302 	movx	a,@dptr
      0010DF FF               [ 4] 3303 	mov	r7,a
      0010E0 7D 00            [ 8] 3304 	mov	r5,#0x00
      0010E2 7E 00            [ 8] 3305 	mov	r6,#0x00
      0010E4 7F 00            [ 8] 3306 	mov	r7,#0x00
      0010E6 90s00r00r08      [12] 3307 	mov	dptr,#_value
      0010EA EC               [ 4] 3308 	mov	a,r4
      0010EB F0               [ 8] 3309 	movx	@dptr,a
      0010EC A3               [12] 3310 	inc	dptr
      0010ED ED               [ 4] 3311 	mov	a,r5
      0010EE F0               [ 8] 3312 	movx	@dptr,a
      0010EF A3               [12] 3313 	inc	dptr
      0010F0 EE               [ 4] 3314 	mov	a,r6
      0010F1 F0               [ 8] 3315 	movx	@dptr,a
      0010F2 A3               [12] 3316 	inc	dptr
      0010F3 EF               [ 4] 3317 	mov	a,r7
      0010F4 F0               [ 8] 3318 	movx	@dptr,a
      0010F5 02s00r11rC9      [16] 3319 	ljmp	00184$
      0010F9                       3320 00183$:
                                   3321 ;	printf_large.c:739: else if (long_argument)
      0010F9 90s00r00rBE      [12] 3322 	mov	dptr,#__print_format_long_argument_65536_163
      0010FD E0               [ 8] 3323 	movx	a,@dptr
      0010FE 60 52            [12] 3324 	jz  00180$
      001100                       3325 00718$:
                                   3326 ;	printf_large.c:741: value.l = va_arg(ap, long);
      001100 90s00r00rB4      [12] 3327 	mov	dptr,#__print_format_PARM_4
                                   3328 ;	genAssign: resultIsFar = FALSE
      001104 E0               [ 8] 3329 	movx	a,@dptr
      001105 FC               [ 4] 3330 	mov	r4,a
      001106 A3               [12] 3331 	inc	dptr
      001107 E0               [ 8] 3332 	movx	a,@dptr
      001108 FD               [ 4] 3333 	mov	r5,a
      001109 A3               [12] 3334 	inc	dptr
      00110A E0               [ 8] 3335 	movx	a,@dptr
      00110B FE               [ 4] 3336 	mov	r6,a
      00110C A3               [12] 3337 	inc	dptr
      00110D E0               [ 8] 3338 	movx	a,@dptr
      00110E FF               [ 4] 3339 	mov	r7,a
      00110F EC               [ 4] 3340 	mov	a,r4
      001110 24 FC            [ 8] 3341 	add	a,#0xfc
      001112 FC               [ 4] 3342 	mov	r4,a
      001113 ED               [ 4] 3343 	mov	a,r5
      001114 34 FF            [ 8] 3344 	addc	a,#0xff
      001116 FD               [ 4] 3345 	mov	r5,a
      001117 EE               [ 4] 3346 	mov	a,r6
      001118 34 FF            [ 8] 3347 	addc	a,#0xff
      00111A FE               [ 4] 3348 	mov	r6,a
                                   3349 ;	genAssign: resultIsFar = TRUE
      00111B 90s00r00rB4      [12] 3350 	mov	dptr,#__print_format_PARM_4
      00111F EC               [ 4] 3351 	mov	a,r4
      001120 F0               [ 8] 3352 	movx	@dptr,a
      001121 A3               [12] 3353 	inc	dptr
      001122 ED               [ 4] 3354 	mov	a,r5
      001123 F0               [ 8] 3355 	movx	@dptr,a
      001124 A3               [12] 3356 	inc	dptr
      001125 EE               [ 4] 3357 	mov	a,r6
      001126 F0               [ 8] 3358 	movx	@dptr,a
      001127 A3               [12] 3359 	inc	dptr
      001128 EF               [ 4] 3360 	mov	a,r7
      001129 F0               [ 8] 3361 	movx	@dptr,a
      00112A 8C 82            [ 8] 3362 	mov	dpl,r4
      00112C 8D 83            [ 8] 3363 	mov	dph,r5
      00112E 8E 93            [ 8] 3364 	mov	dpx,r6
      001130 8F F0            [ 8] 3365 	mov	b,r7
      001132 12s00r00r00      [16] 3366 	lcall	__gptrgetWord
      001136 FC               [ 4] 3367 	mov	r4,a
      001137 AD 9C            [ 8] 3368 	mov	r5,acc1
      001139 A3               [12] 3369 	inc	dptr
      00113A 12s00r00r00      [16] 3370 	lcall	__gptrgetWord
      00113E FE               [ 4] 3371 	mov	r6,a
      00113F AF 9C            [ 8] 3372 	mov	r7,acc1
      001141 90s00r00r08      [12] 3373 	mov	dptr,#_value
      001145 EC               [ 4] 3374 	mov	a,r4
      001146 F0               [ 8] 3375 	movx	@dptr,a
      001147 A3               [12] 3376 	inc	dptr
      001148 ED               [ 4] 3377 	mov	a,r5
      001149 F0               [ 8] 3378 	movx	@dptr,a
      00114A A3               [12] 3379 	inc	dptr
      00114B EE               [ 4] 3380 	mov	a,r6
      00114C F0               [ 8] 3381 	movx	@dptr,a
      00114D A3               [12] 3382 	inc	dptr
      00114E EF               [ 4] 3383 	mov	a,r7
      00114F F0               [ 8] 3384 	movx	@dptr,a
      001150 80 77            [12] 3385 	sjmp 00184$
      001152                       3386 00180$:
                                   3387 ;	printf_large.c:745: value.l = va_arg(ap, int);
      001152 90s00r00rB4      [12] 3388 	mov	dptr,#__print_format_PARM_4
                                   3389 ;	genAssign: resultIsFar = FALSE
      001156 E0               [ 8] 3390 	movx	a,@dptr
      001157 FC               [ 4] 3391 	mov	r4,a
      001158 A3               [12] 3392 	inc	dptr
      001159 E0               [ 8] 3393 	movx	a,@dptr
      00115A FD               [ 4] 3394 	mov	r5,a
      00115B A3               [12] 3395 	inc	dptr
      00115C E0               [ 8] 3396 	movx	a,@dptr
      00115D FE               [ 4] 3397 	mov	r6,a
      00115E A3               [12] 3398 	inc	dptr
      00115F E0               [ 8] 3399 	movx	a,@dptr
      001160 FF               [ 4] 3400 	mov	r7,a
      001161 EC               [ 4] 3401 	mov	a,r4
      001162 24 FE            [ 8] 3402 	add	a,#0xfe
      001164 FC               [ 4] 3403 	mov	r4,a
      001165 ED               [ 4] 3404 	mov	a,r5
      001166 34 FF            [ 8] 3405 	addc	a,#0xff
      001168 FD               [ 4] 3406 	mov	r5,a
      001169 EE               [ 4] 3407 	mov	a,r6
      00116A 34 FF            [ 8] 3408 	addc	a,#0xff
      00116C FE               [ 4] 3409 	mov	r6,a
                                   3410 ;	genAssign: resultIsFar = TRUE
      00116D 90s00r00rB4      [12] 3411 	mov	dptr,#__print_format_PARM_4
      001171 EC               [ 4] 3412 	mov	a,r4
      001172 F0               [ 8] 3413 	movx	@dptr,a
      001173 A3               [12] 3414 	inc	dptr
      001174 ED               [ 4] 3415 	mov	a,r5
      001175 F0               [ 8] 3416 	movx	@dptr,a
      001176 A3               [12] 3417 	inc	dptr
      001177 EE               [ 4] 3418 	mov	a,r6
      001178 F0               [ 8] 3419 	movx	@dptr,a
      001179 A3               [12] 3420 	inc	dptr
      00117A EF               [ 4] 3421 	mov	a,r7
      00117B F0               [ 8] 3422 	movx	@dptr,a
      00117C 8C 82            [ 8] 3423 	mov	dpl,r4
      00117E 8D 83            [ 8] 3424 	mov	dph,r5
      001180 8E 93            [ 8] 3425 	mov	dpx,r6
      001182 8F F0            [ 8] 3426 	mov	b,r7
      001184 12s00r00r00      [16] 3427 	lcall	__gptrgetWord
      001188 FC               [ 4] 3428 	mov	r4,a
      001189 AD 9C            [ 8] 3429 	mov	r5,acc1
      00118B ED               [ 4] 3430 	mov	a,r5
      00118C 33               [ 4] 3431 	rlc	a
      00118D 95 E0            [ 8] 3432 	subb	a,acc
      00118F FE               [ 4] 3433 	mov	r6,a
      001190 FF               [ 4] 3434 	mov	r7,a
      001191 90s00r00r08      [12] 3435 	mov	dptr,#_value
      001195 EC               [ 4] 3436 	mov	a,r4
      001196 F0               [ 8] 3437 	movx	@dptr,a
      001197 A3               [12] 3438 	inc	dptr
      001198 ED               [ 4] 3439 	mov	a,r5
      001199 F0               [ 8] 3440 	movx	@dptr,a
      00119A A3               [12] 3441 	inc	dptr
      00119B EE               [ 4] 3442 	mov	a,r6
      00119C F0               [ 8] 3443 	movx	@dptr,a
      00119D A3               [12] 3444 	inc	dptr
      00119E EF               [ 4] 3445 	mov	a,r7
      00119F F0               [ 8] 3446 	movx	@dptr,a
                                   3447 ;	printf_large.c:746: if (!signed_argument)
      0011A0 90s00r00rBC      [12] 3448 	mov	dptr,#__print_format_signed_argument_65536_163
      0011A4 E0               [ 8] 3449 	movx	a,@dptr
      0011A5 70 22            [12] 3450 	jnz  00184$
      0011A7                       3451 00719$:
                                   3452 ;	printf_large.c:748: value.l &= 0xFFFF;
      0011A7 90s00r00r08      [12] 3453 	mov	dptr,#_value
      0011AB E0               [ 8] 3454 	movx	a,@dptr
      0011AC A3               [12] 3455 	inc	dptr
      0011AD FC               [ 4] 3456 	mov	r4,a
      0011AE E0               [ 8] 3457 	movx	a,@dptr
      0011AF A3               [12] 3458 	inc	dptr
      0011B0 FD               [ 4] 3459 	mov	r5,a
      0011B1 E0               [ 8] 3460 	movx	a,@dptr
      0011B2 A3               [12] 3461 	inc	dptr
      0011B3 FE               [ 4] 3462 	mov	r6,a
      0011B4 E0               [ 8] 3463 	movx	a,@dptr
      0011B5 FF               [ 4] 3464 	mov	r7,a
      0011B6 7E 00            [ 8] 3465 	mov	r6,#0x00
      0011B8 7F 00            [ 8] 3466 	mov	r7,#0x00
      0011BA 90s00r00r08      [12] 3467 	mov	dptr,#_value
      0011BE EC               [ 4] 3468 	mov	a,r4
      0011BF F0               [ 8] 3469 	movx	@dptr,a
      0011C0 A3               [12] 3470 	inc	dptr
      0011C1 ED               [ 4] 3471 	mov	a,r5
      0011C2 F0               [ 8] 3472 	movx	@dptr,a
      0011C3 A3               [12] 3473 	inc	dptr
      0011C4 EE               [ 4] 3474 	mov	a,r6
      0011C5 F0               [ 8] 3475 	movx	@dptr,a
      0011C6 A3               [12] 3476 	inc	dptr
      0011C7 EF               [ 4] 3477 	mov	a,r7
      0011C8 F0               [ 8] 3478 	movx	@dptr,a
      0011C9                       3479 00184$:
                                   3480 ;	printf_large.c:752: if ( signed_argument )
      0011C9 90s00r00rBC      [12] 3481 	mov	dptr,#__print_format_signed_argument_65536_163
      0011CD E0               [ 8] 3482 	movx	a,@dptr
      0011CE 60 45            [12] 3483 	jz  00189$
      0011D0                       3484 00720$:
                                   3485 ;	printf_large.c:754: if (value.l < 0)
      0011D0 90s00r00r08      [12] 3486 	mov	dptr,#_value
      0011D4 E0               [ 8] 3487 	movx	a,@dptr
      0011D5 A3               [12] 3488 	inc	dptr
      0011D6 FC               [ 4] 3489 	mov	r4,a
      0011D7 E0               [ 8] 3490 	movx	a,@dptr
      0011D8 A3               [12] 3491 	inc	dptr
      0011D9 FD               [ 4] 3492 	mov	r5,a
      0011DA E0               [ 8] 3493 	movx	a,@dptr
      0011DB A3               [12] 3494 	inc	dptr
      0011DC FE               [ 4] 3495 	mov	r6,a
      0011DD E0               [ 8] 3496 	movx	a,@dptr
      0011DE FF               [ 4] 3497 	mov  r7,a
      0011DF 30 E7 2D         [12] 3498 	jnb  acc[7],00186$
      0011E2                       3499 00721$:
                                   3500 ;	printf_large.c:755: value.l = -value.l;
      0011E2 90s00r00r08      [12] 3501 	mov	dptr,#_value
      0011E6 E0               [ 8] 3502 	movx	a,@dptr
      0011E7 A3               [12] 3503 	inc	dptr
      0011E8 FC               [ 4] 3504 	mov	r4,a
      0011E9 E0               [ 8] 3505 	movx	a,@dptr
      0011EA A3               [12] 3506 	inc	dptr
      0011EB FD               [ 4] 3507 	mov	r5,a
      0011EC E0               [ 8] 3508 	movx	a,@dptr
      0011ED A3               [12] 3509 	inc	dptr
      0011EE FE               [ 4] 3510 	mov	r6,a
      0011EF E0               [ 8] 3511 	movx	a,@dptr
      0011F0 FF               [ 4] 3512 	mov	r7,a
      0011F1 C3               [ 4] 3513 	clr	c
      0011F2 E4               [ 4] 3514 	clr	a
      0011F3 9C               [ 4] 3515 	subb	a,r4
      0011F4 FC               [ 4] 3516 	mov	r4,a
      0011F5 E4               [ 4] 3517 	clr	a
      0011F6 9D               [ 4] 3518 	subb	a,r5
      0011F7 FD               [ 4] 3519 	mov	r5,a
      0011F8 E4               [ 4] 3520 	clr	a
      0011F9 9E               [ 4] 3521 	subb	a,r6
      0011FA FE               [ 4] 3522 	mov	r6,a
      0011FB E4               [ 4] 3523 	clr	a
      0011FC 9F               [ 4] 3524 	subb	a,r7
      0011FD FF               [ 4] 3525 	mov	r7,a
      0011FE 90s00r00r08      [12] 3526 	mov	dptr,#_value
      001202 EC               [ 4] 3527 	mov	a,r4
      001203 F0               [ 8] 3528 	movx	@dptr,a
      001204 A3               [12] 3529 	inc	dptr
      001205 ED               [ 4] 3530 	mov	a,r5
      001206 F0               [ 8] 3531 	movx	@dptr,a
      001207 A3               [12] 3532 	inc	dptr
      001208 EE               [ 4] 3533 	mov	a,r6
      001209 F0               [ 8] 3534 	movx	@dptr,a
      00120A A3               [12] 3535 	inc	dptr
      00120B EF               [ 4] 3536 	mov	a,r7
      00120C F0               [ 8] 3537 	movx	@dptr,a
      00120D 80 06            [12] 3538 	sjmp 00189$
      00120F                       3539 00186$:
                                   3540 ;	printf_large.c:757: signed_argument = 0;
                                   3541 ;	genAssign: resultIsFar = TRUE
      00120F 90s00r00rBC      [12] 3542 	mov	dptr,#__print_format_signed_argument_65536_163
      001213 E4               [ 4] 3543 	clr	a
      001214 F0               [ 8] 3544 	movx	@dptr,a
      001215                       3545 00189$:
                                   3546 ;	printf_large.c:761: lsd = 1;
                                   3547 ;	genAssign: resultIsFar = FALSE
      001215 7A 01            [ 8] 3548 	mov	r2,#0x01
                                   3549 ;	printf_large.c:763: do {
                                   3550 ;	genAssign: resultIsFar = FALSE
      001217 7DrC8            [ 8] 3551 	mov	r5,#(__print_format_store_262144_185 + 0x000005)
      001219 7Es00            [ 8] 3552 	mov	r6,#((__print_format_store_262144_185 + 0x000005) >> 8)
      00121B 7Fs00            [ 8] 3553 	mov	r7,#((__print_format_store_262144_185 + 0x000005) >> 16)
                                   3554 ;	genAssign: resultIsFar = TRUE
      00121D 90s00r00rCC      [12] 3555 	mov	dptr,#__print_format_sloc0_1_0
      001221 E4               [ 4] 3556 	clr	a
      001222 F0               [ 8] 3557 	movx	@dptr,a
      001223 A3               [12] 3558 	inc	dptr
      001224 F0               [ 8] 3559 	movx	@dptr,a
      001225                       3560 00193$:
                                   3561 ;	printf_large.c:764: value.byte[4] = 0;
      001225 90s00r00r0C      [12] 3562 	mov	dptr,#(_value + 0x000004)
      001229 E4               [ 4] 3563 	clr	a
      00122A F0               [ 8] 3564 	movx	@dptr,a
                                   3565 ;	printf_large.c:768: calculate_digit(radix);
      00122B C0 02            [ 8] 3566 	push	ar2
      00122D C0 05            [ 8] 3567 	push	ar5
      00122F C0 06            [ 8] 3568 	push	ar6
      001231 C0 07            [ 8] 3569 	push	ar7
      001233 90s00r00rC0      [12] 3570 	mov	dptr,#__print_format_radix_65536_163
      001237 E0               [ 8] 3571 	movx	a,@dptr
      001238 F5 82            [ 8] 3572 	mov	dpl,a
      00123A 12s00r00r85      [16] 3573 	lcall	_calculate_digit
      00123E D0 07            [ 8] 3574 	pop	ar7
      001240 D0 06            [ 8] 3575 	pop	ar6
      001242 D0 05            [ 8] 3576 	pop	ar5
      001244 D0 02            [ 8] 3577 	pop	ar2
                                   3578 ;	printf_large.c:770: if (!lsd)
      001246 EA               [ 4] 3579 	mov	a,r2
      001247 70 33            [12] 3580 	jnz  00191$
      001249                       3581 00722$:
                                   3582 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      001249 90s00r00r0C      [12] 3583 	mov	dptr,#(_value + 0x000004)
      00124D E0               [ 8] 3584 	movx	a,@dptr
      00124E FB               [ 4] 3585 	mov  r3,a
      00124F C4               [ 4] 3586 	swap	a
      001250 54 F0            [ 8] 3587 	anl	a,#0xf0
      001252 FB               [ 4] 3588 	mov	r3,a
      001253 90s00r00r0C      [12] 3589 	mov	dptr,#(_value + 0x000004)
      001257 E0               [ 8] 3590 	movx	a,@dptr
      001258 FC               [ 4] 3591 	mov  r4,a
      001259 C4               [ 4] 3592 	swap	a
      00125A 54 0F            [ 8] 3593 	anl	a,#0x0f
      00125C FC               [ 4] 3594 	mov  r4,a
      00125D 42 03            [ 8] 3595 	orl	ar3,a
      00125F 8D 82            [ 8] 3596 	mov	dpl,r5
      001261 8E 83            [ 8] 3597 	mov	dph,r6
      001263 8F 93            [ 8] 3598 	mov	dpx,r7
      001265 E0               [ 8] 3599 	movx	a,@dptr
      001266 FC               [ 4] 3600 	mov  r4,a
      001267 42 03            [ 8] 3601 	orl	ar3,a
      001269 8D 82            [ 8] 3602 	mov	dpl,r5
      00126B 8E 83            [ 8] 3603 	mov	dph,r6
      00126D 8F 93            [ 8] 3604 	mov	dpx,r7
      00126F EB               [ 4] 3605 	mov	a,r3
      001270 F0               [ 8] 3606 	movx	@dptr,a
                                   3607 ;	printf_large.c:773: pstore--;
      001271 1D               [ 4] 3608 	dec	r5
      001272 BD FF 05         [16] 3609 	cjne	r5,#0xff,00723$
      001275 1E               [ 4] 3610 	dec	r6
      001276 BE FF 01         [16] 3611 	cjne	r6,#0xff,00723$
      001279 1F               [ 4] 3612 	dec	r7
      00127A                       3613 00723$:
      00127A 80 0D            [12] 3614 	sjmp 00192$
      00127C                       3615 00191$:
                                   3616 ;	printf_large.c:777: *pstore = value.byte[4];
      00127C 90s00r00r0C      [12] 3617 	mov	dptr,#(_value + 0x000004)
      001280 E0               [ 8] 3618 	movx	a,@dptr
      001281 FC               [ 4] 3619 	mov  r4,a
      001282 8D 82            [ 8] 3620 	mov  dpl,r5
      001284 8E 83            [ 8] 3621 	mov  dph,r6
      001286 8F 93            [ 8] 3622 	mov  dpx,r7
      001288 F0               [ 8] 3623 	movx	@dptr,a
      001289                       3624 00192$:
                                   3625 ;	printf_large.c:779: length++;
      001289 90s00r00rCC      [12] 3626 	mov	dptr,#__print_format_sloc0_1_0
      00128D E0               [ 8] 3627 	movx	a,@dptr
      00128E 24 01            [ 8] 3628 	add	a,#0x01
      001290 F0               [ 8] 3629 	movx	@dptr,a
      001291 A3               [12] 3630 	inc	dptr
      001292 E0               [ 8] 3631 	movx	a,@dptr
      001293 34 00            [ 8] 3632 	addc	a,#0x00
      001295 F0               [ 8] 3633 	movx	@dptr,a
                                   3634 ;	printf_large.c:780: lsd = !lsd;
      001296 EA               [ 4] 3635 	mov	a,r2
      001297 B4 01 00         [16] 3636 	cjne	a,#0x01,00724$
      00129A                       3637 00724$:
      00129A E4               [ 4] 3638 	clr	a
      00129B 33               [ 4] 3639 	rlc	a
      00129C FA               [ 4] 3640 	mov	r2,a
                                   3641 ;	printf_large.c:781: } while( value.ul );
      00129D 90s00r00r08      [12] 3642 	mov	dptr,#_value
      0012A1 E0               [ 8] 3643 	movx	a,@dptr
      0012A2 A3               [12] 3644 	inc	dptr
      0012A3 FC               [ 4] 3645 	mov	r4,a
      0012A4 E0               [ 8] 3646 	movx	a,@dptr
      0012A5 A3               [12] 3647 	inc	dptr
      0012A6 FB               [ 4] 3648 	mov	r3,a
      0012A7 E0               [ 8] 3649 	movx	a,@dptr
      0012A8 A3               [12] 3650 	inc	dptr
      0012A9 F8               [ 4] 3651 	mov	r0,a
      0012AA E0               [ 8] 3652 	movx	a,@dptr
      0012AB F9               [ 4] 3653 	mov	r1,a
      0012AC EC               [ 4] 3654 	mov	a,r4
      0012AD 4B               [ 4] 3655 	orl	a,r3
      0012AE 48               [ 4] 3656 	orl	a,r0
      0012AF 49               [ 4] 3657 	orl	a,r1
      0012B0 60 04            [12] 3658 	jz	00725$
      0012B2 02s00r12r25      [16] 3659 	ljmp	00193$
      0012B6                       3660 00725$:
                                   3661 ;	printf_large.c:783: if (width == 0)
                                   3662 ;	genAssign: resultIsFar = TRUE
      0012B6 90s00r00rC9      [12] 3663 	mov	dptr,#__print_format_pstore_262144_185
      0012BA ED               [ 4] 3664 	mov	a,r5
      0012BB F0               [ 8] 3665 	movx	@dptr,a
      0012BC A3               [12] 3666 	inc	dptr
      0012BD EE               [ 4] 3667 	mov	a,r6
      0012BE F0               [ 8] 3668 	movx	@dptr,a
      0012BF A3               [12] 3669 	inc	dptr
      0012C0 EF               [ 4] 3670 	mov	a,r7
      0012C1 F0               [ 8] 3671 	movx	@dptr,a
      0012C2 90s00r00rCC      [12] 3672 	mov	dptr,#__print_format_sloc0_1_0
                                   3673 ;	genAssign: resultIsFar = TRUE
      0012C6 E0               [ 8] 3674 	movx	a,@dptr
      0012C7 FE               [ 4] 3675 	mov	r6,a
      0012C8 A3               [12] 3676 	inc	dptr
      0012C9 E0               [ 8] 3677 	movx	a,@dptr
      0012CA FF               [ 4] 3678 	mov	r7,a
      0012CB 90s00r00rD1      [12] 3679 	mov	dptr,#__print_format_sloc2_1_0
      0012CF E0               [ 8] 3680 	movx	a,@dptr
      0012D0 F5 F0            [ 8] 3681 	mov	b,a
      0012D2 A3               [12] 3682 	inc	dptr
      0012D3 E0               [ 8] 3683 	movx	a,@dptr
      0012D4 45 F0            [ 8] 3684 	orl	a,b
      0012D6 70 0A            [12] 3685 	jnz  00197$
      0012D8                       3686 00726$:
                                   3687 ;	printf_large.c:788: width = 1;
                                   3688 ;	genAssign: resultIsFar = TRUE
      0012D8 90s00r00rD1      [12] 3689 	mov	dptr,#__print_format_sloc2_1_0
      0012DC 74 01            [ 8] 3690 	mov	a,#0x01
      0012DE F0               [ 8] 3691 	movx	@dptr,a
      0012DF E4               [ 4] 3692 	clr	a
      0012E0 A3               [12] 3693 	inc	dptr
      0012E1 F0               [ 8] 3694 	movx	@dptr,a
      0012E2                       3695 00197$:
                                   3696 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      0012E2 90s00r00rB9      [12] 3697 	mov	dptr,#__print_format_zero_padding_65536_163
      0012E6 E0               [ 8] 3698 	movx	a,@dptr
      0012E7 70 47            [12] 3699 	jnz  00202$
      0012E9                       3700 00727$:
      0012E9 90s00r00rB8      [12] 3701 	mov	dptr,#__print_format_left_justify_65536_163
      0012ED E0               [ 8] 3702 	movx	a,@dptr
      0012EE 70 40            [12] 3703 	jnz  00202$
      0012F0                       3704 00728$:
                                   3705 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      0012F0 90s00r00rD1      [12] 3706 	mov	dptr,#__print_format_sloc2_1_0
                                   3707 ;	genAssign: resultIsFar = FALSE
      0012F4 E0               [ 8] 3708 	movx	a,@dptr
      0012F5 F8               [ 4] 3709 	mov	r0,a
      0012F6 A3               [12] 3710 	inc	dptr
      0012F7 E0               [ 8] 3711 	movx	a,@dptr
      0012F8 F9               [ 4] 3712 	mov	r1,a
      0012F9                       3713 00198$:
      0012F9 8E 03            [ 8] 3714 	mov	ar3,r6
      0012FB 0B               [ 4] 3715 	inc	r3
      0012FC 7C 00            [ 8] 3716 	mov	r4,#0x00
      0012FE C3               [ 4] 3717 	clr	c
      0012FF EB               [ 4] 3718 	mov	a,r3
      001300 98               [ 4] 3719 	subb	a,r0
      001301 EC               [ 4] 3720 	mov	a,r4
      001302 99               [ 4] 3721 	subb	a,r1
      001303 50 22            [12] 3722 	jnc  00330$
      001305                       3723 00729$:
                                   3724 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      001305 C0 02            [ 8] 3725 	push	ar2
      001307 C0 06            [ 8] 3726 	push	ar6
      001309 C0 07            [ 8] 3727 	push	ar7
      00130B C0 00            [ 8] 3728 	push	ar0
      00130D C0 01            [ 8] 3729 	push	ar1
      00130F 75 82 20         [12] 3730 	mov	dpl,#0x20
      001312 12s00r00r00      [16] 3731 	lcall	__output_char
      001316 D0 01            [ 8] 3732 	pop	ar1
      001318 D0 00            [ 8] 3733 	pop	ar0
      00131A D0 07            [ 8] 3734 	pop	ar7
      00131C D0 06            [ 8] 3735 	pop	ar6
      00131E D0 02            [ 8] 3736 	pop	ar2
                                   3737 ;	printf_large.c:797: width--;
      001320 18               [ 4] 3738 	dec	r0
      001321 B8 FF 01         [16] 3739 	cjne	r0,#0xff,00730$
      001324 19               [ 4] 3740 	dec	r1
      001325                       3741 00730$:
      001325 80 D2            [12] 3742 	sjmp 00198$
      001327                       3743 00330$:
                                   3744 ;	genAssign: resultIsFar = TRUE
      001327 90s00r00rD1      [12] 3745 	mov	dptr,#__print_format_sloc2_1_0
      00132B E8               [ 4] 3746 	mov	a,r0
      00132C F0               [ 8] 3747 	movx	@dptr,a
      00132D A3               [12] 3748 	inc	dptr
      00132E E9               [ 4] 3749 	mov	a,r1
      00132F F0               [ 8] 3750 	movx	@dptr,a
      001330                       3751 00202$:
                                   3752 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      001330 90s00r00rBC      [12] 3753 	mov	dptr,#__print_format_signed_argument_65536_163
      001334 E0               [ 8] 3754 	movx	a,@dptr
      001335 60 22            [12] 3755 	jz  00212$
      001337                       3756 00731$:
                                   3757 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      001337 C0 02            [ 8] 3758 	push	ar2
      001339 C0 06            [ 8] 3759 	push	ar6
      00133B C0 07            [ 8] 3760 	push	ar7
      00133D 75 82 2D         [12] 3761 	mov	dpl,#0x2d
      001340 12s00r00r00      [16] 3762 	lcall	__output_char
      001344 D0 07            [ 8] 3763 	pop	ar7
      001346 D0 06            [ 8] 3764 	pop	ar6
      001348 D0 02            [ 8] 3765 	pop	ar2
                                   3766 ;	printf_large.c:805: width--;
      00134A 90s00r00rD1      [12] 3767 	mov	dptr,#__print_format_sloc2_1_0
      00134E E0               [ 8] 3768 	movx	a,@dptr
      00134F 24 FF            [ 8] 3769 	add	a,#0xff
      001351 F0               [ 8] 3770 	movx	@dptr,a
      001352 A3               [12] 3771 	inc	dptr
      001353 E0               [ 8] 3772 	movx	a,@dptr
      001354 34 FF            [ 8] 3773 	addc	a,#0xff
      001356 F0               [ 8] 3774 	movx	@dptr,a
      001357 80 54            [12] 3775 	sjmp 00213$
      001359                       3776 00212$:
                                   3777 ;	printf_large.c:807: else if (length != 0)
      001359 EE               [ 4] 3778 	mov	a,r6
      00135A 4F               [ 4] 3779 	orl	a,r7
      00135B 60 50            [12] 3780 	jz  00213$
      00135D                       3781 00732$:
                                   3782 ;	printf_large.c:810: if (prefix_sign)
      00135D 90s00r00rBA      [12] 3783 	mov	dptr,#__print_format_prefix_sign_65536_163
      001361 E0               [ 8] 3784 	movx	a,@dptr
      001362 60 22            [12] 3785 	jz  00207$
      001364                       3786 00733$:
                                   3787 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      001364 C0 02            [ 8] 3788 	push	ar2
      001366 C0 06            [ 8] 3789 	push	ar6
      001368 C0 07            [ 8] 3790 	push	ar7
      00136A 75 82 2B         [12] 3791 	mov	dpl,#0x2b
      00136D 12s00r00r00      [16] 3792 	lcall	__output_char
      001371 D0 07            [ 8] 3793 	pop	ar7
      001373 D0 06            [ 8] 3794 	pop	ar6
      001375 D0 02            [ 8] 3795 	pop	ar2
                                   3796 ;	printf_large.c:814: width--;
      001377 90s00r00rD1      [12] 3797 	mov	dptr,#__print_format_sloc2_1_0
      00137B E0               [ 8] 3798 	movx	a,@dptr
      00137C 24 FF            [ 8] 3799 	add	a,#0xff
      00137E F0               [ 8] 3800 	movx	@dptr,a
      00137F A3               [12] 3801 	inc	dptr
      001380 E0               [ 8] 3802 	movx	a,@dptr
      001381 34 FF            [ 8] 3803 	addc	a,#0xff
      001383 F0               [ 8] 3804 	movx	@dptr,a
      001384 80 27            [12] 3805 	sjmp 00213$
      001386                       3806 00207$:
                                   3807 ;	printf_large.c:816: else if (prefix_space)
      001386 90s00r00rBB      [12] 3808 	mov	dptr,#__print_format_prefix_space_65536_163
      00138A E0               [ 8] 3809 	movx	a,@dptr
      00138B 60 20            [12] 3810 	jz  00213$
      00138D                       3811 00734$:
                                   3812 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      00138D C0 02            [ 8] 3813 	push	ar2
      00138F C0 06            [ 8] 3814 	push	ar6
      001391 C0 07            [ 8] 3815 	push	ar7
      001393 75 82 20         [12] 3816 	mov	dpl,#0x20
      001396 12s00r00r00      [16] 3817 	lcall	__output_char
      00139A D0 07            [ 8] 3818 	pop	ar7
      00139C D0 06            [ 8] 3819 	pop	ar6
      00139E D0 02            [ 8] 3820 	pop	ar2
                                   3821 ;	printf_large.c:820: width--;
      0013A0 90s00r00rD1      [12] 3822 	mov	dptr,#__print_format_sloc2_1_0
      0013A4 E0               [ 8] 3823 	movx	a,@dptr
      0013A5 24 FF            [ 8] 3824 	add	a,#0xff
      0013A7 F0               [ 8] 3825 	movx	@dptr,a
      0013A8 A3               [12] 3826 	inc	dptr
      0013A9 E0               [ 8] 3827 	movx	a,@dptr
      0013AA 34 FF            [ 8] 3828 	addc	a,#0xff
      0013AC F0               [ 8] 3829 	movx	@dptr,a
      0013AD                       3830 00213$:
                                   3831 ;	printf_large.c:825: if (!left_justify)
      0013AD 90s00r00rB8      [12] 3832 	mov	dptr,#__print_format_left_justify_65536_163
      0013B1 E0               [ 8] 3833 	movx	a,@dptr
      0013B2 70 46            [12] 3834 	jnz  00221$
      0013B4                       3835 00735$:
                                   3836 ;	printf_large.c:827: while ( width-- > length )
      0013B4 90s00r00rD1      [12] 3837 	mov	dptr,#__print_format_sloc2_1_0
                                   3838 ;	genAssign: resultIsFar = FALSE
      0013B8 E0               [ 8] 3839 	movx	a,@dptr
      0013B9 F8               [ 4] 3840 	mov	r0,a
      0013BA A3               [12] 3841 	inc	dptr
      0013BB E0               [ 8] 3842 	movx	a,@dptr
      0013BC F9               [ 4] 3843 	mov	r1,a
      0013BD                       3844 00214$:
                                   3845 ;	genAssign: resultIsFar = FALSE
      0013BD 88 03            [ 8] 3846 	mov	ar3,r0
      0013BF 89 04            [ 8] 3847 	mov	ar4,r1
      0013C1 18               [ 4] 3848 	dec	r0
      0013C2 B8 FF 01         [16] 3849 	cjne	r0,#0xff,00736$
      0013C5 19               [ 4] 3850 	dec	r1
      0013C6                       3851 00736$:
      0013C6 C3               [ 4] 3852 	clr	c
      0013C7 EE               [ 4] 3853 	mov	a,r6
      0013C8 9B               [ 4] 3854 	subb	a,r3
      0013C9 EF               [ 4] 3855 	mov	a,r7
      0013CA 9C               [ 4] 3856 	subb	a,r4
      0013CB 50 5D            [12] 3857 	jnc  00331$
      0013CD                       3858 00737$:
                                   3859 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0013CD 90s00r00rB9      [12] 3860 	mov	dptr,#__print_format_zero_padding_65536_163
      0013D1 E0               [ 8] 3861 	movx	a,@dptr
      0013D2 60 06            [12] 3862 	jz  00247$
      0013D4                       3863 00738$:
                                   3864 ;	genAssign: resultIsFar = FALSE
      0013D4 7B 30            [ 8] 3865 	mov	r3,#0x30
      0013D6 7C 00            [ 8] 3866 	mov	r4,#0x00
      0013D8 80 04            [12] 3867 	sjmp 00248$
      0013DA                       3868 00247$:
                                   3869 ;	genAssign: resultIsFar = FALSE
      0013DA 7B 20            [ 8] 3870 	mov	r3,#0x20
      0013DC 7C 00            [ 8] 3871 	mov	r4,#0x00
      0013DE                       3872 00248$:
      0013DE C0 02            [ 8] 3873 	push	ar2
      0013E0 C0 06            [ 8] 3874 	push	ar6
      0013E2 C0 07            [ 8] 3875 	push	ar7
      0013E4 C0 00            [ 8] 3876 	push	ar0
      0013E6 C0 01            [ 8] 3877 	push	ar1
      0013E8 8B 82            [ 8] 3878 	mov	dpl,r3
      0013EA 12s00r00r00      [16] 3879 	lcall	__output_char
      0013EE D0 01            [ 8] 3880 	pop	ar1
      0013F0 D0 00            [ 8] 3881 	pop	ar0
      0013F2 D0 07            [ 8] 3882 	pop	ar7
      0013F4 D0 06            [ 8] 3883 	pop	ar6
      0013F6 D0 02            [ 8] 3884 	pop	ar2
      0013F8 80 C3            [12] 3885 	sjmp 00214$
      0013FA                       3886 00221$:
                                   3887 ;	printf_large.c:835: if (width > length)
      0013FA 90s00r00rD1      [12] 3888 	mov	dptr,#__print_format_sloc2_1_0
      0013FE C3               [ 4] 3889 	clr	c
      0013FF EE               [ 4] 3890 	mov	a,r6
      001400 C5 F0            [ 8] 3891 	xch	a, b
      001402 E0               [ 8] 3892 	movx	a,@dptr
      001403 C5 F0            [ 8] 3893 	xch	a, b
      001405 95 F0            [ 8] 3894 	subb	a,b
      001407 EF               [ 4] 3895 	mov	a,r7
      001408 C5 F0            [ 8] 3896 	xch	a, b
      00140A A3               [12] 3897 	inc	dptr
      00140B E0               [ 8] 3898 	movx	a,@dptr
      00140C C5 F0            [ 8] 3899 	xch	a, b
      00140E 95 F0            [ 8] 3900 	subb	a,b
      001410 50 0E            [12] 3901 	jnc  00218$
      001412                       3902 00739$:
                                   3903 ;	printf_large.c:836: width -= length;
      001412 90s00r00rD1      [12] 3904 	mov	dptr,#__print_format_sloc2_1_0
      001416 C3               [ 4] 3905 	clr	c
      001417 E0               [ 8] 3906 	movx	a,@dptr
      001418 9E               [ 4] 3907 	subb	a,r6
      001419 F0               [ 8] 3908 	movx	@dptr,a
      00141A A3               [12] 3909 	inc	dptr
      00141B E0               [ 8] 3910 	movx	a,@dptr
      00141C 9F               [ 4] 3911 	subb	a,r7
      00141D F0               [ 8] 3912 	movx	@dptr,a
      00141E 80 13            [12] 3913 	sjmp 00323$
      001420                       3914 00218$:
                                   3915 ;	printf_large.c:838: width = 0;
                                   3916 ;	genAssign: resultIsFar = TRUE
      001420 90s00r00rD1      [12] 3917 	mov	dptr,#__print_format_sloc2_1_0
      001424 E4               [ 4] 3918 	clr	a
      001425 F0               [ 8] 3919 	movx	@dptr,a
      001426 A3               [12] 3920 	inc	dptr
      001427 F0               [ 8] 3921 	movx	@dptr,a
                                   3922 ;	printf_large.c:877: return charsOutputted;
                                   3923 ;	printf_large.c:842: while( length-- )
      001428 80 09            [12] 3924 	sjmp 00323$
      00142A                       3925 00331$:
                                   3926 ;	genAssign: resultIsFar = TRUE
      00142A 90s00r00rD1      [12] 3927 	mov	dptr,#__print_format_sloc2_1_0
      00142E E8               [ 4] 3928 	mov	a,r0
      00142F F0               [ 8] 3929 	movx	@dptr,a
      001430 A3               [12] 3930 	inc	dptr
      001431 E9               [ 4] 3931 	mov	a,r1
      001432 F0               [ 8] 3932 	movx	@dptr,a
      001433                       3933 00323$:
      001433 90s00r00rC9      [12] 3934 	mov	dptr,#__print_format_pstore_262144_185
                                   3935 ;	genAssign: resultIsFar = FALSE
      001437 E0               [ 8] 3936 	movx	a,@dptr
      001438 FD               [ 4] 3937 	mov	r5,a
      001439 A3               [12] 3938 	inc	dptr
      00143A E0               [ 8] 3939 	movx	a,@dptr
      00143B F8               [ 4] 3940 	mov	r0,a
      00143C A3               [12] 3941 	inc	dptr
      00143D E0               [ 8] 3942 	movx	a,@dptr
      00143E F9               [ 4] 3943 	mov	r1,a
                                   3944 ;	genAssign: resultIsFar = FALSE
      00143F                       3945 00226$:
                                   3946 ;	genAssign: resultIsFar = FALSE
      00143F 8E 03            [ 8] 3947 	mov	ar3,r6
      001441 8F 04            [ 8] 3948 	mov	ar4,r7
      001443 1E               [ 4] 3949 	dec	r6
      001444 BE FF 01         [16] 3950 	cjne	r6,#0xff,00740$
      001447 1F               [ 4] 3951 	dec	r7
      001448                       3952 00740$:
      001448 EB               [ 4] 3953 	mov	a,r3
      001449 4C               [ 4] 3954 	orl	a,r4
      00144A 60 5C            [12] 3955 	jz  00228$
      00144C                       3956 00741$:
                                   3957 ;	printf_large.c:844: lsd = !lsd;
      00144C EA               [ 4] 3958 	mov	a,r2
      00144D B4 01 00         [16] 3959 	cjne	a,#0x01,00742$
      001450                       3960 00742$:
      001450 E4               [ 4] 3961 	clr	a
      001451 33               [ 4] 3962 	rlc	a
                                   3963 ;	printf_large.c:845: if (!lsd)
      001452 FA               [ 4] 3964 	mov  r2,a
      001453 70 1C            [12] 3965 	jnz  00224$
      001455                       3966 00743$:
                                   3967 ;	printf_large.c:847: pstore++;
      001455 0D               [ 4] 3968 	inc	r5
      001456 BD 00 05         [16] 3969 	cjne	r5,#0x00,00744$
      001459 08               [ 4] 3970 	inc	r0
      00145A B8 00 01         [16] 3971 	cjne	r0,#0x00,00744$
      00145D 09               [ 4] 3972 	inc	r1
      00145E                       3973 00744$:
                                   3974 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      00145E 8D 82            [ 8] 3975 	mov	dpl,r5
      001460 88 83            [ 8] 3976 	mov	dph,r0
      001462 89 93            [ 8] 3977 	mov	dpx,r1
      001464 E0               [ 8] 3978 	movx	a,@dptr
      001465 FB               [ 4] 3979 	mov  r3,a
      001466 C4               [ 4] 3980 	swap	a
      001467 54 0F            [ 8] 3981 	anl	a,#0x0f
      001469 FB               [ 4] 3982 	mov  r3,a
      00146A 90s00r00r0C      [12] 3983 	mov  dptr,#(_value + 0x000004)
      00146E F0               [ 8] 3984 	movx @dptr,a
      00146F 80 11            [12] 3985 	sjmp 00225$
      001471                       3986 00224$:
                                   3987 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      001471 8D 82            [ 8] 3988 	mov	dpl,r5
      001473 88 83            [ 8] 3989 	mov	dph,r0
      001475 89 93            [ 8] 3990 	mov	dpx,r1
      001477 E0               [ 8] 3991 	movx	a,@dptr
      001478 FB               [ 4] 3992 	mov	r3,a
      001479 53 03 0F         [12] 3993 	anl	ar3,#0x0f
      00147C 90s00r00r0C      [12] 3994 	mov	dptr,#(_value + 0x000004)
      001480 EB               [ 4] 3995 	mov	a,r3
      001481 F0               [ 8] 3996 	movx	@dptr,a
      001482                       3997 00225$:
                                   3998 ;	printf_large.c:858: output_digit( value.byte[4] );
      001482 90s00r00r0C      [12] 3999 	mov	dptr,#(_value + 0x000004)
      001486 E0               [ 8] 4000 	movx	a,@dptr
      001487 FB               [ 4] 4001 	mov	r3,a
      001488 C0 02            [ 8] 4002 	push	ar2
      00148A C0 05            [ 8] 4003 	push	ar5
      00148C C0 06            [ 8] 4004 	push	ar6
      00148E C0 07            [ 8] 4005 	push	ar7
      001490 C0 00            [ 8] 4006 	push	ar0
      001492 C0 01            [ 8] 4007 	push	ar1
      001494 8B 82            [ 8] 4008 	mov	dpl,r3
      001496 12s00r00r49      [16] 4009 	lcall	_output_digit
      00149A D0 01            [ 8] 4010 	pop	ar1
      00149C D0 00            [ 8] 4011 	pop	ar0
      00149E D0 07            [ 8] 4012 	pop	ar7
      0014A0 D0 06            [ 8] 4013 	pop	ar6
      0014A2 D0 05            [ 8] 4014 	pop	ar5
      0014A4 D0 02            [ 8] 4015 	pop	ar2
      0014A6 80 97            [12] 4016 	sjmp 00226$
      0014A8                       4017 00228$:
                                   4018 ;	printf_large.c:861: if (left_justify)
      0014A8 90s00r00rB8      [12] 4019 	mov	dptr,#__print_format_left_justify_65536_163
      0014AC E0               [ 8] 4020 	movx	a,@dptr
      0014AD 70 04            [12] 4021 	jnz	00745$
      0014AF 02s00r09r06      [16] 4022 	ljmp	00242$
      0014B3                       4023 00745$:
                                   4024 ;	printf_large.c:863: while (width-- > 0)
      0014B3 90s00r00rD1      [12] 4025 	mov	dptr,#__print_format_sloc2_1_0
                                   4026 ;	genAssign: resultIsFar = FALSE
      0014B7 E0               [ 8] 4027 	movx	a,@dptr
      0014B8 FB               [ 4] 4028 	mov	r3,a
      0014B9 A3               [12] 4029 	inc	dptr
      0014BA E0               [ 8] 4030 	movx	a,@dptr
      0014BB FC               [ 4] 4031 	mov	r4,a
      0014BC                       4032 00229$:
                                   4033 ;	genAssign: resultIsFar = FALSE
      0014BC 8B 05            [ 8] 4034 	mov	ar5,r3
      0014BE 8C 06            [ 8] 4035 	mov	ar6,r4
      0014C0 1B               [ 4] 4036 	dec	r3
      0014C1 BB FF 01         [16] 4037 	cjne	r3,#0xff,00746$
      0014C4 1C               [ 4] 4038 	dec	r4
      0014C5                       4039 00746$:
      0014C5 ED               [ 4] 4040 	mov	a,r5
      0014C6 4E               [ 4] 4041 	orl	a,r6
      0014C7 70 04            [12] 4042 	jnz	00747$
      0014C9 02s00r09r06      [16] 4043 	ljmp	00242$
      0014CD                       4044 00747$:
                                   4045 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      0014CD C0 03            [ 8] 4046 	push	ar3
      0014CF C0 04            [ 8] 4047 	push	ar4
      0014D1 75 82 20         [12] 4048 	mov	dpl,#0x20
      0014D4 12s00r00r00      [16] 4049 	lcall	__output_char
      0014D8 D0 04            [ 8] 4050 	pop	ar4
      0014DA D0 03            [ 8] 4051 	pop	ar3
      0014DC 80 DE            [12] 4052 	sjmp 00229$
      0014DE                       4053 00240$:
                                   4054 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      0014DE 8A 82            [ 8] 4055 	mov	dpl,r2
      0014E0 12s00r00r00      [16] 4056 	lcall	__output_char
      0014E4 02s00r09r06      [16] 4057 	ljmp	00242$
      0014E8                       4058 00244$:
                                   4059 ;	printf_large.c:877: return charsOutputted;
      0014E8 75 86 01         [12] 4060 	mov     dps, #1
      0014EB 90s00r00r0D      [12] 4061 	mov     dptr, #_charsOutputted
      0014EF E0               [ 8] 4062 	movx	a,@dptr
      0014F0 F5 82            [ 8] 4063 	mov	dpl,a
      0014F2 A3               [12] 4064 	inc	dptr
      0014F3 E0               [ 8] 4065 	movx	a,@dptr
      0014F4 F5 83            [ 8] 4066 	mov	dph,a
      0014F6 75 86 00         [12] 4067 	mov	dps,#0
      0014F9                       4068 00245$:
                                   4069 ;	printf_large.c:878: }
      0014F9 22               [16] 4070 	ret
                                   4071 	.area CSEG    (CODE)
                                   4072 	.area CONST   (CODE)
                                   4073 	.area CONST   (CODE)
      000000                       4074 ___str_0:
      000000 3C 4E 55 4C 4C 3E     4075 	.ascii "<NULL>"
      000006 00                    4076 	.db 0x00
                                   4077 	.area CSEG    (CODE)
                                   4078 	.area XINIT   (CODE)
                                   4079 	.area CABS    (ABS,CODE)
