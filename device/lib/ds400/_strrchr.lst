                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strrchr
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strrchr_PARM_2
                                     35 	.globl _strrchr
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         48 	.ds 8
                                     49 ;--------------------------------------------------------
                                     50 ; internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DSEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; overlayable items in internal ram
                                     55 ;--------------------------------------------------------
                                     56 ;--------------------------------------------------------
                                     57 ; indirectly addressable internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area ISEG    (DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area IABS    (ABS,DATA)
                                     64 	.area IABS    (ABS,DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; bit data
                                     67 ;--------------------------------------------------------
                                     68 	.area BSEG    (BIT)
                                     69 ;--------------------------------------------------------
                                     70 ; paged external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area PSEG    (PAG,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; uninitialized external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XSEG    (XDATA)
      000000                         77 _strrchr_PARM_2:
      000000                         78 	.ds 1
      000001                         79 _strrchr_start_65536_28:
      000001                         80 	.ds 4
                                     81 ;--------------------------------------------------------
                                     82 ; absolute external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XABS    (ABS,XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; initialized external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XISEG   (XDATA)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'strrchr'
                                    107 ;------------------------------------------------------------
                                    108 ;ch                        Allocated with name '_strrchr_PARM_2'
                                    109 ;string                    Allocated to registers r2 r3 r4 r5 
                                    110 ;start                     Allocated with name '_strrchr_start_65536_28'
                                    111 ;------------------------------------------------------------
                                    112 ;	_strrchr.c:32: char * strrchr ( const char * string, char ch )
                                    113 ;	-----------------------------------------
                                    114 ;	 function strrchr
                                    115 ;	-----------------------------------------
      000000                        116 _strrchr:
                           000002   117 	ar2 = 0x02
                           000003   118 	ar3 = 0x03
                           000004   119 	ar4 = 0x04
                           000005   120 	ar5 = 0x05
                           000006   121 	ar6 = 0x06
                           000007   122 	ar7 = 0x07
                           000000   123 	ar0 = 0x00
                           000001   124 	ar1 = 0x01
      000000 AA 82            [ 8]  125 	mov	r2,dpl
      000002 AB 83            [ 8]  126 	mov	r3,dph
      000004 AC 93            [ 8]  127 	mov	r4,dpx
      000006 AD F0            [ 8]  128 	mov	r5,b
                                    129 ;	_strrchr.c:37: const char * start = string;
                                    130 ;	genAssign: resultIsFar = TRUE
      000008 90s00r00r01      [12]  131 	mov	dptr,#_strrchr_start_65536_28
      00000C EA               [ 4]  132 	mov	a,r2
      00000D F0               [ 8]  133 	movx	@dptr,a
      00000E A3               [12]  134 	inc	dptr
      00000F EB               [ 4]  135 	mov	a,r3
      000010 F0               [ 8]  136 	movx	@dptr,a
      000011 A3               [12]  137 	inc	dptr
      000012 EC               [ 4]  138 	mov	a,r4
      000013 F0               [ 8]  139 	movx	@dptr,a
      000014 A3               [12]  140 	inc	dptr
      000015 ED               [ 4]  141 	mov	a,r5
      000016 F0               [ 8]  142 	movx	@dptr,a
                                    143 ;	_strrchr.c:39: while (*string++)                       /* find end of string */
                                    144 ;	genAssign: resultIsFar = FALSE
      000017                        145 00101$:
      000017 8A 82            [ 8]  146 	mov	dpl,r2
      000019 8B 83            [ 8]  147 	mov	dph,r3
      00001B 8C 93            [ 8]  148 	mov	dpx,r4
      00001D 8D F0            [ 8]  149 	mov	b,r5
      00001F 12s00r00r00      [16]  150 	lcall	__gptrget
      000023 FE               [ 4]  151 	mov	r6,a
      000024 A3               [12]  152 	inc	dptr
      000025 AA 82            [ 8]  153 	mov	r2,dpl
      000027 AB 83            [ 8]  154 	mov	r3,dph
      000029 AC 93            [ 8]  155 	mov	r4,dpx
      00002B AD F0            [ 8]  156 	mov	r5,b
      00002D EE               [ 4]  157 	mov	a,r6
      00002E 70 E7            [12]  158 	jnz  00101$
      000030                        159 00133$:
                                    160 ;	_strrchr.c:42: while (--string != start && *string != ch)
                                    161 ;	genAssign: resultIsFar = FALSE
      000030                        162 00105$:
      000030 1A               [ 4]  163 	dec	r2
      000031 BA FF 05         [16]  164 	cjne	r2,#0xff,00134$
      000034 1B               [ 4]  165 	dec	r3
      000035 BB FF 01         [16]  166 	cjne	r3,#0xff,00134$
      000038 1C               [ 4]  167 	dec	r4
      000039                        168 00134$:
      000039 90s00r00r01      [12]  169 	mov	dptr,#_strrchr_start_65536_28
      00003D C0 02            [ 8]  170 	push	ar2
      00003F C0 03            [ 8]  171 	push	ar3
      000041 C0 04            [ 8]  172 	push	ar4
      000043 C0 05            [ 8]  173 	push	ar5
      000045 E0               [ 8]  174 	movx	a,@dptr
      000046 C0 E0            [ 8]  175 	push	acc
      000048 A3               [12]  176 	inc	dptr
      000049 E0               [ 8]  177 	movx	a,@dptr
      00004A C0 E0            [ 8]  178 	push	acc
      00004C A3               [12]  179 	inc	dptr
      00004D E0               [ 8]  180 	movx	a,@dptr
      00004E C0 E0            [ 8]  181 	push	acc
      000050 A3               [12]  182 	inc	dptr
      000051 E0               [ 8]  183 	movx	a,@dptr
      000052 F5 F0            [ 8]  184 	mov	b,a
      000054 D0 93            [ 8]  185 	pop	dpx
      000056 D0 83            [ 8]  186 	pop	dph
      000058 D0 82            [ 8]  187 	pop	dpl
      00005A 12s00r00r00      [16]  188 	lcall	___gptr_cmp
      00005E 15 81            [ 8]  189 	dec	sp
      000060 15 81            [ 8]  190 	dec	sp
      000062 15 81            [ 8]  191 	dec	sp
      000064 15 81            [ 8]  192 	dec	sp
      000066 60 17            [12]  193 	jz  00107$
      000068                        194 00135$:
      000068 8A 82            [ 8]  195 	mov	dpl,r2
      00006A 8B 83            [ 8]  196 	mov	dph,r3
      00006C 8C 93            [ 8]  197 	mov	dpx,r4
      00006E 8D F0            [ 8]  198 	mov	b,r5
      000070 12s00r00r00      [16]  199 	lcall	__gptrget
      000074 FE               [ 4]  200 	mov	r6,a
      000075 90s00r00r00      [12]  201 	mov	dptr,#_strrchr_PARM_2
      000079 8E F0            [ 8]  202 	mov	b,r6
      00007B E0               [ 8]  203 	movx	a,@dptr
      00007C B5 F0 B1         [16]  204 	cjne a,b,00105$
      00007F                        205 00137$:
      00007F                        206 00107$:
                                    207 ;	_strrchr.c:45: if (*string == ch)                      /* char found ? */
      00007F 8A 82            [ 8]  208 	mov	dpl,r2
      000081 8B 83            [ 8]  209 	mov	dph,r3
      000083 8C 93            [ 8]  210 	mov	dpx,r4
      000085 8D F0            [ 8]  211 	mov	b,r5
      000087 12s00r00r00      [16]  212 	lcall	__gptrget
      00008B FE               [ 4]  213 	mov	r6,a
      00008C 90s00r00r00      [12]  214 	mov	dptr,#_strrchr_PARM_2
      000090 8E F0            [ 8]  215 	mov	b,r6
      000092 E0               [ 8]  216 	movx	a,@dptr
      000093 B5 F0 0A         [16]  217 	cjne a,b,00109$
      000096                        218 00139$:
                                    219 ;	_strrchr.c:46: return( (char *)string );
      000096 8A 82            [ 8]  220 	mov	dpl,r2
      000098 8B 83            [ 8]  221 	mov	dph,r3
      00009A 8C 93            [ 8]  222 	mov	dpx,r4
      00009C 8D F0            [ 8]  223 	mov	b,r5
      00009E 80 07            [12]  224 	sjmp 00110$
      0000A0                        225 00109$:
                                    226 ;	_strrchr.c:48: return (NULL) ;
      0000A0 90 00 00 00      [12]  227 	mov  dptr,#0x0000
      0000A4 75 F0 00         [12]  228 	mov	b,#0x00
      0000A7                        229 00110$:
                                    230 ;	_strrchr.c:49: }
      0000A7 22               [16]  231 	ret
                                    232 	.area CSEG    (CODE)
                                    233 	.area CONST   (CODE)
                                    234 	.area XINIT   (CODE)
                                    235 	.area CABS    (ABS,CODE)
