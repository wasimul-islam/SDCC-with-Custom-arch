                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strdup
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _malloc
                                     35 	.globl _strlen
                                     36 	.globl _strcpy
                                     37 	.globl _strdup
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; special function bits
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; overlayable register banks
                                     46 ;--------------------------------------------------------
                                     47 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         48 	.ds 8
                                     49 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         50 	.ds 8
                                     51 ;--------------------------------------------------------
                                     52 ; internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DSEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; overlayable items in internal ram
                                     57 ;--------------------------------------------------------
                                     58 ;--------------------------------------------------------
                                     59 ; indirectly addressable internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area ISEG    (DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute internal ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area IABS    (ABS,DATA)
                                     66 	.area IABS    (ABS,DATA)
                                     67 ;--------------------------------------------------------
                                     68 ; bit data
                                     69 ;--------------------------------------------------------
                                     70 	.area BSEG    (BIT)
                                     71 ;--------------------------------------------------------
                                     72 ; paged external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area PSEG    (PAG,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; uninitialized external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XSEG    (XDATA)
                                     79 ;--------------------------------------------------------
                                     80 ; absolute external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XABS    (ABS,XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; initialized external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area XISEG   (XDATA)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'strdup'
                                    105 ;------------------------------------------------------------
                                    106 ;s                         Allocated to registers r2 r3 r4 r5 
                                    107 ;r                         Allocated to registers r6 r7 r0 r1 
                                    108 ;------------------------------------------------------------
                                    109 ;	strdup.c:33: char *strdup (const char *s)
                                    110 ;	-----------------------------------------
                                    111 ;	 function strdup
                                    112 ;	-----------------------------------------
      000000                        113 _strdup:
                           000002   114 	ar2 = 0x02
                           000003   115 	ar3 = 0x03
                           000004   116 	ar4 = 0x04
                           000005   117 	ar5 = 0x05
                           000006   118 	ar6 = 0x06
                           000007   119 	ar7 = 0x07
                           000000   120 	ar0 = 0x00
                           000001   121 	ar1 = 0x01
      000000 AA 82            [ 8]  122 	mov	r2,dpl
      000002 AB 83            [ 8]  123 	mov	r3,dph
      000004 AC 93            [ 8]  124 	mov	r4,dpx
      000006 AD F0            [ 8]  125 	mov	r5,b
                                    126 ;	strdup.c:35: char *r = malloc(strlen(s) + 1);
      000008 C0 02            [ 8]  127 	push	ar2
      00000A C0 03            [ 8]  128 	push	ar3
      00000C C0 04            [ 8]  129 	push	ar4
      00000E C0 05            [ 8]  130 	push	ar5
      000010 8A 82            [ 8]  131 	mov	dpl,r2
      000012 8B 83            [ 8]  132 	mov	dph,r3
      000014 8C 93            [ 8]  133 	mov	dpx,r4
      000016 8D F0            [ 8]  134 	mov	b,r5
      000018 12s00r00r00      [16]  135 	lcall	_strlen
      00001C AE 82            [ 8]  136 	mov	r6,dpl
      00001E AF 83            [ 8]  137 	mov	r7,dph
      000020 D0 05            [ 8]  138 	pop	ar5
      000022 D0 04            [ 8]  139 	pop	ar4
      000024 D0 03            [ 8]  140 	pop	ar3
      000026 D0 02            [ 8]  141 	pop	ar2
      000028 0E               [ 4]  142 	inc	r6
      000029 BE 00 01         [16]  143 	cjne	r6,#0x00,00109$
      00002C 0F               [ 4]  144 	inc	r7
      00002D                        145 00109$:
      00002D C0 02            [ 8]  146 	push	ar2
      00002F C0 03            [ 8]  147 	push	ar3
      000031 C0 04            [ 8]  148 	push	ar4
      000033 C0 05            [ 8]  149 	push	ar5
      000035 8E 82            [ 8]  150 	mov	dpl,r6
      000037 8F 83            [ 8]  151 	mov	dph,r7
      000039 12s00r00r00      [16]  152 	lcall	_malloc
      00003D AE 82            [ 8]  153 	mov	r6,dpl
      00003F AF 83            [ 8]  154 	mov	r7,dph
      000041 A8 93            [ 8]  155 	mov	r0,dpx
      000043 D0 05            [ 8]  156 	pop	ar5
      000045 D0 04            [ 8]  157 	pop	ar4
      000047 D0 03            [ 8]  158 	pop	ar3
      000049 D0 02            [ 8]  159 	pop	ar2
      00004B 79 00            [ 8]  160 	mov	r1,#0x00
                                    161 ;	strdup.c:36: if (r)
      00004D EE               [ 4]  162 	mov	a,r6
      00004E 4F               [ 4]  163 	orl	a,r7
      00004F 48               [ 4]  164 	orl	a,r0
      000050 60 2B            [12]  165 	jz  00102$
      000052                        166 00110$:
                                    167 ;	strdup.c:37: strcpy(r, s);
                                    168 ;	genAssign: resultIsFar = TRUE
      000052 90s00r00r00      [12]  169 	mov	dptr,#_strcpy_PARM_2
      000056 EA               [ 4]  170 	mov	a,r2
      000057 F0               [ 8]  171 	movx	@dptr,a
      000058 A3               [12]  172 	inc	dptr
      000059 EB               [ 4]  173 	mov	a,r3
      00005A F0               [ 8]  174 	movx	@dptr,a
      00005B A3               [12]  175 	inc	dptr
      00005C EC               [ 4]  176 	mov	a,r4
      00005D F0               [ 8]  177 	movx	@dptr,a
      00005E A3               [12]  178 	inc	dptr
      00005F ED               [ 4]  179 	mov	a,r5
      000060 F0               [ 8]  180 	movx	@dptr,a
      000061 C0 06            [ 8]  181 	push	ar6
      000063 C0 07            [ 8]  182 	push	ar7
      000065 C0 00            [ 8]  183 	push	ar0
      000067 C0 01            [ 8]  184 	push	ar1
      000069 8E 82            [ 8]  185 	mov	dpl,r6
      00006B 8F 83            [ 8]  186 	mov	dph,r7
      00006D 88 93            [ 8]  187 	mov	dpx,r0
      00006F 89 F0            [ 8]  188 	mov	b,r1
      000071 12s00r00r00      [16]  189 	lcall	_strcpy
      000075 D0 01            [ 8]  190 	pop	ar1
      000077 D0 00            [ 8]  191 	pop	ar0
      000079 D0 07            [ 8]  192 	pop	ar7
      00007B D0 06            [ 8]  193 	pop	ar6
      00007D                        194 00102$:
                                    195 ;	strdup.c:38: return (r);
      00007D 8E 82            [ 8]  196 	mov	dpl,r6
      00007F 8F 83            [ 8]  197 	mov	dph,r7
      000081 88 93            [ 8]  198 	mov	dpx,r0
      000083 89 F0            [ 8]  199 	mov	b,r1
      000085                        200 00103$:
                                    201 ;	strdup.c:39: }
      000085 22               [16]  202 	ret
                                    203 	.area CSEG    (CODE)
                                    204 	.area CONST   (CODE)
                                    205 	.area XINIT   (CODE)
                                    206 	.area CABS    (ABS,CODE)
