                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl __print_format
                                     35 	.globl _vsprintf_PARM_3
                                     36 	.globl _vsprintf_PARM_2
                                     37 	.globl _vsprintf
                                     38 	.globl _sprintf
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                           000080    42 _P4	=	0x0080
                           000081    43 _SP	=	0x0081
                           000082    44 _DPL	=	0x0082
                           000083    45 _DPH	=	0x0083
                           000084    46 _DPL1	=	0x0084
                           000085    47 _DPH1	=	0x0085
                           000086    48 _DPS	=	0x0086
                           000087    49 _PCON	=	0x0087
                           000088    50 _TCON	=	0x0088
                           000089    51 _TMOD	=	0x0089
                           00008A    52 _TL0	=	0x008a
                           00008B    53 _TL1	=	0x008b
                           00008C    54 _TH0	=	0x008c
                           00008D    55 _TH1	=	0x008d
                           00008E    56 _CKCON	=	0x008e
                           000090    57 _P1	=	0x0090
                           000091    58 _EXIF	=	0x0091
                           000092    59 _P4CNT	=	0x0092
                           000093    60 _DPX	=	0x0093
                           000095    61 _DPX1	=	0x0095
                           000098    62 _SCON0	=	0x0098
                           000099    63 _SBUF0	=	0x0099
                           00009B    64 _ESP	=	0x009b
                           00009C    65 _AP	=	0x009c
                           00009D    66 _ACON	=	0x009d
                           0000A0    67 _P2	=	0x00a0
                           0000A1    68 _P5	=	0x00a1
                           0000A2    69 _P5CNT	=	0x00a2
                           0000A8    70 _IE	=	0x00a8
                           0000B0    71 _P3	=	0x00b0
                           0000B8    72 _IP	=	0x00b8
                           0000C0    73 _SCON1	=	0x00c0
                           0000C1    74 _SBUF1	=	0x00c1
                           0000C4    75 _PMR	=	0x00c4
                           0000C6    76 _MCON	=	0x00c6
                           0000C7    77 _TA	=	0x00c7
                           0000C8    78 _T2CON	=	0x00c8
                           0000C9    79 _T2MOD	=	0x00c9
                           0000CA    80 _RCAP2L	=	0x00ca
                           0000CA    81 _RTL2	=	0x00ca
                           0000CB    82 _RCAP2H	=	0x00cb
                           0000CB    83 _RTH2	=	0x00cb
                           0000CC    84 _TL2	=	0x00cc
                           0000CD    85 _TH2	=	0x00cd
                           0000D0    86 _PSW	=	0x00d0
                           0000D1    87 _MCNT0	=	0x00d1
                           0000D2    88 _MCNT1	=	0x00d2
                           0000D3    89 _MA	=	0x00d3
                           0000D4    90 _MB	=	0x00d4
                           0000D5    91 _MC	=	0x00d5
                           0000D8    92 _WDCON	=	0x00d8
                           0000E0    93 _ACC	=	0x00e0
                           0000E8    94 _EIE	=	0x00e8
                           0000EA    95 _MXAX	=	0x00ea
                           0000F0    96 _B	=	0x00f0
                           0000F8    97 _EIP	=	0x00f8
                           008C8A    98 _TMR0	=	0x8c8a
                           008D8B    99 _TMR1	=	0x8d8b
                           00CDCC   100 _TMR2	=	0xcdcc
                           00CBCA   101 _RCAP2	=	0xcbca
                                    102 ;--------------------------------------------------------
                                    103 ; special function bits
                                    104 ;--------------------------------------------------------
                           000088   105 _IT0	=	0x0088
                           000089   106 _IE0	=	0x0089
                           00008A   107 _IT1	=	0x008a
                           00008B   108 _IE1	=	0x008b
                           00008C   109 _TR0	=	0x008c
                           00008D   110 _TF0	=	0x008d
                           00008E   111 _TR1	=	0x008e
                           00008F   112 _TF1	=	0x008f
                           000090   113 _T2	=	0x0090
                           000091   114 _T2EX	=	0x0091
                           000092   115 _RXD1	=	0x0092
                           000093   116 _TXD1	=	0x0093
                           000094   117 _INT2	=	0x0094
                           000095   118 _INT3	=	0x0095
                           000096   119 _INT4	=	0x0096
                           000097   120 _INT5	=	0x0097
                           000098   121 _RI_0	=	0x0098
                           000099   122 _TI_0	=	0x0099
                           00009A   123 _RB8_0	=	0x009a
                           00009B   124 _TB8_0	=	0x009b
                           00009C   125 _REN_0	=	0x009c
                           00009D   126 _SM2_0	=	0x009d
                           00009E   127 _SM1_0	=	0x009e
                           00009F   128 _SM0_0	=	0x009f
                           00009F   129 _FE_0	=	0x009f
                           0000A8   130 _EX0	=	0x00a8
                           0000A9   131 _ET0	=	0x00a9
                           0000AA   132 _EX1	=	0x00aa
                           0000AB   133 _ET1	=	0x00ab
                           0000AC   134 _ES0	=	0x00ac
                           0000AD   135 _ET2	=	0x00ad
                           0000AE   136 _ES1	=	0x00ae
                           0000AF   137 _EA	=	0x00af
                           0000B0   138 _RXD0	=	0x00b0
                           0000B1   139 _TXD0	=	0x00b1
                           0000B2   140 _INT0	=	0x00b2
                           0000B3   141 _INT1	=	0x00b3
                           0000B4   142 _T0	=	0x00b4
                           0000B5   143 _T1	=	0x00b5
                           0000B6   144 _WR	=	0x00b6
                           0000B7   145 _RD	=	0x00b7
                           0000B8   146 _PX0	=	0x00b8
                           0000B9   147 _PT0	=	0x00b9
                           0000BA   148 _PX1	=	0x00ba
                           0000BB   149 _PT1	=	0x00bb
                           0000BC   150 _PS0	=	0x00bc
                           0000BD   151 _PT2	=	0x00bd
                           0000BE   152 _PS1	=	0x00be
                           0000C0   153 _RI_1	=	0x00c0
                           0000C1   154 _TI_1	=	0x00c1
                           0000C2   155 _RB8_1	=	0x00c2
                           0000C3   156 _TB8_1	=	0x00c3
                           0000C4   157 _REN_1	=	0x00c4
                           0000C5   158 _SM2_1	=	0x00c5
                           0000C6   159 _SM1_1	=	0x00c6
                           0000C7   160 _SM0_1	=	0x00c7
                           0000C7   161 _FE_1	=	0x00c7
                           0000C8   162 _CP_RL	=	0x00c8
                           0000C9   163 _C_T	=	0x00c9
                           0000CA   164 _TR2	=	0x00ca
                           0000CB   165 _EXEN2	=	0x00cb
                           0000CC   166 _TCLK	=	0x00cc
                           0000CD   167 _RCLK	=	0x00cd
                           0000CE   168 _EXF2	=	0x00ce
                           0000CF   169 _TF2	=	0x00cf
                           0000D0   170 _P	=	0x00d0
                           0000D1   171 _F1	=	0x00d1
                           0000D2   172 _OV	=	0x00d2
                           0000D3   173 _RS0	=	0x00d3
                           0000D4   174 _RS1	=	0x00d4
                           0000D5   175 _F0	=	0x00d5
                           0000D6   176 _AC	=	0x00d6
                           0000D7   177 _CY	=	0x00d7
                           0000D8   178 _RWT	=	0x00d8
                           0000D9   179 _EWT	=	0x00d9
                           0000DA   180 _WDRF	=	0x00da
                           0000DB   181 _WDIF	=	0x00db
                           0000DC   182 _PFI	=	0x00dc
                           0000DD   183 _EPFI	=	0x00dd
                           0000DE   184 _POR	=	0x00de
                           0000DF   185 _SMOD_1	=	0x00df
                           0000E8   186 _EX2	=	0x00e8
                           0000E9   187 _EX3	=	0x00e9
                           0000EA   188 _EX4	=	0x00ea
                           0000EB   189 _EX5	=	0x00eb
                           0000EC   190 _EWDI	=	0x00ec
                           0000ED   191 _C1IE	=	0x00ed
                           0000EE   192 _C0IE	=	0x00ee
                           0000EF   193 _CANBIE	=	0x00ef
                           0000F8   194 _PX2	=	0x00f8
                           0000F9   195 _PX3	=	0x00f9
                           0000FA   196 _PX4	=	0x00fa
                           0000FB   197 _PX5	=	0x00fb
                           0000FC   198 _PWDI	=	0x00fc
                           0000FD   199 _C1IP	=	0x00fd
                           0000FE   200 _C0IP	=	0x00fe
                           0000FF   201 _CANBIP	=	0x00ff
                                    202 ;--------------------------------------------------------
                                    203 ; overlayable register banks
                                    204 ;--------------------------------------------------------
                                    205 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        206 	.ds 8
                                    207 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        208 	.ds 8
                                    209 ;--------------------------------------------------------
                                    210 ; internal ram data
                                    211 ;--------------------------------------------------------
                                    212 	.area DSEG    (DATA)
                                    213 ;--------------------------------------------------------
                                    214 ; overlayable items in internal ram
                                    215 ;--------------------------------------------------------
                                    216 ;--------------------------------------------------------
                                    217 ; indirectly addressable internal ram data
                                    218 ;--------------------------------------------------------
                                    219 	.area ISEG    (DATA)
                                    220 ;--------------------------------------------------------
                                    221 ; absolute internal ram data
                                    222 ;--------------------------------------------------------
                                    223 	.area IABS    (ABS,DATA)
                                    224 	.area IABS    (ABS,DATA)
                                    225 ;--------------------------------------------------------
                                    226 ; bit data
                                    227 ;--------------------------------------------------------
                                    228 	.area BSEG    (BIT)
                                    229 ;--------------------------------------------------------
                                    230 ; paged external ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area PSEG    (PAG,XDATA)
                                    233 ;--------------------------------------------------------
                                    234 ; uninitialized external ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area XSEG    (XDATA)
      000000                        237 _vsprintf_PARM_2:
      000000                        238 	.ds 4
      000004                        239 _vsprintf_PARM_3:
      000004                        240 	.ds 4
      000008                        241 _vsprintf_buf_65536_63:
      000008                        242 	.ds 4
                                    243 ;--------------------------------------------------------
                                    244 ; absolute external ram data
                                    245 ;--------------------------------------------------------
                                    246 	.area XABS    (ABS,XDATA)
                                    247 ;--------------------------------------------------------
                                    248 ; initialized external ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area XISEG   (XDATA)
                                    251 ;--------------------------------------------------------
                                    252 ; global & static initialisations
                                    253 ;--------------------------------------------------------
                                    254 	.area HOME    (CODE)
                                    255 	.area GSINIT  (CODE)
                                    256 	.area GSFINAL (CODE)
                                    257 	.area GSINIT  (CODE)
                                    258 ;--------------------------------------------------------
                                    259 ; Home
                                    260 ;--------------------------------------------------------
                                    261 	.area HOME    (CODE)
                                    262 	.area HOME    (CODE)
                                    263 ;--------------------------------------------------------
                                    264 ; code
                                    265 ;--------------------------------------------------------
                                    266 	.area CSEG    (CODE)
                                    267 ;------------------------------------------------------------
                                    268 ;Allocation info for local variables in function 'put_char_to_string'
                                    269 ;------------------------------------------------------------
                                    270 ;p                         Allocated to stack - _bp -8
                                    271 ;c                         Allocated to stack - _bp +1
                                    272 ;buf                       Allocated to registers 
                                    273 ;------------------------------------------------------------
                                    274 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    275 ;	-----------------------------------------
                                    276 ;	 function put_char_to_string
                                    277 ;	-----------------------------------------
      000000                        278 _put_char_to_string:
                           000002   279 	ar2 = 0x02
                           000003   280 	ar3 = 0x03
                           000004   281 	ar4 = 0x04
                           000005   282 	ar5 = 0x05
                           000006   283 	ar6 = 0x06
                           000007   284 	ar7 = 0x07
                           000000   285 	ar0 = 0x00
                           000001   286 	ar1 = 0x01
      000000 C0*00            [ 8]  287 	push	_bpx
      000002 C0*01            [ 8]  288 	push	_bpx+1
      000004 85 81*00         [12]  289 	mov	_bpx,sp
      000007 85 9B*01         [12]  290 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  291 	anl	_bpx+1,#3
      00000D 43*01 DC         [12]  292 	orl	_bpx+1,#0xdc
      000010 C0 E0            [ 8]  293 	push	acc
      000012 75 95 FF         [12]  294 	mov	dpx1,#0xff
      000015 85*01 85         [12]  295 	mov	dph1,_bpx+1
      000018 85*00 84         [12]  296 	mov	dpl1,_bpx
      00001B 75 86 01         [12]  297 	mov	dps,#1
      00001E A3               [12]  298 	inc	dptr
      00001F 75 86 01         [12]  299 	mov	dps, #1
      000022 E5 82            [ 8]  300 	mov	a,dpl
      000024 F0               [ 8]  301 	movx	@dptr,a
      000025 75 86 00         [12]  302 	mov	dps,#0
                                    303 ;	sprintf.c:36: char **buf = (char **)p;
      000028 E5*00            [ 8]  304 	mov	a,_bpx
      00002A C3               [ 4]  305 	clr	c
      00002B 94 08            [ 8]  306 	subb	a,#0x08
      00002D F5 82            [ 8]  307 	mov	dpl,a
      00002F E5*01            [ 8]  308 	mov	a,_bpx+1
      000031 94 00            [ 8]  309 	subb	a,#0x00
      000033 F5 83            [ 8]  310 	mov	dph,a
      000035 75 93 FF         [12]  311 	mov	dpx,#0xff
                                    312 ;	genAssign: resultIsFar = FALSE
      000038 E0               [ 8]  313 	movx	a,@dptr
      000039 FB               [ 4]  314 	mov	r3,a
      00003A A3               [12]  315 	inc	dptr
      00003B E0               [ 8]  316 	movx	a,@dptr
      00003C FC               [ 4]  317 	mov	r4,a
      00003D A3               [12]  318 	inc	dptr
      00003E E0               [ 8]  319 	movx	a,@dptr
      00003F FD               [ 4]  320 	mov	r5,a
      000040 A3               [12]  321 	inc	dptr
      000041 E0               [ 8]  322 	movx	a,@dptr
      000042 FE               [ 4]  323 	mov	r6,a
      000043 8B 82            [ 8]  324 	mov	dpl,r3
      000045 8C 83            [ 8]  325 	mov	dph,r4
      000047 8D 93            [ 8]  326 	mov	dpx,r5
      000049 8E F0            [ 8]  327 	mov	b,r6
                                    328 ;	sprintf.c:37: *(*buf)++ = c;
      00004B 12s00r00r00      [16]  329 	lcall	__gptrgetWord
      00004F FB               [ 4]  330 	mov	r3,a
      000050 AC 9C            [ 8]  331 	mov	r4,acc1
      000052 A3               [12]  332 	inc	dptr
      000053 12s00r00r00      [16]  333 	lcall	__gptrgetWord
      000057 FD               [ 4]  334 	mov	r5,a
      000058 AE 9C            [ 8]  335 	mov	r6,acc1
      00005A 12s00r00r00      [16]  336 	lcall	__decdptr
      00005E 12s00r00r00      [16]  337 	lcall	__decdptr
      000062 12s00r00r00      [16]  338 	lcall	__decdptr
      000066 74 01            [ 8]  339 	mov	a,#0x01
      000068 2B               [ 4]  340 	add	a,r3
      000069 FF               [ 4]  341 	mov	r7,a
      00006A E4               [ 4]  342 	clr	a
      00006B 3C               [ 4]  343 	addc	a,r4
      00006C F8               [ 4]  344 	mov	r0,a
      00006D E4               [ 4]  345 	clr	a
      00006E 3D               [ 4]  346 	addc	a,r5
      00006F F9               [ 4]  347 	mov	r1,a
      000070 8E 02            [ 8]  348 	mov	ar2,r6
      000072 8F 9C            [ 8]  349 	mov	acc1, r7
      000074 E8               [ 4]  350 	mov	a,r0
      000075 12s00r00r00      [16]  351 	lcall	__gptrputWord
      000079 A3               [12]  352 	inc	dptr
      00007A 89 9C            [ 8]  353 	mov	acc1, r1
      00007C EA               [ 4]  354 	mov	a,r2
      00007D 12s00r00r00      [16]  355 	lcall	__gptrputWord
      000081 8B 82            [ 8]  356 	mov	dpl,r3
      000083 8C 83            [ 8]  357 	mov	dph,r4
      000085 8D 93            [ 8]  358 	mov	dpx,r5
      000087 8E F0            [ 8]  359 	mov	b,r6
      000089 75 95 FF         [12]  360 	mov	dpx1,#0xff
      00008C 85*01 85         [12]  361 	mov	dph1,_bpx+1
      00008F 85*00 84         [12]  362 	mov	dpl1,_bpx
      000092 75 86 01         [12]  363 	mov	dps,#1
      000095 A3               [12]  364 	inc	dptr
      000096 75 86 01         [12]  365 	mov	dps, #1
      000099 E0               [ 8]  366 	movx	a,@dptr
      00009A 15 86            [ 8]  367 	dec	dps
      00009C 12s00r00r00      [16]  368 	lcall	__gptrput
      0000A0                        369 00101$:
                                    370 ;	sprintf.c:38: }
      0000A0 85*00 81         [12]  371 	mov	sp,_bpx
      0000A3 85*01 9B         [12]  372 	mov	esp,_bpx+1
      0000A6 D0*01            [ 8]  373 	pop	_bpx+1
      0000A8 D0*00            [ 8]  374 	pop	_bpx
      0000AA 22               [16]  375 	ret
                                    376 ;------------------------------------------------------------
                                    377 ;Allocation info for local variables in function 'vsprintf'
                                    378 ;------------------------------------------------------------
                                    379 ;format                    Allocated with name '_vsprintf_PARM_2'
                                    380 ;ap                        Allocated with name '_vsprintf_PARM_3'
                                    381 ;buf                       Allocated with name '_vsprintf_buf_65536_63'
                                    382 ;i                         Allocated to registers r2 r3 
                                    383 ;------------------------------------------------------------
                                    384 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    385 ;	-----------------------------------------
                                    386 ;	 function vsprintf
                                    387 ;	-----------------------------------------
      0000AB                        388 _vsprintf:
      0000AB 75 86 01         [12]  389 	mov     dps, #1
      0000AE 90s00r00r08      [12]  390 	mov     dptr, #_vsprintf_buf_65536_63
      0000B2 E5 82            [ 8]  391 	mov	a,dpl
      0000B4 F0               [ 8]  392 	movx	@dptr,a
      0000B5 A3               [12]  393 	inc	dptr
      0000B6 E5 83            [ 8]  394 	mov	a,dph
      0000B8 F0               [ 8]  395 	movx	@dptr,a
      0000B9 A3               [12]  396 	inc	dptr
      0000BA E5 93            [ 8]  397 	mov	a,dpx
      0000BC F0               [ 8]  398 	movx	@dptr,a
      0000BD A3               [12]  399 	inc	dptr
      0000BE E5 F0            [ 8]  400 	mov	a,b
      0000C0 F0               [ 8]  401 	movx	@dptr,a
      0000C1 75 86 00         [12]  402 	mov	dps,#0
                                    403 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      0000C4 90s00r00r00      [12]  404 	mov	dptr,#_vsprintf_PARM_2
                                    405 ;	genAssign: resultIsFar = FALSE
      0000C8 E0               [ 8]  406 	movx	a,@dptr
      0000C9 FA               [ 4]  407 	mov	r2,a
      0000CA A3               [12]  408 	inc	dptr
      0000CB E0               [ 8]  409 	movx	a,@dptr
      0000CC FB               [ 4]  410 	mov	r3,a
      0000CD A3               [12]  411 	inc	dptr
      0000CE E0               [ 8]  412 	movx	a,@dptr
      0000CF FC               [ 4]  413 	mov	r4,a
      0000D0 A3               [12]  414 	inc	dptr
      0000D1 E0               [ 8]  415 	movx	a,@dptr
      0000D2 FD               [ 4]  416 	mov	r5,a
      0000D3 90s00r00r04      [12]  417 	mov	dptr,#_vsprintf_PARM_3
                                    418 ;	genAssign: resultIsFar = FALSE
      0000D7 E0               [ 8]  419 	movx	a,@dptr
      0000D8 FE               [ 4]  420 	mov	r6,a
      0000D9 A3               [12]  421 	inc	dptr
      0000DA E0               [ 8]  422 	movx	a,@dptr
      0000DB FF               [ 4]  423 	mov	r7,a
      0000DC A3               [12]  424 	inc	dptr
      0000DD E0               [ 8]  425 	movx	a,@dptr
      0000DE F8               [ 4]  426 	mov	r0,a
      0000DF A3               [12]  427 	inc	dptr
      0000E0 E0               [ 8]  428 	movx	a,@dptr
      0000E1 F9               [ 4]  429 	mov	r1,a
                                    430 ;	genAssign: resultIsFar = TRUE
      0000E2 90s00r00r00      [12]  431 	mov	dptr,#__print_format_PARM_2
      0000E6 74r08            [ 8]  432 	mov	a,#_vsprintf_buf_65536_63
      0000E8 F0               [ 8]  433 	movx	@dptr,a
      0000E9 A3               [12]  434 	inc	dptr
      0000EA 74s00            [ 8]  435 	mov	a,#(_vsprintf_buf_65536_63 >> 8)
      0000EC F0               [ 8]  436 	movx	@dptr,a
      0000ED A3               [12]  437 	inc	dptr
      0000EE 74s00            [ 8]  438 	mov	a,#(_vsprintf_buf_65536_63 >> 16)
      0000F0 F0               [ 8]  439 	movx	@dptr,a
      0000F1 A3               [12]  440 	inc	dptr
      0000F2 E4               [ 4]  441 	clr	a
      0000F3 F0               [ 8]  442 	movx	@dptr,a
                                    443 ;	genAssign: resultIsFar = TRUE
      0000F4 90s00r00r00      [12]  444 	mov	dptr,#__print_format_PARM_3
      0000F8 EA               [ 4]  445 	mov	a,r2
      0000F9 F0               [ 8]  446 	movx	@dptr,a
      0000FA A3               [12]  447 	inc	dptr
      0000FB EB               [ 4]  448 	mov	a,r3
      0000FC F0               [ 8]  449 	movx	@dptr,a
      0000FD A3               [12]  450 	inc	dptr
      0000FE EC               [ 4]  451 	mov	a,r4
      0000FF F0               [ 8]  452 	movx	@dptr,a
      000100 A3               [12]  453 	inc	dptr
      000101 ED               [ 4]  454 	mov	a,r5
      000102 F0               [ 8]  455 	movx	@dptr,a
                                    456 ;	genAssign: resultIsFar = TRUE
      000103 90s00r00r00      [12]  457 	mov	dptr,#__print_format_PARM_4
      000107 EE               [ 4]  458 	mov	a,r6
      000108 F0               [ 8]  459 	movx	@dptr,a
      000109 A3               [12]  460 	inc	dptr
      00010A EF               [ 4]  461 	mov	a,r7
      00010B F0               [ 8]  462 	movx	@dptr,a
      00010C A3               [12]  463 	inc	dptr
      00010D E8               [ 4]  464 	mov	a,r0
      00010E F0               [ 8]  465 	movx	@dptr,a
      00010F A3               [12]  466 	inc	dptr
      000110 E9               [ 4]  467 	mov	a,r1
      000111 F0               [ 8]  468 	movx	@dptr,a
      000112 90s00r00r00      [12]  469 	mov dptr,#_put_char_to_string
      000116 12s00r00r00      [16]  470 	lcall	__print_format
      00011A AA 82            [ 8]  471 	mov	r2,dpl
      00011C AB 83            [ 8]  472 	mov	r3,dph
                                    473 ;	genAssign: resultIsFar = TRUE
      00011E 8A 84            [ 8]  474 	mov	dpl1,r2
      000120 8B 85            [ 8]  475 	mov	dph1,r3
                                    476 ;	sprintf.c:45: *buf = 0;
      000122 90s00r00r08      [12]  477 	mov	dptr,#_vsprintf_buf_65536_63
                                    478 ;	genAssign: resultIsFar = FALSE
      000126 E0               [ 8]  479 	movx	a,@dptr
      000127 FC               [ 4]  480 	mov	r4,a
      000128 A3               [12]  481 	inc	dptr
      000129 E0               [ 8]  482 	movx	a,@dptr
      00012A FD               [ 4]  483 	mov	r5,a
      00012B A3               [12]  484 	inc	dptr
      00012C E0               [ 8]  485 	movx	a,@dptr
      00012D FE               [ 4]  486 	mov	r6,a
      00012E A3               [12]  487 	inc	dptr
      00012F E0               [ 8]  488 	movx	a,@dptr
      000130 FF               [ 4]  489 	mov	r7,a
      000131 8C 82            [ 8]  490 	mov	dpl,r4
      000133 8D 83            [ 8]  491 	mov	dph,r5
      000135 8E 93            [ 8]  492 	mov	dpx,r6
      000137 8F F0            [ 8]  493 	mov	b,r7
      000139 E4               [ 4]  494 	clr	a
      00013A 12s00r00r00      [16]  495 	lcall	__gptrput
                                    496 ;	sprintf.c:46: return i;
      00013E 85 84 82         [12]  497 	mov	dpl,dpl1
      000141 85 85 83         [12]  498 	mov	dph,dph1
      000144                        499 00101$:
                                    500 ;	sprintf.c:47: }
      000144 22               [16]  501 	ret
                                    502 ;------------------------------------------------------------
                                    503 ;Allocation info for local variables in function 'sprintf'
                                    504 ;------------------------------------------------------------
                                    505 ;buf                       Allocated to stack - _bp -8
                                    506 ;format                    Allocated to stack - _bp -12
                                    507 ;arg                       Allocated to stack - _bp +1
                                    508 ;i                         Allocated to registers r2 r3 
                                    509 ;------------------------------------------------------------
                                    510 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    511 ;	-----------------------------------------
                                    512 ;	 function sprintf
                                    513 ;	-----------------------------------------
      000145                        514 _sprintf:
      000145 C0*00            [ 8]  515 	push	_bpx
      000147 C0*01            [ 8]  516 	push	_bpx+1
      000149 85 81*00         [12]  517 	mov	_bpx,sp
      00014C 85 9B*01         [12]  518 	mov	_bpx+1,esp
      00014F 53*01 03         [12]  519 	anl	_bpx+1,#3
      000152 43*01 DC         [12]  520 	orl	_bpx+1,#0xdc
      000155 C0 E0            [ 8]  521 	push	acc
      000157 C0 E0            [ 8]  522 	push	acc
      000159 C0 E0            [ 8]  523 	push	acc
      00015B C0 E0            [ 8]  524 	push	acc
                                    525 ;	sprintf.c:55: va_start (arg, format);
      00015D E5*00            [ 8]  526 	mov	a,_bpx
      00015F 24 F4            [ 8]  527 	add	a,#0xf4
      000161 F5 F0            [ 8]  528 	mov	b,a
      000163 E5*01            [ 8]  529 	mov	a,_bpx+1
      000165 34 FF            [ 8]  530 	addc	a,#0xff
      000167 AA F0            [ 8]  531 	mov	r2,b
      000169 FB               [ 4]  532 	mov	r3,a
      00016A 7C FF            [ 8]  533 	mov	r4,#0xff
      00016C 75 93 FF         [12]  534 	mov	dpx,#0xff
      00016F 85*01 83         [12]  535 	mov	dph,_bpx+1
      000172 85*00 82         [12]  536 	mov	dpl,_bpx
      000175 A3               [12]  537 	inc	dptr
      000176 EA               [ 4]  538 	mov	a,r2
      000177 F0               [ 8]  539 	movx	@dptr,a
      000178 A3               [12]  540 	inc	dptr
      000179 EB               [ 4]  541 	mov	a,r3
      00017A F0               [ 8]  542 	movx	@dptr,a
      00017B A3               [12]  543 	inc	dptr
      00017C EC               [ 4]  544 	mov	a,r4
      00017D F0               [ 8]  545 	movx	@dptr,a
      00017E A3               [12]  546 	inc	dptr
      00017F E4               [ 4]  547 	clr	a
      000180 F0               [ 8]  548 	movx	@dptr,a
                                    549 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      000181 E5*00            [ 8]  550 	mov	a,_bpx
      000183 24 F8            [ 8]  551 	add	a,#0xf8
      000185 F5 F0            [ 8]  552 	mov	b,a
      000187 E5*01            [ 8]  553 	mov	a,_bpx+1
      000189 34 FF            [ 8]  554 	addc	a,#0xff
      00018B AE F0            [ 8]  555 	mov	r6,b
      00018D FF               [ 4]  556 	mov	r7,a
      00018E 78 FF            [ 8]  557 	mov	r0,#0xff
      000190 79 00            [ 8]  558 	mov	r1,#0x00
      000192 E5*00            [ 8]  559 	mov	a,_bpx
      000194 C3               [ 4]  560 	clr	c
      000195 94 0C            [ 8]  561 	subb	a,#0x0c
      000197 F5 82            [ 8]  562 	mov	dpl,a
      000199 E5*01            [ 8]  563 	mov	a,_bpx+1
      00019B 94 00            [ 8]  564 	subb	a,#0x00
      00019D F5 83            [ 8]  565 	mov	dph,a
      00019F 75 93 FF         [12]  566 	mov	dpx,#0xff
                                    567 ;	genAssign: resultIsFar = FALSE
      0001A2 E0               [ 8]  568 	movx	a,@dptr
      0001A3 FA               [ 4]  569 	mov	r2,a
      0001A4 A3               [12]  570 	inc	dptr
      0001A5 E0               [ 8]  571 	movx	a,@dptr
      0001A6 FB               [ 4]  572 	mov	r3,a
      0001A7 A3               [12]  573 	inc	dptr
      0001A8 E0               [ 8]  574 	movx	a,@dptr
      0001A9 FC               [ 4]  575 	mov	r4,a
      0001AA A3               [12]  576 	inc	dptr
      0001AB E0               [ 8]  577 	movx	a,@dptr
      0001AC FD               [ 4]  578 	mov	r5,a
                                    579 ;	genAssign: resultIsFar = TRUE
      0001AD 90s00r00r00      [12]  580 	mov	dptr,#__print_format_PARM_2
      0001B1 EE               [ 4]  581 	mov	a,r6
      0001B2 F0               [ 8]  582 	movx	@dptr,a
      0001B3 A3               [12]  583 	inc	dptr
      0001B4 EF               [ 4]  584 	mov	a,r7
      0001B5 F0               [ 8]  585 	movx	@dptr,a
      0001B6 A3               [12]  586 	inc	dptr
      0001B7 E8               [ 4]  587 	mov	a,r0
      0001B8 F0               [ 8]  588 	movx	@dptr,a
      0001B9 A3               [12]  589 	inc	dptr
      0001BA E9               [ 4]  590 	mov	a,r1
      0001BB F0               [ 8]  591 	movx	@dptr,a
                                    592 ;	genAssign: resultIsFar = TRUE
      0001BC 90s00r00r00      [12]  593 	mov	dptr,#__print_format_PARM_3
      0001C0 EA               [ 4]  594 	mov	a,r2
      0001C1 F0               [ 8]  595 	movx	@dptr,a
      0001C2 A3               [12]  596 	inc	dptr
      0001C3 EB               [ 4]  597 	mov	a,r3
      0001C4 F0               [ 8]  598 	movx	@dptr,a
      0001C5 A3               [12]  599 	inc	dptr
      0001C6 EC               [ 4]  600 	mov	a,r4
      0001C7 F0               [ 8]  601 	movx	@dptr,a
      0001C8 A3               [12]  602 	inc	dptr
      0001C9 ED               [ 4]  603 	mov	a,r5
      0001CA F0               [ 8]  604 	movx	@dptr,a
      0001CB 75 93 FF         [12]  605 	mov	dpx,#0xff
      0001CE 85*01 83         [12]  606 	mov	dph,_bpx+1
      0001D1 85*00 82         [12]  607 	mov	dpl,_bpx
      0001D4 A3               [12]  608 	inc	dptr
                                    609 ;	genAssign: resultIsFar = TRUE
      0001D5 75 86 21         [12]  610 	mov	dps,#0x21
      0001D8 90s00r00r00      [12]  611 	mov	dptr,#__print_format_PARM_4
      0001DC E0               [ 8]  612 	movx	a,@dptr
      0001DD F0               [ 8]  613 	movx	@dptr,a
      0001DE A3               [12]  614 	inc	dptr
      0001DF A3               [12]  615 	inc	dptr
      0001E0 E0               [ 8]  616 	movx	a,@dptr
      0001E1 F0               [ 8]  617 	movx	@dptr,a
      0001E2 A3               [12]  618 	inc	dptr
      0001E3 A3               [12]  619 	inc	dptr
      0001E4 E0               [ 8]  620 	movx	a,@dptr
      0001E5 F0               [ 8]  621 	movx	@dptr,a
      0001E6 A3               [12]  622 	inc	dptr
      0001E7 A3               [12]  623 	inc	dptr
      0001E8 E0               [ 8]  624 	movx	a,@dptr
      0001E9 F0               [ 8]  625 	movx	@dptr,a
      0001EA 75 86 00         [12]  626 	mov	dps,#0
      0001ED 90s00r00r00      [12]  627 	mov dptr,#_put_char_to_string
      0001F1 12s00r00r00      [16]  628 	lcall	__print_format
      0001F5 AA 82            [ 8]  629 	mov	r2,dpl
      0001F7 AB 83            [ 8]  630 	mov	r3,dph
                                    631 ;	genAssign: resultIsFar = TRUE
      0001F9 8A 84            [ 8]  632 	mov	dpl1,r2
      0001FB 8B 85            [ 8]  633 	mov	dph1,r3
                                    634 ;	sprintf.c:57: *buf = 0;
      0001FD E5*00            [ 8]  635 	mov	a,_bpx
      0001FF C3               [ 4]  636 	clr	c
      000200 94 08            [ 8]  637 	subb	a,#0x08
      000202 F5 82            [ 8]  638 	mov	dpl,a
      000204 E5*01            [ 8]  639 	mov	a,_bpx+1
      000206 94 00            [ 8]  640 	subb	a,#0x00
      000208 F5 83            [ 8]  641 	mov	dph,a
      00020A 75 93 FF         [12]  642 	mov	dpx,#0xff
                                    643 ;	genAssign: resultIsFar = FALSE
      00020D E0               [ 8]  644 	movx	a,@dptr
      00020E FC               [ 4]  645 	mov	r4,a
      00020F A3               [12]  646 	inc	dptr
      000210 E0               [ 8]  647 	movx	a,@dptr
      000211 FD               [ 4]  648 	mov	r5,a
      000212 A3               [12]  649 	inc	dptr
      000213 E0               [ 8]  650 	movx	a,@dptr
      000214 FE               [ 4]  651 	mov	r6,a
      000215 A3               [12]  652 	inc	dptr
      000216 E0               [ 8]  653 	movx	a,@dptr
      000217 FF               [ 4]  654 	mov	r7,a
      000218 8C 82            [ 8]  655 	mov	dpl,r4
      00021A 8D 83            [ 8]  656 	mov	dph,r5
      00021C 8E 93            [ 8]  657 	mov	dpx,r6
      00021E 8F F0            [ 8]  658 	mov	b,r7
      000220 E4               [ 4]  659 	clr	a
      000221 12s00r00r00      [16]  660 	lcall	__gptrput
                                    661 ;	sprintf.c:60: return i;
      000225 85 84 82         [12]  662 	mov	dpl,dpl1
      000228 85 85 83         [12]  663 	mov	dph,dph1
      00022B                        664 00101$:
                                    665 ;	sprintf.c:61: }
      00022B 85*00 81         [12]  666 	mov	sp,_bpx
      00022E 85*01 9B         [12]  667 	mov	esp,_bpx+1
      000231 D0*01            [ 8]  668 	pop	_bpx+1
      000233 D0*00            [ 8]  669 	pop	_bpx
      000235 22               [16]  670 	ret
                                    671 	.area CSEG    (CODE)
                                    672 	.area CONST   (CODE)
                                    673 	.area XINIT   (CODE)
                                    674 	.area CABS    (ABS,CODE)
