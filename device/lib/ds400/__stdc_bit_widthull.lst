                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __stdc_bit_widthull
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl ___stdc_bit_widthull
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; uninitialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 ___stdc_bit_widthull_value_65536_9:
      000000                         77 	.ds 8
      000008                         78 ___stdc_bit_widthull_width_65536_10:
      000008                         79 	.ds 1
      000009                         80 ___stdc_bit_widthull_sloc0_1_0:
      000009                         81 	.ds 1
                                     82 ;--------------------------------------------------------
                                     83 ; absolute external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XABS    (ABS,XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; initialized external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XISEG   (XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function '__stdc_bit_widthull'
                                    108 ;------------------------------------------------------------
                                    109 ;value                     Allocated with name '___stdc_bit_widthull_value_65536_9'
                                    110 ;width                     Allocated with name '___stdc_bit_widthull_width_65536_10'
                                    111 ;i                         Allocated to registers 
                                    112 ;sloc0                     Allocated with name '___stdc_bit_widthull_sloc0_1_0'
                                    113 ;------------------------------------------------------------
                                    114 ;	__stdc_bit_widthull.c:37: int_fast8_t __stdc_bit_widthull(unsigned long long value)
                                    115 ;	-----------------------------------------
                                    116 ;	 function __stdc_bit_widthull
                                    117 ;	-----------------------------------------
      000000                        118 ___stdc_bit_widthull:
                           000002   119 	ar2 = 0x02
                           000003   120 	ar3 = 0x03
                           000004   121 	ar4 = 0x04
                           000005   122 	ar5 = 0x05
                           000006   123 	ar6 = 0x06
                           000007   124 	ar7 = 0x07
                           000000   125 	ar0 = 0x00
                           000001   126 	ar1 = 0x01
      000000 75 86 01         [12]  127 	mov	dps, #1
      000003 90s00r00r00      [12]  128 	mov	dptr, #___stdc_bit_widthull_value_65536_9
      000007 15 86            [ 8]  129 	dec	dps
                                    130 ;	assignResultValue special case for ACC.
      000009 C0 E0            [ 8]  131 	push	acc
      00000B 05 86            [ 8]  132 	inc	dps
      00000D E5 82            [ 8]  133 	mov	a,dpl
      00000F F0               [ 8]  134 	movx	@dptr,a
      000010 A3               [12]  135 	inc	dptr
      000011 E5 83            [ 8]  136 	mov	a,dph
      000013 F0               [ 8]  137 	movx	@dptr,a
      000014 A3               [12]  138 	inc	dptr
      000015 E5 93            [ 8]  139 	mov	a,dpx
      000017 F0               [ 8]  140 	movx	@dptr,a
      000018 A3               [12]  141 	inc	dptr
      000019 E5 F0            [ 8]  142 	mov	a,b
      00001B F0               [ 8]  143 	movx	@dptr,a
      00001C D0 E0            [ 8]  144 	pop	acc
      00001E A3               [12]  145 	inc	dptr
      00001F F0               [ 8]  146 	movx	@dptr,a
      000020 A3               [12]  147 	inc	dptr
      000021 EC               [ 4]  148 	mov	a,r4
      000022 F0               [ 8]  149 	movx	@dptr,a
      000023 A3               [12]  150 	inc	dptr
      000024 ED               [ 4]  151 	mov	a,r5
      000025 F0               [ 8]  152 	movx	@dptr,a
      000026 A3               [12]  153 	inc	dptr
      000027 EE               [ 4]  154 	mov	a,r6
      000028 F0               [ 8]  155 	movx	@dptr,a
      000029 75 86 00         [12]  156 	mov	dps,#0
                                    157 ;	__stdc_bit_widthull.c:39: int_fast8_t width = 0;
                                    158 ;	genAssign: resultIsFar = TRUE
      00002C 90s00r00r08      [12]  159 	mov	dptr,#___stdc_bit_widthull_width_65536_10
                                    160 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
                                    161 ;	genAssign: resultIsFar = TRUE
      000030 E4               [ 4]  162 	clr   a
      000031 F0               [ 8]  163 	movx  @dptr,a
      000032 90s00r00r09      [12]  164 	mov   dptr,#___stdc_bit_widthull_sloc0_1_0
      000036 F0               [ 8]  165 	movx  @dptr,a
      000037                        166 00105$:
      000037 90s00r00r09      [12]  167 	mov	dptr,#___stdc_bit_widthull_sloc0_1_0
      00003B E0               [ 8]  168 	movx	a,@dptr
      00003C B4 40 00         [16]  169 	cjne	a,#0x40,00122$
      00003F                        170 00122$:
      00003F 40 04            [12]  171 	jc	00123$
      000041 02s00r00rC5      [16]  172 	ljmp	00103$
      000045                        173 00123$:
                                    174 ;	__stdc_bit_widthull.c:41: if(value & (1ull << i))
      000045 90s00r00r09      [12]  175 	mov	dptr,#___stdc_bit_widthull_sloc0_1_0
      000049 C5 F0            [ 8]  176 	xch	a, b
      00004B E0               [ 8]  177 	movx	a,@dptr
      00004C C5 F0            [ 8]  178 	xch	a, b
      00004E 05 F0            [ 8]  179 	inc	b
      000050 7B 01            [ 8]  180 	mov	r3,#0x01
      000052 7C 00            [ 8]  181 	mov	r4,#0x00
      000054 7D 00            [ 8]  182 	mov	r5,#0x00
      000056 7E 00            [ 8]  183 	mov	r6,#0x00
      000058 7F 00            [ 8]  184 	mov	r7,#0x00
      00005A 78 00            [ 8]  185 	mov	r0,#0x00
      00005C 79 00            [ 8]  186 	mov	r1,#0x00
      00005E 7A 00            [ 8]  187 	mov	r2,#0x00
      000060 80 19            [12]  188 	sjmp	00125$
      000062                        189 00124$:
      000062 EB               [ 4]  190 	mov	a,r3
      000063 25 E0            [ 8]  191 	add	a,acc
      000065 FB               [ 4]  192 	mov	r3,a
      000066 EC               [ 4]  193 	mov	a,r4
      000067 33               [ 4]  194 	rlc	a
      000068 FC               [ 4]  195 	mov	r4,a
      000069 ED               [ 4]  196 	mov	a,r5
      00006A 33               [ 4]  197 	rlc	a
      00006B FD               [ 4]  198 	mov	r5,a
      00006C EE               [ 4]  199 	mov	a,r6
      00006D 33               [ 4]  200 	rlc	a
      00006E FE               [ 4]  201 	mov	r6,a
      00006F EF               [ 4]  202 	mov	a,r7
      000070 33               [ 4]  203 	rlc	a
      000071 FF               [ 4]  204 	mov	r7,a
      000072 E8               [ 4]  205 	mov	a,r0
      000073 33               [ 4]  206 	rlc	a
      000074 F8               [ 4]  207 	mov	r0,a
      000075 E9               [ 4]  208 	mov	a,r1
      000076 33               [ 4]  209 	rlc	a
      000077 F9               [ 4]  210 	mov	r1,a
      000078 EA               [ 4]  211 	mov	a,r2
      000079 33               [ 4]  212 	rlc	a
      00007A FA               [ 4]  213 	mov	r2,a
      00007B                        214 00125$:
      00007B D5 F0 E4         [16]  215 	djnz	b,00124$
      00007E 90s00r00r00      [12]  216 	mov	dptr,#___stdc_bit_widthull_value_65536_9
      000082 E0               [ 8]  217 	movx	a,@dptr
      000083 52 03            [ 8]  218 	anl	ar3,a
      000085 A3               [12]  219 	inc	dptr
      000086 E0               [ 8]  220 	movx	a,@dptr
      000087 52 04            [ 8]  221 	anl	ar4,a
      000089 A3               [12]  222 	inc	dptr
      00008A E0               [ 8]  223 	movx	a,@dptr
      00008B 52 05            [ 8]  224 	anl	ar5,a
      00008D A3               [12]  225 	inc	dptr
      00008E E0               [ 8]  226 	movx	a,@dptr
      00008F 52 06            [ 8]  227 	anl	ar6,a
      000091 A3               [12]  228 	inc	dptr
      000092 E0               [ 8]  229 	movx	a,@dptr
      000093 52 07            [ 8]  230 	anl	ar7,a
      000095 A3               [12]  231 	inc	dptr
      000096 E0               [ 8]  232 	movx	a,@dptr
      000097 52 00            [ 8]  233 	anl	ar0,a
      000099 A3               [12]  234 	inc	dptr
      00009A E0               [ 8]  235 	movx	a,@dptr
      00009B 52 01            [ 8]  236 	anl	ar1,a
      00009D A3               [12]  237 	inc	dptr
      00009E E0               [ 8]  238 	movx	a,@dptr
      00009F 52 02            [ 8]  239 	anl	ar2,a
      0000A1 EB               [ 4]  240 	mov	a,r3
      0000A2 4C               [ 4]  241 	orl	a,r4
      0000A3 4D               [ 4]  242 	orl	a,r5
      0000A4 4E               [ 4]  243 	orl	a,r6
      0000A5 4F               [ 4]  244 	orl	a,r7
      0000A6 48               [ 4]  245 	orl	a,r0
      0000A7 49               [ 4]  246 	orl	a,r1
      0000A8 4A               [ 4]  247 	orl	a,r2
      0000A9 60 0E            [12]  248 	jz  00106$
      0000AB                        249 00126$:
                                    250 ;	__stdc_bit_widthull.c:42: width = (i + 1);
      0000AB 90s00r00r09      [12]  251 	mov	dptr,#___stdc_bit_widthull_sloc0_1_0
      0000AF E0               [ 8]  252 	movx	a,@dptr
      0000B0 FA               [ 4]  253 	mov	r2,a
      0000B1 90s00r00r08      [12]  254 	mov	dptr,#___stdc_bit_widthull_width_65536_10
      0000B5 74 01            [ 8]  255 	mov	a,#0x01
      0000B7 2A               [ 4]  256 	add	a,r2
      0000B8 F0               [ 8]  257 	movx	@dptr,a
      0000B9                        258 00106$:
                                    259 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      0000B9 90s00r00r09      [12]  260 	mov	dptr,#___stdc_bit_widthull_sloc0_1_0
      0000BD E0               [ 8]  261 	movx	a,@dptr
      0000BE 24 01            [ 8]  262 	add	a,#0x01
      0000C0 F0               [ 8]  263 	movx	@dptr,a
      0000C1 02s00r00r37      [16]  264 	ljmp	00105$
      0000C5                        265 00103$:
                                    266 ;	__stdc_bit_widthull.c:43: return width;
      0000C5 75 86 01         [12]  267 	mov     dps, #1
      0000C8 90s00r00r08      [12]  268 	mov     dptr, #___stdc_bit_widthull_width_65536_10
      0000CC E0               [ 8]  269 	movx	a,@dptr
      0000CD F5 82            [ 8]  270 	mov	dpl,a
      0000CF 75 86 00         [12]  271 	mov	dps,#0
      0000D2                        272 00107$:
                                    273 ;	__stdc_bit_widthull.c:44: }
      0000D2 22               [16]  274 	ret
                                    275 	.area CSEG    (CODE)
                                    276 	.area CONST   (CODE)
                                    277 	.area XINIT   (CODE)
                                    278 	.area CABS    (ABS,CODE)
