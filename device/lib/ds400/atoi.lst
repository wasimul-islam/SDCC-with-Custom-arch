                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module atoi
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _atoi
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
      000000                         68 _atoi_sloc0_1_0:
      000000                         69 	.ds 1
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _atoi_nptr_65536_56:
      000000                         79 	.ds 4
      000004                         80 _atoi_sloc1_1_0:
      000004                         81 	.ds 2
                                     82 ;--------------------------------------------------------
                                     83 ; absolute external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XABS    (ABS,XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; initialized external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XISEG   (XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'atoi'
                                    108 ;------------------------------------------------------------
                                    109 ;nptr                      Allocated with name '_atoi_nptr_65536_56'
                                    110 ;__1310720007              Allocated to registers 
                                    111 ;__1310720004              Allocated to registers 
                                    112 ;ret                       Allocated to registers r6 r7 
                                    113 ;neg                       Allocated to registers r3 
                                    114 ;__1310720005              Allocated to registers 
                                    115 ;c                         Allocated to registers 
                                    116 ;__1310720008              Allocated to registers 
                                    117 ;c                         Allocated to registers 
                                    118 ;sloc1                     Allocated with name '_atoi_sloc1_1_0'
                                    119 ;------------------------------------------------------------
                                    120 ;	atoi.c:34: int atoi(const char *nptr)
                                    121 ;	-----------------------------------------
                                    122 ;	 function atoi
                                    123 ;	-----------------------------------------
      000000                        124 _atoi:
                           000002   125 	ar2 = 0x02
                           000003   126 	ar3 = 0x03
                           000004   127 	ar4 = 0x04
                           000005   128 	ar5 = 0x05
                           000006   129 	ar6 = 0x06
                           000007   130 	ar7 = 0x07
                           000000   131 	ar0 = 0x00
                           000001   132 	ar1 = 0x01
      000000 AA 82            [ 8]  133 	mov	r2,dpl
      000002 AB 83            [ 8]  134 	mov	r3,dph
      000004 AC 93            [ 8]  135 	mov	r4,dpx
      000006 AD F0            [ 8]  136 	mov	r5,b
                                    137 ;	atoi.c:36: int ret = 0;
                                    138 ;	genAssign: resultIsFar = TRUE
      000008 7E 00            [ 8]  139 	mov	r6,#0x00
      00000A 7F 00            [ 8]  140 	mov	r7,#0x00
                                    141 ;	atoi.c:39: while (isblank (*nptr))
      00000C                        142 00101$:
      00000C 8A 82            [ 8]  143 	mov	dpl,r2
      00000E 8B 83            [ 8]  144 	mov	dph,r3
      000010 8C 93            [ 8]  145 	mov	dpx,r4
      000012 8D F0            [ 8]  146 	mov	b,r5
      000014 12s00r00r00      [16]  147 	lcall	__gptrget
      000018 F8               [ 4]  148 	mov	r0,a
                                    149 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000019 B8 20 02         [16]  150 	cjne	r0,#0x20,00161$
      00001C 80 03            [12]  151 	sjmp 00115$
      00001E                        152 00161$:
      00001E B8 09 0B         [16]  153 	cjne r0,#0x09,00131$
      000021                        154 00163$:
      000021                        155 00115$:
                                    156 ;	atoi.c:40: nptr++;
      000021 0A               [ 4]  157 	inc	r2
      000022 BA 00 05         [16]  158 	cjne	r2,#0x00,00164$
      000025 0B               [ 4]  159 	inc	r3
      000026 BB 00 01         [16]  160 	cjne	r3,#0x00,00164$
      000029 0C               [ 4]  161 	inc	r4
      00002A                        162 00164$:
      00002A 80 E0            [12]  163 	sjmp 00101$
      00002C                        164 00131$:
                                    165 ;	genAssign: resultIsFar = TRUE
      00002C 90s00r00r00      [12]  166 	mov	dptr,#_atoi_nptr_65536_56
      000030 EA               [ 4]  167 	mov	a,r2
      000031 F0               [ 8]  168 	movx	@dptr,a
      000032 A3               [12]  169 	inc	dptr
      000033 EB               [ 4]  170 	mov	a,r3
      000034 F0               [ 8]  171 	movx	@dptr,a
      000035 A3               [12]  172 	inc	dptr
      000036 EC               [ 4]  173 	mov	a,r4
      000037 F0               [ 8]  174 	movx	@dptr,a
      000038 A3               [12]  175 	inc	dptr
      000039 ED               [ 4]  176 	mov	a,r5
      00003A F0               [ 8]  177 	movx	@dptr,a
                                    178 ;	atoi.c:42: neg = (*nptr == '-');
      00003B 8A 82            [ 8]  179 	mov	dpl,r2
      00003D 8B 83            [ 8]  180 	mov	dph,r3
      00003F 8C 93            [ 8]  181 	mov	dpx,r4
      000041 8D F0            [ 8]  182 	mov	b,r5
      000043 12s00r00r00      [16]  183 	lcall	__gptrget
      000047 FA               [ 4]  184 	mov	r2,a
      000048 E4               [ 4]  185 	clr     a
      000049 BA 2D 01         [16]  186 	cjne    r2,#0x2d,00165$
      00004C 04               [ 4]  187 	inc     a
      00004D                        188 00165$:
      00004D                        189 00166$:
      00004D FB               [ 4]  190 	mov	r3,a
                                    191 ;	atoi.c:44: if (*nptr == '-' || *nptr == '+')
      00004E BA 2D 02         [16]  192 	cjne	r2,#0x2d,00167$
      000051 80 03            [12]  193 	sjmp 00104$
      000053                        194 00167$:
      000053 BA 2B 15         [16]  195 	cjne r2,#0x2b,00129$
      000056                        196 00169$:
      000056                        197 00104$:
                                    198 ;	atoi.c:45: nptr++;
      000056 90s00r00r00      [12]  199 	mov	dptr,#_atoi_nptr_65536_56
      00005A E0               [ 8]  200 	movx	a,@dptr
      00005B 24 01            [ 8]  201 	add	a,#0x01
      00005D F0               [ 8]  202 	movx	@dptr,a
      00005E A3               [12]  203 	inc	dptr
      00005F E0               [ 8]  204 	movx	a,@dptr
      000060 34 00            [ 8]  205 	addc	a,#0x00
      000062 F0               [ 8]  206 	movx	@dptr,a
      000063 A3               [12]  207 	inc	dptr
      000064 E0               [ 8]  208 	movx	a,@dptr
      000065 34 00            [ 8]  209 	addc	a,#0x00
      000067 F0               [ 8]  210 	movx	@dptr,a
      000068 A3               [12]  211 	inc	dptr
      000069 E0               [ 8]  212 	movx	a,@dptr
      00006A F0               [ 8]  213 	movx	@dptr,a
                                    214 ;	atoi.c:47: while (isdigit (*nptr))
      00006B                        215 00129$:
      00006B 90s00r00r00      [12]  216 	mov	dptr,#_atoi_nptr_65536_56
                                    217 ;	genAssign: resultIsFar = FALSE
      00006F E0               [ 8]  218 	movx	a,@dptr
      000070 FA               [ 4]  219 	mov	r2,a
      000071 A3               [12]  220 	inc	dptr
      000072 E0               [ 8]  221 	movx	a,@dptr
      000073 FC               [ 4]  222 	mov	r4,a
      000074 A3               [12]  223 	inc	dptr
      000075 E0               [ 8]  224 	movx	a,@dptr
      000076 FD               [ 4]  225 	mov	r5,a
      000077 A3               [12]  226 	inc	dptr
      000078 E0               [ 8]  227 	movx	a,@dptr
      000079 F8               [ 4]  228 	mov	r0,a
      00007A                        229 00107$:
      00007A 8A 82            [ 8]  230 	mov	dpl,r2
      00007C 8C 83            [ 8]  231 	mov	dph,r4
      00007E 8D 93            [ 8]  232 	mov	dpx,r5
      000080 88 F0            [ 8]  233 	mov	b,r0
      000082 12s00r00r00      [16]  234 	lcall	__gptrget
      000086 F9               [ 4]  235 	mov	r1,a
                                    236 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000087 B9 30 00         [16]  237 	cjne	r1,#0x30,00170$
      00008A                        238 00170$:
      00008A 92*00            [ 8]  239 	mov	_atoi_sloc0_1_0,c
      00008C 20*00 6F         [12]  240 	jb   _atoi_sloc0_1_0,00109$
      00008F                        241 00171$:
      00008F C3               [ 4]  242 	clr	c
      000090 74 39            [ 8]  243 	mov	a,#0x39
      000092 99               [ 4]  244 	subb	a,r1
      000093 92*00            [ 8]  245 	mov	_atoi_sloc0_1_0,c
      000095 20*00 66         [12]  246 	jb   _atoi_sloc0_1_0,00109$
      000098                        247 00172$:
                                    248 ;	atoi.c:48: ret = ret * 10 + (*(nptr++) - '0');
      000098 C0 03            [ 8]  249 	push	ar3
                                    250 ;	genAssign: resultIsFar = TRUE
      00009A 90s00r00r00      [12]  251 	mov	dptr,#__mulint_PARM_2
      00009E EE               [ 4]  252 	mov	a,r6
      00009F F0               [ 8]  253 	movx	@dptr,a
      0000A0 A3               [12]  254 	inc	dptr
      0000A1 EF               [ 4]  255 	mov	a,r7
      0000A2 F0               [ 8]  256 	movx	@dptr,a
      0000A3 C0 02            [ 8]  257 	push	ar2
      0000A5 C0 03            [ 8]  258 	push	ar3
      0000A7 C0 04            [ 8]  259 	push	ar4
      0000A9 C0 05            [ 8]  260 	push	ar5
      0000AB C0 00            [ 8]  261 	push	ar0
      0000AD 90 00 00 0A      [12]  262 	mov  dptr,#0x000a
      0000B1 12s00r00r00      [16]  263 	lcall	__mulint
      0000B5 E5 82            [ 8]  264 	mov	a,dpl
      0000B7 85 83 F0         [12]  265 	mov	b,dph
      0000BA 90s00r00r04      [12]  266 	mov	dptr,#_atoi_sloc1_1_0
      0000BE F0               [ 8]  267 	movx	@dptr,a
      0000BF A3               [12]  268 	inc	dptr
      0000C0 E5 F0            [ 8]  269 	mov	a,b
      0000C2 F0               [ 8]  270 	movx	@dptr,a
      0000C3 D0 00            [ 8]  271 	pop	ar0
      0000C5 D0 05            [ 8]  272 	pop	ar5
      0000C7 D0 04            [ 8]  273 	pop	ar4
      0000C9 D0 03            [ 8]  274 	pop	ar3
      0000CB D0 02            [ 8]  275 	pop	ar2
      0000CD 8A 82            [ 8]  276 	mov	dpl,r2
      0000CF 8C 83            [ 8]  277 	mov	dph,r4
      0000D1 8D 93            [ 8]  278 	mov	dpx,r5
      0000D3 88 F0            [ 8]  279 	mov	b,r0
      0000D5 12s00r00r00      [16]  280 	lcall	__gptrget
      0000D9 FB               [ 4]  281 	mov	r3,a
      0000DA A3               [12]  282 	inc	dptr
      0000DB AA 82            [ 8]  283 	mov	r2,dpl
      0000DD AC 83            [ 8]  284 	mov	r4,dph
      0000DF AD 93            [ 8]  285 	mov	r5,dpx
      0000E1 A8 F0            [ 8]  286 	mov	r0,b
      0000E3 79 00            [ 8]  287 	mov	r1,#0x00
      0000E5 EB               [ 4]  288 	mov	a,r3
      0000E6 24 D0            [ 8]  289 	add	a,#0xd0
      0000E8 FB               [ 4]  290 	mov	r3,a
      0000E9 E9               [ 4]  291 	mov	a,r1
      0000EA 34 FF            [ 8]  292 	addc	a,#0xff
      0000EC F9               [ 4]  293 	mov	r1,a
      0000ED 90s00r00r04      [12]  294 	mov	dptr,#_atoi_sloc1_1_0
      0000F1 E0               [ 8]  295 	movx	a,@dptr
      0000F2 2B               [ 4]  296 	add	a,r3
      0000F3 FE               [ 4]  297 	mov	r6,a
      0000F4 A3               [12]  298 	inc	dptr
      0000F5 E0               [ 8]  299 	movx	a,@dptr
      0000F6 39               [ 4]  300 	addc	a,r1
      0000F7 FF               [ 4]  301 	mov	r7,a
      0000F8 D0 03            [ 8]  302 	pop	ar3
      0000FA 02s00r00r7A      [16]  303 	ljmp	00107$
      0000FE                        304 00109$:
                                    305 ;	atoi.c:50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
      0000FE EB               [ 4]  306 	mov	a,r3
      0000FF 60 0B            [12]  307 	jz  00120$
      000101                        308 00173$:
      000101 C3               [ 4]  309 	clr	c
      000102 E4               [ 4]  310 	clr	a
      000103 9E               [ 4]  311 	subb	a,r6
      000104 F5 82            [ 8]  312 	mov	dpl,a
      000106 E4               [ 4]  313 	clr	a
      000107 9F               [ 4]  314 	subb	a,r7
      000108 F5 83            [ 8]  315 	mov	dph,a
      00010A 80 04            [12]  316 	sjmp 00121$
      00010C                        317 00120$:
                                    318 ;	genAssign: resultIsFar = FALSE
      00010C 8E 82            [ 8]  319 	mov	dpl,r6
      00010E 8F 83            [ 8]  320 	mov	dph,r7
      000110                        321 00121$:
      000110                        322 00112$:
                                    323 ;	atoi.c:51: }
      000110 22               [16]  324 	ret
                                    325 	.area CSEG    (CODE)
                                    326 	.area CONST   (CODE)
                                    327 	.area XINIT   (CODE)
                                    328 	.area CABS    (ABS,CODE)
