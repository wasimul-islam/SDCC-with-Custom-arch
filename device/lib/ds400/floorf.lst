                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module floorf
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _floorf
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; uninitialized external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; absolute external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XABS    (ABS,XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; initialized external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XISEG   (XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; Home
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area HOME    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; code
                                     98 ;--------------------------------------------------------
                                     99 	.area CSEG    (CODE)
                                    100 ;------------------------------------------------------------
                                    101 ;Allocation info for local variables in function 'floorf'
                                    102 ;------------------------------------------------------------
                                    103 ;x                         Allocated to stack - _bp +1
                                    104 ;r                         Allocated to registers r6 r7 r0 r1 
                                    105 ;------------------------------------------------------------
                                    106 ;	floorf.c:33: float floorf (float x) _FLOAT_FUNC_REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function floorf
                                    109 ;	-----------------------------------------
      000000                        110 _floorf:
                           000002   111 	ar2 = 0x02
                           000003   112 	ar3 = 0x03
                           000004   113 	ar4 = 0x04
                           000005   114 	ar5 = 0x05
                           000006   115 	ar6 = 0x06
                           000007   116 	ar7 = 0x07
                           000000   117 	ar0 = 0x00
                           000001   118 	ar1 = 0x01
      000000 C0*00            [ 8]  119 	push	_bpx
      000002 C0*01            [ 8]  120 	push	_bpx+1
      000004 85 81*00         [12]  121 	mov	_bpx,sp
      000007 85 9B*01         [12]  122 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  123 	anl	_bpx+1,#3
      00000D 43*01 DC         [12]  124 	orl	_bpx+1,#0xdc
      000010 C0 E0            [ 8]  125 	push	acc
      000012 C0 E0            [ 8]  126 	push	acc
      000014 C0 E0            [ 8]  127 	push	acc
      000016 C0 E0            [ 8]  128 	push	acc
      000018 75 95 FF         [12]  129 	mov	dpx1,#0xff
      00001B 85*01 85         [12]  130 	mov	dph1,_bpx+1
      00001E 85*00 84         [12]  131 	mov	dpl1,_bpx
      000021 75 86 01         [12]  132 	mov	dps,#1
      000024 A3               [12]  133 	inc	dptr
      000025 75 86 01         [12]  134 	mov	dps, #1
      000028 E5 82            [ 8]  135 	mov	a,dpl
      00002A F0               [ 8]  136 	movx	@dptr,a
      00002B A3               [12]  137 	inc	dptr
      00002C E5 83            [ 8]  138 	mov	a,dph
      00002E F0               [ 8]  139 	movx	@dptr,a
      00002F A3               [12]  140 	inc	dptr
      000030 E5 93            [ 8]  141 	mov	a,dpx
      000032 F0               [ 8]  142 	movx	@dptr,a
      000033 A3               [12]  143 	inc	dptr
      000034 E5 F0            [ 8]  144 	mov	a,b
      000036 F0               [ 8]  145 	movx	@dptr,a
      000037 75 86 00         [12]  146 	mov	dps,#0
                                    147 ;	floorf.c:36: r=x;
      00003A 75 95 FF         [12]  148 	mov	dpx1,#0xff
      00003D 85*01 85         [12]  149 	mov	dph1,_bpx+1
      000040 85*00 84         [12]  150 	mov	dpl1,_bpx
      000043 75 86 01         [12]  151 	mov	dps,#1
      000046 A3               [12]  152 	inc	dptr
      000047 75 86 01         [12]  153 	mov	dps, #1
      00004A E0               [ 8]  154 	movx	a,@dptr
      00004B F5 82            [ 8]  155 	mov	dpl,a
      00004D A3               [12]  156 	inc	dptr
      00004E E0               [ 8]  157 	movx	a,@dptr
      00004F F5 83            [ 8]  158 	mov	dph,a
      000051 A3               [12]  159 	inc	dptr
      000052 E0               [ 8]  160 	movx	a,@dptr
      000053 F5 93            [ 8]  161 	mov	dpx,a
      000055 A3               [12]  162 	inc	dptr
      000056 E0               [ 8]  163 	movx	a,@dptr
      000057 F5 F0            [ 8]  164 	mov	b,a
      000059 75 86 00         [12]  165 	mov	dps,#0
      00005C 12s00r00r00      [16]  166 	lcall	___fs2slong
      000060 AE 82            [ 8]  167 	mov	r6,dpl
      000062 AF 83            [ 8]  168 	mov	r7,dph
      000064 A8 93            [ 8]  169 	mov	r0,dpx
      000066 A9 F0            [ 8]  170 	mov	r1,b
                                    171 ;	genAssign: resultIsFar = TRUE
                                    172 ;	floorf.c:37: if (r<=0)
      000068 C3               [ 4]  173 	clr	c
      000069 E4               [ 4]  174 	clr	a
      00006A 9E               [ 4]  175 	subb	a,r6
      00006B E4               [ 4]  176 	clr	a
      00006C 9F               [ 4]  177 	subb	a,r7
      00006D E4               [ 4]  178 	clr	a
      00006E 98               [ 4]  179 	subb	a,r0
      00006F E4               [ 4]  180 	clr	a
      000070 64 80            [ 8]  181 	xrl	a,#0x80
      000072 89 F0            [ 8]  182 	mov	b,r1
      000074 63 F0 80         [12]  183 	xrl	b,#0x80
      000077 95 F0            [ 8]  184 	subb	a,b
      000079 50 04            [12]  185 	jnc	00116$
      00007B 02s00r01r16      [16]  186 	ljmp	00102$
      00007F                        187 00116$:
                                    188 ;	floorf.c:38: return (r+((r>x)?-1:0));
      00007F C0 06            [ 8]  189 	push	ar6
      000081 C0 07            [ 8]  190 	push	ar7
      000083 C0 00            [ 8]  191 	push	ar0
      000085 C0 01            [ 8]  192 	push	ar1
      000087 8E 82            [ 8]  193 	mov	dpl,r6
      000089 8F 83            [ 8]  194 	mov	dph,r7
      00008B 88 93            [ 8]  195 	mov	dpx,r0
      00008D 89 F0            [ 8]  196 	mov	b,r1
      00008F 12s00r00r00      [16]  197 	lcall	___slong2fs
      000093 AA 82            [ 8]  198 	mov	r2,dpl
      000095 AB 83            [ 8]  199 	mov	r3,dph
      000097 AC 93            [ 8]  200 	mov	r4,dpx
      000099 AD F0            [ 8]  201 	mov	r5,b
      00009B D0 01            [ 8]  202 	pop	ar1
      00009D D0 00            [ 8]  203 	pop	ar0
      00009F D0 07            [ 8]  204 	pop	ar7
      0000A1 D0 06            [ 8]  205 	pop	ar6
                                    206 ;	genAssign: resultIsFar = TRUE
      0000A3 90s00r00r00      [12]  207 	mov	dptr,#___fslt_PARM_2
      0000A7 EA               [ 4]  208 	mov	a,r2
      0000A8 F0               [ 8]  209 	movx	@dptr,a
      0000A9 A3               [12]  210 	inc	dptr
      0000AA EB               [ 4]  211 	mov	a,r3
      0000AB F0               [ 8]  212 	movx	@dptr,a
      0000AC A3               [12]  213 	inc	dptr
      0000AD EC               [ 4]  214 	mov	a,r4
      0000AE F0               [ 8]  215 	movx	@dptr,a
      0000AF A3               [12]  216 	inc	dptr
      0000B0 ED               [ 4]  217 	mov	a,r5
      0000B1 F0               [ 8]  218 	movx	@dptr,a
      0000B2 C0 06            [ 8]  219 	push	ar6
      0000B4 C0 07            [ 8]  220 	push	ar7
      0000B6 C0 00            [ 8]  221 	push	ar0
      0000B8 C0 01            [ 8]  222 	push	ar1
      0000BA 75 95 FF         [12]  223 	mov	dpx1,#0xff
      0000BD 85*01 85         [12]  224 	mov	dph1,_bpx+1
      0000C0 85*00 84         [12]  225 	mov	dpl1,_bpx
      0000C3 75 86 01         [12]  226 	mov	dps,#1
      0000C6 A3               [12]  227 	inc	dptr
      0000C7 75 86 01         [12]  228 	mov	dps, #1
      0000CA E0               [ 8]  229 	movx	a,@dptr
      0000CB F5 82            [ 8]  230 	mov	dpl,a
      0000CD A3               [12]  231 	inc	dptr
      0000CE E0               [ 8]  232 	movx	a,@dptr
      0000CF F5 83            [ 8]  233 	mov	dph,a
      0000D1 A3               [12]  234 	inc	dptr
      0000D2 E0               [ 8]  235 	movx	a,@dptr
      0000D3 F5 93            [ 8]  236 	mov	dpx,a
      0000D5 A3               [12]  237 	inc	dptr
      0000D6 E0               [ 8]  238 	movx	a,@dptr
      0000D7 F5 F0            [ 8]  239 	mov	b,a
      0000D9 75 86 00         [12]  240 	mov	dps,#0
      0000DC 12s00r00r00      [16]  241 	lcall	___fslt
      0000E0 D0 01            [ 8]  242 	pop	ar1
      0000E2 D0 00            [ 8]  243 	pop	ar0
      0000E4 D0 07            [ 8]  244 	pop	ar7
      0000E6 D0 06            [ 8]  245 	pop	ar6
      0000E8 E5 82            [ 8]  246 	mov	a,dpl
      0000EA 60 06            [12]  247 	jz  00106$
      0000EC                        248 00117$:
                                    249 ;	genAssign: resultIsFar = FALSE
      0000EC 7A FF            [ 8]  250 	mov	r2,#0xff
      0000EE 7B FF            [ 8]  251 	mov	r3,#0xff
      0000F0 80 04            [12]  252 	sjmp 00107$
      0000F2                        253 00106$:
                                    254 ;	genAssign: resultIsFar = FALSE
      0000F2 7A 00            [ 8]  255 	mov	r2,#0x00
      0000F4 7B 00            [ 8]  256 	mov	r3,#0x00
      0000F6                        257 00107$:
      0000F6 EB               [ 4]  258 	mov	a,r3
      0000F7 33               [ 4]  259 	rlc	a
      0000F8 95 E0            [ 8]  260 	subb	a,acc
      0000FA FC               [ 4]  261 	mov	r4,a
      0000FB FD               [ 4]  262 	mov	r5,a
      0000FC EA               [ 4]  263 	mov	a,r2
      0000FD 2E               [ 4]  264 	add	a,r6
      0000FE FA               [ 4]  265 	mov	r2,a
      0000FF EB               [ 4]  266 	mov	a,r3
      000100 3F               [ 4]  267 	addc	a,r7
      000101 FB               [ 4]  268 	mov	r3,a
      000102 EC               [ 4]  269 	mov	a,r4
      000103 38               [ 4]  270 	addc	a,r0
      000104 FC               [ 4]  271 	mov	r4,a
      000105 ED               [ 4]  272 	mov	a,r5
      000106 39               [ 4]  273 	addc	a,r1
      000107 FD               [ 4]  274 	mov	r5,a
      000108 8A 82            [ 8]  275 	mov	dpl,r2
      00010A 8B 83            [ 8]  276 	mov	dph,r3
      00010C 8C 93            [ 8]  277 	mov	dpx,r4
      00010E 8D F0            [ 8]  278 	mov	b,r5
      000110 12s00r00r00      [16]  279 	lcall	___slong2fs
      000114 80 0C            [12]  280 	sjmp 00104$
      000116                        281 00102$:
                                    282 ;	floorf.c:40: return r;
      000116 8E 82            [ 8]  283 	mov	dpl,r6
      000118 8F 83            [ 8]  284 	mov	dph,r7
      00011A 88 93            [ 8]  285 	mov	dpx,r0
      00011C 89 F0            [ 8]  286 	mov	b,r1
      00011E 12s00r00r00      [16]  287 	lcall	___slong2fs
      000122                        288 00104$:
                                    289 ;	floorf.c:41: }
      000122 85*00 81         [12]  290 	mov	sp,_bpx
      000125 85*01 9B         [12]  291 	mov	esp,_bpx+1
      000128 D0*01            [ 8]  292 	pop	_bpx+1
      00012A D0*00            [ 8]  293 	pop	_bpx
      00012C 22               [16]  294 	ret
                                    295 	.area CSEG    (CODE)
                                    296 	.area CONST   (CODE)
                                    297 	.area XINIT   (CODE)
                                    298 	.area CABS    (ABS,CODE)
