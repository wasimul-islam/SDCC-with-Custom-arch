                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _gets
                                     35 	.globl _putchar
                                     36 	.globl _getchar
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                           000080    40 _P4	=	0x0080
                           000081    41 _SP	=	0x0081
                           000082    42 _DPL	=	0x0082
                           000083    43 _DPH	=	0x0083
                           000084    44 _DPL1	=	0x0084
                           000085    45 _DPH1	=	0x0085
                           000086    46 _DPS	=	0x0086
                           000087    47 _PCON	=	0x0087
                           000088    48 _TCON	=	0x0088
                           000089    49 _TMOD	=	0x0089
                           00008A    50 _TL0	=	0x008a
                           00008B    51 _TL1	=	0x008b
                           00008C    52 _TH0	=	0x008c
                           00008D    53 _TH1	=	0x008d
                           00008E    54 _CKCON	=	0x008e
                           000090    55 _P1	=	0x0090
                           000091    56 _EXIF	=	0x0091
                           000092    57 _P4CNT	=	0x0092
                           000093    58 _DPX	=	0x0093
                           000095    59 _DPX1	=	0x0095
                           000098    60 _SCON0	=	0x0098
                           000099    61 _SBUF0	=	0x0099
                           00009B    62 _ESP	=	0x009b
                           00009C    63 _AP	=	0x009c
                           00009D    64 _ACON	=	0x009d
                           0000A0    65 _P2	=	0x00a0
                           0000A1    66 _P5	=	0x00a1
                           0000A2    67 _P5CNT	=	0x00a2
                           0000A8    68 _IE	=	0x00a8
                           0000B0    69 _P3	=	0x00b0
                           0000B8    70 _IP	=	0x00b8
                           0000C0    71 _SCON1	=	0x00c0
                           0000C1    72 _SBUF1	=	0x00c1
                           0000C4    73 _PMR	=	0x00c4
                           0000C6    74 _MCON	=	0x00c6
                           0000C7    75 _TA	=	0x00c7
                           0000C8    76 _T2CON	=	0x00c8
                           0000C9    77 _T2MOD	=	0x00c9
                           0000CA    78 _RCAP2L	=	0x00ca
                           0000CA    79 _RTL2	=	0x00ca
                           0000CB    80 _RCAP2H	=	0x00cb
                           0000CB    81 _RTH2	=	0x00cb
                           0000CC    82 _TL2	=	0x00cc
                           0000CD    83 _TH2	=	0x00cd
                           0000D0    84 _PSW	=	0x00d0
                           0000D1    85 _MCNT0	=	0x00d1
                           0000D2    86 _MCNT1	=	0x00d2
                           0000D3    87 _MA	=	0x00d3
                           0000D4    88 _MB	=	0x00d4
                           0000D5    89 _MC	=	0x00d5
                           0000D8    90 _WDCON	=	0x00d8
                           0000E0    91 _ACC	=	0x00e0
                           0000E8    92 _EIE	=	0x00e8
                           0000EA    93 _MXAX	=	0x00ea
                           0000F0    94 _B	=	0x00f0
                           0000F8    95 _EIP	=	0x00f8
                           008C8A    96 _TMR0	=	0x8c8a
                           008D8B    97 _TMR1	=	0x8d8b
                           00CDCC    98 _TMR2	=	0xcdcc
                           00CBCA    99 _RCAP2	=	0xcbca
                                    100 ;--------------------------------------------------------
                                    101 ; special function bits
                                    102 ;--------------------------------------------------------
                           000088   103 _IT0	=	0x0088
                           000089   104 _IE0	=	0x0089
                           00008A   105 _IT1	=	0x008a
                           00008B   106 _IE1	=	0x008b
                           00008C   107 _TR0	=	0x008c
                           00008D   108 _TF0	=	0x008d
                           00008E   109 _TR1	=	0x008e
                           00008F   110 _TF1	=	0x008f
                           000090   111 _T2	=	0x0090
                           000091   112 _T2EX	=	0x0091
                           000092   113 _RXD1	=	0x0092
                           000093   114 _TXD1	=	0x0093
                           000094   115 _INT2	=	0x0094
                           000095   116 _INT3	=	0x0095
                           000096   117 _INT4	=	0x0096
                           000097   118 _INT5	=	0x0097
                           000098   119 _RI_0	=	0x0098
                           000099   120 _TI_0	=	0x0099
                           00009A   121 _RB8_0	=	0x009a
                           00009B   122 _TB8_0	=	0x009b
                           00009C   123 _REN_0	=	0x009c
                           00009D   124 _SM2_0	=	0x009d
                           00009E   125 _SM1_0	=	0x009e
                           00009F   126 _SM0_0	=	0x009f
                           00009F   127 _FE_0	=	0x009f
                           0000A8   128 _EX0	=	0x00a8
                           0000A9   129 _ET0	=	0x00a9
                           0000AA   130 _EX1	=	0x00aa
                           0000AB   131 _ET1	=	0x00ab
                           0000AC   132 _ES0	=	0x00ac
                           0000AD   133 _ET2	=	0x00ad
                           0000AE   134 _ES1	=	0x00ae
                           0000AF   135 _EA	=	0x00af
                           0000B0   136 _RXD0	=	0x00b0
                           0000B1   137 _TXD0	=	0x00b1
                           0000B2   138 _INT0	=	0x00b2
                           0000B3   139 _INT1	=	0x00b3
                           0000B4   140 _T0	=	0x00b4
                           0000B5   141 _T1	=	0x00b5
                           0000B6   142 _WR	=	0x00b6
                           0000B7   143 _RD	=	0x00b7
                           0000B8   144 _PX0	=	0x00b8
                           0000B9   145 _PT0	=	0x00b9
                           0000BA   146 _PX1	=	0x00ba
                           0000BB   147 _PT1	=	0x00bb
                           0000BC   148 _PS0	=	0x00bc
                           0000BD   149 _PT2	=	0x00bd
                           0000BE   150 _PS1	=	0x00be
                           0000C0   151 _RI_1	=	0x00c0
                           0000C1   152 _TI_1	=	0x00c1
                           0000C2   153 _RB8_1	=	0x00c2
                           0000C3   154 _TB8_1	=	0x00c3
                           0000C4   155 _REN_1	=	0x00c4
                           0000C5   156 _SM2_1	=	0x00c5
                           0000C6   157 _SM1_1	=	0x00c6
                           0000C7   158 _SM0_1	=	0x00c7
                           0000C7   159 _FE_1	=	0x00c7
                           0000C8   160 _CP_RL	=	0x00c8
                           0000C9   161 _C_T	=	0x00c9
                           0000CA   162 _TR2	=	0x00ca
                           0000CB   163 _EXEN2	=	0x00cb
                           0000CC   164 _TCLK	=	0x00cc
                           0000CD   165 _RCLK	=	0x00cd
                           0000CE   166 _EXF2	=	0x00ce
                           0000CF   167 _TF2	=	0x00cf
                           0000D0   168 _P	=	0x00d0
                           0000D1   169 _F1	=	0x00d1
                           0000D2   170 _OV	=	0x00d2
                           0000D3   171 _RS0	=	0x00d3
                           0000D4   172 _RS1	=	0x00d4
                           0000D5   173 _F0	=	0x00d5
                           0000D6   174 _AC	=	0x00d6
                           0000D7   175 _CY	=	0x00d7
                           0000D8   176 _RWT	=	0x00d8
                           0000D9   177 _EWT	=	0x00d9
                           0000DA   178 _WDRF	=	0x00da
                           0000DB   179 _WDIF	=	0x00db
                           0000DC   180 _PFI	=	0x00dc
                           0000DD   181 _EPFI	=	0x00dd
                           0000DE   182 _POR	=	0x00de
                           0000DF   183 _SMOD_1	=	0x00df
                           0000E8   184 _EX2	=	0x00e8
                           0000E9   185 _EX3	=	0x00e9
                           0000EA   186 _EX4	=	0x00ea
                           0000EB   187 _EX5	=	0x00eb
                           0000EC   188 _EWDI	=	0x00ec
                           0000ED   189 _C1IE	=	0x00ed
                           0000EE   190 _C0IE	=	0x00ee
                           0000EF   191 _CANBIE	=	0x00ef
                           0000F8   192 _PX2	=	0x00f8
                           0000F9   193 _PX3	=	0x00f9
                           0000FA   194 _PX4	=	0x00fa
                           0000FB   195 _PX5	=	0x00fb
                           0000FC   196 _PWDI	=	0x00fc
                           0000FD   197 _C1IP	=	0x00fd
                           0000FE   198 _C0IP	=	0x00fe
                           0000FF   199 _CANBIP	=	0x00ff
                                    200 ;--------------------------------------------------------
                                    201 ; overlayable register banks
                                    202 ;--------------------------------------------------------
                                    203 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        204 	.ds 8
                                    205 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        206 	.ds 8
                                    207 ;--------------------------------------------------------
                                    208 ; internal ram data
                                    209 ;--------------------------------------------------------
                                    210 	.area DSEG    (DATA)
                                    211 ;--------------------------------------------------------
                                    212 ; overlayable items in internal ram
                                    213 ;--------------------------------------------------------
                                    214 ;--------------------------------------------------------
                                    215 ; indirectly addressable internal ram data
                                    216 ;--------------------------------------------------------
                                    217 	.area ISEG    (DATA)
                                    218 ;--------------------------------------------------------
                                    219 ; absolute internal ram data
                                    220 ;--------------------------------------------------------
                                    221 	.area IABS    (ABS,DATA)
                                    222 	.area IABS    (ABS,DATA)
                                    223 ;--------------------------------------------------------
                                    224 ; bit data
                                    225 ;--------------------------------------------------------
                                    226 	.area BSEG    (BIT)
                                    227 ;--------------------------------------------------------
                                    228 ; paged external ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area PSEG    (PAG,XDATA)
                                    231 ;--------------------------------------------------------
                                    232 ; uninitialized external ram data
                                    233 ;--------------------------------------------------------
                                    234 	.area XSEG    (XDATA)
      000000                        235 _gets_s_65536_61:
      000000                        236 	.ds 4
                                    237 ;--------------------------------------------------------
                                    238 ; absolute external ram data
                                    239 ;--------------------------------------------------------
                                    240 	.area XABS    (ABS,XDATA)
                                    241 ;--------------------------------------------------------
                                    242 ; initialized external ram data
                                    243 ;--------------------------------------------------------
                                    244 	.area XISEG   (XDATA)
                                    245 ;--------------------------------------------------------
                                    246 ; global & static initialisations
                                    247 ;--------------------------------------------------------
                                    248 	.area HOME    (CODE)
                                    249 	.area GSINIT  (CODE)
                                    250 	.area GSFINAL (CODE)
                                    251 	.area GSINIT  (CODE)
                                    252 ;--------------------------------------------------------
                                    253 ; Home
                                    254 ;--------------------------------------------------------
                                    255 	.area HOME    (CODE)
                                    256 	.area HOME    (CODE)
                                    257 ;--------------------------------------------------------
                                    258 ; code
                                    259 ;--------------------------------------------------------
                                    260 	.area CSEG    (CODE)
                                    261 ;------------------------------------------------------------
                                    262 ;Allocation info for local variables in function 'gets'
                                    263 ;------------------------------------------------------------
                                    264 ;s                         Allocated with name '_gets_s_65536_61'
                                    265 ;c                         Allocated to registers r0 
                                    266 ;count                     Allocated to registers r4 r5 
                                    267 ;------------------------------------------------------------
                                    268 ;	gets.c:32: gets (char *s)
                                    269 ;	-----------------------------------------
                                    270 ;	 function gets
                                    271 ;	-----------------------------------------
      000000                        272 _gets:
                           000002   273 	ar2 = 0x02
                           000003   274 	ar3 = 0x03
                           000004   275 	ar4 = 0x04
                           000005   276 	ar5 = 0x05
                           000006   277 	ar6 = 0x06
                           000007   278 	ar7 = 0x07
                           000000   279 	ar0 = 0x00
                           000001   280 	ar1 = 0x01
      000000 75 86 01         [12]  281 	mov     dps, #1
      000003 90s00r00r00      [12]  282 	mov     dptr, #_gets_s_65536_61
      000007 E5 82            [ 8]  283 	mov	a,dpl
      000009 F0               [ 8]  284 	movx	@dptr,a
      00000A A3               [12]  285 	inc	dptr
      00000B E5 83            [ 8]  286 	mov	a,dph
      00000D F0               [ 8]  287 	movx	@dptr,a
      00000E A3               [12]  288 	inc	dptr
      00000F E5 93            [ 8]  289 	mov	a,dpx
      000011 F0               [ 8]  290 	movx	@dptr,a
      000012 A3               [12]  291 	inc	dptr
      000013 E5 F0            [ 8]  292 	mov	a,b
      000015 F0               [ 8]  293 	movx	@dptr,a
      000016 75 86 00         [12]  294 	mov	dps,#0
                                    295 ;	gets.c:35: unsigned int count = 0;
                                    296 ;	genAssign: resultIsFar = FALSE
      000019 7C 00            [ 8]  297 	mov	r4,#0x00
      00001B 7D 00            [ 8]  298 	mov	r5,#0x00
                                    299 ;	gets.c:37: while (1)
      00001D                        300 00109$:
                                    301 ;	gets.c:39: c = getchar ();
      00001D C0 04            [ 8]  302 	push	ar4
      00001F C0 05            [ 8]  303 	push	ar5
      000021 12s00r00r00      [16]  304 	lcall	_getchar
      000025 A8 82            [ 8]  305 	mov	r0,dpl
      000027 A9 83            [ 8]  306 	mov	r1,dph
      000029 D0 05            [ 8]  307 	pop	ar5
      00002B D0 04            [ 8]  308 	pop	ar4
                                    309 ;	gets.c:40: switch(c)
      00002D B8 08 02         [16]  310 	cjne	r0,#0x08,00133$
      000030 80 0E            [12]  311 	sjmp 00101$
      000032                        312 00133$:
      000032 B8 0A 02         [16]  313 	cjne	r0,#0x0a,00134$
      000035 80 71            [12]  314 	sjmp 00105$
      000037                        315 00134$:
      000037 B8 0D 02         [16]  316 	cjne	r0,#0x0d,00135$
      00003A 80 6C            [12]  317 	sjmp 00105$
      00003C                        318 00135$:
      00003C 02s00r00rF1      [16]  319 	ljmp	00106$
                                    320 ;	gets.c:42: case '\b': /* backspace */
      000040                        321 00101$:
                                    322 ;	gets.c:43: if (count)
      000040 EC               [ 4]  323 	mov	a,r4
      000041 4D               [ 4]  324 	orl	a,r5
      000042 60 D9            [12]  325 	jz  00109$
      000044                        326 00136$:
                                    327 ;	gets.c:45: putchar ('\b');
      000044 C0 04            [ 8]  328 	push	ar4
      000046 C0 05            [ 8]  329 	push	ar5
      000048 90 00 00 08      [12]  330 	mov  dptr,#0x0008
      00004C 12s00r00r00      [16]  331 	lcall	_putchar
      000050 D0 05            [ 8]  332 	pop	ar5
      000052 D0 04            [ 8]  333 	pop	ar4
                                    334 ;	gets.c:46: putchar (' ');
      000054 C0 04            [ 8]  335 	push	ar4
      000056 C0 05            [ 8]  336 	push	ar5
      000058 90 00 00 20      [12]  337 	mov  dptr,#0x0020
      00005C 12s00r00r00      [16]  338 	lcall	_putchar
      000060 D0 05            [ 8]  339 	pop	ar5
      000062 D0 04            [ 8]  340 	pop	ar4
                                    341 ;	gets.c:47: putchar ('\b');
      000064 C0 04            [ 8]  342 	push	ar4
      000066 C0 05            [ 8]  343 	push	ar5
      000068 90 00 00 08      [12]  344 	mov  dptr,#0x0008
      00006C 12s00r00r00      [16]  345 	lcall	_putchar
      000070 D0 05            [ 8]  346 	pop	ar5
      000072 D0 04            [ 8]  347 	pop	ar4
                                    348 ;	gets.c:48: --s;
      000074 90s00r00r00      [12]  349 	mov	dptr,#_gets_s_65536_61
      000078 E0               [ 8]  350 	movx	a,@dptr
      000079 24 FF            [ 8]  351 	add	a,#0xff
      00007B F9               [ 4]  352 	mov	r1,a
      00007C A3               [12]  353 	inc	dptr
      00007D E0               [ 8]  354 	movx	a,@dptr
      00007E 34 FF            [ 8]  355 	addc	a,#0xff
      000080 FE               [ 4]  356 	mov	r6,a
      000081 A3               [12]  357 	inc	dptr
      000082 E0               [ 8]  358 	movx	a,@dptr
      000083 34 FF            [ 8]  359 	addc	a,#0xff
      000085 FF               [ 4]  360 	mov	r7,a
      000086 A3               [12]  361 	inc	dptr
      000087 E0               [ 8]  362 	movx	a,@dptr
      000088 FA               [ 4]  363 	mov	r2,a
                                    364 ;	genAssign: resultIsFar = TRUE
      000089 90s00r00r00      [12]  365 	mov	dptr,#_gets_s_65536_61
      00008D E9               [ 4]  366 	mov	a,r1
      00008E F0               [ 8]  367 	movx	@dptr,a
      00008F A3               [12]  368 	inc	dptr
      000090 EE               [ 4]  369 	mov	a,r6
      000091 F0               [ 8]  370 	movx	@dptr,a
      000092 A3               [12]  371 	inc	dptr
      000093 EF               [ 4]  372 	mov	a,r7
      000094 F0               [ 8]  373 	movx	@dptr,a
      000095 A3               [12]  374 	inc	dptr
      000096 EA               [ 4]  375 	mov	a,r2
      000097 F0               [ 8]  376 	movx	@dptr,a
                                    377 ;	gets.c:49: --count;
      000098 EC               [ 4]  378 	mov	a,r4
      000099 24 FF            [ 8]  379 	add	a,#0xff
      00009B FA               [ 4]  380 	mov	r2,a
      00009C ED               [ 4]  381 	mov	a,r5
      00009D 34 FF            [ 8]  382 	addc	a,#0xff
      00009F FB               [ 4]  383 	mov	r3,a
                                    384 ;	genAssign: resultIsFar = FALSE
      0000A0 8A 04            [ 8]  385 	mov	ar4,r2
      0000A2 8B 05            [ 8]  386 	mov	ar5,r3
                                    387 ;	gets.c:51: break;
      0000A4 02s00r00r1D      [16]  388 	ljmp	00109$
                                    389 ;	gets.c:54: case '\r': /* CR or LF */
      0000A8                        390 00105$:
                                    391 ;	gets.c:55: putchar ('\r');
      0000A8 90 00 00 0D      [12]  392 	mov  dptr,#0x000d
      0000AC 12s00r00r00      [16]  393 	lcall	_putchar
                                    394 ;	gets.c:56: putchar ('\n');
      0000B0 90 00 00 0A      [12]  395 	mov  dptr,#0x000a
      0000B4 12s00r00r00      [16]  396 	lcall	_putchar
                                    397 ;	gets.c:57: *s = 0;
      0000B8 90s00r00r00      [12]  398 	mov	dptr,#_gets_s_65536_61
      0000BC E0               [ 8]  399 	movx	a,@dptr
      0000BD C0 E0            [ 8]  400 	push	acc
      0000BF A3               [12]  401 	inc	dptr
      0000C0 E0               [ 8]  402 	movx	a,@dptr
      0000C1 C0 E0            [ 8]  403 	push	acc
      0000C3 A3               [12]  404 	inc	dptr
      0000C4 E0               [ 8]  405 	movx	a,@dptr
      0000C5 C0 E0            [ 8]  406 	push	acc
      0000C7 A3               [12]  407 	inc	dptr
      0000C8 E0               [ 8]  408 	movx	a,@dptr
      0000C9 F5 F0            [ 8]  409 	mov	b,a
      0000CB D0 93            [ 8]  410 	pop	dpx
      0000CD D0 83            [ 8]  411 	pop	dph
      0000CF D0 82            [ 8]  412 	pop	dpl
      0000D1 E4               [ 4]  413 	clr	a
      0000D2 12s00r00r00      [16]  414 	lcall	__gptrput
                                    415 ;	gets.c:58: return s;
      0000D6 75 86 01         [12]  416 	mov     dps, #1
      0000D9 90s00r00r00      [12]  417 	mov     dptr, #_gets_s_65536_61
      0000DD E0               [ 8]  418 	movx	a,@dptr
      0000DE F5 82            [ 8]  419 	mov	dpl,a
      0000E0 A3               [12]  420 	inc	dptr
      0000E1 E0               [ 8]  421 	movx	a,@dptr
      0000E2 F5 83            [ 8]  422 	mov	dph,a
      0000E4 A3               [12]  423 	inc	dptr
      0000E5 E0               [ 8]  424 	movx	a,@dptr
      0000E6 F5 93            [ 8]  425 	mov	dpx,a
      0000E8 A3               [12]  426 	inc	dptr
      0000E9 E0               [ 8]  427 	movx	a,@dptr
      0000EA F5 F0            [ 8]  428 	mov	b,a
      0000EC 75 86 00         [12]  429 	mov	dps,#0
                                    430 ;	gets.c:60: default:
      0000EF 80 53            [12]  431 	sjmp 00111$
      0000F1                        432 00106$:
                                    433 ;	gets.c:61: *s++ = c;
      0000F1 90s00r00r00      [12]  434 	mov	dptr,#_gets_s_65536_61
      0000F5 E0               [ 8]  435 	movx	a,@dptr
      0000F6 C0 E0            [ 8]  436 	push	acc
      0000F8 A3               [12]  437 	inc	dptr
      0000F9 E0               [ 8]  438 	movx	a,@dptr
      0000FA C0 E0            [ 8]  439 	push	acc
      0000FC A3               [12]  440 	inc	dptr
      0000FD E0               [ 8]  441 	movx	a,@dptr
      0000FE C0 E0            [ 8]  442 	push	acc
      000100 A3               [12]  443 	inc	dptr
      000101 E0               [ 8]  444 	movx	a,@dptr
      000102 F5 F0            [ 8]  445 	mov	b,a
      000104 D0 93            [ 8]  446 	pop	dpx
      000106 D0 83            [ 8]  447 	pop	dph
      000108 D0 82            [ 8]  448 	pop	dpl
      00010A E8               [ 4]  449 	mov	a,r0
      00010B 12s00r00r00      [16]  450 	lcall	__gptrput
      00010F 90s00r00r00      [12]  451 	mov	dptr,#_gets_s_65536_61
      000113 E0               [ 8]  452 	movx	a,@dptr
      000114 24 01            [ 8]  453 	add	a,#0x01
      000116 F0               [ 8]  454 	movx	@dptr,a
      000117 A3               [12]  455 	inc	dptr
      000118 E0               [ 8]  456 	movx	a,@dptr
      000119 34 00            [ 8]  457 	addc	a,#0x00
      00011B F0               [ 8]  458 	movx	@dptr,a
      00011C A3               [12]  459 	inc	dptr
      00011D E0               [ 8]  460 	movx	a,@dptr
      00011E 34 00            [ 8]  461 	addc	a,#0x00
      000120 F0               [ 8]  462 	movx	@dptr,a
      000121 A3               [12]  463 	inc	dptr
      000122 E0               [ 8]  464 	movx	a,@dptr
      000123 F0               [ 8]  465 	movx	@dptr,a
                                    466 ;	gets.c:62: ++count;
      000124 0C               [ 4]  467 	inc	r4
      000125 BC 00 01         [16]  468 	cjne	r4,#0x00,00137$
      000128 0D               [ 4]  469 	inc	r5
      000129                        470 00137$:
                                    471 ;	gets.c:63: putchar (c);
      000129 88 84            [ 8]  472 	mov	dpl1,r0
      00012B 75 85 00         [12]  473 	mov	dph1,#0x00
      00012E C0 04            [ 8]  474 	push	ar4
      000130 C0 05            [ 8]  475 	push	ar5
      000132 85 84 82         [12]  476 	mov	dpl,dpl1
      000135 85 85 83         [12]  477 	mov	dph,dph1
      000138 12s00r00r00      [16]  478 	lcall	_putchar
      00013C D0 05            [ 8]  479 	pop	ar5
      00013E D0 04            [ 8]  480 	pop	ar4
                                    481 ;	gets.c:65: }
      000140 02s00r00r1D      [16]  482 	ljmp	00109$
      000144                        483 00111$:
                                    484 ;	gets.c:67: }
      000144 22               [16]  485 	ret
                                    486 	.area CSEG    (CODE)
                                    487 	.area CONST   (CODE)
                                    488 	.area XINIT   (CODE)
                                    489 	.area CABS    (ABS,CODE)
