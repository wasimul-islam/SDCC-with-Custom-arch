                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module serial
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _serial_getc
                                     35 	.globl _serial_putc
                                     36 	.globl _serial_interrupt_handler
                                     37 	.globl _serial_init
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                           000080    41 _P0	=	0x0080
                           000081    42 _SP	=	0x0081
                           000082    43 _DPL	=	0x0082
                           000083    44 _DPH	=	0x0083
                           000087    45 _PCON	=	0x0087
                           000088    46 _TCON	=	0x0088
                           000089    47 _TMOD	=	0x0089
                           00008A    48 _TL0	=	0x008a
                           00008B    49 _TL1	=	0x008b
                           00008C    50 _TH0	=	0x008c
                           00008D    51 _TH1	=	0x008d
                           000090    52 _P1	=	0x0090
                           000098    53 _SCON	=	0x0098
                           000099    54 _SBUF	=	0x0099
                           0000A0    55 _P2	=	0x00a0
                           0000A8    56 _IE	=	0x00a8
                           0000B0    57 _P3	=	0x00b0
                           0000B8    58 _IP	=	0x00b8
                           0000D0    59 _PSW	=	0x00d0
                           0000E0    60 _ACC	=	0x00e0
                           0000F0    61 _B	=	0x00f0
                           0000C8    62 _T2CON	=	0x00c8
                           0000CA    63 _RCAP2L	=	0x00ca
                           0000CB    64 _RCAP2H	=	0x00cb
                           0000CC    65 _TL2	=	0x00cc
                           0000CD    66 _TH2	=	0x00cd
                                     67 ;--------------------------------------------------------
                                     68 ; special function bits
                                     69 ;--------------------------------------------------------
                           000080    70 _P0_0	=	0x0080
                           000081    71 _P0_1	=	0x0081
                           000082    72 _P0_2	=	0x0082
                           000083    73 _P0_3	=	0x0083
                           000084    74 _P0_4	=	0x0084
                           000085    75 _P0_5	=	0x0085
                           000086    76 _P0_6	=	0x0086
                           000087    77 _P0_7	=	0x0087
                           000088    78 _IT0	=	0x0088
                           000089    79 _IE0	=	0x0089
                           00008A    80 _IT1	=	0x008a
                           00008B    81 _IE1	=	0x008b
                           00008C    82 _TR0	=	0x008c
                           00008D    83 _TF0	=	0x008d
                           00008E    84 _TR1	=	0x008e
                           00008F    85 _TF1	=	0x008f
                           000090    86 _P1_0	=	0x0090
                           000091    87 _P1_1	=	0x0091
                           000092    88 _P1_2	=	0x0092
                           000093    89 _P1_3	=	0x0093
                           000094    90 _P1_4	=	0x0094
                           000095    91 _P1_5	=	0x0095
                           000096    92 _P1_6	=	0x0096
                           000097    93 _P1_7	=	0x0097
                           000098    94 _RI	=	0x0098
                           000099    95 _TI	=	0x0099
                           00009A    96 _RB8	=	0x009a
                           00009B    97 _TB8	=	0x009b
                           00009C    98 _REN	=	0x009c
                           00009D    99 _SM2	=	0x009d
                           00009E   100 _SM1	=	0x009e
                           00009F   101 _SM0	=	0x009f
                           0000A0   102 _P2_0	=	0x00a0
                           0000A1   103 _P2_1	=	0x00a1
                           0000A2   104 _P2_2	=	0x00a2
                           0000A3   105 _P2_3	=	0x00a3
                           0000A4   106 _P2_4	=	0x00a4
                           0000A5   107 _P2_5	=	0x00a5
                           0000A6   108 _P2_6	=	0x00a6
                           0000A7   109 _P2_7	=	0x00a7
                           0000A8   110 _EX0	=	0x00a8
                           0000A9   111 _ET0	=	0x00a9
                           0000AA   112 _EX1	=	0x00aa
                           0000AB   113 _ET1	=	0x00ab
                           0000AC   114 _ES	=	0x00ac
                           0000AF   115 _EA	=	0x00af
                           0000B0   116 _P3_0	=	0x00b0
                           0000B1   117 _P3_1	=	0x00b1
                           0000B2   118 _P3_2	=	0x00b2
                           0000B3   119 _P3_3	=	0x00b3
                           0000B4   120 _P3_4	=	0x00b4
                           0000B5   121 _P3_5	=	0x00b5
                           0000B6   122 _P3_6	=	0x00b6
                           0000B7   123 _P3_7	=	0x00b7
                           0000B0   124 _RXD	=	0x00b0
                           0000B1   125 _TXD	=	0x00b1
                           0000B2   126 _INT0	=	0x00b2
                           0000B3   127 _INT1	=	0x00b3
                           0000B4   128 _T0	=	0x00b4
                           0000B5   129 _T1	=	0x00b5
                           0000B6   130 _WR	=	0x00b6
                           0000B7   131 _RD	=	0x00b7
                           0000B8   132 _PX0	=	0x00b8
                           0000B9   133 _PT0	=	0x00b9
                           0000BA   134 _PX1	=	0x00ba
                           0000BB   135 _PT1	=	0x00bb
                           0000BC   136 _PS	=	0x00bc
                           0000D0   137 _P	=	0x00d0
                           0000D1   138 _F1	=	0x00d1
                           0000D2   139 _OV	=	0x00d2
                           0000D3   140 _RS0	=	0x00d3
                           0000D4   141 _RS1	=	0x00d4
                           0000D5   142 _F0	=	0x00d5
                           0000D6   143 _AC	=	0x00d6
                           0000D7   144 _CY	=	0x00d7
                           0000AD   145 _ET2	=	0x00ad
                           0000BD   146 _PT2	=	0x00bd
                           0000C8   147 _T2CON_0	=	0x00c8
                           0000C9   148 _T2CON_1	=	0x00c9
                           0000CA   149 _T2CON_2	=	0x00ca
                           0000CB   150 _T2CON_3	=	0x00cb
                           0000CC   151 _T2CON_4	=	0x00cc
                           0000CD   152 _T2CON_5	=	0x00cd
                           0000CE   153 _T2CON_6	=	0x00ce
                           0000CF   154 _T2CON_7	=	0x00cf
                           0000C8   155 _CP_RL2	=	0x00c8
                           0000C9   156 _C_T2	=	0x00c9
                           0000CA   157 _TR2	=	0x00ca
                           0000CB   158 _EXEN2	=	0x00cb
                           0000CC   159 _TCLK	=	0x00cc
                           0000CD   160 _RCLK	=	0x00cd
                           0000CE   161 _EXF2	=	0x00ce
                           0000CF   162 _TF2	=	0x00cf
                                    163 ;--------------------------------------------------------
                                    164 ; overlayable register banks
                                    165 ;--------------------------------------------------------
                                    166 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        167 	.ds 8
                                    168 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        169 	.ds 8
                                    170 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        171 	.ds 8
                                    172 ;--------------------------------------------------------
                                    173 ; internal ram data
                                    174 ;--------------------------------------------------------
                                    175 	.area DSEG    (DATA)
                                    176 ;--------------------------------------------------------
                                    177 ; overlayable items in internal ram
                                    178 ;--------------------------------------------------------
                                    179 ;--------------------------------------------------------
                                    180 ; indirectly addressable internal ram data
                                    181 ;--------------------------------------------------------
                                    182 	.area ISEG    (DATA)
                                    183 ;--------------------------------------------------------
                                    184 ; absolute internal ram data
                                    185 ;--------------------------------------------------------
                                    186 	.area IABS    (ABS,DATA)
                                    187 	.area IABS    (ABS,DATA)
                                    188 ;--------------------------------------------------------
                                    189 ; bit data
                                    190 ;--------------------------------------------------------
                                    191 	.area BSEG    (BIT)
      000000                        192 _work_flag_byte_arrived:
      000000                        193 	.ds 1
      000001                        194 _work_flag_buffer_transfered:
      000001                        195 	.ds 1
      000002                        196 _tx_serial_buffer_empty:
      000002                        197 	.ds 1
      000003                        198 _rx_serial_buffer_empty:
      000003                        199 	.ds 1
                                    200 ;--------------------------------------------------------
                                    201 ; paged external ram data
                                    202 ;--------------------------------------------------------
                                    203 	.area PSEG    (PAG,XDATA)
                                    204 ;--------------------------------------------------------
                                    205 ; uninitialized external ram data
                                    206 ;--------------------------------------------------------
                                    207 	.area XSEG    (XDATA)
      000000                        208 _stx_index_in:
      000000                        209 	.ds 1
      000001                        210 _srx_index_in:
      000001                        211 	.ds 1
      000002                        212 _stx_index_out:
      000002                        213 	.ds 1
      000003                        214 _srx_index_out:
      000003                        215 	.ds 1
      000004                        216 _stx_buffer:
      000004                        217 	.ds 256
      000104                        218 _srx_buffer:
      000104                        219 	.ds 256
                                    220 ;--------------------------------------------------------
                                    221 ; absolute external ram data
                                    222 ;--------------------------------------------------------
                                    223 	.area XABS    (ABS,XDATA)
                                    224 ;--------------------------------------------------------
                                    225 ; initialized external ram data
                                    226 ;--------------------------------------------------------
                                    227 	.area XISEG   (XDATA)
                                    228 ;--------------------------------------------------------
                                    229 ; global & static initialisations
                                    230 ;--------------------------------------------------------
                                    231 	.area HOME    (CODE)
                                    232 	.area GSINIT  (CODE)
                                    233 	.area GSFINAL (CODE)
                                    234 	.area GSINIT  (CODE)
                                    235 ;--------------------------------------------------------
                                    236 ; Home
                                    237 ;--------------------------------------------------------
                                    238 	.area HOME    (CODE)
                                    239 	.area HOME    (CODE)
                                    240 ;--------------------------------------------------------
                                    241 ; code
                                    242 ;--------------------------------------------------------
                                    243 	.area CSEG    (CODE)
                                    244 ;------------------------------------------------------------
                                    245 ;Allocation info for local variables in function 'serial_init'
                                    246 ;------------------------------------------------------------
                                    247 ;	serial.c:45: void serial_init(void)
                                    248 ;	-----------------------------------------
                                    249 ;	 function serial_init
                                    250 ;	-----------------------------------------
      000000                        251 _serial_init:
                           000002   252 	ar2 = 0x02
                           000003   253 	ar3 = 0x03
                           000004   254 	ar4 = 0x04
                           000005   255 	ar5 = 0x05
                           000006   256 	ar6 = 0x06
                           000007   257 	ar7 = 0x07
                           000000   258 	ar0 = 0x00
                           000001   259 	ar1 = 0x01
                                    260 ;	serial.c:47: SCON = 0x50;
                                    261 ;	genAssign: resultIsFar = FALSE
      000000 75 98 50         [12]  262 	mov	_SCON,#0x50
                                    263 ;	serial.c:48: T2CON = 0x34;
                                    264 ;	genAssign: resultIsFar = FALSE
      000003 75 C8 34         [12]  265 	mov	_T2CON,#0x34
                                    266 ;	serial.c:49: PS = 1;
                                    267 ;	genAssign: resultIsFar = FALSE
      000006 D2 BC            [ 8]  268 	setb	_PS
                                    269 ;	serial.c:50: T2CON = 0x34;
                                    270 ;	genAssign: resultIsFar = FALSE
      000008 75 C8 34         [12]  271 	mov	_T2CON,#0x34
                                    272 ;	serial.c:51: RCAP2H = 0xFF;
                                    273 ;	genAssign: resultIsFar = FALSE
      00000B 75 CB FF         [12]  274 	mov	_RCAP2H,#0xff
                                    275 ;	serial.c:52: RCAP2L = 0xDA;
                                    276 ;	genAssign: resultIsFar = FALSE
      00000E 75 CA DA         [12]  277 	mov	_RCAP2L,#0xda
                                    278 ;	serial.c:54: RI = 0;
                                    279 ;	genAssign: resultIsFar = FALSE
      000011 C2 98            [ 8]  280 	clr	_RI
                                    281 ;	serial.c:55: TI = 0;
                                    282 ;	genAssign: resultIsFar = FALSE
      000013 C2 99            [ 8]  283 	clr	_TI
                                    284 ;	serial.c:57: stx_index_in = srx_index_in = stx_index_out = srx_index_out = 0;
                                    285 ;	genAssign: resultIsFar = TRUE
      000015 90s00r00r03      [12]  286 	mov	dptr,#_srx_index_out
                                    287 ;	genAssign: resultIsFar = TRUE
                                    288 ;	genAssign: resultIsFar = TRUE
                                    289 ;	genAssign: resultIsFar = TRUE
      000019 E4               [ 4]  290 	clr   a
      00001A F0               [ 8]  291 	movx  @dptr,a
      00001B 90s00r00r02      [12]  292 	mov   dptr,#_stx_index_out
      00001F F0               [ 8]  293 	movx  @dptr,a
      000020 90s00r00r01      [12]  294 	mov   dptr,#_srx_index_in
      000024 F0               [ 8]  295 	movx  @dptr,a
      000025 90s00r00r00      [12]  296 	mov   dptr,#_stx_index_in
      000029 F0               [ 8]  297 	movx  @dptr,a
                                    298 ;	serial.c:58: rx_serial_buffer_empty = tx_serial_buffer_empty = 1;
                                    299 ;	genAssign: resultIsFar = FALSE
      00002A D2*02            [ 8]  300 	setb	_tx_serial_buffer_empty
                                    301 ;	genAssign: resultIsFar = FALSE
      00002C D2*03            [ 8]  302 	setb	_rx_serial_buffer_empty
                                    303 ;	serial.c:59: work_flag_buffer_transfered = 0;
                                    304 ;	genAssign: resultIsFar = FALSE
      00002E C2*01            [ 8]  305 	clr	_work_flag_buffer_transfered
                                    306 ;	serial.c:60: work_flag_byte_arrived = 0;
                                    307 ;	genAssign: resultIsFar = FALSE
      000030 C2*00            [ 8]  308 	clr	_work_flag_byte_arrived
                                    309 ;	serial.c:61: ES=1;
                                    310 ;	genAssign: resultIsFar = FALSE
      000032 D2 AC            [ 8]  311 	setb	_ES
      000034                        312 00101$:
                                    313 ;	serial.c:62: }
      000034 22               [16]  314 	ret
                                    315 ;------------------------------------------------------------
                                    316 ;Allocation info for local variables in function 'serial_interrupt_handler'
                                    317 ;------------------------------------------------------------
                                    318 ;	serial.c:64: void serial_interrupt_handler(void) __interrupt (4) __using (1)
                                    319 ;	-----------------------------------------
                                    320 ;	 function serial_interrupt_handler
                                    321 ;	-----------------------------------------
      000035                        322 _serial_interrupt_handler:
                           00000A   323 	ar2 = 0x0a
                           00000B   324 	ar3 = 0x0b
                           00000C   325 	ar4 = 0x0c
                           00000D   326 	ar5 = 0x0d
                           00000E   327 	ar6 = 0x0e
                           00000F   328 	ar7 = 0x0f
                           000008   329 	ar0 = 0x08
                           000009   330 	ar1 = 0x09
      000035 C0 E0            [ 8]  331 	push	acc
      000037 C0 F0            [ 8]  332 	push	b
      000039 C0 82            [ 8]  333 	push	dpl
      00003B C0 83            [ 8]  334 	push	dph
      00003D C0 93            [ 8]  335 	push	dpx
      00003F C0 86            [ 8]  336 	push	dps
      000041 75 86 00         [12]  337 	mov	dps,#0
      000044 C0 84            [ 8]  338 	push	dpl1
      000046 C0 85            [ 8]  339 	push	dph1
      000048 C0 95            [ 8]  340 	push	dpx1
      00004A C0 9C            [ 8]  341 	push	acc1
      00004C C0 D0            [ 8]  342 	push	psw
      00004E 75 D0 08         [12]  343 	mov	psw,#0x08
                                    344 ;	serial.c:66: ES=0;
                                    345 ;	genAssign: resultIsFar = FALSE
      000051 C2 AC            [ 8]  346 	clr	_ES
                                    347 ;	serial.c:67: if ( RI )
                                    348 ;	serial.c:69: RI = 0;
                                    349 ;	genAssign: resultIsFar = FALSE
      000053 10 98 02         [12]  350 	jbc     _RI,00122$
      000056 80 29            [12]  351 	sjmp    00102$
      000058                        352 00122$:
                                    353 ;	serial.c:70: srx_buffer[srx_index_in++]=SBUF;
      000058 90s00r00r01      [12]  354 	mov	dptr,#_srx_index_in
                                    355 ;	genAssign: resultIsFar = FALSE
      00005C E0               [ 8]  356 	movx	a,@dptr
      00005D FA               [ 4]  357 	mov	r2,a
      00005E 90s00r00r01      [12]  358 	mov	dptr,#_srx_index_in
      000062 74 01            [ 8]  359 	mov	a,#0x01
      000064 2A               [ 4]  360 	add	a,r2
      000065 F0               [ 8]  361 	movx	@dptr,a
      000066 EA               [ 4]  362 	mov	a,r2
      000067 24r04            [ 8]  363 	add	a,#_srx_buffer
      000069 F5 84            [ 8]  364 	mov	dpl1,a
      00006B E4               [ 4]  365 	clr	a
      00006C 34s01            [ 8]  366 	addc	a,#(_srx_buffer >> 8)
      00006E F5 85            [ 8]  367 	mov	dph1,a
      000070 E4               [ 4]  368 	clr	a
      000071 34s00            [ 8]  369 	addc	a,#(_srx_buffer >> 16)
      000073 F5 95            [ 8]  370 	mov	dpx1,a
      000075 E5 99            [ 8]  371 	mov	a,_SBUF
      000077 05 86            [ 8]  372 	inc	dps
      000079 F0               [ 8]  373 	movx	@dptr,a
      00007A 75 86 00         [12]  374 	mov	dps,#0
                                    375 ;	serial.c:71: work_flag_byte_arrived = 1;
                                    376 ;	genAssign: resultIsFar = FALSE
      00007D D2*00            [ 8]  377 	setb	_work_flag_byte_arrived
                                    378 ;	serial.c:72: rx_serial_buffer_empty = 0;
                                    379 ;	genAssign: resultIsFar = FALSE
      00007F C2*03            [ 8]  380 	clr	_rx_serial_buffer_empty
      000081                        381 00102$:
                                    382 ;	serial.c:74: if ( TI )
                                    383 ;	serial.c:76: TI = 0;
                                    384 ;	genAssign: resultIsFar = FALSE
      000081 10 99 02         [12]  385 	jbc     _TI,00123$
      000084 80 40            [12]  386 	sjmp    00107$
      000086                        387 00123$:
                                    388 ;	serial.c:77: if (stx_index_out == stx_index_in )
      000086 90s00r00r00      [12]  389 	mov	dptr,#_stx_index_in
      00008A 75 86 01         [12]  390 	mov     dps, #1
      00008D 90s00r00r02      [12]  391 	mov     dptr, #_stx_index_out
      000091 E0               [ 8]  392 	movx	a,@dptr
      000092 75 86 00         [12]  393 	mov	dps,#0
      000095 F5 F0            [ 8]  394 	mov	b,a
      000097 E0               [ 8]  395 	movx	a,@dptr
      000098 B5 F0 06         [16]  396 	cjne a,b,00104$
      00009B                        397 00125$:
                                    398 ;	serial.c:79: tx_serial_buffer_empty = 1;
                                    399 ;	genAssign: resultIsFar = FALSE
      00009B D2*02            [ 8]  400 	setb	_tx_serial_buffer_empty
                                    401 ;	serial.c:80: work_flag_buffer_transfered = 1;
                                    402 ;	genAssign: resultIsFar = FALSE
      00009D D2*01            [ 8]  403 	setb	_work_flag_buffer_transfered
      00009F 80 25            [12]  404 	sjmp 00107$
      0000A1                        405 00104$:
                                    406 ;	serial.c:82: else SBUF = stx_buffer[stx_index_out++];
      0000A1 90s00r00r02      [12]  407 	mov	dptr,#_stx_index_out
                                    408 ;	genAssign: resultIsFar = FALSE
      0000A5 E0               [ 8]  409 	movx	a,@dptr
      0000A6 FA               [ 4]  410 	mov	r2,a
      0000A7 90s00r00r02      [12]  411 	mov	dptr,#_stx_index_out
      0000AB 74 01            [ 8]  412 	mov	a,#0x01
      0000AD 2A               [ 4]  413 	add	a,r2
      0000AE F0               [ 8]  414 	movx	@dptr,a
      0000AF EA               [ 4]  415 	mov	a,r2
      0000B0 24r04            [ 8]  416 	add	a,#_stx_buffer
      0000B2 F5 84            [ 8]  417 	mov	dpl1,a
      0000B4 E4               [ 4]  418 	clr	a
      0000B5 34s00            [ 8]  419 	addc	a,#(_stx_buffer >> 8)
      0000B7 F5 85            [ 8]  420 	mov	dph1,a
      0000B9 E4               [ 4]  421 	clr	a
      0000BA 34s00            [ 8]  422 	addc	a,#(_stx_buffer >> 16)
      0000BC F5 95            [ 8]  423 	mov	dpx1,a
      0000BE 05 86            [ 8]  424 	inc	dps
      0000C0 E0               [ 8]  425 	movx	a,@dptr
      0000C1 F5 99            [ 8]  426 	mov	_SBUF,a
      0000C3 75 86 00         [12]  427 	mov	dps,#0
      0000C6                        428 00107$:
                                    429 ;	serial.c:84: ES=1;
                                    430 ;	genAssign: resultIsFar = FALSE
      0000C6 D2 AC            [ 8]  431 	setb	_ES
      0000C8                        432 00108$:
                                    433 ;	serial.c:85: }
      0000C8 D0 D0            [ 8]  434 	pop	psw
      0000CA D0 9C            [ 8]  435 	pop	acc1
      0000CC D0 95            [ 8]  436 	pop	dpx1
      0000CE D0 85            [ 8]  437 	pop	dph1
      0000D0 D0 84            [ 8]  438 	pop	dpl1
      0000D2 D0 86            [ 8]  439 	pop	dps
      0000D4 D0 93            [ 8]  440 	pop	dpx
      0000D6 D0 83            [ 8]  441 	pop	dph
      0000D8 D0 82            [ 8]  442 	pop	dpl
      0000DA D0 F0            [ 8]  443 	pop	b
      0000DC D0 E0            [ 8]  444 	pop	acc
      0000DE 32               [16]  445 	reti
                                    446 ;------------------------------------------------------------
                                    447 ;Allocation info for local variables in function 'serial_putc'
                                    448 ;------------------------------------------------------------
                                    449 ;c                         Allocated to registers r2 
                                    450 ;------------------------------------------------------------
                                    451 ;	serial.c:89: void serial_putc(unsigned char c)
                                    452 ;	-----------------------------------------
                                    453 ;	 function serial_putc
                                    454 ;	-----------------------------------------
      0000DF                        455 _serial_putc:
                           000002   456 	ar2 = 0x02
                           000003   457 	ar3 = 0x03
                           000004   458 	ar4 = 0x04
                           000005   459 	ar5 = 0x05
                           000006   460 	ar6 = 0x06
                           000007   461 	ar7 = 0x07
                           000000   462 	ar0 = 0x00
                           000001   463 	ar1 = 0x01
      0000DF AA 82            [ 8]  464 	mov	r2,dpl
                                    465 ;	serial.c:91: stx_buffer[stx_index_in++]=c;
      0000E1 90s00r00r00      [12]  466 	mov	dptr,#_stx_index_in
                                    467 ;	genAssign: resultIsFar = FALSE
      0000E5 E0               [ 8]  468 	movx	a,@dptr
      0000E6 FB               [ 4]  469 	mov	r3,a
      0000E7 90s00r00r00      [12]  470 	mov	dptr,#_stx_index_in
      0000EB 74 01            [ 8]  471 	mov	a,#0x01
      0000ED 2B               [ 4]  472 	add	a,r3
      0000EE F0               [ 8]  473 	movx	@dptr,a
      0000EF EB               [ 4]  474 	mov	a,r3
      0000F0 24r04            [ 8]  475 	add	a,#_stx_buffer
      0000F2 F5 84            [ 8]  476 	mov	dpl1,a
      0000F4 E4               [ 4]  477 	clr	a
      0000F5 34s00            [ 8]  478 	addc	a,#(_stx_buffer >> 8)
      0000F7 F5 85            [ 8]  479 	mov	dph1,a
      0000F9 E4               [ 4]  480 	clr	a
      0000FA 34s00            [ 8]  481 	addc	a,#(_stx_buffer >> 16)
      0000FC F5 95            [ 8]  482 	mov	dpx1,a
      0000FE EA               [ 4]  483 	mov	a,r2
      0000FF 05 86            [ 8]  484 	inc	dps
      000101 F0               [ 8]  485 	movx	@dptr,a
      000102 75 86 00         [12]  486 	mov	dps,#0
                                    487 ;	serial.c:92: ES=0;
                                    488 ;	genAssign: resultIsFar = FALSE
      000105 C2 AC            [ 8]  489 	clr	_ES
                                    490 ;	serial.c:93: if ( tx_serial_buffer_empty )
                                    491 ;	serial.c:95: tx_serial_buffer_empty = 0;
                                    492 ;	genAssign: resultIsFar = FALSE
      000107 10*02 02         [12]  493 	jbc     _tx_serial_buffer_empty,00109$
      00010A 80 02            [12]  494 	sjmp    00102$
      00010C                        495 00109$:
                                    496 ;	serial.c:96: TI=1;
                                    497 ;	genAssign: resultIsFar = FALSE
      00010C D2 99            [ 8]  498 	setb	_TI
      00010E                        499 00102$:
                                    500 ;	serial.c:98: ES=1;
                                    501 ;	genAssign: resultIsFar = FALSE
      00010E D2 AC            [ 8]  502 	setb	_ES
      000110                        503 00103$:
                                    504 ;	serial.c:99: }
      000110 22               [16]  505 	ret
                                    506 ;------------------------------------------------------------
                                    507 ;Allocation info for local variables in function 'serial_getc'
                                    508 ;------------------------------------------------------------
                                    509 ;tmp                       Allocated to registers r2 
                                    510 ;------------------------------------------------------------
                                    511 ;	serial.c:101: unsigned char serial_getc(void)
                                    512 ;	-----------------------------------------
                                    513 ;	 function serial_getc
                                    514 ;	-----------------------------------------
      000111                        515 _serial_getc:
                                    516 ;	serial.c:103: unsigned char tmp = srx_buffer[srx_index_out++];
      000111 90s00r00r03      [12]  517 	mov	dptr,#_srx_index_out
                                    518 ;	genAssign: resultIsFar = FALSE
      000115 E0               [ 8]  519 	movx	a,@dptr
      000116 FA               [ 4]  520 	mov	r2,a
      000117 90s00r00r03      [12]  521 	mov	dptr,#_srx_index_out
      00011B 74 01            [ 8]  522 	mov	a,#0x01
      00011D 2A               [ 4]  523 	add	a,r2
      00011E F0               [ 8]  524 	movx	@dptr,a
      00011F EA               [ 4]  525 	mov	a,r2
      000120 24r04            [ 8]  526 	add	a,#_srx_buffer
      000122 F5 84            [ 8]  527 	mov	dpl1,a
      000124 E4               [ 4]  528 	clr	a
      000125 34s01            [ 8]  529 	addc	a,#(_srx_buffer >> 8)
      000127 F5 85            [ 8]  530 	mov	dph1,a
      000129 E4               [ 4]  531 	clr	a
      00012A 34s00            [ 8]  532 	addc	a,#(_srx_buffer >> 16)
      00012C F5 95            [ 8]  533 	mov	dpx1,a
      00012E 05 86            [ 8]  534 	inc	dps
      000130 E0               [ 8]  535 	movx	a,@dptr
      000131 FA               [ 4]  536 	mov	r2,a
      000132 75 86 00         [12]  537 	mov	dps,#0
                                    538 ;	genAssign: resultIsFar = TRUE
                                    539 ;	serial.c:104: ES=0;
                                    540 ;	genAssign: resultIsFar = FALSE
      000135 C2 AC            [ 8]  541 	clr	_ES
                                    542 ;	serial.c:105: if ( srx_index_out == srx_index_in) rx_serial_buffer_empty = 1;
      000137 90s00r00r01      [12]  543 	mov	dptr,#_srx_index_in
      00013B 75 86 01         [12]  544 	mov     dps, #1
      00013E 90s00r00r03      [12]  545 	mov     dptr, #_srx_index_out
      000142 E0               [ 8]  546 	movx	a,@dptr
      000143 75 86 00         [12]  547 	mov	dps,#0
      000146 F5 F0            [ 8]  548 	mov	b,a
      000148 E0               [ 8]  549 	movx	a,@dptr
      000149 B5 F0 02         [16]  550 	cjne a,b,00102$
      00014C                        551 00110$:
                                    552 ;	genAssign: resultIsFar = FALSE
      00014C D2*03            [ 8]  553 	setb	_rx_serial_buffer_empty
      00014E                        554 00102$:
                                    555 ;	serial.c:106: ES=1;
                                    556 ;	genAssign: resultIsFar = FALSE
      00014E D2 AC            [ 8]  557 	setb	_ES
                                    558 ;	serial.c:107: return tmp;
      000150 8A 82            [ 8]  559 	mov	dpl,r2
      000152                        560 00103$:
                                    561 ;	serial.c:108: }
      000152 22               [16]  562 	ret
                                    563 	.area CSEG    (CODE)
                                    564 	.area CONST   (CODE)
                                    565 	.area XINIT   (CODE)
                                    566 	.area CABS    (ABS,CODE)
