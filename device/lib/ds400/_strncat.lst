                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strncat
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strncat_PARM_3
                                     35 	.globl _strncat_PARM_2
                                     36 	.globl _strncat
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; uninitialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _strncat_PARM_2:
      000000                         79 	.ds 4
      000004                         80 _strncat_PARM_3:
      000004                         81 	.ds 2
      000006                         82 _strncat_front_65536_27:
      000006                         83 	.ds 4
      00000A                         84 _strncat_start_65536_28:
      00000A                         85 	.ds 4
      00000E                         86 _strncat_sloc0_1_0:
      00000E                         87 	.ds 4
                                     88 ;--------------------------------------------------------
                                     89 ; absolute external ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area XABS    (ABS,XDATA)
                                     92 ;--------------------------------------------------------
                                     93 ; initialized external ram data
                                     94 ;--------------------------------------------------------
                                     95 	.area XISEG   (XDATA)
                                     96 ;--------------------------------------------------------
                                     97 ; global & static initialisations
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 	.area GSFINAL (CODE)
                                    102 	.area GSINIT  (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; Home
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME    (CODE)
                                    107 	.area HOME    (CODE)
                                    108 ;--------------------------------------------------------
                                    109 ; code
                                    110 ;--------------------------------------------------------
                                    111 	.area CSEG    (CODE)
                                    112 ;------------------------------------------------------------
                                    113 ;Allocation info for local variables in function 'strncat'
                                    114 ;------------------------------------------------------------
                                    115 ;back                      Allocated with name '_strncat_PARM_2'
                                    116 ;count                     Allocated with name '_strncat_PARM_3'
                                    117 ;front                     Allocated with name '_strncat_front_65536_27'
                                    118 ;start                     Allocated with name '_strncat_start_65536_28'
                                    119 ;sloc0                     Allocated with name '_strncat_sloc0_1_0'
                                    120 ;sloc1                     Allocated with name '_strncat_sloc1_1_0'
                                    121 ;------------------------------------------------------------
                                    122 ;	_strncat.c:31: char * strncat ( char * front, const char * back, size_t count )
                                    123 ;	-----------------------------------------
                                    124 ;	 function strncat
                                    125 ;	-----------------------------------------
      000000                        126 _strncat:
                           000002   127 	ar2 = 0x02
                           000003   128 	ar3 = 0x03
                           000004   129 	ar4 = 0x04
                           000005   130 	ar5 = 0x05
                           000006   131 	ar6 = 0x06
                           000007   132 	ar7 = 0x07
                           000000   133 	ar0 = 0x00
                           000001   134 	ar1 = 0x01
      000000 AA 82            [ 8]  135 	mov	r2,dpl
      000002 AB 83            [ 8]  136 	mov	r3,dph
      000004 AC 93            [ 8]  137 	mov	r4,dpx
      000006 AD F0            [ 8]  138 	mov	r5,b
                                    139 ;	_strncat.c:33: char *start = front;
                                    140 ;	genAssign: resultIsFar = TRUE
      000008 90s00r00r0A      [12]  141 	mov	dptr,#_strncat_start_65536_28
      00000C EA               [ 4]  142 	mov	a,r2
      00000D F0               [ 8]  143 	movx	@dptr,a
      00000E A3               [12]  144 	inc	dptr
      00000F EB               [ 4]  145 	mov	a,r3
      000010 F0               [ 8]  146 	movx	@dptr,a
      000011 A3               [12]  147 	inc	dptr
      000012 EC               [ 4]  148 	mov	a,r4
      000013 F0               [ 8]  149 	movx	@dptr,a
      000014 A3               [12]  150 	inc	dptr
      000015 ED               [ 4]  151 	mov	a,r5
      000016 F0               [ 8]  152 	movx	@dptr,a
                                    153 ;	_strncat.c:35: while (*front++);
                                    154 ;	genAssign: resultIsFar = FALSE
      000017                        155 00101$:
      000017 8A 82            [ 8]  156 	mov	dpl,r2
      000019 8B 83            [ 8]  157 	mov	dph,r3
      00001B 8C 93            [ 8]  158 	mov	dpx,r4
      00001D 8D F0            [ 8]  159 	mov	b,r5
      00001F 12s00r00r00      [16]  160 	lcall	__gptrget
      000023 FE               [ 4]  161 	mov	r6,a
      000024 A3               [12]  162 	inc	dptr
      000025 AA 82            [ 8]  163 	mov	r2,dpl
      000027 AB 83            [ 8]  164 	mov	r3,dph
      000029 AC 93            [ 8]  165 	mov	r4,dpx
      00002B AD F0            [ 8]  166 	mov	r5,b
      00002D EE               [ 4]  167 	mov	a,r6
      00002E 70 E7            [12]  168 	jnz  00101$
      000030                        169 00137$:
                                    170 ;	_strncat.c:37: front--;
      000030 1A               [ 4]  171 	dec	r2
      000031 BA FF 05         [16]  172 	cjne	r2,#0xff,00138$
      000034 1B               [ 4]  173 	dec	r3
      000035 BB FF 01         [16]  174 	cjne	r3,#0xff,00138$
      000038 1C               [ 4]  175 	dec	r4
      000039                        176 00138$:
                                    177 ;	genAssign: resultIsFar = TRUE
      000039 90s00r00r06      [12]  178 	mov	dptr,#_strncat_front_65536_27
      00003D EA               [ 4]  179 	mov	a,r2
      00003E F0               [ 8]  180 	movx	@dptr,a
      00003F A3               [12]  181 	inc	dptr
      000040 EB               [ 4]  182 	mov	a,r3
      000041 F0               [ 8]  183 	movx	@dptr,a
      000042 A3               [12]  184 	inc	dptr
      000043 EC               [ 4]  185 	mov	a,r4
      000044 F0               [ 8]  186 	movx	@dptr,a
      000045 A3               [12]  187 	inc	dptr
      000046 ED               [ 4]  188 	mov	a,r5
      000047 F0               [ 8]  189 	movx	@dptr,a
                                    190 ;	_strncat.c:39: while (count--)
      000048 90s00r00r00      [12]  191 	mov	dptr,#_strncat_PARM_2
                                    192 ;	genAssign: resultIsFar = FALSE
      00004C E0               [ 8]  193 	movx	a,@dptr
      00004D FE               [ 4]  194 	mov	r6,a
      00004E A3               [12]  195 	inc	dptr
      00004F E0               [ 8]  196 	movx	a,@dptr
      000050 FF               [ 4]  197 	mov	r7,a
      000051 A3               [12]  198 	inc	dptr
      000052 E0               [ 8]  199 	movx	a,@dptr
      000053 F8               [ 4]  200 	mov	r0,a
      000054 A3               [12]  201 	inc	dptr
      000055 E0               [ 8]  202 	movx	a,@dptr
      000056 F9               [ 4]  203 	mov	r1,a
      000057 90s00r00r06      [12]  204 	mov	dptr,#_strncat_front_65536_27
                                    205 ;	genAssign: resultIsFar = TRUE
      00005B 75 86 21         [12]  206 	mov	dps,#0x21
      00005E 90s00r00r0E      [12]  207 	mov	dptr,#_strncat_sloc0_1_0
      000062 E0               [ 8]  208 	movx	a,@dptr
      000063 F0               [ 8]  209 	movx	@dptr,a
      000064 A3               [12]  210 	inc	dptr
      000065 A3               [12]  211 	inc	dptr
      000066 E0               [ 8]  212 	movx	a,@dptr
      000067 F0               [ 8]  213 	movx	@dptr,a
      000068 A3               [12]  214 	inc	dptr
      000069 A3               [12]  215 	inc	dptr
      00006A E0               [ 8]  216 	movx	a,@dptr
      00006B F0               [ 8]  217 	movx	@dptr,a
      00006C A3               [12]  218 	inc	dptr
      00006D A3               [12]  219 	inc	dptr
      00006E E0               [ 8]  220 	movx	a,@dptr
      00006F F0               [ 8]  221 	movx	@dptr,a
      000070 75 86 00         [12]  222 	mov	dps,#0
      000073 90s00r00r04      [12]  223 	mov	dptr,#_strncat_PARM_3
                                    224 ;	genAssign: resultIsFar = FALSE
      000077 E0               [ 8]  225 	movx	a,@dptr
      000078 FC               [ 4]  226 	mov	r4,a
      000079 A3               [12]  227 	inc	dptr
      00007A E0               [ 8]  228 	movx	a,@dptr
      00007B FD               [ 4]  229 	mov	r5,a
      00007C                        230 00106$:
                                    231 ;	genAssign: resultIsFar = FALSE
      00007C 8C 02            [ 8]  232 	mov	ar2,r4
      00007E 8D 03            [ 8]  233 	mov	ar3,r5
      000080 1C               [ 4]  234 	dec	r4
      000081 BC FF 01         [16]  235 	cjne	r4,#0xff,00139$
      000084 1D               [ 4]  236 	dec	r5
      000085                        237 00139$:
      000085 EA               [ 4]  238 	mov	a,r2
      000086 4B               [ 4]  239 	orl	a,r3
      000087 70 04            [12]  240 	jnz	00140$
      000089 02s00r01r10      [16]  241 	ljmp	00108$
      00008D                        242 00140$:
                                    243 ;	_strncat.c:40: if (!(*front++ = *back++))
      00008D 8E 82            [ 8]  244 	mov	dpl,r6
      00008F 8F 83            [ 8]  245 	mov	dph,r7
      000091 88 93            [ 8]  246 	mov	dpx,r0
      000093 89 F0            [ 8]  247 	mov	b,r1
      000095 12s00r00r00      [16]  248 	lcall	__gptrget
      000099 FA               [ 4]  249 	mov	r2,a
      00009A A3               [12]  250 	inc	dptr
      00009B AE 82            [ 8]  251 	mov	r6,dpl
      00009D AF 83            [ 8]  252 	mov	r7,dph
      00009F A8 93            [ 8]  253 	mov	r0,dpx
      0000A1 A9 F0            [ 8]  254 	mov	r1,b
      0000A3 90s00r00r0E      [12]  255 	mov	dptr,#_strncat_sloc0_1_0
      0000A7 E0               [ 8]  256 	movx	a,@dptr
      0000A8 C0 E0            [ 8]  257 	push	acc
      0000AA A3               [12]  258 	inc	dptr
      0000AB E0               [ 8]  259 	movx	a,@dptr
      0000AC C0 E0            [ 8]  260 	push	acc
      0000AE A3               [12]  261 	inc	dptr
      0000AF E0               [ 8]  262 	movx	a,@dptr
      0000B0 C0 E0            [ 8]  263 	push	acc
      0000B2 A3               [12]  264 	inc	dptr
      0000B3 E0               [ 8]  265 	movx	a,@dptr
      0000B4 F5 F0            [ 8]  266 	mov	b,a
      0000B6 D0 93            [ 8]  267 	pop	dpx
      0000B8 D0 83            [ 8]  268 	pop	dph
      0000BA D0 82            [ 8]  269 	pop	dpl
      0000BC EA               [ 4]  270 	mov	a,r2
      0000BD 12s00r00r00      [16]  271 	lcall	__gptrput
      0000C1 90s00r00r0E      [12]  272 	mov	dptr,#_strncat_sloc0_1_0
      0000C5 E0               [ 8]  273 	movx	a,@dptr
      0000C6 24 01            [ 8]  274 	add	a,#0x01
      0000C8 F0               [ 8]  275 	movx	@dptr,a
      0000C9 A3               [12]  276 	inc	dptr
      0000CA E0               [ 8]  277 	movx	a,@dptr
      0000CB 34 00            [ 8]  278 	addc	a,#0x00
      0000CD F0               [ 8]  279 	movx	@dptr,a
      0000CE A3               [12]  280 	inc	dptr
      0000CF E0               [ 8]  281 	movx	a,@dptr
      0000D0 34 00            [ 8]  282 	addc	a,#0x00
      0000D2 F0               [ 8]  283 	movx	@dptr,a
      0000D3 A3               [12]  284 	inc	dptr
      0000D4 E0               [ 8]  285 	movx	a,@dptr
      0000D5 F0               [ 8]  286 	movx	@dptr,a
      0000D6 90s00r00r0E      [12]  287 	mov	dptr,#_strncat_sloc0_1_0
                                    288 ;	genAssign: resultIsFar = TRUE
      0000DA 75 86 21         [12]  289 	mov	dps,#0x21
      0000DD 90s00r00r06      [12]  290 	mov	dptr,#_strncat_front_65536_27
      0000E1 E0               [ 8]  291 	movx	a,@dptr
      0000E2 F0               [ 8]  292 	movx	@dptr,a
      0000E3 A3               [12]  293 	inc	dptr
      0000E4 A3               [12]  294 	inc	dptr
      0000E5 E0               [ 8]  295 	movx	a,@dptr
      0000E6 F0               [ 8]  296 	movx	@dptr,a
      0000E7 A3               [12]  297 	inc	dptr
      0000E8 A3               [12]  298 	inc	dptr
      0000E9 E0               [ 8]  299 	movx	a,@dptr
      0000EA F0               [ 8]  300 	movx	@dptr,a
      0000EB A3               [12]  301 	inc	dptr
      0000EC A3               [12]  302 	inc	dptr
      0000ED E0               [ 8]  303 	movx	a,@dptr
      0000EE F0               [ 8]  304 	movx	@dptr,a
      0000EF 75 86 00         [12]  305 	mov	dps,#0
      0000F2 EA               [ 4]  306 	mov	a,r2
      0000F3 70 87            [12]  307 	jnz  00106$
      0000F5                        308 00141$:
                                    309 ;	_strncat.c:41: return(start);
      0000F5 75 86 01         [12]  310 	mov     dps, #1
      0000F8 90s00r00r0A      [12]  311 	mov     dptr, #_strncat_start_65536_28
      0000FC E0               [ 8]  312 	movx	a,@dptr
      0000FD F5 82            [ 8]  313 	mov	dpl,a
      0000FF A3               [12]  314 	inc	dptr
      000100 E0               [ 8]  315 	movx	a,@dptr
      000101 F5 83            [ 8]  316 	mov	dph,a
      000103 A3               [12]  317 	inc	dptr
      000104 E0               [ 8]  318 	movx	a,@dptr
      000105 F5 93            [ 8]  319 	mov	dpx,a
      000107 A3               [12]  320 	inc	dptr
      000108 E0               [ 8]  321 	movx	a,@dptr
      000109 F5 F0            [ 8]  322 	mov	b,a
      00010B 75 86 00         [12]  323 	mov	dps,#0
      00010E 80 37            [12]  324 	sjmp 00109$
      000110                        325 00108$:
                                    326 ;	_strncat.c:43: *front = '\0';
      000110 90s00r00r06      [12]  327 	mov	dptr,#_strncat_front_65536_27
      000114 E0               [ 8]  328 	movx	a,@dptr
      000115 C0 E0            [ 8]  329 	push	acc
      000117 A3               [12]  330 	inc	dptr
      000118 E0               [ 8]  331 	movx	a,@dptr
      000119 C0 E0            [ 8]  332 	push	acc
      00011B A3               [12]  333 	inc	dptr
      00011C E0               [ 8]  334 	movx	a,@dptr
      00011D C0 E0            [ 8]  335 	push	acc
      00011F A3               [12]  336 	inc	dptr
      000120 E0               [ 8]  337 	movx	a,@dptr
      000121 F5 F0            [ 8]  338 	mov	b,a
      000123 D0 93            [ 8]  339 	pop	dpx
      000125 D0 83            [ 8]  340 	pop	dph
      000127 D0 82            [ 8]  341 	pop	dpl
      000129 E4               [ 4]  342 	clr	a
      00012A 12s00r00r00      [16]  343 	lcall	__gptrput
                                    344 ;	_strncat.c:44: return(start);
      00012E 75 86 01         [12]  345 	mov     dps, #1
      000131 90s00r00r0A      [12]  346 	mov     dptr, #_strncat_start_65536_28
      000135 E0               [ 8]  347 	movx	a,@dptr
      000136 F5 82            [ 8]  348 	mov	dpl,a
      000138 A3               [12]  349 	inc	dptr
      000139 E0               [ 8]  350 	movx	a,@dptr
      00013A F5 83            [ 8]  351 	mov	dph,a
      00013C A3               [12]  352 	inc	dptr
      00013D E0               [ 8]  353 	movx	a,@dptr
      00013E F5 93            [ 8]  354 	mov	dpx,a
      000140 A3               [12]  355 	inc	dptr
      000141 E0               [ 8]  356 	movx	a,@dptr
      000142 F5 F0            [ 8]  357 	mov	b,a
      000144 75 86 00         [12]  358 	mov	dps,#0
      000147                        359 00109$:
                                    360 ;	_strncat.c:45: }
      000147 22               [16]  361 	ret
                                    362 	.area CSEG    (CODE)
                                    363 	.area CONST   (CODE)
                                    364 	.area XINIT   (CODE)
                                    365 	.area CABS    (ABS,CODE)
