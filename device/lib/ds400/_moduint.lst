                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _moduint
                                      6 	.optsdcc -mds400 --model-flat24
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; CPU specific extensions
                                     10 ;--------------------------------------------------------
                                     11 	.DS80C390
                                     12 	.amode	2	; 24 bit flat addressing
                           000082    13 dpl	=	0x82
                           000083    14 dph	=	0x83
                           000084    15 dpl1	=	0x84
                           000085    16 dph1	=	0x85
                           000086    17 dps	=	0x86
                           000093    18 dpx	=	0x93
                           000095    19 dpx1	=	0x95
                           00009B    20 esp	=	0x9B
                           00009C    21 ap	=	0x9C
                           00009C    22 acc1	=	0x9C
                           0000D1    23 mcnt0	=	0xD1
                           0000D2    24 mcnt1	=	0xD2
                           0000D3    25 ma	=	0xD3
                           0000D4    26 mb	=	0xD4
                           0000D5    27 mc	=	0xD5
                           00009D    28 acon	=	0x9D
                           0000C6    29 mcon	=	0xC6
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl __moduint_PARM_2
                                     35 	.globl __moduint
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         48 	.ds 8
                                     49 ;--------------------------------------------------------
                                     50 ; internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DSEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; overlayable items in internal ram
                                     55 ;--------------------------------------------------------
                                     56 ;--------------------------------------------------------
                                     57 ; indirectly addressable internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area ISEG    (DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area IABS    (ABS,DATA)
                                     64 	.area IABS    (ABS,DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; bit data
                                     67 ;--------------------------------------------------------
                                     68 	.area BSEG    (BIT)
                                     69 ;--------------------------------------------------------
                                     70 ; paged external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area PSEG    (PAG,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; uninitialized external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XSEG    (XDATA)
      000000                         77 __moduint_PARM_2:
      000000                         78 	.ds 2
                                     79 ;--------------------------------------------------------
                                     80 ; absolute external ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area XABS    (ABS,XDATA)
                                     83 ;--------------------------------------------------------
                                     84 ; initialized external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area XISEG   (XDATA)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function '_moduint'
                                    105 ;------------------------------------------------------------
                                    106 ;b                         Allocated with name '__moduint_PARM_2'
                                    107 ;a                         Allocated to registers r2 r3 
                                    108 ;count                     Allocated to registers r4 
                                    109 ;------------------------------------------------------------
                                    110 ;	_moduint.c:179: _moduint (unsigned int a, unsigned int b) __SDCC_NONBANKED
                                    111 ;	-----------------------------------------
                                    112 ;	 function _moduint
                                    113 ;	-----------------------------------------
      000000                        114 __moduint:
                           000002   115 	ar2 = 0x02
                           000003   116 	ar3 = 0x03
                           000004   117 	ar4 = 0x04
                           000005   118 	ar5 = 0x05
                           000006   119 	ar6 = 0x06
                           000007   120 	ar7 = 0x07
                           000000   121 	ar0 = 0x00
                           000001   122 	ar1 = 0x01
      000000 AA 82            [ 8]  123 	mov	r2,dpl
      000002 AB 83            [ 8]  124 	mov	r3,dph
                                    125 ;	_moduint.c:181: unsigned char count = 0;
                                    126 ;	genAssign: resultIsFar = TRUE
      000004 7C 00            [ 8]  127 	mov	r4,#0x00
                                    128 ;	_moduint.c:183: while (!MSB_SET(b))
                                    129 ;	genAssign: resultIsFar = FALSE
      000006 7D 00            [ 8]  130 	mov	r5,#0x00
      000008                        131 00103$:
      000008 90s00r00r00      [12]  132 	mov	dptr,#__moduint_PARM_2
      00000C A3               [12]  133 	inc	dptr
      00000D E0               [ 8]  134 	movx	a,@dptr
      00000E 23               [ 4]  135 	rl	a
      00000F 54 01            [ 8]  136 	anl	a,#0x01
      000011 FE               [ 4]  137 	mov  r6,a
      000012 70 4D            [12]  138 	jnz  00117$
      000014                        139 00138$:
                                    140 ;	_moduint.c:185: b <<= 1;
      000014 90s00r00r00      [12]  141 	mov	dptr,#__moduint_PARM_2
      000018 E0               [ 8]  142 	movx	a,@dptr
      000019 FE               [ 4]  143 	mov	r6,a
      00001A A3               [12]  144 	inc	dptr
      00001B E0               [ 8]  145 	movx	a,@dptr
      00001C CE               [ 4]  146 	xch	a,r6
      00001D 25 E0            [ 8]  147 	add	a,acc
      00001F CE               [ 4]  148 	xch	a,r6
      000020 33               [ 4]  149 	rlc	a
      000021 FF               [ 4]  150 	mov	r7,a
                                    151 ;	genAssign: resultIsFar = TRUE
      000022 90s00r00r00      [12]  152 	mov	dptr,#__moduint_PARM_2
      000026 EE               [ 4]  153 	mov	a,r6
      000027 F0               [ 8]  154 	movx	@dptr,a
      000028 A3               [12]  155 	inc	dptr
      000029 EF               [ 4]  156 	mov	a,r7
      00002A F0               [ 8]  157 	movx	@dptr,a
                                    158 ;	_moduint.c:186: if (b > a)
      00002B 90s00r00r00      [12]  159 	mov	dptr,#__moduint_PARM_2
      00002F C3               [ 4]  160 	clr	c
      000030 EA               [ 4]  161 	mov	a,r2
      000031 C5 F0            [ 8]  162 	xch	a, b
      000033 E0               [ 8]  163 	movx	a,@dptr
      000034 C5 F0            [ 8]  164 	xch	a, b
      000036 95 F0            [ 8]  165 	subb	a,b
      000038 EB               [ 4]  166 	mov	a,r3
      000039 C5 F0            [ 8]  167 	xch	a, b
      00003B A3               [12]  168 	inc	dptr
      00003C E0               [ 8]  169 	movx	a,@dptr
      00003D C5 F0            [ 8]  170 	xch	a, b
      00003F 95 F0            [ 8]  171 	subb	a,b
      000041 50 19            [12]  172 	jnc  00102$
      000043                        173 00139$:
                                    174 ;	_moduint.c:188: b >>=1;
      000043 90s00r00r00      [12]  175 	mov	dptr,#__moduint_PARM_2
      000047 E0               [ 8]  176 	movx	a,@dptr
      000048 FE               [ 4]  177 	mov	r6,a
      000049 A3               [12]  178 	inc	dptr
      00004A E0               [ 8]  179 	movx	a,@dptr
      00004B C3               [ 4]  180 	clr	c
      00004C 13               [ 4]  181 	rrc	a
      00004D CE               [ 4]  182 	xch	a,r6
      00004E 13               [ 4]  183 	rrc	a
      00004F CE               [ 4]  184 	xch	a,r6
      000050 FF               [ 4]  185 	mov	r7,a
                                    186 ;	genAssign: resultIsFar = TRUE
      000051 90s00r00r00      [12]  187 	mov	dptr,#__moduint_PARM_2
      000055 EE               [ 4]  188 	mov	a,r6
      000056 F0               [ 8]  189 	movx	@dptr,a
      000057 A3               [12]  190 	inc	dptr
      000058 EF               [ 4]  191 	mov	a,r7
      000059 F0               [ 8]  192 	movx	@dptr,a
                                    193 ;	_moduint.c:189: break;
      00005A 80 05            [12]  194 	sjmp 00117$
      00005C                        195 00102$:
                                    196 ;	_moduint.c:191: count++;
      00005C 0D               [ 4]  197 	inc	r5
                                    198 ;	genAssign: resultIsFar = TRUE
      00005D 8D 04            [ 8]  199 	mov	ar4,r5
                                    200 ;	_moduint.c:193: do
      00005F 80 A7            [12]  201 	sjmp 00103$
      000061                        202 00117$:
                                    203 ;	genAssign: resultIsFar = FALSE
      000061                        204 00108$:
                                    205 ;	_moduint.c:195: if (a >= b)
      000061 90s00r00r00      [12]  206 	mov	dptr,#__moduint_PARM_2
      000065 C3               [ 4]  207 	clr	c
      000066 EA               [ 4]  208 	mov	a,r2
      000067 C5 F0            [ 8]  209 	xch	a, b
      000069 E0               [ 8]  210 	movx	a,@dptr
      00006A C5 F0            [ 8]  211 	xch	a, b
      00006C 95 F0            [ 8]  212 	subb	a,b
      00006E EB               [ 4]  213 	mov	a,r3
      00006F C5 F0            [ 8]  214 	xch	a, b
      000071 A3               [12]  215 	inc	dptr
      000072 E0               [ 8]  216 	movx	a,@dptr
      000073 C5 F0            [ 8]  217 	xch	a, b
      000075 95 F0            [ 8]  218 	subb	a,b
      000077 40 18            [12]  219 	jc   00107$
      000079                        220 00140$:
                                    221 ;	_moduint.c:196: a -= b;
      000079 90s00r00r00      [12]  222 	mov	dptr,#__moduint_PARM_2
      00007D C3               [ 4]  223 	clr	c
      00007E E0               [ 8]  224 	movx	a,@dptr
      00007F F5 F0            [ 8]  225 	mov	b,a
      000081 EA               [ 4]  226 	mov	a,r2
      000082 95 F0            [ 8]  227 	subb	a,b
      000084 FD               [ 4]  228 	mov	r5,a
      000085 A3               [12]  229 	inc	dptr
      000086 E0               [ 8]  230 	movx	a,@dptr
      000087 F5 F0            [ 8]  231 	mov	b,a
      000089 EB               [ 4]  232 	mov	a,r3
      00008A 95 F0            [ 8]  233 	subb	a,b
      00008C FE               [ 4]  234 	mov	r6,a
                                    235 ;	genAssign: resultIsFar = TRUE
      00008D 8D 02            [ 8]  236 	mov	ar2,r5
      00008F 8E 03            [ 8]  237 	mov	ar3,r6
      000091                        238 00107$:
                                    239 ;	_moduint.c:197: b >>= 1;
      000091 90s00r00r00      [12]  240 	mov	dptr,#__moduint_PARM_2
      000095 E0               [ 8]  241 	movx	a,@dptr
      000096 FD               [ 4]  242 	mov	r5,a
      000097 A3               [12]  243 	inc	dptr
      000098 E0               [ 8]  244 	movx	a,@dptr
      000099 C3               [ 4]  245 	clr	c
      00009A 13               [ 4]  246 	rrc	a
      00009B CD               [ 4]  247 	xch	a,r5
      00009C 13               [ 4]  248 	rrc	a
      00009D CD               [ 4]  249 	xch	a,r5
      00009E FE               [ 4]  250 	mov	r6,a
                                    251 ;	genAssign: resultIsFar = TRUE
      00009F 90s00r00r00      [12]  252 	mov	dptr,#__moduint_PARM_2
      0000A3 ED               [ 4]  253 	mov	a,r5
      0000A4 F0               [ 8]  254 	movx	@dptr,a
      0000A5 A3               [12]  255 	inc	dptr
      0000A6 EE               [ 4]  256 	mov	a,r6
      0000A7 F0               [ 8]  257 	movx	@dptr,a
                                    258 ;	_moduint.c:199: while (count--);
                                    259 ;	genAssign: resultIsFar = FALSE
      0000A8 8C 05            [ 8]  260 	mov	ar5,r4
      0000AA 1C               [ 4]  261 	dec	r4
      0000AB ED               [ 4]  262 	mov	a,r5
      0000AC 70 B3            [12]  263 	jnz  00108$
      0000AE                        264 00141$:
                                    265 ;	_moduint.c:200: return a;
      0000AE 8A 82            [ 8]  266 	mov	dpl,r2
      0000B0 8B 83            [ 8]  267 	mov	dph,r3
      0000B2                        268 00111$:
                                    269 ;	_moduint.c:201: }
      0000B2 22               [16]  270 	ret
                                    271 	.area CSEG    (CODE)
                                    272 	.area CONST   (CODE)
                                    273 	.area XINIT   (CODE)
                                    274 	.area CABS    (ABS,CODE)
