                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl __print_format_PARM_4
                                     13 	.globl __print_format_PARM_3
                                     14 	.globl __print_format_PARM_2
                                     15 	.globl __print_format
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _output_float_sloc0_1_0:
      000000                         36 	.ds 4
      000004                         37 _output_float_sloc2_1_0:
      000004                         38 	.ds 4
      000008                         39 _output_float_sloc3_1_0:
      000008                         40 	.ds 4
      00000C                         41 __print_format_sloc0_1_0:
      00000C                         42 	.ds 2
      00000E                         43 __print_format_sloc1_1_0:
      00000E                         44 	.ds 1
      00000F                         45 __print_format_sloc2_1_0:
      00000F                         46 	.ds 3
      000012                         47 __print_format_sloc3_1_0:
      000012                         48 	.ds 4
      000016                         49 __print_format_sloc4_1_0:
      000016                         50 	.ds 2
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 	.area	OSEG    (OVR,DATA)
      000000                         55 _calculate_digit_b4_65536_74:
      000000                         56 	.ds 1
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
      000000                         70 _output_float_sloc1_1_0:
      000000                         71 	.ds 1
                                     72 ;--------------------------------------------------------
                                     73 ; paged external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area PSEG    (PAG,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; uninitialized external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XSEG    (XDATA)
      000000                         80 _lower_case:
      000000                         81 	.ds 1
      000001                         82 _output_char:
      000001                         83 	.ds 3
      000004                         84 _p:
      000004                         85 	.ds 3
      000007                         86 _value:
      000007                         87 	.ds 5
      00000C                         88 _charsOutputted:
      00000C                         89 	.ds 2
      00000E                         90 __output_char_c_65536_66:
      00000E                         91 	.ds 1
      00000F                         92 _output_digit_n_65536_68:
      00000F                         93 	.ds 1
      000010                         94 _output_2digits_b_65536_71:
      000010                         95 	.ds 1
      000011                         96 _calculate_digit_radix_65536_73:
      000011                         97 	.ds 1
      000012                         98 _output_float_PARM_2:
      000012                         99 	.ds 1
      000013                        100 _output_float_PARM_3:
      000013                        101 	.ds 1
      000014                        102 _output_float_PARM_4:
      000014                        103 	.ds 1
      000015                        104 _output_float_PARM_5:
      000015                        105 	.ds 1
      000016                        106 _output_float_PARM_6:
      000016                        107 	.ds 1
      000017                        108 _output_float_PARM_7:
      000017                        109 	.ds 1
      000018                        110 _output_float_f_65536_77:
      000018                        111 	.ds 4
      00001C                        112 _output_float_fpBuffer_65536_78:
      00001C                        113 	.ds 128
      00009C                        114 _output_float_negative_65536_78:
      00009C                        115 	.ds 1
      00009D                        116 _output_float_integerPart_65536_78:
      00009D                        117 	.ds 4
      0000A1                        118 _output_float_rounding_65536_78:
      0000A1                        119 	.ds 4
      0000A5                        120 _output_float_decimalPart_65536_78:
      0000A5                        121 	.ds 4
      0000A9                        122 _output_float_fpBI_65536_78:
      0000A9                        123 	.ds 1
      0000AA                        124 _output_float_minWidth_65536_78:
      0000AA                        125 	.ds 1
      0000AB                        126 _output_float_exp_65536_78:
      0000AB                        127 	.ds 1
      0000AC                        128 __print_format_PARM_2:
      0000AC                        129 	.ds 3
      0000AF                        130 __print_format_PARM_3:
      0000AF                        131 	.ds 3
      0000B2                        132 __print_format_PARM_4:
      0000B2                        133 	.ds 1
      0000B3                        134 __print_format_pfn_65536_114:
      0000B3                        135 	.ds 3
      0000B6                        136 __print_format_left_justify_65536_115:
      0000B6                        137 	.ds 1
      0000B7                        138 __print_format_zero_padding_65536_115:
      0000B7                        139 	.ds 1
      0000B8                        140 __print_format_prefix_sign_65536_115:
      0000B8                        141 	.ds 1
      0000B9                        142 __print_format_prefix_space_65536_115:
      0000B9                        143 	.ds 1
      0000BA                        144 __print_format_signed_argument_65536_115:
      0000BA                        145 	.ds 1
      0000BB                        146 __print_format_char_argument_65536_115:
      0000BB                        147 	.ds 1
      0000BC                        148 __print_format_long_argument_65536_115:
      0000BC                        149 	.ds 1
      0000BD                        150 __print_format_float_argument_65536_115:
      0000BD                        151 	.ds 1
      0000BE                        152 __print_format_lsd_65536_115:
      0000BE                        153 	.ds 1
      0000BF                        154 __print_format_radix_65536_115:
      0000BF                        155 	.ds 1
      0000C0                        156 __print_format_width_65536_115:
      0000C0                        157 	.ds 2
      0000C2                        158 __print_format_decimals_65536_115:
      0000C2                        159 	.ds 2
      0000C4                        160 __print_format_length_65536_115:
      0000C4                        161 	.ds 2
      0000C6                        162 __print_format_c_65536_115:
      0000C6                        163 	.ds 1
      0000C7                        164 __print_format_store_262144_135:
      0000C7                        165 	.ds 6
      0000CD                        166 __print_format_pstore_262144_135:
      0000CD                        167 	.ds 2
                                    168 ;--------------------------------------------------------
                                    169 ; absolute external ram data
                                    170 ;--------------------------------------------------------
                                    171 	.area XABS    (ABS,XDATA)
                                    172 ;--------------------------------------------------------
                                    173 ; initialized external ram data
                                    174 ;--------------------------------------------------------
                                    175 	.area XISEG   (XDATA)
                                    176 	.area HOME    (CODE)
                                    177 	.area GSINIT0 (CODE)
                                    178 	.area GSINIT1 (CODE)
                                    179 	.area GSINIT2 (CODE)
                                    180 	.area GSINIT3 (CODE)
                                    181 	.area GSINIT4 (CODE)
                                    182 	.area GSINIT5 (CODE)
                                    183 	.area GSINIT  (CODE)
                                    184 	.area GSFINAL (CODE)
                                    185 	.area CSEG    (CODE)
                                    186 ;--------------------------------------------------------
                                    187 ; global & static initialisations
                                    188 ;--------------------------------------------------------
                                    189 	.area HOME    (CODE)
                                    190 	.area GSINIT  (CODE)
                                    191 	.area GSFINAL (CODE)
                                    192 	.area GSINIT  (CODE)
                                    193 ;--------------------------------------------------------
                                    194 ; Home
                                    195 ;--------------------------------------------------------
                                    196 	.area HOME    (CODE)
                                    197 	.area HOME    (CODE)
                                    198 ;--------------------------------------------------------
                                    199 ; code
                                    200 ;--------------------------------------------------------
                                    201 	.area CSEG    (CODE)
                                    202 ;------------------------------------------------------------
                                    203 ;Allocation info for local variables in function '_output_char'
                                    204 ;------------------------------------------------------------
                                    205 ;c                         Allocated with name '__output_char_c_65536_66'
                                    206 ;------------------------------------------------------------
                                    207 ;	printf_large.c:105: _output_char (unsigned char c)
                                    208 ;	-----------------------------------------
                                    209 ;	 function _output_char
                                    210 ;	-----------------------------------------
      000000                        211 __output_char:
                           000007   212 	ar7 = 0x07
                           000006   213 	ar6 = 0x06
                           000005   214 	ar5 = 0x05
                           000004   215 	ar4 = 0x04
                           000003   216 	ar3 = 0x03
                           000002   217 	ar2 = 0x02
                           000001   218 	ar1 = 0x01
                           000000   219 	ar0 = 0x00
      000000 E5 82            [12]  220 	mov	a,dpl
      000002 90r00r0E         [24]  221 	mov	dptr,#__output_char_c_65536_66
      000005 F0               [24]  222 	movx	@dptr,a
                                    223 ;	printf_large.c:107: output_char( c, p );
      000006 E0               [24]  224 	movx	a,@dptr
      000007 FF               [12]  225 	mov	r7,a
      000008 90r00r04         [24]  226 	mov	dptr,#_p
      00000B E0               [24]  227 	movx	a,@dptr
      00000C C0 E0            [24]  228 	push	acc
      00000E A3               [24]  229 	inc	dptr
      00000F E0               [24]  230 	movx	a,@dptr
      000010 C0 E0            [24]  231 	push	acc
      000012 A3               [24]  232 	inc	dptr
      000013 E0               [24]  233 	movx	a,@dptr
      000014 C0 E0            [24]  234 	push	acc
      000016 90r00r01         [24]  235 	mov	dptr,#_output_char
      000019 E0               [24]  236 	movx	a,@dptr
      00001A C0 E0            [24]  237 	push	acc
      00001C A3               [24]  238 	inc	dptr
      00001D E0               [24]  239 	movx	a,@dptr
      00001E C0 E0            [24]  240 	push	acc
      000020 A3               [24]  241 	inc	dptr
      000021 E0               [24]  242 	movx	a,@dptr
      000022 C0 E0            [24]  243 	push	acc
      000024 8F 82            [24]  244 	mov	dpl,r7
      000026 D0 02            [24]  245 	pop	ar2
      000028 D0 01            [24]  246 	pop	ar1
      00002A D0 00            [24]  247 	pop	ar0
      00002C 12r00r00         [24]  248 	lcall	__sdcc_banked_call
      00002F 15 81            [12]  249 	dec	sp
      000031 15 81            [12]  250 	dec	sp
      000033 15 81            [12]  251 	dec	sp
                                    252 ;	printf_large.c:108: charsOutputted++;
      000035 90r00r0C         [24]  253 	mov	dptr,#_charsOutputted
      000038 E0               [24]  254 	movx	a,@dptr
      000039 24 01            [12]  255 	add	a,#0x01
      00003B F0               [24]  256 	movx	@dptr,a
      00003C A3               [24]  257 	inc	dptr
      00003D E0               [24]  258 	movx	a,@dptr
      00003E 34 00            [12]  259 	addc	a,#0x00
      000040 F0               [24]  260 	movx	@dptr,a
                                    261 ;	printf_large.c:109: }
      000041 02r00r00         [24]  262 	ljmp	__sdcc_banked_ret
                                    263 ;------------------------------------------------------------
                                    264 ;Allocation info for local variables in function 'output_digit'
                                    265 ;------------------------------------------------------------
                                    266 ;c                         Allocated to registers r7 
                                    267 ;n                         Allocated with name '_output_digit_n_65536_68'
                                    268 ;------------------------------------------------------------
                                    269 ;	printf_large.c:130: output_digit (unsigned char n)
                                    270 ;	-----------------------------------------
                                    271 ;	 function output_digit
                                    272 ;	-----------------------------------------
      000044                        273 _output_digit:
      000044 E5 82            [12]  274 	mov	a,dpl
      000046 90r00r0F         [24]  275 	mov	dptr,#_output_digit_n_65536_68
      000049 F0               [24]  276 	movx	@dptr,a
                                    277 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      00004A E0               [24]  278 	movx	a,@dptr
      00004B 24 30            [12]  279 	add	a,#0x30
                                    280 ;	printf_large.c:134: if (c > (unsigned char)'9')
      00004D FF               [12]  281 	mov  r7,a
      00004E 24 C6            [12]  282 	add	a,#0xff - 0x39
      000050 50 0D            [24]  283 	jnc	00104$
                                    284 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000052 74 07            [12]  285 	mov	a,#0x07
      000054 2F               [12]  286 	add	a,r7
      000055 FF               [12]  287 	mov	r7,a
                                    288 ;	printf_large.c:137: if (lower_case)
      000056 90r00r00         [24]  289 	mov	dptr,#_lower_case
      000059 E0               [24]  290 	movx	a,@dptr
      00005A 60 03            [24]  291 	jz	00104$
                                    292 ;	printf_large.c:138: c = tolower(c);
      00005C 43 07 20         [24]  293 	orl	ar7,#0x20
      00005F                        294 00104$:
                                    295 ;	printf_large.c:140: _output_char( c );
      00005F 8F 82            [24]  296 	mov	dpl,r7
      000061 78r00            [12]  297 	mov	r0,#__output_char
      000063 79s00            [12]  298 	mov	r1,#(__output_char >> 8)
      000065 7As00            [12]  299 	mov	r2,#(__output_char >> 16)
      000067 12r00r00         [24]  300 	lcall	__sdcc_banked_call
                                    301 ;	printf_large.c:141: }
      00006A 02r00r00         [24]  302 	ljmp	__sdcc_banked_ret
                                    303 ;------------------------------------------------------------
                                    304 ;Allocation info for local variables in function 'output_2digits'
                                    305 ;------------------------------------------------------------
                                    306 ;b                         Allocated with name '_output_2digits_b_65536_71'
                                    307 ;------------------------------------------------------------
                                    308 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    309 ;	-----------------------------------------
                                    310 ;	 function output_2digits
                                    311 ;	-----------------------------------------
      00006D                        312 _output_2digits:
      00006D E5 82            [12]  313 	mov	a,dpl
      00006F 90r00r10         [24]  314 	mov	dptr,#_output_2digits_b_65536_71
      000072 F0               [24]  315 	movx	@dptr,a
                                    316 ;	printf_large.c:159: output_digit( b>>4   );
      000073 E0               [24]  317 	movx	a,@dptr
      000074 FF               [12]  318 	mov	r7,a
      000075 C4               [12]  319 	swap	a
      000076 54 0F            [12]  320 	anl	a,#0x0f
      000078 F5 82            [12]  321 	mov	dpl,a
      00007A C0 07            [24]  322 	push	ar7
      00007C 78r44            [12]  323 	mov	r0,#_output_digit
      00007E 79s00            [12]  324 	mov	r1,#(_output_digit >> 8)
      000080 7As00            [12]  325 	mov	r2,#(_output_digit >> 16)
      000082 12r00r00         [24]  326 	lcall	__sdcc_banked_call
      000085 D0 07            [24]  327 	pop	ar7
                                    328 ;	printf_large.c:160: output_digit( b&0x0F );
      000087 53 07 0F         [24]  329 	anl	ar7,#0x0f
      00008A 8F 82            [24]  330 	mov	dpl,r7
      00008C 78r44            [12]  331 	mov	r0,#_output_digit
      00008E 79s00            [12]  332 	mov	r1,#(_output_digit >> 8)
      000090 7As00            [12]  333 	mov	r2,#(_output_digit >> 16)
      000092 12r00r00         [24]  334 	lcall	__sdcc_banked_call
                                    335 ;	printf_large.c:161: }
      000095 02r00r00         [24]  336 	ljmp	__sdcc_banked_ret
                                    337 ;------------------------------------------------------------
                                    338 ;Allocation info for local variables in function 'calculate_digit'
                                    339 ;------------------------------------------------------------
                                    340 ;radix                     Allocated with name '_calculate_digit_radix_65536_73'
                                    341 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    342 ;b4                        Allocated with name '_calculate_digit_b4_65536_74'
                                    343 ;i                         Allocated to registers r1 
                                    344 ;------------------------------------------------------------
                                    345 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    346 ;	-----------------------------------------
                                    347 ;	 function calculate_digit
                                    348 ;	-----------------------------------------
      000098                        349 _calculate_digit:
      000098 E5 82            [12]  350 	mov	a,dpl
      00009A 90r00r11         [24]  351 	mov	dptr,#_calculate_digit_radix_65536_73
      00009D F0               [24]  352 	movx	@dptr,a
                                    353 ;	printf_large.c:191: register unsigned long ul = value.ul;
      00009E 90r00r07         [24]  354 	mov	dptr,#_value
      0000A1 E0               [24]  355 	movx	a,@dptr
      0000A2 FC               [12]  356 	mov	r4,a
      0000A3 A3               [24]  357 	inc	dptr
      0000A4 E0               [24]  358 	movx	a,@dptr
      0000A5 FD               [12]  359 	mov	r5,a
      0000A6 A3               [24]  360 	inc	dptr
      0000A7 E0               [24]  361 	movx	a,@dptr
      0000A8 FE               [12]  362 	mov	r6,a
      0000A9 A3               [24]  363 	inc	dptr
      0000AA E0               [24]  364 	movx	a,@dptr
      0000AB FF               [12]  365 	mov	r7,a
                                    366 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      0000AC 90r00r0B         [24]  367 	mov	dptr,#(_value + 0x0004)
      0000AF E0               [24]  368 	movx	a,@dptr
      0000B0 FB               [12]  369 	mov	r3,a
                                    370 ;	printf_large.c:195: do
      0000B1 90r00r11         [24]  371 	mov	dptr,#_calculate_digit_radix_65536_73
      0000B4 E0               [24]  372 	movx	a,@dptr
      0000B5 FA               [12]  373 	mov	r2,a
      0000B6 79 20            [12]  374 	mov	r1,#0x20
      0000B8                        375 00103$:
                                    376 ;	printf_large.c:197: b4 = (b4 << 1);
      0000B8 8B 00            [24]  377 	mov	ar0,r3
      0000BA E8               [12]  378 	mov	a,r0
      0000BB 28               [12]  379 	add	a,r0
      0000BC F5*00            [12]  380 	mov	_calculate_digit_b4_65536_74,a
                                    381 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      0000BE EF               [12]  382 	mov	a,r7
      0000BF 23               [12]  383 	rl	a
      0000C0 54 01            [12]  384 	anl	a,#0x01
      0000C2 F8               [12]  385 	mov	r0,a
      0000C3 45*00            [12]  386 	orl	a,_calculate_digit_b4_65536_74
      0000C5 FB               [12]  387 	mov	r3,a
                                    388 ;	printf_large.c:199: ul <<= 1;
      0000C6 EC               [12]  389 	mov	a,r4
      0000C7 2C               [12]  390 	add	a,r4
      0000C8 FC               [12]  391 	mov	r4,a
      0000C9 ED               [12]  392 	mov	a,r5
      0000CA 33               [12]  393 	rlc	a
      0000CB FD               [12]  394 	mov	r5,a
      0000CC EE               [12]  395 	mov	a,r6
      0000CD 33               [12]  396 	rlc	a
      0000CE FE               [12]  397 	mov	r6,a
      0000CF EF               [12]  398 	mov	a,r7
      0000D0 33               [12]  399 	rlc	a
      0000D1 FF               [12]  400 	mov	r7,a
                                    401 ;	printf_large.c:201: if (radix <= b4 )
      0000D2 C3               [12]  402 	clr	c
      0000D3 EB               [12]  403 	mov	a,r3
      0000D4 9A               [12]  404 	subb	a,r2
      0000D5 40 07            [24]  405 	jc	00104$
                                    406 ;	printf_large.c:203: b4 -= radix;
      0000D7 EB               [12]  407 	mov	a,r3
      0000D8 C3               [12]  408 	clr	c
      0000D9 9A               [12]  409 	subb	a,r2
      0000DA FB               [12]  410 	mov	r3,a
                                    411 ;	printf_large.c:204: ul |= 1;
      0000DB 43 04 01         [24]  412 	orl	ar4,#0x01
      0000DE                        413 00104$:
                                    414 ;	printf_large.c:206: } while (--i);
      0000DE 19               [12]  415 	dec	r1
      0000DF E9               [12]  416 	mov	a,r1
      0000E0 70 D6            [24]  417 	jnz	00103$
                                    418 ;	printf_large.c:207: value.ul = ul;
      0000E2 90r00r07         [24]  419 	mov	dptr,#_value
      0000E5 EC               [12]  420 	mov	a,r4
      0000E6 F0               [24]  421 	movx	@dptr,a
      0000E7 ED               [12]  422 	mov	a,r5
      0000E8 A3               [24]  423 	inc	dptr
      0000E9 F0               [24]  424 	movx	@dptr,a
      0000EA EE               [12]  425 	mov	a,r6
      0000EB A3               [24]  426 	inc	dptr
      0000EC F0               [24]  427 	movx	@dptr,a
      0000ED EF               [12]  428 	mov	a,r7
      0000EE A3               [24]  429 	inc	dptr
      0000EF F0               [24]  430 	movx	@dptr,a
                                    431 ;	printf_large.c:208: value.byte[4] = b4;
      0000F0 90r00r0B         [24]  432 	mov	dptr,#(_value + 0x0004)
      0000F3 EB               [12]  433 	mov	a,r3
      0000F4 F0               [24]  434 	movx	@dptr,a
                                    435 ;	printf_large.c:209: }
      0000F5 02r00r00         [24]  436 	ljmp	__sdcc_banked_ret
                                    437 ;------------------------------------------------------------
                                    438 ;Allocation info for local variables in function 'output_float'
                                    439 ;------------------------------------------------------------
                                    440 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                                    441 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                                    442 ;sloc3                     Allocated with name '_output_float_sloc3_1_0'
                                    443 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                                    444 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                                    445 ;left                      Allocated with name '_output_float_PARM_4'
                                    446 ;zero                      Allocated with name '_output_float_PARM_5'
                                    447 ;sign                      Allocated with name '_output_float_PARM_6'
                                    448 ;space                     Allocated with name '_output_float_PARM_7'
                                    449 ;f                         Allocated with name '_output_float_f_65536_77'
                                    450 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_65536_78'
                                    451 ;negative                  Allocated with name '_output_float_negative_65536_78'
                                    452 ;integerPart               Allocated with name '_output_float_integerPart_65536_78'
                                    453 ;rounding                  Allocated with name '_output_float_rounding_65536_78'
                                    454 ;decimalPart               Allocated with name '_output_float_decimalPart_65536_78'
                                    455 ;fpBI                      Allocated with name '_output_float_fpBI_65536_78'
                                    456 ;fpBD                      Allocated with name '_output_float_fpBD_65536_78'
                                    457 ;minWidth                  Allocated with name '_output_float_minWidth_65536_78'
                                    458 ;i                         Allocated with name '_output_float_i_65536_78'
                                    459 ;exp                       Allocated with name '_output_float_exp_65536_78'
                                    460 ;------------------------------------------------------------
                                    461 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                                    462 ;	-----------------------------------------
                                    463 ;	 function output_float
                                    464 ;	-----------------------------------------
      0000F8                        465 _output_float:
      0000F8 AF 82            [24]  466 	mov	r7,dpl
      0000FA AE 83            [24]  467 	mov	r6,dph
      0000FC AD F0            [24]  468 	mov	r5,b
      0000FE FC               [12]  469 	mov	r4,a
      0000FF 90r00r18         [24]  470 	mov	dptr,#_output_float_f_65536_77
      000102 EF               [12]  471 	mov	a,r7
      000103 F0               [24]  472 	movx	@dptr,a
      000104 EE               [12]  473 	mov	a,r6
      000105 A3               [24]  474 	inc	dptr
      000106 F0               [24]  475 	movx	@dptr,a
      000107 ED               [12]  476 	mov	a,r5
      000108 A3               [24]  477 	inc	dptr
      000109 F0               [24]  478 	movx	@dptr,a
      00010A EC               [12]  479 	mov	a,r4
      00010B A3               [24]  480 	inc	dptr
      00010C F0               [24]  481 	movx	@dptr,a
                                    482 ;	printf_large.c:247: _Bool negative = 0;
      00010D 90r00r9C         [24]  483 	mov	dptr,#_output_float_negative_65536_78
      000110 E4               [12]  484 	clr	a
      000111 F0               [24]  485 	movx	@dptr,a
                                    486 ;	printf_large.c:253: signed char exp = -128;
      000112 90r00rAB         [24]  487 	mov	dptr,#_output_float_exp_65536_78
      000115 74 80            [12]  488 	mov	a,#0x80
      000117 F0               [24]  489 	movx	@dptr,a
                                    490 ;	printf_large.c:256: if (f<0)
      000118 90r00r18         [24]  491 	mov	dptr,#_output_float_f_65536_77
      00011B E0               [24]  492 	movx	a,@dptr
      00011C FC               [12]  493 	mov	r4,a
      00011D A3               [24]  494 	inc	dptr
      00011E E0               [24]  495 	movx	a,@dptr
      00011F FD               [12]  496 	mov	r5,a
      000120 A3               [24]  497 	inc	dptr
      000121 E0               [24]  498 	movx	a,@dptr
      000122 FE               [12]  499 	mov	r6,a
      000123 A3               [24]  500 	inc	dptr
      000124 E0               [24]  501 	movx	a,@dptr
      000125 FF               [12]  502 	mov	r7,a
      000126 C0 07            [24]  503 	push	ar7
      000128 C0 06            [24]  504 	push	ar6
      00012A C0 05            [24]  505 	push	ar5
      00012C C0 04            [24]  506 	push	ar4
      00012E E4               [12]  507 	clr	a
      00012F C0 E0            [24]  508 	push	acc
      000131 C0 E0            [24]  509 	push	acc
      000133 C0 E0            [24]  510 	push	acc
      000135 C0 E0            [24]  511 	push	acc
      000137 8C 82            [24]  512 	mov	dpl,r4
      000139 8D 83            [24]  513 	mov	dph,r5
      00013B 8E F0            [24]  514 	mov	b,r6
      00013D EF               [12]  515 	mov	a,r7
      00013E 12r00r00         [24]  516 	lcall	___fslt
      000141 AB 82            [24]  517 	mov	r3,dpl
      000143 E5 81            [12]  518 	mov	a,sp
      000145 24 FC            [12]  519 	add	a,#0xfc
      000147 F5 81            [12]  520 	mov	sp,a
      000149 D0 04            [24]  521 	pop	ar4
      00014B D0 05            [24]  522 	pop	ar5
      00014D D0 06            [24]  523 	pop	ar6
      00014F D0 07            [24]  524 	pop	ar7
      000151 EB               [12]  525 	mov	a,r3
      000152 60 16            [24]  526 	jz	00102$
                                    527 ;	printf_large.c:258: negative=1;
      000154 90r00r9C         [24]  528 	mov	dptr,#_output_float_negative_65536_78
      000157 74 01            [12]  529 	mov	a,#0x01
      000159 F0               [24]  530 	movx	@dptr,a
                                    531 ;	printf_large.c:259: f=-f;
      00015A 90r00r18         [24]  532 	mov	dptr,#_output_float_f_65536_77
      00015D EC               [12]  533 	mov	a,r4
      00015E F0               [24]  534 	movx	@dptr,a
      00015F ED               [12]  535 	mov	a,r5
      000160 A3               [24]  536 	inc	dptr
      000161 F0               [24]  537 	movx	@dptr,a
      000162 EE               [12]  538 	mov	a,r6
      000163 A3               [24]  539 	inc	dptr
      000164 F0               [24]  540 	movx	@dptr,a
      000165 EF               [12]  541 	mov	a,r7
      000166 B2 E7            [12]  542 	cpl	acc.7
      000168 A3               [24]  543 	inc	dptr
      000169 F0               [24]  544 	movx	@dptr,a
      00016A                        545 00102$:
                                    546 ;	printf_large.c:262: if (f>0x00ffffff)
      00016A 90r00r18         [24]  547 	mov	dptr,#_output_float_f_65536_77
      00016D E0               [24]  548 	movx	a,@dptr
      00016E FC               [12]  549 	mov	r4,a
      00016F A3               [24]  550 	inc	dptr
      000170 E0               [24]  551 	movx	a,@dptr
      000171 FD               [12]  552 	mov	r5,a
      000172 A3               [24]  553 	inc	dptr
      000173 E0               [24]  554 	movx	a,@dptr
      000174 FE               [12]  555 	mov	r6,a
      000175 A3               [24]  556 	inc	dptr
      000176 E0               [24]  557 	movx	a,@dptr
      000177 FF               [12]  558 	mov	r7,a
      000178 C0 07            [24]  559 	push	ar7
      00017A C0 06            [24]  560 	push	ar6
      00017C C0 05            [24]  561 	push	ar5
      00017E C0 04            [24]  562 	push	ar4
      000180 C0 04            [24]  563 	push	ar4
      000182 C0 05            [24]  564 	push	ar5
      000184 C0 06            [24]  565 	push	ar6
      000186 C0 07            [24]  566 	push	ar7
      000188 90 FF FF         [24]  567 	mov	dptr,#0xffff
      00018B 75 F0 7F         [24]  568 	mov	b,#0x7f
      00018E 74 4B            [12]  569 	mov	a,#0x4b
      000190 12r00r00         [24]  570 	lcall	___fslt
      000193 AB 82            [24]  571 	mov	r3,dpl
      000195 E5 81            [12]  572 	mov	a,sp
      000197 24 FC            [12]  573 	add	a,#0xfc
      000199 F5 81            [12]  574 	mov	sp,a
      00019B D0 04            [24]  575 	pop	ar4
      00019D D0 05            [24]  576 	pop	ar5
      00019F D0 06            [24]  577 	pop	ar6
      0001A1 D0 07            [24]  578 	pop	ar7
      0001A3 EB               [12]  579 	mov	a,r3
      0001A4 70 03            [24]  580 	jnz	00394$
      0001A6 02r03r52         [24]  581 	ljmp	00111$
      0001A9                        582 00394$:
                                    583 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
      0001A9 7B 00            [12]  584 	mov	r3,#0x00
      0001AB                        585 00181$:
      0001AB 90r00r18         [24]  586 	mov	dptr,#_output_float_f_65536_77
      0001AE E0               [24]  587 	movx	a,@dptr
      0001AF F5*00            [12]  588 	mov	_output_float_sloc0_1_0,a
      0001B1 A3               [24]  589 	inc	dptr
      0001B2 E0               [24]  590 	movx	a,@dptr
      0001B3 F5*01            [12]  591 	mov	(_output_float_sloc0_1_0 + 1),a
      0001B5 A3               [24]  592 	inc	dptr
      0001B6 E0               [24]  593 	movx	a,@dptr
      0001B7 F5*02            [12]  594 	mov	(_output_float_sloc0_1_0 + 2),a
      0001B9 A3               [24]  595 	inc	dptr
      0001BA E0               [24]  596 	movx	a,@dptr
      0001BB F5*03            [12]  597 	mov	(_output_float_sloc0_1_0 + 3),a
      0001BD C0 07            [24]  598 	push	ar7
      0001BF C0 06            [24]  599 	push	ar6
      0001C1 C0 05            [24]  600 	push	ar5
      0001C3 C0 04            [24]  601 	push	ar4
      0001C5 C0 03            [24]  602 	push	ar3
      0001C7 E4               [12]  603 	clr	a
      0001C8 C0 E0            [24]  604 	push	acc
      0001CA C0 E0            [24]  605 	push	acc
      0001CC 74 20            [12]  606 	mov	a,#0x20
      0001CE C0 E0            [24]  607 	push	acc
      0001D0 74 41            [12]  608 	mov	a,#0x41
      0001D2 C0 E0            [24]  609 	push	acc
      0001D4 85*00 82         [24]  610 	mov	dpl,_output_float_sloc0_1_0
      0001D7 85*01 83         [24]  611 	mov	dph,(_output_float_sloc0_1_0 + 1)
      0001DA 85*02 F0         [24]  612 	mov	b,(_output_float_sloc0_1_0 + 2)
      0001DD E5*03            [12]  613 	mov	a,(_output_float_sloc0_1_0 + 3)
      0001DF 12r00r00         [24]  614 	lcall	___fslt
      0001E2 E5 81            [12]  615 	mov	a,sp
      0001E4 24 FC            [12]  616 	add	a,#0xfc
      0001E6 F5 81            [12]  617 	mov	sp,a
      0001E8 D0 03            [24]  618 	pop	ar3
      0001EA D0 04            [24]  619 	pop	ar4
      0001EC D0 05            [24]  620 	pop	ar5
      0001EE D0 06            [24]  621 	pop	ar6
      0001F0 D0 07            [24]  622 	pop	ar7
      0001F2 E5 82            [12]  623 	mov	a,dpl
      0001F4 24 FF            [12]  624 	add	a,#0xff
      0001F6 92*00            [24]  625 	mov	_output_float_sloc1_1_0,c
      0001F8 40 5A            [24]  626 	jc	00205$
      0001FA C0 04            [24]  627 	push	ar4
      0001FC C0 05            [24]  628 	push	ar5
      0001FE C0 06            [24]  629 	push	ar6
      000200 C0 07            [24]  630 	push	ar7
      000202 C0 06            [24]  631 	push	ar6
      000204 C0 05            [24]  632 	push	ar5
      000206 C0 04            [24]  633 	push	ar4
      000208 C0 03            [24]  634 	push	ar3
      00020A E4               [12]  635 	clr	a
      00020B C0 E0            [24]  636 	push	acc
      00020D C0 E0            [24]  637 	push	acc
      00020F 74 20            [12]  638 	mov	a,#0x20
      000211 C0 E0            [24]  639 	push	acc
      000213 74 41            [12]  640 	mov	a,#0x41
      000215 C0 E0            [24]  641 	push	acc
      000217 85*00 82         [24]  642 	mov	dpl,_output_float_sloc0_1_0
      00021A 85*01 83         [24]  643 	mov	dph,(_output_float_sloc0_1_0 + 1)
      00021D 85*02 F0         [24]  644 	mov	b,(_output_float_sloc0_1_0 + 2)
      000220 E5*03            [12]  645 	mov	a,(_output_float_sloc0_1_0 + 3)
      000222 12r00r00         [24]  646 	lcall	___fsdiv
      000225 A8 82            [24]  647 	mov	r0,dpl
      000227 A9 83            [24]  648 	mov	r1,dph
      000229 AA F0            [24]  649 	mov	r2,b
      00022B FF               [12]  650 	mov	r7,a
      00022C E5 81            [12]  651 	mov	a,sp
      00022E 24 FC            [12]  652 	add	a,#0xfc
      000230 F5 81            [12]  653 	mov	sp,a
      000232 D0 03            [24]  654 	pop	ar3
      000234 D0 04            [24]  655 	pop	ar4
      000236 D0 05            [24]  656 	pop	ar5
      000238 D0 06            [24]  657 	pop	ar6
      00023A 90r00r18         [24]  658 	mov	dptr,#_output_float_f_65536_77
      00023D E8               [12]  659 	mov	a,r0
      00023E F0               [24]  660 	movx	@dptr,a
      00023F E9               [12]  661 	mov	a,r1
      000240 A3               [24]  662 	inc	dptr
      000241 F0               [24]  663 	movx	@dptr,a
      000242 EA               [12]  664 	mov	a,r2
      000243 A3               [24]  665 	inc	dptr
      000244 F0               [24]  666 	movx	@dptr,a
      000245 EF               [12]  667 	mov	a,r7
      000246 A3               [24]  668 	inc	dptr
      000247 F0               [24]  669 	movx	@dptr,a
      000248 0B               [12]  670 	inc	r3
      000249 D0 07            [24]  671 	pop	ar7
      00024B D0 06            [24]  672 	pop	ar6
      00024D D0 05            [24]  673 	pop	ar5
      00024F D0 04            [24]  674 	pop	ar4
      000251 02r01rAB         [24]  675 	ljmp	00181$
      000254                        676 00205$:
      000254                        677 00184$:
                                    678 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
      000254 90r00r18         [24]  679 	mov	dptr,#_output_float_f_65536_77
      000257 E0               [24]  680 	movx	a,@dptr
      000258 F5*00            [12]  681 	mov	_output_float_sloc0_1_0,a
      00025A A3               [24]  682 	inc	dptr
      00025B E0               [24]  683 	movx	a,@dptr
      00025C F5*01            [12]  684 	mov	(_output_float_sloc0_1_0 + 1),a
      00025E A3               [24]  685 	inc	dptr
      00025F E0               [24]  686 	movx	a,@dptr
      000260 F5*02            [12]  687 	mov	(_output_float_sloc0_1_0 + 2),a
      000262 A3               [24]  688 	inc	dptr
      000263 E0               [24]  689 	movx	a,@dptr
      000264 F5*03            [12]  690 	mov	(_output_float_sloc0_1_0 + 3),a
      000266 C0 07            [24]  691 	push	ar7
      000268 C0 06            [24]  692 	push	ar6
      00026A C0 05            [24]  693 	push	ar5
      00026C C0 04            [24]  694 	push	ar4
      00026E C0 03            [24]  695 	push	ar3
      000270 E4               [12]  696 	clr	a
      000271 C0 E0            [24]  697 	push	acc
      000273 C0 E0            [24]  698 	push	acc
      000275 74 80            [12]  699 	mov	a,#0x80
      000277 C0 E0            [24]  700 	push	acc
      000279 74 3F            [12]  701 	mov	a,#0x3f
      00027B C0 E0            [24]  702 	push	acc
      00027D 85*00 82         [24]  703 	mov	dpl,_output_float_sloc0_1_0
      000280 85*01 83         [24]  704 	mov	dph,(_output_float_sloc0_1_0 + 1)
      000283 85*02 F0         [24]  705 	mov	b,(_output_float_sloc0_1_0 + 2)
      000286 E5*03            [12]  706 	mov	a,(_output_float_sloc0_1_0 + 3)
      000288 12r00r00         [24]  707 	lcall	___fslt
      00028B AA 82            [24]  708 	mov	r2,dpl
      00028D E5 81            [12]  709 	mov	a,sp
      00028F 24 FC            [12]  710 	add	a,#0xfc
      000291 F5 81            [12]  711 	mov	sp,a
      000293 D0 03            [24]  712 	pop	ar3
      000295 D0 04            [24]  713 	pop	ar4
      000297 D0 05            [24]  714 	pop	ar5
      000299 D0 06            [24]  715 	pop	ar6
      00029B D0 07            [24]  716 	pop	ar7
      00029D EA               [12]  717 	mov	a,r2
      00029E 60 52            [24]  718 	jz	00246$
      0002A0 C0 04            [24]  719 	push	ar4
      0002A2 C0 05            [24]  720 	push	ar5
      0002A4 C0 06            [24]  721 	push	ar6
      0002A6 C0 07            [24]  722 	push	ar7
      0002A8 C0 06            [24]  723 	push	ar6
      0002AA C0 05            [24]  724 	push	ar5
      0002AC C0 04            [24]  725 	push	ar4
      0002AE C0 03            [24]  726 	push	ar3
      0002B0 C0*00            [24]  727 	push	_output_float_sloc0_1_0
      0002B2 C0*01            [24]  728 	push	(_output_float_sloc0_1_0 + 1)
      0002B4 C0*02            [24]  729 	push	(_output_float_sloc0_1_0 + 2)
      0002B6 C0*03            [24]  730 	push	(_output_float_sloc0_1_0 + 3)
      0002B8 90 00 00         [24]  731 	mov	dptr,#0x0000
      0002BB 75 F0 20         [24]  732 	mov	b,#0x20
      0002BE 74 41            [12]  733 	mov	a,#0x41
      0002C0 12r00r00         [24]  734 	lcall	___fsmul
      0002C3 A8 82            [24]  735 	mov	r0,dpl
      0002C5 A9 83            [24]  736 	mov	r1,dph
      0002C7 AA F0            [24]  737 	mov	r2,b
      0002C9 FF               [12]  738 	mov	r7,a
      0002CA E5 81            [12]  739 	mov	a,sp
      0002CC 24 FC            [12]  740 	add	a,#0xfc
      0002CE F5 81            [12]  741 	mov	sp,a
      0002D0 D0 03            [24]  742 	pop	ar3
      0002D2 D0 04            [24]  743 	pop	ar4
      0002D4 D0 05            [24]  744 	pop	ar5
      0002D6 D0 06            [24]  745 	pop	ar6
      0002D8 90r00r18         [24]  746 	mov	dptr,#_output_float_f_65536_77
      0002DB E8               [12]  747 	mov	a,r0
      0002DC F0               [24]  748 	movx	@dptr,a
      0002DD E9               [12]  749 	mov	a,r1
      0002DE A3               [24]  750 	inc	dptr
      0002DF F0               [24]  751 	movx	@dptr,a
      0002E0 EA               [12]  752 	mov	a,r2
      0002E1 A3               [24]  753 	inc	dptr
      0002E2 F0               [24]  754 	movx	@dptr,a
      0002E3 EF               [12]  755 	mov	a,r7
      0002E4 A3               [24]  756 	inc	dptr
      0002E5 F0               [24]  757 	movx	@dptr,a
      0002E6 1B               [12]  758 	dec	r3
      0002E7 D0 07            [24]  759 	pop	ar7
      0002E9 D0 06            [24]  760 	pop	ar6
      0002EB D0 05            [24]  761 	pop	ar5
      0002ED D0 04            [24]  762 	pop	ar4
      0002EF 02r02r54         [24]  763 	ljmp	00184$
      0002F2                        764 00246$:
      0002F2 90r00rAB         [24]  765 	mov	dptr,#_output_float_exp_65536_78
      0002F5 EB               [12]  766 	mov	a,r3
      0002F6 F0               [24]  767 	movx	@dptr,a
                                    768 ;	printf_large.c:269: if (negative)
      0002F7 90r00r9C         [24]  769 	mov	dptr,#_output_float_negative_65536_78
      0002FA E0               [24]  770 	movx	a,@dptr
      0002FB 60 1E            [24]  771 	jz	00108$
                                    772 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      0002FD 75 82 2D         [24]  773 	mov	dpl,#0x2d
      000300 C0 07            [24]  774 	push	ar7
      000302 C0 06            [24]  775 	push	ar6
      000304 C0 05            [24]  776 	push	ar5
      000306 C0 04            [24]  777 	push	ar4
      000308 78r00            [12]  778 	mov	r0,#__output_char
      00030A 79s00            [12]  779 	mov	r1,#(__output_char >> 8)
      00030C 7As00            [12]  780 	mov	r2,#(__output_char >> 16)
      00030E 12r00r00         [24]  781 	lcall	__sdcc_banked_call
      000311 D0 04            [24]  782 	pop	ar4
      000313 D0 05            [24]  783 	pop	ar5
      000315 D0 06            [24]  784 	pop	ar6
      000317 D0 07            [24]  785 	pop	ar7
      000319 80 22            [24]  786 	sjmp	00109$
      00031B                        787 00108$:
                                    788 ;	printf_large.c:275: if (sign)
      00031B 90r00r16         [24]  789 	mov	dptr,#_output_float_PARM_6
      00031E E0               [24]  790 	movx	a,@dptr
      00031F 60 1C            [24]  791 	jz	00109$
                                    792 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      000321 75 82 2B         [24]  793 	mov	dpl,#0x2b
      000324 C0 07            [24]  794 	push	ar7
      000326 C0 06            [24]  795 	push	ar6
      000328 C0 05            [24]  796 	push	ar5
      00032A C0 04            [24]  797 	push	ar4
      00032C 78r00            [12]  798 	mov	r0,#__output_char
      00032E 79s00            [12]  799 	mov	r1,#(__output_char >> 8)
      000330 7As00            [12]  800 	mov	r2,#(__output_char >> 16)
      000332 12r00r00         [24]  801 	lcall	__sdcc_banked_call
      000335 D0 04            [24]  802 	pop	ar4
      000337 D0 05            [24]  803 	pop	ar5
      000339 D0 06            [24]  804 	pop	ar6
      00033B D0 07            [24]  805 	pop	ar7
      00033D                        806 00109$:
                                    807 ;	printf_large.c:280: reqWidth = 0;
      00033D 90r00r12         [24]  808 	mov	dptr,#_output_float_PARM_2
      000340 E4               [12]  809 	clr	a
      000341 F0               [24]  810 	movx	@dptr,a
                                    811 ;	printf_large.c:281: left = 0;
      000342 90r00r14         [24]  812 	mov	dptr,#_output_float_PARM_4
      000345 F0               [24]  813 	movx	@dptr,a
                                    814 ;	printf_large.c:282: zero = 0;
      000346 90r00r15         [24]  815 	mov	dptr,#_output_float_PARM_5
      000349 F0               [24]  816 	movx	@dptr,a
                                    817 ;	printf_large.c:283: sign = 0;
      00034A 90r00r16         [24]  818 	mov	dptr,#_output_float_PARM_6
      00034D F0               [24]  819 	movx	@dptr,a
                                    820 ;	printf_large.c:284: space = 0;
      00034E 90r00r17         [24]  821 	mov	dptr,#_output_float_PARM_7
      000351 F0               [24]  822 	movx	@dptr,a
      000352                        823 00111$:
                                    824 ;	printf_large.c:288: if (reqDecimals==-1)
      000352 90r00r13         [24]  825 	mov	dptr,#_output_float_PARM_3
      000355 E0               [24]  826 	movx	a,@dptr
      000356 FB               [12]  827 	mov	r3,a
      000357 BB FF 06         [24]  828 	cjne	r3,#0xff,00113$
                                    829 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
      00035A 90r00r13         [24]  830 	mov	dptr,#_output_float_PARM_3
      00035D 74 06            [12]  831 	mov	a,#0x06
      00035F F0               [24]  832 	movx	@dptr,a
      000360                        833 00113$:
                                    834 ;	printf_large.c:292: rounding = 0.5;
      000360 90r00rA1         [24]  835 	mov	dptr,#_output_float_rounding_65536_78
      000363 E4               [12]  836 	clr	a
      000364 F0               [24]  837 	movx	@dptr,a
      000365 A3               [24]  838 	inc	dptr
      000366 F0               [24]  839 	movx	@dptr,a
      000367 A3               [24]  840 	inc	dptr
      000368 F0               [24]  841 	movx	@dptr,a
      000369 74 3F            [12]  842 	mov	a,#0x3f
      00036B A3               [24]  843 	inc	dptr
      00036C F0               [24]  844 	movx	@dptr,a
                                    845 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      00036D 90r00r13         [24]  846 	mov	dptr,#_output_float_PARM_3
      000370 E0               [24]  847 	movx	a,@dptr
      000371 FB               [12]  848 	mov	r3,a
      000372                        849 00187$:
      000372 EB               [12]  850 	mov	a,r3
      000373 60 57            [24]  851 	jz	00114$
                                    852 ;	printf_large.c:295: rounding /= 10.0;
      000375 C0 04            [24]  853 	push	ar4
      000377 C0 05            [24]  854 	push	ar5
      000379 C0 06            [24]  855 	push	ar6
      00037B C0 07            [24]  856 	push	ar7
      00037D 90r00rA1         [24]  857 	mov	dptr,#_output_float_rounding_65536_78
      000380 E0               [24]  858 	movx	a,@dptr
      000381 F8               [12]  859 	mov	r0,a
      000382 A3               [24]  860 	inc	dptr
      000383 E0               [24]  861 	movx	a,@dptr
      000384 F9               [12]  862 	mov	r1,a
      000385 A3               [24]  863 	inc	dptr
      000386 E0               [24]  864 	movx	a,@dptr
      000387 FA               [12]  865 	mov	r2,a
      000388 A3               [24]  866 	inc	dptr
      000389 E0               [24]  867 	movx	a,@dptr
      00038A FF               [12]  868 	mov	r7,a
      00038B C0 03            [24]  869 	push	ar3
      00038D E4               [12]  870 	clr	a
      00038E C0 E0            [24]  871 	push	acc
      000390 C0 E0            [24]  872 	push	acc
      000392 74 20            [12]  873 	mov	a,#0x20
      000394 C0 E0            [24]  874 	push	acc
      000396 74 41            [12]  875 	mov	a,#0x41
      000398 C0 E0            [24]  876 	push	acc
      00039A 88 82            [24]  877 	mov	dpl,r0
      00039C 89 83            [24]  878 	mov	dph,r1
      00039E 8A F0            [24]  879 	mov	b,r2
      0003A0 EF               [12]  880 	mov	a,r7
      0003A1 12r00r00         [24]  881 	lcall	___fsdiv
      0003A4 AC 82            [24]  882 	mov	r4,dpl
      0003A6 AD 83            [24]  883 	mov	r5,dph
      0003A8 AE F0            [24]  884 	mov	r6,b
      0003AA FF               [12]  885 	mov	r7,a
      0003AB E5 81            [12]  886 	mov	a,sp
      0003AD 24 FC            [12]  887 	add	a,#0xfc
      0003AF F5 81            [12]  888 	mov	sp,a
      0003B1 D0 03            [24]  889 	pop	ar3
      0003B3 90r00rA1         [24]  890 	mov	dptr,#_output_float_rounding_65536_78
      0003B6 EC               [12]  891 	mov	a,r4
      0003B7 F0               [24]  892 	movx	@dptr,a
      0003B8 ED               [12]  893 	mov	a,r5
      0003B9 A3               [24]  894 	inc	dptr
      0003BA F0               [24]  895 	movx	@dptr,a
      0003BB EE               [12]  896 	mov	a,r6
      0003BC A3               [24]  897 	inc	dptr
      0003BD F0               [24]  898 	movx	@dptr,a
      0003BE EF               [12]  899 	mov	a,r7
      0003BF A3               [24]  900 	inc	dptr
      0003C0 F0               [24]  901 	movx	@dptr,a
                                    902 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0003C1 1B               [12]  903 	dec	r3
      0003C2 D0 07            [24]  904 	pop	ar7
      0003C4 D0 06            [24]  905 	pop	ar6
      0003C6 D0 05            [24]  906 	pop	ar5
      0003C8 D0 04            [24]  907 	pop	ar4
      0003CA 80 A6            [24]  908 	sjmp	00187$
      0003CC                        909 00114$:
                                    910 ;	printf_large.c:297: f += rounding;
      0003CC 90r00rA1         [24]  911 	mov	dptr,#_output_float_rounding_65536_78
      0003CF E0               [24]  912 	movx	a,@dptr
      0003D0 C0 E0            [24]  913 	push	acc
      0003D2 A3               [24]  914 	inc	dptr
      0003D3 E0               [24]  915 	movx	a,@dptr
      0003D4 C0 E0            [24]  916 	push	acc
      0003D6 A3               [24]  917 	inc	dptr
      0003D7 E0               [24]  918 	movx	a,@dptr
      0003D8 C0 E0            [24]  919 	push	acc
      0003DA A3               [24]  920 	inc	dptr
      0003DB E0               [24]  921 	movx	a,@dptr
      0003DC C0 E0            [24]  922 	push	acc
      0003DE 8C 82            [24]  923 	mov	dpl,r4
      0003E0 8D 83            [24]  924 	mov	dph,r5
      0003E2 8E F0            [24]  925 	mov	b,r6
      0003E4 EF               [12]  926 	mov	a,r7
      0003E5 12r00r00         [24]  927 	lcall	___fsadd
      0003E8 AC 82            [24]  928 	mov	r4,dpl
      0003EA AD 83            [24]  929 	mov	r5,dph
      0003EC AE F0            [24]  930 	mov	r6,b
      0003EE FF               [12]  931 	mov	r7,a
      0003EF E5 81            [12]  932 	mov	a,sp
      0003F1 24 FC            [12]  933 	add	a,#0xfc
      0003F3 F5 81            [12]  934 	mov	sp,a
      0003F5 90r00r18         [24]  935 	mov	dptr,#_output_float_f_65536_77
      0003F8 EC               [12]  936 	mov	a,r4
      0003F9 F0               [24]  937 	movx	@dptr,a
      0003FA ED               [12]  938 	mov	a,r5
      0003FB A3               [24]  939 	inc	dptr
      0003FC F0               [24]  940 	movx	@dptr,a
      0003FD EE               [12]  941 	mov	a,r6
      0003FE A3               [24]  942 	inc	dptr
      0003FF F0               [24]  943 	movx	@dptr,a
      000400 EF               [12]  944 	mov	a,r7
      000401 A3               [24]  945 	inc	dptr
      000402 F0               [24]  946 	movx	@dptr,a
                                    947 ;	printf_large.c:300: integerPart = f;
      000403 8C 82            [24]  948 	mov	dpl,r4
      000405 8D 83            [24]  949 	mov	dph,r5
      000407 8E F0            [24]  950 	mov	b,r6
      000409 EF               [12]  951 	mov	a,r7
      00040A C0 07            [24]  952 	push	ar7
      00040C C0 06            [24]  953 	push	ar6
      00040E C0 05            [24]  954 	push	ar5
      000410 C0 04            [24]  955 	push	ar4
      000412 12r00r00         [24]  956 	lcall	___fs2ulong
      000415 A8 82            [24]  957 	mov	r0,dpl
      000417 A9 83            [24]  958 	mov	r1,dph
      000419 AA F0            [24]  959 	mov	r2,b
      00041B FB               [12]  960 	mov	r3,a
      00041C 90r00r9D         [24]  961 	mov	dptr,#_output_float_integerPart_65536_78
      00041F E8               [12]  962 	mov	a,r0
      000420 F0               [24]  963 	movx	@dptr,a
      000421 E9               [12]  964 	mov	a,r1
      000422 A3               [24]  965 	inc	dptr
      000423 F0               [24]  966 	movx	@dptr,a
      000424 EA               [12]  967 	mov	a,r2
      000425 A3               [24]  968 	inc	dptr
      000426 F0               [24]  969 	movx	@dptr,a
      000427 EB               [12]  970 	mov	a,r3
      000428 A3               [24]  971 	inc	dptr
      000429 F0               [24]  972 	movx	@dptr,a
                                    973 ;	printf_large.c:301: decimalPart = f - integerPart;
      00042A 88 82            [24]  974 	mov	dpl,r0
      00042C 89 83            [24]  975 	mov	dph,r1
      00042E 8A F0            [24]  976 	mov	b,r2
      000430 EB               [12]  977 	mov	a,r3
      000431 12r00r00         [24]  978 	lcall	___ulong2fs
      000434 A8 82            [24]  979 	mov	r0,dpl
      000436 A9 83            [24]  980 	mov	r1,dph
      000438 AA F0            [24]  981 	mov	r2,b
      00043A FB               [12]  982 	mov	r3,a
      00043B D0 04            [24]  983 	pop	ar4
      00043D D0 05            [24]  984 	pop	ar5
      00043F D0 06            [24]  985 	pop	ar6
      000441 D0 07            [24]  986 	pop	ar7
      000443 C0 00            [24]  987 	push	ar0
      000445 C0 01            [24]  988 	push	ar1
      000447 C0 02            [24]  989 	push	ar2
      000449 C0 03            [24]  990 	push	ar3
      00044B 8C 82            [24]  991 	mov	dpl,r4
      00044D 8D 83            [24]  992 	mov	dph,r5
      00044F 8E F0            [24]  993 	mov	b,r6
      000451 EF               [12]  994 	mov	a,r7
      000452 12r00r00         [24]  995 	lcall	___fssub
      000455 AC 82            [24]  996 	mov	r4,dpl
      000457 AD 83            [24]  997 	mov	r5,dph
      000459 AE F0            [24]  998 	mov	r6,b
      00045B FF               [12]  999 	mov	r7,a
      00045C E5 81            [12] 1000 	mov	a,sp
      00045E 24 FC            [12] 1001 	add	a,#0xfc
      000460 F5 81            [12] 1002 	mov	sp,a
      000462 90r00rA5         [24] 1003 	mov	dptr,#_output_float_decimalPart_65536_78
      000465 EC               [12] 1004 	mov	a,r4
      000466 F0               [24] 1005 	movx	@dptr,a
      000467 ED               [12] 1006 	mov	a,r5
      000468 A3               [24] 1007 	inc	dptr
      000469 F0               [24] 1008 	movx	@dptr,a
      00046A EE               [12] 1009 	mov	a,r6
      00046B A3               [24] 1010 	inc	dptr
      00046C F0               [24] 1011 	movx	@dptr,a
      00046D EF               [12] 1012 	mov	a,r7
      00046E A3               [24] 1013 	inc	dptr
      00046F F0               [24] 1014 	movx	@dptr,a
                                   1015 ;	printf_large.c:304: while (integerPart)
      000470 7F 00            [12] 1016 	mov	r7,#0x00
      000472                       1017 00115$:
      000472 90r00r9D         [24] 1018 	mov	dptr,#_output_float_integerPart_65536_78
      000475 E0               [24] 1019 	movx	a,@dptr
      000476 F5*04            [12] 1020 	mov	_output_float_sloc2_1_0,a
      000478 A3               [24] 1021 	inc	dptr
      000479 E0               [24] 1022 	movx	a,@dptr
      00047A F5*05            [12] 1023 	mov	(_output_float_sloc2_1_0 + 1),a
      00047C A3               [24] 1024 	inc	dptr
      00047D E0               [24] 1025 	movx	a,@dptr
      00047E F5*06            [12] 1026 	mov	(_output_float_sloc2_1_0 + 2),a
      000480 A3               [24] 1027 	inc	dptr
      000481 E0               [24] 1028 	movx	a,@dptr
      000482 F5*07            [12] 1029 	mov	(_output_float_sloc2_1_0 + 3),a
      000484 E5*04            [12] 1030 	mov	a,_output_float_sloc2_1_0
      000486 45*05            [12] 1031 	orl	a,(_output_float_sloc2_1_0 + 1)
      000488 45*06            [12] 1032 	orl	a,(_output_float_sloc2_1_0 + 2)
      00048A 45*07            [12] 1033 	orl	a,(_output_float_sloc2_1_0 + 3)
      00048C 60 6B            [24] 1034 	jz	00248$
                                   1035 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      00048E 8F 02            [24] 1036 	mov	ar2,r7
      000490 0F               [12] 1037 	inc	r7
      000491 EA               [12] 1038 	mov	a,r2
      000492 24r1C            [12] 1039 	add	a,#_output_float_fpBuffer_65536_78
      000494 F5*00            [12] 1040 	mov	_output_float_sloc0_1_0,a
      000496 E4               [12] 1041 	clr	a
      000497 34s00            [12] 1042 	addc	a,#(_output_float_fpBuffer_65536_78 >> 8)
      000499 F5*01            [12] 1043 	mov	(_output_float_sloc0_1_0 + 1),a
      00049B 90r00r00         [24] 1044 	mov	dptr,#__modulong_PARM_2
      00049E 74 0A            [12] 1045 	mov	a,#0x0a
      0004A0 F0               [24] 1046 	movx	@dptr,a
      0004A1 E4               [12] 1047 	clr	a
      0004A2 A3               [24] 1048 	inc	dptr
      0004A3 F0               [24] 1049 	movx	@dptr,a
      0004A4 A3               [24] 1050 	inc	dptr
      0004A5 F0               [24] 1051 	movx	@dptr,a
      0004A6 A3               [24] 1052 	inc	dptr
      0004A7 F0               [24] 1053 	movx	@dptr,a
      0004A8 85*04 82         [24] 1054 	mov	dpl,_output_float_sloc2_1_0
      0004AB 85*05 83         [24] 1055 	mov	dph,(_output_float_sloc2_1_0 + 1)
      0004AE 85*06 F0         [24] 1056 	mov	b,(_output_float_sloc2_1_0 + 2)
      0004B1 E5*07            [12] 1057 	mov	a,(_output_float_sloc2_1_0 + 3)
      0004B3 C0 07            [24] 1058 	push	ar7
      0004B5 12r00r00         [24] 1059 	lcall	__modulong
      0004B8 A8 82            [24] 1060 	mov	r0,dpl
      0004BA 74 30            [12] 1061 	mov	a,#0x30
      0004BC 28               [12] 1062 	add	a,r0
      0004BD 85*00 82         [24] 1063 	mov	dpl,_output_float_sloc0_1_0
      0004C0 85*01 83         [24] 1064 	mov	dph,(_output_float_sloc0_1_0 + 1)
      0004C3 F0               [24] 1065 	movx	@dptr,a
                                   1066 ;	printf_large.c:307: integerPart /= 10;
      0004C4 90r00r00         [24] 1067 	mov	dptr,#__divulong_PARM_2
      0004C7 74 0A            [12] 1068 	mov	a,#0x0a
      0004C9 F0               [24] 1069 	movx	@dptr,a
      0004CA E4               [12] 1070 	clr	a
      0004CB A3               [24] 1071 	inc	dptr
      0004CC F0               [24] 1072 	movx	@dptr,a
      0004CD A3               [24] 1073 	inc	dptr
      0004CE F0               [24] 1074 	movx	@dptr,a
      0004CF A3               [24] 1075 	inc	dptr
      0004D0 F0               [24] 1076 	movx	@dptr,a
      0004D1 85*04 82         [24] 1077 	mov	dpl,_output_float_sloc2_1_0
      0004D4 85*05 83         [24] 1078 	mov	dph,(_output_float_sloc2_1_0 + 1)
      0004D7 85*06 F0         [24] 1079 	mov	b,(_output_float_sloc2_1_0 + 2)
      0004DA E5*07            [12] 1080 	mov	a,(_output_float_sloc2_1_0 + 3)
      0004DC 12r00r00         [24] 1081 	lcall	__divulong
      0004DF AB 82            [24] 1082 	mov	r3,dpl
      0004E1 AC 83            [24] 1083 	mov	r4,dph
      0004E3 AD F0            [24] 1084 	mov	r5,b
      0004E5 FE               [12] 1085 	mov	r6,a
      0004E6 D0 07            [24] 1086 	pop	ar7
      0004E8 90r00r9D         [24] 1087 	mov	dptr,#_output_float_integerPart_65536_78
      0004EB EB               [12] 1088 	mov	a,r3
      0004EC F0               [24] 1089 	movx	@dptr,a
      0004ED EC               [12] 1090 	mov	a,r4
      0004EE A3               [24] 1091 	inc	dptr
      0004EF F0               [24] 1092 	movx	@dptr,a
      0004F0 ED               [12] 1093 	mov	a,r5
      0004F1 A3               [24] 1094 	inc	dptr
      0004F2 F0               [24] 1095 	movx	@dptr,a
      0004F3 EE               [12] 1096 	mov	a,r6
      0004F4 A3               [24] 1097 	inc	dptr
      0004F5 F0               [24] 1098 	movx	@dptr,a
      0004F6 02r04r72         [24] 1099 	ljmp	00115$
      0004F9                       1100 00248$:
      0004F9 90r00rA9         [24] 1101 	mov	dptr,#_output_float_fpBI_65536_78
      0004FC EF               [12] 1102 	mov	a,r7
      0004FD F0               [24] 1103 	movx	@dptr,a
                                   1104 ;	printf_large.c:309: if (!fpBI)
      0004FE EF               [12] 1105 	mov	a,r7
      0004FF 70 13            [24] 1106 	jnz	00119$
                                   1107 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000501 90r00rA9         [24] 1108 	mov	dptr,#_output_float_fpBI_65536_78
      000504 EF               [12] 1109 	mov	a,r7
      000505 04               [12] 1110 	inc	a
      000506 F0               [24] 1111 	movx	@dptr,a
      000507 EF               [12] 1112 	mov	a,r7
      000508 24r1C            [12] 1113 	add	a,#_output_float_fpBuffer_65536_78
      00050A F5 82            [12] 1114 	mov	dpl,a
      00050C E4               [12] 1115 	clr	a
      00050D 34s00            [12] 1116 	addc	a,#(_output_float_fpBuffer_65536_78 >> 8)
      00050F F5 83            [12] 1117 	mov	dph,a
      000511 74 30            [12] 1118 	mov	a,#0x30
      000513 F0               [24] 1119 	movx	@dptr,a
      000514                       1120 00119$:
                                   1121 ;	printf_large.c:316: fpBD=fpBI;
      000514 90r00rA9         [24] 1122 	mov	dptr,#_output_float_fpBI_65536_78
      000517 E0               [24] 1123 	movx	a,@dptr
      000518 F5*04            [12] 1124 	mov	_output_float_sloc2_1_0,a
                                   1125 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      00051A 90r00r13         [24] 1126 	mov	dptr,#_output_float_PARM_3
      00051D E0               [24] 1127 	movx	a,@dptr
      00051E FE               [12] 1128 	mov	r6,a
      00051F 85*04*00         [24] 1129 	mov	_output_float_sloc0_1_0,_output_float_sloc2_1_0
      000522 8E 04            [24] 1130 	mov	ar4,r6
      000524                       1131 00190$:
      000524 EC               [12] 1132 	mov	a,r4
      000525 70 03            [24] 1133 	jnz	00404$
      000527 02r05rF0         [24] 1134 	ljmp	00120$
      00052A                       1135 00404$:
                                   1136 ;	printf_large.c:320: decimalPart *= 10.0;
      00052A C0 06            [24] 1137 	push	ar6
      00052C C0 06            [24] 1138 	push	ar6
      00052E C0 04            [24] 1139 	push	ar4
      000530 90r00rA5         [24] 1140 	mov	dptr,#_output_float_decimalPart_65536_78
      000533 E0               [24] 1141 	movx	a,@dptr
      000534 C0 E0            [24] 1142 	push	acc
      000536 A3               [24] 1143 	inc	dptr
      000537 E0               [24] 1144 	movx	a,@dptr
      000538 C0 E0            [24] 1145 	push	acc
      00053A A3               [24] 1146 	inc	dptr
      00053B E0               [24] 1147 	movx	a,@dptr
      00053C C0 E0            [24] 1148 	push	acc
      00053E A3               [24] 1149 	inc	dptr
      00053F E0               [24] 1150 	movx	a,@dptr
      000540 C0 E0            [24] 1151 	push	acc
      000542 90 00 00         [24] 1152 	mov	dptr,#0x0000
      000545 75 F0 20         [24] 1153 	mov	b,#0x20
      000548 74 41            [12] 1154 	mov	a,#0x41
      00054A 12r00r00         [24] 1155 	lcall	___fsmul
      00054D A8 82            [24] 1156 	mov	r0,dpl
      00054F A9 83            [24] 1157 	mov	r1,dph
      000551 AA F0            [24] 1158 	mov	r2,b
      000553 FB               [12] 1159 	mov	r3,a
      000554 E5 81            [12] 1160 	mov	a,sp
      000556 24 FC            [12] 1161 	add	a,#0xfc
      000558 F5 81            [12] 1162 	mov	sp,a
      00055A D0 04            [24] 1163 	pop	ar4
      00055C D0 06            [24] 1164 	pop	ar6
      00055E 90r00rA5         [24] 1165 	mov	dptr,#_output_float_decimalPart_65536_78
      000561 E8               [12] 1166 	mov	a,r0
      000562 F0               [24] 1167 	movx	@dptr,a
      000563 E9               [12] 1168 	mov	a,r1
      000564 A3               [24] 1169 	inc	dptr
      000565 F0               [24] 1170 	movx	@dptr,a
      000566 EA               [12] 1171 	mov	a,r2
      000567 A3               [24] 1172 	inc	dptr
      000568 F0               [24] 1173 	movx	@dptr,a
      000569 EB               [12] 1174 	mov	a,r3
      00056A A3               [24] 1175 	inc	dptr
      00056B F0               [24] 1176 	movx	@dptr,a
                                   1177 ;	printf_large.c:322: integerPart = decimalPart;
      00056C 90r00rA5         [24] 1178 	mov	dptr,#_output_float_decimalPart_65536_78
      00056F E0               [24] 1179 	movx	a,@dptr
      000570 F5*08            [12] 1180 	mov	_output_float_sloc3_1_0,a
      000572 A3               [24] 1181 	inc	dptr
      000573 E0               [24] 1182 	movx	a,@dptr
      000574 F5*09            [12] 1183 	mov	(_output_float_sloc3_1_0 + 1),a
      000576 A3               [24] 1184 	inc	dptr
      000577 E0               [24] 1185 	movx	a,@dptr
      000578 F5*0A            [12] 1186 	mov	(_output_float_sloc3_1_0 + 2),a
      00057A A3               [24] 1187 	inc	dptr
      00057B E0               [24] 1188 	movx	a,@dptr
      00057C F5*0B            [12] 1189 	mov	(_output_float_sloc3_1_0 + 3),a
      00057E 85*08 82         [24] 1190 	mov	dpl,_output_float_sloc3_1_0
      000581 85*09 83         [24] 1191 	mov	dph,(_output_float_sloc3_1_0 + 1)
      000584 85*0A F0         [24] 1192 	mov	b,(_output_float_sloc3_1_0 + 2)
      000587 C0 04            [24] 1193 	push	ar4
      000589 12r00r00         [24] 1194 	lcall	___fs2ulong
      00058C AB 82            [24] 1195 	mov	r3,dpl
      00058E AD 83            [24] 1196 	mov	r5,dph
      000590 AE F0            [24] 1197 	mov	r6,b
      000592 FF               [12] 1198 	mov	r7,a
                                   1199 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      000593 E5*00            [12] 1200 	mov	a,_output_float_sloc0_1_0
      000595 24r1C            [12] 1201 	add	a,#_output_float_fpBuffer_65536_78
      000597 F5 82            [12] 1202 	mov	dpl,a
      000599 E4               [12] 1203 	clr	a
      00059A 34s00            [12] 1204 	addc	a,#(_output_float_fpBuffer_65536_78 >> 8)
      00059C F5 83            [12] 1205 	mov	dph,a
      00059E 05*00            [12] 1206 	inc	_output_float_sloc0_1_0
      0005A0 8B 02            [24] 1207 	mov	ar2,r3
      0005A2 74 30            [12] 1208 	mov	a,#0x30
      0005A4 2A               [12] 1209 	add	a,r2
      0005A5 F0               [24] 1210 	movx	@dptr,a
                                   1211 ;	printf_large.c:324: decimalPart -= integerPart;
      0005A6 8B 82            [24] 1212 	mov	dpl,r3
      0005A8 8D 83            [24] 1213 	mov	dph,r5
      0005AA 8E F0            [24] 1214 	mov	b,r6
      0005AC EF               [12] 1215 	mov	a,r7
      0005AD 12r00r00         [24] 1216 	lcall	___ulong2fs
      0005B0 AB 82            [24] 1217 	mov	r3,dpl
      0005B2 AD 83            [24] 1218 	mov	r5,dph
      0005B4 AE F0            [24] 1219 	mov	r6,b
      0005B6 FF               [12] 1220 	mov	r7,a
      0005B7 C0 03            [24] 1221 	push	ar3
      0005B9 C0 05            [24] 1222 	push	ar5
      0005BB C0 06            [24] 1223 	push	ar6
      0005BD C0 07            [24] 1224 	push	ar7
      0005BF 85*08 82         [24] 1225 	mov	dpl,_output_float_sloc3_1_0
      0005C2 85*09 83         [24] 1226 	mov	dph,(_output_float_sloc3_1_0 + 1)
      0005C5 85*0A F0         [24] 1227 	mov	b,(_output_float_sloc3_1_0 + 2)
      0005C8 E5*0B            [12] 1228 	mov	a,(_output_float_sloc3_1_0 + 3)
      0005CA 12r00r00         [24] 1229 	lcall	___fssub
      0005CD AB 82            [24] 1230 	mov	r3,dpl
      0005CF AD 83            [24] 1231 	mov	r5,dph
      0005D1 AE F0            [24] 1232 	mov	r6,b
      0005D3 FF               [12] 1233 	mov	r7,a
      0005D4 E5 81            [12] 1234 	mov	a,sp
      0005D6 24 FC            [12] 1235 	add	a,#0xfc
      0005D8 F5 81            [12] 1236 	mov	sp,a
      0005DA D0 04            [24] 1237 	pop	ar4
      0005DC 90r00rA5         [24] 1238 	mov	dptr,#_output_float_decimalPart_65536_78
      0005DF EB               [12] 1239 	mov	a,r3
      0005E0 F0               [24] 1240 	movx	@dptr,a
      0005E1 ED               [12] 1241 	mov	a,r5
      0005E2 A3               [24] 1242 	inc	dptr
      0005E3 F0               [24] 1243 	movx	@dptr,a
      0005E4 EE               [12] 1244 	mov	a,r6
      0005E5 A3               [24] 1245 	inc	dptr
      0005E6 F0               [24] 1246 	movx	@dptr,a
      0005E7 EF               [12] 1247 	mov	a,r7
      0005E8 A3               [24] 1248 	inc	dptr
      0005E9 F0               [24] 1249 	movx	@dptr,a
                                   1250 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      0005EA 1C               [12] 1251 	dec	r4
      0005EB D0 06            [24] 1252 	pop	ar6
      0005ED 02r05r24         [24] 1253 	ljmp	00190$
      0005F0                       1254 00120$:
                                   1255 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      0005F0 EE               [12] 1256 	mov	a,r6
      0005F1 60 0C            [24] 1257 	jz	00198$
      0005F3 90r00r13         [24] 1258 	mov	dptr,#_output_float_PARM_3
      0005F6 E0               [24] 1259 	movx	a,@dptr
      0005F7 04               [12] 1260 	inc	a
      0005F8 FE               [12] 1261 	mov	r6,a
      0005F9 33               [12] 1262 	rlc	a
      0005FA 95 E0            [12] 1263 	subb	a,acc
      0005FC FF               [12] 1264 	mov	r7,a
      0005FD 80 04            [24] 1265 	sjmp	00199$
      0005FF                       1266 00198$:
      0005FF 7E 00            [12] 1267 	mov	r6,#0x00
      000601 7F 00            [12] 1268 	mov	r7,#0x00
      000603                       1269 00199$:
      000603 AF*04            [24] 1270 	mov	r7,_output_float_sloc2_1_0
      000605 EE               [12] 1271 	mov	a,r6
      000606 2F               [12] 1272 	add	a,r7
      000607 FF               [12] 1273 	mov	r7,a
      000608 90r00rAA         [24] 1274 	mov	dptr,#_output_float_minWidth_65536_78
      00060B F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	printf_large.c:329: if (negative || sign || space)
      00060C 90r00r9C         [24] 1277 	mov	dptr,#_output_float_negative_65536_78
      00060F E0               [24] 1278 	movx	a,@dptr
      000610 FE               [12] 1279 	mov	r6,a
      000611 E0               [24] 1280 	movx	a,@dptr
      000612 70 0C            [24] 1281 	jnz	00121$
      000614 90r00r16         [24] 1282 	mov	dptr,#_output_float_PARM_6
      000617 E0               [24] 1283 	movx	a,@dptr
      000618 70 06            [24] 1284 	jnz	00121$
      00061A 90r00r17         [24] 1285 	mov	dptr,#_output_float_PARM_7
      00061D E0               [24] 1286 	movx	a,@dptr
      00061E 60 06            [24] 1287 	jz	00122$
      000620                       1288 00121$:
                                   1289 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      000620 90r00rAA         [24] 1290 	mov	dptr,#_output_float_minWidth_65536_78
      000623 EF               [12] 1291 	mov	a,r7
      000624 04               [12] 1292 	inc	a
      000625 F0               [24] 1293 	movx	@dptr,a
      000626                       1294 00122$:
                                   1295 ;	printf_large.c:332: if (!left && reqWidth>i)
      000626 90r00r14         [24] 1296 	mov	dptr,#_output_float_PARM_4
      000629 E0               [24] 1297 	movx	a,@dptr
      00062A 60 03            [24] 1298 	jz	00409$
      00062C 02r07r08         [24] 1299 	ljmp	00159$
      00062F                       1300 00409$:
      00062F 90r00r12         [24] 1301 	mov	dptr,#_output_float_PARM_2
      000632 E0               [24] 1302 	movx	a,@dptr
      000633 FF               [12] 1303 	mov	r7,a
      000634 C3               [12] 1304 	clr	c
      000635 EC               [12] 1305 	mov	a,r4
      000636 9F               [12] 1306 	subb	a,r7
      000637 40 03            [24] 1307 	jc	00410$
      000639 02r07r08         [24] 1308 	ljmp	00159$
      00063C                       1309 00410$:
                                   1310 ;	printf_large.c:334: if (zero)
      00063C 90r00r15         [24] 1311 	mov	dptr,#_output_float_PARM_5
      00063F E0               [24] 1312 	movx	a,@dptr
      000640 60 62            [24] 1313 	jz	00228$
                                   1314 ;	printf_large.c:336: if (negative)
      000642 EE               [12] 1315 	mov	a,r6
      000643 60 0E            [24] 1316 	jz	00131$
                                   1317 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      000645 75 82 2D         [24] 1318 	mov	dpl,#0x2d
      000648 78r00            [12] 1319 	mov	r0,#__output_char
      00064A 79s00            [12] 1320 	mov	r1,#(__output_char >> 8)
      00064C 7As00            [12] 1321 	mov	r2,#(__output_char >> 16)
      00064E 12r00r00         [24] 1322 	lcall	__sdcc_banked_call
      000651 80 26            [24] 1323 	sjmp	00226$
      000653                       1324 00131$:
                                   1325 ;	printf_large.c:340: else if (sign)
      000653 90r00r16         [24] 1326 	mov	dptr,#_output_float_PARM_6
      000656 E0               [24] 1327 	movx	a,@dptr
      000657 60 0E            [24] 1328 	jz	00128$
                                   1329 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      000659 75 82 2B         [24] 1330 	mov	dpl,#0x2b
      00065C 78r00            [12] 1331 	mov	r0,#__output_char
      00065E 79s00            [12] 1332 	mov	r1,#(__output_char >> 8)
      000660 7As00            [12] 1333 	mov	r2,#(__output_char >> 16)
      000662 12r00r00         [24] 1334 	lcall	__sdcc_banked_call
      000665 80 12            [24] 1335 	sjmp	00226$
      000667                       1336 00128$:
                                   1337 ;	printf_large.c:344: else if (space)
      000667 90r00r17         [24] 1338 	mov	dptr,#_output_float_PARM_7
      00066A E0               [24] 1339 	movx	a,@dptr
      00066B 60 0C            [24] 1340 	jz	00226$
                                   1341 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      00066D 75 82 20         [24] 1342 	mov	dpl,#0x20
      000670 78r00            [12] 1343 	mov	r0,#__output_char
      000672 79s00            [12] 1344 	mov	r1,#(__output_char >> 8)
      000674 7As00            [12] 1345 	mov	r2,#(__output_char >> 16)
      000676 12r00r00         [24] 1346 	lcall	__sdcc_banked_call
                                   1347 ;	printf_large.c:348: while (reqWidth-->minWidth)
      000679                       1348 00226$:
      000679 90r00rAA         [24] 1349 	mov	dptr,#_output_float_minWidth_65536_78
      00067C E0               [24] 1350 	movx	a,@dptr
      00067D FE               [12] 1351 	mov	r6,a
      00067E 90r00r12         [24] 1352 	mov	dptr,#_output_float_PARM_2
      000681 E0               [24] 1353 	movx	a,@dptr
      000682 FD               [12] 1354 	mov	r5,a
      000683                       1355 00133$:
      000683 8D 04            [24] 1356 	mov	ar4,r5
      000685 1D               [12] 1357 	dec	r5
      000686 C3               [12] 1358 	clr	c
      000687 EE               [12] 1359 	mov	a,r6
      000688 9C               [12] 1360 	subb	a,r4
      000689 40 03            [24] 1361 	jc	00415$
      00068B 02r07r44         [24] 1362 	ljmp	00250$
      00068E                       1363 00415$:
                                   1364 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      00068E 75 82 30         [24] 1365 	mov	dpl,#0x30
      000691 C0 06            [24] 1366 	push	ar6
      000693 C0 05            [24] 1367 	push	ar5
      000695 78r00            [12] 1368 	mov	r0,#__output_char
      000697 79s00            [12] 1369 	mov	r1,#(__output_char >> 8)
      000699 7As00            [12] 1370 	mov	r2,#(__output_char >> 16)
      00069B 12r00r00         [24] 1371 	lcall	__sdcc_banked_call
      00069E D0 05            [24] 1372 	pop	ar5
      0006A0 D0 06            [24] 1373 	pop	ar6
                                   1374 ;	printf_large.c:355: while (reqWidth-->minWidth)
      0006A2 80 DF            [24] 1375 	sjmp	00133$
      0006A4                       1376 00228$:
      0006A4 90r00rAA         [24] 1377 	mov	dptr,#_output_float_minWidth_65536_78
      0006A7 E0               [24] 1378 	movx	a,@dptr
      0006A8 FE               [12] 1379 	mov	r6,a
      0006A9                       1380 00136$:
      0006A9 8F 04            [24] 1381 	mov	ar4,r7
      0006AB 1F               [12] 1382 	dec	r7
      0006AC C3               [12] 1383 	clr	c
      0006AD EE               [12] 1384 	mov	a,r6
      0006AE 9C               [12] 1385 	subb	a,r4
      0006AF 50 16            [24] 1386 	jnc	00251$
                                   1387 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0006B1 75 82 20         [24] 1388 	mov	dpl,#0x20
      0006B4 C0 07            [24] 1389 	push	ar7
      0006B6 C0 06            [24] 1390 	push	ar6
      0006B8 78r00            [12] 1391 	mov	r0,#__output_char
      0006BA 79s00            [12] 1392 	mov	r1,#(__output_char >> 8)
      0006BC 7As00            [12] 1393 	mov	r2,#(__output_char >> 16)
      0006BE 12r00r00         [24] 1394 	lcall	__sdcc_banked_call
      0006C1 D0 06            [24] 1395 	pop	ar6
      0006C3 D0 07            [24] 1396 	pop	ar7
      0006C5 80 E2            [24] 1397 	sjmp	00136$
      0006C7                       1398 00251$:
      0006C7 90r00r12         [24] 1399 	mov	dptr,#_output_float_PARM_2
      0006CA EF               [12] 1400 	mov	a,r7
      0006CB F0               [24] 1401 	movx	@dptr,a
                                   1402 ;	printf_large.c:359: if (negative)
      0006CC 90r00r9C         [24] 1403 	mov	dptr,#_output_float_negative_65536_78
      0006CF E0               [24] 1404 	movx	a,@dptr
      0006D0 60 0E            [24] 1405 	jz	00145$
                                   1406 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      0006D2 75 82 2D         [24] 1407 	mov	dpl,#0x2d
      0006D5 78r00            [12] 1408 	mov	r0,#__output_char
      0006D7 79s00            [12] 1409 	mov	r1,#(__output_char >> 8)
      0006D9 7As00            [12] 1410 	mov	r2,#(__output_char >> 16)
      0006DB 12r00r00         [24] 1411 	lcall	__sdcc_banked_call
      0006DE 80 69            [24] 1412 	sjmp	00160$
      0006E0                       1413 00145$:
                                   1414 ;	printf_large.c:363: else if (sign)
      0006E0 90r00r16         [24] 1415 	mov	dptr,#_output_float_PARM_6
      0006E3 E0               [24] 1416 	movx	a,@dptr
      0006E4 60 0E            [24] 1417 	jz	00142$
                                   1418 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      0006E6 75 82 2B         [24] 1419 	mov	dpl,#0x2b
      0006E9 78r00            [12] 1420 	mov	r0,#__output_char
      0006EB 79s00            [12] 1421 	mov	r1,#(__output_char >> 8)
      0006ED 7As00            [12] 1422 	mov	r2,#(__output_char >> 16)
      0006EF 12r00r00         [24] 1423 	lcall	__sdcc_banked_call
      0006F2 80 55            [24] 1424 	sjmp	00160$
      0006F4                       1425 00142$:
                                   1426 ;	printf_large.c:367: else if (space)
      0006F4 90r00r17         [24] 1427 	mov	dptr,#_output_float_PARM_7
      0006F7 E0               [24] 1428 	movx	a,@dptr
      0006F8 60 4F            [24] 1429 	jz	00160$
                                   1430 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      0006FA 75 82 20         [24] 1431 	mov	dpl,#0x20
      0006FD 78r00            [12] 1432 	mov	r0,#__output_char
      0006FF 79s00            [12] 1433 	mov	r1,#(__output_char >> 8)
      000701 7As00            [12] 1434 	mov	r2,#(__output_char >> 16)
      000703 12r00r00         [24] 1435 	lcall	__sdcc_banked_call
      000706 80 41            [24] 1436 	sjmp	00160$
      000708                       1437 00159$:
                                   1438 ;	printf_large.c:375: if (negative)
      000708 90r00r9C         [24] 1439 	mov	dptr,#_output_float_negative_65536_78
      00070B E0               [24] 1440 	movx	a,@dptr
      00070C 60 0E            [24] 1441 	jz	00156$
                                   1442 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      00070E 75 82 2D         [24] 1443 	mov	dpl,#0x2d
      000711 78r00            [12] 1444 	mov	r0,#__output_char
      000713 79s00            [12] 1445 	mov	r1,#(__output_char >> 8)
      000715 7As00            [12] 1446 	mov	r2,#(__output_char >> 16)
      000717 12r00r00         [24] 1447 	lcall	__sdcc_banked_call
      00071A 80 2D            [24] 1448 	sjmp	00160$
      00071C                       1449 00156$:
                                   1450 ;	printf_large.c:379: else if (sign)
      00071C 90r00r16         [24] 1451 	mov	dptr,#_output_float_PARM_6
      00071F E0               [24] 1452 	movx	a,@dptr
      000720 60 0E            [24] 1453 	jz	00153$
                                   1454 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      000722 75 82 2B         [24] 1455 	mov	dpl,#0x2b
      000725 78r00            [12] 1456 	mov	r0,#__output_char
      000727 79s00            [12] 1457 	mov	r1,#(__output_char >> 8)
      000729 7As00            [12] 1458 	mov	r2,#(__output_char >> 16)
      00072B 12r00r00         [24] 1459 	lcall	__sdcc_banked_call
      00072E 80 19            [24] 1460 	sjmp	00160$
      000730                       1461 00153$:
                                   1462 ;	printf_large.c:383: else if (space)
      000730 90r00r17         [24] 1463 	mov	dptr,#_output_float_PARM_7
      000733 E0               [24] 1464 	movx	a,@dptr
      000734 60 13            [24] 1465 	jz	00160$
                                   1466 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000736 75 82 20         [24] 1467 	mov	dpl,#0x20
      000739 78r00            [12] 1468 	mov	r0,#__output_char
      00073B 79s00            [12] 1469 	mov	r1,#(__output_char >> 8)
      00073D 7As00            [12] 1470 	mov	r2,#(__output_char >> 16)
      00073F 12r00r00         [24] 1471 	lcall	__sdcc_banked_call
                                   1472 ;	printf_large.c:428: return;
                                   1473 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000742 80 05            [24] 1474 	sjmp	00160$
      000744                       1475 00250$:
      000744 90r00r12         [24] 1476 	mov	dptr,#_output_float_PARM_2
      000747 ED               [12] 1477 	mov	a,r5
      000748 F0               [24] 1478 	movx	@dptr,a
      000749                       1479 00160$:
                                   1480 ;	printf_large.c:390: i=fpBI-1;
      000749 90r00rA9         [24] 1481 	mov	dptr,#_output_float_fpBI_65536_78
      00074C E0               [24] 1482 	movx	a,@dptr
      00074D FF               [12] 1483 	mov	r7,a
      00074E FE               [12] 1484 	mov	r6,a
      00074F 1E               [12] 1485 	dec	r6
                                   1486 ;	printf_large.c:391: do {
      000750                       1487 00162$:
                                   1488 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      000750 EE               [12] 1489 	mov	a,r6
      000751 24r1C            [12] 1490 	add	a,#_output_float_fpBuffer_65536_78
      000753 F5 82            [12] 1491 	mov	dpl,a
      000755 E4               [12] 1492 	clr	a
      000756 34s00            [12] 1493 	addc	a,#(_output_float_fpBuffer_65536_78 >> 8)
      000758 F5 83            [12] 1494 	mov	dph,a
      00075A E0               [24] 1495 	movx	a,@dptr
      00075B F5 82            [12] 1496 	mov	dpl,a
      00075D C0 07            [24] 1497 	push	ar7
      00075F C0 06            [24] 1498 	push	ar6
      000761 78r00            [12] 1499 	mov	r0,#__output_char
      000763 79s00            [12] 1500 	mov	r1,#(__output_char >> 8)
      000765 7As00            [12] 1501 	mov	r2,#(__output_char >> 16)
      000767 12r00r00         [24] 1502 	lcall	__sdcc_banked_call
      00076A D0 06            [24] 1503 	pop	ar6
      00076C D0 07            [24] 1504 	pop	ar7
                                   1505 ;	printf_large.c:393: } while (i--);
      00076E 8E 05            [24] 1506 	mov	ar5,r6
      000770 1E               [12] 1507 	dec	r6
      000771 ED               [12] 1508 	mov	a,r5
      000772 70 DC            [24] 1509 	jnz	00162$
                                   1510 ;	printf_large.c:396: if (reqDecimals)
      000774 90r00r13         [24] 1511 	mov	dptr,#_output_float_PARM_3
      000777 E0               [24] 1512 	movx	a,@dptr
      000778 FE               [12] 1513 	mov	r6,a
      000779 E0               [24] 1514 	movx	a,@dptr
      00077A 60 3B            [24] 1515 	jz	00169$
                                   1516 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      00077C 75 82 2E         [24] 1517 	mov	dpl,#0x2e
      00077F C0 07            [24] 1518 	push	ar7
      000781 C0 06            [24] 1519 	push	ar6
      000783 78r00            [12] 1520 	mov	r0,#__output_char
      000785 79s00            [12] 1521 	mov	r1,#(__output_char >> 8)
      000787 7As00            [12] 1522 	mov	r2,#(__output_char >> 16)
      000789 12r00r00         [24] 1523 	lcall	__sdcc_banked_call
      00078C D0 06            [24] 1524 	pop	ar6
      00078E D0 07            [24] 1525 	pop	ar7
                                   1526 ;	printf_large.c:400: while (reqDecimals--)
      000790                       1527 00165$:
      000790 8E 05            [24] 1528 	mov	ar5,r6
      000792 1E               [12] 1529 	dec	r6
      000793 ED               [12] 1530 	mov	a,r5
      000794 60 21            [24] 1531 	jz	00169$
                                   1532 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      000796 EF               [12] 1533 	mov	a,r7
      000797 24r1C            [12] 1534 	add	a,#_output_float_fpBuffer_65536_78
      000799 F5 82            [12] 1535 	mov	dpl,a
      00079B E4               [12] 1536 	clr	a
      00079C 34s00            [12] 1537 	addc	a,#(_output_float_fpBuffer_65536_78 >> 8)
      00079E F5 83            [12] 1538 	mov	dph,a
      0007A0 0F               [12] 1539 	inc	r7
      0007A1 E0               [24] 1540 	movx	a,@dptr
      0007A2 F5 82            [12] 1541 	mov	dpl,a
      0007A4 C0 07            [24] 1542 	push	ar7
      0007A6 C0 06            [24] 1543 	push	ar6
      0007A8 78r00            [12] 1544 	mov	r0,#__output_char
      0007AA 79s00            [12] 1545 	mov	r1,#(__output_char >> 8)
      0007AC 7As00            [12] 1546 	mov	r2,#(__output_char >> 16)
      0007AE 12r00r00         [24] 1547 	lcall	__sdcc_banked_call
      0007B1 D0 06            [24] 1548 	pop	ar6
      0007B3 D0 07            [24] 1549 	pop	ar7
      0007B5 80 D9            [24] 1550 	sjmp	00165$
      0007B7                       1551 00169$:
                                   1552 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      0007B7 90r00r14         [24] 1553 	mov	dptr,#_output_float_PARM_4
      0007BA E0               [24] 1554 	movx	a,@dptr
      0007BB 60 2A            [24] 1555 	jz	00174$
      0007BD 90r00r12         [24] 1556 	mov	dptr,#_output_float_PARM_2
      0007C0 E0               [24] 1557 	movx	a,@dptr
      0007C1 FF               [12] 1558 	mov	r7,a
      0007C2 90r00rAA         [24] 1559 	mov	dptr,#_output_float_minWidth_65536_78
      0007C5 E0               [24] 1560 	movx	a,@dptr
      0007C6 FE               [12] 1561 	mov	r6,a
      0007C7 C3               [12] 1562 	clr	c
      0007C8 9F               [12] 1563 	subb	a,r7
      0007C9 50 1C            [24] 1564 	jnc	00174$
                                   1565 ;	printf_large.c:408: while (reqWidth-->minWidth)
      0007CB                       1566 00170$:
      0007CB C3               [12] 1567 	clr	c
      0007CC EE               [12] 1568 	mov	a,r6
      0007CD 9F               [12] 1569 	subb	a,r7
      0007CE 50 17            [24] 1570 	jnc	00174$
      0007D0 1F               [12] 1571 	dec	r7
                                   1572 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      0007D1 75 82 20         [24] 1573 	mov	dpl,#0x20
      0007D4 C0 07            [24] 1574 	push	ar7
      0007D6 C0 06            [24] 1575 	push	ar6
      0007D8 78r00            [12] 1576 	mov	r0,#__output_char
      0007DA 79s00            [12] 1577 	mov	r1,#(__output_char >> 8)
      0007DC 7As00            [12] 1578 	mov	r2,#(__output_char >> 16)
      0007DE 12r00r00         [24] 1579 	lcall	__sdcc_banked_call
      0007E1 D0 06            [24] 1580 	pop	ar6
      0007E3 D0 07            [24] 1581 	pop	ar7
      0007E5 80 E4            [24] 1582 	sjmp	00170$
      0007E7                       1583 00174$:
                                   1584 ;	printf_large.c:414: if (exp != -128)
      0007E7 90r00rAB         [24] 1585 	mov	dptr,#_output_float_exp_65536_78
      0007EA E0               [24] 1586 	movx	a,@dptr
      0007EB FF               [12] 1587 	mov	r7,a
      0007EC BF 80 03         [24] 1588 	cjne	r7,#0x80,00429$
      0007EF 02r00r00         [24] 1589 	ljmp	__sdcc_banked_ret
      0007F2                       1590 00429$:
                                   1591 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      0007F2 75 82 65         [24] 1592 	mov	dpl,#0x65
      0007F5 C0 07            [24] 1593 	push	ar7
      0007F7 78r00            [12] 1594 	mov	r0,#__output_char
      0007F9 79s00            [12] 1595 	mov	r1,#(__output_char >> 8)
      0007FB 7As00            [12] 1596 	mov	r2,#(__output_char >> 16)
      0007FD 12r00r00         [24] 1597 	lcall	__sdcc_banked_call
      000800 D0 07            [24] 1598 	pop	ar7
                                   1599 ;	printf_large.c:417: if (exp<0)
      000802 EF               [12] 1600 	mov	a,r7
      000803 30 E7 17         [24] 1601 	jnb	acc.7,00177$
                                   1602 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      000806 75 82 2D         [24] 1603 	mov	dpl,#0x2d
      000809 C0 07            [24] 1604 	push	ar7
      00080B 78r00            [12] 1605 	mov	r0,#__output_char
      00080D 79s00            [12] 1606 	mov	r1,#(__output_char >> 8)
      00080F 7As00            [12] 1607 	mov	r2,#(__output_char >> 16)
      000811 12r00r00         [24] 1608 	lcall	__sdcc_banked_call
      000814 D0 07            [24] 1609 	pop	ar7
                                   1610 ;	printf_large.c:420: exp = -exp;
      000816 90r00rAB         [24] 1611 	mov	dptr,#_output_float_exp_65536_78
      000819 C3               [12] 1612 	clr	c
      00081A E4               [12] 1613 	clr	a
      00081B 9F               [12] 1614 	subb	a,r7
      00081C F0               [24] 1615 	movx	@dptr,a
      00081D                       1616 00177$:
                                   1617 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      00081D 90r00rAB         [24] 1618 	mov	dptr,#_output_float_exp_65536_78
      000820 E0               [24] 1619 	movx	a,@dptr
      000821 FF               [12] 1620 	mov	r7,a
      000822 33               [12] 1621 	rlc	a
      000823 95 E0            [12] 1622 	subb	a,acc
      000825 FE               [12] 1623 	mov	r6,a
      000826 90r00r00         [24] 1624 	mov	dptr,#__divsint_PARM_2
      000829 74 0A            [12] 1625 	mov	a,#0x0a
      00082B F0               [24] 1626 	movx	@dptr,a
      00082C E4               [12] 1627 	clr	a
      00082D A3               [24] 1628 	inc	dptr
      00082E F0               [24] 1629 	movx	@dptr,a
      00082F 8F 82            [24] 1630 	mov	dpl,r7
      000831 8E 83            [24] 1631 	mov	dph,r6
      000833 C0 07            [24] 1632 	push	ar7
      000835 C0 06            [24] 1633 	push	ar6
      000837 12r00r00         [24] 1634 	lcall	__divsint
      00083A AC 82            [24] 1635 	mov	r4,dpl
      00083C 74 30            [12] 1636 	mov	a,#0x30
      00083E 2C               [12] 1637 	add	a,r4
      00083F F5 82            [12] 1638 	mov	dpl,a
      000841 78r00            [12] 1639 	mov	r0,#__output_char
      000843 79s00            [12] 1640 	mov	r1,#(__output_char >> 8)
      000845 7As00            [12] 1641 	mov	r2,#(__output_char >> 16)
      000847 12r00r00         [24] 1642 	lcall	__sdcc_banked_call
      00084A D0 06            [24] 1643 	pop	ar6
      00084C D0 07            [24] 1644 	pop	ar7
                                   1645 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
      00084E 90r00r00         [24] 1646 	mov	dptr,#__modsint_PARM_2
      000851 74 0A            [12] 1647 	mov	a,#0x0a
      000853 F0               [24] 1648 	movx	@dptr,a
      000854 E4               [12] 1649 	clr	a
      000855 A3               [24] 1650 	inc	dptr
      000856 F0               [24] 1651 	movx	@dptr,a
      000857 8F 82            [24] 1652 	mov	dpl,r7
      000859 8E 83            [24] 1653 	mov	dph,r6
      00085B 12r00r00         [24] 1654 	lcall	__modsint
      00085E AE 82            [24] 1655 	mov	r6,dpl
      000860 74 30            [12] 1656 	mov	a,#0x30
      000862 2E               [12] 1657 	add	a,r6
      000863 F5 82            [12] 1658 	mov	dpl,a
      000865 78r00            [12] 1659 	mov	r0,#__output_char
      000867 79s00            [12] 1660 	mov	r1,#(__output_char >> 8)
      000869 7As00            [12] 1661 	mov	r2,#(__output_char >> 16)
      00086B 12r00r00         [24] 1662 	lcall	__sdcc_banked_call
                                   1663 ;	printf_large.c:428: return;
                                   1664 ;	printf_large.c:430: }
      00086E 02r00r00         [24] 1665 	ljmp	__sdcc_banked_ret
                                   1666 ;------------------------------------------------------------
                                   1667 ;Allocation info for local variables in function '_print_format'
                                   1668 ;------------------------------------------------------------
                                   1669 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                   1670 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                   1671 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                   1672 ;sloc3                     Allocated with name '__print_format_sloc3_1_0'
                                   1673 ;sloc4                     Allocated with name '__print_format_sloc4_1_0'
                                   1674 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                   1675 ;format                    Allocated with name '__print_format_PARM_3'
                                   1676 ;ap                        Allocated with name '__print_format_PARM_4'
                                   1677 ;pfn                       Allocated with name '__print_format_pfn_65536_114'
                                   1678 ;left_justify              Allocated with name '__print_format_left_justify_65536_115'
                                   1679 ;zero_padding              Allocated with name '__print_format_zero_padding_65536_115'
                                   1680 ;prefix_sign               Allocated with name '__print_format_prefix_sign_65536_115'
                                   1681 ;prefix_space              Allocated with name '__print_format_prefix_space_65536_115'
                                   1682 ;signed_argument           Allocated with name '__print_format_signed_argument_65536_115'
                                   1683 ;char_argument             Allocated with name '__print_format_char_argument_65536_115'
                                   1684 ;long_argument             Allocated with name '__print_format_long_argument_65536_115'
                                   1685 ;float_argument            Allocated with name '__print_format_float_argument_65536_115'
                                   1686 ;lsd                       Allocated with name '__print_format_lsd_65536_115'
                                   1687 ;radix                     Allocated with name '__print_format_radix_65536_115'
                                   1688 ;width                     Allocated with name '__print_format_width_65536_115'
                                   1689 ;decimals                  Allocated with name '__print_format_decimals_65536_115'
                                   1690 ;length                    Allocated with name '__print_format_length_65536_115'
                                   1691 ;c                         Allocated with name '__print_format_c_65536_115'
                                   1692 ;memtype                   Allocated with name '__print_format_memtype_327680_132'
                                   1693 ;store                     Allocated with name '__print_format_store_262144_135'
                                   1694 ;pstore                    Allocated with name '__print_format_pstore_262144_135'
                                   1695 ;------------------------------------------------------------
                                   1696 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   1697 ;	-----------------------------------------
                                   1698 ;	 function _print_format
                                   1699 ;	-----------------------------------------
      000871                       1700 __print_format:
      000871 AF F0            [24] 1701 	mov	r7,b
      000873 AE 83            [24] 1702 	mov	r6,dph
      000875 E5 82            [12] 1703 	mov	a,dpl
      000877 90r00rB3         [24] 1704 	mov	dptr,#__print_format_pfn_65536_114
      00087A F0               [24] 1705 	movx	@dptr,a
      00087B EE               [12] 1706 	mov	a,r6
      00087C A3               [24] 1707 	inc	dptr
      00087D F0               [24] 1708 	movx	@dptr,a
      00087E EF               [12] 1709 	mov	a,r7
      00087F A3               [24] 1710 	inc	dptr
      000880 F0               [24] 1711 	movx	@dptr,a
                                   1712 ;	printf_large.c:461: output_char = pfn;
      000881 90r00rB3         [24] 1713 	mov	dptr,#__print_format_pfn_65536_114
      000884 E0               [24] 1714 	movx	a,@dptr
      000885 FD               [12] 1715 	mov	r5,a
      000886 A3               [24] 1716 	inc	dptr
      000887 E0               [24] 1717 	movx	a,@dptr
      000888 FE               [12] 1718 	mov	r6,a
      000889 A3               [24] 1719 	inc	dptr
      00088A E0               [24] 1720 	movx	a,@dptr
      00088B FF               [12] 1721 	mov	r7,a
      00088C 90r00r01         [24] 1722 	mov	dptr,#_output_char
      00088F ED               [12] 1723 	mov	a,r5
      000890 F0               [24] 1724 	movx	@dptr,a
      000891 EE               [12] 1725 	mov	a,r6
      000892 A3               [24] 1726 	inc	dptr
      000893 F0               [24] 1727 	movx	@dptr,a
      000894 EF               [12] 1728 	mov	a,r7
      000895 A3               [24] 1729 	inc	dptr
      000896 F0               [24] 1730 	movx	@dptr,a
                                   1731 ;	printf_large.c:462: p = pvoid;
      000897 90r00rAC         [24] 1732 	mov	dptr,#__print_format_PARM_2
      00089A E0               [24] 1733 	movx	a,@dptr
      00089B FD               [12] 1734 	mov	r5,a
      00089C A3               [24] 1735 	inc	dptr
      00089D E0               [24] 1736 	movx	a,@dptr
      00089E FE               [12] 1737 	mov	r6,a
      00089F A3               [24] 1738 	inc	dptr
      0008A0 E0               [24] 1739 	movx	a,@dptr
      0008A1 FF               [12] 1740 	mov	r7,a
      0008A2 90r00r04         [24] 1741 	mov	dptr,#_p
      0008A5 ED               [12] 1742 	mov	a,r5
      0008A6 F0               [24] 1743 	movx	@dptr,a
      0008A7 EE               [12] 1744 	mov	a,r6
      0008A8 A3               [24] 1745 	inc	dptr
      0008A9 F0               [24] 1746 	movx	@dptr,a
      0008AA EF               [12] 1747 	mov	a,r7
      0008AB A3               [24] 1748 	inc	dptr
      0008AC F0               [24] 1749 	movx	@dptr,a
                                   1750 ;	printf_large.c:466: charsOutputted = 0;
      0008AD 90r00r0C         [24] 1751 	mov	dptr,#_charsOutputted
      0008B0 E4               [12] 1752 	clr	a
      0008B1 F0               [24] 1753 	movx	@dptr,a
      0008B2 A3               [24] 1754 	inc	dptr
      0008B3 F0               [24] 1755 	movx	@dptr,a
                                   1756 ;	printf_large.c:475: while( c=*format++ )
      0008B4                       1757 00240$:
      0008B4 90r00rAF         [24] 1758 	mov	dptr,#__print_format_PARM_3
      0008B7 E0               [24] 1759 	movx	a,@dptr
      0008B8 FD               [12] 1760 	mov	r5,a
      0008B9 A3               [24] 1761 	inc	dptr
      0008BA E0               [24] 1762 	movx	a,@dptr
      0008BB FE               [12] 1763 	mov	r6,a
      0008BC A3               [24] 1764 	inc	dptr
      0008BD E0               [24] 1765 	movx	a,@dptr
      0008BE FF               [12] 1766 	mov	r7,a
      0008BF 8D 82            [24] 1767 	mov	dpl,r5
      0008C1 8E 83            [24] 1768 	mov	dph,r6
      0008C3 8F F0            [24] 1769 	mov	b,r7
      0008C5 12r00r00         [24] 1770 	lcall	__gptrget
      0008C8 FC               [12] 1771 	mov	r4,a
      0008C9 90r00rAF         [24] 1772 	mov	dptr,#__print_format_PARM_3
      0008CC 74 01            [12] 1773 	mov	a,#0x01
      0008CE 2D               [12] 1774 	add	a,r5
      0008CF F0               [24] 1775 	movx	@dptr,a
      0008D0 E4               [12] 1776 	clr	a
      0008D1 3E               [12] 1777 	addc	a,r6
      0008D2 A3               [24] 1778 	inc	dptr
      0008D3 F0               [24] 1779 	movx	@dptr,a
      0008D4 EF               [12] 1780 	mov	a,r7
      0008D5 A3               [24] 1781 	inc	dptr
      0008D6 F0               [24] 1782 	movx	@dptr,a
      0008D7 EC               [12] 1783 	mov	a,r4
      0008D8 70 03            [24] 1784 	jnz	00571$
      0008DA 02r12r37         [24] 1785 	ljmp	00242$
      0008DD                       1786 00571$:
                                   1787 ;	printf_large.c:477: if ( c=='%' )
      0008DD BC 25 02         [24] 1788 	cjne	r4,#0x25,00572$
      0008E0 80 03            [24] 1789 	sjmp	00573$
      0008E2                       1790 00572$:
      0008E2 02r12r29         [24] 1791 	ljmp	00238$
      0008E5                       1792 00573$:
                                   1793 ;	printf_large.c:479: left_justify    = 0;
      0008E5 90r00rB6         [24] 1794 	mov	dptr,#__print_format_left_justify_65536_115
      0008E8 E4               [12] 1795 	clr	a
      0008E9 F0               [24] 1796 	movx	@dptr,a
                                   1797 ;	printf_large.c:480: zero_padding    = 0;
      0008EA 90r00rB7         [24] 1798 	mov	dptr,#__print_format_zero_padding_65536_115
      0008ED F0               [24] 1799 	movx	@dptr,a
                                   1800 ;	printf_large.c:481: prefix_sign     = 0;
      0008EE 90r00rB8         [24] 1801 	mov	dptr,#__print_format_prefix_sign_65536_115
      0008F1 F0               [24] 1802 	movx	@dptr,a
                                   1803 ;	printf_large.c:482: prefix_space    = 0;
      0008F2 90r00rB9         [24] 1804 	mov	dptr,#__print_format_prefix_space_65536_115
      0008F5 F0               [24] 1805 	movx	@dptr,a
                                   1806 ;	printf_large.c:483: signed_argument = 0;
      0008F6 90r00rBA         [24] 1807 	mov	dptr,#__print_format_signed_argument_65536_115
      0008F9 F0               [24] 1808 	movx	@dptr,a
                                   1809 ;	printf_large.c:484: char_argument   = 0;
      0008FA 90r00rBB         [24] 1810 	mov	dptr,#__print_format_char_argument_65536_115
      0008FD F0               [24] 1811 	movx	@dptr,a
                                   1812 ;	printf_large.c:485: long_argument   = 0;
      0008FE 90r00rBC         [24] 1813 	mov	dptr,#__print_format_long_argument_65536_115
      000901 F0               [24] 1814 	movx	@dptr,a
                                   1815 ;	printf_large.c:486: float_argument  = 0;
      000902 90r00rBD         [24] 1816 	mov	dptr,#__print_format_float_argument_65536_115
      000905 F0               [24] 1817 	movx	@dptr,a
                                   1818 ;	printf_large.c:487: radix           = 0;
      000906 90r00rBF         [24] 1819 	mov	dptr,#__print_format_radix_65536_115
      000909 F0               [24] 1820 	movx	@dptr,a
                                   1821 ;	printf_large.c:488: width           = 0;
      00090A 90r00rC0         [24] 1822 	mov	dptr,#__print_format_width_65536_115
      00090D F0               [24] 1823 	movx	@dptr,a
      00090E A3               [24] 1824 	inc	dptr
      00090F F0               [24] 1825 	movx	@dptr,a
                                   1826 ;	printf_large.c:489: decimals        = -1;
      000910 90r00rC2         [24] 1827 	mov	dptr,#__print_format_decimals_65536_115
      000913 14               [12] 1828 	dec	a
      000914 F0               [24] 1829 	movx	@dptr,a
      000915 A3               [24] 1830 	inc	dptr
      000916 F0               [24] 1831 	movx	@dptr,a
                                   1832 ;	printf_large.c:491: get_conversion_spec:
      000917 90r00rAF         [24] 1833 	mov	dptr,#__print_format_PARM_3
      00091A E0               [24] 1834 	movx	a,@dptr
      00091B FD               [12] 1835 	mov	r5,a
      00091C A3               [24] 1836 	inc	dptr
      00091D E0               [24] 1837 	movx	a,@dptr
      00091E FE               [12] 1838 	mov	r6,a
      00091F A3               [24] 1839 	inc	dptr
      000920 E0               [24] 1840 	movx	a,@dptr
      000921 FF               [12] 1841 	mov	r7,a
      000922                       1842 00101$:
                                   1843 ;	printf_large.c:493: c = *format++;
      000922 8D 82            [24] 1844 	mov	dpl,r5
      000924 8E 83            [24] 1845 	mov	dph,r6
      000926 8F F0            [24] 1846 	mov	b,r7
      000928 12r00r00         [24] 1847 	lcall	__gptrget
      00092B FB               [12] 1848 	mov	r3,a
      00092C A3               [24] 1849 	inc	dptr
      00092D AD 82            [24] 1850 	mov	r5,dpl
      00092F AE 83            [24] 1851 	mov	r6,dph
      000931 90r00rAF         [24] 1852 	mov	dptr,#__print_format_PARM_3
      000934 ED               [12] 1853 	mov	a,r5
      000935 F0               [24] 1854 	movx	@dptr,a
      000936 EE               [12] 1855 	mov	a,r6
      000937 A3               [24] 1856 	inc	dptr
      000938 F0               [24] 1857 	movx	@dptr,a
      000939 EF               [12] 1858 	mov	a,r7
      00093A A3               [24] 1859 	inc	dptr
      00093B F0               [24] 1860 	movx	@dptr,a
      00093C 90r00rC6         [24] 1861 	mov	dptr,#__print_format_c_65536_115
      00093F EB               [12] 1862 	mov	a,r3
      000940 F0               [24] 1863 	movx	@dptr,a
                                   1864 ;	printf_large.c:495: if (c=='%')
      000941 BB 25 0E         [24] 1865 	cjne	r3,#0x25,00103$
                                   1866 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000944 8B 82            [24] 1867 	mov	dpl,r3
      000946 78r00            [12] 1868 	mov	r0,#__output_char
      000948 79s00            [12] 1869 	mov	r1,#(__output_char >> 8)
      00094A 7As00            [12] 1870 	mov	r2,#(__output_char >> 16)
      00094C 12r00r00         [24] 1871 	lcall	__sdcc_banked_call
                                   1872 ;	printf_large.c:498: continue;
      00094F 02r08rB4         [24] 1873 	ljmp	00240$
      000952                       1874 00103$:
                                   1875 ;	printf_large.c:501: if (isdigit(c))
      000952 BB 30 00         [24] 1876 	cjne	r3,#0x30,00576$
      000955                       1877 00576$:
      000955 50 03            [24] 1878 	jnc	00577$
      000957 02r0Ar1B         [24] 1879 	ljmp	00110$
      00095A                       1880 00577$:
      00095A EB               [12] 1881 	mov	a,r3
      00095B 24 C6            [12] 1882 	add	a,#0xff - 0x39
      00095D 50 03            [24] 1883 	jnc	00578$
      00095F 02r0Ar1B         [24] 1884 	ljmp	00110$
      000962                       1885 00578$:
                                   1886 ;	printf_large.c:503: if (decimals==-1)
      000962 90r00rC2         [24] 1887 	mov	dptr,#__print_format_decimals_65536_115
      000965 E0               [24] 1888 	movx	a,@dptr
      000966 F5*0C            [12] 1889 	mov	__print_format_sloc0_1_0,a
      000968 A3               [24] 1890 	inc	dptr
      000969 E0               [24] 1891 	movx	a,@dptr
      00096A F5*0D            [12] 1892 	mov	(__print_format_sloc0_1_0 + 1),a
      00096C 74 FF            [12] 1893 	mov	a,#0xff
      00096E B5*0C 63         [24] 1894 	cjne	a,__print_format_sloc0_1_0,00107$
      000971 B5*0D 60         [24] 1895 	cjne	a,(__print_format_sloc0_1_0 + 1),00107$
                                   1896 ;	printf_large.c:505: width = 10*width + c - '0';
      000974 C0 05            [24] 1897 	push	ar5
      000976 C0 06            [24] 1898 	push	ar6
      000978 C0 07            [24] 1899 	push	ar7
      00097A 90r00rC0         [24] 1900 	mov	dptr,#__print_format_width_65536_115
      00097D E0               [24] 1901 	movx	a,@dptr
      00097E FA               [12] 1902 	mov	r2,a
      00097F A3               [24] 1903 	inc	dptr
      000980 E0               [24] 1904 	movx	a,@dptr
      000981 FF               [12] 1905 	mov	r7,a
      000982 90r00r00         [24] 1906 	mov	dptr,#__mulint_PARM_2
      000985 EA               [12] 1907 	mov	a,r2
      000986 F0               [24] 1908 	movx	@dptr,a
      000987 EF               [12] 1909 	mov	a,r7
      000988 A3               [24] 1910 	inc	dptr
      000989 F0               [24] 1911 	movx	@dptr,a
      00098A 90 00 0A         [24] 1912 	mov	dptr,#0x000a
      00098D C0 05            [24] 1913 	push	ar5
      00098F C0 03            [24] 1914 	push	ar3
      000991 12r00r00         [24] 1915 	lcall	__mulint
      000994 AE 82            [24] 1916 	mov	r6,dpl
      000996 AF 83            [24] 1917 	mov	r7,dph
      000998 D0 03            [24] 1918 	pop	ar3
      00099A D0 05            [24] 1919 	pop	ar5
      00099C 8B 02            [24] 1920 	mov	ar2,r3
      00099E 7D 00            [12] 1921 	mov	r5,#0x00
      0009A0 EA               [12] 1922 	mov	a,r2
      0009A1 2E               [12] 1923 	add	a,r6
      0009A2 FE               [12] 1924 	mov	r6,a
      0009A3 ED               [12] 1925 	mov	a,r5
      0009A4 3F               [12] 1926 	addc	a,r7
      0009A5 FF               [12] 1927 	mov	r7,a
      0009A6 EE               [12] 1928 	mov	a,r6
      0009A7 24 D0            [12] 1929 	add	a,#0xd0
      0009A9 FE               [12] 1930 	mov	r6,a
      0009AA EF               [12] 1931 	mov	a,r7
      0009AB 34 FF            [12] 1932 	addc	a,#0xff
      0009AD FF               [12] 1933 	mov	r7,a
      0009AE 90r00rC0         [24] 1934 	mov	dptr,#__print_format_width_65536_115
      0009B1 EE               [12] 1935 	mov	a,r6
      0009B2 F0               [24] 1936 	movx	@dptr,a
      0009B3 EF               [12] 1937 	mov	a,r7
      0009B4 A3               [24] 1938 	inc	dptr
      0009B5 F0               [24] 1939 	movx	@dptr,a
                                   1940 ;	printf_large.c:506: if (width == 0)
      0009B6 D0 07            [24] 1941 	pop	ar7
      0009B8 D0 06            [24] 1942 	pop	ar6
      0009BA D0 05            [24] 1943 	pop	ar5
      0009BC 90r00rC0         [24] 1944 	mov	dptr,#__print_format_width_65536_115
      0009BF E0               [24] 1945 	movx	a,@dptr
      0009C0 F5 F0            [12] 1946 	mov	b,a
      0009C2 A3               [24] 1947 	inc	dptr
      0009C3 E0               [24] 1948 	movx	a,@dptr
      0009C4 45 F0            [12] 1949 	orl	a,b
      0009C6 60 03            [24] 1950 	jz	00581$
      0009C8 02r09r22         [24] 1951 	ljmp	00101$
      0009CB                       1952 00581$:
                                   1953 ;	printf_large.c:509: zero_padding = 1;
      0009CB 90r00rB7         [24] 1954 	mov	dptr,#__print_format_zero_padding_65536_115
      0009CE 74 01            [12] 1955 	mov	a,#0x01
      0009D0 F0               [24] 1956 	movx	@dptr,a
      0009D1 02r09r22         [24] 1957 	ljmp	00101$
      0009D4                       1958 00107$:
                                   1959 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      0009D4 C0 05            [24] 1960 	push	ar5
      0009D6 C0 06            [24] 1961 	push	ar6
      0009D8 C0 07            [24] 1962 	push	ar7
      0009DA 90r00r00         [24] 1963 	mov	dptr,#__mulint_PARM_2
      0009DD E5*0C            [12] 1964 	mov	a,__print_format_sloc0_1_0
      0009DF F0               [24] 1965 	movx	@dptr,a
      0009E0 E5*0D            [12] 1966 	mov	a,(__print_format_sloc0_1_0 + 1)
      0009E2 A3               [24] 1967 	inc	dptr
      0009E3 F0               [24] 1968 	movx	@dptr,a
      0009E4 90 00 0A         [24] 1969 	mov	dptr,#0x000a
      0009E7 C0 06            [24] 1970 	push	ar6
      0009E9 C0 05            [24] 1971 	push	ar5
      0009EB C0 03            [24] 1972 	push	ar3
      0009ED 12r00r00         [24] 1973 	lcall	__mulint
      0009F0 AA 82            [24] 1974 	mov	r2,dpl
      0009F2 AF 83            [24] 1975 	mov	r7,dph
      0009F4 D0 03            [24] 1976 	pop	ar3
      0009F6 D0 05            [24] 1977 	pop	ar5
      0009F8 D0 06            [24] 1978 	pop	ar6
      0009FA 7E 00            [12] 1979 	mov	r6,#0x00
      0009FC EB               [12] 1980 	mov	a,r3
      0009FD 2A               [12] 1981 	add	a,r2
      0009FE FA               [12] 1982 	mov	r2,a
      0009FF EE               [12] 1983 	mov	a,r6
      000A00 3F               [12] 1984 	addc	a,r7
      000A01 FF               [12] 1985 	mov	r7,a
      000A02 EA               [12] 1986 	mov	a,r2
      000A03 24 D0            [12] 1987 	add	a,#0xd0
      000A05 FA               [12] 1988 	mov	r2,a
      000A06 EF               [12] 1989 	mov	a,r7
      000A07 34 FF            [12] 1990 	addc	a,#0xff
      000A09 FF               [12] 1991 	mov	r7,a
      000A0A 90r00rC2         [24] 1992 	mov	dptr,#__print_format_decimals_65536_115
      000A0D EA               [12] 1993 	mov	a,r2
      000A0E F0               [24] 1994 	movx	@dptr,a
      000A0F EF               [12] 1995 	mov	a,r7
      000A10 A3               [24] 1996 	inc	dptr
      000A11 F0               [24] 1997 	movx	@dptr,a
                                   1998 ;	printf_large.c:516: goto get_conversion_spec;
      000A12 D0 07            [24] 1999 	pop	ar7
      000A14 D0 06            [24] 2000 	pop	ar6
      000A16 D0 05            [24] 2001 	pop	ar5
      000A18 02r09r22         [24] 2002 	ljmp	00101$
      000A1B                       2003 00110$:
                                   2004 ;	printf_large.c:519: if (c=='.')
      000A1B 90r00rC6         [24] 2005 	mov	dptr,#__print_format_c_65536_115
      000A1E E0               [24] 2006 	movx	a,@dptr
      000A1F FB               [12] 2007 	mov	r3,a
      000A20 BB 2E 2F         [24] 2008 	cjne	r3,#0x2e,00115$
                                   2009 ;	printf_large.c:521: if (decimals==-1)
      000A23 C0 05            [24] 2010 	push	ar5
      000A25 C0 06            [24] 2011 	push	ar6
      000A27 C0 07            [24] 2012 	push	ar7
      000A29 90r00rC2         [24] 2013 	mov	dptr,#__print_format_decimals_65536_115
      000A2C E0               [24] 2014 	movx	a,@dptr
      000A2D FA               [12] 2015 	mov	r2,a
      000A2E A3               [24] 2016 	inc	dptr
      000A2F E0               [24] 2017 	movx	a,@dptr
      000A30 FF               [12] 2018 	mov	r7,a
      000A31 BA FF 05         [24] 2019 	cjne	r2,#0xff,00584$
      000A34 BF FF 02         [24] 2020 	cjne	r7,#0xff,00584$
      000A37 80 09            [24] 2021 	sjmp	00585$
      000A39                       2022 00584$:
      000A39 D0 07            [24] 2023 	pop	ar7
      000A3B D0 06            [24] 2024 	pop	ar6
      000A3D D0 05            [24] 2025 	pop	ar5
      000A3F 02r09r22         [24] 2026 	ljmp	00101$
      000A42                       2027 00585$:
      000A42 D0 07            [24] 2028 	pop	ar7
      000A44 D0 06            [24] 2029 	pop	ar6
      000A46 D0 05            [24] 2030 	pop	ar5
                                   2031 ;	printf_large.c:522: decimals=0;
      000A48 90r00rC2         [24] 2032 	mov	dptr,#__print_format_decimals_65536_115
      000A4B E4               [12] 2033 	clr	a
      000A4C F0               [24] 2034 	movx	@dptr,a
      000A4D A3               [24] 2035 	inc	dptr
      000A4E F0               [24] 2036 	movx	@dptr,a
                                   2037 ;	printf_large.c:525: goto get_conversion_spec;
      000A4F 02r09r22         [24] 2038 	ljmp	00101$
      000A52                       2039 00115$:
                                   2040 ;	printf_large.c:528: if (islower(c))
      000A52 BB 61 00         [24] 2041 	cjne	r3,#0x61,00586$
      000A55                       2042 00586$:
      000A55 40 14            [24] 2043 	jc	00117$
      000A57 EB               [12] 2044 	mov	a,r3
      000A58 24 85            [12] 2045 	add	a,#0xff - 0x7a
      000A5A 40 0F            [24] 2046 	jc	00117$
                                   2047 ;	printf_large.c:530: c = toupper(c);
      000A5C 90r00rC6         [24] 2048 	mov	dptr,#__print_format_c_65536_115
      000A5F 74 DF            [12] 2049 	mov	a,#0xdf
      000A61 5B               [12] 2050 	anl	a,r3
      000A62 F0               [24] 2051 	movx	@dptr,a
                                   2052 ;	printf_large.c:531: lower_case = 1;
      000A63 90r00r00         [24] 2053 	mov	dptr,#_lower_case
      000A66 74 01            [12] 2054 	mov	a,#0x01
      000A68 F0               [24] 2055 	movx	@dptr,a
      000A69 80 05            [24] 2056 	sjmp	00118$
      000A6B                       2057 00117$:
                                   2058 ;	printf_large.c:534: lower_case = 0;
      000A6B 90r00r00         [24] 2059 	mov	dptr,#_lower_case
      000A6E E4               [12] 2060 	clr	a
      000A6F F0               [24] 2061 	movx	@dptr,a
      000A70                       2062 00118$:
                                   2063 ;	printf_large.c:536: switch( c )
      000A70 90r00rC6         [24] 2064 	mov	dptr,#__print_format_c_65536_115
      000A73 E0               [24] 2065 	movx	a,@dptr
      000A74 FB               [12] 2066 	mov	r3,a
      000A75 BB 20 02         [24] 2067 	cjne	r3,#0x20,00589$
      000A78 80 77            [24] 2068 	sjmp	00122$
      000A7A                       2069 00589$:
      000A7A BB 2B 02         [24] 2070 	cjne	r3,#0x2b,00590$
      000A7D 80 69            [24] 2071 	sjmp	00121$
      000A7F                       2072 00590$:
      000A7F BB 2D 02         [24] 2073 	cjne	r3,#0x2d,00591$
      000A82 80 5B            [24] 2074 	sjmp	00120$
      000A84                       2075 00591$:
      000A84 BB 42 02         [24] 2076 	cjne	r3,#0x42,00592$
      000A87 80 71            [24] 2077 	sjmp	00123$
      000A89                       2078 00592$:
      000A89 BB 43 03         [24] 2079 	cjne	r3,#0x43,00593$
      000A8C 02r0Br0C         [24] 2080 	ljmp	00129$
      000A8F                       2081 00593$:
      000A8F BB 44 03         [24] 2082 	cjne	r3,#0x44,00594$
      000A92 02r0Dr74         [24] 2083 	ljmp	00166$
      000A95                       2084 00594$:
      000A95 BB 46 03         [24] 2085 	cjne	r3,#0x46,00595$
      000A98 02r0Dr9A         [24] 2086 	ljmp	00170$
      000A9B                       2087 00595$:
      000A9B BB 48 03         [24] 2088 	cjne	r3,#0x48,00596$
      000A9E 02r09r22         [24] 2089 	ljmp	00101$
      000AA1                       2090 00596$:
      000AA1 BB 49 03         [24] 2091 	cjne	r3,#0x49,00597$
      000AA4 02r0Dr74         [24] 2092 	ljmp	00166$
      000AA7                       2093 00597$:
      000AA7 BB 4A 03         [24] 2094 	cjne	r3,#0x4a,00598$
      000AAA 02r09r22         [24] 2095 	ljmp	00101$
      000AAD                       2096 00598$:
      000AAD BB 4C 02         [24] 2097 	cjne	r3,#0x4c,00599$
      000AB0 80 51            [24] 2098 	sjmp	00128$
      000AB2                       2099 00599$:
      000AB2 BB 4F 03         [24] 2100 	cjne	r3,#0x4f,00600$
      000AB5 02r0Dr82         [24] 2101 	ljmp	00167$
      000AB8                       2102 00600$:
      000AB8 BB 50 03         [24] 2103 	cjne	r3,#0x50,00601$
      000ABB 02r0CrBE         [24] 2104 	ljmp	00152$
      000ABE                       2105 00601$:
      000ABE BB 53 03         [24] 2106 	cjne	r3,#0x53,00602$
      000AC1 02r0Br41         [24] 2107 	ljmp	00133$
      000AC4                       2108 00602$:
      000AC4 BB 54 03         [24] 2109 	cjne	r3,#0x54,00603$
      000AC7 02r09r22         [24] 2110 	ljmp	00101$
      000ACA                       2111 00603$:
      000ACA BB 55 03         [24] 2112 	cjne	r3,#0x55,00604$
      000ACD 02r0Dr8A         [24] 2113 	ljmp	00168$
      000AD0                       2114 00604$:
      000AD0 BB 58 03         [24] 2115 	cjne	r3,#0x58,00605$
      000AD3 02r0Dr92         [24] 2116 	ljmp	00169$
      000AD6                       2117 00605$:
      000AD6 BB 5A 03         [24] 2118 	cjne	r3,#0x5a,00606$
      000AD9 02r09r22         [24] 2119 	ljmp	00101$
      000ADC                       2120 00606$:
      000ADC 02r0DrA2         [24] 2121 	ljmp	00171$
                                   2122 ;	printf_large.c:538: case '-':
      000ADF                       2123 00120$:
                                   2124 ;	printf_large.c:539: left_justify = 1;
      000ADF 90r00rB6         [24] 2125 	mov	dptr,#__print_format_left_justify_65536_115
      000AE2 74 01            [12] 2126 	mov	a,#0x01
      000AE4 F0               [24] 2127 	movx	@dptr,a
                                   2128 ;	printf_large.c:540: goto get_conversion_spec;
      000AE5 02r09r22         [24] 2129 	ljmp	00101$
                                   2130 ;	printf_large.c:541: case '+':
      000AE8                       2131 00121$:
                                   2132 ;	printf_large.c:542: prefix_sign = 1;
      000AE8 90r00rB8         [24] 2133 	mov	dptr,#__print_format_prefix_sign_65536_115
      000AEB 74 01            [12] 2134 	mov	a,#0x01
      000AED F0               [24] 2135 	movx	@dptr,a
                                   2136 ;	printf_large.c:543: goto get_conversion_spec;
      000AEE 02r09r22         [24] 2137 	ljmp	00101$
                                   2138 ;	printf_large.c:544: case ' ':
      000AF1                       2139 00122$:
                                   2140 ;	printf_large.c:545: prefix_space = 1;
      000AF1 90r00rB9         [24] 2141 	mov	dptr,#__print_format_prefix_space_65536_115
      000AF4 74 01            [12] 2142 	mov	a,#0x01
      000AF6 F0               [24] 2143 	movx	@dptr,a
                                   2144 ;	printf_large.c:546: goto get_conversion_spec;
      000AF7 02r09r22         [24] 2145 	ljmp	00101$
                                   2146 ;	printf_large.c:547: case 'B': /* byte */
      000AFA                       2147 00123$:
                                   2148 ;	printf_large.c:548: char_argument = 1;
      000AFA 90r00rBB         [24] 2149 	mov	dptr,#__print_format_char_argument_65536_115
      000AFD 74 01            [12] 2150 	mov	a,#0x01
      000AFF F0               [24] 2151 	movx	@dptr,a
                                   2152 ;	printf_large.c:549: goto get_conversion_spec;
      000B00 02r09r22         [24] 2153 	ljmp	00101$
                                   2154 ;	printf_large.c:556: case 'L': /* long */
      000B03                       2155 00128$:
                                   2156 ;	printf_large.c:557: long_argument = 1;
      000B03 90r00rBC         [24] 2157 	mov	dptr,#__print_format_long_argument_65536_115
      000B06 74 01            [12] 2158 	mov	a,#0x01
      000B08 F0               [24] 2159 	movx	@dptr,a
                                   2160 ;	printf_large.c:558: goto get_conversion_spec;
      000B09 02r09r22         [24] 2161 	ljmp	00101$
                                   2162 ;	printf_large.c:560: case 'C':
      000B0C                       2163 00129$:
                                   2164 ;	printf_large.c:561: if( char_argument )
      000B0C 90r00rBB         [24] 2165 	mov	dptr,#__print_format_char_argument_65536_115
      000B0F E0               [24] 2166 	movx	a,@dptr
      000B10 60 0E            [24] 2167 	jz	00131$
                                   2168 ;	printf_large.c:562: c = va_arg(ap,char);
      000B12 90r00rB2         [24] 2169 	mov	dptr,#__print_format_PARM_4
      000B15 E0               [24] 2170 	movx	a,@dptr
      000B16 14               [12] 2171 	dec	a
      000B17 F9               [12] 2172 	mov	r1,a
      000B18 F0               [24] 2173 	movx	@dptr,a
      000B19 90r00rC6         [24] 2174 	mov	dptr,#__print_format_c_65536_115
      000B1C E7               [12] 2175 	mov	a,@r1
      000B1D F0               [24] 2176 	movx	@dptr,a
      000B1E 80 0F            [24] 2177 	sjmp	00132$
      000B20                       2178 00131$:
                                   2179 ;	printf_large.c:564: c = va_arg(ap,int);
      000B20 90r00rB2         [24] 2180 	mov	dptr,#__print_format_PARM_4
      000B23 E0               [24] 2181 	movx	a,@dptr
      000B24 24 FE            [12] 2182 	add	a,#0xfe
      000B26 FF               [12] 2183 	mov	r7,a
      000B27 F0               [24] 2184 	movx	@dptr,a
      000B28 8F 01            [24] 2185 	mov	ar1,r7
      000B2A 90r00rC6         [24] 2186 	mov	dptr,#__print_format_c_65536_115
      000B2D E7               [12] 2187 	mov	a,@r1
      000B2E F0               [24] 2188 	movx	@dptr,a
      000B2F                       2189 00132$:
                                   2190 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000B2F 90r00rC6         [24] 2191 	mov	dptr,#__print_format_c_65536_115
      000B32 E0               [24] 2192 	movx	a,@dptr
      000B33 F5 82            [12] 2193 	mov	dpl,a
      000B35 78r00            [12] 2194 	mov	r0,#__output_char
      000B37 79s00            [12] 2195 	mov	r1,#(__output_char >> 8)
      000B39 7As00            [12] 2196 	mov	r2,#(__output_char >> 16)
      000B3B 12r00r00         [24] 2197 	lcall	__sdcc_banked_call
                                   2198 ;	printf_large.c:566: break;
      000B3E 02r0DrB7         [24] 2199 	ljmp	00172$
                                   2200 ;	printf_large.c:568: case 'S':
      000B41                       2201 00133$:
                                   2202 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000B41 90r00rB2         [24] 2203 	mov	dptr,#__print_format_PARM_4
      000B44 E0               [24] 2204 	movx	a,@dptr
      000B45 24 FD            [12] 2205 	add	a,#0xfd
      000B47 FF               [12] 2206 	mov	r7,a
      000B48 F0               [24] 2207 	movx	@dptr,a
      000B49 8F 01            [24] 2208 	mov	ar1,r7
      000B4B 87 05            [24] 2209 	mov	ar5,@r1
      000B4D 09               [12] 2210 	inc	r1
      000B4E 87 06            [24] 2211 	mov	ar6,@r1
      000B50 09               [12] 2212 	inc	r1
      000B51 87 07            [24] 2213 	mov	ar7,@r1
      000B53 19               [12] 2214 	dec	r1
      000B54 19               [12] 2215 	dec	r1
      000B55 90r00r07         [24] 2216 	mov	dptr,#_value
      000B58 ED               [12] 2217 	mov	a,r5
      000B59 F0               [24] 2218 	movx	@dptr,a
      000B5A EE               [12] 2219 	mov	a,r6
      000B5B A3               [24] 2220 	inc	dptr
      000B5C F0               [24] 2221 	movx	@dptr,a
      000B5D EF               [12] 2222 	mov	a,r7
      000B5E A3               [24] 2223 	inc	dptr
      000B5F F0               [24] 2224 	movx	@dptr,a
                                   2225 ;	printf_large.c:582: length = strlen(PTR);
      000B60 8D 82            [24] 2226 	mov	dpl,r5
      000B62 8E 83            [24] 2227 	mov	dph,r6
      000B64 8F F0            [24] 2228 	mov	b,r7
      000B66 78r00            [12] 2229 	mov	r0,#_strlen
      000B68 79s00            [12] 2230 	mov	r1,#(_strlen >> 8)
      000B6A 7As00            [12] 2231 	mov	r2,#(_strlen >> 16)
      000B6C 12r00r00         [24] 2232 	lcall	__sdcc_banked_call
      000B6F 85 82*0C         [24] 2233 	mov	__print_format_sloc0_1_0,dpl
      000B72 85 83*0D         [24] 2234 	mov	(__print_format_sloc0_1_0 + 1),dph
                                   2235 ;	printf_large.c:584: if ( decimals == -1 )
      000B75 90r00rC2         [24] 2236 	mov	dptr,#__print_format_decimals_65536_115
      000B78 E0               [24] 2237 	movx	a,@dptr
      000B79 FA               [12] 2238 	mov	r2,a
      000B7A A3               [24] 2239 	inc	dptr
      000B7B E0               [24] 2240 	movx	a,@dptr
      000B7C FD               [12] 2241 	mov	r5,a
      000B7D BA FF 0D         [24] 2242 	cjne	r2,#0xff,00135$
      000B80 BD FF 0A         [24] 2243 	cjne	r5,#0xff,00135$
                                   2244 ;	printf_large.c:586: decimals = length;
      000B83 90r00rC2         [24] 2245 	mov	dptr,#__print_format_decimals_65536_115
      000B86 E5*0C            [12] 2246 	mov	a,__print_format_sloc0_1_0
      000B88 F0               [24] 2247 	movx	@dptr,a
      000B89 E5*0D            [12] 2248 	mov	a,(__print_format_sloc0_1_0 + 1)
      000B8B A3               [24] 2249 	inc	dptr
      000B8C F0               [24] 2250 	movx	@dptr,a
      000B8D                       2251 00135$:
                                   2252 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000B8D 90r00rB6         [24] 2253 	mov	dptr,#__print_format_left_justify_65536_115
      000B90 E0               [24] 2254 	movx	a,@dptr
      000B91 70 51            [24] 2255 	jnz	00286$
      000B93 90r00rC0         [24] 2256 	mov	dptr,#__print_format_width_65536_115
      000B96 E0               [24] 2257 	movx	a,@dptr
      000B97 FA               [12] 2258 	mov	r2,a
      000B98 A3               [24] 2259 	inc	dptr
      000B99 E0               [24] 2260 	movx	a,@dptr
      000B9A FD               [12] 2261 	mov	r5,a
      000B9B C3               [12] 2262 	clr	c
      000B9C E5*0C            [12] 2263 	mov	a,__print_format_sloc0_1_0
      000B9E 9A               [12] 2264 	subb	a,r2
      000B9F E5*0D            [12] 2265 	mov	a,(__print_format_sloc0_1_0 + 1)
      000BA1 9D               [12] 2266 	subb	a,r5
      000BA2 50 40            [24] 2267 	jnc	00286$
                                   2268 ;	printf_large.c:590: width -= length;
      000BA4 90r00rC0         [24] 2269 	mov	dptr,#__print_format_width_65536_115
      000BA7 EA               [12] 2270 	mov	a,r2
      000BA8 C3               [12] 2271 	clr	c
      000BA9 95*0C            [12] 2272 	subb	a,__print_format_sloc0_1_0
      000BAB F0               [24] 2273 	movx	@dptr,a
      000BAC ED               [12] 2274 	mov	a,r5
      000BAD 95*0D            [12] 2275 	subb	a,(__print_format_sloc0_1_0 + 1)
      000BAF A3               [24] 2276 	inc	dptr
      000BB0 F0               [24] 2277 	movx	@dptr,a
                                   2278 ;	printf_large.c:591: while( width-- != 0 )
      000BB1 90r00rC0         [24] 2279 	mov	dptr,#__print_format_width_65536_115
      000BB4 E0               [24] 2280 	movx	a,@dptr
      000BB5 FA               [12] 2281 	mov	r2,a
      000BB6 A3               [24] 2282 	inc	dptr
      000BB7 E0               [24] 2283 	movx	a,@dptr
      000BB8 FD               [12] 2284 	mov	r5,a
      000BB9                       2285 00136$:
      000BB9 8A 06            [24] 2286 	mov	ar6,r2
      000BBB 8D 07            [24] 2287 	mov	ar7,r5
      000BBD 1A               [12] 2288 	dec	r2
      000BBE BA FF 01         [24] 2289 	cjne	r2,#0xff,00612$
      000BC1 1D               [12] 2290 	dec	r5
      000BC2                       2291 00612$:
      000BC2 EE               [12] 2292 	mov	a,r6
      000BC3 4F               [12] 2293 	orl	a,r7
      000BC4 60 16            [24] 2294 	jz	00324$
                                   2295 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000BC6 75 82 20         [24] 2296 	mov	dpl,#0x20
      000BC9 C0 05            [24] 2297 	push	ar5
      000BCB C0 02            [24] 2298 	push	ar2
      000BCD 78r00            [12] 2299 	mov	r0,#__output_char
      000BCF 79s00            [12] 2300 	mov	r1,#(__output_char >> 8)
      000BD1 7As00            [12] 2301 	mov	r2,#(__output_char >> 16)
      000BD3 12r00r00         [24] 2302 	lcall	__sdcc_banked_call
      000BD6 D0 02            [24] 2303 	pop	ar2
      000BD8 D0 05            [24] 2304 	pop	ar5
                                   2305 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000BDA 80 DD            [24] 2306 	sjmp	00136$
      000BDC                       2307 00324$:
      000BDC 90r00rC0         [24] 2308 	mov	dptr,#__print_format_width_65536_115
      000BDF EA               [12] 2309 	mov	a,r2
      000BE0 F0               [24] 2310 	movx	@dptr,a
      000BE1 ED               [12] 2311 	mov	a,r5
      000BE2 A3               [24] 2312 	inc	dptr
      000BE3 F0               [24] 2313 	movx	@dptr,a
      000BE4                       2314 00286$:
      000BE4 90r00rC2         [24] 2315 	mov	dptr,#__print_format_decimals_65536_115
      000BE7 E0               [24] 2316 	movx	a,@dptr
      000BE8 FE               [12] 2317 	mov	r6,a
      000BE9 A3               [24] 2318 	inc	dptr
      000BEA E0               [24] 2319 	movx	a,@dptr
      000BEB FF               [12] 2320 	mov	r7,a
      000BEC                       2321 00143$:
      000BEC C0 06            [24] 2322 	push	ar6
      000BEE C0 07            [24] 2323 	push	ar7
      000BF0 90r00r07         [24] 2324 	mov	dptr,#_value
      000BF3 E0               [24] 2325 	movx	a,@dptr
      000BF4 FA               [12] 2326 	mov	r2,a
      000BF5 A3               [24] 2327 	inc	dptr
      000BF6 E0               [24] 2328 	movx	a,@dptr
      000BF7 FD               [12] 2329 	mov	r5,a
      000BF8 A3               [24] 2330 	inc	dptr
      000BF9 E0               [24] 2331 	movx	a,@dptr
      000BFA FF               [12] 2332 	mov	r7,a
      000BFB 8A 82            [24] 2333 	mov	dpl,r2
      000BFD 8D 83            [24] 2334 	mov	dph,r5
      000BFF 8F F0            [24] 2335 	mov	b,r7
      000C01 12r00r00         [24] 2336 	lcall	__gptrget
      000C04 F5*0E            [12] 2337 	mov	__print_format_sloc1_1_0,a
      000C06 D0 07            [24] 2338 	pop	ar7
      000C08 D0 06            [24] 2339 	pop	ar6
      000C0A E5*0E            [12] 2340 	mov	a,__print_format_sloc1_1_0
      000C0C 60 50            [24] 2341 	jz	00325$
      000C0E 8E 02            [24] 2342 	mov	ar2,r6
      000C10 8F 05            [24] 2343 	mov	ar5,r7
      000C12 1E               [12] 2344 	dec	r6
      000C13 BE FF 01         [24] 2345 	cjne	r6,#0xff,00615$
      000C16 1F               [12] 2346 	dec	r7
      000C17                       2347 00615$:
      000C17 C3               [12] 2348 	clr	c
      000C18 E4               [12] 2349 	clr	a
      000C19 9A               [12] 2350 	subb	a,r2
      000C1A 74 80            [12] 2351 	mov	a,#(0x00 ^ 0x80)
      000C1C 8D F0            [24] 2352 	mov	b,r5
      000C1E 63 F0 80         [24] 2353 	xrl	b,#0x80
      000C21 95 F0            [12] 2354 	subb	a,b
      000C23 50 39            [24] 2355 	jnc	00325$
                                   2356 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000C25 C0 06            [24] 2357 	push	ar6
      000C27 C0 07            [24] 2358 	push	ar7
      000C29 85*0E 82         [24] 2359 	mov	dpl,__print_format_sloc1_1_0
      000C2C C0 07            [24] 2360 	push	ar7
      000C2E C0 06            [24] 2361 	push	ar6
      000C30 78r00            [12] 2362 	mov	r0,#__output_char
      000C32 79s00            [12] 2363 	mov	r1,#(__output_char >> 8)
      000C34 7As00            [12] 2364 	mov	r2,#(__output_char >> 16)
      000C36 12r00r00         [24] 2365 	lcall	__sdcc_banked_call
      000C39 D0 06            [24] 2366 	pop	ar6
      000C3B D0 07            [24] 2367 	pop	ar7
                                   2368 ;	printf_large.c:600: PTR++;
      000C3D 90r00r07         [24] 2369 	mov	dptr,#_value
      000C40 E0               [24] 2370 	movx	a,@dptr
      000C41 FA               [12] 2371 	mov	r2,a
      000C42 A3               [24] 2372 	inc	dptr
      000C43 E0               [24] 2373 	movx	a,@dptr
      000C44 FD               [12] 2374 	mov	r5,a
      000C45 A3               [24] 2375 	inc	dptr
      000C46 E0               [24] 2376 	movx	a,@dptr
      000C47 FF               [12] 2377 	mov	r7,a
      000C48 0A               [12] 2378 	inc	r2
      000C49 BA 00 01         [24] 2379 	cjne	r2,#0x00,00617$
      000C4C 0D               [12] 2380 	inc	r5
      000C4D                       2381 00617$:
      000C4D 90r00r07         [24] 2382 	mov	dptr,#_value
      000C50 EA               [12] 2383 	mov	a,r2
      000C51 F0               [24] 2384 	movx	@dptr,a
      000C52 ED               [12] 2385 	mov	a,r5
      000C53 A3               [24] 2386 	inc	dptr
      000C54 F0               [24] 2387 	movx	@dptr,a
      000C55 EF               [12] 2388 	mov	a,r7
      000C56 A3               [24] 2389 	inc	dptr
      000C57 F0               [24] 2390 	movx	@dptr,a
      000C58 D0 07            [24] 2391 	pop	ar7
      000C5A D0 06            [24] 2392 	pop	ar6
      000C5C 80 8E            [24] 2393 	sjmp	00143$
      000C5E                       2394 00325$:
      000C5E 90r00rC2         [24] 2395 	mov	dptr,#__print_format_decimals_65536_115
      000C61 EE               [12] 2396 	mov	a,r6
      000C62 F0               [24] 2397 	movx	@dptr,a
      000C63 EF               [12] 2398 	mov	a,r7
      000C64 A3               [24] 2399 	inc	dptr
      000C65 F0               [24] 2400 	movx	@dptr,a
                                   2401 ;	printf_large.c:603: if ( left_justify && (length < width))
      000C66 90r00rB6         [24] 2402 	mov	dptr,#__print_format_left_justify_65536_115
      000C69 E0               [24] 2403 	movx	a,@dptr
      000C6A 70 03            [24] 2404 	jnz	00618$
      000C6C 02r0DrB7         [24] 2405 	ljmp	00172$
      000C6F                       2406 00618$:
      000C6F 90r00rC0         [24] 2407 	mov	dptr,#__print_format_width_65536_115
      000C72 E0               [24] 2408 	movx	a,@dptr
      000C73 FE               [12] 2409 	mov	r6,a
      000C74 A3               [24] 2410 	inc	dptr
      000C75 E0               [24] 2411 	movx	a,@dptr
      000C76 FF               [12] 2412 	mov	r7,a
      000C77 C3               [12] 2413 	clr	c
      000C78 E5*0C            [12] 2414 	mov	a,__print_format_sloc0_1_0
      000C7A 9E               [12] 2415 	subb	a,r6
      000C7B E5*0D            [12] 2416 	mov	a,(__print_format_sloc0_1_0 + 1)
      000C7D 9F               [12] 2417 	subb	a,r7
      000C7E 40 03            [24] 2418 	jc	00619$
      000C80 02r0DrB7         [24] 2419 	ljmp	00172$
      000C83                       2420 00619$:
                                   2421 ;	printf_large.c:605: width -= length;
      000C83 90r00rC0         [24] 2422 	mov	dptr,#__print_format_width_65536_115
      000C86 EE               [12] 2423 	mov	a,r6
      000C87 C3               [12] 2424 	clr	c
      000C88 95*0C            [12] 2425 	subb	a,__print_format_sloc0_1_0
      000C8A F0               [24] 2426 	movx	@dptr,a
      000C8B EF               [12] 2427 	mov	a,r7
      000C8C 95*0D            [12] 2428 	subb	a,(__print_format_sloc0_1_0 + 1)
      000C8E A3               [24] 2429 	inc	dptr
      000C8F F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	printf_large.c:606: while( width-- != 0 )
      000C90 90r00rC0         [24] 2432 	mov	dptr,#__print_format_width_65536_115
      000C93 E0               [24] 2433 	movx	a,@dptr
      000C94 FE               [12] 2434 	mov	r6,a
      000C95 A3               [24] 2435 	inc	dptr
      000C96 E0               [24] 2436 	movx	a,@dptr
      000C97 FF               [12] 2437 	mov	r7,a
      000C98                       2438 00146$:
      000C98 8E 02            [24] 2439 	mov	ar2,r6
      000C9A 8F 05            [24] 2440 	mov	ar5,r7
      000C9C 1E               [12] 2441 	dec	r6
      000C9D BE FF 01         [24] 2442 	cjne	r6,#0xff,00620$
      000CA0 1F               [12] 2443 	dec	r7
      000CA1                       2444 00620$:
      000CA1 EA               [12] 2445 	mov	a,r2
      000CA2 4D               [12] 2446 	orl	a,r5
      000CA3 70 03            [24] 2447 	jnz	00621$
      000CA5 02r0DrAF         [24] 2448 	ljmp	00326$
      000CA8                       2449 00621$:
                                   2450 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000CA8 75 82 20         [24] 2451 	mov	dpl,#0x20
      000CAB C0 07            [24] 2452 	push	ar7
      000CAD C0 06            [24] 2453 	push	ar6
      000CAF 78r00            [12] 2454 	mov	r0,#__output_char
      000CB1 79s00            [12] 2455 	mov	r1,#(__output_char >> 8)
      000CB3 7As00            [12] 2456 	mov	r2,#(__output_char >> 16)
      000CB5 12r00r00         [24] 2457 	lcall	__sdcc_banked_call
      000CB8 D0 06            [24] 2458 	pop	ar6
      000CBA D0 07            [24] 2459 	pop	ar7
                                   2460 ;	printf_large.c:613: case 'P':
      000CBC 80 DA            [24] 2461 	sjmp	00146$
      000CBE                       2462 00152$:
                                   2463 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000CBE 90r00rB2         [24] 2464 	mov	dptr,#__print_format_PARM_4
      000CC1 E0               [24] 2465 	movx	a,@dptr
      000CC2 24 FD            [12] 2466 	add	a,#0xfd
      000CC4 FD               [12] 2467 	mov	r5,a
      000CC5 F0               [24] 2468 	movx	@dptr,a
      000CC6 8D 01            [24] 2469 	mov	ar1,r5
      000CC8 87*0F            [24] 2470 	mov	__print_format_sloc2_1_0,@r1
      000CCA 09               [12] 2471 	inc	r1
      000CCB 87*10            [24] 2472 	mov	(__print_format_sloc2_1_0 + 1),@r1
      000CCD 09               [12] 2473 	inc	r1
      000CCE 87*11            [24] 2474 	mov	(__print_format_sloc2_1_0 + 2),@r1
      000CD0 19               [12] 2475 	dec	r1
      000CD1 19               [12] 2476 	dec	r1
      000CD2 90r00r07         [24] 2477 	mov	dptr,#_value
      000CD5 E5*0F            [12] 2478 	mov	a,__print_format_sloc2_1_0
      000CD7 F0               [24] 2479 	movx	@dptr,a
      000CD8 E5*10            [12] 2480 	mov	a,(__print_format_sloc2_1_0 + 1)
      000CDA A3               [24] 2481 	inc	dptr
      000CDB F0               [24] 2482 	movx	@dptr,a
      000CDC E5*11            [12] 2483 	mov	a,(__print_format_sloc2_1_0 + 2)
      000CDE A3               [24] 2484 	inc	dptr
      000CDF F0               [24] 2485 	movx	@dptr,a
                                   2486 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000CE0 90r00r09         [24] 2487 	mov	dptr,#(_value + 0x0002)
      000CE3 E0               [24] 2488 	movx	a,@dptr
      000CE4 FD               [12] 2489 	mov	r5,a
                                   2490 ;	printf_large.c:638: if (memtype >= 0x80)
      000CE5 BD 80 00         [24] 2491 	cjne	r5,#0x80,00622$
      000CE8                       2492 00622$:
      000CE8 40 08            [24] 2493 	jc	00160$
                                   2494 ;	printf_large.c:639: c = 'C';
      000CEA 90r00rC6         [24] 2495 	mov	dptr,#__print_format_c_65536_115
      000CED 74 43            [12] 2496 	mov	a,#0x43
      000CEF F0               [24] 2497 	movx	@dptr,a
      000CF0 80 20            [24] 2498 	sjmp	00161$
      000CF2                       2499 00160$:
                                   2500 ;	printf_large.c:640: else if (memtype >= 0x60)
      000CF2 BD 60 00         [24] 2501 	cjne	r5,#0x60,00624$
      000CF5                       2502 00624$:
      000CF5 40 08            [24] 2503 	jc	00157$
                                   2504 ;	printf_large.c:641: c = 'P';
      000CF7 90r00rC6         [24] 2505 	mov	dptr,#__print_format_c_65536_115
      000CFA 74 50            [12] 2506 	mov	a,#0x50
      000CFC F0               [24] 2507 	movx	@dptr,a
      000CFD 80 13            [24] 2508 	sjmp	00161$
      000CFF                       2509 00157$:
                                   2510 ;	printf_large.c:642: else if (memtype >= 0x40)
      000CFF BD 40 00         [24] 2511 	cjne	r5,#0x40,00626$
      000D02                       2512 00626$:
      000D02 40 08            [24] 2513 	jc	00154$
                                   2514 ;	printf_large.c:643: c = 'I';
      000D04 90r00rC6         [24] 2515 	mov	dptr,#__print_format_c_65536_115
      000D07 74 49            [12] 2516 	mov	a,#0x49
      000D09 F0               [24] 2517 	movx	@dptr,a
      000D0A 80 06            [24] 2518 	sjmp	00161$
      000D0C                       2519 00154$:
                                   2520 ;	printf_large.c:645: c = 'X';
      000D0C 90r00rC6         [24] 2521 	mov	dptr,#__print_format_c_65536_115
      000D0F 74 58            [12] 2522 	mov	a,#0x58
      000D11 F0               [24] 2523 	movx	@dptr,a
      000D12                       2524 00161$:
                                   2525 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000D12 90r00rC6         [24] 2526 	mov	dptr,#__print_format_c_65536_115
      000D15 E0               [24] 2527 	movx	a,@dptr
      000D16 FD               [12] 2528 	mov	r5,a
      000D17 F5 82            [12] 2529 	mov	dpl,a
      000D19 C0 05            [24] 2530 	push	ar5
      000D1B 78r00            [12] 2531 	mov	r0,#__output_char
      000D1D 79s00            [12] 2532 	mov	r1,#(__output_char >> 8)
      000D1F 7As00            [12] 2533 	mov	r2,#(__output_char >> 16)
      000D21 12r00r00         [24] 2534 	lcall	__sdcc_banked_call
                                   2535 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      000D24 75 82 3A         [24] 2536 	mov	dpl,#0x3a
      000D27 78r00            [12] 2537 	mov	r0,#__output_char
      000D29 79s00            [12] 2538 	mov	r1,#(__output_char >> 8)
      000D2B 7As00            [12] 2539 	mov	r2,#(__output_char >> 16)
      000D2D 12r00r00         [24] 2540 	lcall	__sdcc_banked_call
                                   2541 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000D30 75 82 30         [24] 2542 	mov	dpl,#0x30
      000D33 78r00            [12] 2543 	mov	r0,#__output_char
      000D35 79s00            [12] 2544 	mov	r1,#(__output_char >> 8)
      000D37 7As00            [12] 2545 	mov	r2,#(__output_char >> 16)
      000D39 12r00r00         [24] 2546 	lcall	__sdcc_banked_call
                                   2547 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      000D3C 75 82 78         [24] 2548 	mov	dpl,#0x78
      000D3F 78r00            [12] 2549 	mov	r0,#__output_char
      000D41 79s00            [12] 2550 	mov	r1,#(__output_char >> 8)
      000D43 7As00            [12] 2551 	mov	r2,#(__output_char >> 16)
      000D45 12r00r00         [24] 2552 	lcall	__sdcc_banked_call
      000D48 D0 05            [24] 2553 	pop	ar5
                                   2554 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000D4A BD 49 02         [24] 2555 	cjne	r5,#0x49,00628$
      000D4D 80 14            [24] 2556 	sjmp	00163$
      000D4F                       2557 00628$:
                                   2558 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000D4F BD 50 02         [24] 2559 	cjne	r5,#0x50,00629$
      000D52 80 0F            [24] 2560 	sjmp	00163$
      000D54                       2561 00629$:
                                   2562 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      000D54 90r00r08         [24] 2563 	mov	dptr,#(_value + 0x0001)
      000D57 E0               [24] 2564 	movx	a,@dptr
      000D58 F5 82            [12] 2565 	mov	dpl,a
      000D5A 78r6D            [12] 2566 	mov	r0,#_output_2digits
      000D5C 79s00            [12] 2567 	mov	r1,#(_output_2digits >> 8)
      000D5E 7As00            [12] 2568 	mov	r2,#(_output_2digits >> 16)
      000D60 12r00r00         [24] 2569 	lcall	__sdcc_banked_call
      000D63                       2570 00163$:
                                   2571 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000D63 90r00r07         [24] 2572 	mov	dptr,#_value
      000D66 E0               [24] 2573 	movx	a,@dptr
      000D67 F5 82            [12] 2574 	mov	dpl,a
      000D69 78r6D            [12] 2575 	mov	r0,#_output_2digits
      000D6B 79s00            [12] 2576 	mov	r1,#(_output_2digits >> 8)
      000D6D 7As00            [12] 2577 	mov	r2,#(_output_2digits >> 16)
      000D6F 12r00r00         [24] 2578 	lcall	__sdcc_banked_call
                                   2579 ;	printf_large.c:668: break;
                                   2580 ;	printf_large.c:671: case 'I':
      000D72 80 43            [24] 2581 	sjmp	00172$
      000D74                       2582 00166$:
                                   2583 ;	printf_large.c:672: signed_argument = 1;
      000D74 90r00rBA         [24] 2584 	mov	dptr,#__print_format_signed_argument_65536_115
      000D77 74 01            [12] 2585 	mov	a,#0x01
      000D79 F0               [24] 2586 	movx	@dptr,a
                                   2587 ;	printf_large.c:673: radix = 10;
      000D7A 90r00rBF         [24] 2588 	mov	dptr,#__print_format_radix_65536_115
      000D7D 74 0A            [12] 2589 	mov	a,#0x0a
      000D7F F0               [24] 2590 	movx	@dptr,a
                                   2591 ;	printf_large.c:674: break;
                                   2592 ;	printf_large.c:676: case 'O':
      000D80 80 35            [24] 2593 	sjmp	00172$
      000D82                       2594 00167$:
                                   2595 ;	printf_large.c:677: radix = 8;
      000D82 90r00rBF         [24] 2596 	mov	dptr,#__print_format_radix_65536_115
      000D85 74 08            [12] 2597 	mov	a,#0x08
      000D87 F0               [24] 2598 	movx	@dptr,a
                                   2599 ;	printf_large.c:678: break;
                                   2600 ;	printf_large.c:680: case 'U':
      000D88 80 2D            [24] 2601 	sjmp	00172$
      000D8A                       2602 00168$:
                                   2603 ;	printf_large.c:681: radix = 10;
      000D8A 90r00rBF         [24] 2604 	mov	dptr,#__print_format_radix_65536_115
      000D8D 74 0A            [12] 2605 	mov	a,#0x0a
      000D8F F0               [24] 2606 	movx	@dptr,a
                                   2607 ;	printf_large.c:682: break;
                                   2608 ;	printf_large.c:684: case 'X':
      000D90 80 25            [24] 2609 	sjmp	00172$
      000D92                       2610 00169$:
                                   2611 ;	printf_large.c:685: radix = 16;
      000D92 90r00rBF         [24] 2612 	mov	dptr,#__print_format_radix_65536_115
      000D95 74 10            [12] 2613 	mov	a,#0x10
      000D97 F0               [24] 2614 	movx	@dptr,a
                                   2615 ;	printf_large.c:686: break;
                                   2616 ;	printf_large.c:688: case 'F':
      000D98 80 1D            [24] 2617 	sjmp	00172$
      000D9A                       2618 00170$:
                                   2619 ;	printf_large.c:689: float_argument=1;
      000D9A 90r00rBD         [24] 2620 	mov	dptr,#__print_format_float_argument_65536_115
      000D9D 74 01            [12] 2621 	mov	a,#0x01
      000D9F F0               [24] 2622 	movx	@dptr,a
                                   2623 ;	printf_large.c:690: break;
                                   2624 ;	printf_large.c:692: default:
      000DA0 80 15            [24] 2625 	sjmp	00172$
      000DA2                       2626 00171$:
                                   2627 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      000DA2 8B 82            [24] 2628 	mov	dpl,r3
      000DA4 78r00            [12] 2629 	mov	r0,#__output_char
      000DA6 79s00            [12] 2630 	mov	r1,#(__output_char >> 8)
      000DA8 7As00            [12] 2631 	mov	r2,#(__output_char >> 16)
      000DAA 12r00r00         [24] 2632 	lcall	__sdcc_banked_call
                                   2633 ;	printf_large.c:877: return charsOutputted;
                                   2634 ;	printf_large.c:696: }
      000DAD 80 08            [24] 2635 	sjmp	00172$
      000DAF                       2636 00326$:
      000DAF 90r00rC0         [24] 2637 	mov	dptr,#__print_format_width_65536_115
      000DB2 EE               [12] 2638 	mov	a,r6
      000DB3 F0               [24] 2639 	movx	@dptr,a
      000DB4 EF               [12] 2640 	mov	a,r7
      000DB5 A3               [24] 2641 	inc	dptr
      000DB6 F0               [24] 2642 	movx	@dptr,a
      000DB7                       2643 00172$:
                                   2644 ;	printf_large.c:698: if (float_argument)
      000DB7 90r00rBD         [24] 2645 	mov	dptr,#__print_format_float_argument_65536_115
      000DBA E0               [24] 2646 	movx	a,@dptr
      000DBB 70 03            [24] 2647 	jnz	00630$
      000DBD 02r0Er43         [24] 2648 	ljmp	00235$
      000DC0                       2649 00630$:
                                   2650 ;	printf_large.c:700: value.f = va_arg(ap, float);
      000DC0 90r00rB2         [24] 2651 	mov	dptr,#__print_format_PARM_4
      000DC3 E0               [24] 2652 	movx	a,@dptr
      000DC4 24 FC            [12] 2653 	add	a,#0xfc
      000DC6 FF               [12] 2654 	mov	r7,a
      000DC7 F0               [24] 2655 	movx	@dptr,a
      000DC8 8F 01            [24] 2656 	mov	ar1,r7
      000DCA 87*12            [24] 2657 	mov	__print_format_sloc3_1_0,@r1
      000DCC 09               [12] 2658 	inc	r1
      000DCD 87*13            [24] 2659 	mov	(__print_format_sloc3_1_0 + 1),@r1
      000DCF 09               [12] 2660 	inc	r1
      000DD0 87*14            [24] 2661 	mov	(__print_format_sloc3_1_0 + 2),@r1
      000DD2 09               [12] 2662 	inc	r1
      000DD3 87*15            [24] 2663 	mov	(__print_format_sloc3_1_0 + 3),@r1
      000DD5 19               [12] 2664 	dec	r1
      000DD6 19               [12] 2665 	dec	r1
      000DD7 19               [12] 2666 	dec	r1
      000DD8 90r00r07         [24] 2667 	mov	dptr,#_value
      000DDB E5*12            [12] 2668 	mov	a,__print_format_sloc3_1_0
      000DDD F0               [24] 2669 	movx	@dptr,a
      000DDE E5*13            [12] 2670 	mov	a,(__print_format_sloc3_1_0 + 1)
      000DE0 A3               [24] 2671 	inc	dptr
      000DE1 F0               [24] 2672 	movx	@dptr,a
      000DE2 E5*14            [12] 2673 	mov	a,(__print_format_sloc3_1_0 + 2)
      000DE4 A3               [24] 2674 	inc	dptr
      000DE5 F0               [24] 2675 	movx	@dptr,a
      000DE6 E5*15            [12] 2676 	mov	a,(__print_format_sloc3_1_0 + 3)
      000DE8 A3               [24] 2677 	inc	dptr
      000DE9 F0               [24] 2678 	movx	@dptr,a
                                   2679 ;	printf_large.c:718: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      000DEA 90r00rC0         [24] 2680 	mov	dptr,#__print_format_width_65536_115
      000DED E0               [24] 2681 	movx	a,@dptr
      000DEE FA               [12] 2682 	mov	r2,a
      000DEF A3               [24] 2683 	inc	dptr
      000DF0 E0               [24] 2684 	movx	a,@dptr
      000DF1 90r00rC2         [24] 2685 	mov	dptr,#__print_format_decimals_65536_115
      000DF4 E0               [24] 2686 	movx	a,@dptr
      000DF5 FE               [12] 2687 	mov	r6,a
      000DF6 A3               [24] 2688 	inc	dptr
      000DF7 E0               [24] 2689 	movx	a,@dptr
      000DF8 90r00rB6         [24] 2690 	mov	dptr,#__print_format_left_justify_65536_115
      000DFB E0               [24] 2691 	movx	a,@dptr
      000DFC FF               [12] 2692 	mov	r7,a
      000DFD 90r00rB7         [24] 2693 	mov	dptr,#__print_format_zero_padding_65536_115
      000E00 E0               [24] 2694 	movx	a,@dptr
      000E01 FD               [12] 2695 	mov	r5,a
      000E02 90r00rB8         [24] 2696 	mov	dptr,#__print_format_prefix_sign_65536_115
      000E05 E0               [24] 2697 	movx	a,@dptr
      000E06 F5*0F            [12] 2698 	mov	__print_format_sloc2_1_0,a
      000E08 90r00rB9         [24] 2699 	mov	dptr,#__print_format_prefix_space_65536_115
      000E0B E0               [24] 2700 	movx	a,@dptr
      000E0C FB               [12] 2701 	mov	r3,a
      000E0D 90r00r12         [24] 2702 	mov	dptr,#_output_float_PARM_2
      000E10 EA               [12] 2703 	mov	a,r2
      000E11 F0               [24] 2704 	movx	@dptr,a
      000E12 90r00r13         [24] 2705 	mov	dptr,#_output_float_PARM_3
      000E15 EE               [12] 2706 	mov	a,r6
      000E16 F0               [24] 2707 	movx	@dptr,a
      000E17 90r00r14         [24] 2708 	mov	dptr,#_output_float_PARM_4
      000E1A EF               [12] 2709 	mov	a,r7
      000E1B F0               [24] 2710 	movx	@dptr,a
      000E1C 90r00r15         [24] 2711 	mov	dptr,#_output_float_PARM_5
      000E1F ED               [12] 2712 	mov	a,r5
      000E20 F0               [24] 2713 	movx	@dptr,a
      000E21 90r00r16         [24] 2714 	mov	dptr,#_output_float_PARM_6
      000E24 E5*0F            [12] 2715 	mov	a,__print_format_sloc2_1_0
      000E26 F0               [24] 2716 	movx	@dptr,a
      000E27 90r00r17         [24] 2717 	mov	dptr,#_output_float_PARM_7
      000E2A EB               [12] 2718 	mov	a,r3
      000E2B F0               [24] 2719 	movx	@dptr,a
      000E2C 85*12 82         [24] 2720 	mov	dpl,__print_format_sloc3_1_0
      000E2F 85*13 83         [24] 2721 	mov	dph,(__print_format_sloc3_1_0 + 1)
      000E32 85*14 F0         [24] 2722 	mov	b,(__print_format_sloc3_1_0 + 2)
      000E35 E5*15            [12] 2723 	mov	a,(__print_format_sloc3_1_0 + 3)
      000E37 78rF8            [12] 2724 	mov	r0,#_output_float
      000E39 79s00            [12] 2725 	mov	r1,#(_output_float >> 8)
      000E3B 7As00            [12] 2726 	mov	r2,#(_output_float >> 16)
      000E3D 12r00r00         [24] 2727 	lcall	__sdcc_banked_call
      000E40 02r08rB4         [24] 2728 	ljmp	00240$
      000E43                       2729 00235$:
                                   2730 ;	printf_large.c:723: else if (radix != 0)
      000E43 90r00rBF         [24] 2731 	mov	dptr,#__print_format_radix_65536_115
      000E46 E0               [24] 2732 	movx	a,@dptr
      000E47 70 03            [24] 2733 	jnz	00631$
      000E49 02r08rB4         [24] 2734 	ljmp	00240$
      000E4C                       2735 00631$:
                                   2736 ;	printf_large.c:731: if (char_argument)
      000E4C 90r00rBB         [24] 2737 	mov	dptr,#__print_format_char_argument_65536_115
      000E4F E0               [24] 2738 	movx	a,@dptr
      000E50 60 47            [24] 2739 	jz	00181$
                                   2740 ;	printf_large.c:733: value.l = va_arg(ap, char);
      000E52 90r00rB2         [24] 2741 	mov	dptr,#__print_format_PARM_4
      000E55 E0               [24] 2742 	movx	a,@dptr
      000E56 14               [12] 2743 	dec	a
      000E57 F9               [12] 2744 	mov	r1,a
      000E58 F0               [24] 2745 	movx	@dptr,a
      000E59 87 07            [24] 2746 	mov	ar7,@r1
      000E5B 7E 00            [12] 2747 	mov	r6,#0x00
      000E5D 7D 00            [12] 2748 	mov	r5,#0x00
      000E5F 7B 00            [12] 2749 	mov	r3,#0x00
      000E61 90r00r07         [24] 2750 	mov	dptr,#_value
      000E64 EF               [12] 2751 	mov	a,r7
      000E65 F0               [24] 2752 	movx	@dptr,a
      000E66 EE               [12] 2753 	mov	a,r6
      000E67 A3               [24] 2754 	inc	dptr
      000E68 F0               [24] 2755 	movx	@dptr,a
      000E69 ED               [12] 2756 	mov	a,r5
      000E6A A3               [24] 2757 	inc	dptr
      000E6B F0               [24] 2758 	movx	@dptr,a
      000E6C EB               [12] 2759 	mov	a,r3
      000E6D A3               [24] 2760 	inc	dptr
      000E6E F0               [24] 2761 	movx	@dptr,a
                                   2762 ;	printf_large.c:734: if (!signed_argument)
      000E6F 90r00rBA         [24] 2763 	mov	dptr,#__print_format_signed_argument_65536_115
      000E72 E0               [24] 2764 	movx	a,@dptr
      000E73 60 03            [24] 2765 	jz	00633$
      000E75 02r0Fr0F         [24] 2766 	ljmp	00182$
      000E78                       2767 00633$:
                                   2768 ;	printf_large.c:736: value.l &= 0xFF;
      000E78 90r00r07         [24] 2769 	mov	dptr,#_value
      000E7B E0               [24] 2770 	movx	a,@dptr
      000E7C FB               [12] 2771 	mov	r3,a
      000E7D A3               [24] 2772 	inc	dptr
      000E7E E0               [24] 2773 	movx	a,@dptr
      000E7F A3               [24] 2774 	inc	dptr
      000E80 E0               [24] 2775 	movx	a,@dptr
      000E81 A3               [24] 2776 	inc	dptr
      000E82 E0               [24] 2777 	movx	a,@dptr
      000E83 7D 00            [12] 2778 	mov	r5,#0x00
      000E85 7E 00            [12] 2779 	mov	r6,#0x00
      000E87 7F 00            [12] 2780 	mov	r7,#0x00
      000E89 90r00r07         [24] 2781 	mov	dptr,#_value
      000E8C EB               [12] 2782 	mov	a,r3
      000E8D F0               [24] 2783 	movx	@dptr,a
      000E8E ED               [12] 2784 	mov	a,r5
      000E8F A3               [24] 2785 	inc	dptr
      000E90 F0               [24] 2786 	movx	@dptr,a
      000E91 EE               [12] 2787 	mov	a,r6
      000E92 A3               [24] 2788 	inc	dptr
      000E93 F0               [24] 2789 	movx	@dptr,a
      000E94 EF               [12] 2790 	mov	a,r7
      000E95 A3               [24] 2791 	inc	dptr
      000E96 F0               [24] 2792 	movx	@dptr,a
      000E97 80 76            [24] 2793 	sjmp	00182$
      000E99                       2794 00181$:
                                   2795 ;	printf_large.c:739: else if (long_argument)
      000E99 90r00rBC         [24] 2796 	mov	dptr,#__print_format_long_argument_65536_115
      000E9C E0               [24] 2797 	movx	a,@dptr
      000E9D 60 28            [24] 2798 	jz	00178$
                                   2799 ;	printf_large.c:741: value.l = va_arg(ap, long);
      000E9F 90r00rB2         [24] 2800 	mov	dptr,#__print_format_PARM_4
      000EA2 E0               [24] 2801 	movx	a,@dptr
      000EA3 24 FC            [12] 2802 	add	a,#0xfc
      000EA5 FF               [12] 2803 	mov	r7,a
      000EA6 F0               [24] 2804 	movx	@dptr,a
      000EA7 8F 01            [24] 2805 	mov	ar1,r7
      000EA9 87 03            [24] 2806 	mov	ar3,@r1
      000EAB 09               [12] 2807 	inc	r1
      000EAC 87 05            [24] 2808 	mov	ar5,@r1
      000EAE 09               [12] 2809 	inc	r1
      000EAF 87 06            [24] 2810 	mov	ar6,@r1
      000EB1 09               [12] 2811 	inc	r1
      000EB2 87 07            [24] 2812 	mov	ar7,@r1
      000EB4 19               [12] 2813 	dec	r1
      000EB5 19               [12] 2814 	dec	r1
      000EB6 19               [12] 2815 	dec	r1
      000EB7 90r00r07         [24] 2816 	mov	dptr,#_value
      000EBA EB               [12] 2817 	mov	a,r3
      000EBB F0               [24] 2818 	movx	@dptr,a
      000EBC ED               [12] 2819 	mov	a,r5
      000EBD A3               [24] 2820 	inc	dptr
      000EBE F0               [24] 2821 	movx	@dptr,a
      000EBF EE               [12] 2822 	mov	a,r6
      000EC0 A3               [24] 2823 	inc	dptr
      000EC1 F0               [24] 2824 	movx	@dptr,a
      000EC2 EF               [12] 2825 	mov	a,r7
      000EC3 A3               [24] 2826 	inc	dptr
      000EC4 F0               [24] 2827 	movx	@dptr,a
      000EC5 80 48            [24] 2828 	sjmp	00182$
      000EC7                       2829 00178$:
                                   2830 ;	printf_large.c:745: value.l = va_arg(ap, int);
      000EC7 90r00rB2         [24] 2831 	mov	dptr,#__print_format_PARM_4
      000ECA E0               [24] 2832 	movx	a,@dptr
      000ECB 24 FE            [12] 2833 	add	a,#0xfe
      000ECD FF               [12] 2834 	mov	r7,a
      000ECE F0               [24] 2835 	movx	@dptr,a
      000ECF 8F 01            [24] 2836 	mov	ar1,r7
      000ED1 87 06            [24] 2837 	mov	ar6,@r1
      000ED3 09               [12] 2838 	inc	r1
      000ED4 87 07            [24] 2839 	mov	ar7,@r1
      000ED6 19               [12] 2840 	dec	r1
      000ED7 EF               [12] 2841 	mov	a,r7
      000ED8 33               [12] 2842 	rlc	a
      000ED9 95 E0            [12] 2843 	subb	a,acc
      000EDB FD               [12] 2844 	mov	r5,a
      000EDC FB               [12] 2845 	mov	r3,a
      000EDD 90r00r07         [24] 2846 	mov	dptr,#_value
      000EE0 EE               [12] 2847 	mov	a,r6
      000EE1 F0               [24] 2848 	movx	@dptr,a
      000EE2 EF               [12] 2849 	mov	a,r7
      000EE3 A3               [24] 2850 	inc	dptr
      000EE4 F0               [24] 2851 	movx	@dptr,a
      000EE5 ED               [12] 2852 	mov	a,r5
      000EE6 A3               [24] 2853 	inc	dptr
      000EE7 F0               [24] 2854 	movx	@dptr,a
      000EE8 EB               [12] 2855 	mov	a,r3
      000EE9 A3               [24] 2856 	inc	dptr
      000EEA F0               [24] 2857 	movx	@dptr,a
                                   2858 ;	printf_large.c:746: if (!signed_argument)
      000EEB 90r00rBA         [24] 2859 	mov	dptr,#__print_format_signed_argument_65536_115
      000EEE E0               [24] 2860 	movx	a,@dptr
      000EEF 70 1E            [24] 2861 	jnz	00182$
                                   2862 ;	printf_large.c:748: value.l &= 0xFFFF;
      000EF1 90r00r07         [24] 2863 	mov	dptr,#_value
      000EF4 E0               [24] 2864 	movx	a,@dptr
      000EF5 FB               [12] 2865 	mov	r3,a
      000EF6 A3               [24] 2866 	inc	dptr
      000EF7 E0               [24] 2867 	movx	a,@dptr
      000EF8 FD               [12] 2868 	mov	r5,a
      000EF9 A3               [24] 2869 	inc	dptr
      000EFA E0               [24] 2870 	movx	a,@dptr
      000EFB A3               [24] 2871 	inc	dptr
      000EFC E0               [24] 2872 	movx	a,@dptr
      000EFD 7E 00            [12] 2873 	mov	r6,#0x00
      000EFF 7F 00            [12] 2874 	mov	r7,#0x00
      000F01 90r00r07         [24] 2875 	mov	dptr,#_value
      000F04 EB               [12] 2876 	mov	a,r3
      000F05 F0               [24] 2877 	movx	@dptr,a
      000F06 ED               [12] 2878 	mov	a,r5
      000F07 A3               [24] 2879 	inc	dptr
      000F08 F0               [24] 2880 	movx	@dptr,a
      000F09 EE               [12] 2881 	mov	a,r6
      000F0A A3               [24] 2882 	inc	dptr
      000F0B F0               [24] 2883 	movx	@dptr,a
      000F0C EF               [12] 2884 	mov	a,r7
      000F0D A3               [24] 2885 	inc	dptr
      000F0E F0               [24] 2886 	movx	@dptr,a
      000F0F                       2887 00182$:
                                   2888 ;	printf_large.c:752: if ( signed_argument )
      000F0F 90r00rBA         [24] 2889 	mov	dptr,#__print_format_signed_argument_65536_115
      000F12 E0               [24] 2890 	movx	a,@dptr
      000F13 60 41            [24] 2891 	jz	00187$
                                   2892 ;	printf_large.c:754: if (value.l < 0)
      000F15 90r00r07         [24] 2893 	mov	dptr,#_value
      000F18 E0               [24] 2894 	movx	a,@dptr
      000F19 FB               [12] 2895 	mov	r3,a
      000F1A A3               [24] 2896 	inc	dptr
      000F1B E0               [24] 2897 	movx	a,@dptr
      000F1C FD               [12] 2898 	mov	r5,a
      000F1D A3               [24] 2899 	inc	dptr
      000F1E E0               [24] 2900 	movx	a,@dptr
      000F1F FE               [12] 2901 	mov	r6,a
      000F20 A3               [24] 2902 	inc	dptr
      000F21 E0               [24] 2903 	movx	a,@dptr
      000F22 FF               [12] 2904 	mov	r7,a
      000F23 30 E7 2B         [24] 2905 	jnb	acc.7,00184$
                                   2906 ;	printf_large.c:755: value.l = -value.l;
      000F26 90r00r07         [24] 2907 	mov	dptr,#_value
      000F29 E0               [24] 2908 	movx	a,@dptr
      000F2A FB               [12] 2909 	mov	r3,a
      000F2B A3               [24] 2910 	inc	dptr
      000F2C E0               [24] 2911 	movx	a,@dptr
      000F2D FD               [12] 2912 	mov	r5,a
      000F2E A3               [24] 2913 	inc	dptr
      000F2F E0               [24] 2914 	movx	a,@dptr
      000F30 FE               [12] 2915 	mov	r6,a
      000F31 A3               [24] 2916 	inc	dptr
      000F32 E0               [24] 2917 	movx	a,@dptr
      000F33 FF               [12] 2918 	mov	r7,a
      000F34 C3               [12] 2919 	clr	c
      000F35 E4               [12] 2920 	clr	a
      000F36 9B               [12] 2921 	subb	a,r3
      000F37 FB               [12] 2922 	mov	r3,a
      000F38 E4               [12] 2923 	clr	a
      000F39 9D               [12] 2924 	subb	a,r5
      000F3A FD               [12] 2925 	mov	r5,a
      000F3B E4               [12] 2926 	clr	a
      000F3C 9E               [12] 2927 	subb	a,r6
      000F3D FE               [12] 2928 	mov	r6,a
      000F3E E4               [12] 2929 	clr	a
      000F3F 9F               [12] 2930 	subb	a,r7
      000F40 FF               [12] 2931 	mov	r7,a
      000F41 90r00r07         [24] 2932 	mov	dptr,#_value
      000F44 EB               [12] 2933 	mov	a,r3
      000F45 F0               [24] 2934 	movx	@dptr,a
      000F46 ED               [12] 2935 	mov	a,r5
      000F47 A3               [24] 2936 	inc	dptr
      000F48 F0               [24] 2937 	movx	@dptr,a
      000F49 EE               [12] 2938 	mov	a,r6
      000F4A A3               [24] 2939 	inc	dptr
      000F4B F0               [24] 2940 	movx	@dptr,a
      000F4C EF               [12] 2941 	mov	a,r7
      000F4D A3               [24] 2942 	inc	dptr
      000F4E F0               [24] 2943 	movx	@dptr,a
      000F4F 80 05            [24] 2944 	sjmp	00187$
      000F51                       2945 00184$:
                                   2946 ;	printf_large.c:757: signed_argument = 0;
      000F51 90r00rBA         [24] 2947 	mov	dptr,#__print_format_signed_argument_65536_115
      000F54 E4               [12] 2948 	clr	a
      000F55 F0               [24] 2949 	movx	@dptr,a
      000F56                       2950 00187$:
                                   2951 ;	printf_large.c:761: lsd = 1;
      000F56 90r00rBE         [24] 2952 	mov	dptr,#__print_format_lsd_65536_115
      000F59 74 01            [12] 2953 	mov	a,#0x01
      000F5B F0               [24] 2954 	movx	@dptr,a
                                   2955 ;	printf_large.c:763: do {
      000F5C 90r00rBF         [24] 2956 	mov	dptr,#__print_format_radix_65536_115
      000F5F E0               [24] 2957 	movx	a,@dptr
      000F60 F5*0F            [12] 2958 	mov	__print_format_sloc2_1_0,a
      000F62 75*16rCC         [24] 2959 	mov	__print_format_sloc4_1_0,#(__print_format_store_262144_135 + 0x0005)
      000F65 75*17s00         [24] 2960 	mov	(__print_format_sloc4_1_0 + 1),#((__print_format_store_262144_135 + 0x0005) >> 8)
      000F68 E4               [12] 2961 	clr	a
      000F69 F5*0C            [12] 2962 	mov	__print_format_sloc0_1_0,a
      000F6B F5*0D            [12] 2963 	mov	(__print_format_sloc0_1_0 + 1),a
      000F6D                       2964 00191$:
                                   2965 ;	printf_large.c:764: value.byte[4] = 0;
      000F6D 90r00r0B         [24] 2966 	mov	dptr,#(_value + 0x0004)
      000F70 E4               [12] 2967 	clr	a
      000F71 F0               [24] 2968 	movx	@dptr,a
                                   2969 ;	printf_large.c:768: calculate_digit(radix);
      000F72 85*0F 82         [24] 2970 	mov	dpl,__print_format_sloc2_1_0
      000F75 78r98            [12] 2971 	mov	r0,#_calculate_digit
      000F77 79s00            [12] 2972 	mov	r1,#(_calculate_digit >> 8)
      000F79 7As00            [12] 2973 	mov	r2,#(_calculate_digit >> 16)
      000F7B 12r00r00         [24] 2974 	lcall	__sdcc_banked_call
                                   2975 ;	printf_large.c:770: if (!lsd)
      000F7E 90r00rBE         [24] 2976 	mov	dptr,#__print_format_lsd_65536_115
      000F81 E0               [24] 2977 	movx	a,@dptr
      000F82 70 33            [24] 2978 	jnz	00189$
                                   2979 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000F84 90r00r0B         [24] 2980 	mov	dptr,#(_value + 0x0004)
      000F87 E0               [24] 2981 	movx	a,@dptr
      000F88 C4               [12] 2982 	swap	a
      000F89 54 F0            [12] 2983 	anl	a,#0xf0
      000F8B F5*12            [12] 2984 	mov	__print_format_sloc3_1_0,a
      000F8D 90r00r0B         [24] 2985 	mov	dptr,#(_value + 0x0004)
      000F90 E0               [24] 2986 	movx	a,@dptr
      000F91 C4               [12] 2987 	swap	a
      000F92 54 0F            [12] 2988 	anl	a,#0x0f
      000F94 45*12            [12] 2989 	orl	a,__print_format_sloc3_1_0
      000F96 F5*12            [12] 2990 	mov	__print_format_sloc3_1_0,a
      000F98 85*16 82         [24] 2991 	mov	dpl,__print_format_sloc4_1_0
      000F9B 85*17 83         [24] 2992 	mov	dph,(__print_format_sloc4_1_0 + 1)
      000F9E E0               [24] 2993 	movx	a,@dptr
      000F9F FF               [12] 2994 	mov	r7,a
      000FA0 E5*12            [12] 2995 	mov	a,__print_format_sloc3_1_0
      000FA2 42 07            [12] 2996 	orl	ar7,a
      000FA4 85*16 82         [24] 2997 	mov	dpl,__print_format_sloc4_1_0
      000FA7 85*17 83         [24] 2998 	mov	dph,(__print_format_sloc4_1_0 + 1)
      000FAA EF               [12] 2999 	mov	a,r7
      000FAB F0               [24] 3000 	movx	@dptr,a
                                   3001 ;	printf_large.c:773: pstore--;
      000FAC 15*16            [12] 3002 	dec	__print_format_sloc4_1_0
      000FAE 74 FF            [12] 3003 	mov	a,#0xff
      000FB0 B5*16 02         [24] 3004 	cjne	a,__print_format_sloc4_1_0,00639$
      000FB3 15*17            [12] 3005 	dec	(__print_format_sloc4_1_0 + 1)
      000FB5                       3006 00639$:
      000FB5 80 0C            [24] 3007 	sjmp	00190$
      000FB7                       3008 00189$:
                                   3009 ;	printf_large.c:777: *pstore = value.byte[4];
      000FB7 90r00r0B         [24] 3010 	mov	dptr,#(_value + 0x0004)
      000FBA E0               [24] 3011 	movx	a,@dptr
      000FBB FF               [12] 3012 	mov	r7,a
      000FBC 85*16 82         [24] 3013 	mov	dpl,__print_format_sloc4_1_0
      000FBF 85*17 83         [24] 3014 	mov	dph,(__print_format_sloc4_1_0 + 1)
      000FC2 F0               [24] 3015 	movx	@dptr,a
      000FC3                       3016 00190$:
                                   3017 ;	printf_large.c:779: length++;
      000FC3 05*0C            [12] 3018 	inc	__print_format_sloc0_1_0
      000FC5 E4               [12] 3019 	clr	a
      000FC6 B5*0C 02         [24] 3020 	cjne	a,__print_format_sloc0_1_0,00640$
      000FC9 05*0D            [12] 3021 	inc	(__print_format_sloc0_1_0 + 1)
      000FCB                       3022 00640$:
                                   3023 ;	printf_large.c:780: lsd = !lsd;
      000FCB 90r00rBE         [24] 3024 	mov	dptr,#__print_format_lsd_65536_115
      000FCE E0               [24] 3025 	movx	a,@dptr
      000FCF B4 01 00         [24] 3026 	cjne	a,#0x01,00641$
      000FD2                       3027 00641$:
      000FD2 E4               [12] 3028 	clr	a
      000FD3 33               [12] 3029 	rlc	a
      000FD4 F0               [24] 3030 	movx	@dptr,a
                                   3031 ;	printf_large.c:781: } while( value.ul );
      000FD5 90r00r07         [24] 3032 	mov	dptr,#_value
      000FD8 E0               [24] 3033 	movx	a,@dptr
      000FD9 FA               [12] 3034 	mov	r2,a
      000FDA A3               [24] 3035 	inc	dptr
      000FDB E0               [24] 3036 	movx	a,@dptr
      000FDC FB               [12] 3037 	mov	r3,a
      000FDD A3               [24] 3038 	inc	dptr
      000FDE E0               [24] 3039 	movx	a,@dptr
      000FDF FE               [12] 3040 	mov	r6,a
      000FE0 A3               [24] 3041 	inc	dptr
      000FE1 E0               [24] 3042 	movx	a,@dptr
      000FE2 FF               [12] 3043 	mov	r7,a
      000FE3 EA               [12] 3044 	mov	a,r2
      000FE4 4B               [12] 3045 	orl	a,r3
      000FE5 4E               [12] 3046 	orl	a,r6
      000FE6 4F               [12] 3047 	orl	a,r7
      000FE7 70 84            [24] 3048 	jnz	00191$
                                   3049 ;	printf_large.c:783: if (width == 0)
      000FE9 90r00rCD         [24] 3050 	mov	dptr,#__print_format_pstore_262144_135
      000FEC E5*16            [12] 3051 	mov	a,__print_format_sloc4_1_0
      000FEE F0               [24] 3052 	movx	@dptr,a
      000FEF E5*17            [12] 3053 	mov	a,(__print_format_sloc4_1_0 + 1)
      000FF1 A3               [24] 3054 	inc	dptr
      000FF2 F0               [24] 3055 	movx	@dptr,a
      000FF3 90r00rC4         [24] 3056 	mov	dptr,#__print_format_length_65536_115
      000FF6 E5*0C            [12] 3057 	mov	a,__print_format_sloc0_1_0
      000FF8 F0               [24] 3058 	movx	@dptr,a
      000FF9 E5*0D            [12] 3059 	mov	a,(__print_format_sloc0_1_0 + 1)
      000FFB A3               [24] 3060 	inc	dptr
      000FFC F0               [24] 3061 	movx	@dptr,a
      000FFD 90r00rC0         [24] 3062 	mov	dptr,#__print_format_width_65536_115
      001000 E0               [24] 3063 	movx	a,@dptr
      001001 F5 F0            [12] 3064 	mov	b,a
      001003 A3               [24] 3065 	inc	dptr
      001004 E0               [24] 3066 	movx	a,@dptr
      001005 45 F0            [12] 3067 	orl	a,b
      001007 70 09            [24] 3068 	jnz	00195$
                                   3069 ;	printf_large.c:788: width = 1;
      001009 90r00rC0         [24] 3070 	mov	dptr,#__print_format_width_65536_115
      00100C 74 01            [12] 3071 	mov	a,#0x01
      00100E F0               [24] 3072 	movx	@dptr,a
      00100F E4               [12] 3073 	clr	a
      001010 A3               [24] 3074 	inc	dptr
      001011 F0               [24] 3075 	movx	@dptr,a
      001012                       3076 00195$:
                                   3077 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      001012 90r00rB7         [24] 3078 	mov	dptr,#__print_format_zero_padding_65536_115
      001015 E0               [24] 3079 	movx	a,@dptr
      001016 FF               [12] 3080 	mov	r7,a
      001017 E0               [24] 3081 	movx	a,@dptr
      001018 70 4D            [24] 3082 	jnz	00200$
      00101A 90r00rB6         [24] 3083 	mov	dptr,#__print_format_left_justify_65536_115
      00101D E0               [24] 3084 	movx	a,@dptr
      00101E 70 47            [24] 3085 	jnz	00200$
                                   3086 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      001020 85*0C*16         [24] 3087 	mov	__print_format_sloc4_1_0,__print_format_sloc0_1_0
      001023 85*0D*17         [24] 3088 	mov	(__print_format_sloc4_1_0 + 1),(__print_format_sloc0_1_0 + 1)
      001026 90r00rC0         [24] 3089 	mov	dptr,#__print_format_width_65536_115
      001029 E0               [24] 3090 	movx	a,@dptr
      00102A FA               [12] 3091 	mov	r2,a
      00102B A3               [24] 3092 	inc	dptr
      00102C E0               [24] 3093 	movx	a,@dptr
      00102D FB               [12] 3094 	mov	r3,a
      00102E                       3095 00196$:
      00102E C0 07            [24] 3096 	push	ar7
      001030 AF*16            [24] 3097 	mov	r7,__print_format_sloc4_1_0
      001032 0F               [12] 3098 	inc	r7
      001033 8F 06            [24] 3099 	mov	ar6,r7
      001035 7F 00            [12] 3100 	mov	r7,#0x00
      001037 C3               [12] 3101 	clr	c
      001038 EE               [12] 3102 	mov	a,r6
      001039 9A               [12] 3103 	subb	a,r2
      00103A EF               [12] 3104 	mov	a,r7
      00103B 9B               [12] 3105 	subb	a,r3
      00103C D0 07            [24] 3106 	pop	ar7
      00103E 50 1F            [24] 3107 	jnc	00328$
                                   3108 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      001040 75 82 20         [24] 3109 	mov	dpl,#0x20
      001043 C0 07            [24] 3110 	push	ar7
      001045 C0 03            [24] 3111 	push	ar3
      001047 C0 02            [24] 3112 	push	ar2
      001049 78r00            [12] 3113 	mov	r0,#__output_char
      00104B 79s00            [12] 3114 	mov	r1,#(__output_char >> 8)
      00104D 7As00            [12] 3115 	mov	r2,#(__output_char >> 16)
      00104F 12r00r00         [24] 3116 	lcall	__sdcc_banked_call
      001052 D0 02            [24] 3117 	pop	ar2
      001054 D0 03            [24] 3118 	pop	ar3
      001056 D0 07            [24] 3119 	pop	ar7
                                   3120 ;	printf_large.c:797: width--;
      001058 1A               [12] 3121 	dec	r2
      001059 BA FF 01         [24] 3122 	cjne	r2,#0xff,00647$
      00105C 1B               [12] 3123 	dec	r3
      00105D                       3124 00647$:
      00105D 80 CF            [24] 3125 	sjmp	00196$
      00105F                       3126 00328$:
      00105F 90r00rC0         [24] 3127 	mov	dptr,#__print_format_width_65536_115
      001062 EA               [12] 3128 	mov	a,r2
      001063 F0               [24] 3129 	movx	@dptr,a
      001064 EB               [12] 3130 	mov	a,r3
      001065 A3               [24] 3131 	inc	dptr
      001066 F0               [24] 3132 	movx	@dptr,a
      001067                       3133 00200$:
                                   3134 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      001067 90r00rBA         [24] 3135 	mov	dptr,#__print_format_signed_argument_65536_115
      00106A E0               [24] 3136 	movx	a,@dptr
      00106B 60 26            [24] 3137 	jz	00210$
                                   3138 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      00106D 75 82 2D         [24] 3139 	mov	dpl,#0x2d
      001070 C0 07            [24] 3140 	push	ar7
      001072 78r00            [12] 3141 	mov	r0,#__output_char
      001074 79s00            [12] 3142 	mov	r1,#(__output_char >> 8)
      001076 7As00            [12] 3143 	mov	r2,#(__output_char >> 16)
      001078 12r00r00         [24] 3144 	lcall	__sdcc_banked_call
      00107B D0 07            [24] 3145 	pop	ar7
                                   3146 ;	printf_large.c:805: width--;
      00107D 90r00rC0         [24] 3147 	mov	dptr,#__print_format_width_65536_115
      001080 E0               [24] 3148 	movx	a,@dptr
      001081 24 FF            [12] 3149 	add	a,#0xff
      001083 FD               [12] 3150 	mov	r5,a
      001084 A3               [24] 3151 	inc	dptr
      001085 E0               [24] 3152 	movx	a,@dptr
      001086 34 FF            [12] 3153 	addc	a,#0xff
      001088 FE               [12] 3154 	mov	r6,a
      001089 90r00rC0         [24] 3155 	mov	dptr,#__print_format_width_65536_115
      00108C ED               [12] 3156 	mov	a,r5
      00108D F0               [24] 3157 	movx	@dptr,a
      00108E EE               [12] 3158 	mov	a,r6
      00108F A3               [24] 3159 	inc	dptr
      001090 F0               [24] 3160 	movx	@dptr,a
      001091 80 62            [24] 3161 	sjmp	00211$
      001093                       3162 00210$:
                                   3163 ;	printf_large.c:807: else if (length != 0)
      001093 90r00rC4         [24] 3164 	mov	dptr,#__print_format_length_65536_115
      001096 E0               [24] 3165 	movx	a,@dptr
      001097 F5 F0            [12] 3166 	mov	b,a
      001099 A3               [24] 3167 	inc	dptr
      00109A E0               [24] 3168 	movx	a,@dptr
      00109B 45 F0            [12] 3169 	orl	a,b
      00109D 60 56            [24] 3170 	jz	00211$
                                   3171 ;	printf_large.c:810: if (prefix_sign)
      00109F 90r00rB8         [24] 3172 	mov	dptr,#__print_format_prefix_sign_65536_115
      0010A2 E0               [24] 3173 	movx	a,@dptr
      0010A3 60 26            [24] 3174 	jz	00205$
                                   3175 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      0010A5 75 82 2B         [24] 3176 	mov	dpl,#0x2b
      0010A8 C0 07            [24] 3177 	push	ar7
      0010AA 78r00            [12] 3178 	mov	r0,#__output_char
      0010AC 79s00            [12] 3179 	mov	r1,#(__output_char >> 8)
      0010AE 7As00            [12] 3180 	mov	r2,#(__output_char >> 16)
      0010B0 12r00r00         [24] 3181 	lcall	__sdcc_banked_call
      0010B3 D0 07            [24] 3182 	pop	ar7
                                   3183 ;	printf_large.c:814: width--;
      0010B5 90r00rC0         [24] 3184 	mov	dptr,#__print_format_width_65536_115
      0010B8 E0               [24] 3185 	movx	a,@dptr
      0010B9 24 FF            [12] 3186 	add	a,#0xff
      0010BB FD               [12] 3187 	mov	r5,a
      0010BC A3               [24] 3188 	inc	dptr
      0010BD E0               [24] 3189 	movx	a,@dptr
      0010BE 34 FF            [12] 3190 	addc	a,#0xff
      0010C0 FE               [12] 3191 	mov	r6,a
      0010C1 90r00rC0         [24] 3192 	mov	dptr,#__print_format_width_65536_115
      0010C4 ED               [12] 3193 	mov	a,r5
      0010C5 F0               [24] 3194 	movx	@dptr,a
      0010C6 EE               [12] 3195 	mov	a,r6
      0010C7 A3               [24] 3196 	inc	dptr
      0010C8 F0               [24] 3197 	movx	@dptr,a
      0010C9 80 2A            [24] 3198 	sjmp	00211$
      0010CB                       3199 00205$:
                                   3200 ;	printf_large.c:816: else if (prefix_space)
      0010CB 90r00rB9         [24] 3201 	mov	dptr,#__print_format_prefix_space_65536_115
      0010CE E0               [24] 3202 	movx	a,@dptr
      0010CF 60 24            [24] 3203 	jz	00211$
                                   3204 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      0010D1 75 82 20         [24] 3205 	mov	dpl,#0x20
      0010D4 C0 07            [24] 3206 	push	ar7
      0010D6 78r00            [12] 3207 	mov	r0,#__output_char
      0010D8 79s00            [12] 3208 	mov	r1,#(__output_char >> 8)
      0010DA 7As00            [12] 3209 	mov	r2,#(__output_char >> 16)
      0010DC 12r00r00         [24] 3210 	lcall	__sdcc_banked_call
      0010DF D0 07            [24] 3211 	pop	ar7
                                   3212 ;	printf_large.c:820: width--;
      0010E1 90r00rC0         [24] 3213 	mov	dptr,#__print_format_width_65536_115
      0010E4 E0               [24] 3214 	movx	a,@dptr
      0010E5 24 FF            [12] 3215 	add	a,#0xff
      0010E7 FD               [12] 3216 	mov	r5,a
      0010E8 A3               [24] 3217 	inc	dptr
      0010E9 E0               [24] 3218 	movx	a,@dptr
      0010EA 34 FF            [12] 3219 	addc	a,#0xff
      0010EC FE               [12] 3220 	mov	r6,a
      0010ED 90r00rC0         [24] 3221 	mov	dptr,#__print_format_width_65536_115
      0010F0 ED               [12] 3222 	mov	a,r5
      0010F1 F0               [24] 3223 	movx	@dptr,a
      0010F2 EE               [12] 3224 	mov	a,r6
      0010F3 A3               [24] 3225 	inc	dptr
      0010F4 F0               [24] 3226 	movx	@dptr,a
      0010F5                       3227 00211$:
                                   3228 ;	printf_large.c:825: if (!left_justify)
      0010F5 90r00rB6         [24] 3229 	mov	dptr,#__print_format_left_justify_65536_115
      0010F8 E0               [24] 3230 	movx	a,@dptr
      0010F9 70 4E            [24] 3231 	jnz	00219$
                                   3232 ;	printf_large.c:827: while ( width-- > length )
      0010FB 90r00rC4         [24] 3233 	mov	dptr,#__print_format_length_65536_115
      0010FE E0               [24] 3234 	movx	a,@dptr
      0010FF F5*16            [12] 3235 	mov	__print_format_sloc4_1_0,a
      001101 A3               [24] 3236 	inc	dptr
      001102 E0               [24] 3237 	movx	a,@dptr
      001103 F5*17            [12] 3238 	mov	(__print_format_sloc4_1_0 + 1),a
      001105 90r00rC0         [24] 3239 	mov	dptr,#__print_format_width_65536_115
      001108 E0               [24] 3240 	movx	a,@dptr
      001109 FA               [12] 3241 	mov	r2,a
      00110A A3               [24] 3242 	inc	dptr
      00110B E0               [24] 3243 	movx	a,@dptr
      00110C FB               [12] 3244 	mov	r3,a
      00110D                       3245 00212$:
      00110D C0 07            [24] 3246 	push	ar7
      00110F 8A 06            [24] 3247 	mov	ar6,r2
      001111 8B 07            [24] 3248 	mov	ar7,r3
      001113 1A               [12] 3249 	dec	r2
      001114 BA FF 01         [24] 3250 	cjne	r2,#0xff,00653$
      001117 1B               [12] 3251 	dec	r3
      001118                       3252 00653$:
      001118 C3               [12] 3253 	clr	c
      001119 E5*16            [12] 3254 	mov	a,__print_format_sloc4_1_0
      00111B 9E               [12] 3255 	subb	a,r6
      00111C E5*17            [12] 3256 	mov	a,(__print_format_sloc4_1_0 + 1)
      00111E 9F               [12] 3257 	subb	a,r7
      00111F D0 07            [24] 3258 	pop	ar7
      001121 50 59            [24] 3259 	jnc	00329$
                                   3260 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      001123 EF               [12] 3261 	mov	a,r7
      001124 60 06            [24] 3262 	jz	00245$
      001126 7D 30            [12] 3263 	mov	r5,#0x30
      001128 7E 00            [12] 3264 	mov	r6,#0x00
      00112A 80 04            [24] 3265 	sjmp	00246$
      00112C                       3266 00245$:
      00112C 7D 20            [12] 3267 	mov	r5,#0x20
      00112E 7E 00            [12] 3268 	mov	r6,#0x00
      001130                       3269 00246$:
      001130 8D 82            [24] 3270 	mov	dpl,r5
      001132 C0 07            [24] 3271 	push	ar7
      001134 C0 03            [24] 3272 	push	ar3
      001136 C0 02            [24] 3273 	push	ar2
      001138 78r00            [12] 3274 	mov	r0,#__output_char
      00113A 79s00            [12] 3275 	mov	r1,#(__output_char >> 8)
      00113C 7As00            [12] 3276 	mov	r2,#(__output_char >> 16)
      00113E 12r00r00         [24] 3277 	lcall	__sdcc_banked_call
      001141 D0 02            [24] 3278 	pop	ar2
      001143 D0 03            [24] 3279 	pop	ar3
      001145 D0 07            [24] 3280 	pop	ar7
      001147 80 C4            [24] 3281 	sjmp	00212$
      001149                       3282 00219$:
                                   3283 ;	printf_large.c:835: if (width > length)
      001149 90r00rC0         [24] 3284 	mov	dptr,#__print_format_width_65536_115
      00114C E0               [24] 3285 	movx	a,@dptr
      00114D FE               [12] 3286 	mov	r6,a
      00114E A3               [24] 3287 	inc	dptr
      00114F E0               [24] 3288 	movx	a,@dptr
      001150 FF               [12] 3289 	mov	r7,a
      001151 90r00rC4         [24] 3290 	mov	dptr,#__print_format_length_65536_115
      001154 E0               [24] 3291 	movx	a,@dptr
      001155 F5*16            [12] 3292 	mov	__print_format_sloc4_1_0,a
      001157 A3               [24] 3293 	inc	dptr
      001158 E0               [24] 3294 	movx	a,@dptr
      001159 F5*17            [12] 3295 	mov	(__print_format_sloc4_1_0 + 1),a
      00115B C3               [12] 3296 	clr	c
      00115C E5*16            [12] 3297 	mov	a,__print_format_sloc4_1_0
      00115E 9E               [12] 3298 	subb	a,r6
      00115F E5*17            [12] 3299 	mov	a,(__print_format_sloc4_1_0 + 1)
      001161 9F               [12] 3300 	subb	a,r7
      001162 50 0F            [24] 3301 	jnc	00216$
                                   3302 ;	printf_large.c:836: width -= length;
      001164 90r00rC0         [24] 3303 	mov	dptr,#__print_format_width_65536_115
      001167 EE               [12] 3304 	mov	a,r6
      001168 C3               [12] 3305 	clr	c
      001169 95*16            [12] 3306 	subb	a,__print_format_sloc4_1_0
      00116B F0               [24] 3307 	movx	@dptr,a
      00116C EF               [12] 3308 	mov	a,r7
      00116D 95*17            [12] 3309 	subb	a,(__print_format_sloc4_1_0 + 1)
      00116F A3               [24] 3310 	inc	dptr
      001170 F0               [24] 3311 	movx	@dptr,a
      001171 80 11            [24] 3312 	sjmp	00321$
      001173                       3313 00216$:
                                   3314 ;	printf_large.c:838: width = 0;
      001173 90r00rC0         [24] 3315 	mov	dptr,#__print_format_width_65536_115
      001176 E4               [12] 3316 	clr	a
      001177 F0               [24] 3317 	movx	@dptr,a
      001178 A3               [24] 3318 	inc	dptr
      001179 F0               [24] 3319 	movx	@dptr,a
                                   3320 ;	printf_large.c:877: return charsOutputted;
                                   3321 ;	printf_large.c:842: while( length-- )
      00117A 80 08            [24] 3322 	sjmp	00321$
      00117C                       3323 00329$:
      00117C 90r00rC0         [24] 3324 	mov	dptr,#__print_format_width_65536_115
      00117F EA               [12] 3325 	mov	a,r2
      001180 F0               [24] 3326 	movx	@dptr,a
      001181 EB               [12] 3327 	mov	a,r3
      001182 A3               [24] 3328 	inc	dptr
      001183 F0               [24] 3329 	movx	@dptr,a
      001184                       3330 00321$:
      001184 90r00rCD         [24] 3331 	mov	dptr,#__print_format_pstore_262144_135
      001187 E0               [24] 3332 	movx	a,@dptr
      001188 FE               [12] 3333 	mov	r6,a
      001189 A3               [24] 3334 	inc	dptr
      00118A E0               [24] 3335 	movx	a,@dptr
      00118B FF               [12] 3336 	mov	r7,a
      00118C 90r00rC4         [24] 3337 	mov	dptr,#__print_format_length_65536_115
      00118F E0               [24] 3338 	movx	a,@dptr
      001190 F5*16            [12] 3339 	mov	__print_format_sloc4_1_0,a
      001192 A3               [24] 3340 	inc	dptr
      001193 E0               [24] 3341 	movx	a,@dptr
      001194 F5*17            [12] 3342 	mov	(__print_format_sloc4_1_0 + 1),a
      001196                       3343 00224$:
      001196 AA*16            [24] 3344 	mov	r2,__print_format_sloc4_1_0
      001198 AD*17            [24] 3345 	mov	r5,(__print_format_sloc4_1_0 + 1)
      00119A 15*16            [12] 3346 	dec	__print_format_sloc4_1_0
      00119C 74 FF            [12] 3347 	mov	a,#0xff
      00119E B5*16 02         [24] 3348 	cjne	a,__print_format_sloc4_1_0,00657$
      0011A1 15*17            [12] 3349 	dec	(__print_format_sloc4_1_0 + 1)
      0011A3                       3350 00657$:
      0011A3 EA               [12] 3351 	mov	a,r2
      0011A4 4D               [12] 3352 	orl	a,r5
      0011A5 60 4B            [24] 3353 	jz	00226$
                                   3354 ;	printf_large.c:844: lsd = !lsd;
      0011A7 90r00rBE         [24] 3355 	mov	dptr,#__print_format_lsd_65536_115
      0011AA E0               [24] 3356 	movx	a,@dptr
      0011AB B4 01 00         [24] 3357 	cjne	a,#0x01,00659$
      0011AE                       3358 00659$:
      0011AE E4               [12] 3359 	clr	a
      0011AF 33               [12] 3360 	rlc	a
      0011B0 F0               [24] 3361 	movx	@dptr,a
                                   3362 ;	printf_large.c:845: if (!lsd)
      0011B1 90r00rBE         [24] 3363 	mov	dptr,#__print_format_lsd_65536_115
      0011B4 E0               [24] 3364 	movx	a,@dptr
      0011B5 70 14            [24] 3365 	jnz	00222$
                                   3366 ;	printf_large.c:847: pstore++;
      0011B7 0E               [12] 3367 	inc	r6
      0011B8 BE 00 01         [24] 3368 	cjne	r6,#0x00,00661$
      0011BB 0F               [12] 3369 	inc	r7
      0011BC                       3370 00661$:
                                   3371 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      0011BC 8E 82            [24] 3372 	mov	dpl,r6
      0011BE 8F 83            [24] 3373 	mov	dph,r7
      0011C0 E0               [24] 3374 	movx	a,@dptr
      0011C1 C4               [12] 3375 	swap	a
      0011C2 54 0F            [12] 3376 	anl	a,#0x0f
      0011C4 FD               [12] 3377 	mov	r5,a
      0011C5 90r00r0B         [24] 3378 	mov	dptr,#(_value + 0x0004)
      0011C8 F0               [24] 3379 	movx	@dptr,a
      0011C9 80 0E            [24] 3380 	sjmp	00223$
      0011CB                       3381 00222$:
                                   3382 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      0011CB 8E 82            [24] 3383 	mov	dpl,r6
      0011CD 8F 83            [24] 3384 	mov	dph,r7
      0011CF E0               [24] 3385 	movx	a,@dptr
      0011D0 FD               [12] 3386 	mov	r5,a
      0011D1 53 05 0F         [24] 3387 	anl	ar5,#0x0f
      0011D4 90r00r0B         [24] 3388 	mov	dptr,#(_value + 0x0004)
      0011D7 ED               [12] 3389 	mov	a,r5
      0011D8 F0               [24] 3390 	movx	@dptr,a
      0011D9                       3391 00223$:
                                   3392 ;	printf_large.c:858: output_digit( value.byte[4] );
      0011D9 90r00r0B         [24] 3393 	mov	dptr,#(_value + 0x0004)
      0011DC E0               [24] 3394 	movx	a,@dptr
      0011DD F5 82            [12] 3395 	mov	dpl,a
      0011DF C0 07            [24] 3396 	push	ar7
      0011E1 C0 06            [24] 3397 	push	ar6
      0011E3 78r44            [12] 3398 	mov	r0,#_output_digit
      0011E5 79s00            [12] 3399 	mov	r1,#(_output_digit >> 8)
      0011E7 7As00            [12] 3400 	mov	r2,#(_output_digit >> 16)
      0011E9 12r00r00         [24] 3401 	lcall	__sdcc_banked_call
      0011EC D0 06            [24] 3402 	pop	ar6
      0011EE D0 07            [24] 3403 	pop	ar7
      0011F0 80 A4            [24] 3404 	sjmp	00224$
      0011F2                       3405 00226$:
                                   3406 ;	printf_large.c:861: if (left_justify)
      0011F2 90r00rB6         [24] 3407 	mov	dptr,#__print_format_left_justify_65536_115
      0011F5 E0               [24] 3408 	movx	a,@dptr
      0011F6 70 03            [24] 3409 	jnz	00662$
      0011F8 02r08rB4         [24] 3410 	ljmp	00240$
      0011FB                       3411 00662$:
                                   3412 ;	printf_large.c:863: while (width-- > 0)
      0011FB 90r00rC0         [24] 3413 	mov	dptr,#__print_format_width_65536_115
      0011FE E0               [24] 3414 	movx	a,@dptr
      0011FF FE               [12] 3415 	mov	r6,a
      001200 A3               [24] 3416 	inc	dptr
      001201 E0               [24] 3417 	movx	a,@dptr
      001202 FF               [12] 3418 	mov	r7,a
      001203                       3419 00227$:
      001203 8E 03            [24] 3420 	mov	ar3,r6
      001205 8F 05            [24] 3421 	mov	ar5,r7
      001207 1E               [12] 3422 	dec	r6
      001208 BE FF 01         [24] 3423 	cjne	r6,#0xff,00663$
      00120B 1F               [12] 3424 	dec	r7
      00120C                       3425 00663$:
      00120C EB               [12] 3426 	mov	a,r3
      00120D 4D               [12] 3427 	orl	a,r5
      00120E 70 03            [24] 3428 	jnz	00664$
      001210 02r08rB4         [24] 3429 	ljmp	00240$
      001213                       3430 00664$:
                                   3431 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      001213 75 82 20         [24] 3432 	mov	dpl,#0x20
      001216 C0 07            [24] 3433 	push	ar7
      001218 C0 06            [24] 3434 	push	ar6
      00121A 78r00            [12] 3435 	mov	r0,#__output_char
      00121C 79s00            [12] 3436 	mov	r1,#(__output_char >> 8)
      00121E 7As00            [12] 3437 	mov	r2,#(__output_char >> 16)
      001220 12r00r00         [24] 3438 	lcall	__sdcc_banked_call
      001223 D0 06            [24] 3439 	pop	ar6
      001225 D0 07            [24] 3440 	pop	ar7
      001227 80 DA            [24] 3441 	sjmp	00227$
      001229                       3442 00238$:
                                   3443 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      001229 8C 82            [24] 3444 	mov	dpl,r4
      00122B 78r00            [12] 3445 	mov	r0,#__output_char
      00122D 79s00            [12] 3446 	mov	r1,#(__output_char >> 8)
      00122F 7As00            [12] 3447 	mov	r2,#(__output_char >> 16)
      001231 12r00r00         [24] 3448 	lcall	__sdcc_banked_call
      001234 02r08rB4         [24] 3449 	ljmp	00240$
      001237                       3450 00242$:
                                   3451 ;	printf_large.c:877: return charsOutputted;
      001237 90r00r0C         [24] 3452 	mov	dptr,#_charsOutputted
      00123A E0               [24] 3453 	movx	a,@dptr
      00123B FE               [12] 3454 	mov	r6,a
      00123C A3               [24] 3455 	inc	dptr
      00123D E0               [24] 3456 	movx	a,@dptr
      00123E FF               [12] 3457 	mov	r7,a
      00123F 8E 82            [24] 3458 	mov	dpl,r6
      001241 8F 83            [24] 3459 	mov	dph,r7
                                   3460 ;	printf_large.c:878: }
      001243 02r00r00         [24] 3461 	ljmp	__sdcc_banked_ret
                                   3462 	.area CSEG    (CODE)
                                   3463 	.area CONST   (CODE)
                                   3464 	.area XINIT   (CODE)
                                   3465 	.area CABS    (ABS,CODE)
