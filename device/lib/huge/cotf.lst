                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module cotf
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _tancotf
                                     12 	.globl _fabsf
                                     13 	.globl _cotf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'cotf'
                                     93 ;------------------------------------------------------------
                                     94 ;x                         Allocated to registers r4 r5 r6 r7 
                                     95 ;y                         Allocated to stack - _bp +1
                                     96 ;------------------------------------------------------------
                                     97 ;	cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                                     98 ;	-----------------------------------------
                                     99 ;	 function cotf
                                    100 ;	-----------------------------------------
      000000                        101 _cotf:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 AC 82            [24]  112 	mov	r4,dpl
      000007 AD 83            [24]  113 	mov	r5,dph
      000009 AE F0            [24]  114 	mov	r6,b
      00000B FF               [12]  115 	mov	r7,a
      00000C E5 81            [12]  116 	mov	a,sp
      00000E 24 04            [12]  117 	add	a,#0x04
      000010 F5 81            [12]  118 	mov	sp,a
                                    119 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  120 	mov	dpl,r4
      000014 8D 83            [24]  121 	mov	dph,r5
      000016 8E F0            [24]  122 	mov	b,r6
      000018 EF               [12]  123 	mov	a,r7
      000019 C0 07            [24]  124 	push	ar7
      00001B C0 06            [24]  125 	push	ar6
      00001D C0 05            [24]  126 	push	ar5
      00001F C0 04            [24]  127 	push	ar4
      000021 78r00            [12]  128 	mov	r0,#_fabsf
      000023 79s00            [12]  129 	mov	r1,#(_fabsf >> 8)
      000025 7As00            [12]  130 	mov	r2,#(_fabsf >> 16)
      000027 12r00r00         [24]  131 	lcall	__sdcc_banked_call
      00002A A8*00            [24]  132 	mov	r0,_bp
      00002C 08               [12]  133 	inc	r0
      00002D A6 82            [24]  134 	mov	@r0,dpl
      00002F 08               [12]  135 	inc	r0
      000030 A6 83            [24]  136 	mov	@r0,dph
      000032 08               [12]  137 	inc	r0
      000033 A6 F0            [24]  138 	mov	@r0,b
      000035 08               [12]  139 	inc	r0
      000036 F6               [12]  140 	mov	@r0,a
      000037 A8*00            [24]  141 	mov	r0,_bp
      000039 08               [12]  142 	inc	r0
                                    143 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      00003A 74 60            [12]  144 	mov	a,#0x60
      00003C C0 E0            [24]  145 	push	acc
      00003E 74 42            [12]  146 	mov	a,#0x42
      000040 C0 E0            [24]  147 	push	acc
      000042 74 A2            [12]  148 	mov	a,#0xa2
      000044 C0 E0            [24]  149 	push	acc
      000046 74 0D            [12]  150 	mov	a,#0x0d
      000048 C0 E0            [24]  151 	push	acc
      00004A A8*00            [24]  152 	mov	r0,_bp
      00004C 08               [12]  153 	inc	r0
      00004D 86 82            [24]  154 	mov	dpl,@r0
      00004F 08               [12]  155 	inc	r0
      000050 86 83            [24]  156 	mov	dph,@r0
      000052 08               [12]  157 	inc	r0
      000053 86 F0            [24]  158 	mov	b,@r0
      000055 08               [12]  159 	inc	r0
      000056 E6               [12]  160 	mov	a,@r0
      000057 12r00r00         [24]  161 	lcall	___fslt
      00005A AB 82            [24]  162 	mov	r3,dpl
      00005C E5 81            [12]  163 	mov	a,sp
      00005E 24 FC            [12]  164 	add	a,#0xfc
      000060 F5 81            [12]  165 	mov	sp,a
      000062 D0 04            [24]  166 	pop	ar4
      000064 D0 05            [24]  167 	pop	ar5
      000066 D0 06            [24]  168 	pop	ar6
      000068 D0 07            [24]  169 	pop	ar7
      00006A EB               [12]  170 	mov	a,r3
      00006B 60 39            [24]  171 	jz	00105$
                                    172 ;	cotf.c:44: errno = ERANGE;
      00006D 90r00r00         [24]  173 	mov	dptr,#_errno
      000070 74 22            [12]  174 	mov	a,#0x22
      000072 F0               [24]  175 	movx	@dptr,a
      000073 E4               [12]  176 	clr	a
      000074 A3               [24]  177 	inc	dptr
      000075 F0               [24]  178 	movx	@dptr,a
                                    179 ;	cotf.c:45: if (x<0.0)
      000076 C0 E0            [24]  180 	push	acc
      000078 C0 E0            [24]  181 	push	acc
      00007A C0 E0            [24]  182 	push	acc
      00007C C0 E0            [24]  183 	push	acc
      00007E 8C 82            [24]  184 	mov	dpl,r4
      000080 8D 83            [24]  185 	mov	dph,r5
      000082 8E F0            [24]  186 	mov	b,r6
      000084 EF               [12]  187 	mov	a,r7
      000085 12r00r00         [24]  188 	lcall	___fslt
      000088 AB 82            [24]  189 	mov	r3,dpl
      00008A E5 81            [12]  190 	mov	a,sp
      00008C 24 FC            [12]  191 	add	a,#0xfc
      00008E F5 81            [12]  192 	mov	sp,a
      000090 EB               [12]  193 	mov	a,r3
      000091 60 0A            [24]  194 	jz	00102$
                                    195 ;	cotf.c:46: return -HUGE_VALF;
      000093 90 FF FF         [24]  196 	mov	dptr,#0xffff
      000096 75 F0 7F         [24]  197 	mov	b,#0x7f
      000099 74 FF            [12]  198 	mov	a,#0xff
      00009B 80 26            [24]  199 	sjmp	00106$
      00009D                        200 00102$:
                                    201 ;	cotf.c:48: return +HUGE_VALF;
      00009D 90 FF FF         [24]  202 	mov	dptr,#0xffff
      0000A0 74 7F            [12]  203 	mov	a,#0x7f
      0000A2 F5 F0            [12]  204 	mov	b,a
      0000A4 80 1D            [24]  205 	sjmp	00106$
      0000A6                        206 00105$:
                                    207 ;	cotf.c:50: return tancotf(x, 1);
      0000A6 90r00r00         [24]  208 	mov	dptr,#_tancotf_PARM_2
      0000A9 74 01            [12]  209 	mov	a,#0x01
      0000AB F0               [24]  210 	movx	@dptr,a
      0000AC 8C 82            [24]  211 	mov	dpl,r4
      0000AE 8D 83            [24]  212 	mov	dph,r5
      0000B0 8E F0            [24]  213 	mov	b,r6
      0000B2 EF               [12]  214 	mov	a,r7
      0000B3 78r00            [12]  215 	mov	r0,#_tancotf
      0000B5 79s00            [12]  216 	mov	r1,#(_tancotf >> 8)
      0000B7 7As00            [12]  217 	mov	r2,#(_tancotf >> 16)
      0000B9 12r00r00         [24]  218 	lcall	__sdcc_banked_call
      0000BC AC 82            [24]  219 	mov	r4,dpl
      0000BE AD 83            [24]  220 	mov	r5,dph
      0000C0 AE F0            [24]  221 	mov	r6,b
      0000C2 FF               [12]  222 	mov	r7,a
      0000C3                        223 00106$:
                                    224 ;	cotf.c:51: }
      0000C3 85*00 81         [24]  225 	mov	sp,_bp
      0000C6 D0*00            [24]  226 	pop	_bp
      0000C8 02r00r00         [24]  227 	ljmp	__sdcc_banked_ret
                                    228 	.area CSEG    (CODE)
                                    229 	.area CONST   (CODE)
                                    230 	.area XINIT   (CODE)
                                    231 	.area CABS    (ABS,CODE)
