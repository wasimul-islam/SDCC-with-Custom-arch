                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sqrtf
                                      6 	.optsdcc -mmcs51 --model-huge
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ldexpf
                                     12 	.globl _frexpf
                                     13 	.globl _sqrtf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'sqrtf'
                                     93 ;------------------------------------------------------------
                                     94 ;x                         Allocated to registers r4 r5 r6 r7 
                                     95 ;f                         Allocated to stack - _bp +5
                                     96 ;y                         Allocated to registers r4 r5 r6 r7 
                                     97 ;n                         Allocated to stack - _bp +9
                                     98 ;sloc0                     Allocated to stack - _bp +1
                                     99 ;------------------------------------------------------------
                                    100 ;	sqrtf.c:37: float sqrtf(float x) _FLOAT_FUNC_REENTRANT
                                    101 ;	-----------------------------------------
                                    102 ;	 function sqrtf
                                    103 ;	-----------------------------------------
      000000                        104 _sqrtf:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 C0*00            [24]  113 	push	_bp
      000002 85 81*00         [24]  114 	mov	_bp,sp
      000005 AC 82            [24]  115 	mov	r4,dpl
      000007 AD 83            [24]  116 	mov	r5,dph
      000009 AE F0            [24]  117 	mov	r6,b
      00000B FF               [12]  118 	mov	r7,a
      00000C E5 81            [12]  119 	mov	a,sp
      00000E 24 0A            [12]  120 	add	a,#0x0a
      000010 F5 81            [12]  121 	mov	sp,a
                                    122 ;	sqrtf.c:42: if (x==0.0) return x;
      000012 8C F0            [24]  123 	mov	b,r4
      000014 ED               [12]  124 	mov	a,r5
      000015 42 F0            [12]  125 	orl	b,a
      000017 EE               [12]  126 	mov	a,r6
      000018 42 F0            [12]  127 	orl	b,a
      00001A EF               [12]  128 	mov	a,r7
      00001B 54 7F            [12]  129 	anl	a,#0x7F
      00001D 45 F0            [12]  130 	orl	a,b
      00001F 70 0A            [24]  131 	jnz	00107$
      000021 8C 82            [24]  132 	mov	dpl,r4
      000023 8D 83            [24]  133 	mov	dph,r5
      000025 8E F0            [24]  134 	mov	b,r6
      000027 EF               [12]  135 	mov	a,r7
      000028 02r02r8A         [24]  136 	ljmp	00111$
      00002B                        137 00107$:
                                    138 ;	sqrtf.c:43: else if (x==1.0) return 1.0;
      00002B C0 07            [24]  139 	push	ar7
      00002D C0 06            [24]  140 	push	ar6
      00002F C0 05            [24]  141 	push	ar5
      000031 C0 04            [24]  142 	push	ar4
      000033 E4               [12]  143 	clr	a
      000034 C0 E0            [24]  144 	push	acc
      000036 C0 E0            [24]  145 	push	acc
      000038 74 80            [12]  146 	mov	a,#0x80
      00003A C0 E0            [24]  147 	push	acc
      00003C 74 3F            [12]  148 	mov	a,#0x3f
      00003E C0 E0            [24]  149 	push	acc
      000040 8C 82            [24]  150 	mov	dpl,r4
      000042 8D 83            [24]  151 	mov	dph,r5
      000044 8E F0            [24]  152 	mov	b,r6
      000046 EF               [12]  153 	mov	a,r7
      000047 12r00r00         [24]  154 	lcall	___fseq
      00004A AB 82            [24]  155 	mov	r3,dpl
      00004C E5 81            [12]  156 	mov	a,sp
      00004E 24 FC            [12]  157 	add	a,#0xfc
      000050 F5 81            [12]  158 	mov	sp,a
      000052 D0 04            [24]  159 	pop	ar4
      000054 D0 05            [24]  160 	pop	ar5
      000056 D0 06            [24]  161 	pop	ar6
      000058 D0 07            [24]  162 	pop	ar7
      00005A EB               [12]  163 	mov	a,r3
      00005B 60 0B            [24]  164 	jz	00104$
      00005D 90 00 00         [24]  165 	mov	dptr,#0x0000
      000060 75 F0 80         [24]  166 	mov	b,#0x80
      000063 74 3F            [12]  167 	mov	a,#0x3f
      000065 02r02r8A         [24]  168 	ljmp	00111$
      000068                        169 00104$:
                                    170 ;	sqrtf.c:44: else if (x<0.0)
      000068 C0 07            [24]  171 	push	ar7
      00006A C0 06            [24]  172 	push	ar6
      00006C C0 05            [24]  173 	push	ar5
      00006E C0 04            [24]  174 	push	ar4
      000070 E4               [12]  175 	clr	a
      000071 C0 E0            [24]  176 	push	acc
      000073 C0 E0            [24]  177 	push	acc
      000075 C0 E0            [24]  178 	push	acc
      000077 C0 E0            [24]  179 	push	acc
      000079 8C 82            [24]  180 	mov	dpl,r4
      00007B 8D 83            [24]  181 	mov	dph,r5
      00007D 8E F0            [24]  182 	mov	b,r6
      00007F EF               [12]  183 	mov	a,r7
      000080 12r00r00         [24]  184 	lcall	___fslt
      000083 AB 82            [24]  185 	mov	r3,dpl
      000085 E5 81            [12]  186 	mov	a,sp
      000087 24 FC            [12]  187 	add	a,#0xfc
      000089 F5 81            [12]  188 	mov	sp,a
      00008B D0 04            [24]  189 	pop	ar4
      00008D D0 05            [24]  190 	pop	ar5
      00008F D0 06            [24]  191 	pop	ar6
      000091 D0 07            [24]  192 	pop	ar7
      000093 EB               [12]  193 	mov	a,r3
      000094 60 11            [24]  194 	jz	00108$
                                    195 ;	sqrtf.c:46: errno=EDOM;
      000096 90r00r00         [24]  196 	mov	dptr,#_errno
      000099 74 21            [12]  197 	mov	a,#0x21
      00009B F0               [24]  198 	movx	@dptr,a
      00009C E4               [12]  199 	clr	a
      00009D A3               [24]  200 	inc	dptr
      00009E F0               [24]  201 	movx	@dptr,a
                                    202 ;	sqrtf.c:47: return 0.0;
      00009F 90 00 00         [24]  203 	mov	dptr,#0x0000
      0000A2 F5 F0            [12]  204 	mov	b,a
      0000A4 02r02r8A         [24]  205 	ljmp	00111$
      0000A7                        206 00108$:
                                    207 ;	sqrtf.c:49: f=frexpf(x, &n);
      0000A7 E5*00            [12]  208 	mov	a,_bp
      0000A9 24 09            [12]  209 	add	a,#0x09
      0000AB 90r00r00         [24]  210 	mov	dptr,#_frexpf_PARM_2
      0000AE F0               [24]  211 	movx	@dptr,a
      0000AF E4               [12]  212 	clr	a
      0000B0 A3               [24]  213 	inc	dptr
      0000B1 F0               [24]  214 	movx	@dptr,a
      0000B2 74 40            [12]  215 	mov	a,#0x40
      0000B4 A3               [24]  216 	inc	dptr
      0000B5 F0               [24]  217 	movx	@dptr,a
      0000B6 8C 82            [24]  218 	mov	dpl,r4
      0000B8 8D 83            [24]  219 	mov	dph,r5
      0000BA 8E F0            [24]  220 	mov	b,r6
      0000BC EF               [12]  221 	mov	a,r7
      0000BD 78r00            [12]  222 	mov	r0,#_frexpf
      0000BF 79s00            [12]  223 	mov	r1,#(_frexpf >> 8)
      0000C1 7As00            [12]  224 	mov	r2,#(_frexpf >> 16)
      0000C3 12r00r00         [24]  225 	lcall	__sdcc_banked_call
      0000C6 AC 82            [24]  226 	mov	r4,dpl
      0000C8 AD 83            [24]  227 	mov	r5,dph
      0000CA AE F0            [24]  228 	mov	r6,b
      0000CC FF               [12]  229 	mov	r7,a
      0000CD E5*00            [12]  230 	mov	a,_bp
      0000CF 24 05            [12]  231 	add	a,#0x05
      0000D1 F8               [12]  232 	mov	r0,a
      0000D2 A6 04            [24]  233 	mov	@r0,ar4
      0000D4 08               [12]  234 	inc	r0
      0000D5 A6 05            [24]  235 	mov	@r0,ar5
      0000D7 08               [12]  236 	inc	r0
      0000D8 A6 06            [24]  237 	mov	@r0,ar6
      0000DA 08               [12]  238 	inc	r0
      0000DB A6 07            [24]  239 	mov	@r0,ar7
                                    240 ;	sqrtf.c:50: y=0.41731+0.59016*f; /*Educated guess*/
      0000DD E5*00            [12]  241 	mov	a,_bp
      0000DF 24 05            [12]  242 	add	a,#0x05
      0000E1 F8               [12]  243 	mov	r0,a
      0000E2 E6               [12]  244 	mov	a,@r0
      0000E3 C0 E0            [24]  245 	push	acc
      0000E5 08               [12]  246 	inc	r0
      0000E6 E6               [12]  247 	mov	a,@r0
      0000E7 C0 E0            [24]  248 	push	acc
      0000E9 08               [12]  249 	inc	r0
      0000EA E6               [12]  250 	mov	a,@r0
      0000EB C0 E0            [24]  251 	push	acc
      0000ED 08               [12]  252 	inc	r0
      0000EE E6               [12]  253 	mov	a,@r0
      0000EF C0 E0            [24]  254 	push	acc
      0000F1 90 14 BA         [24]  255 	mov	dptr,#0x14ba
      0000F4 75 F0 17         [24]  256 	mov	b,#0x17
      0000F7 74 3F            [12]  257 	mov	a,#0x3f
      0000F9 12r00r00         [24]  258 	lcall	___fsmul
      0000FC AA 82            [24]  259 	mov	r2,dpl
      0000FE AB 83            [24]  260 	mov	r3,dph
      000100 AE F0            [24]  261 	mov	r6,b
      000102 FF               [12]  262 	mov	r7,a
      000103 E5 81            [12]  263 	mov	a,sp
      000105 24 FC            [12]  264 	add	a,#0xfc
      000107 F5 81            [12]  265 	mov	sp,a
      000109 74 A8            [12]  266 	mov	a,#0xa8
      00010B C0 E0            [24]  267 	push	acc
      00010D 04               [12]  268 	inc	a
      00010E C0 E0            [24]  269 	push	acc
      000110 74 D5            [12]  270 	mov	a,#0xd5
      000112 C0 E0            [24]  271 	push	acc
      000114 74 3E            [12]  272 	mov	a,#0x3e
      000116 C0 E0            [24]  273 	push	acc
      000118 8A 82            [24]  274 	mov	dpl,r2
      00011A 8B 83            [24]  275 	mov	dph,r3
      00011C 8E F0            [24]  276 	mov	b,r6
      00011E EF               [12]  277 	mov	a,r7
      00011F 12r00r00         [24]  278 	lcall	___fsadd
      000122 A8*00            [24]  279 	mov	r0,_bp
      000124 08               [12]  280 	inc	r0
      000125 A6 82            [24]  281 	mov	@r0,dpl
      000127 08               [12]  282 	inc	r0
      000128 A6 83            [24]  283 	mov	@r0,dph
      00012A 08               [12]  284 	inc	r0
      00012B A6 F0            [24]  285 	mov	@r0,b
      00012D 08               [12]  286 	inc	r0
      00012E F6               [12]  287 	mov	@r0,a
      00012F E5 81            [12]  288 	mov	a,sp
      000131 24 FC            [12]  289 	add	a,#0xfc
      000133 F5 81            [12]  290 	mov	sp,a
                                    291 ;	sqrtf.c:52: y+=f/y;
      000135 A8*00            [24]  292 	mov	r0,_bp
      000137 08               [12]  293 	inc	r0
      000138 E6               [12]  294 	mov	a,@r0
      000139 C0 E0            [24]  295 	push	acc
      00013B 08               [12]  296 	inc	r0
      00013C E6               [12]  297 	mov	a,@r0
      00013D C0 E0            [24]  298 	push	acc
      00013F 08               [12]  299 	inc	r0
      000140 E6               [12]  300 	mov	a,@r0
      000141 C0 E0            [24]  301 	push	acc
      000143 08               [12]  302 	inc	r0
      000144 E6               [12]  303 	mov	a,@r0
      000145 C0 E0            [24]  304 	push	acc
      000147 E5*00            [12]  305 	mov	a,_bp
      000149 24 05            [12]  306 	add	a,#0x05
      00014B F8               [12]  307 	mov	r0,a
      00014C 86 82            [24]  308 	mov	dpl,@r0
      00014E 08               [12]  309 	inc	r0
      00014F 86 83            [24]  310 	mov	dph,@r0
      000151 08               [12]  311 	inc	r0
      000152 86 F0            [24]  312 	mov	b,@r0
      000154 08               [12]  313 	inc	r0
      000155 E6               [12]  314 	mov	a,@r0
      000156 12r00r00         [24]  315 	lcall	___fsdiv
      000159 AA 82            [24]  316 	mov	r2,dpl
      00015B AB 83            [24]  317 	mov	r3,dph
      00015D AE F0            [24]  318 	mov	r6,b
      00015F FF               [12]  319 	mov	r7,a
      000160 E5 81            [12]  320 	mov	a,sp
      000162 24 FC            [12]  321 	add	a,#0xfc
      000164 F5 81            [12]  322 	mov	sp,a
      000166 C0 02            [24]  323 	push	ar2
      000168 C0 03            [24]  324 	push	ar3
      00016A C0 06            [24]  325 	push	ar6
      00016C C0 07            [24]  326 	push	ar7
      00016E A8*00            [24]  327 	mov	r0,_bp
      000170 08               [12]  328 	inc	r0
      000171 86 82            [24]  329 	mov	dpl,@r0
      000173 08               [12]  330 	inc	r0
      000174 86 83            [24]  331 	mov	dph,@r0
      000176 08               [12]  332 	inc	r0
      000177 86 F0            [24]  333 	mov	b,@r0
      000179 08               [12]  334 	inc	r0
      00017A E6               [12]  335 	mov	a,@r0
      00017B 12r00r00         [24]  336 	lcall	___fsadd
      00017E AC 82            [24]  337 	mov	r4,dpl
      000180 AD 83            [24]  338 	mov	r5,dph
      000182 AE F0            [24]  339 	mov	r6,b
      000184 FF               [12]  340 	mov	r7,a
      000185 E5 81            [12]  341 	mov	a,sp
      000187 24 FC            [12]  342 	add	a,#0xfc
      000189 F5 81            [12]  343 	mov	sp,a
                                    344 ;	sqrtf.c:53: y=ldexpf(y, -2) + f/y; /*Faster version of 0.25 * y + f/y*/
      00018B 90r00r00         [24]  345 	mov	dptr,#_ldexpf_PARM_2
      00018E 74 FE            [12]  346 	mov	a,#0xfe
      000190 F0               [24]  347 	movx	@dptr,a
      000191 04               [12]  348 	inc	a
      000192 A3               [24]  349 	inc	dptr
      000193 F0               [24]  350 	movx	@dptr,a
      000194 8C 82            [24]  351 	mov	dpl,r4
      000196 8D 83            [24]  352 	mov	dph,r5
      000198 8E F0            [24]  353 	mov	b,r6
      00019A EF               [12]  354 	mov	a,r7
      00019B C0 07            [24]  355 	push	ar7
      00019D C0 06            [24]  356 	push	ar6
      00019F C0 05            [24]  357 	push	ar5
      0001A1 C0 04            [24]  358 	push	ar4
      0001A3 78r00            [12]  359 	mov	r0,#_ldexpf
      0001A5 79s00            [12]  360 	mov	r1,#(_ldexpf >> 8)
      0001A7 7As00            [12]  361 	mov	r2,#(_ldexpf >> 16)
      0001A9 12r00r00         [24]  362 	lcall	__sdcc_banked_call
      0001AC A8*00            [24]  363 	mov	r0,_bp
      0001AE 08               [12]  364 	inc	r0
      0001AF A6 82            [24]  365 	mov	@r0,dpl
      0001B1 08               [12]  366 	inc	r0
      0001B2 A6 83            [24]  367 	mov	@r0,dph
      0001B4 08               [12]  368 	inc	r0
      0001B5 A6 F0            [24]  369 	mov	@r0,b
      0001B7 08               [12]  370 	inc	r0
      0001B8 F6               [12]  371 	mov	@r0,a
      0001B9 D0 04            [24]  372 	pop	ar4
      0001BB D0 05            [24]  373 	pop	ar5
      0001BD D0 06            [24]  374 	pop	ar6
      0001BF D0 07            [24]  375 	pop	ar7
      0001C1 C0 04            [24]  376 	push	ar4
      0001C3 C0 05            [24]  377 	push	ar5
      0001C5 C0 06            [24]  378 	push	ar6
      0001C7 C0 07            [24]  379 	push	ar7
      0001C9 E5*00            [12]  380 	mov	a,_bp
      0001CB 24 05            [12]  381 	add	a,#0x05
      0001CD F8               [12]  382 	mov	r0,a
      0001CE 86 82            [24]  383 	mov	dpl,@r0
      0001D0 08               [12]  384 	inc	r0
      0001D1 86 83            [24]  385 	mov	dph,@r0
      0001D3 08               [12]  386 	inc	r0
      0001D4 86 F0            [24]  387 	mov	b,@r0
      0001D6 08               [12]  388 	inc	r0
      0001D7 E6               [12]  389 	mov	a,@r0
      0001D8 12r00r00         [24]  390 	lcall	___fsdiv
      0001DB AC 82            [24]  391 	mov	r4,dpl
      0001DD AD 83            [24]  392 	mov	r5,dph
      0001DF AE F0            [24]  393 	mov	r6,b
      0001E1 FF               [12]  394 	mov	r7,a
      0001E2 E5 81            [12]  395 	mov	a,sp
      0001E4 24 FC            [12]  396 	add	a,#0xfc
      0001E6 F5 81            [12]  397 	mov	sp,a
      0001E8 C0 04            [24]  398 	push	ar4
      0001EA C0 05            [24]  399 	push	ar5
      0001EC C0 06            [24]  400 	push	ar6
      0001EE C0 07            [24]  401 	push	ar7
      0001F0 A8*00            [24]  402 	mov	r0,_bp
      0001F2 08               [12]  403 	inc	r0
      0001F3 86 82            [24]  404 	mov	dpl,@r0
      0001F5 08               [12]  405 	inc	r0
      0001F6 86 83            [24]  406 	mov	dph,@r0
      0001F8 08               [12]  407 	inc	r0
      0001F9 86 F0            [24]  408 	mov	b,@r0
      0001FB 08               [12]  409 	inc	r0
      0001FC E6               [12]  410 	mov	a,@r0
      0001FD 12r00r00         [24]  411 	lcall	___fsadd
      000200 AC 82            [24]  412 	mov	r4,dpl
      000202 AD 83            [24]  413 	mov	r5,dph
      000204 AE F0            [24]  414 	mov	r6,b
      000206 FF               [12]  415 	mov	r7,a
      000207 E5 81            [12]  416 	mov	a,sp
      000209 24 FC            [12]  417 	add	a,#0xfc
      00020B F5 81            [12]  418 	mov	sp,a
                                    419 ;	sqrtf.c:55: if (n&1)
      00020D E5*00            [12]  420 	mov	a,_bp
      00020F 24 09            [12]  421 	add	a,#0x09
      000211 F8               [12]  422 	mov	r0,a
      000212 E6               [12]  423 	mov	a,@r0
      000213 30 E0 2B         [24]  424 	jnb	acc.0,00110$
                                    425 ;	sqrtf.c:57: y*=0.7071067812;
      000216 C0 04            [24]  426 	push	ar4
      000218 C0 05            [24]  427 	push	ar5
      00021A C0 06            [24]  428 	push	ar6
      00021C C0 07            [24]  429 	push	ar7
      00021E 90 04 F3         [24]  430 	mov	dptr,#0x04f3
      000221 75 F0 35         [24]  431 	mov	b,#0x35
      000224 74 3F            [12]  432 	mov	a,#0x3f
      000226 12r00r00         [24]  433 	lcall	___fsmul
      000229 AC 82            [24]  434 	mov	r4,dpl
      00022B AD 83            [24]  435 	mov	r5,dph
      00022D AE F0            [24]  436 	mov	r6,b
      00022F FF               [12]  437 	mov	r7,a
      000230 E5 81            [12]  438 	mov	a,sp
      000232 24 FC            [12]  439 	add	a,#0xfc
      000234 F5 81            [12]  440 	mov	sp,a
                                    441 ;	sqrtf.c:58: ++n;
      000236 E5*00            [12]  442 	mov	a,_bp
      000238 24 09            [12]  443 	add	a,#0x09
      00023A F8               [12]  444 	mov	r0,a
      00023B 06               [12]  445 	inc	@r0
      00023C B6 00 02         [24]  446 	cjne	@r0,#0x00,00137$
      00023F 08               [12]  447 	inc	r0
      000240 06               [12]  448 	inc	@r0
      000241                        449 00137$:
      000241                        450 00110$:
                                    451 ;	sqrtf.c:60: return ldexpf(y, n/2);
      000241 90r00r00         [24]  452 	mov	dptr,#__divsint_PARM_2
      000244 74 02            [12]  453 	mov	a,#0x02
      000246 F0               [24]  454 	movx	@dptr,a
      000247 E4               [12]  455 	clr	a
      000248 A3               [24]  456 	inc	dptr
      000249 F0               [24]  457 	movx	@dptr,a
      00024A E5*00            [12]  458 	mov	a,_bp
      00024C 24 09            [12]  459 	add	a,#0x09
      00024E F8               [12]  460 	mov	r0,a
      00024F 86 82            [24]  461 	mov	dpl,@r0
      000251 08               [12]  462 	inc	r0
      000252 86 83            [24]  463 	mov	dph,@r0
      000254 C0 07            [24]  464 	push	ar7
      000256 C0 06            [24]  465 	push	ar6
      000258 C0 05            [24]  466 	push	ar5
      00025A C0 04            [24]  467 	push	ar4
      00025C 12r00r00         [24]  468 	lcall	__divsint
      00025F AA 82            [24]  469 	mov	r2,dpl
      000261 AB 83            [24]  470 	mov	r3,dph
      000263 D0 04            [24]  471 	pop	ar4
      000265 D0 05            [24]  472 	pop	ar5
      000267 D0 06            [24]  473 	pop	ar6
      000269 D0 07            [24]  474 	pop	ar7
      00026B 90r00r00         [24]  475 	mov	dptr,#_ldexpf_PARM_2
      00026E EA               [12]  476 	mov	a,r2
      00026F F0               [24]  477 	movx	@dptr,a
      000270 EB               [12]  478 	mov	a,r3
      000271 A3               [24]  479 	inc	dptr
      000272 F0               [24]  480 	movx	@dptr,a
      000273 8C 82            [24]  481 	mov	dpl,r4
      000275 8D 83            [24]  482 	mov	dph,r5
      000277 8E F0            [24]  483 	mov	b,r6
      000279 EF               [12]  484 	mov	a,r7
      00027A 78r00            [12]  485 	mov	r0,#_ldexpf
      00027C 79s00            [12]  486 	mov	r1,#(_ldexpf >> 8)
      00027E 7As00            [12]  487 	mov	r2,#(_ldexpf >> 16)
      000280 12r00r00         [24]  488 	lcall	__sdcc_banked_call
      000283 AC 82            [24]  489 	mov	r4,dpl
      000285 AD 83            [24]  490 	mov	r5,dph
      000287 AE F0            [24]  491 	mov	r6,b
      000289 FF               [12]  492 	mov	r7,a
      00028A                        493 00111$:
                                    494 ;	sqrtf.c:61: }
      00028A 85*00 81         [24]  495 	mov	sp,_bp
      00028D D0*00            [24]  496 	pop	_bp
      00028F 02r00r00         [24]  497 	ljmp	__sdcc_banked_ret
                                    498 	.area CSEG    (CODE)
                                    499 	.area CONST   (CODE)
                                    500 	.area XINIT   (CODE)
                                    501 	.area CABS    (ABS,CODE)
