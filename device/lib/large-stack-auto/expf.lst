                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module expf
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ldexpf
                                     12 	.globl _expf
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'expf'
                                    106 ;------------------------------------------------------------
                                    107 ;x                         Allocated to registers r4 r5 r6 r7 
                                    108 ;n                         Allocated to registers r2 r3 
                                    109 ;xn                        Allocated to stack - _bp +5
                                    110 ;g                         Allocated to stack - _bp +9
                                    111 ;r                         Allocated to registers r4 r5 r6 r7 
                                    112 ;z                         Allocated to stack - _bp +13
                                    113 ;y                         Allocated to stack - _bp +17
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;------------------------------------------------------------
                                    117 ;	expf.c:331: float expf(float x) _FLOAT_FUNC_REENTRANT
                                    118 ;	-----------------------------------------
                                    119 ;	 function expf
                                    120 ;	-----------------------------------------
      000000                        121 _expf:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 C0*00            [24]  130 	push	_bp
      000002 85 81*00         [24]  131 	mov	_bp,sp
      000005 AC 82            [24]  132 	mov	r4,dpl
      000007 AD 83            [24]  133 	mov	r5,dph
      000009 AE F0            [24]  134 	mov	r6,b
      00000B FF               [12]  135 	mov	r7,a
      00000C E5 81            [12]  136 	mov	a,sp
      00000E 24 14            [12]  137 	add	a,#0x14
      000010 F5 81            [12]  138 	mov	sp,a
                                    139 ;	expf.c:337: if(x>=0.0)
      000012 C0 07            [24]  140 	push	ar7
      000014 C0 06            [24]  141 	push	ar6
      000016 C0 05            [24]  142 	push	ar5
      000018 C0 04            [24]  143 	push	ar4
      00001A E4               [12]  144 	clr	a
      00001B C0 E0            [24]  145 	push	acc
      00001D C0 E0            [24]  146 	push	acc
      00001F C0 E0            [24]  147 	push	acc
      000021 C0 E0            [24]  148 	push	acc
      000023 8C 82            [24]  149 	mov	dpl,r4
      000025 8D 83            [24]  150 	mov	dph,r5
      000027 8E F0            [24]  151 	mov	b,r6
      000029 EF               [12]  152 	mov	a,r7
      00002A 12r00r00         [24]  153 	lcall	___fslt
      00002D E5 81            [12]  154 	mov	a,sp
      00002F 24 FC            [12]  155 	add	a,#0xfc
      000031 F5 81            [12]  156 	mov	sp,a
      000033 D0 04            [24]  157 	pop	ar4
      000035 D0 05            [24]  158 	pop	ar5
      000037 D0 06            [24]  159 	pop	ar6
      000039 D0 07            [24]  160 	pop	ar7
      00003B E5 82            [12]  161 	mov	a,dpl
      00003D 24 FF            [12]  162 	add	a,#0xff
      00003F 92*00            [24]  163 	mov	b0,c
      000041 40 14            [24]  164 	jc	00102$
                                    165 ;	expf.c:338: { y=x;  sign=0; }
      000043 E5*00            [12]  166 	mov	a,_bp
      000045 24 11            [12]  167 	add	a,#0x11
      000047 F8               [12]  168 	mov	r0,a
      000048 A6 04            [24]  169 	mov	@r0,ar4
      00004A 08               [12]  170 	inc	r0
      00004B A6 05            [24]  171 	mov	@r0,ar5
      00004D 08               [12]  172 	inc	r0
      00004E A6 06            [24]  173 	mov	@r0,ar6
      000050 08               [12]  174 	inc	r0
      000051 A6 07            [24]  175 	mov	@r0,ar7
                                    176 ;	assignBit
      000053 C2*00            [12]  177 	clr	b0
      000055 80 16            [24]  178 	sjmp	00103$
      000057                        179 00102$:
                                    180 ;	expf.c:340: { y=-x; sign=1; }
      000057 EF               [12]  181 	mov	a,r7
      000058 B2 E7            [12]  182 	cpl	acc.7
      00005A FF               [12]  183 	mov	r7,a
      00005B E5*00            [12]  184 	mov	a,_bp
      00005D 24 11            [12]  185 	add	a,#0x11
      00005F F8               [12]  186 	mov	r0,a
      000060 A6 04            [24]  187 	mov	@r0,ar4
      000062 08               [12]  188 	inc	r0
      000063 A6 05            [24]  189 	mov	@r0,ar5
      000065 08               [12]  190 	inc	r0
      000066 A6 06            [24]  191 	mov	@r0,ar6
      000068 08               [12]  192 	inc	r0
      000069 A6 07            [24]  193 	mov	@r0,ar7
                                    194 ;	assignBit
      00006B D2*00            [12]  195 	setb	b0
      00006D                        196 00103$:
                                    197 ;	expf.c:342: if(y<EXPEPS) return 1.0;
      00006D C0*00            [24]  198 	push	bits
      00006F 74 95            [12]  199 	mov	a,#0x95
      000071 C0 E0            [24]  200 	push	acc
      000073 74 BF            [12]  201 	mov	a,#0xbf
      000075 C0 E0            [24]  202 	push	acc
      000077 74 D6            [12]  203 	mov	a,#0xd6
      000079 C0 E0            [24]  204 	push	acc
      00007B 74 33            [12]  205 	mov	a,#0x33
      00007D C0 E0            [24]  206 	push	acc
      00007F E5*00            [12]  207 	mov	a,_bp
      000081 24 11            [12]  208 	add	a,#0x11
      000083 F8               [12]  209 	mov	r0,a
      000084 86 82            [24]  210 	mov	dpl,@r0
      000086 08               [12]  211 	inc	r0
      000087 86 83            [24]  212 	mov	dph,@r0
      000089 08               [12]  213 	inc	r0
      00008A 86 F0            [24]  214 	mov	b,@r0
      00008C 08               [12]  215 	inc	r0
      00008D E6               [12]  216 	mov	a,@r0
      00008E 12r00r00         [24]  217 	lcall	___fslt
      000091 AD 82            [24]  218 	mov	r5,dpl
      000093 E5 81            [12]  219 	mov	a,sp
      000095 24 FC            [12]  220 	add	a,#0xfc
      000097 F5 81            [12]  221 	mov	sp,a
      000099 D0*00            [24]  222 	pop	bits
      00009B ED               [12]  223 	mov	a,r5
      00009C 60 0B            [24]  224 	jz	00105$
      00009E 90 00 00         [24]  225 	mov	dptr,#0x0000
      0000A1 75 F0 80         [24]  226 	mov	b,#0x80
      0000A4 74 3F            [12]  227 	mov	a,#0x3f
      0000A6 02r04rB7         [24]  228 	ljmp	00118$
      0000A9                        229 00105$:
                                    230 ;	expf.c:344: if(y>BIGX)
      0000A9 C0*00            [24]  231 	push	bits
      0000AB E5*00            [12]  232 	mov	a,_bp
      0000AD 24 11            [12]  233 	add	a,#0x11
      0000AF F8               [12]  234 	mov	r0,a
      0000B0 E6               [12]  235 	mov	a,@r0
      0000B1 C0 E0            [24]  236 	push	acc
      0000B3 08               [12]  237 	inc	r0
      0000B4 E6               [12]  238 	mov	a,@r0
      0000B5 C0 E0            [24]  239 	push	acc
      0000B7 08               [12]  240 	inc	r0
      0000B8 E6               [12]  241 	mov	a,@r0
      0000B9 C0 E0            [24]  242 	push	acc
      0000BB 08               [12]  243 	inc	r0
      0000BC E6               [12]  244 	mov	a,@r0
      0000BD C0 E0            [24]  245 	push	acc
      0000BF 90 72 18         [24]  246 	mov	dptr,#0x7218
      0000C2 75 F0 B1         [24]  247 	mov	b,#0xb1
      0000C5 74 42            [12]  248 	mov	a,#0x42
      0000C7 12r00r00         [24]  249 	lcall	___fslt
      0000CA AD 82            [24]  250 	mov	r5,dpl
      0000CC E5 81            [12]  251 	mov	a,sp
      0000CE 24 FC            [12]  252 	add	a,#0xfc
      0000D0 F5 81            [12]  253 	mov	sp,a
      0000D2 D0*00            [24]  254 	pop	bits
      0000D4 ED               [12]  255 	mov	a,r5
      0000D5 60 1F            [24]  256 	jz	00110$
                                    257 ;	expf.c:346: if(sign)
      0000D7 30*00 13         [24]  258 	jnb	b0,00107$
                                    259 ;	expf.c:348: errno=ERANGE;
      0000DA 90r00r00         [24]  260 	mov	dptr,#_errno
      0000DD 74 22            [12]  261 	mov	a,#0x22
      0000DF F0               [24]  262 	movx	@dptr,a
      0000E0 E4               [12]  263 	clr	a
      0000E1 A3               [24]  264 	inc	dptr
      0000E2 F0               [24]  265 	movx	@dptr,a
                                    266 ;	expf.c:350: ;
      0000E3 90 FF FF         [24]  267 	mov	dptr,#0xffff
      0000E6 74 7F            [12]  268 	mov	a,#0x7f
      0000E8 F5 F0            [12]  269 	mov	b,a
      0000EA 02r04rB7         [24]  270 	ljmp	00118$
      0000ED                        271 00107$:
                                    272 ;	expf.c:354: return 0.0;
      0000ED 90 00 00         [24]  273 	mov	dptr,#(0x00&0x00ff)
      0000F0 E4               [12]  274 	clr	a
      0000F1 F5 F0            [12]  275 	mov	b,a
      0000F3 02r04rB7         [24]  276 	ljmp	00118$
      0000F6                        277 00110$:
                                    278 ;	expf.c:358: z=y*K1;
      0000F6 C0*00            [24]  279 	push	bits
      0000F8 E5*00            [12]  280 	mov	a,_bp
      0000FA 24 11            [12]  281 	add	a,#0x11
      0000FC F8               [12]  282 	mov	r0,a
      0000FD E6               [12]  283 	mov	a,@r0
      0000FE C0 E0            [24]  284 	push	acc
      000100 08               [12]  285 	inc	r0
      000101 E6               [12]  286 	mov	a,@r0
      000102 C0 E0            [24]  287 	push	acc
      000104 08               [12]  288 	inc	r0
      000105 E6               [12]  289 	mov	a,@r0
      000106 C0 E0            [24]  290 	push	acc
      000108 08               [12]  291 	inc	r0
      000109 E6               [12]  292 	mov	a,@r0
      00010A C0 E0            [24]  293 	push	acc
      00010C 90 AA 3B         [24]  294 	mov	dptr,#0xaa3b
      00010F 75 F0 B8         [24]  295 	mov	b,#0xb8
      000112 74 3F            [12]  296 	mov	a,#0x3f
      000114 12r00r00         [24]  297 	lcall	___fsmul
      000117 A8*00            [24]  298 	mov	r0,_bp
      000119 08               [12]  299 	inc	r0
      00011A A6 82            [24]  300 	mov	@r0,dpl
      00011C 08               [12]  301 	inc	r0
      00011D A6 83            [24]  302 	mov	@r0,dph
      00011F 08               [12]  303 	inc	r0
      000120 A6 F0            [24]  304 	mov	@r0,b
      000122 08               [12]  305 	inc	r0
      000123 F6               [12]  306 	mov	@r0,a
      000124 E5 81            [12]  307 	mov	a,sp
      000126 24 FC            [12]  308 	add	a,#0xfc
      000128 F5 81            [12]  309 	mov	sp,a
      00012A D0*00            [24]  310 	pop	bits
                                    311 ;	expf.c:359: n=z;
      00012C A8*00            [24]  312 	mov	r0,_bp
      00012E 08               [12]  313 	inc	r0
      00012F 86 82            [24]  314 	mov	dpl,@r0
      000131 08               [12]  315 	inc	r0
      000132 86 83            [24]  316 	mov	dph,@r0
      000134 08               [12]  317 	inc	r0
      000135 86 F0            [24]  318 	mov	b,@r0
      000137 08               [12]  319 	inc	r0
      000138 E6               [12]  320 	mov	a,@r0
      000139 C0*00            [24]  321 	push	bits
      00013B 12r00r00         [24]  322 	lcall	___fs2sint
      00013E AA 82            [24]  323 	mov	r2,dpl
      000140 AB 83            [24]  324 	mov	r3,dph
      000142 D0*00            [24]  325 	pop	bits
                                    326 ;	expf.c:361: if(n<0) --n;
      000144 EB               [12]  327 	mov	a,r3
      000145 30 E7 05         [24]  328 	jnb	acc.7,00112$
      000148 1A               [12]  329 	dec	r2
      000149 BA FF 01         [24]  330 	cjne	r2,#0xff,00160$
      00014C 1B               [12]  331 	dec	r3
      00014D                        332 00160$:
      00014D                        333 00112$:
                                    334 ;	expf.c:362: if(z-n>=0.5) ++n;
      00014D 8A 82            [24]  335 	mov	dpl,r2
      00014F 8B 83            [24]  336 	mov	dph,r3
      000151 C0 03            [24]  337 	push	ar3
      000153 C0 02            [24]  338 	push	ar2
      000155 C0*00            [24]  339 	push	bits
      000157 12r00r00         [24]  340 	lcall	___sint2fs
      00015A AC 82            [24]  341 	mov	r4,dpl
      00015C AD 83            [24]  342 	mov	r5,dph
      00015E AE F0            [24]  343 	mov	r6,b
      000160 FF               [12]  344 	mov	r7,a
      000161 D0*00            [24]  345 	pop	bits
      000163 C0*00            [24]  346 	push	bits
      000165 C0 04            [24]  347 	push	ar4
      000167 C0 05            [24]  348 	push	ar5
      000169 C0 06            [24]  349 	push	ar6
      00016B C0 07            [24]  350 	push	ar7
      00016D A8*00            [24]  351 	mov	r0,_bp
      00016F 08               [12]  352 	inc	r0
      000170 86 82            [24]  353 	mov	dpl,@r0
      000172 08               [12]  354 	inc	r0
      000173 86 83            [24]  355 	mov	dph,@r0
      000175 08               [12]  356 	inc	r0
      000176 86 F0            [24]  357 	mov	b,@r0
      000178 08               [12]  358 	inc	r0
      000179 E6               [12]  359 	mov	a,@r0
      00017A 12r00r00         [24]  360 	lcall	___fssub
      00017D AC 82            [24]  361 	mov	r4,dpl
      00017F AD 83            [24]  362 	mov	r5,dph
      000181 AE F0            [24]  363 	mov	r6,b
      000183 FF               [12]  364 	mov	r7,a
      000184 E5 81            [12]  365 	mov	a,sp
      000186 24 FC            [12]  366 	add	a,#0xfc
      000188 F5 81            [12]  367 	mov	sp,a
      00018A D0*00            [24]  368 	pop	bits
      00018C C0*00            [24]  369 	push	bits
      00018E E4               [12]  370 	clr	a
      00018F C0 E0            [24]  371 	push	acc
      000191 C0 E0            [24]  372 	push	acc
      000193 C0 E0            [24]  373 	push	acc
      000195 74 3F            [12]  374 	mov	a,#0x3f
      000197 C0 E0            [24]  375 	push	acc
      000199 8C 82            [24]  376 	mov	dpl,r4
      00019B 8D 83            [24]  377 	mov	dph,r5
      00019D 8E F0            [24]  378 	mov	b,r6
      00019F EF               [12]  379 	mov	a,r7
      0001A0 12r00r00         [24]  380 	lcall	___fslt
      0001A3 E5 81            [12]  381 	mov	a,sp
      0001A5 24 FC            [12]  382 	add	a,#0xfc
      0001A7 F5 81            [12]  383 	mov	sp,a
      0001A9 D0*00            [24]  384 	pop	bits
      0001AB D0 02            [24]  385 	pop	ar2
      0001AD D0 03            [24]  386 	pop	ar3
      0001AF E5 82            [12]  387 	mov	a,dpl
      0001B1 24 FF            [12]  388 	add	a,#0xff
      0001B3 92*00            [24]  389 	mov	b1,c
      0001B5 40 05            [24]  390 	jc	00114$
      0001B7 0A               [12]  391 	inc	r2
      0001B8 BA 00 01         [24]  392 	cjne	r2,#0x00,00162$
      0001BB 0B               [12]  393 	inc	r3
      0001BC                        394 00162$:
      0001BC                        395 00114$:
                                    396 ;	expf.c:363: xn=n;
      0001BC 8A 82            [24]  397 	mov	dpl,r2
      0001BE 8B 83            [24]  398 	mov	dph,r3
      0001C0 C0 03            [24]  399 	push	ar3
      0001C2 C0 02            [24]  400 	push	ar2
      0001C4 C0*00            [24]  401 	push	bits
      0001C6 12r00r00         [24]  402 	lcall	___sint2fs
      0001C9 AC 82            [24]  403 	mov	r4,dpl
      0001CB AD 83            [24]  404 	mov	r5,dph
      0001CD AE F0            [24]  405 	mov	r6,b
      0001CF FF               [12]  406 	mov	r7,a
      0001D0 D0*00            [24]  407 	pop	bits
      0001D2 E5*00            [12]  408 	mov	a,_bp
      0001D4 24 05            [12]  409 	add	a,#0x05
      0001D6 F8               [12]  410 	mov	r0,a
      0001D7 A6 04            [24]  411 	mov	@r0,ar4
      0001D9 08               [12]  412 	inc	r0
      0001DA A6 05            [24]  413 	mov	@r0,ar5
      0001DC 08               [12]  414 	inc	r0
      0001DD A6 06            [24]  415 	mov	@r0,ar6
      0001DF 08               [12]  416 	inc	r0
      0001E0 A6 07            [24]  417 	mov	@r0,ar7
                                    418 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      0001E2 C0*00            [24]  419 	push	bits
      0001E4 E5*00            [12]  420 	mov	a,_bp
      0001E6 24 05            [12]  421 	add	a,#0x05
      0001E8 F8               [12]  422 	mov	r0,a
      0001E9 E6               [12]  423 	mov	a,@r0
      0001EA C0 E0            [24]  424 	push	acc
      0001EC 08               [12]  425 	inc	r0
      0001ED E6               [12]  426 	mov	a,@r0
      0001EE C0 E0            [24]  427 	push	acc
      0001F0 08               [12]  428 	inc	r0
      0001F1 E6               [12]  429 	mov	a,@r0
      0001F2 C0 E0            [24]  430 	push	acc
      0001F4 08               [12]  431 	inc	r0
      0001F5 E6               [12]  432 	mov	a,@r0
      0001F6 C0 E0            [24]  433 	push	acc
      0001F8 90 80 00         [24]  434 	mov	dptr,#0x8000
      0001FB 75 F0 31         [24]  435 	mov	b,#0x31
      0001FE 74 3F            [12]  436 	mov	a,#0x3f
      000200 12r00r00         [24]  437 	lcall	___fsmul
      000203 AC 82            [24]  438 	mov	r4,dpl
      000205 AD 83            [24]  439 	mov	r5,dph
      000207 AE F0            [24]  440 	mov	r6,b
      000209 FF               [12]  441 	mov	r7,a
      00020A E5 81            [12]  442 	mov	a,sp
      00020C 24 FC            [12]  443 	add	a,#0xfc
      00020E F5 81            [12]  444 	mov	sp,a
      000210 D0*00            [24]  445 	pop	bits
      000212 C0*00            [24]  446 	push	bits
      000214 C0 04            [24]  447 	push	ar4
      000216 C0 05            [24]  448 	push	ar5
      000218 C0 06            [24]  449 	push	ar6
      00021A C0 07            [24]  450 	push	ar7
      00021C E5*00            [12]  451 	mov	a,_bp
      00021E 24 11            [12]  452 	add	a,#0x11
      000220 F8               [12]  453 	mov	r0,a
      000221 86 82            [24]  454 	mov	dpl,@r0
      000223 08               [12]  455 	inc	r0
      000224 86 83            [24]  456 	mov	dph,@r0
      000226 08               [12]  457 	inc	r0
      000227 86 F0            [24]  458 	mov	b,@r0
      000229 08               [12]  459 	inc	r0
      00022A E6               [12]  460 	mov	a,@r0
      00022B 12r00r00         [24]  461 	lcall	___fssub
      00022E A8*00            [24]  462 	mov	r0,_bp
      000230 08               [12]  463 	inc	r0
      000231 A6 82            [24]  464 	mov	@r0,dpl
      000233 08               [12]  465 	inc	r0
      000234 A6 83            [24]  466 	mov	@r0,dph
      000236 08               [12]  467 	inc	r0
      000237 A6 F0            [24]  468 	mov	@r0,b
      000239 08               [12]  469 	inc	r0
      00023A F6               [12]  470 	mov	@r0,a
      00023B E5 81            [12]  471 	mov	a,sp
      00023D 24 FC            [12]  472 	add	a,#0xfc
      00023F F5 81            [12]  473 	mov	sp,a
      000241 D0*00            [24]  474 	pop	bits
      000243 C0*00            [24]  475 	push	bits
      000245 E5*00            [12]  476 	mov	a,_bp
      000247 24 05            [12]  477 	add	a,#0x05
      000249 F8               [12]  478 	mov	r0,a
      00024A E6               [12]  479 	mov	a,@r0
      00024B C0 E0            [24]  480 	push	acc
      00024D 08               [12]  481 	inc	r0
      00024E E6               [12]  482 	mov	a,@r0
      00024F C0 E0            [24]  483 	push	acc
      000251 08               [12]  484 	inc	r0
      000252 E6               [12]  485 	mov	a,@r0
      000253 C0 E0            [24]  486 	push	acc
      000255 08               [12]  487 	inc	r0
      000256 E6               [12]  488 	mov	a,@r0
      000257 C0 E0            [24]  489 	push	acc
      000259 90 80 83         [24]  490 	mov	dptr,#0x8083
      00025C 75 F0 5E         [24]  491 	mov	b,#0x5e
      00025F 74 B9            [12]  492 	mov	a,#0xb9
      000261 12r00r00         [24]  493 	lcall	___fsmul
      000264 AC 82            [24]  494 	mov	r4,dpl
      000266 AD 83            [24]  495 	mov	r5,dph
      000268 AE F0            [24]  496 	mov	r6,b
      00026A FF               [12]  497 	mov	r7,a
      00026B E5 81            [12]  498 	mov	a,sp
      00026D 24 FC            [12]  499 	add	a,#0xfc
      00026F F5 81            [12]  500 	mov	sp,a
      000271 D0*00            [24]  501 	pop	bits
      000273 C0*00            [24]  502 	push	bits
      000275 C0 04            [24]  503 	push	ar4
      000277 C0 05            [24]  504 	push	ar5
      000279 C0 06            [24]  505 	push	ar6
      00027B C0 07            [24]  506 	push	ar7
      00027D A8*00            [24]  507 	mov	r0,_bp
      00027F 08               [12]  508 	inc	r0
      000280 86 82            [24]  509 	mov	dpl,@r0
      000282 08               [12]  510 	inc	r0
      000283 86 83            [24]  511 	mov	dph,@r0
      000285 08               [12]  512 	inc	r0
      000286 86 F0            [24]  513 	mov	b,@r0
      000288 08               [12]  514 	inc	r0
      000289 E6               [12]  515 	mov	a,@r0
      00028A 12r00r00         [24]  516 	lcall	___fssub
      00028D AC 82            [24]  517 	mov	r4,dpl
      00028F AD 83            [24]  518 	mov	r5,dph
      000291 AE F0            [24]  519 	mov	r6,b
      000293 FF               [12]  520 	mov	r7,a
      000294 E5 81            [12]  521 	mov	a,sp
      000296 24 FC            [12]  522 	add	a,#0xfc
      000298 F5 81            [12]  523 	mov	sp,a
      00029A D0*00            [24]  524 	pop	bits
      00029C E5*00            [12]  525 	mov	a,_bp
      00029E 24 09            [12]  526 	add	a,#0x09
      0002A0 F8               [12]  527 	mov	r0,a
      0002A1 A6 04            [24]  528 	mov	@r0,ar4
      0002A3 08               [12]  529 	inc	r0
      0002A4 A6 05            [24]  530 	mov	@r0,ar5
      0002A6 08               [12]  531 	inc	r0
      0002A7 A6 06            [24]  532 	mov	@r0,ar6
      0002A9 08               [12]  533 	inc	r0
      0002AA A6 07            [24]  534 	mov	@r0,ar7
                                    535 ;	expf.c:365: z=g*g;
      0002AC C0*00            [24]  536 	push	bits
      0002AE E5*00            [12]  537 	mov	a,_bp
      0002B0 24 09            [12]  538 	add	a,#0x09
      0002B2 F8               [12]  539 	mov	r0,a
      0002B3 E6               [12]  540 	mov	a,@r0
      0002B4 C0 E0            [24]  541 	push	acc
      0002B6 08               [12]  542 	inc	r0
      0002B7 E6               [12]  543 	mov	a,@r0
      0002B8 C0 E0            [24]  544 	push	acc
      0002BA 08               [12]  545 	inc	r0
      0002BB E6               [12]  546 	mov	a,@r0
      0002BC C0 E0            [24]  547 	push	acc
      0002BE 08               [12]  548 	inc	r0
      0002BF E6               [12]  549 	mov	a,@r0
      0002C0 C0 E0            [24]  550 	push	acc
      0002C2 E5*00            [12]  551 	mov	a,_bp
      0002C4 24 09            [12]  552 	add	a,#0x09
      0002C6 F8               [12]  553 	mov	r0,a
      0002C7 86 82            [24]  554 	mov	dpl,@r0
      0002C9 08               [12]  555 	inc	r0
      0002CA 86 83            [24]  556 	mov	dph,@r0
      0002CC 08               [12]  557 	inc	r0
      0002CD 86 F0            [24]  558 	mov	b,@r0
      0002CF 08               [12]  559 	inc	r0
      0002D0 E6               [12]  560 	mov	a,@r0
      0002D1 12r00r00         [24]  561 	lcall	___fsmul
      0002D4 AC 82            [24]  562 	mov	r4,dpl
      0002D6 AD 83            [24]  563 	mov	r5,dph
      0002D8 AE F0            [24]  564 	mov	r6,b
      0002DA FF               [12]  565 	mov	r7,a
      0002DB E5 81            [12]  566 	mov	a,sp
      0002DD 24 FC            [12]  567 	add	a,#0xfc
      0002DF F5 81            [12]  568 	mov	sp,a
      0002E1 D0*00            [24]  569 	pop	bits
      0002E3 E5*00            [12]  570 	mov	a,_bp
      0002E5 24 0D            [12]  571 	add	a,#0x0d
      0002E7 F8               [12]  572 	mov	r0,a
      0002E8 A6 04            [24]  573 	mov	@r0,ar4
      0002EA 08               [12]  574 	inc	r0
      0002EB A6 05            [24]  575 	mov	@r0,ar5
      0002ED 08               [12]  576 	inc	r0
      0002EE A6 06            [24]  577 	mov	@r0,ar6
      0002F0 08               [12]  578 	inc	r0
      0002F1 A6 07            [24]  579 	mov	@r0,ar7
                                    580 ;	expf.c:366: r=P(z)*g;
      0002F3 C0*00            [24]  581 	push	bits
      0002F5 E5*00            [12]  582 	mov	a,_bp
      0002F7 24 0D            [12]  583 	add	a,#0x0d
      0002F9 F8               [12]  584 	mov	r0,a
      0002FA E6               [12]  585 	mov	a,@r0
      0002FB C0 E0            [24]  586 	push	acc
      0002FD 08               [12]  587 	inc	r0
      0002FE E6               [12]  588 	mov	a,@r0
      0002FF C0 E0            [24]  589 	push	acc
      000301 08               [12]  590 	inc	r0
      000302 E6               [12]  591 	mov	a,@r0
      000303 C0 E0            [24]  592 	push	acc
      000305 08               [12]  593 	inc	r0
      000306 E6               [12]  594 	mov	a,@r0
      000307 C0 E0            [24]  595 	push	acc
      000309 90 53 08         [24]  596 	mov	dptr,#0x5308
      00030C 75 F0 88         [24]  597 	mov	b,#0x88
      00030F 74 3B            [12]  598 	mov	a,#0x3b
      000311 12r00r00         [24]  599 	lcall	___fsmul
      000314 AC 82            [24]  600 	mov	r4,dpl
      000316 AD 83            [24]  601 	mov	r5,dph
      000318 AE F0            [24]  602 	mov	r6,b
      00031A FF               [12]  603 	mov	r7,a
      00031B E5 81            [12]  604 	mov	a,sp
      00031D 24 FC            [12]  605 	add	a,#0xfc
      00031F F5 81            [12]  606 	mov	sp,a
      000321 D0*00            [24]  607 	pop	bits
      000323 C0*00            [24]  608 	push	bits
      000325 E4               [12]  609 	clr	a
      000326 C0 E0            [24]  610 	push	acc
      000328 C0 E0            [24]  611 	push	acc
      00032A 74 80            [12]  612 	mov	a,#0x80
      00032C C0 E0            [24]  613 	push	acc
      00032E 74 3E            [12]  614 	mov	a,#0x3e
      000330 C0 E0            [24]  615 	push	acc
      000332 8C 82            [24]  616 	mov	dpl,r4
      000334 8D 83            [24]  617 	mov	dph,r5
      000336 8E F0            [24]  618 	mov	b,r6
      000338 EF               [12]  619 	mov	a,r7
      000339 12r00r00         [24]  620 	lcall	___fsadd
      00033C AC 82            [24]  621 	mov	r4,dpl
      00033E AD 83            [24]  622 	mov	r5,dph
      000340 AE F0            [24]  623 	mov	r6,b
      000342 FF               [12]  624 	mov	r7,a
      000343 E5 81            [12]  625 	mov	a,sp
      000345 24 FC            [12]  626 	add	a,#0xfc
      000347 F5 81            [12]  627 	mov	sp,a
      000349 D0*00            [24]  628 	pop	bits
      00034B C0*00            [24]  629 	push	bits
      00034D E5*00            [12]  630 	mov	a,_bp
      00034F 24 09            [12]  631 	add	a,#0x09
      000351 F8               [12]  632 	mov	r0,a
      000352 E6               [12]  633 	mov	a,@r0
      000353 C0 E0            [24]  634 	push	acc
      000355 08               [12]  635 	inc	r0
      000356 E6               [12]  636 	mov	a,@r0
      000357 C0 E0            [24]  637 	push	acc
      000359 08               [12]  638 	inc	r0
      00035A E6               [12]  639 	mov	a,@r0
      00035B C0 E0            [24]  640 	push	acc
      00035D 08               [12]  641 	inc	r0
      00035E E6               [12]  642 	mov	a,@r0
      00035F C0 E0            [24]  643 	push	acc
      000361 8C 82            [24]  644 	mov	dpl,r4
      000363 8D 83            [24]  645 	mov	dph,r5
      000365 8E F0            [24]  646 	mov	b,r6
      000367 EF               [12]  647 	mov	a,r7
      000368 12r00r00         [24]  648 	lcall	___fsmul
      00036B A8*00            [24]  649 	mov	r0,_bp
      00036D 08               [12]  650 	inc	r0
      00036E A6 82            [24]  651 	mov	@r0,dpl
      000370 08               [12]  652 	inc	r0
      000371 A6 83            [24]  653 	mov	@r0,dph
      000373 08               [12]  654 	inc	r0
      000374 A6 F0            [24]  655 	mov	@r0,b
      000376 08               [12]  656 	inc	r0
      000377 F6               [12]  657 	mov	@r0,a
      000378 E5 81            [12]  658 	mov	a,sp
      00037A 24 FC            [12]  659 	add	a,#0xfc
      00037C F5 81            [12]  660 	mov	sp,a
      00037E D0*00            [24]  661 	pop	bits
                                    662 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      000380 C0*00            [24]  663 	push	bits
      000382 E5*00            [12]  664 	mov	a,_bp
      000384 24 0D            [12]  665 	add	a,#0x0d
      000386 F8               [12]  666 	mov	r0,a
      000387 E6               [12]  667 	mov	a,@r0
      000388 C0 E0            [24]  668 	push	acc
      00038A 08               [12]  669 	inc	r0
      00038B E6               [12]  670 	mov	a,@r0
      00038C C0 E0            [24]  671 	push	acc
      00038E 08               [12]  672 	inc	r0
      00038F E6               [12]  673 	mov	a,@r0
      000390 C0 E0            [24]  674 	push	acc
      000392 08               [12]  675 	inc	r0
      000393 E6               [12]  676 	mov	a,@r0
      000394 C0 E0            [24]  677 	push	acc
      000396 90 BF 5B         [24]  678 	mov	dptr,#0xbf5b
      000399 75 F0 4C         [24]  679 	mov	b,#0x4c
      00039C 74 3D            [12]  680 	mov	a,#0x3d
      00039E 12r00r00         [24]  681 	lcall	___fsmul
      0003A1 AC 82            [24]  682 	mov	r4,dpl
      0003A3 AD 83            [24]  683 	mov	r5,dph
      0003A5 AE F0            [24]  684 	mov	r6,b
      0003A7 FF               [12]  685 	mov	r7,a
      0003A8 E5 81            [12]  686 	mov	a,sp
      0003AA 24 FC            [12]  687 	add	a,#0xfc
      0003AC F5 81            [12]  688 	mov	sp,a
      0003AE D0*00            [24]  689 	pop	bits
      0003B0 C0*00            [24]  690 	push	bits
      0003B2 E4               [12]  691 	clr	a
      0003B3 C0 E0            [24]  692 	push	acc
      0003B5 C0 E0            [24]  693 	push	acc
      0003B7 C0 E0            [24]  694 	push	acc
      0003B9 74 3F            [12]  695 	mov	a,#0x3f
      0003BB C0 E0            [24]  696 	push	acc
      0003BD 8C 82            [24]  697 	mov	dpl,r4
      0003BF 8D 83            [24]  698 	mov	dph,r5
      0003C1 8E F0            [24]  699 	mov	b,r6
      0003C3 EF               [12]  700 	mov	a,r7
      0003C4 12r00r00         [24]  701 	lcall	___fsadd
      0003C7 AC 82            [24]  702 	mov	r4,dpl
      0003C9 AD 83            [24]  703 	mov	r5,dph
      0003CB AE F0            [24]  704 	mov	r6,b
      0003CD FF               [12]  705 	mov	r7,a
      0003CE E5 81            [12]  706 	mov	a,sp
      0003D0 24 FC            [12]  707 	add	a,#0xfc
      0003D2 F5 81            [12]  708 	mov	sp,a
      0003D4 D0*00            [24]  709 	pop	bits
      0003D6 C0*00            [24]  710 	push	bits
      0003D8 A8*00            [24]  711 	mov	r0,_bp
      0003DA 08               [12]  712 	inc	r0
      0003DB E6               [12]  713 	mov	a,@r0
      0003DC C0 E0            [24]  714 	push	acc
      0003DE 08               [12]  715 	inc	r0
      0003DF E6               [12]  716 	mov	a,@r0
      0003E0 C0 E0            [24]  717 	push	acc
      0003E2 08               [12]  718 	inc	r0
      0003E3 E6               [12]  719 	mov	a,@r0
      0003E4 C0 E0            [24]  720 	push	acc
      0003E6 08               [12]  721 	inc	r0
      0003E7 E6               [12]  722 	mov	a,@r0
      0003E8 C0 E0            [24]  723 	push	acc
      0003EA 8C 82            [24]  724 	mov	dpl,r4
      0003EC 8D 83            [24]  725 	mov	dph,r5
      0003EE 8E F0            [24]  726 	mov	b,r6
      0003F0 EF               [12]  727 	mov	a,r7
      0003F1 12r00r00         [24]  728 	lcall	___fssub
      0003F4 AC 82            [24]  729 	mov	r4,dpl
      0003F6 AD 83            [24]  730 	mov	r5,dph
      0003F8 AE F0            [24]  731 	mov	r6,b
      0003FA FF               [12]  732 	mov	r7,a
      0003FB E5 81            [12]  733 	mov	a,sp
      0003FD 24 FC            [12]  734 	add	a,#0xfc
      0003FF F5 81            [12]  735 	mov	sp,a
      000401 D0*00            [24]  736 	pop	bits
      000403 C0*00            [24]  737 	push	bits
      000405 C0 04            [24]  738 	push	ar4
      000407 C0 05            [24]  739 	push	ar5
      000409 C0 06            [24]  740 	push	ar6
      00040B C0 07            [24]  741 	push	ar7
      00040D A8*00            [24]  742 	mov	r0,_bp
      00040F 08               [12]  743 	inc	r0
      000410 86 82            [24]  744 	mov	dpl,@r0
      000412 08               [12]  745 	inc	r0
      000413 86 83            [24]  746 	mov	dph,@r0
      000415 08               [12]  747 	inc	r0
      000416 86 F0            [24]  748 	mov	b,@r0
      000418 08               [12]  749 	inc	r0
      000419 E6               [12]  750 	mov	a,@r0
      00041A 12r00r00         [24]  751 	lcall	___fsdiv
      00041D AC 82            [24]  752 	mov	r4,dpl
      00041F AD 83            [24]  753 	mov	r5,dph
      000421 AE F0            [24]  754 	mov	r6,b
      000423 FF               [12]  755 	mov	r7,a
      000424 E5 81            [12]  756 	mov	a,sp
      000426 24 FC            [12]  757 	add	a,#0xfc
      000428 F5 81            [12]  758 	mov	sp,a
      00042A D0*00            [24]  759 	pop	bits
      00042C C0*00            [24]  760 	push	bits
      00042E E4               [12]  761 	clr	a
      00042F C0 E0            [24]  762 	push	acc
      000431 C0 E0            [24]  763 	push	acc
      000433 C0 E0            [24]  764 	push	acc
      000435 74 3F            [12]  765 	mov	a,#0x3f
      000437 C0 E0            [24]  766 	push	acc
      000439 8C 82            [24]  767 	mov	dpl,r4
      00043B 8D 83            [24]  768 	mov	dph,r5
      00043D 8E F0            [24]  769 	mov	b,r6
      00043F EF               [12]  770 	mov	a,r7
      000440 12r00r00         [24]  771 	lcall	___fsadd
      000443 AC 82            [24]  772 	mov	r4,dpl
      000445 AD 83            [24]  773 	mov	r5,dph
      000447 AE F0            [24]  774 	mov	r6,b
      000449 FF               [12]  775 	mov	r7,a
      00044A E5 81            [12]  776 	mov	a,sp
      00044C 24 FC            [12]  777 	add	a,#0xfc
      00044E F5 81            [12]  778 	mov	sp,a
      000450 D0*00            [24]  779 	pop	bits
      000452 D0 02            [24]  780 	pop	ar2
      000454 D0 03            [24]  781 	pop	ar3
                                    782 ;	expf.c:369: n++;
      000456 0A               [12]  783 	inc	r2
      000457 BA 00 01         [24]  784 	cjne	r2,#0x00,00163$
      00045A 0B               [12]  785 	inc	r3
      00045B                        786 00163$:
                                    787 ;	expf.c:370: z=ldexpf(r, n);
      00045B C0*00            [24]  788 	push	bits
      00045D C0 02            [24]  789 	push	ar2
      00045F C0 03            [24]  790 	push	ar3
      000461 8C 82            [24]  791 	mov	dpl,r4
      000463 8D 83            [24]  792 	mov	dph,r5
      000465 8E F0            [24]  793 	mov	b,r6
      000467 EF               [12]  794 	mov	a,r7
      000468 12r00r00         [24]  795 	lcall	_ldexpf
      00046B AC 82            [24]  796 	mov	r4,dpl
      00046D AD 83            [24]  797 	mov	r5,dph
      00046F AE F0            [24]  798 	mov	r6,b
      000471 FF               [12]  799 	mov	r7,a
      000472 15 81            [12]  800 	dec	sp
      000474 15 81            [12]  801 	dec	sp
      000476 D0*00            [24]  802 	pop	bits
                                    803 ;	expf.c:371: if(sign)
      000478 30*00 35         [24]  804 	jnb	b0,00116$
                                    805 ;	expf.c:372: return 1.0/z;
      00047B C0 04            [24]  806 	push	ar4
      00047D C0 05            [24]  807 	push	ar5
      00047F C0 06            [24]  808 	push	ar6
      000481 C0 07            [24]  809 	push	ar7
      000483 90 00 00         [24]  810 	mov	dptr,#0x0000
      000486 75 F0 80         [24]  811 	mov	b,#0x80
      000489 74 3F            [12]  812 	mov	a,#0x3f
      00048B 12r00r00         [24]  813 	lcall	___fsdiv
      00048E A8*00            [24]  814 	mov	r0,_bp
      000490 08               [12]  815 	inc	r0
      000491 A6 82            [24]  816 	mov	@r0,dpl
      000493 08               [12]  817 	inc	r0
      000494 A6 83            [24]  818 	mov	@r0,dph
      000496 08               [12]  819 	inc	r0
      000497 A6 F0            [24]  820 	mov	@r0,b
      000499 08               [12]  821 	inc	r0
      00049A F6               [12]  822 	mov	@r0,a
      00049B E5 81            [12]  823 	mov	a,sp
      00049D 24 FC            [12]  824 	add	a,#0xfc
      00049F F5 81            [12]  825 	mov	sp,a
      0004A1 A8*00            [24]  826 	mov	r0,_bp
      0004A3 08               [12]  827 	inc	r0
      0004A4 86 82            [24]  828 	mov	dpl,@r0
      0004A6 08               [12]  829 	inc	r0
      0004A7 86 83            [24]  830 	mov	dph,@r0
      0004A9 08               [12]  831 	inc	r0
      0004AA 86 F0            [24]  832 	mov	b,@r0
      0004AC 08               [12]  833 	inc	r0
      0004AD E6               [12]  834 	mov	a,@r0
      0004AE 80 07            [24]  835 	sjmp	00118$
      0004B0                        836 00116$:
                                    837 ;	expf.c:374: return z;
      0004B0 8C 82            [24]  838 	mov	dpl,r4
      0004B2 8D 83            [24]  839 	mov	dph,r5
      0004B4 8E F0            [24]  840 	mov	b,r6
      0004B6 EF               [12]  841 	mov	a,r7
      0004B7                        842 00118$:
                                    843 ;	expf.c:375: }
      0004B7 85*00 81         [24]  844 	mov	sp,_bp
      0004BA D0*00            [24]  845 	pop	_bp
      0004BC 22               [24]  846 	ret
                                    847 	.area CSEG    (CODE)
                                    848 	.area CONST   (CODE)
                                    849 	.area XINIT   (CODE)
                                    850 	.area CABS    (ABS,CODE)
