                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbrtowc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbrtowc
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
      000000                         55 _mbrtowc_sps_65536_10:
      000000                         56 	.ds 3
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'mbrtowc'
                                     93 ;------------------------------------------------------------
                                     94 ;s                         Allocated to stack - _bp -5
                                     95 ;n                         Allocated to stack - _bp -7
                                     96 ;ps                        Allocated to stack - _bp -10
                                     97 ;pwc                       Allocated to stack - _bp +1
                                     98 ;first_byte                Allocated to stack - _bp +20
                                     99 ;seqlen                    Allocated to stack - _bp +21
                                    100 ;mbseq                     Allocated to stack - _bp +22
                                    101 ;codepoint                 Allocated to stack - _bp +26
                                    102 ;i                         Allocated to registers r3 
                                    103 ;j                         Allocated to stack - _bp +30
                                    104 ;sloc0                     Allocated to stack - _bp +4
                                    105 ;sloc1                     Allocated to stack - _bp +7
                                    106 ;sloc2                     Allocated to stack - _bp +8
                                    107 ;sloc3                     Allocated to stack - _bp +23
                                    108 ;sloc4                     Allocated to stack - _bp +11
                                    109 ;sloc5                     Allocated to stack - _bp +13
                                    110 ;sloc6                     Allocated to stack - _bp +16
                                    111 ;sps                       Allocated with name '_mbrtowc_sps_65536_10'
                                    112 ;------------------------------------------------------------
                                    113 ;	mbrtowc.c:32: size_t mbrtowc(wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps)
                                    114 ;	-----------------------------------------
                                    115 ;	 function mbrtowc
                                    116 ;	-----------------------------------------
      000000                        117 _mbrtowc:
                           000007   118 	ar7 = 0x07
                           000006   119 	ar6 = 0x06
                           000005   120 	ar5 = 0x05
                           000004   121 	ar4 = 0x04
                           000003   122 	ar3 = 0x03
                           000002   123 	ar2 = 0x02
                           000001   124 	ar1 = 0x01
                           000000   125 	ar0 = 0x00
      000000 C0*00            [24]  126 	push	_bp
      000002 85 81*00         [24]  127 	mov	_bp,sp
      000005 C0 82            [24]  128 	push	dpl
      000007 C0 83            [24]  129 	push	dph
      000009 C0 F0            [24]  130 	push	b
      00000B E5 81            [12]  131 	mov	a,sp
      00000D 24 1B            [12]  132 	add	a,#0x1b
      00000F F5 81            [12]  133 	mov	sp,a
                                    134 ;	mbrtowc.c:41: if(!s)
      000011 E5*00            [12]  135 	mov	a,_bp
      000013 24 FB            [12]  136 	add	a,#0xfb
      000015 F8               [12]  137 	mov	r0,a
      000016 E6               [12]  138 	mov	a,@r0
      000017 08               [12]  139 	inc	r0
      000018 46               [12]  140 	orl	a,@r0
      000019 70 3D            [24]  141 	jnz	00102$
                                    142 ;	mbrtowc.c:42: return(mbrtowc(0, "", 1, ps));
      00001B E5*00            [12]  143 	mov	a,_bp
      00001D 24 F6            [12]  144 	add	a,#0xf6
      00001F F8               [12]  145 	mov	r0,a
      000020 E6               [12]  146 	mov	a,@r0
      000021 C0 E0            [24]  147 	push	acc
      000023 08               [12]  148 	inc	r0
      000024 E6               [12]  149 	mov	a,@r0
      000025 C0 E0            [24]  150 	push	acc
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 C0 E0            [24]  153 	push	acc
      00002B 74 01            [12]  154 	mov	a,#0x01
      00002D C0 E0            [24]  155 	push	acc
      00002F E4               [12]  156 	clr	a
      000030 C0 E0            [24]  157 	push	acc
      000032 74r00            [12]  158 	mov	a,#___str_0
      000034 C0 E0            [24]  159 	push	acc
      000036 74s00            [12]  160 	mov	a,#(___str_0 >> 8)
      000038 C0 E0            [24]  161 	push	acc
      00003A 74 80            [12]  162 	mov	a,#0x80
      00003C C0 E0            [24]  163 	push	acc
      00003E 90 00 00         [24]  164 	mov	dptr,#0x0000
      000041 75 F0 00         [24]  165 	mov	b,#0x00
      000044 12r00r00         [24]  166 	lcall	_mbrtowc
      000047 AB 82            [24]  167 	mov	r3,dpl
      000049 AC 83            [24]  168 	mov	r4,dph
      00004B E5 81            [12]  169 	mov	a,sp
      00004D 24 F8            [12]  170 	add	a,#0xf8
      00004F F5 81            [12]  171 	mov	sp,a
      000051 8B 82            [24]  172 	mov	dpl,r3
      000053 8C 83            [24]  173 	mov	dph,r4
      000055 02r04r2F         [24]  174 	ljmp	00145$
      000058                        175 00102$:
                                    176 ;	mbrtowc.c:43: if(!n)
      000058 E5*00            [12]  177 	mov	a,_bp
      00005A 24 F9            [12]  178 	add	a,#0xf9
      00005C F8               [12]  179 	mov	r0,a
      00005D E6               [12]  180 	mov	a,@r0
      00005E 08               [12]  181 	inc	r0
      00005F 46               [12]  182 	orl	a,@r0
      000060 70 03            [24]  183 	jnz	00280$
      000062 02r04r23         [24]  184 	ljmp	00128$
      000065                        185 00280$:
                                    186 ;	mbrtowc.c:45: if(!ps)
      000065 E5*00            [12]  187 	mov	a,_bp
      000067 24 F6            [12]  188 	add	a,#0xf6
      000069 F8               [12]  189 	mov	r0,a
      00006A E6               [12]  190 	mov	a,@r0
      00006B 08               [12]  191 	inc	r0
      00006C 46               [12]  192 	orl	a,@r0
      00006D 70 0D            [24]  193 	jnz	00106$
                                    194 ;	mbrtowc.c:47: ps = &sps;
      00006F E5*00            [12]  195 	mov	a,_bp
      000071 24 F6            [12]  196 	add	a,#0xf6
      000073 F8               [12]  197 	mov	r0,a
      000074 76r00            [12]  198 	mov	@r0,#_mbrtowc_sps_65536_10
      000076 08               [12]  199 	inc	r0
      000077 76s00            [12]  200 	mov	@r0,#(_mbrtowc_sps_65536_10 >> 8)
      000079 08               [12]  201 	inc	r0
      00007A 76 00            [12]  202 	mov	@r0,#0x00
      00007C                        203 00106$:
                                    204 ;	mbrtowc.c:50: for(i = 0; ps->c[i] && i < 3; i++)
      00007C E5*00            [12]  205 	mov	a,_bp
      00007E 24 16            [12]  206 	add	a,#0x16
      000080 FC               [12]  207 	mov	r4,a
      000081 E5*00            [12]  208 	mov	a,_bp
      000083 24 F6            [12]  209 	add	a,#0xf6
      000085 F8               [12]  210 	mov	r0,a
      000086 E5*00            [12]  211 	mov	a,_bp
      000088 24 04            [12]  212 	add	a,#0x04
      00008A F9               [12]  213 	mov	r1,a
      00008B E6               [12]  214 	mov	a,@r0
      00008C F7               [12]  215 	mov	@r1,a
      00008D 08               [12]  216 	inc	r0
      00008E E6               [12]  217 	mov	a,@r0
      00008F 09               [12]  218 	inc	r1
      000090 F7               [12]  219 	mov	@r1,a
      000091 08               [12]  220 	inc	r0
      000092 E6               [12]  221 	mov	a,@r0
      000093 09               [12]  222 	inc	r1
      000094 F7               [12]  223 	mov	@r1,a
      000095 7B 00            [12]  224 	mov	r3,#0x00
      000097                        225 00131$:
      000097 E5*00            [12]  226 	mov	a,_bp
      000099 24 04            [12]  227 	add	a,#0x04
      00009B F8               [12]  228 	mov	r0,a
      00009C EB               [12]  229 	mov	a,r3
      00009D 26               [12]  230 	add	a,@r0
      00009E FA               [12]  231 	mov	r2,a
      00009F E4               [12]  232 	clr	a
      0000A0 08               [12]  233 	inc	r0
      0000A1 36               [12]  234 	addc	a,@r0
      0000A2 FE               [12]  235 	mov	r6,a
      0000A3 08               [12]  236 	inc	r0
      0000A4 86 07            [24]  237 	mov	ar7,@r0
      0000A6 8A 82            [24]  238 	mov	dpl,r2
      0000A8 8E 83            [24]  239 	mov	dph,r6
      0000AA 8F F0            [24]  240 	mov	b,r7
      0000AC 12r00r00         [24]  241 	lcall	__gptrget
      0000AF FF               [12]  242 	mov	r7,a
      0000B0 60 0D            [24]  243 	jz	00174$
      0000B2 BB 03 00         [24]  244 	cjne	r3,#0x03,00283$
      0000B5                        245 00283$:
      0000B5 50 08            [24]  246 	jnc	00174$
                                    247 ;	mbrtowc.c:51: mbseq[i] = ps->c[i];
      0000B7 EB               [12]  248 	mov	a,r3
      0000B8 2C               [12]  249 	add	a,r4
      0000B9 F8               [12]  250 	mov	r0,a
      0000BA A6 07            [24]  251 	mov	@r0,ar7
                                    252 ;	mbrtowc.c:50: for(i = 0; ps->c[i] && i < 3; i++)
      0000BC 0B               [12]  253 	inc	r3
      0000BD 80 D8            [24]  254 	sjmp	00131$
      0000BF                        255 00174$:
                                    256 ;	mbrtowc.c:53: seqlen = 1;
      0000BF 7A 01            [12]  257 	mov	r2,#0x01
                                    258 ;	mbrtowc.c:54: first_byte = ps->c[0] ? ps->c[0] : *s;
      0000C1 E5*00            [12]  259 	mov	a,_bp
      0000C3 24 F6            [12]  260 	add	a,#0xf6
      0000C5 F8               [12]  261 	mov	r0,a
      0000C6 86 05            [24]  262 	mov	ar5,@r0
      0000C8 08               [12]  263 	inc	r0
      0000C9 86 06            [24]  264 	mov	ar6,@r0
      0000CB 08               [12]  265 	inc	r0
      0000CC 86 07            [24]  266 	mov	ar7,@r0
      0000CE 8D 82            [24]  267 	mov	dpl,r5
      0000D0 8E 83            [24]  268 	mov	dph,r6
      0000D2 8F F0            [24]  269 	mov	b,r7
      0000D4 12r00r00         [24]  270 	lcall	__gptrget
      0000D7 FF               [12]  271 	mov	r7,a
      0000D8 60 09            [24]  272 	jz	00147$
      0000DA E5*00            [12]  273 	mov	a,_bp
      0000DC 24 14            [12]  274 	add	a,#0x14
      0000DE F8               [12]  275 	mov	r0,a
      0000DF A6 07            [24]  276 	mov	@r0,ar7
      0000E1 80 1C            [24]  277 	sjmp	00148$
      0000E3                        278 00147$:
      0000E3 E5*00            [12]  279 	mov	a,_bp
      0000E5 24 FB            [12]  280 	add	a,#0xfb
      0000E7 F8               [12]  281 	mov	r0,a
      0000E8 86 05            [24]  282 	mov	ar5,@r0
      0000EA 08               [12]  283 	inc	r0
      0000EB 86 06            [24]  284 	mov	ar6,@r0
      0000ED 08               [12]  285 	inc	r0
      0000EE 86 07            [24]  286 	mov	ar7,@r0
      0000F0 8D 82            [24]  287 	mov	dpl,r5
      0000F2 8E 83            [24]  288 	mov	dph,r6
      0000F4 8F F0            [24]  289 	mov	b,r7
      0000F6 E5*00            [12]  290 	mov	a,_bp
      0000F8 24 14            [12]  291 	add	a,#0x14
      0000FA F8               [12]  292 	mov	r0,a
      0000FB 12r00r00         [24]  293 	lcall	__gptrget
      0000FE F6               [12]  294 	mov	@r0,a
      0000FF                        295 00148$:
      0000FF E5*00            [12]  296 	mov	a,_bp
      000101 24 14            [12]  297 	add	a,#0x14
                                    298 ;	mbrtowc.c:56: if(first_byte & 0x80)
      000103 E5*00            [12]  299 	mov	a,_bp
      000105 24 14            [12]  300 	add	a,#0x14
      000107 F8               [12]  301 	mov	r0,a
      000108 E6               [12]  302 	mov	a,@r0
      000109 30 E7 72         [24]  303 	jnb	acc.7,00112$
                                    304 ;	mbrtowc.c:58: while (first_byte & (0x80 >> seqlen))
      00010C E5*00            [12]  305 	mov	a,_bp
      00010E 24 15            [12]  306 	add	a,#0x15
      000110 F8               [12]  307 	mov	r0,a
      000111 76 01            [12]  308 	mov	@r0,#0x01
      000113                        309 00108$:
      000113 C0 04            [24]  310 	push	ar4
      000115 E5*00            [12]  311 	mov	a,_bp
      000117 24 15            [12]  312 	add	a,#0x15
      000119 F8               [12]  313 	mov	r0,a
      00011A 86 F0            [24]  314 	mov	b,@r0
      00011C 05 F0            [12]  315 	inc	b
      00011E 7C 80            [12]  316 	mov	r4,#0x80
      000120 E4               [12]  317 	clr	a
      000121 FD               [12]  318 	mov	r5,a
      000122 33               [12]  319 	rlc	a
      000123 92 D2            [24]  320 	mov	ov,c
      000125 80 08            [24]  321 	sjmp	00288$
      000127                        322 00287$:
      000127 A2 D2            [12]  323 	mov	c,ov
      000129 ED               [12]  324 	mov	a,r5
      00012A 13               [12]  325 	rrc	a
      00012B FD               [12]  326 	mov	r5,a
      00012C EC               [12]  327 	mov	a,r4
      00012D 13               [12]  328 	rrc	a
      00012E FC               [12]  329 	mov	r4,a
      00012F                        330 00288$:
      00012F D5 F0 F5         [24]  331 	djnz	b,00287$
      000132 E5*00            [12]  332 	mov	a,_bp
      000134 24 14            [12]  333 	add	a,#0x14
      000136 F8               [12]  334 	mov	r0,a
      000137 86 06            [24]  335 	mov	ar6,@r0
      000139 7F 00            [12]  336 	mov	r7,#0x00
      00013B EE               [12]  337 	mov	a,r6
      00013C 52 04            [12]  338 	anl	ar4,a
      00013E EF               [12]  339 	mov	a,r7
      00013F 52 05            [12]  340 	anl	ar5,a
      000141 EC               [12]  341 	mov	a,r4
      000142 4D               [12]  342 	orl	a,r5
      000143 D0 04            [24]  343 	pop	ar4
      000145 60 08            [24]  344 	jz	00175$
                                    345 ;	mbrtowc.c:59: seqlen++;
      000147 E5*00            [12]  346 	mov	a,_bp
      000149 24 15            [12]  347 	add	a,#0x15
      00014B F8               [12]  348 	mov	r0,a
      00014C 06               [12]  349 	inc	@r0
      00014D 80 C4            [24]  350 	sjmp	00108$
      00014F                        351 00175$:
      00014F E5*00            [12]  352 	mov	a,_bp
      000151 24 15            [12]  353 	add	a,#0x15
      000153 F8               [12]  354 	mov	r0,a
      000154 86 02            [24]  355 	mov	ar2,@r0
                                    356 ;	mbrtowc.c:60: first_byte &= (0xff >> (seqlen + 1));
      000156 E5*00            [12]  357 	mov	a,_bp
      000158 24 15            [12]  358 	add	a,#0x15
      00015A F8               [12]  359 	mov	r0,a
      00015B E6               [12]  360 	mov	a,@r0
      00015C 04               [12]  361 	inc	a
      00015D FF               [12]  362 	mov	r7,a
      00015E 8F F0            [24]  363 	mov	b,r7
      000160 05 F0            [12]  364 	inc	b
      000162 7F FF            [12]  365 	mov	r7,#0xff
      000164 E4               [12]  366 	clr	a
      000165 FE               [12]  367 	mov	r6,a
      000166 33               [12]  368 	rlc	a
      000167 92 D2            [24]  369 	mov	ov,c
      000169 80 08            [24]  370 	sjmp	00291$
      00016B                        371 00290$:
      00016B A2 D2            [12]  372 	mov	c,ov
      00016D EE               [12]  373 	mov	a,r6
      00016E 13               [12]  374 	rrc	a
      00016F FE               [12]  375 	mov	r6,a
      000170 EF               [12]  376 	mov	a,r7
      000171 13               [12]  377 	rrc	a
      000172 FF               [12]  378 	mov	r7,a
      000173                        379 00291$:
      000173 D5 F0 F5         [24]  380 	djnz	b,00290$
      000176 E5*00            [12]  381 	mov	a,_bp
      000178 24 14            [12]  382 	add	a,#0x14
      00017A F8               [12]  383 	mov	r0,a
      00017B EF               [12]  384 	mov	a,r7
      00017C 56               [12]  385 	anl	a,@r0
      00017D F6               [12]  386 	mov	@r0,a
      00017E                        387 00112$:
                                    388 ;	mbrtowc.c:63: if(seqlen > 4)
      00017E EA               [12]  389 	mov	a,r2
      00017F 24 FB            [12]  390 	add	a,#0xff - 0x04
      000181 50 03            [24]  391 	jnc	00292$
      000183 02r04r23         [24]  392 	ljmp	00128$
      000186                        393 00292$:
                                    394 ;	mbrtowc.c:66: if(i + n < seqlen) // Incomplete multibyte character
      000186 C0 04            [24]  395 	push	ar4
      000188 8B 06            [24]  396 	mov	ar6,r3
      00018A 7F 00            [12]  397 	mov	r7,#0x00
      00018C 8E 04            [24]  398 	mov	ar4,r6
      00018E 8F 05            [24]  399 	mov	ar5,r7
      000190 E5*00            [12]  400 	mov	a,_bp
      000192 24 F9            [12]  401 	add	a,#0xf9
      000194 F8               [12]  402 	mov	r0,a
      000195 E5*00            [12]  403 	mov	a,_bp
      000197 24 04            [12]  404 	add	a,#0x04
      000199 F9               [12]  405 	mov	r1,a
      00019A E6               [12]  406 	mov	a,@r0
      00019B 2C               [12]  407 	add	a,r4
      00019C F7               [12]  408 	mov	@r1,a
      00019D 08               [12]  409 	inc	r0
      00019E E6               [12]  410 	mov	a,@r0
      00019F 3D               [12]  411 	addc	a,r5
      0001A0 09               [12]  412 	inc	r1
      0001A1 F7               [12]  413 	mov	@r1,a
      0001A2 8A 04            [24]  414 	mov	ar4,r2
      0001A4 7D 00            [12]  415 	mov	r5,#0x00
      0001A6 E5*00            [12]  416 	mov	a,_bp
      0001A8 24 04            [12]  417 	add	a,#0x04
      0001AA F8               [12]  418 	mov	r0,a
      0001AB C3               [12]  419 	clr	c
      0001AC E6               [12]  420 	mov	a,@r0
      0001AD 9C               [12]  421 	subb	a,r4
      0001AE 08               [12]  422 	inc	r0
      0001AF E6               [12]  423 	mov	a,@r0
      0001B0 9D               [12]  424 	subb	a,r5
      0001B1 D0 04            [24]  425 	pop	ar4
      0001B3 40 03            [24]  426 	jc	00293$
      0001B5 02r02r43         [24]  427 	ljmp	00164$
      0001B8                        428 00293$:
                                    429 ;	mbrtowc.c:70: return(-2);
      0001B8 E5*00            [12]  430 	mov	a,_bp
      0001BA 24 F6            [12]  431 	add	a,#0xf6
      0001BC F8               [12]  432 	mov	r0,a
      0001BD E5*00            [12]  433 	mov	a,_bp
      0001BF 24 04            [12]  434 	add	a,#0x04
      0001C1 F9               [12]  435 	mov	r1,a
      0001C2 E6               [12]  436 	mov	a,@r0
      0001C3 F7               [12]  437 	mov	@r1,a
      0001C4 08               [12]  438 	inc	r0
      0001C5 E6               [12]  439 	mov	a,@r0
      0001C6 09               [12]  440 	inc	r1
      0001C7 F7               [12]  441 	mov	@r1,a
      0001C8 08               [12]  442 	inc	r0
      0001C9 E6               [12]  443 	mov	a,@r0
      0001CA 09               [12]  444 	inc	r1
      0001CB F7               [12]  445 	mov	@r1,a
      0001CC E5*00            [12]  446 	mov	a,_bp
      0001CE 24 FB            [12]  447 	add	a,#0xfb
      0001D0 F8               [12]  448 	mov	r0,a
      0001D1 E5*00            [12]  449 	mov	a,_bp
      0001D3 24 08            [12]  450 	add	a,#0x08
      0001D5 F9               [12]  451 	mov	r1,a
      0001D6 E6               [12]  452 	mov	a,@r0
      0001D7 F7               [12]  453 	mov	@r1,a
      0001D8 08               [12]  454 	inc	r0
      0001D9 E6               [12]  455 	mov	a,@r0
      0001DA 09               [12]  456 	inc	r1
      0001DB F7               [12]  457 	mov	@r1,a
      0001DC 08               [12]  458 	inc	r0
      0001DD E6               [12]  459 	mov	a,@r0
      0001DE 09               [12]  460 	inc	r1
      0001DF F7               [12]  461 	mov	@r1,a
      0001E0 E5*00            [12]  462 	mov	a,_bp
      0001E2 24 07            [12]  463 	add	a,#0x07
      0001E4 F8               [12]  464 	mov	r0,a
      0001E5 A6 03            [24]  465 	mov	@r0,ar3
      0001E7 E5*00            [12]  466 	mov	a,_bp
      0001E9 24 F9            [12]  467 	add	a,#0xf9
      0001EB F8               [12]  468 	mov	r0,a
      0001EC 86 04            [24]  469 	mov	ar4,@r0
      0001EE 08               [12]  470 	inc	r0
      0001EF 86 03            [24]  471 	mov	ar3,@r0
      0001F1                        472 00134$:
                                    473 ;	mbrtowc.c:68: for(;n-- ; i++)
      0001F1 8C 07            [24]  474 	mov	ar7,r4
      0001F3 8B 06            [24]  475 	mov	ar6,r3
      0001F5 1C               [12]  476 	dec	r4
      0001F6 BC FF 01         [24]  477 	cjne	r4,#0xff,00294$
      0001F9 1B               [12]  478 	dec	r3
      0001FA                        479 00294$:
      0001FA EF               [12]  480 	mov	a,r7
      0001FB 4E               [12]  481 	orl	a,r6
      0001FC 60 3F            [24]  482 	jz	00115$
                                    483 ;	mbrtowc.c:69: ps->c[i] = *s++;
      0001FE E5*00            [12]  484 	mov	a,_bp
      000200 24 04            [12]  485 	add	a,#0x04
      000202 F8               [12]  486 	mov	r0,a
      000203 E5*00            [12]  487 	mov	a,_bp
      000205 24 07            [12]  488 	add	a,#0x07
      000207 F9               [12]  489 	mov	r1,a
      000208 E7               [12]  490 	mov	a,@r1
      000209 26               [12]  491 	add	a,@r0
      00020A FF               [12]  492 	mov	r7,a
      00020B E4               [12]  493 	clr	a
      00020C 08               [12]  494 	inc	r0
      00020D 36               [12]  495 	addc	a,@r0
      00020E FE               [12]  496 	mov	r6,a
      00020F 08               [12]  497 	inc	r0
      000210 86 02            [24]  498 	mov	ar2,@r0
      000212 E5*00            [12]  499 	mov	a,_bp
      000214 24 08            [12]  500 	add	a,#0x08
      000216 F8               [12]  501 	mov	r0,a
      000217 86 82            [24]  502 	mov	dpl,@r0
      000219 08               [12]  503 	inc	r0
      00021A 86 83            [24]  504 	mov	dph,@r0
      00021C 08               [12]  505 	inc	r0
      00021D 86 F0            [24]  506 	mov	b,@r0
      00021F 12r00r00         [24]  507 	lcall	__gptrget
      000222 FD               [12]  508 	mov	r5,a
      000223 A3               [24]  509 	inc	dptr
      000224 18               [12]  510 	dec	r0
      000225 18               [12]  511 	dec	r0
      000226 A6 82            [24]  512 	mov	@r0,dpl
      000228 08               [12]  513 	inc	r0
      000229 A6 83            [24]  514 	mov	@r0,dph
      00022B 8F 82            [24]  515 	mov	dpl,r7
      00022D 8E 83            [24]  516 	mov	dph,r6
      00022F 8A F0            [24]  517 	mov	b,r2
      000231 ED               [12]  518 	mov	a,r5
      000232 12r00r00         [24]  519 	lcall	__gptrput
                                    520 ;	mbrtowc.c:68: for(;n-- ; i++)
      000235 E5*00            [12]  521 	mov	a,_bp
      000237 24 07            [12]  522 	add	a,#0x07
      000239 F8               [12]  523 	mov	r0,a
      00023A 06               [12]  524 	inc	@r0
      00023B 80 B4            [24]  525 	sjmp	00134$
      00023D                        526 00115$:
                                    527 ;	mbrtowc.c:70: return(-2);
      00023D 90 FF FE         [24]  528 	mov	dptr,#0xfffe
      000240 02r04r2F         [24]  529 	ljmp	00145$
                                    530 ;	mbrtowc.c:73: for(j = 0; j < i; j++)
      000243                        531 00164$:
      000243 E5*00            [12]  532 	mov	a,_bp
      000245 24 F6            [12]  533 	add	a,#0xf6
      000247 F8               [12]  534 	mov	r0,a
      000248 E5*00            [12]  535 	mov	a,_bp
      00024A 24 0D            [12]  536 	add	a,#0x0d
      00024C F9               [12]  537 	mov	r1,a
      00024D E6               [12]  538 	mov	a,@r0
      00024E F7               [12]  539 	mov	@r1,a
      00024F 08               [12]  540 	inc	r0
      000250 E6               [12]  541 	mov	a,@r0
      000251 09               [12]  542 	inc	r1
      000252 F7               [12]  543 	mov	@r1,a
      000253 08               [12]  544 	inc	r0
      000254 E6               [12]  545 	mov	a,@r0
      000255 09               [12]  546 	inc	r1
      000256 F7               [12]  547 	mov	@r1,a
      000257 E5*00            [12]  548 	mov	a,_bp
      000259 24 1E            [12]  549 	add	a,#0x1e
      00025B F8               [12]  550 	mov	r0,a
      00025C 76 00            [12]  551 	mov	@r0,#0x00
      00025E                        552 00137$:
      00025E E5*00            [12]  553 	mov	a,_bp
      000260 24 1E            [12]  554 	add	a,#0x1e
      000262 F8               [12]  555 	mov	r0,a
      000263 C3               [12]  556 	clr	c
      000264 E6               [12]  557 	mov	a,@r0
      000265 9B               [12]  558 	subb	a,r3
      000266 50 2E            [24]  559 	jnc	00118$
                                    560 ;	mbrtowc.c:74: ps->c[j] = 0;
      000268 C0 06            [24]  561 	push	ar6
      00026A C0 07            [24]  562 	push	ar7
      00026C E5*00            [12]  563 	mov	a,_bp
      00026E 24 0D            [12]  564 	add	a,#0x0d
      000270 F8               [12]  565 	mov	r0,a
      000271 E5*00            [12]  566 	mov	a,_bp
      000273 24 1E            [12]  567 	add	a,#0x1e
      000275 F9               [12]  568 	mov	r1,a
      000276 E7               [12]  569 	mov	a,@r1
      000277 26               [12]  570 	add	a,@r0
      000278 FD               [12]  571 	mov	r5,a
      000279 E4               [12]  572 	clr	a
      00027A 08               [12]  573 	inc	r0
      00027B 36               [12]  574 	addc	a,@r0
      00027C FE               [12]  575 	mov	r6,a
      00027D 08               [12]  576 	inc	r0
      00027E 86 07            [24]  577 	mov	ar7,@r0
      000280 8D 82            [24]  578 	mov	dpl,r5
      000282 8E 83            [24]  579 	mov	dph,r6
      000284 8F F0            [24]  580 	mov	b,r7
      000286 E4               [12]  581 	clr	a
      000287 12r00r00         [24]  582 	lcall	__gptrput
                                    583 ;	mbrtowc.c:73: for(j = 0; j < i; j++)
      00028A E5*00            [12]  584 	mov	a,_bp
      00028C 24 1E            [12]  585 	add	a,#0x1e
      00028E F8               [12]  586 	mov	r0,a
      00028F 06               [12]  587 	inc	@r0
      000290 D0 07            [24]  588 	pop	ar7
      000292 D0 06            [24]  589 	pop	ar6
      000294 80 C8            [24]  590 	sjmp	00137$
      000296                        591 00118$:
                                    592 ;	mbrtowc.c:76: for(n = 1, i = i ? i : 1; i < seqlen; i++, n++)
      000296 E5*00            [12]  593 	mov	a,_bp
      000298 24 F9            [12]  594 	add	a,#0xf9
      00029A F8               [12]  595 	mov	r0,a
      00029B 76 01            [12]  596 	mov	@r0,#0x01
      00029D 08               [12]  597 	inc	r0
      00029E 76 00            [12]  598 	mov	@r0,#0x00
      0002A0 EB               [12]  599 	mov	a,r3
      0002A1 60 02            [24]  600 	jz	00149$
      0002A3 80 04            [24]  601 	sjmp	00150$
      0002A5                        602 00149$:
      0002A5 7E 01            [12]  603 	mov	r6,#0x01
      0002A7 7F 00            [12]  604 	mov	r7,#0x00
      0002A9                        605 00150$:
      0002A9 E5*00            [12]  606 	mov	a,_bp
      0002AB 24 0B            [12]  607 	add	a,#0x0b
      0002AD F8               [12]  608 	mov	r0,a
      0002AE A6 04            [24]  609 	mov	@r0,ar4
      0002B0 E5*00            [12]  610 	mov	a,_bp
      0002B2 24 FB            [12]  611 	add	a,#0xfb
      0002B4 F8               [12]  612 	mov	r0,a
      0002B5 E5*00            [12]  613 	mov	a,_bp
      0002B7 24 0D            [12]  614 	add	a,#0x0d
      0002B9 F9               [12]  615 	mov	r1,a
      0002BA E6               [12]  616 	mov	a,@r0
      0002BB F7               [12]  617 	mov	@r1,a
      0002BC 08               [12]  618 	inc	r0
      0002BD E6               [12]  619 	mov	a,@r0
      0002BE 09               [12]  620 	inc	r1
      0002BF F7               [12]  621 	mov	@r1,a
      0002C0 08               [12]  622 	inc	r0
      0002C1 E6               [12]  623 	mov	a,@r0
      0002C2 09               [12]  624 	inc	r1
      0002C3 F7               [12]  625 	mov	@r1,a
      0002C4 7B 01            [12]  626 	mov	r3,#0x01
      0002C6 7D 00            [12]  627 	mov	r5,#0x00
      0002C8                        628 00140$:
      0002C8 C3               [12]  629 	clr	c
      0002C9 EE               [12]  630 	mov	a,r6
      0002CA 9A               [12]  631 	subb	a,r2
      0002CB 50 4B            [24]  632 	jnc	00121$
                                    633 ;	mbrtowc.c:78: mbseq[i] = *s++;
      0002CD C0 04            [24]  634 	push	ar4
      0002CF E5*00            [12]  635 	mov	a,_bp
      0002D1 24 0B            [12]  636 	add	a,#0x0b
      0002D3 F8               [12]  637 	mov	r0,a
      0002D4 EE               [12]  638 	mov	a,r6
      0002D5 26               [12]  639 	add	a,@r0
      0002D6 F9               [12]  640 	mov	r1,a
      0002D7 E5*00            [12]  641 	mov	a,_bp
      0002D9 24 0D            [12]  642 	add	a,#0x0d
      0002DB F8               [12]  643 	mov	r0,a
      0002DC 86 82            [24]  644 	mov	dpl,@r0
      0002DE 08               [12]  645 	inc	r0
      0002DF 86 83            [24]  646 	mov	dph,@r0
      0002E1 08               [12]  647 	inc	r0
      0002E2 86 F0            [24]  648 	mov	b,@r0
      0002E4 12r00r00         [24]  649 	lcall	__gptrget
      0002E7 FC               [12]  650 	mov	r4,a
      0002E8 A3               [24]  651 	inc	dptr
      0002E9 18               [12]  652 	dec	r0
      0002EA 18               [12]  653 	dec	r0
      0002EB A6 82            [24]  654 	mov	@r0,dpl
      0002ED 08               [12]  655 	inc	r0
      0002EE A6 83            [24]  656 	mov	@r0,dph
      0002F0 A7 04            [24]  657 	mov	@r1,ar4
                                    658 ;	mbrtowc.c:79: if((mbseq[i] & 0xc0) != 0x80)
      0002F2 53 04 C0         [24]  659 	anl	ar4,#0xc0
      0002F5 7F 00            [12]  660 	mov	r7,#0x00
      0002F7 BC 80 05         [24]  661 	cjne	r4,#0x80,00299$
      0002FA BF 00 02         [24]  662 	cjne	r7,#0x00,00299$
      0002FD 80 05            [24]  663 	sjmp	00300$
      0002FF                        664 00299$:
      0002FF D0 04            [24]  665 	pop	ar4
      000301 02r04r23         [24]  666 	ljmp	00128$
      000304                        667 00300$:
      000304 D0 04            [24]  668 	pop	ar4
                                    669 ;	mbrtowc.c:76: for(n = 1, i = i ? i : 1; i < seqlen; i++, n++)
      000306 0E               [12]  670 	inc	r6
      000307 0B               [12]  671 	inc	r3
      000308 BB 00 01         [24]  672 	cjne	r3,#0x00,00301$
      00030B 0D               [12]  673 	inc	r5
      00030C                        674 00301$:
      00030C E5*00            [12]  675 	mov	a,_bp
      00030E 24 F9            [12]  676 	add	a,#0xf9
      000310 F8               [12]  677 	mov	r0,a
      000311 A6 03            [24]  678 	mov	@r0,ar3
      000313 08               [12]  679 	inc	r0
      000314 A6 05            [24]  680 	mov	@r0,ar5
      000316 80 B0            [24]  681 	sjmp	00140$
      000318                        682 00121$:
                                    683 ;	mbrtowc.c:83: codepoint = first_byte;
      000318 E5*00            [12]  684 	mov	a,_bp
      00031A 24 14            [12]  685 	add	a,#0x14
      00031C F8               [12]  686 	mov	r0,a
      00031D 86 05            [24]  687 	mov	ar5,@r0
      00031F 7E 00            [12]  688 	mov	r6,#0x00
      000321 7B 00            [12]  689 	mov	r3,#0x00
      000323 7F 00            [12]  690 	mov	r7,#0x00
                                    691 ;	mbrtowc.c:85: for(s = mbseq + 1, seqlen--; seqlen; seqlen--)
      000325 0C               [12]  692 	inc	r4
      000326 E5*00            [12]  693 	mov	a,_bp
      000328 24 0D            [12]  694 	add	a,#0x0d
      00032A F8               [12]  695 	mov	r0,a
      00032B A6 04            [24]  696 	mov	@r0,ar4
      00032D 08               [12]  697 	inc	r0
      00032E 76 00            [12]  698 	mov	@r0,#0x00
      000330 08               [12]  699 	inc	r0
      000331 76 40            [12]  700 	mov	@r0,#0x40
      000333 E5*00            [12]  701 	mov	a,_bp
      000335 24 0B            [12]  702 	add	a,#0x0b
      000337 F8               [12]  703 	mov	r0,a
      000338 EA               [12]  704 	mov	a,r2
      000339 14               [12]  705 	dec	a
      00033A F6               [12]  706 	mov	@r0,a
      00033B                        707 00143$:
      00033B E5*00            [12]  708 	mov	a,_bp
      00033D 24 0B            [12]  709 	add	a,#0x0b
      00033F F8               [12]  710 	mov	r0,a
      000340 E6               [12]  711 	mov	a,@r0
      000341 70 03            [24]  712 	jnz	00302$
      000343 02r03rD4         [24]  713 	ljmp	00122$
      000346                        714 00302$:
                                    715 ;	mbrtowc.c:87: codepoint <<= 6;
      000346 E5*00            [12]  716 	mov	a,_bp
      000348 24 1A            [12]  717 	add	a,#0x1a
      00034A F8               [12]  718 	mov	r0,a
      00034B 08               [12]  719 	inc	r0
      00034C 08               [12]  720 	inc	r0
      00034D A6 03            [24]  721 	mov	@r0,ar3
      00034F EF               [12]  722 	mov	a,r7
      000350 54 03            [12]  723 	anl	a,#0x03
      000352 A2 E0            [12]  724 	mov	c,acc.0
      000354 C6               [12]  725 	xch	a,@r0
      000355 13               [12]  726 	rrc	a
      000356 C6               [12]  727 	xch	a,@r0
      000357 13               [12]  728 	rrc	a
      000358 A2 E0            [12]  729 	mov	c,acc.0
      00035A C6               [12]  730 	xch	a,@r0
      00035B 13               [12]  731 	rrc	a
      00035C C6               [12]  732 	xch	a,@r0
      00035D 13               [12]  733 	rrc	a
      00035E C6               [12]  734 	xch	a,@r0
      00035F 08               [12]  735 	inc	r0
      000360 F6               [12]  736 	mov	@r0,a
      000361 EE               [12]  737 	mov	a,r6
      000362 03               [12]  738 	rr	a
      000363 03               [12]  739 	rr	a
      000364 54 3F            [12]  740 	anl	a,#0x3f
      000366 18               [12]  741 	dec	r0
      000367 46               [12]  742 	orl	a,@r0
      000368 F6               [12]  743 	mov	@r0,a
      000369 18               [12]  744 	dec	r0
      00036A 18               [12]  745 	dec	r0
      00036B A6 05            [24]  746 	mov	@r0,ar5
      00036D EE               [12]  747 	mov	a,r6
      00036E 54 03            [12]  748 	anl	a,#0x03
      000370 A2 E0            [12]  749 	mov	c,acc.0
      000372 C6               [12]  750 	xch	a,@r0
      000373 13               [12]  751 	rrc	a
      000374 C6               [12]  752 	xch	a,@r0
      000375 13               [12]  753 	rrc	a
      000376 A2 E0            [12]  754 	mov	c,acc.0
      000378 C6               [12]  755 	xch	a,@r0
      000379 13               [12]  756 	rrc	a
      00037A C6               [12]  757 	xch	a,@r0
      00037B 13               [12]  758 	rrc	a
      00037C C6               [12]  759 	xch	a,@r0
      00037D 08               [12]  760 	inc	r0
      00037E F6               [12]  761 	mov	@r0,a
                                    762 ;	mbrtowc.c:88: codepoint |= (*s & 0x3f);
      00037F E5*00            [12]  763 	mov	a,_bp
      000381 24 0D            [12]  764 	add	a,#0x0d
      000383 F8               [12]  765 	mov	r0,a
      000384 86 82            [24]  766 	mov	dpl,@r0
      000386 08               [12]  767 	inc	r0
      000387 86 83            [24]  768 	mov	dph,@r0
      000389 08               [12]  769 	inc	r0
      00038A 86 F0            [24]  770 	mov	b,@r0
      00038C 12r00r00         [24]  771 	lcall	__gptrget
      00038F FA               [12]  772 	mov	r2,a
      000390 A3               [24]  773 	inc	dptr
      000391 18               [12]  774 	dec	r0
      000392 18               [12]  775 	dec	r0
      000393 A6 82            [24]  776 	mov	@r0,dpl
      000395 08               [12]  777 	inc	r0
      000396 A6 83            [24]  778 	mov	@r0,dph
      000398 53 02 3F         [24]  779 	anl	ar2,#0x3f
      00039B 7C 00            [12]  780 	mov	r4,#0x00
      00039D E5*00            [12]  781 	mov	a,_bp
      00039F 24 10            [12]  782 	add	a,#0x10
      0003A1 F8               [12]  783 	mov	r0,a
      0003A2 A6 02            [24]  784 	mov	@r0,ar2
      0003A4 08               [12]  785 	inc	r0
      0003A5 A6 04            [24]  786 	mov	@r0,ar4
      0003A7 EC               [12]  787 	mov	a,r4
      0003A8 33               [12]  788 	rlc	a
      0003A9 95 E0            [12]  789 	subb	a,acc
      0003AB 08               [12]  790 	inc	r0
      0003AC F6               [12]  791 	mov	@r0,a
      0003AD 08               [12]  792 	inc	r0
      0003AE F6               [12]  793 	mov	@r0,a
      0003AF E5*00            [12]  794 	mov	a,_bp
      0003B1 24 1A            [12]  795 	add	a,#0x1a
      0003B3 F8               [12]  796 	mov	r0,a
      0003B4 E5*00            [12]  797 	mov	a,_bp
      0003B6 24 10            [12]  798 	add	a,#0x10
      0003B8 F9               [12]  799 	mov	r1,a
      0003B9 E7               [12]  800 	mov	a,@r1
      0003BA 46               [12]  801 	orl	a,@r0
      0003BB FD               [12]  802 	mov	r5,a
      0003BC 09               [12]  803 	inc	r1
      0003BD E7               [12]  804 	mov	a,@r1
      0003BE 08               [12]  805 	inc	r0
      0003BF 46               [12]  806 	orl	a,@r0
      0003C0 FE               [12]  807 	mov	r6,a
      0003C1 09               [12]  808 	inc	r1
      0003C2 E7               [12]  809 	mov	a,@r1
      0003C3 08               [12]  810 	inc	r0
      0003C4 46               [12]  811 	orl	a,@r0
      0003C5 FB               [12]  812 	mov	r3,a
      0003C6 09               [12]  813 	inc	r1
      0003C7 E7               [12]  814 	mov	a,@r1
      0003C8 08               [12]  815 	inc	r0
      0003C9 46               [12]  816 	orl	a,@r0
      0003CA FF               [12]  817 	mov	r7,a
                                    818 ;	mbrtowc.c:89: s++;
                                    819 ;	mbrtowc.c:85: for(s = mbseq + 1, seqlen--; seqlen; seqlen--)
      0003CB E5*00            [12]  820 	mov	a,_bp
      0003CD 24 0B            [12]  821 	add	a,#0x0b
      0003CF F8               [12]  822 	mov	r0,a
      0003D0 16               [12]  823 	dec	@r0
      0003D1 02r03r3B         [24]  824 	ljmp	00143$
      0003D4                        825 00122$:
                                    826 ;	mbrtowc.c:92: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      0003D4 C3               [12]  827 	clr	c
      0003D5 EE               [12]  828 	mov	a,r6
      0003D6 94 D8            [12]  829 	subb	a,#0xd8
      0003D8 EB               [12]  830 	mov	a,r3
      0003D9 94 00            [12]  831 	subb	a,#0x00
      0003DB EF               [12]  832 	mov	a,r7
      0003DC 94 00            [12]  833 	subb	a,#0x00
      0003DE 40 11            [24]  834 	jc	00124$
      0003E0 74 FF            [12]  835 	mov	a,#0xff
      0003E2 9D               [12]  836 	subb	a,r5
      0003E3 74 DF            [12]  837 	mov	a,#0xdf
      0003E5 9E               [12]  838 	subb	a,r6
      0003E6 E4               [12]  839 	clr	a
      0003E7 9B               [12]  840 	subb	a,r3
      0003E8 E4               [12]  841 	clr	a
      0003E9 9F               [12]  842 	subb	a,r7
      0003EA 40 05            [24]  843 	jc	00124$
                                    844 ;	mbrtowc.c:93: return(-1);
      0003EC 90 FF FF         [24]  845 	mov	dptr,#0xffff
      0003EF 80 3E            [24]  846 	sjmp	00145$
      0003F1                        847 00124$:
                                    848 ;	mbrtowc.c:95: if(pwc)
      0003F1 A8*00            [24]  849 	mov	r0,_bp
      0003F3 08               [12]  850 	inc	r0
      0003F4 E6               [12]  851 	mov	a,@r0
      0003F5 08               [12]  852 	inc	r0
      0003F6 46               [12]  853 	orl	a,@r0
      0003F7 60 1E            [24]  854 	jz	00127$
                                    855 ;	mbrtowc.c:96: *pwc = codepoint;
      0003F9 A8*00            [24]  856 	mov	r0,_bp
      0003FB 08               [12]  857 	inc	r0
      0003FC 86 82            [24]  858 	mov	dpl,@r0
      0003FE 08               [12]  859 	inc	r0
      0003FF 86 83            [24]  860 	mov	dph,@r0
      000401 08               [12]  861 	inc	r0
      000402 86 F0            [24]  862 	mov	b,@r0
      000404 ED               [12]  863 	mov	a,r5
      000405 12r00r00         [24]  864 	lcall	__gptrput
      000408 A3               [24]  865 	inc	dptr
      000409 EE               [12]  866 	mov	a,r6
      00040A 12r00r00         [24]  867 	lcall	__gptrput
      00040D A3               [24]  868 	inc	dptr
      00040E EB               [12]  869 	mov	a,r3
      00040F 12r00r00         [24]  870 	lcall	__gptrput
      000412 A3               [24]  871 	inc	dptr
      000413 EF               [12]  872 	mov	a,r7
      000414 12r00r00         [24]  873 	lcall	__gptrput
      000417                        874 00127$:
                                    875 ;	mbrtowc.c:97: return(n);
      000417 E5*00            [12]  876 	mov	a,_bp
      000419 24 F9            [12]  877 	add	a,#0xf9
      00041B F8               [12]  878 	mov	r0,a
      00041C 86 82            [24]  879 	mov	dpl,@r0
      00041E 08               [12]  880 	inc	r0
      00041F 86 83            [24]  881 	mov	dph,@r0
                                    882 ;	mbrtowc.c:99: eilseq:
      000421 80 0C            [24]  883 	sjmp	00145$
      000423                        884 00128$:
                                    885 ;	mbrtowc.c:100: errno = EILSEQ;
      000423 90r00r00         [24]  886 	mov	dptr,#_errno
      000426 74 54            [12]  887 	mov	a,#0x54
      000428 F0               [24]  888 	movx	@dptr,a
      000429 E4               [12]  889 	clr	a
      00042A A3               [24]  890 	inc	dptr
      00042B F0               [24]  891 	movx	@dptr,a
                                    892 ;	mbrtowc.c:101: return(-1);
      00042C 90 FF FF         [24]  893 	mov	dptr,#0xffff
      00042F                        894 00145$:
                                    895 ;	mbrtowc.c:102: }
      00042F 85*00 81         [24]  896 	mov	sp,_bp
      000432 D0*00            [24]  897 	pop	_bp
      000434 22               [24]  898 	ret
                                    899 	.area CSEG    (CODE)
                                    900 	.area CONST   (CODE)
                                    901 	.area CONST   (CODE)
      000000                        902 ___str_0:
      000000 00                     903 	.db 0x00
                                    904 	.area CSEG    (CODE)
                                    905 	.area XINIT   (CODE)
                                    906 	.area CABS    (ABS,CODE)
