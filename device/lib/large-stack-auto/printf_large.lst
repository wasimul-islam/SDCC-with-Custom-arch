                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl __print_format
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'output_digit'
                                    106 ;------------------------------------------------------------
                                    107 ;lower_case                Allocated to stack - _bp -3
                                    108 ;output_char               Allocated to stack - _bp -5
                                    109 ;p                         Allocated to stack - _bp -8
                                    110 ;n                         Allocated to registers r7 
                                    111 ;c                         Allocated to registers r7 
                                    112 ;------------------------------------------------------------
                                    113 ;	printf_large.c:116: output_digit (unsigned char n, _Bool lower_case, pfn_outputchar output_char, void* p)
                                    114 ;	-----------------------------------------
                                    115 ;	 function output_digit
                                    116 ;	-----------------------------------------
      000000                        117 _output_digit:
                           000007   118 	ar7 = 0x07
                           000006   119 	ar6 = 0x06
                           000005   120 	ar5 = 0x05
                           000004   121 	ar4 = 0x04
                           000003   122 	ar3 = 0x03
                           000002   123 	ar2 = 0x02
                           000001   124 	ar1 = 0x01
                           000000   125 	ar0 = 0x00
      000000 C0*00            [24]  126 	push	_bp
      000002 85 81*00         [24]  127 	mov	_bp,sp
      000005 AF 82            [24]  128 	mov	r7,dpl
                                    129 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  130 	mov	a,#0x30
      000009 2F               [12]  131 	add	a,r7
                                    132 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  133 	mov  r7,a
      00000B 24 C6            [12]  134 	add	a,#0xff - 0x39
      00000D 50 10            [24]  135 	jnc	00104$
                                    136 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  137 	mov	a,#0x07
      000011 2F               [12]  138 	add	a,r7
      000012 FF               [12]  139 	mov	r7,a
                                    140 ;	printf_large.c:123: if (lower_case)
      000013 E5*00            [12]  141 	mov	a,_bp
      000015 24 FD            [12]  142 	add	a,#0xfd
      000017 F8               [12]  143 	mov	r0,a
      000018 E6               [12]  144 	mov	a,@r0
      000019 60 04            [24]  145 	jz	00104$
                                    146 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      00001B 74 20            [12]  147 	mov	a,#0x20
      00001D 2F               [12]  148 	add	a,r7
      00001E FF               [12]  149 	mov	r7,a
      00001F                        150 00104$:
                                    151 ;	printf_large.c:126: output_char( c, p );
      00001F E5*00            [12]  152 	mov	a,_bp
      000021 24 F8            [12]  153 	add	a,#0xf8
      000023 F8               [12]  154 	mov	r0,a
      000024 E6               [12]  155 	mov	a,@r0
      000025 C0 E0            [24]  156 	push	acc
      000027 08               [12]  157 	inc	r0
      000028 E6               [12]  158 	mov	a,@r0
      000029 C0 E0            [24]  159 	push	acc
      00002B 08               [12]  160 	inc	r0
      00002C E6               [12]  161 	mov	a,@r0
      00002D C0 E0            [24]  162 	push	acc
      00002F 12r00r34         [24]  163 	lcall	00117$
      000032 80 0F            [24]  164 	sjmp	00118$
      000034                        165 00117$:
      000034 E5*00            [12]  166 	mov	a,_bp
      000036 24 FB            [12]  167 	add	a,#0xfb
      000038 F8               [12]  168 	mov	r0,a
      000039 E6               [12]  169 	mov	a,@r0
      00003A C0 E0            [24]  170 	push	acc
      00003C 08               [12]  171 	inc	r0
      00003D E6               [12]  172 	mov	a,@r0
      00003E C0 E0            [24]  173 	push	acc
      000040 8F 82            [24]  174 	mov	dpl,r7
      000042 22               [24]  175 	ret
      000043                        176 00118$:
      000043 15 81            [12]  177 	dec	sp
      000045 15 81            [12]  178 	dec	sp
      000047 15 81            [12]  179 	dec	sp
                                    180 ;	printf_large.c:127: }
      000049 D0*00            [24]  181 	pop	_bp
      00004B 22               [24]  182 	ret
                                    183 ;------------------------------------------------------------
                                    184 ;Allocation info for local variables in function 'output_2digits'
                                    185 ;------------------------------------------------------------
                                    186 ;lower_case                Allocated to stack - _bp -3
                                    187 ;output_char               Allocated to stack - _bp -5
                                    188 ;p                         Allocated to stack - _bp -8
                                    189 ;b                         Allocated to registers r7 
                                    190 ;------------------------------------------------------------
                                    191 ;	printf_large.c:149: output_2digits (unsigned char b, _Bool lower_case, pfn_outputchar output_char, void* p)
                                    192 ;	-----------------------------------------
                                    193 ;	 function output_2digits
                                    194 ;	-----------------------------------------
      00004C                        195 _output_2digits:
      00004C C0*00            [24]  196 	push	_bp
      00004E 85 81*00         [24]  197 	mov	_bp,sp
                                    198 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      000051 E5 82            [12]  199 	mov	a,dpl
      000053 FF               [12]  200 	mov	r7,a
      000054 C4               [12]  201 	swap	a
      000055 54 0F            [12]  202 	anl	a,#0x0f
      000057 FE               [12]  203 	mov	r6,a
      000058 C0 07            [24]  204 	push	ar7
      00005A E5*00            [12]  205 	mov	a,_bp
      00005C 24 F8            [12]  206 	add	a,#0xf8
      00005E F8               [12]  207 	mov	r0,a
      00005F E6               [12]  208 	mov	a,@r0
      000060 C0 E0            [24]  209 	push	acc
      000062 08               [12]  210 	inc	r0
      000063 E6               [12]  211 	mov	a,@r0
      000064 C0 E0            [24]  212 	push	acc
      000066 08               [12]  213 	inc	r0
      000067 E6               [12]  214 	mov	a,@r0
      000068 C0 E0            [24]  215 	push	acc
      00006A E5*00            [12]  216 	mov	a,_bp
      00006C 24 FB            [12]  217 	add	a,#0xfb
      00006E F8               [12]  218 	mov	r0,a
      00006F E6               [12]  219 	mov	a,@r0
      000070 C0 E0            [24]  220 	push	acc
      000072 08               [12]  221 	inc	r0
      000073 E6               [12]  222 	mov	a,@r0
      000074 C0 E0            [24]  223 	push	acc
      000076 E5*00            [12]  224 	mov	a,_bp
      000078 24 FD            [12]  225 	add	a,#0xfd
      00007A F8               [12]  226 	mov	r0,a
      00007B E6               [12]  227 	mov	a,@r0
      00007C C0 E0            [24]  228 	push	acc
      00007E 8E 82            [24]  229 	mov	dpl,r6
      000080 12r00r00         [24]  230 	lcall	_output_digit
      000083 E5 81            [12]  231 	mov	a,sp
      000085 24 FA            [12]  232 	add	a,#0xfa
      000087 F5 81            [12]  233 	mov	sp,a
      000089 D0 07            [24]  234 	pop	ar7
                                    235 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      00008B 53 07 0F         [24]  236 	anl	ar7,#0x0f
      00008E E5*00            [12]  237 	mov	a,_bp
      000090 24 F8            [12]  238 	add	a,#0xf8
      000092 F8               [12]  239 	mov	r0,a
      000093 E6               [12]  240 	mov	a,@r0
      000094 C0 E0            [24]  241 	push	acc
      000096 08               [12]  242 	inc	r0
      000097 E6               [12]  243 	mov	a,@r0
      000098 C0 E0            [24]  244 	push	acc
      00009A 08               [12]  245 	inc	r0
      00009B E6               [12]  246 	mov	a,@r0
      00009C C0 E0            [24]  247 	push	acc
      00009E E5*00            [12]  248 	mov	a,_bp
      0000A0 24 FB            [12]  249 	add	a,#0xfb
      0000A2 F8               [12]  250 	mov	r0,a
      0000A3 E6               [12]  251 	mov	a,@r0
      0000A4 C0 E0            [24]  252 	push	acc
      0000A6 08               [12]  253 	inc	r0
      0000A7 E6               [12]  254 	mov	a,@r0
      0000A8 C0 E0            [24]  255 	push	acc
      0000AA E5*00            [12]  256 	mov	a,_bp
      0000AC 24 FD            [12]  257 	add	a,#0xfd
      0000AE F8               [12]  258 	mov	r0,a
      0000AF E6               [12]  259 	mov	a,@r0
      0000B0 C0 E0            [24]  260 	push	acc
      0000B2 8F 82            [24]  261 	mov	dpl,r7
      0000B4 12r00r00         [24]  262 	lcall	_output_digit
      0000B7 E5 81            [12]  263 	mov	a,sp
      0000B9 24 FA            [12]  264 	add	a,#0xfa
      0000BB F5 81            [12]  265 	mov	sp,a
                                    266 ;	printf_large.c:153: }
      0000BD D0*00            [24]  267 	pop	_bp
      0000BF 22               [24]  268 	ret
                                    269 ;------------------------------------------------------------
                                    270 ;Allocation info for local variables in function 'calculate_digit'
                                    271 ;------------------------------------------------------------
                                    272 ;radix                     Allocated to stack - _bp -3
                                    273 ;value                     Allocated to registers r1 
                                    274 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    275 ;pb4                       Allocated to registers r0 
                                    276 ;i                         Allocated to stack - _bp +1
                                    277 ;------------------------------------------------------------
                                    278 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    279 ;	-----------------------------------------
                                    280 ;	 function calculate_digit
                                    281 ;	-----------------------------------------
      0000C0                        282 _calculate_digit:
      0000C0 C0*00            [24]  283 	push	_bp
      0000C2 85 81*00         [24]  284 	mov	_bp,sp
      0000C5 05 81            [12]  285 	inc	sp
      0000C7 A9 82            [24]  286 	mov	r1,dpl
                                    287 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000C9 87 04            [24]  288 	mov	ar4,@r1
      0000CB 09               [12]  289 	inc	r1
      0000CC 87 05            [24]  290 	mov	ar5,@r1
      0000CE 09               [12]  291 	inc	r1
      0000CF 87 06            [24]  292 	mov	ar6,@r1
      0000D1 09               [12]  293 	inc	r1
      0000D2 87 07            [24]  294 	mov	ar7,@r1
      0000D4 19               [12]  295 	dec	r1
      0000D5 19               [12]  296 	dec	r1
      0000D6 19               [12]  297 	dec	r1
                                    298 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000D7 74 04            [12]  299 	mov	a,#0x04
      0000D9 29               [12]  300 	add	a,r1
      0000DA F8               [12]  301 	mov	r0,a
                                    302 ;	printf_large.c:174: do
      0000DB C0 00            [24]  303 	push	ar0
      0000DD A8*00            [24]  304 	mov	r0,_bp
      0000DF 08               [12]  305 	inc	r0
      0000E0 76 20            [12]  306 	mov	@r0,#0x20
      0000E2 D0 00            [24]  307 	pop	ar0
      0000E4                        308 00103$:
                                    309 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      0000E4 C0 01            [24]  310 	push	ar1
      0000E6 E6               [12]  311 	mov	a,@r0
      0000E7 26               [12]  312 	add	a,@r0
      0000E8 FA               [12]  313 	mov	r2,a
      0000E9 EF               [12]  314 	mov	a,r7
      0000EA 23               [12]  315 	rl	a
      0000EB 54 01            [12]  316 	anl	a,#0x01
      0000ED 42 02            [12]  317 	orl	ar2,a
      0000EF A6 02            [24]  318 	mov	@r0,ar2
                                    319 ;	printf_large.c:177: ul <<= 1;
      0000F1 EC               [12]  320 	mov	a,r4
      0000F2 2C               [12]  321 	add	a,r4
      0000F3 FC               [12]  322 	mov	r4,a
      0000F4 ED               [12]  323 	mov	a,r5
      0000F5 33               [12]  324 	rlc	a
      0000F6 FD               [12]  325 	mov	r5,a
      0000F7 EE               [12]  326 	mov	a,r6
      0000F8 33               [12]  327 	rlc	a
      0000F9 FE               [12]  328 	mov	r6,a
      0000FA EF               [12]  329 	mov	a,r7
      0000FB 33               [12]  330 	rlc	a
      0000FC FF               [12]  331 	mov	r7,a
                                    332 ;	printf_large.c:179: if (radix <= *pb4 )
      0000FD C0 00            [24]  333 	push	ar0
      0000FF E5*00            [12]  334 	mov	a,_bp
      000101 24 FD            [12]  335 	add	a,#0xfd
      000103 F8               [12]  336 	mov	r0,a
      000104 C3               [12]  337 	clr	c
      000105 EA               [12]  338 	mov	a,r2
      000106 96               [12]  339 	subb	a,@r0
      000107 D0 00            [24]  340 	pop	ar0
      000109 D0 01            [24]  341 	pop	ar1
      00010B 40 14            [24]  342 	jc	00104$
                                    343 ;	printf_large.c:181: *pb4 -= radix;
      00010D 86 03            [24]  344 	mov	ar3,@r0
      00010F C0 00            [24]  345 	push	ar0
      000111 E5*00            [12]  346 	mov	a,_bp
      000113 24 FD            [12]  347 	add	a,#0xfd
      000115 F8               [12]  348 	mov	r0,a
      000116 EB               [12]  349 	mov	a,r3
      000117 C3               [12]  350 	clr	c
      000118 96               [12]  351 	subb	a,@r0
      000119 FB               [12]  352 	mov	r3,a
      00011A D0 00            [24]  353 	pop	ar0
      00011C A6 03            [24]  354 	mov	@r0,ar3
                                    355 ;	printf_large.c:182: ul |= 1;
      00011E 43 04 01         [24]  356 	orl	ar4,#0x01
      000121                        357 00104$:
                                    358 ;	printf_large.c:184: } while (--i);
      000121 C0 00            [24]  359 	push	ar0
      000123 A8*00            [24]  360 	mov	r0,_bp
      000125 08               [12]  361 	inc	r0
      000126 16               [12]  362 	dec	@r0
      000127 A8*00            [24]  363 	mov	r0,_bp
      000129 08               [12]  364 	inc	r0
      00012A E6               [12]  365 	mov	a,@r0
      00012B D0 00            [24]  366 	pop	ar0
      00012D 70 B5            [24]  367 	jnz	00103$
                                    368 ;	printf_large.c:185: value->ul = ul;
      00012F A7 04            [24]  369 	mov	@r1,ar4
      000131 09               [12]  370 	inc	r1
      000132 A7 05            [24]  371 	mov	@r1,ar5
      000134 09               [12]  372 	inc	r1
      000135 A7 06            [24]  373 	mov	@r1,ar6
      000137 09               [12]  374 	inc	r1
      000138 A7 07            [24]  375 	mov	@r1,ar7
                                    376 ;	printf_large.c:186: }
      00013A 15 81            [12]  377 	dec	sp
      00013C D0*00            [24]  378 	pop	_bp
      00013E 22               [24]  379 	ret
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function '_print_format'
                                    382 ;------------------------------------------------------------
                                    383 ;pvoid                     Allocated to stack - _bp -5
                                    384 ;format                    Allocated to stack - _bp -8
                                    385 ;ap                        Allocated to stack - _bp -9
                                    386 ;pfn                       Allocated to stack - _bp +1
                                    387 ;left_justify              Allocated to registers b0 
                                    388 ;zero_padding              Allocated to registers b1 
                                    389 ;prefix_sign               Allocated to registers b2 
                                    390 ;prefix_space              Allocated to registers b3 
                                    391 ;signed_argument           Allocated to registers b4 
                                    392 ;char_argument             Allocated to registers b5 
                                    393 ;long_argument             Allocated to registers b6 
                                    394 ;float_argument            Allocated to registers b7 
                                    395 ;lower_case                Allocated to stack - _bp +19
                                    396 ;value                     Allocated to stack - _bp +20
                                    397 ;charsOutputted            Allocated to stack - _bp +25
                                    398 ;lsd                       Allocated to registers b5 
                                    399 ;radix                     Allocated to stack - _bp +27
                                    400 ;width                     Allocated to registers 
                                    401 ;decimals                  Allocated to stack - _bp +28
                                    402 ;length                    Allocated to stack - _bp +30
                                    403 ;c                         Allocated to registers r6 
                                    404 ;memtype                   Allocated to registers r7 
                                    405 ;store                     Allocated to stack - _bp +32
                                    406 ;pstore                    Allocated to registers r7 
                                    407 ;sloc0                     Allocated to stack - _bp +3
                                    408 ;sloc1                     Allocated to stack - _bp +4
                                    409 ;sloc2                     Allocated to stack - _bp +5
                                    410 ;sloc3                     Allocated to stack - _bp +39
                                    411 ;sloc4                     Allocated to stack - _bp +6
                                    412 ;sloc5                     Allocated to stack - _bp +8
                                    413 ;sloc6                     Allocated to stack - _bp +11
                                    414 ;sloc7                     Allocated to stack - _bp +12
                                    415 ;sloc8                     Allocated to stack - _bp +14
                                    416 ;sloc9                     Allocated to stack - _bp +16
                                    417 ;sloc10                    Allocated to stack - _bp +18
                                    418 ;------------------------------------------------------------
                                    419 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    420 ;	-----------------------------------------
                                    421 ;	 function _print_format
                                    422 ;	-----------------------------------------
      00013F                        423 __print_format:
      00013F C0*00            [24]  424 	push	_bp
      000141 85 81*00         [24]  425 	mov	_bp,sp
      000144 C0 82            [24]  426 	push	dpl
      000146 C0 83            [24]  427 	push	dph
      000148 E5 81            [12]  428 	mov	a,sp
      00014A 24 23            [12]  429 	add	a,#0x23
      00014C F5 81            [12]  430 	mov	sp,a
                                    431 ;	printf_large.c:466: charsOutputted = 0;
      00014E E5*00            [12]  432 	mov	a,_bp
      000150 24 0C            [12]  433 	add	a,#0x0c
      000152 F8               [12]  434 	mov	r0,a
      000153 E4               [12]  435 	clr	a
      000154 F6               [12]  436 	mov	@r0,a
      000155 08               [12]  437 	inc	r0
      000156 F6               [12]  438 	mov	@r0,a
                                    439 ;	printf_large.c:475: while( c=*format++ )
      000157 E5*00            [12]  440 	mov	a,_bp
      000159 24 05            [12]  441 	add	a,#0x05
      00015B F8               [12]  442 	mov	r0,a
      00015C E5*00            [12]  443 	mov	a,_bp
      00015E 24 14            [12]  444 	add	a,#0x14
      000160 F6               [12]  445 	mov	@r0,a
      000161 E5*00            [12]  446 	mov	a,_bp
      000163 24 20            [12]  447 	add	a,#0x20
      000165 C8               [12]  448 	xch	a,r0
      000166 E5*00            [12]  449 	mov	a,_bp
      000168 24 12            [12]  450 	add	a,#0x12
      00016A C8               [12]  451 	xch	a,r0
      00016B 24 05            [12]  452 	add	a,#0x05
      00016D F6               [12]  453 	mov	@r0,a
      00016E E5*00            [12]  454 	mov	a,_bp
      000170 24 14            [12]  455 	add	a,#0x14
      000172 F8               [12]  456 	mov	r0,a
      000173 24 04            [12]  457 	add	a,#0x04
      000175 FA               [12]  458 	mov	r2,a
      000176 E5*00            [12]  459 	mov	a,_bp
      000178 24 03            [12]  460 	add	a,#0x03
      00017A F9               [12]  461 	mov	r1,a
      00017B A7 02            [24]  462 	mov	@r1,ar2
      00017D E5*00            [12]  463 	mov	a,_bp
      00017F 24 04            [12]  464 	add	a,#0x04
      000181 F9               [12]  465 	mov	r1,a
      000182 A7 02            [24]  466 	mov	@r1,ar2
      000184                        467 00243$:
      000184 E5*00            [12]  468 	mov	a,_bp
      000186 24 F8            [12]  469 	add	a,#0xf8
      000188 F9               [12]  470 	mov	r1,a
      000189 87 06            [24]  471 	mov	ar6,@r1
      00018B 09               [12]  472 	inc	r1
      00018C 87 05            [24]  473 	mov	ar5,@r1
      00018E 09               [12]  474 	inc	r1
      00018F 87 04            [24]  475 	mov	ar4,@r1
      000191 8E 82            [24]  476 	mov	dpl,r6
      000193 8D 83            [24]  477 	mov	dph,r5
      000195 8C F0            [24]  478 	mov	b,r4
      000197 12r00r00         [24]  479 	lcall	__gptrget
      00019A FF               [12]  480 	mov	r7,a
      00019B E5*00            [12]  481 	mov	a,_bp
      00019D 24 F8            [12]  482 	add	a,#0xf8
      00019F F9               [12]  483 	mov	r1,a
      0001A0 74 01            [12]  484 	mov	a,#0x01
      0001A2 2E               [12]  485 	add	a,r6
      0001A3 F7               [12]  486 	mov	@r1,a
      0001A4 E4               [12]  487 	clr	a
      0001A5 3D               [12]  488 	addc	a,r5
      0001A6 09               [12]  489 	inc	r1
      0001A7 F7               [12]  490 	mov	@r1,a
      0001A8 09               [12]  491 	inc	r1
      0001A9 A7 04            [24]  492 	mov	@r1,ar4
      0001AB EF               [12]  493 	mov	a,r7
      0001AC FE               [12]  494 	mov	r6,a
      0001AD 70 03            [24]  495 	jnz	00664$
      0001AF 02r11rE9         [24]  496 	ljmp	00245$
      0001B2                        497 00664$:
                                    498 ;	printf_large.c:477: if ( c=='%' )
      0001B2 BE 25 02         [24]  499 	cjne	r6,#0x25,00665$
      0001B5 80 03            [24]  500 	sjmp	00666$
      0001B7                        501 00665$:
      0001B7 02r11rAB         [24]  502 	ljmp	00241$
      0001BA                        503 00666$:
                                    504 ;	printf_large.c:479: left_justify    = 0;
                                    505 ;	assignBit
      0001BA C2*00            [12]  506 	clr	b0
                                    507 ;	printf_large.c:480: zero_padding    = 0;
                                    508 ;	assignBit
      0001BC C2*00            [12]  509 	clr	b1
                                    510 ;	printf_large.c:481: prefix_sign     = 0;
                                    511 ;	assignBit
      0001BE C2*00            [12]  512 	clr	b2
                                    513 ;	printf_large.c:482: prefix_space    = 0;
                                    514 ;	assignBit
      0001C0 C2*00            [12]  515 	clr	b3
                                    516 ;	printf_large.c:483: signed_argument = 0;
                                    517 ;	assignBit
      0001C2 C2*00            [12]  518 	clr	b4
                                    519 ;	printf_large.c:484: char_argument   = 0;
                                    520 ;	assignBit
      0001C4 C2*00            [12]  521 	clr	b5
                                    522 ;	printf_large.c:485: long_argument   = 0;
                                    523 ;	assignBit
      0001C6 C2*00            [12]  524 	clr	b6
                                    525 ;	printf_large.c:486: float_argument  = 0;
                                    526 ;	assignBit
      0001C8 C2*00            [12]  527 	clr	b7
                                    528 ;	printf_large.c:487: radix           = 0;
      0001CA E5*00            [12]  529 	mov	a,_bp
      0001CC 24 1B            [12]  530 	add	a,#0x1b
      0001CE F9               [12]  531 	mov	r1,a
      0001CF 77 00            [12]  532 	mov	@r1,#0x00
                                    533 ;	printf_large.c:488: width           = 0;
      0001D1 E5*00            [12]  534 	mov	a,_bp
      0001D3 24 06            [12]  535 	add	a,#0x06
      0001D5 F9               [12]  536 	mov	r1,a
      0001D6 E4               [12]  537 	clr	a
      0001D7 F7               [12]  538 	mov	@r1,a
      0001D8 09               [12]  539 	inc	r1
      0001D9 F7               [12]  540 	mov	@r1,a
                                    541 ;	printf_large.c:489: decimals        = -1;
      0001DA E5*00            [12]  542 	mov	a,_bp
      0001DC 24 1C            [12]  543 	add	a,#0x1c
      0001DE F9               [12]  544 	mov	r1,a
      0001DF 77 FF            [12]  545 	mov	@r1,#0xff
      0001E1 09               [12]  546 	inc	r1
      0001E2 77 FF            [12]  547 	mov	@r1,#0xff
                                    548 ;	printf_large.c:491: get_conversion_spec:
      0001E4 E5*00            [12]  549 	mov	a,_bp
      0001E6 24 F8            [12]  550 	add	a,#0xf8
      0001E8 F9               [12]  551 	mov	r1,a
      0001E9 C0 00            [24]  552 	push	ar0
      0001EB E5*00            [12]  553 	mov	a,_bp
      0001ED 24 08            [12]  554 	add	a,#0x08
      0001EF F8               [12]  555 	mov	r0,a
      0001F0 E7               [12]  556 	mov	a,@r1
      0001F1 F6               [12]  557 	mov	@r0,a
      0001F2 09               [12]  558 	inc	r1
      0001F3 E7               [12]  559 	mov	a,@r1
      0001F4 08               [12]  560 	inc	r0
      0001F5 F6               [12]  561 	mov	@r0,a
      0001F6 09               [12]  562 	inc	r1
      0001F7 E7               [12]  563 	mov	a,@r1
      0001F8 08               [12]  564 	inc	r0
      0001F9 F6               [12]  565 	mov	@r0,a
      0001FA D0 00            [24]  566 	pop	ar0
      0001FC                        567 00101$:
                                    568 ;	printf_large.c:493: c = *format++;
      0001FC E5*00            [12]  569 	mov	a,_bp
      0001FE 24 08            [12]  570 	add	a,#0x08
      000200 F9               [12]  571 	mov	r1,a
      000201 87 82            [24]  572 	mov	dpl,@r1
      000203 09               [12]  573 	inc	r1
      000204 87 83            [24]  574 	mov	dph,@r1
      000206 09               [12]  575 	inc	r1
      000207 87 F0            [24]  576 	mov	b,@r1
      000209 C0 00            [24]  577 	push	ar0
      00020B E5*00            [12]  578 	mov	a,_bp
      00020D 24 0B            [12]  579 	add	a,#0x0b
      00020F F8               [12]  580 	mov	r0,a
      000210 12r00r00         [24]  581 	lcall	__gptrget
      000213 F6               [12]  582 	mov	@r0,a
      000214 A3               [24]  583 	inc	dptr
      000215 19               [12]  584 	dec	r1
      000216 19               [12]  585 	dec	r1
      000217 A7 82            [24]  586 	mov	@r1,dpl
      000219 09               [12]  587 	inc	r1
      00021A A7 83            [24]  588 	mov	@r1,dph
      00021C E5*00            [12]  589 	mov	a,_bp
      00021E 24 08            [12]  590 	add	a,#0x08
      000220 F9               [12]  591 	mov	r1,a
      000221 E5*00            [12]  592 	mov	a,_bp
      000223 24 F8            [12]  593 	add	a,#0xf8
      000225 F8               [12]  594 	mov	r0,a
      000226 E7               [12]  595 	mov	a,@r1
      000227 F6               [12]  596 	mov	@r0,a
      000228 09               [12]  597 	inc	r1
      000229 E7               [12]  598 	mov	a,@r1
      00022A 08               [12]  599 	inc	r0
      00022B F6               [12]  600 	mov	@r0,a
      00022C 09               [12]  601 	inc	r1
      00022D E7               [12]  602 	mov	a,@r1
      00022E 08               [12]  603 	inc	r0
      00022F F6               [12]  604 	mov	@r0,a
      000230 D0 00            [24]  605 	pop	ar0
                                    606 ;	printf_large.c:495: if (c=='%')
      000232 E5*00            [12]  607 	mov	a,_bp
      000234 24 0B            [12]  608 	add	a,#0x0b
      000236 F9               [12]  609 	mov	r1,a
      000237 B7 25 43         [24]  610 	cjne	@r1,#0x25,00103$
                                    611 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      00023A C0 02            [24]  612 	push	ar2
      00023C C0 00            [24]  613 	push	ar0
      00023E E5*00            [12]  614 	mov	a,_bp
      000240 24 FB            [12]  615 	add	a,#0xfb
      000242 F9               [12]  616 	mov	r1,a
      000243 E7               [12]  617 	mov	a,@r1
      000244 C0 E0            [24]  618 	push	acc
      000246 09               [12]  619 	inc	r1
      000247 E7               [12]  620 	mov	a,@r1
      000248 C0 E0            [24]  621 	push	acc
      00024A 09               [12]  622 	inc	r1
      00024B E7               [12]  623 	mov	a,@r1
      00024C C0 E0            [24]  624 	push	acc
      00024E 12r02r53         [24]  625 	lcall	00669$
      000251 80 12            [24]  626 	sjmp	00670$
      000253                        627 00669$:
      000253 A9*00            [24]  628 	mov	r1,_bp
      000255 09               [12]  629 	inc	r1
      000256 E7               [12]  630 	mov	a,@r1
      000257 C0 E0            [24]  631 	push	acc
      000259 09               [12]  632 	inc	r1
      00025A E7               [12]  633 	mov	a,@r1
      00025B C0 E0            [24]  634 	push	acc
      00025D E5*00            [12]  635 	mov	a,_bp
      00025F 24 0B            [12]  636 	add	a,#0x0b
      000261 F9               [12]  637 	mov	r1,a
      000262 87 82            [24]  638 	mov	dpl,@r1
      000264 22               [24]  639 	ret
      000265                        640 00670$:
      000265 15 81            [12]  641 	dec	sp
      000267 15 81            [12]  642 	dec	sp
      000269 15 81            [12]  643 	dec	sp
      00026B D0 00            [24]  644 	pop	ar0
      00026D D0 02            [24]  645 	pop	ar2
      00026F E5*00            [12]  646 	mov	a,_bp
      000271 24 0C            [12]  647 	add	a,#0x0c
      000273 F9               [12]  648 	mov	r1,a
      000274 07               [12]  649 	inc	@r1
      000275 B7 00 02         [24]  650 	cjne	@r1,#0x00,00671$
      000278 09               [12]  651 	inc	r1
      000279 07               [12]  652 	inc	@r1
      00027A                        653 00671$:
                                    654 ;	printf_large.c:498: continue;
      00027A 02r01r84         [24]  655 	ljmp	00243$
      00027D                        656 00103$:
                                    657 ;	printf_large.c:501: if (isdigit(c))
      00027D E5*00            [12]  658 	mov	a,_bp
      00027F 24 0B            [12]  659 	add	a,#0x0b
      000281 F9               [12]  660 	mov	r1,a
      000282 B7 30 00         [24]  661 	cjne	@r1,#0x30,00672$
      000285                        662 00672$:
      000285 50 03            [24]  663 	jnc	00673$
      000287 02r03r3E         [24]  664 	ljmp	00110$
      00028A                        665 00673$:
      00028A E5*00            [12]  666 	mov	a,_bp
      00028C 24 0B            [12]  667 	add	a,#0x0b
      00028E F9               [12]  668 	mov	r1,a
      00028F E7               [12]  669 	mov	a,@r1
      000290 24 C6            [12]  670 	add	a,#0xff - 0x39
      000292 50 03            [24]  671 	jnc	00674$
      000294 02r03r3E         [24]  672 	ljmp	00110$
      000297                        673 00674$:
                                    674 ;	printf_large.c:503: if (decimals==-1)
      000297 E5*00            [12]  675 	mov	a,_bp
      000299 24 1C            [12]  676 	add	a,#0x1c
      00029B F9               [12]  677 	mov	r1,a
      00029C B7 FF 59         [24]  678 	cjne	@r1,#0xff,00107$
      00029F 09               [12]  679 	inc	r1
      0002A0 B7 FF 55         [24]  680 	cjne	@r1,#0xff,00107$
                                    681 ;	printf_large.c:505: width = 10*width + c - '0';
      0002A3 C0 02            [24]  682 	push	ar2
      0002A5 C0 00            [24]  683 	push	ar0
      0002A7 C0*00            [24]  684 	push	bits
      0002A9 E5*00            [12]  685 	mov	a,_bp
      0002AB 24 06            [12]  686 	add	a,#0x06
      0002AD F9               [12]  687 	mov	r1,a
      0002AE E7               [12]  688 	mov	a,@r1
      0002AF C0 E0            [24]  689 	push	acc
      0002B1 09               [12]  690 	inc	r1
      0002B2 E7               [12]  691 	mov	a,@r1
      0002B3 C0 E0            [24]  692 	push	acc
      0002B5 90 00 0A         [24]  693 	mov	dptr,#0x000a
      0002B8 12r00r00         [24]  694 	lcall	__mulint
      0002BB AB 82            [24]  695 	mov	r3,dpl
      0002BD AF 83            [24]  696 	mov	r7,dph
      0002BF 15 81            [12]  697 	dec	sp
      0002C1 15 81            [12]  698 	dec	sp
      0002C3 D0*00            [24]  699 	pop	bits
      0002C5 D0 00            [24]  700 	pop	ar0
      0002C7 D0 02            [24]  701 	pop	ar2
      0002C9 E5*00            [12]  702 	mov	a,_bp
      0002CB 24 0B            [12]  703 	add	a,#0x0b
      0002CD F9               [12]  704 	mov	r1,a
      0002CE 87 05            [24]  705 	mov	ar5,@r1
      0002D0 7E 00            [12]  706 	mov	r6,#0x00
      0002D2 ED               [12]  707 	mov	a,r5
      0002D3 2B               [12]  708 	add	a,r3
      0002D4 FB               [12]  709 	mov	r3,a
      0002D5 EE               [12]  710 	mov	a,r6
      0002D6 3F               [12]  711 	addc	a,r7
      0002D7 FF               [12]  712 	mov	r7,a
      0002D8 E5*00            [12]  713 	mov	a,_bp
      0002DA 24 06            [12]  714 	add	a,#0x06
      0002DC F9               [12]  715 	mov	r1,a
      0002DD EB               [12]  716 	mov	a,r3
      0002DE 24 D0            [12]  717 	add	a,#0xd0
      0002E0 F7               [12]  718 	mov	@r1,a
      0002E1 EF               [12]  719 	mov	a,r7
      0002E2 34 FF            [12]  720 	addc	a,#0xff
      0002E4 09               [12]  721 	inc	r1
      0002E5 F7               [12]  722 	mov	@r1,a
                                    723 ;	printf_large.c:506: if (width == 0)
      0002E6 E5*00            [12]  724 	mov	a,_bp
      0002E8 24 06            [12]  725 	add	a,#0x06
      0002EA F9               [12]  726 	mov	r1,a
      0002EB E7               [12]  727 	mov	a,@r1
      0002EC 09               [12]  728 	inc	r1
      0002ED 47               [12]  729 	orl	a,@r1
      0002EE 60 03            [24]  730 	jz	00677$
      0002F0 02r01rFC         [24]  731 	ljmp	00101$
      0002F3                        732 00677$:
                                    733 ;	printf_large.c:509: zero_padding = 1;
                                    734 ;	assignBit
      0002F3 D2*00            [12]  735 	setb	b1
      0002F5 02r01rFC         [24]  736 	ljmp	00101$
      0002F8                        737 00107$:
                                    738 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      0002F8 C0 02            [24]  739 	push	ar2
      0002FA C0 00            [24]  740 	push	ar0
      0002FC C0*00            [24]  741 	push	bits
      0002FE E5*00            [12]  742 	mov	a,_bp
      000300 24 1C            [12]  743 	add	a,#0x1c
      000302 F9               [12]  744 	mov	r1,a
      000303 E7               [12]  745 	mov	a,@r1
      000304 C0 E0            [24]  746 	push	acc
      000306 09               [12]  747 	inc	r1
      000307 E7               [12]  748 	mov	a,@r1
      000308 C0 E0            [24]  749 	push	acc
      00030A 90 00 0A         [24]  750 	mov	dptr,#0x000a
      00030D 12r00r00         [24]  751 	lcall	__mulint
      000310 AE 82            [24]  752 	mov	r6,dpl
      000312 AF 83            [24]  753 	mov	r7,dph
      000314 15 81            [12]  754 	dec	sp
      000316 15 81            [12]  755 	dec	sp
      000318 D0*00            [24]  756 	pop	bits
      00031A D0 00            [24]  757 	pop	ar0
      00031C D0 02            [24]  758 	pop	ar2
      00031E E5*00            [12]  759 	mov	a,_bp
      000320 24 0B            [12]  760 	add	a,#0x0b
      000322 F9               [12]  761 	mov	r1,a
      000323 87 04            [24]  762 	mov	ar4,@r1
      000325 7D 00            [12]  763 	mov	r5,#0x00
      000327 EC               [12]  764 	mov	a,r4
      000328 2E               [12]  765 	add	a,r6
      000329 FE               [12]  766 	mov	r6,a
      00032A ED               [12]  767 	mov	a,r5
      00032B 3F               [12]  768 	addc	a,r7
      00032C FF               [12]  769 	mov	r7,a
      00032D E5*00            [12]  770 	mov	a,_bp
      00032F 24 1C            [12]  771 	add	a,#0x1c
      000331 F9               [12]  772 	mov	r1,a
      000332 EE               [12]  773 	mov	a,r6
      000333 24 D0            [12]  774 	add	a,#0xd0
      000335 F7               [12]  775 	mov	@r1,a
      000336 EF               [12]  776 	mov	a,r7
      000337 34 FF            [12]  777 	addc	a,#0xff
      000339 09               [12]  778 	inc	r1
      00033A F7               [12]  779 	mov	@r1,a
                                    780 ;	printf_large.c:516: goto get_conversion_spec;
      00033B 02r01rFC         [24]  781 	ljmp	00101$
      00033E                        782 00110$:
                                    783 ;	printf_large.c:519: if (c=='.')
      00033E E5*00            [12]  784 	mov	a,_bp
      000340 24 0B            [12]  785 	add	a,#0x0b
      000342 F9               [12]  786 	mov	r1,a
      000343 B7 2E 1D         [24]  787 	cjne	@r1,#0x2e,00115$
                                    788 ;	printf_large.c:521: if (decimals==-1)
      000346 E5*00            [12]  789 	mov	a,_bp
      000348 24 1C            [12]  790 	add	a,#0x1c
      00034A F9               [12]  791 	mov	r1,a
      00034B B7 FF 06         [24]  792 	cjne	@r1,#0xff,00680$
      00034E 09               [12]  793 	inc	r1
      00034F B7 FF 02         [24]  794 	cjne	@r1,#0xff,00680$
      000352 80 03            [24]  795 	sjmp	00681$
      000354                        796 00680$:
      000354 02r01rFC         [24]  797 	ljmp	00101$
      000357                        798 00681$:
                                    799 ;	printf_large.c:522: decimals=0;
      000357 E5*00            [12]  800 	mov	a,_bp
      000359 24 1C            [12]  801 	add	a,#0x1c
      00035B F9               [12]  802 	mov	r1,a
      00035C E4               [12]  803 	clr	a
      00035D F7               [12]  804 	mov	@r1,a
      00035E 09               [12]  805 	inc	r1
      00035F F7               [12]  806 	mov	@r1,a
                                    807 ;	printf_large.c:525: goto get_conversion_spec;
      000360 02r01rFC         [24]  808 	ljmp	00101$
      000363                        809 00115$:
                                    810 ;	printf_large.c:528: if (islower(c))
      000363 E5*00            [12]  811 	mov	a,_bp
      000365 24 0B            [12]  812 	add	a,#0x0b
      000367 F9               [12]  813 	mov	r1,a
      000368 B7 61 00         [24]  814 	cjne	@r1,#0x61,00682$
      00036B                        815 00682$:
      00036B 40 1C            [24]  816 	jc	00117$
      00036D E5*00            [12]  817 	mov	a,_bp
      00036F 24 0B            [12]  818 	add	a,#0x0b
      000371 F9               [12]  819 	mov	r1,a
      000372 E7               [12]  820 	mov	a,@r1
      000373 24 85            [12]  821 	add	a,#0xff - 0x7a
      000375 40 12            [24]  822 	jc	00117$
                                    823 ;	printf_large.c:530: c = toupper(c);
      000377 E5*00            [12]  824 	mov	a,_bp
      000379 24 0B            [12]  825 	add	a,#0x0b
      00037B F9               [12]  826 	mov	r1,a
      00037C E7               [12]  827 	mov	a,@r1
      00037D 54 DF            [12]  828 	anl	a,#0xdf
      00037F F7               [12]  829 	mov	@r1,a
                                    830 ;	printf_large.c:531: lower_case = 1;
      000380 E5*00            [12]  831 	mov	a,_bp
      000382 24 13            [12]  832 	add	a,#0x13
      000384 F9               [12]  833 	mov	r1,a
      000385 77 01            [12]  834 	mov	@r1,#0x01
      000387 80 07            [24]  835 	sjmp	00118$
      000389                        836 00117$:
                                    837 ;	printf_large.c:534: lower_case = 0;
      000389 E5*00            [12]  838 	mov	a,_bp
      00038B 24 13            [12]  839 	add	a,#0x13
      00038D F9               [12]  840 	mov	r1,a
      00038E 77 00            [12]  841 	mov	@r1,#0x00
      000390                        842 00118$:
                                    843 ;	printf_large.c:536: switch( c )
      000390 E5*00            [12]  844 	mov	a,_bp
      000392 24 0B            [12]  845 	add	a,#0x0b
      000394 F9               [12]  846 	mov	r1,a
      000395 B7 20 03         [24]  847 	cjne	@r1,#0x20,00685$
      000398 02r04r62         [24]  848 	ljmp	00122$
      00039B                        849 00685$:
      00039B E5*00            [12]  850 	mov	a,_bp
      00039D 24 0B            [12]  851 	add	a,#0x0b
      00039F F9               [12]  852 	mov	r1,a
      0003A0 B7 2B 03         [24]  853 	cjne	@r1,#0x2b,00686$
      0003A3 02r04r5D         [24]  854 	ljmp	00121$
      0003A6                        855 00686$:
      0003A6 E5*00            [12]  856 	mov	a,_bp
      0003A8 24 0B            [12]  857 	add	a,#0x0b
      0003AA F9               [12]  858 	mov	r1,a
      0003AB B7 2D 03         [24]  859 	cjne	@r1,#0x2d,00687$
      0003AE 02r04r58         [24]  860 	ljmp	00120$
      0003B1                        861 00687$:
      0003B1 E5*00            [12]  862 	mov	a,_bp
      0003B3 24 0B            [12]  863 	add	a,#0x0b
      0003B5 F9               [12]  864 	mov	r1,a
      0003B6 B7 42 03         [24]  865 	cjne	@r1,#0x42,00688$
      0003B9 02r04r67         [24]  866 	ljmp	00123$
      0003BC                        867 00688$:
      0003BC E5*00            [12]  868 	mov	a,_bp
      0003BE 24 0B            [12]  869 	add	a,#0x0b
      0003C0 F9               [12]  870 	mov	r1,a
      0003C1 B7 43 03         [24]  871 	cjne	@r1,#0x43,00689$
      0003C4 02r04r71         [24]  872 	ljmp	00129$
      0003C7                        873 00689$:
      0003C7 E5*00            [12]  874 	mov	a,_bp
      0003C9 24 0B            [12]  875 	add	a,#0x0b
      0003CB F9               [12]  876 	mov	r1,a
      0003CC B7 44 03         [24]  877 	cjne	@r1,#0x44,00690$
      0003CF 02r09rDD         [24]  878 	ljmp	00166$
      0003D2                        879 00690$:
      0003D2 E5*00            [12]  880 	mov	a,_bp
      0003D4 24 0B            [12]  881 	add	a,#0x0b
      0003D6 F9               [12]  882 	mov	r1,a
      0003D7 B7 46 03         [24]  883 	cjne	@r1,#0x46,00691$
      0003DA 02r0Ar04         [24]  884 	ljmp	00170$
      0003DD                        885 00691$:
      0003DD E5*00            [12]  886 	mov	a,_bp
      0003DF 24 0B            [12]  887 	add	a,#0x0b
      0003E1 F9               [12]  888 	mov	r1,a
      0003E2 B7 48 03         [24]  889 	cjne	@r1,#0x48,00692$
      0003E5 02r01rFC         [24]  890 	ljmp	00101$
      0003E8                        891 00692$:
      0003E8 E5*00            [12]  892 	mov	a,_bp
      0003EA 24 0B            [12]  893 	add	a,#0x0b
      0003EC F9               [12]  894 	mov	r1,a
      0003ED B7 49 03         [24]  895 	cjne	@r1,#0x49,00693$
      0003F0 02r09rDD         [24]  896 	ljmp	00166$
      0003F3                        897 00693$:
      0003F3 E5*00            [12]  898 	mov	a,_bp
      0003F5 24 0B            [12]  899 	add	a,#0x0b
      0003F7 F9               [12]  900 	mov	r1,a
      0003F8 B7 4A 03         [24]  901 	cjne	@r1,#0x4a,00694$
      0003FB 02r01rFC         [24]  902 	ljmp	00101$
      0003FE                        903 00694$:
      0003FE E5*00            [12]  904 	mov	a,_bp
      000400 24 0B            [12]  905 	add	a,#0x0b
      000402 F9               [12]  906 	mov	r1,a
      000403 B7 4C 02         [24]  907 	cjne	@r1,#0x4c,00695$
      000406 80 64            [24]  908 	sjmp	00128$
      000408                        909 00695$:
      000408 E5*00            [12]  910 	mov	a,_bp
      00040A 24 0B            [12]  911 	add	a,#0x0b
      00040C F9               [12]  912 	mov	r1,a
      00040D B7 4F 03         [24]  913 	cjne	@r1,#0x4f,00696$
      000410 02r09rE9         [24]  914 	ljmp	00167$
      000413                        915 00696$:
      000413 E5*00            [12]  916 	mov	a,_bp
      000415 24 0B            [12]  917 	add	a,#0x0b
      000417 F9               [12]  918 	mov	r1,a
      000418 B7 50 03         [24]  919 	cjne	@r1,#0x50,00697$
      00041B 02r07rAF         [24]  920 	ljmp	00152$
      00041E                        921 00697$:
      00041E E5*00            [12]  922 	mov	a,_bp
      000420 24 0B            [12]  923 	add	a,#0x0b
      000422 F9               [12]  924 	mov	r1,a
      000423 B7 53 03         [24]  925 	cjne	@r1,#0x53,00698$
      000426 02r04rE1         [24]  926 	ljmp	00133$
      000429                        927 00698$:
      000429 E5*00            [12]  928 	mov	a,_bp
      00042B 24 0B            [12]  929 	add	a,#0x0b
      00042D F9               [12]  930 	mov	r1,a
      00042E B7 54 03         [24]  931 	cjne	@r1,#0x54,00699$
      000431 02r01rFC         [24]  932 	ljmp	00101$
      000434                        933 00699$:
      000434 E5*00            [12]  934 	mov	a,_bp
      000436 24 0B            [12]  935 	add	a,#0x0b
      000438 F9               [12]  936 	mov	r1,a
      000439 B7 55 03         [24]  937 	cjne	@r1,#0x55,00700$
      00043C 02r09rF2         [24]  938 	ljmp	00168$
      00043F                        939 00700$:
      00043F E5*00            [12]  940 	mov	a,_bp
      000441 24 0B            [12]  941 	add	a,#0x0b
      000443 F9               [12]  942 	mov	r1,a
      000444 B7 58 03         [24]  943 	cjne	@r1,#0x58,00701$
      000447 02r09rFB         [24]  944 	ljmp	00169$
      00044A                        945 00701$:
      00044A E5*00            [12]  946 	mov	a,_bp
      00044C 24 0B            [12]  947 	add	a,#0x0b
      00044E F9               [12]  948 	mov	r1,a
      00044F B7 5A 03         [24]  949 	cjne	@r1,#0x5a,00702$
      000452 02r01rFC         [24]  950 	ljmp	00101$
      000455                        951 00702$:
      000455 02r0Ar08         [24]  952 	ljmp	00171$
                                    953 ;	printf_large.c:538: case '-':
      000458                        954 00120$:
                                    955 ;	printf_large.c:539: left_justify = 1;
                                    956 ;	assignBit
      000458 D2*00            [12]  957 	setb	b0
                                    958 ;	printf_large.c:540: goto get_conversion_spec;
      00045A 02r01rFC         [24]  959 	ljmp	00101$
                                    960 ;	printf_large.c:541: case '+':
      00045D                        961 00121$:
                                    962 ;	printf_large.c:542: prefix_sign = 1;
                                    963 ;	assignBit
      00045D D2*00            [12]  964 	setb	b2
                                    965 ;	printf_large.c:543: goto get_conversion_spec;
      00045F 02r01rFC         [24]  966 	ljmp	00101$
                                    967 ;	printf_large.c:544: case ' ':
      000462                        968 00122$:
                                    969 ;	printf_large.c:545: prefix_space = 1;
                                    970 ;	assignBit
      000462 D2*00            [12]  971 	setb	b3
                                    972 ;	printf_large.c:546: goto get_conversion_spec;
      000464 02r01rFC         [24]  973 	ljmp	00101$
                                    974 ;	printf_large.c:547: case 'B': /* byte */
      000467                        975 00123$:
                                    976 ;	printf_large.c:548: char_argument = 1;
                                    977 ;	assignBit
      000467 D2*00            [12]  978 	setb	b5
                                    979 ;	printf_large.c:549: goto get_conversion_spec;
      000469 02r01rFC         [24]  980 	ljmp	00101$
                                    981 ;	printf_large.c:556: case 'L': /* long */
      00046C                        982 00128$:
                                    983 ;	printf_large.c:557: long_argument = 1;
                                    984 ;	assignBit
      00046C D2*00            [12]  985 	setb	b6
                                    986 ;	printf_large.c:558: goto get_conversion_spec;
      00046E 02r01rFC         [24]  987 	ljmp	00101$
                                    988 ;	printf_large.c:560: case 'C':
      000471                        989 00129$:
                                    990 ;	printf_large.c:561: if( char_argument )
      000471 30*00 17         [24]  991 	jnb	b5,00131$
                                    992 ;	printf_large.c:562: c = va_arg(ap,char);
      000474 C0 00            [24]  993 	push	ar0
      000476 E5*00            [12]  994 	mov	a,_bp
      000478 24 F7            [12]  995 	add	a,#0xf7
      00047A F8               [12]  996 	mov	r0,a
      00047B E6               [12]  997 	mov	a,@r0
      00047C 14               [12]  998 	dec	a
      00047D F9               [12]  999 	mov	r1,a
      00047E E5*00            [12] 1000 	mov	a,_bp
      000480 24 F7            [12] 1001 	add	a,#0xf7
      000482 F8               [12] 1002 	mov	r0,a
      000483 A6 01            [24] 1003 	mov	@r0,ar1
      000485 D0 00            [24] 1004 	pop	ar0
      000487 87 06            [24] 1005 	mov	ar6,@r1
      000489 80 14            [24] 1006 	sjmp	00132$
      00048B                       1007 00131$:
                                   1008 ;	printf_large.c:564: c = va_arg(ap,int);
      00048B E5*00            [12] 1009 	mov	a,_bp
      00048D 24 F7            [12] 1010 	add	a,#0xf7
      00048F F9               [12] 1011 	mov	r1,a
      000490 E7               [12] 1012 	mov	a,@r1
      000491 24 FE            [12] 1013 	add	a,#0xfe
      000493 FD               [12] 1014 	mov	r5,a
      000494 E5*00            [12] 1015 	mov	a,_bp
      000496 24 F7            [12] 1016 	add	a,#0xf7
      000498 F9               [12] 1017 	mov	r1,a
      000499 A7 05            [24] 1018 	mov	@r1,ar5
      00049B 8D 01            [24] 1019 	mov	ar1,r5
      00049D 87 06            [24] 1020 	mov	ar6,@r1
      00049F                       1021 00132$:
                                   1022 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      00049F C0 02            [24] 1023 	push	ar2
      0004A1 C0 00            [24] 1024 	push	ar0
      0004A3 C0*00            [24] 1025 	push	bits
      0004A5 E5*00            [12] 1026 	mov	a,_bp
      0004A7 24 FB            [12] 1027 	add	a,#0xfb
      0004A9 F9               [12] 1028 	mov	r1,a
      0004AA E7               [12] 1029 	mov	a,@r1
      0004AB C0 E0            [24] 1030 	push	acc
      0004AD 09               [12] 1031 	inc	r1
      0004AE E7               [12] 1032 	mov	a,@r1
      0004AF C0 E0            [24] 1033 	push	acc
      0004B1 09               [12] 1034 	inc	r1
      0004B2 E7               [12] 1035 	mov	a,@r1
      0004B3 C0 E0            [24] 1036 	push	acc
      0004B5 12r04rBA         [24] 1037 	lcall	00704$
      0004B8 80 0D            [24] 1038 	sjmp	00705$
      0004BA                       1039 00704$:
      0004BA A9*00            [24] 1040 	mov	r1,_bp
      0004BC 09               [12] 1041 	inc	r1
      0004BD E7               [12] 1042 	mov	a,@r1
      0004BE C0 E0            [24] 1043 	push	acc
      0004C0 09               [12] 1044 	inc	r1
      0004C1 E7               [12] 1045 	mov	a,@r1
      0004C2 C0 E0            [24] 1046 	push	acc
      0004C4 8E 82            [24] 1047 	mov	dpl,r6
      0004C6 22               [24] 1048 	ret
      0004C7                       1049 00705$:
      0004C7 15 81            [12] 1050 	dec	sp
      0004C9 15 81            [12] 1051 	dec	sp
      0004CB 15 81            [12] 1052 	dec	sp
      0004CD D0*00            [24] 1053 	pop	bits
      0004CF D0 00            [24] 1054 	pop	ar0
      0004D1 D0 02            [24] 1055 	pop	ar2
      0004D3 E5*00            [12] 1056 	mov	a,_bp
      0004D5 24 0C            [12] 1057 	add	a,#0x0c
      0004D7 F9               [12] 1058 	mov	r1,a
      0004D8 07               [12] 1059 	inc	@r1
      0004D9 B7 00 02         [24] 1060 	cjne	@r1,#0x00,00706$
      0004DC 09               [12] 1061 	inc	r1
      0004DD 07               [12] 1062 	inc	@r1
      0004DE                       1063 00706$:
                                   1064 ;	printf_large.c:566: break;
      0004DE 02r0Ar6C         [24] 1065 	ljmp	00172$
                                   1066 ;	printf_large.c:568: case 'S':
      0004E1                       1067 00133$:
                                   1068 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      0004E1 E5*00            [12] 1069 	mov	a,_bp
      0004E3 24 14            [12] 1070 	add	a,#0x14
      0004E5 F9               [12] 1071 	mov	r1,a
      0004E6 C0 00            [24] 1072 	push	ar0
      0004E8 E5*00            [12] 1073 	mov	a,_bp
      0004EA 24 F7            [12] 1074 	add	a,#0xf7
      0004EC F8               [12] 1075 	mov	r0,a
      0004ED E6               [12] 1076 	mov	a,@r0
      0004EE 24 FD            [12] 1077 	add	a,#0xfd
      0004F0 FE               [12] 1078 	mov	r6,a
      0004F1 E5*00            [12] 1079 	mov	a,_bp
      0004F3 24 F7            [12] 1080 	add	a,#0xf7
      0004F5 F8               [12] 1081 	mov	r0,a
      0004F6 A6 06            [24] 1082 	mov	@r0,ar6
      0004F8 A8 06            [24] 1083 	mov	r0,ar6
      0004FA 86 04            [24] 1084 	mov	ar4,@r0
      0004FC 08               [12] 1085 	inc	r0
      0004FD 86 05            [24] 1086 	mov	ar5,@r0
      0004FF 08               [12] 1087 	inc	r0
      000500 86 06            [24] 1088 	mov	ar6,@r0
      000502 D0 00            [24] 1089 	pop	ar0
      000504 A7 04            [24] 1090 	mov	@r1,ar4
      000506 09               [12] 1091 	inc	r1
      000507 A7 05            [24] 1092 	mov	@r1,ar5
      000509 09               [12] 1093 	inc	r1
      00050A A7 06            [24] 1094 	mov	@r1,ar6
      00050C 19               [12] 1095 	dec	r1
      00050D 19               [12] 1096 	dec	r1
                                   1097 ;	printf_large.c:582: length = strlen(PTR);
      00050E 8C 82            [24] 1098 	mov	dpl,r4
      000510 8D 83            [24] 1099 	mov	dph,r5
      000512 8E F0            [24] 1100 	mov	b,r6
      000514 C0 02            [24] 1101 	push	ar2
      000516 C0 01            [24] 1102 	push	ar1
      000518 C0 00            [24] 1103 	push	ar0
      00051A C0*00            [24] 1104 	push	bits
      00051C 12r00r00         [24] 1105 	lcall	_strlen
      00051F C0 00            [24] 1106 	push	ar0
      000521 C8               [12] 1107 	xch	a,r0
      000522 E5*00            [12] 1108 	mov	a,_bp
      000524 24 10            [12] 1109 	add	a,#0x10
      000526 C8               [12] 1110 	xch	a,r0
      000527 A6 82            [24] 1111 	mov	@r0,dpl
      000529 08               [12] 1112 	inc	r0
      00052A A6 83            [24] 1113 	mov	@r0,dph
      00052C D0 00            [24] 1114 	pop	ar0
      00052E D0*00            [24] 1115 	pop	bits
      000530 D0 00            [24] 1116 	pop	ar0
      000532 D0 01            [24] 1117 	pop	ar1
      000534 D0 02            [24] 1118 	pop	ar2
                                   1119 ;	printf_large.c:584: if ( decimals == -1 )
      000536 C0 00            [24] 1120 	push	ar0
      000538 E5*00            [12] 1121 	mov	a,_bp
      00053A 24 1C            [12] 1122 	add	a,#0x1c
      00053C F8               [12] 1123 	mov	r0,a
      00053D B6 FF 06         [24] 1124 	cjne	@r0,#0xff,00707$
      000540 08               [12] 1125 	inc	r0
      000541 B6 FF 02         [24] 1126 	cjne	@r0,#0xff,00707$
      000544 80 04            [24] 1127 	sjmp	00708$
      000546                       1128 00707$:
      000546 D0 00            [24] 1129 	pop	ar0
      000548 80 16            [24] 1130 	sjmp	00135$
      00054A                       1131 00708$:
                                   1132 ;	printf_large.c:586: decimals = length;
      00054A E5*00            [12] 1133 	mov	a,_bp
      00054C 24 10            [12] 1134 	add	a,#0x10
      00054E F8               [12] 1135 	mov	r0,a
      00054F C0 01            [24] 1136 	push	ar1
      000551 E5*00            [12] 1137 	mov	a,_bp
      000553 24 1C            [12] 1138 	add	a,#0x1c
      000555 F9               [12] 1139 	mov	r1,a
      000556 E6               [12] 1140 	mov	a,@r0
      000557 F7               [12] 1141 	mov	@r1,a
      000558 08               [12] 1142 	inc	r0
      000559 E6               [12] 1143 	mov	a,@r0
      00055A 09               [12] 1144 	inc	r1
      00055B F7               [12] 1145 	mov	@r1,a
      00055C D0 01            [24] 1146 	pop	ar1
      00055E D0 00            [24] 1147 	pop	ar0
      000560                       1148 00135$:
                                   1149 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000560 30*00 03         [24] 1150 	jnb	b0,00709$
      000563 02r06r38         [24] 1151 	ljmp	00289$
      000566                       1152 00709$:
      000566 C0 00            [24] 1153 	push	ar0
      000568 E5*00            [12] 1154 	mov	a,_bp
      00056A 24 10            [12] 1155 	add	a,#0x10
      00056C F8               [12] 1156 	mov	r0,a
      00056D C0 01            [24] 1157 	push	ar1
      00056F E5*00            [12] 1158 	mov	a,_bp
      000571 24 06            [12] 1159 	add	a,#0x06
      000573 F9               [12] 1160 	mov	r1,a
      000574 C3               [12] 1161 	clr	c
      000575 E6               [12] 1162 	mov	a,@r0
      000576 97               [12] 1163 	subb	a,@r1
      000577 08               [12] 1164 	inc	r0
      000578 E6               [12] 1165 	mov	a,@r0
      000579 09               [12] 1166 	inc	r1
      00057A 97               [12] 1167 	subb	a,@r1
      00057B D0 01            [24] 1168 	pop	ar1
      00057D D0 00            [24] 1169 	pop	ar0
      00057F 40 03            [24] 1170 	jc	00710$
      000581 02r06r38         [24] 1171 	ljmp	00289$
      000584                       1172 00710$:
                                   1173 ;	printf_large.c:590: width -= length;
      000584 C0 00            [24] 1174 	push	ar0
      000586 E5*00            [12] 1175 	mov	a,_bp
      000588 24 06            [12] 1176 	add	a,#0x06
      00058A F8               [12] 1177 	mov	r0,a
      00058B C0 01            [24] 1178 	push	ar1
      00058D E5*00            [12] 1179 	mov	a,_bp
      00058F 24 10            [12] 1180 	add	a,#0x10
      000591 F9               [12] 1181 	mov	r1,a
      000592 E6               [12] 1182 	mov	a,@r0
      000593 C3               [12] 1183 	clr	c
      000594 97               [12] 1184 	subb	a,@r1
      000595 FE               [12] 1185 	mov	r6,a
      000596 08               [12] 1186 	inc	r0
      000597 E6               [12] 1187 	mov	a,@r0
      000598 09               [12] 1188 	inc	r1
      000599 97               [12] 1189 	subb	a,@r1
      00059A FD               [12] 1190 	mov	r5,a
                                   1191 ;	printf_large.c:591: while( width-- != 0 )
      00059B E5*00            [12] 1192 	mov	a,_bp
      00059D 24 0C            [12] 1193 	add	a,#0x0c
      00059F F8               [12] 1194 	mov	r0,a
      0005A0 E5*00            [12] 1195 	mov	a,_bp
      0005A2 24 0E            [12] 1196 	add	a,#0x0e
      0005A4 F9               [12] 1197 	mov	r1,a
      0005A5 E6               [12] 1198 	mov	a,@r0
      0005A6 F7               [12] 1199 	mov	@r1,a
      0005A7 08               [12] 1200 	inc	r0
      0005A8 E6               [12] 1201 	mov	a,@r0
      0005A9 09               [12] 1202 	inc	r1
      0005AA F7               [12] 1203 	mov	@r1,a
      0005AB D0 01            [24] 1204 	pop	ar1
      0005AD D0 00            [24] 1205 	pop	ar0
      0005AF                       1206 00136$:
      0005AF 8E 04            [24] 1207 	mov	ar4,r6
      0005B1 8D 07            [24] 1208 	mov	ar7,r5
      0005B3 1E               [12] 1209 	dec	r6
      0005B4 BE FF 01         [24] 1210 	cjne	r6,#0xff,00711$
      0005B7 1D               [12] 1211 	dec	r5
      0005B8                       1212 00711$:
      0005B8 EC               [12] 1213 	mov	a,r4
      0005B9 4F               [12] 1214 	orl	a,r7
      0005BA 60 5A            [24] 1215 	jz	00329$
                                   1216 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      0005BC C0 06            [24] 1217 	push	ar6
      0005BE C0 05            [24] 1218 	push	ar5
      0005C0 C0 02            [24] 1219 	push	ar2
      0005C2 C0 01            [24] 1220 	push	ar1
      0005C4 C0 00            [24] 1221 	push	ar0
      0005C6 C0*00            [24] 1222 	push	bits
      0005C8 85 00 F0         [24] 1223 	mov	b,ar0
      0005CB E5*00            [12] 1224 	mov	a,_bp
      0005CD 24 FB            [12] 1225 	add	a,#0xfb
      0005CF F8               [12] 1226 	mov	r0,a
      0005D0 E6               [12] 1227 	mov	a,@r0
      0005D1 C0 E0            [24] 1228 	push	acc
      0005D3 08               [12] 1229 	inc	r0
      0005D4 E6               [12] 1230 	mov	a,@r0
      0005D5 C0 E0            [24] 1231 	push	acc
      0005D7 08               [12] 1232 	inc	r0
      0005D8 E6               [12] 1233 	mov	a,@r0
      0005D9 C0 E0            [24] 1234 	push	acc
      0005DB A8 F0            [24] 1235 	mov	r0,b
      0005DD 12r05rE2         [24] 1236 	lcall	00713$
      0005E0 80 11            [24] 1237 	sjmp	00714$
      0005E2                       1238 00713$:
      0005E2 85 00 F0         [24] 1239 	mov	b,ar0
      0005E5 A8*00            [24] 1240 	mov	r0,_bp
      0005E7 08               [12] 1241 	inc	r0
      0005E8 E6               [12] 1242 	mov	a,@r0
      0005E9 C0 E0            [24] 1243 	push	acc
      0005EB 08               [12] 1244 	inc	r0
      0005EC E6               [12] 1245 	mov	a,@r0
      0005ED C0 E0            [24] 1246 	push	acc
      0005EF 75 82 20         [24] 1247 	mov	dpl,#0x20
      0005F2 22               [24] 1248 	ret
      0005F3                       1249 00714$:
      0005F3 15 81            [12] 1250 	dec	sp
      0005F5 15 81            [12] 1251 	dec	sp
      0005F7 15 81            [12] 1252 	dec	sp
      0005F9 D0*00            [24] 1253 	pop	bits
      0005FB D0 00            [24] 1254 	pop	ar0
      0005FD D0 01            [24] 1255 	pop	ar1
      0005FF D0 02            [24] 1256 	pop	ar2
      000601 D0 05            [24] 1257 	pop	ar5
      000603 D0 06            [24] 1258 	pop	ar6
      000605 C0 00            [24] 1259 	push	ar0
      000607 E5*00            [12] 1260 	mov	a,_bp
      000609 24 0E            [12] 1261 	add	a,#0x0e
      00060B F8               [12] 1262 	mov	r0,a
      00060C 06               [12] 1263 	inc	@r0
      00060D B6 00 02         [24] 1264 	cjne	@r0,#0x00,00715$
      000610 08               [12] 1265 	inc	r0
      000611 06               [12] 1266 	inc	@r0
      000612                       1267 00715$:
      000612 D0 00            [24] 1268 	pop	ar0
                                   1269 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000614 80 99            [24] 1270 	sjmp	00136$
      000616                       1271 00329$:
      000616 C0 00            [24] 1272 	push	ar0
      000618 E5*00            [12] 1273 	mov	a,_bp
      00061A 24 0E            [12] 1274 	add	a,#0x0e
      00061C F8               [12] 1275 	mov	r0,a
      00061D C0 01            [24] 1276 	push	ar1
      00061F E5*00            [12] 1277 	mov	a,_bp
      000621 24 0C            [12] 1278 	add	a,#0x0c
      000623 F9               [12] 1279 	mov	r1,a
      000624 E6               [12] 1280 	mov	a,@r0
      000625 F7               [12] 1281 	mov	@r1,a
      000626 08               [12] 1282 	inc	r0
      000627 E6               [12] 1283 	mov	a,@r0
      000628 09               [12] 1284 	inc	r1
      000629 F7               [12] 1285 	mov	@r1,a
      00062A D0 01            [24] 1286 	pop	ar1
      00062C E5*00            [12] 1287 	mov	a,_bp
      00062E 24 06            [12] 1288 	add	a,#0x06
      000630 F8               [12] 1289 	mov	r0,a
      000631 A6 06            [24] 1290 	mov	@r0,ar6
      000633 08               [12] 1291 	inc	r0
      000634 A6 05            [24] 1292 	mov	@r0,ar5
      000636 D0 00            [24] 1293 	pop	ar0
      000638                       1294 00289$:
      000638 C0 00            [24] 1295 	push	ar0
      00063A E5*00            [12] 1296 	mov	a,_bp
      00063C 24 1C            [12] 1297 	add	a,#0x1c
      00063E F8               [12] 1298 	mov	r0,a
      00063F 86 04            [24] 1299 	mov	ar4,@r0
      000641 08               [12] 1300 	inc	r0
      000642 86 07            [24] 1301 	mov	ar7,@r0
      000644 E5*00            [12] 1302 	mov	a,_bp
      000646 24 0C            [12] 1303 	add	a,#0x0c
      000648 F8               [12] 1304 	mov	r0,a
      000649 C0 01            [24] 1305 	push	ar1
      00064B E5*00            [12] 1306 	mov	a,_bp
      00064D 24 0E            [12] 1307 	add	a,#0x0e
      00064F F9               [12] 1308 	mov	r1,a
      000650 E6               [12] 1309 	mov	a,@r0
      000651 F7               [12] 1310 	mov	@r1,a
      000652 08               [12] 1311 	inc	r0
      000653 E6               [12] 1312 	mov	a,@r0
      000654 09               [12] 1313 	inc	r1
      000655 F7               [12] 1314 	mov	@r1,a
      000656 D0 01            [24] 1315 	pop	ar1
      000658 D0 00            [24] 1316 	pop	ar0
      00065A                       1317 00143$:
      00065A 87 03            [24] 1318 	mov	ar3,@r1
      00065C 09               [12] 1319 	inc	r1
      00065D 87 05            [24] 1320 	mov	ar5,@r1
      00065F 09               [12] 1321 	inc	r1
      000660 87 06            [24] 1322 	mov	ar6,@r1
      000662 19               [12] 1323 	dec	r1
      000663 19               [12] 1324 	dec	r1
      000664 8B 82            [24] 1325 	mov	dpl,r3
      000666 8D 83            [24] 1326 	mov	dph,r5
      000668 8E F0            [24] 1327 	mov	b,r6
      00066A 12r00r00         [24] 1328 	lcall	__gptrget
      00066D FB               [12] 1329 	mov	r3,a
      00066E FE               [12] 1330 	mov	r6,a
      00066F 70 03            [24] 1331 	jnz	00716$
      000671 02r06rFA         [24] 1332 	ljmp	00330$
      000674                       1333 00716$:
      000674 C3               [12] 1334 	clr	c
      000675 E4               [12] 1335 	clr	a
      000676 9C               [12] 1336 	subb	a,r4
      000677 74 80            [12] 1337 	mov	a,#(0x00 ^ 0x80)
      000679 8F F0            [24] 1338 	mov	b,r7
      00067B 63 F0 80         [24] 1339 	xrl	b,#0x80
      00067E 95 F0            [12] 1340 	subb	a,b
      000680 50 78            [24] 1341 	jnc	00330$
      000682 1C               [12] 1342 	dec	r4
      000683 BC FF 01         [24] 1343 	cjne	r4,#0xff,00718$
      000686 1F               [12] 1344 	dec	r7
      000687                       1345 00718$:
                                   1346 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000687 C0 07            [24] 1347 	push	ar7
      000689 C0 04            [24] 1348 	push	ar4
      00068B C0 02            [24] 1349 	push	ar2
      00068D C0 01            [24] 1350 	push	ar1
      00068F C0 00            [24] 1351 	push	ar0
      000691 C0*00            [24] 1352 	push	bits
      000693 85 00 F0         [24] 1353 	mov	b,ar0
      000696 E5*00            [12] 1354 	mov	a,_bp
      000698 24 FB            [12] 1355 	add	a,#0xfb
      00069A F8               [12] 1356 	mov	r0,a
      00069B E6               [12] 1357 	mov	a,@r0
      00069C C0 E0            [24] 1358 	push	acc
      00069E 08               [12] 1359 	inc	r0
      00069F E6               [12] 1360 	mov	a,@r0
      0006A0 C0 E0            [24] 1361 	push	acc
      0006A2 08               [12] 1362 	inc	r0
      0006A3 E6               [12] 1363 	mov	a,@r0
      0006A4 C0 E0            [24] 1364 	push	acc
      0006A6 A8 F0            [24] 1365 	mov	r0,b
      0006A8 12r06rAD         [24] 1366 	lcall	00719$
      0006AB 80 10            [24] 1367 	sjmp	00720$
      0006AD                       1368 00719$:
      0006AD 85 00 F0         [24] 1369 	mov	b,ar0
      0006B0 A8*00            [24] 1370 	mov	r0,_bp
      0006B2 08               [12] 1371 	inc	r0
      0006B3 E6               [12] 1372 	mov	a,@r0
      0006B4 C0 E0            [24] 1373 	push	acc
      0006B6 08               [12] 1374 	inc	r0
      0006B7 E6               [12] 1375 	mov	a,@r0
      0006B8 C0 E0            [24] 1376 	push	acc
      0006BA 8E 82            [24] 1377 	mov	dpl,r6
      0006BC 22               [24] 1378 	ret
      0006BD                       1379 00720$:
      0006BD 15 81            [12] 1380 	dec	sp
      0006BF 15 81            [12] 1381 	dec	sp
      0006C1 15 81            [12] 1382 	dec	sp
      0006C3 D0*00            [24] 1383 	pop	bits
      0006C5 D0 00            [24] 1384 	pop	ar0
      0006C7 D0 01            [24] 1385 	pop	ar1
      0006C9 D0 02            [24] 1386 	pop	ar2
      0006CB D0 04            [24] 1387 	pop	ar4
      0006CD D0 07            [24] 1388 	pop	ar7
      0006CF C0 00            [24] 1389 	push	ar0
      0006D1 E5*00            [12] 1390 	mov	a,_bp
      0006D3 24 0E            [12] 1391 	add	a,#0x0e
      0006D5 F8               [12] 1392 	mov	r0,a
      0006D6 06               [12] 1393 	inc	@r0
      0006D7 B6 00 02         [24] 1394 	cjne	@r0,#0x00,00721$
      0006DA 08               [12] 1395 	inc	r0
      0006DB 06               [12] 1396 	inc	@r0
      0006DC                       1397 00721$:
      0006DC D0 00            [24] 1398 	pop	ar0
                                   1399 ;	printf_large.c:600: PTR++;
      0006DE 87 03            [24] 1400 	mov	ar3,@r1
      0006E0 09               [12] 1401 	inc	r1
      0006E1 87 05            [24] 1402 	mov	ar5,@r1
      0006E3 09               [12] 1403 	inc	r1
      0006E4 87 06            [24] 1404 	mov	ar6,@r1
      0006E6 19               [12] 1405 	dec	r1
      0006E7 19               [12] 1406 	dec	r1
      0006E8 0B               [12] 1407 	inc	r3
      0006E9 BB 00 01         [24] 1408 	cjne	r3,#0x00,00722$
      0006EC 0D               [12] 1409 	inc	r5
      0006ED                       1410 00722$:
      0006ED A7 03            [24] 1411 	mov	@r1,ar3
      0006EF 09               [12] 1412 	inc	r1
      0006F0 A7 05            [24] 1413 	mov	@r1,ar5
      0006F2 09               [12] 1414 	inc	r1
      0006F3 A7 06            [24] 1415 	mov	@r1,ar6
      0006F5 19               [12] 1416 	dec	r1
      0006F6 19               [12] 1417 	dec	r1
      0006F7 02r06r5A         [24] 1418 	ljmp	00143$
      0006FA                       1419 00330$:
      0006FA E5*00            [12] 1420 	mov	a,_bp
      0006FC 24 0E            [12] 1421 	add	a,#0x0e
      0006FE F9               [12] 1422 	mov	r1,a
      0006FF C0 00            [24] 1423 	push	ar0
      000701 E5*00            [12] 1424 	mov	a,_bp
      000703 24 0C            [12] 1425 	add	a,#0x0c
      000705 F8               [12] 1426 	mov	r0,a
      000706 E7               [12] 1427 	mov	a,@r1
      000707 F6               [12] 1428 	mov	@r0,a
      000708 09               [12] 1429 	inc	r1
      000709 E7               [12] 1430 	mov	a,@r1
      00070A 08               [12] 1431 	inc	r0
      00070B F6               [12] 1432 	mov	@r0,a
      00070C D0 00            [24] 1433 	pop	ar0
                                   1434 ;	printf_large.c:603: if ( left_justify && (length < width))
      00070E 20*00 03         [24] 1435 	jb	b0,00723$
      000711 02r0Ar6C         [24] 1436 	ljmp	00172$
      000714                       1437 00723$:
      000714 E5*00            [12] 1438 	mov	a,_bp
      000716 24 10            [12] 1439 	add	a,#0x10
      000718 F9               [12] 1440 	mov	r1,a
      000719 C0 00            [24] 1441 	push	ar0
      00071B E5*00            [12] 1442 	mov	a,_bp
      00071D 24 06            [12] 1443 	add	a,#0x06
      00071F F8               [12] 1444 	mov	r0,a
      000720 C3               [12] 1445 	clr	c
      000721 E7               [12] 1446 	mov	a,@r1
      000722 96               [12] 1447 	subb	a,@r0
      000723 09               [12] 1448 	inc	r1
      000724 E7               [12] 1449 	mov	a,@r1
      000725 08               [12] 1450 	inc	r0
      000726 96               [12] 1451 	subb	a,@r0
      000727 D0 00            [24] 1452 	pop	ar0
      000729 40 03            [24] 1453 	jc	00724$
      00072B 02r0Ar6C         [24] 1454 	ljmp	00172$
      00072E                       1455 00724$:
                                   1456 ;	printf_large.c:605: width -= length;
      00072E E5*00            [12] 1457 	mov	a,_bp
      000730 24 06            [12] 1458 	add	a,#0x06
      000732 F9               [12] 1459 	mov	r1,a
      000733 C0 00            [24] 1460 	push	ar0
      000735 E5*00            [12] 1461 	mov	a,_bp
      000737 24 10            [12] 1462 	add	a,#0x10
      000739 F8               [12] 1463 	mov	r0,a
      00073A E7               [12] 1464 	mov	a,@r1
      00073B C3               [12] 1465 	clr	c
      00073C 96               [12] 1466 	subb	a,@r0
      00073D FE               [12] 1467 	mov	r6,a
      00073E 09               [12] 1468 	inc	r1
      00073F E7               [12] 1469 	mov	a,@r1
      000740 08               [12] 1470 	inc	r0
      000741 96               [12] 1471 	subb	a,@r0
      000742 FF               [12] 1472 	mov	r7,a
                                   1473 ;	printf_large.c:606: while( width-- != 0 )
      000743 E5*00            [12] 1474 	mov	a,_bp
      000745 24 0E            [12] 1475 	add	a,#0x0e
      000747 F9               [12] 1476 	mov	r1,a
      000748 E5*00            [12] 1477 	mov	a,_bp
      00074A 24 19            [12] 1478 	add	a,#0x19
      00074C F8               [12] 1479 	mov	r0,a
      00074D E7               [12] 1480 	mov	a,@r1
      00074E F6               [12] 1481 	mov	@r0,a
      00074F 09               [12] 1482 	inc	r1
      000750 E7               [12] 1483 	mov	a,@r1
      000751 08               [12] 1484 	inc	r0
      000752 F6               [12] 1485 	mov	@r0,a
      000753 D0 00            [24] 1486 	pop	ar0
      000755                       1487 00146$:
      000755 8E 04            [24] 1488 	mov	ar4,r6
      000757 8F 05            [24] 1489 	mov	ar5,r7
      000759 1E               [12] 1490 	dec	r6
      00075A BE FF 01         [24] 1491 	cjne	r6,#0xff,00725$
      00075D 1F               [12] 1492 	dec	r7
      00075E                       1493 00725$:
      00075E EC               [12] 1494 	mov	a,r4
      00075F 4D               [12] 1495 	orl	a,r5
      000760 70 03            [24] 1496 	jnz	00726$
      000762 02r0Ar4E         [24] 1497 	ljmp	00331$
      000765                       1498 00726$:
                                   1499 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000765 C0 07            [24] 1500 	push	ar7
      000767 C0 06            [24] 1501 	push	ar6
      000769 C0 02            [24] 1502 	push	ar2
      00076B C0 00            [24] 1503 	push	ar0
      00076D C0*00            [24] 1504 	push	bits
      00076F E5*00            [12] 1505 	mov	a,_bp
      000771 24 FB            [12] 1506 	add	a,#0xfb
      000773 F9               [12] 1507 	mov	r1,a
      000774 E7               [12] 1508 	mov	a,@r1
      000775 C0 E0            [24] 1509 	push	acc
      000777 09               [12] 1510 	inc	r1
      000778 E7               [12] 1511 	mov	a,@r1
      000779 C0 E0            [24] 1512 	push	acc
      00077B 09               [12] 1513 	inc	r1
      00077C E7               [12] 1514 	mov	a,@r1
      00077D C0 E0            [24] 1515 	push	acc
      00077F 12r07r84         [24] 1516 	lcall	00727$
      000782 80 0E            [24] 1517 	sjmp	00728$
      000784                       1518 00727$:
      000784 A9*00            [24] 1519 	mov	r1,_bp
      000786 09               [12] 1520 	inc	r1
      000787 E7               [12] 1521 	mov	a,@r1
      000788 C0 E0            [24] 1522 	push	acc
      00078A 09               [12] 1523 	inc	r1
      00078B E7               [12] 1524 	mov	a,@r1
      00078C C0 E0            [24] 1525 	push	acc
      00078E 75 82 20         [24] 1526 	mov	dpl,#0x20
      000791 22               [24] 1527 	ret
      000792                       1528 00728$:
      000792 15 81            [12] 1529 	dec	sp
      000794 15 81            [12] 1530 	dec	sp
      000796 15 81            [12] 1531 	dec	sp
      000798 D0*00            [24] 1532 	pop	bits
      00079A D0 00            [24] 1533 	pop	ar0
      00079C D0 02            [24] 1534 	pop	ar2
      00079E D0 06            [24] 1535 	pop	ar6
      0007A0 D0 07            [24] 1536 	pop	ar7
      0007A2 E5*00            [12] 1537 	mov	a,_bp
      0007A4 24 19            [12] 1538 	add	a,#0x19
      0007A6 F9               [12] 1539 	mov	r1,a
      0007A7 07               [12] 1540 	inc	@r1
      0007A8 B7 00 02         [24] 1541 	cjne	@r1,#0x00,00729$
      0007AB 09               [12] 1542 	inc	r1
      0007AC 07               [12] 1543 	inc	@r1
      0007AD                       1544 00729$:
                                   1545 ;	printf_large.c:613: case 'P':
      0007AD 80 A6            [24] 1546 	sjmp	00146$
      0007AF                       1547 00152$:
                                   1548 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      0007AF E5*00            [12] 1549 	mov	a,_bp
      0007B1 24 14            [12] 1550 	add	a,#0x14
      0007B3 F9               [12] 1551 	mov	r1,a
      0007B4 C0 00            [24] 1552 	push	ar0
      0007B6 E5*00            [12] 1553 	mov	a,_bp
      0007B8 24 F7            [12] 1554 	add	a,#0xf7
      0007BA F8               [12] 1555 	mov	r0,a
      0007BB E6               [12] 1556 	mov	a,@r0
      0007BC 24 FD            [12] 1557 	add	a,#0xfd
      0007BE FD               [12] 1558 	mov	r5,a
      0007BF E5*00            [12] 1559 	mov	a,_bp
      0007C1 24 F7            [12] 1560 	add	a,#0xf7
      0007C3 F8               [12] 1561 	mov	r0,a
      0007C4 A6 05            [24] 1562 	mov	@r0,ar5
      0007C6 A8 05            [24] 1563 	mov	r0,ar5
      0007C8 86 03            [24] 1564 	mov	ar3,@r0
      0007CA 08               [12] 1565 	inc	r0
      0007CB 86 04            [24] 1566 	mov	ar4,@r0
      0007CD 08               [12] 1567 	inc	r0
      0007CE 86 05            [24] 1568 	mov	ar5,@r0
      0007D0 D0 00            [24] 1569 	pop	ar0
      0007D2 A7 03            [24] 1570 	mov	@r1,ar3
      0007D4 09               [12] 1571 	inc	r1
      0007D5 A7 04            [24] 1572 	mov	@r1,ar4
      0007D7 09               [12] 1573 	inc	r1
      0007D8 A7 05            [24] 1574 	mov	@r1,ar5
      0007DA 19               [12] 1575 	dec	r1
      0007DB 19               [12] 1576 	dec	r1
                                   1577 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      0007DC E5*00            [12] 1578 	mov	a,_bp
      0007DE 24 14            [12] 1579 	add	a,#0x14
      0007E0 FE               [12] 1580 	mov	r6,a
      0007E1 24 02            [12] 1581 	add	a,#0x02
      0007E3 F9               [12] 1582 	mov	r1,a
      0007E4 87 07            [24] 1583 	mov	ar7,@r1
                                   1584 ;	printf_large.c:638: if (memtype >= 0x80)
      0007E6 BF 80 00         [24] 1585 	cjne	r7,#0x80,00730$
      0007E9                       1586 00730$:
      0007E9 40 04            [24] 1587 	jc	00160$
                                   1588 ;	printf_large.c:639: c = 'C';
      0007EB 7D 43            [12] 1589 	mov	r5,#0x43
      0007ED 80 14            [24] 1590 	sjmp	00161$
      0007EF                       1591 00160$:
                                   1592 ;	printf_large.c:640: else if (memtype >= 0x60)
      0007EF BF 60 00         [24] 1593 	cjne	r7,#0x60,00732$
      0007F2                       1594 00732$:
      0007F2 40 04            [24] 1595 	jc	00157$
                                   1596 ;	printf_large.c:641: c = 'P';
      0007F4 7D 50            [12] 1597 	mov	r5,#0x50
      0007F6 80 0B            [24] 1598 	sjmp	00161$
      0007F8                       1599 00157$:
                                   1600 ;	printf_large.c:642: else if (memtype >= 0x40)
      0007F8 BF 40 00         [24] 1601 	cjne	r7,#0x40,00734$
      0007FB                       1602 00734$:
      0007FB 40 04            [24] 1603 	jc	00154$
                                   1604 ;	printf_large.c:643: c = 'I';
      0007FD 7D 49            [12] 1605 	mov	r5,#0x49
      0007FF 80 02            [24] 1606 	sjmp	00161$
      000801                       1607 00154$:
                                   1608 ;	printf_large.c:645: c = 'X';
      000801 7D 58            [12] 1609 	mov	r5,#0x58
      000803                       1610 00161$:
                                   1611 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000803 C0 06            [24] 1612 	push	ar6
      000805 C0 05            [24] 1613 	push	ar5
      000807 C0 02            [24] 1614 	push	ar2
      000809 C0 00            [24] 1615 	push	ar0
      00080B C0*00            [24] 1616 	push	bits
      00080D E5*00            [12] 1617 	mov	a,_bp
      00080F 24 FB            [12] 1618 	add	a,#0xfb
      000811 F9               [12] 1619 	mov	r1,a
      000812 E7               [12] 1620 	mov	a,@r1
      000813 C0 E0            [24] 1621 	push	acc
      000815 09               [12] 1622 	inc	r1
      000816 E7               [12] 1623 	mov	a,@r1
      000817 C0 E0            [24] 1624 	push	acc
      000819 09               [12] 1625 	inc	r1
      00081A E7               [12] 1626 	mov	a,@r1
      00081B C0 E0            [24] 1627 	push	acc
      00081D 12r08r22         [24] 1628 	lcall	00736$
      000820 80 0D            [24] 1629 	sjmp	00737$
      000822                       1630 00736$:
      000822 A9*00            [24] 1631 	mov	r1,_bp
      000824 09               [12] 1632 	inc	r1
      000825 E7               [12] 1633 	mov	a,@r1
      000826 C0 E0            [24] 1634 	push	acc
      000828 09               [12] 1635 	inc	r1
      000829 E7               [12] 1636 	mov	a,@r1
      00082A C0 E0            [24] 1637 	push	acc
      00082C 8D 82            [24] 1638 	mov	dpl,r5
      00082E 22               [24] 1639 	ret
      00082F                       1640 00737$:
      00082F 15 81            [12] 1641 	dec	sp
      000831 15 81            [12] 1642 	dec	sp
      000833 15 81            [12] 1643 	dec	sp
      000835 D0*00            [24] 1644 	pop	bits
      000837 D0 00            [24] 1645 	pop	ar0
      000839 D0 02            [24] 1646 	pop	ar2
      00083B D0 05            [24] 1647 	pop	ar5
      00083D D0 06            [24] 1648 	pop	ar6
      00083F E5*00            [12] 1649 	mov	a,_bp
      000841 24 0C            [12] 1650 	add	a,#0x0c
      000843 F9               [12] 1651 	mov	r1,a
      000844 74 01            [12] 1652 	mov	a,#0x01
      000846 27               [12] 1653 	add	a,@r1
      000847 FC               [12] 1654 	mov	r4,a
      000848 E4               [12] 1655 	clr	a
      000849 09               [12] 1656 	inc	r1
      00084A 37               [12] 1657 	addc	a,@r1
      00084B FB               [12] 1658 	mov	r3,a
                                   1659 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      00084C C0 06            [24] 1660 	push	ar6
      00084E C0 05            [24] 1661 	push	ar5
      000850 C0 04            [24] 1662 	push	ar4
      000852 C0 03            [24] 1663 	push	ar3
      000854 C0 02            [24] 1664 	push	ar2
      000856 C0 00            [24] 1665 	push	ar0
      000858 C0*00            [24] 1666 	push	bits
      00085A E5*00            [12] 1667 	mov	a,_bp
      00085C 24 FB            [12] 1668 	add	a,#0xfb
      00085E F9               [12] 1669 	mov	r1,a
      00085F E7               [12] 1670 	mov	a,@r1
      000860 C0 E0            [24] 1671 	push	acc
      000862 09               [12] 1672 	inc	r1
      000863 E7               [12] 1673 	mov	a,@r1
      000864 C0 E0            [24] 1674 	push	acc
      000866 09               [12] 1675 	inc	r1
      000867 E7               [12] 1676 	mov	a,@r1
      000868 C0 E0            [24] 1677 	push	acc
      00086A 12r08r6F         [24] 1678 	lcall	00738$
      00086D 80 0E            [24] 1679 	sjmp	00739$
      00086F                       1680 00738$:
      00086F A9*00            [24] 1681 	mov	r1,_bp
      000871 09               [12] 1682 	inc	r1
      000872 E7               [12] 1683 	mov	a,@r1
      000873 C0 E0            [24] 1684 	push	acc
      000875 09               [12] 1685 	inc	r1
      000876 E7               [12] 1686 	mov	a,@r1
      000877 C0 E0            [24] 1687 	push	acc
      000879 75 82 3A         [24] 1688 	mov	dpl,#0x3a
      00087C 22               [24] 1689 	ret
      00087D                       1690 00739$:
      00087D 15 81            [12] 1691 	dec	sp
      00087F 15 81            [12] 1692 	dec	sp
      000881 15 81            [12] 1693 	dec	sp
      000883 D0*00            [24] 1694 	pop	bits
      000885 D0 00            [24] 1695 	pop	ar0
      000887 D0 02            [24] 1696 	pop	ar2
      000889 D0 03            [24] 1697 	pop	ar3
      00088B D0 04            [24] 1698 	pop	ar4
      00088D D0 05            [24] 1699 	pop	ar5
      00088F D0 06            [24] 1700 	pop	ar6
      000891 0C               [12] 1701 	inc	r4
      000892 BC 00 01         [24] 1702 	cjne	r4,#0x00,00740$
      000895 0B               [12] 1703 	inc	r3
      000896                       1704 00740$:
                                   1705 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000896 C0 06            [24] 1706 	push	ar6
      000898 C0 05            [24] 1707 	push	ar5
      00089A C0 04            [24] 1708 	push	ar4
      00089C C0 03            [24] 1709 	push	ar3
      00089E C0 02            [24] 1710 	push	ar2
      0008A0 C0 00            [24] 1711 	push	ar0
      0008A2 C0*00            [24] 1712 	push	bits
      0008A4 E5*00            [12] 1713 	mov	a,_bp
      0008A6 24 FB            [12] 1714 	add	a,#0xfb
      0008A8 F9               [12] 1715 	mov	r1,a
      0008A9 E7               [12] 1716 	mov	a,@r1
      0008AA C0 E0            [24] 1717 	push	acc
      0008AC 09               [12] 1718 	inc	r1
      0008AD E7               [12] 1719 	mov	a,@r1
      0008AE C0 E0            [24] 1720 	push	acc
      0008B0 09               [12] 1721 	inc	r1
      0008B1 E7               [12] 1722 	mov	a,@r1
      0008B2 C0 E0            [24] 1723 	push	acc
      0008B4 12r08rB9         [24] 1724 	lcall	00741$
      0008B7 80 0E            [24] 1725 	sjmp	00742$
      0008B9                       1726 00741$:
      0008B9 A9*00            [24] 1727 	mov	r1,_bp
      0008BB 09               [12] 1728 	inc	r1
      0008BC E7               [12] 1729 	mov	a,@r1
      0008BD C0 E0            [24] 1730 	push	acc
      0008BF 09               [12] 1731 	inc	r1
      0008C0 E7               [12] 1732 	mov	a,@r1
      0008C1 C0 E0            [24] 1733 	push	acc
      0008C3 75 82 30         [24] 1734 	mov	dpl,#0x30
      0008C6 22               [24] 1735 	ret
      0008C7                       1736 00742$:
      0008C7 15 81            [12] 1737 	dec	sp
      0008C9 15 81            [12] 1738 	dec	sp
      0008CB 15 81            [12] 1739 	dec	sp
      0008CD D0*00            [24] 1740 	pop	bits
      0008CF D0 00            [24] 1741 	pop	ar0
      0008D1 D0 02            [24] 1742 	pop	ar2
      0008D3 D0 03            [24] 1743 	pop	ar3
      0008D5 D0 04            [24] 1744 	pop	ar4
      0008D7 D0 05            [24] 1745 	pop	ar5
      0008D9 D0 06            [24] 1746 	pop	ar6
      0008DB 0C               [12] 1747 	inc	r4
      0008DC BC 00 01         [24] 1748 	cjne	r4,#0x00,00743$
      0008DF 0B               [12] 1749 	inc	r3
      0008E0                       1750 00743$:
                                   1751 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      0008E0 C0 06            [24] 1752 	push	ar6
      0008E2 C0 05            [24] 1753 	push	ar5
      0008E4 C0 04            [24] 1754 	push	ar4
      0008E6 C0 03            [24] 1755 	push	ar3
      0008E8 C0 02            [24] 1756 	push	ar2
      0008EA C0 00            [24] 1757 	push	ar0
      0008EC C0*00            [24] 1758 	push	bits
      0008EE E5*00            [12] 1759 	mov	a,_bp
      0008F0 24 FB            [12] 1760 	add	a,#0xfb
      0008F2 F9               [12] 1761 	mov	r1,a
      0008F3 E7               [12] 1762 	mov	a,@r1
      0008F4 C0 E0            [24] 1763 	push	acc
      0008F6 09               [12] 1764 	inc	r1
      0008F7 E7               [12] 1765 	mov	a,@r1
      0008F8 C0 E0            [24] 1766 	push	acc
      0008FA 09               [12] 1767 	inc	r1
      0008FB E7               [12] 1768 	mov	a,@r1
      0008FC C0 E0            [24] 1769 	push	acc
      0008FE 12r09r03         [24] 1770 	lcall	00744$
      000901 80 0E            [24] 1771 	sjmp	00745$
      000903                       1772 00744$:
      000903 A9*00            [24] 1773 	mov	r1,_bp
      000905 09               [12] 1774 	inc	r1
      000906 E7               [12] 1775 	mov	a,@r1
      000907 C0 E0            [24] 1776 	push	acc
      000909 09               [12] 1777 	inc	r1
      00090A E7               [12] 1778 	mov	a,@r1
      00090B C0 E0            [24] 1779 	push	acc
      00090D 75 82 78         [24] 1780 	mov	dpl,#0x78
      000910 22               [24] 1781 	ret
      000911                       1782 00745$:
      000911 15 81            [12] 1783 	dec	sp
      000913 15 81            [12] 1784 	dec	sp
      000915 15 81            [12] 1785 	dec	sp
      000917 D0*00            [24] 1786 	pop	bits
      000919 D0 00            [24] 1787 	pop	ar0
      00091B D0 02            [24] 1788 	pop	ar2
      00091D D0 03            [24] 1789 	pop	ar3
      00091F D0 04            [24] 1790 	pop	ar4
      000921 D0 05            [24] 1791 	pop	ar5
      000923 D0 06            [24] 1792 	pop	ar6
      000925 74 01            [12] 1793 	mov	a,#0x01
      000927 2C               [12] 1794 	add	a,r4
      000928 FC               [12] 1795 	mov	r4,a
      000929 E4               [12] 1796 	clr	a
      00092A 3B               [12] 1797 	addc	a,r3
      00092B FF               [12] 1798 	mov	r7,a
                                   1799 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      00092C BD 49 02         [24] 1800 	cjne	r5,#0x49,00746$
      00092F 80 52            [24] 1801 	sjmp	00163$
      000931                       1802 00746$:
                                   1803 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000931 BD 50 02         [24] 1804 	cjne	r5,#0x50,00747$
      000934 80 4D            [24] 1805 	sjmp	00163$
      000936                       1806 00747$:
                                   1807 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      000936 EE               [12] 1808 	mov	a,r6
      000937 04               [12] 1809 	inc	a
      000938 F9               [12] 1810 	mov	r1,a
      000939 87 05            [24] 1811 	mov	ar5,@r1
      00093B C0 07            [24] 1812 	push	ar7
      00093D C0 04            [24] 1813 	push	ar4
      00093F C0 02            [24] 1814 	push	ar2
      000941 C0 00            [24] 1815 	push	ar0
      000943 C0*00            [24] 1816 	push	bits
      000945 E5*00            [12] 1817 	mov	a,_bp
      000947 24 FB            [12] 1818 	add	a,#0xfb
      000949 F9               [12] 1819 	mov	r1,a
      00094A E7               [12] 1820 	mov	a,@r1
      00094B C0 E0            [24] 1821 	push	acc
      00094D 09               [12] 1822 	inc	r1
      00094E E7               [12] 1823 	mov	a,@r1
      00094F C0 E0            [24] 1824 	push	acc
      000951 09               [12] 1825 	inc	r1
      000952 E7               [12] 1826 	mov	a,@r1
      000953 C0 E0            [24] 1827 	push	acc
      000955 A9*00            [24] 1828 	mov	r1,_bp
      000957 09               [12] 1829 	inc	r1
      000958 E7               [12] 1830 	mov	a,@r1
      000959 C0 E0            [24] 1831 	push	acc
      00095B 09               [12] 1832 	inc	r1
      00095C E7               [12] 1833 	mov	a,@r1
      00095D C0 E0            [24] 1834 	push	acc
      00095F E5*00            [12] 1835 	mov	a,_bp
      000961 24 13            [12] 1836 	add	a,#0x13
      000963 F9               [12] 1837 	mov	r1,a
      000964 E7               [12] 1838 	mov	a,@r1
      000965 C0 E0            [24] 1839 	push	acc
      000967 8D 82            [24] 1840 	mov	dpl,r5
      000969 12r00r4C         [24] 1841 	lcall	_output_2digits
      00096C E5 81            [12] 1842 	mov	a,sp
      00096E 24 FA            [12] 1843 	add	a,#0xfa
      000970 F5 81            [12] 1844 	mov	sp,a
      000972 D0*00            [24] 1845 	pop	bits
      000974 D0 00            [24] 1846 	pop	ar0
      000976 D0 02            [24] 1847 	pop	ar2
      000978 D0 04            [24] 1848 	pop	ar4
      00097A D0 07            [24] 1849 	pop	ar7
      00097C 74 02            [12] 1850 	mov	a,#0x02
      00097E 2C               [12] 1851 	add	a,r4
      00097F FC               [12] 1852 	mov	r4,a
      000980 E4               [12] 1853 	clr	a
      000981 3F               [12] 1854 	addc	a,r7
      000982 FF               [12] 1855 	mov	r7,a
      000983                       1856 00163$:
                                   1857 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000983 E5*00            [12] 1858 	mov	a,_bp
      000985 24 05            [12] 1859 	add	a,#0x05
      000987 F9               [12] 1860 	mov	r1,a
      000988 87 01            [24] 1861 	mov	ar1,@r1
      00098A 87 05            [24] 1862 	mov	ar5,@r1
      00098C C0 07            [24] 1863 	push	ar7
      00098E C0 04            [24] 1864 	push	ar4
      000990 C0 02            [24] 1865 	push	ar2
      000992 C0 00            [24] 1866 	push	ar0
      000994 C0*00            [24] 1867 	push	bits
      000996 E5*00            [12] 1868 	mov	a,_bp
      000998 24 FB            [12] 1869 	add	a,#0xfb
      00099A F9               [12] 1870 	mov	r1,a
      00099B E7               [12] 1871 	mov	a,@r1
      00099C C0 E0            [24] 1872 	push	acc
      00099E 09               [12] 1873 	inc	r1
      00099F E7               [12] 1874 	mov	a,@r1
      0009A0 C0 E0            [24] 1875 	push	acc
      0009A2 09               [12] 1876 	inc	r1
      0009A3 E7               [12] 1877 	mov	a,@r1
      0009A4 C0 E0            [24] 1878 	push	acc
      0009A6 A9*00            [24] 1879 	mov	r1,_bp
      0009A8 09               [12] 1880 	inc	r1
      0009A9 E7               [12] 1881 	mov	a,@r1
      0009AA C0 E0            [24] 1882 	push	acc
      0009AC 09               [12] 1883 	inc	r1
      0009AD E7               [12] 1884 	mov	a,@r1
      0009AE C0 E0            [24] 1885 	push	acc
      0009B0 E5*00            [12] 1886 	mov	a,_bp
      0009B2 24 13            [12] 1887 	add	a,#0x13
      0009B4 F9               [12] 1888 	mov	r1,a
      0009B5 E7               [12] 1889 	mov	a,@r1
      0009B6 C0 E0            [24] 1890 	push	acc
      0009B8 8D 82            [24] 1891 	mov	dpl,r5
      0009BA 12r00r4C         [24] 1892 	lcall	_output_2digits
      0009BD E5 81            [12] 1893 	mov	a,sp
      0009BF 24 FA            [12] 1894 	add	a,#0xfa
      0009C1 F5 81            [12] 1895 	mov	sp,a
      0009C3 D0*00            [24] 1896 	pop	bits
      0009C5 D0 00            [24] 1897 	pop	ar0
      0009C7 D0 02            [24] 1898 	pop	ar2
      0009C9 D0 04            [24] 1899 	pop	ar4
      0009CB D0 07            [24] 1900 	pop	ar7
      0009CD E5*00            [12] 1901 	mov	a,_bp
      0009CF 24 0C            [12] 1902 	add	a,#0x0c
      0009D1 F9               [12] 1903 	mov	r1,a
      0009D2 74 02            [12] 1904 	mov	a,#0x02
      0009D4 2C               [12] 1905 	add	a,r4
      0009D5 F7               [12] 1906 	mov	@r1,a
      0009D6 E4               [12] 1907 	clr	a
      0009D7 3F               [12] 1908 	addc	a,r7
      0009D8 09               [12] 1909 	inc	r1
      0009D9 F7               [12] 1910 	mov	@r1,a
                                   1911 ;	printf_large.c:668: break;
      0009DA 02r0Ar6C         [24] 1912 	ljmp	00172$
                                   1913 ;	printf_large.c:671: case 'I':
      0009DD                       1914 00166$:
                                   1915 ;	printf_large.c:672: signed_argument = 1;
                                   1916 ;	assignBit
      0009DD D2*00            [12] 1917 	setb	b4
                                   1918 ;	printf_large.c:673: radix = 10;
      0009DF E5*00            [12] 1919 	mov	a,_bp
      0009E1 24 1B            [12] 1920 	add	a,#0x1b
      0009E3 F9               [12] 1921 	mov	r1,a
      0009E4 77 0A            [12] 1922 	mov	@r1,#0x0a
                                   1923 ;	printf_large.c:674: break;
      0009E6 02r0Ar6C         [24] 1924 	ljmp	00172$
                                   1925 ;	printf_large.c:676: case 'O':
      0009E9                       1926 00167$:
                                   1927 ;	printf_large.c:677: radix = 8;
      0009E9 E5*00            [12] 1928 	mov	a,_bp
      0009EB 24 1B            [12] 1929 	add	a,#0x1b
      0009ED F9               [12] 1930 	mov	r1,a
      0009EE 77 08            [12] 1931 	mov	@r1,#0x08
                                   1932 ;	printf_large.c:678: break;
                                   1933 ;	printf_large.c:680: case 'U':
      0009F0 80 7A            [24] 1934 	sjmp	00172$
      0009F2                       1935 00168$:
                                   1936 ;	printf_large.c:681: radix = 10;
      0009F2 E5*00            [12] 1937 	mov	a,_bp
      0009F4 24 1B            [12] 1938 	add	a,#0x1b
      0009F6 F9               [12] 1939 	mov	r1,a
      0009F7 77 0A            [12] 1940 	mov	@r1,#0x0a
                                   1941 ;	printf_large.c:682: break;
                                   1942 ;	printf_large.c:684: case 'X':
      0009F9 80 71            [24] 1943 	sjmp	00172$
      0009FB                       1944 00169$:
                                   1945 ;	printf_large.c:685: radix = 16;
      0009FB E5*00            [12] 1946 	mov	a,_bp
      0009FD 24 1B            [12] 1947 	add	a,#0x1b
      0009FF F9               [12] 1948 	mov	r1,a
      000A00 77 10            [12] 1949 	mov	@r1,#0x10
                                   1950 ;	printf_large.c:686: break;
                                   1951 ;	printf_large.c:688: case 'F':
      000A02 80 68            [24] 1952 	sjmp	00172$
      000A04                       1953 00170$:
                                   1954 ;	printf_large.c:689: float_argument=1;
                                   1955 ;	assignBit
      000A04 D2*00            [12] 1956 	setb	b7
                                   1957 ;	printf_large.c:690: break;
                                   1958 ;	printf_large.c:692: default:
      000A06 80 64            [24] 1959 	sjmp	00172$
      000A08                       1960 00171$:
                                   1961 ;	printf_large.c:694: OUTPUT_CHAR( c, p );
      000A08 C0 02            [24] 1962 	push	ar2
      000A0A C0 00            [24] 1963 	push	ar0
      000A0C C0*00            [24] 1964 	push	bits
      000A0E E5*00            [12] 1965 	mov	a,_bp
      000A10 24 FB            [12] 1966 	add	a,#0xfb
      000A12 F9               [12] 1967 	mov	r1,a
      000A13 E7               [12] 1968 	mov	a,@r1
      000A14 C0 E0            [24] 1969 	push	acc
      000A16 09               [12] 1970 	inc	r1
      000A17 E7               [12] 1971 	mov	a,@r1
      000A18 C0 E0            [24] 1972 	push	acc
      000A1A 09               [12] 1973 	inc	r1
      000A1B E7               [12] 1974 	mov	a,@r1
      000A1C C0 E0            [24] 1975 	push	acc
      000A1E 12r0Ar23         [24] 1976 	lcall	00748$
      000A21 80 12            [24] 1977 	sjmp	00749$
      000A23                       1978 00748$:
      000A23 A9*00            [24] 1979 	mov	r1,_bp
      000A25 09               [12] 1980 	inc	r1
      000A26 E7               [12] 1981 	mov	a,@r1
      000A27 C0 E0            [24] 1982 	push	acc
      000A29 09               [12] 1983 	inc	r1
      000A2A E7               [12] 1984 	mov	a,@r1
      000A2B C0 E0            [24] 1985 	push	acc
      000A2D E5*00            [12] 1986 	mov	a,_bp
      000A2F 24 0B            [12] 1987 	add	a,#0x0b
      000A31 F9               [12] 1988 	mov	r1,a
      000A32 87 82            [24] 1989 	mov	dpl,@r1
      000A34 22               [24] 1990 	ret
      000A35                       1991 00749$:
      000A35 15 81            [12] 1992 	dec	sp
      000A37 15 81            [12] 1993 	dec	sp
      000A39 15 81            [12] 1994 	dec	sp
      000A3B D0*00            [24] 1995 	pop	bits
      000A3D D0 00            [24] 1996 	pop	ar0
      000A3F D0 02            [24] 1997 	pop	ar2
      000A41 E5*00            [12] 1998 	mov	a,_bp
      000A43 24 0C            [12] 1999 	add	a,#0x0c
      000A45 F9               [12] 2000 	mov	r1,a
      000A46 07               [12] 2001 	inc	@r1
      000A47 B7 00 02         [24] 2002 	cjne	@r1,#0x00,00750$
      000A4A 09               [12] 2003 	inc	r1
      000A4B 07               [12] 2004 	inc	@r1
      000A4C                       2005 00750$:
                                   2006 ;	printf_large.c:877: return charsOutputted;
                                   2007 ;	printf_large.c:696: }
      000A4C 80 1E            [24] 2008 	sjmp	00172$
      000A4E                       2009 00331$:
      000A4E E5*00            [12] 2010 	mov	a,_bp
      000A50 24 19            [12] 2011 	add	a,#0x19
      000A52 F9               [12] 2012 	mov	r1,a
      000A53 C0 00            [24] 2013 	push	ar0
      000A55 E5*00            [12] 2014 	mov	a,_bp
      000A57 24 0C            [12] 2015 	add	a,#0x0c
      000A59 F8               [12] 2016 	mov	r0,a
      000A5A E7               [12] 2017 	mov	a,@r1
      000A5B F6               [12] 2018 	mov	@r0,a
      000A5C 09               [12] 2019 	inc	r1
      000A5D E7               [12] 2020 	mov	a,@r1
      000A5E 08               [12] 2021 	inc	r0
      000A5F F6               [12] 2022 	mov	@r0,a
      000A60 D0 00            [24] 2023 	pop	ar0
      000A62 E5*00            [12] 2024 	mov	a,_bp
      000A64 24 06            [12] 2025 	add	a,#0x06
      000A66 F9               [12] 2026 	mov	r1,a
      000A67 A7 06            [24] 2027 	mov	@r1,ar6
      000A69 09               [12] 2028 	inc	r1
      000A6A A7 07            [24] 2029 	mov	@r1,ar7
      000A6C                       2030 00172$:
                                   2031 ;	printf_large.c:698: if (float_argument)
      000A6C 20*00 03         [24] 2032 	jb	b7,00751$
      000A6F 02r0Br60         [24] 2033 	ljmp	00238$
      000A72                       2034 00751$:
                                   2035 ;	printf_large.c:700: value.f = va_arg(ap, float);
      000A72 E5*00            [12] 2036 	mov	a,_bp
      000A74 24 14            [12] 2037 	add	a,#0x14
      000A76 F9               [12] 2038 	mov	r1,a
      000A77 C0 00            [24] 2039 	push	ar0
      000A79 E5*00            [12] 2040 	mov	a,_bp
      000A7B 24 F7            [12] 2041 	add	a,#0xf7
      000A7D F8               [12] 2042 	mov	r0,a
      000A7E E6               [12] 2043 	mov	a,@r0
      000A7F 24 FC            [12] 2044 	add	a,#0xfc
      000A81 FF               [12] 2045 	mov	r7,a
      000A82 E5*00            [12] 2046 	mov	a,_bp
      000A84 24 F7            [12] 2047 	add	a,#0xf7
      000A86 F8               [12] 2048 	mov	r0,a
      000A87 A6 07            [24] 2049 	mov	@r0,ar7
      000A89 A8 07            [24] 2050 	mov	r0,ar7
      000A8B 86 04            [24] 2051 	mov	ar4,@r0
      000A8D 08               [12] 2052 	inc	r0
      000A8E 86 05            [24] 2053 	mov	ar5,@r0
      000A90 08               [12] 2054 	inc	r0
      000A91 86 06            [24] 2055 	mov	ar6,@r0
      000A93 08               [12] 2056 	inc	r0
      000A94 86 07            [24] 2057 	mov	ar7,@r0
      000A96 A7 04            [24] 2058 	mov	@r1,ar4
      000A98 09               [12] 2059 	inc	r1
      000A99 A7 05            [24] 2060 	mov	@r1,ar5
      000A9B 09               [12] 2061 	inc	r1
      000A9C A7 06            [24] 2062 	mov	@r1,ar6
      000A9E 09               [12] 2063 	inc	r1
      000A9F A7 07            [24] 2064 	mov	@r1,ar7
      000AA1 19               [12] 2065 	dec	r1
      000AA2 19               [12] 2066 	dec	r1
      000AA3 19               [12] 2067 	dec	r1
                                   2068 ;	printf_large.c:702: PTR="<NO FLOAT>";
      000AA4 E5*00            [12] 2069 	mov	a,_bp
      000AA6 24 14            [12] 2070 	add	a,#0x14
      000AA8 F9               [12] 2071 	mov	r1,a
      000AA9 77r00            [12] 2072 	mov	@r1,#___str_0
      000AAB 09               [12] 2073 	inc	r1
      000AAC 77s00            [12] 2074 	mov	@r1,#(___str_0 >> 8)
      000AAE 09               [12] 2075 	inc	r1
      000AAF 77 80            [12] 2076 	mov	@r1,#0x80
      000AB1 19               [12] 2077 	dec	r1
      000AB2 19               [12] 2078 	dec	r1
                                   2079 ;	printf_large.c:703: while (c=*PTR++)
      000AB3 E5*00            [12] 2080 	mov	a,_bp
      000AB5 24 0C            [12] 2081 	add	a,#0x0c
      000AB7 F8               [12] 2082 	mov	r0,a
      000AB8 86 04            [24] 2083 	mov	ar4,@r0
      000ABA 08               [12] 2084 	inc	r0
      000ABB 86 03            [24] 2085 	mov	ar3,@r0
      000ABD D0 00            [24] 2086 	pop	ar0
      000ABF                       2087 00173$:
      000ABF C0 00            [24] 2088 	push	ar0
      000AC1 E5*00            [12] 2089 	mov	a,_bp
      000AC3 24 08            [12] 2090 	add	a,#0x08
      000AC5 F8               [12] 2091 	mov	r0,a
      000AC6 E7               [12] 2092 	mov	a,@r1
      000AC7 F6               [12] 2093 	mov	@r0,a
      000AC8 09               [12] 2094 	inc	r1
      000AC9 E7               [12] 2095 	mov	a,@r1
      000ACA 08               [12] 2096 	inc	r0
      000ACB F6               [12] 2097 	mov	@r0,a
      000ACC 09               [12] 2098 	inc	r1
      000ACD E7               [12] 2099 	mov	a,@r1
      000ACE 08               [12] 2100 	inc	r0
      000ACF F6               [12] 2101 	mov	@r0,a
      000AD0 19               [12] 2102 	dec	r1
      000AD1 19               [12] 2103 	dec	r1
      000AD2 E5*00            [12] 2104 	mov	a,_bp
      000AD4 24 08            [12] 2105 	add	a,#0x08
      000AD6 F8               [12] 2106 	mov	r0,a
      000AD7 74 01            [12] 2107 	mov	a,#0x01
      000AD9 26               [12] 2108 	add	a,@r0
      000ADA FD               [12] 2109 	mov	r5,a
      000ADB E4               [12] 2110 	clr	a
      000ADC 08               [12] 2111 	inc	r0
      000ADD 36               [12] 2112 	addc	a,@r0
      000ADE FE               [12] 2113 	mov	r6,a
      000ADF 08               [12] 2114 	inc	r0
      000AE0 86 07            [24] 2115 	mov	ar7,@r0
      000AE2 A7 05            [24] 2116 	mov	@r1,ar5
      000AE4 09               [12] 2117 	inc	r1
      000AE5 A7 06            [24] 2118 	mov	@r1,ar6
      000AE7 09               [12] 2119 	inc	r1
      000AE8 A7 07            [24] 2120 	mov	@r1,ar7
      000AEA 19               [12] 2121 	dec	r1
      000AEB 19               [12] 2122 	dec	r1
      000AEC E5*00            [12] 2123 	mov	a,_bp
      000AEE 24 08            [12] 2124 	add	a,#0x08
      000AF0 F8               [12] 2125 	mov	r0,a
      000AF1 86 82            [24] 2126 	mov	dpl,@r0
      000AF3 08               [12] 2127 	inc	r0
      000AF4 86 83            [24] 2128 	mov	dph,@r0
      000AF6 08               [12] 2129 	inc	r0
      000AF7 86 F0            [24] 2130 	mov	b,@r0
      000AF9 12r00r00         [24] 2131 	lcall	__gptrget
      000AFC FF               [12] 2132 	mov	r7,a
      000AFD D0 00            [24] 2133 	pop	ar0
      000AFF EF               [12] 2134 	mov	a,r7
      000B00 FE               [12] 2135 	mov	r6,a
      000B01 70 03            [24] 2136 	jnz	00752$
      000B03 02r01r84         [24] 2137 	ljmp	00243$
      000B06                       2138 00752$:
                                   2139 ;	printf_large.c:705: OUTPUT_CHAR (c, p);
      000B06 C0 04            [24] 2140 	push	ar4
      000B08 C0 03            [24] 2141 	push	ar3
      000B0A C0 02            [24] 2142 	push	ar2
      000B0C C0 01            [24] 2143 	push	ar1
      000B0E C0 00            [24] 2144 	push	ar0
      000B10 85 00 F0         [24] 2145 	mov	b,ar0
      000B13 E5*00            [12] 2146 	mov	a,_bp
      000B15 24 FB            [12] 2147 	add	a,#0xfb
      000B17 F8               [12] 2148 	mov	r0,a
      000B18 E6               [12] 2149 	mov	a,@r0
      000B19 C0 E0            [24] 2150 	push	acc
      000B1B 08               [12] 2151 	inc	r0
      000B1C E6               [12] 2152 	mov	a,@r0
      000B1D C0 E0            [24] 2153 	push	acc
      000B1F 08               [12] 2154 	inc	r0
      000B20 E6               [12] 2155 	mov	a,@r0
      000B21 C0 E0            [24] 2156 	push	acc
      000B23 A8 F0            [24] 2157 	mov	r0,b
      000B25 12r0Br2A         [24] 2158 	lcall	00753$
      000B28 80 10            [24] 2159 	sjmp	00754$
      000B2A                       2160 00753$:
      000B2A 85 00 F0         [24] 2161 	mov	b,ar0
      000B2D A8*00            [24] 2162 	mov	r0,_bp
      000B2F 08               [12] 2163 	inc	r0
      000B30 E6               [12] 2164 	mov	a,@r0
      000B31 C0 E0            [24] 2165 	push	acc
      000B33 08               [12] 2166 	inc	r0
      000B34 E6               [12] 2167 	mov	a,@r0
      000B35 C0 E0            [24] 2168 	push	acc
      000B37 8E 82            [24] 2169 	mov	dpl,r6
      000B39 22               [24] 2170 	ret
      000B3A                       2171 00754$:
      000B3A 15 81            [12] 2172 	dec	sp
      000B3C 15 81            [12] 2173 	dec	sp
      000B3E 15 81            [12] 2174 	dec	sp
      000B40 D0 00            [24] 2175 	pop	ar0
      000B42 D0 01            [24] 2176 	pop	ar1
      000B44 D0 02            [24] 2177 	pop	ar2
      000B46 D0 03            [24] 2178 	pop	ar3
      000B48 D0 04            [24] 2179 	pop	ar4
      000B4A 0C               [12] 2180 	inc	r4
      000B4B BC 00 01         [24] 2181 	cjne	r4,#0x00,00755$
      000B4E 0B               [12] 2182 	inc	r3
      000B4F                       2183 00755$:
      000B4F C0 00            [24] 2184 	push	ar0
      000B51 E5*00            [12] 2185 	mov	a,_bp
      000B53 24 0C            [12] 2186 	add	a,#0x0c
      000B55 F8               [12] 2187 	mov	r0,a
      000B56 A6 04            [24] 2188 	mov	@r0,ar4
      000B58 08               [12] 2189 	inc	r0
      000B59 A6 03            [24] 2190 	mov	@r0,ar3
      000B5B D0 00            [24] 2191 	pop	ar0
      000B5D 02r0ArBF         [24] 2192 	ljmp	00173$
      000B60                       2193 00238$:
                                   2194 ;	printf_large.c:723: else if (radix != 0)
      000B60 E5*00            [12] 2195 	mov	a,_bp
      000B62 24 1B            [12] 2196 	add	a,#0x1b
      000B64 F9               [12] 2197 	mov	r1,a
      000B65 E7               [12] 2198 	mov	a,@r1
      000B66 70 03            [24] 2199 	jnz	00756$
      000B68 02r01r84         [24] 2200 	ljmp	00243$
      000B6B                       2201 00756$:
                                   2202 ;	printf_large.c:728: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      000B6B E5*00            [12] 2203 	mov	a,_bp
      000B6D 24 12            [12] 2204 	add	a,#0x12
      000B6F F9               [12] 2205 	mov	r1,a
      000B70 87 07            [24] 2206 	mov	ar7,@r1
                                   2207 ;	printf_large.c:731: if (char_argument)
      000B72 30*00 65         [24] 2208 	jnb	b5,00184$
                                   2209 ;	printf_large.c:733: value.l = va_arg(ap, char);
      000B75 C0 07            [24] 2210 	push	ar7
      000B77 E5*00            [12] 2211 	mov	a,_bp
      000B79 24 14            [12] 2212 	add	a,#0x14
      000B7B F9               [12] 2213 	mov	r1,a
      000B7C C0 00            [24] 2214 	push	ar0
      000B7E E5*00            [12] 2215 	mov	a,_bp
      000B80 24 F7            [12] 2216 	add	a,#0xf7
      000B82 F8               [12] 2217 	mov	r0,a
      000B83 E6               [12] 2218 	mov	a,@r0
      000B84 14               [12] 2219 	dec	a
      000B85 FE               [12] 2220 	mov	r6,a
      000B86 E5*00            [12] 2221 	mov	a,_bp
      000B88 24 F7            [12] 2222 	add	a,#0xf7
      000B8A F8               [12] 2223 	mov	r0,a
      000B8B A6 06            [24] 2224 	mov	@r0,ar6
      000B8D A8 06            [24] 2225 	mov	r0,ar6
      000B8F 86 06            [24] 2226 	mov	ar6,@r0
      000B91 D0 00            [24] 2227 	pop	ar0
      000B93 8E 04            [24] 2228 	mov	ar4,r6
      000B95 7D 00            [12] 2229 	mov	r5,#0x00
      000B97 7E 00            [12] 2230 	mov	r6,#0x00
      000B99 7F 00            [12] 2231 	mov	r7,#0x00
      000B9B A7 04            [24] 2232 	mov	@r1,ar4
      000B9D 09               [12] 2233 	inc	r1
      000B9E A7 05            [24] 2234 	mov	@r1,ar5
      000BA0 09               [12] 2235 	inc	r1
      000BA1 A7 06            [24] 2236 	mov	@r1,ar6
      000BA3 09               [12] 2237 	inc	r1
      000BA4 A7 07            [24] 2238 	mov	@r1,ar7
      000BA6 19               [12] 2239 	dec	r1
      000BA7 19               [12] 2240 	dec	r1
      000BA8 19               [12] 2241 	dec	r1
                                   2242 ;	printf_large.c:734: if (!signed_argument)
      000BA9 D0 07            [24] 2243 	pop	ar7
      000BAB 30*00 03         [24] 2244 	jnb	b4,00758$
      000BAE 02r0Cr77         [24] 2245 	ljmp	00185$
      000BB1                       2246 00758$:
                                   2247 ;	printf_large.c:736: value.l &= 0xFF;
      000BB1 C0 07            [24] 2248 	push	ar7
      000BB3 87 04            [24] 2249 	mov	ar4,@r1
      000BB5 09               [12] 2250 	inc	r1
      000BB6 87 05            [24] 2251 	mov	ar5,@r1
      000BB8 09               [12] 2252 	inc	r1
      000BB9 87 06            [24] 2253 	mov	ar6,@r1
      000BBB 09               [12] 2254 	inc	r1
      000BBC 87 07            [24] 2255 	mov	ar7,@r1
      000BBE 19               [12] 2256 	dec	r1
      000BBF 19               [12] 2257 	dec	r1
      000BC0 19               [12] 2258 	dec	r1
      000BC1 7D 00            [12] 2259 	mov	r5,#0x00
      000BC3 7E 00            [12] 2260 	mov	r6,#0x00
      000BC5 7F 00            [12] 2261 	mov	r7,#0x00
      000BC7 A7 04            [24] 2262 	mov	@r1,ar4
      000BC9 09               [12] 2263 	inc	r1
      000BCA A7 05            [24] 2264 	mov	@r1,ar5
      000BCC 09               [12] 2265 	inc	r1
      000BCD A7 06            [24] 2266 	mov	@r1,ar6
      000BCF 09               [12] 2267 	inc	r1
      000BD0 A7 07            [24] 2268 	mov	@r1,ar7
      000BD2 19               [12] 2269 	dec	r1
      000BD3 19               [12] 2270 	dec	r1
      000BD4 19               [12] 2271 	dec	r1
      000BD5 D0 07            [24] 2272 	pop	ar7
      000BD7 02r0Cr77         [24] 2273 	ljmp	00185$
      000BDA                       2274 00184$:
                                   2275 ;	printf_large.c:739: else if (long_argument)
      000BDA 30*00 3A         [24] 2276 	jnb	b6,00181$
                                   2277 ;	printf_large.c:741: value.l = va_arg(ap, long);
      000BDD C0 07            [24] 2278 	push	ar7
      000BDF E5*00            [12] 2279 	mov	a,_bp
      000BE1 24 14            [12] 2280 	add	a,#0x14
      000BE3 F9               [12] 2281 	mov	r1,a
      000BE4 C0 00            [24] 2282 	push	ar0
      000BE6 E5*00            [12] 2283 	mov	a,_bp
      000BE8 24 F7            [12] 2284 	add	a,#0xf7
      000BEA F8               [12] 2285 	mov	r0,a
      000BEB E6               [12] 2286 	mov	a,@r0
      000BEC 24 FC            [12] 2287 	add	a,#0xfc
      000BEE FE               [12] 2288 	mov	r6,a
      000BEF E5*00            [12] 2289 	mov	a,_bp
      000BF1 24 F7            [12] 2290 	add	a,#0xf7
      000BF3 F8               [12] 2291 	mov	r0,a
      000BF4 A6 06            [24] 2292 	mov	@r0,ar6
      000BF6 A8 06            [24] 2293 	mov	r0,ar6
      000BF8 86 04            [24] 2294 	mov	ar4,@r0
      000BFA 08               [12] 2295 	inc	r0
      000BFB 86 05            [24] 2296 	mov	ar5,@r0
      000BFD 08               [12] 2297 	inc	r0
      000BFE 86 06            [24] 2298 	mov	ar6,@r0
      000C00 08               [12] 2299 	inc	r0
      000C01 86 07            [24] 2300 	mov	ar7,@r0
      000C03 D0 00            [24] 2301 	pop	ar0
      000C05 A7 04            [24] 2302 	mov	@r1,ar4
      000C07 09               [12] 2303 	inc	r1
      000C08 A7 05            [24] 2304 	mov	@r1,ar5
      000C0A 09               [12] 2305 	inc	r1
      000C0B A7 06            [24] 2306 	mov	@r1,ar6
      000C0D 09               [12] 2307 	inc	r1
      000C0E A7 07            [24] 2308 	mov	@r1,ar7
      000C10 19               [12] 2309 	dec	r1
      000C11 19               [12] 2310 	dec	r1
      000C12 19               [12] 2311 	dec	r1
      000C13 D0 07            [24] 2312 	pop	ar7
      000C15 80 60            [24] 2313 	sjmp	00185$
      000C17                       2314 00181$:
                                   2315 ;	printf_large.c:745: value.l = va_arg(ap, int);
      000C17 C0 07            [24] 2316 	push	ar7
      000C19 E5*00            [12] 2317 	mov	a,_bp
      000C1B 24 14            [12] 2318 	add	a,#0x14
      000C1D F9               [12] 2319 	mov	r1,a
      000C1E C0 00            [24] 2320 	push	ar0
      000C20 E5*00            [12] 2321 	mov	a,_bp
      000C22 24 F7            [12] 2322 	add	a,#0xf7
      000C24 F8               [12] 2323 	mov	r0,a
      000C25 E6               [12] 2324 	mov	a,@r0
      000C26 24 FE            [12] 2325 	add	a,#0xfe
      000C28 FE               [12] 2326 	mov	r6,a
      000C29 E5*00            [12] 2327 	mov	a,_bp
      000C2B 24 F7            [12] 2328 	add	a,#0xf7
      000C2D F8               [12] 2329 	mov	r0,a
      000C2E A6 06            [24] 2330 	mov	@r0,ar6
      000C30 A8 06            [24] 2331 	mov	r0,ar6
      000C32 86 05            [24] 2332 	mov	ar5,@r0
      000C34 08               [12] 2333 	inc	r0
      000C35 86 06            [24] 2334 	mov	ar6,@r0
      000C37 D0 00            [24] 2335 	pop	ar0
      000C39 EE               [12] 2336 	mov	a,r6
      000C3A FC               [12] 2337 	mov	r4,a
      000C3B 33               [12] 2338 	rlc	a
      000C3C 95 E0            [12] 2339 	subb	a,acc
      000C3E FE               [12] 2340 	mov	r6,a
      000C3F FF               [12] 2341 	mov	r7,a
      000C40 A7 05            [24] 2342 	mov	@r1,ar5
      000C42 09               [12] 2343 	inc	r1
      000C43 A7 04            [24] 2344 	mov	@r1,ar4
      000C45 09               [12] 2345 	inc	r1
      000C46 A7 06            [24] 2346 	mov	@r1,ar6
      000C48 09               [12] 2347 	inc	r1
      000C49 A7 07            [24] 2348 	mov	@r1,ar7
      000C4B 19               [12] 2349 	dec	r1
      000C4C 19               [12] 2350 	dec	r1
      000C4D 19               [12] 2351 	dec	r1
                                   2352 ;	printf_large.c:746: if (!signed_argument)
      000C4E D0 07            [24] 2353 	pop	ar7
      000C50 20*00 24         [24] 2354 	jb	b4,00185$
                                   2355 ;	printf_large.c:748: value.l &= 0xFFFF;
      000C53 C0 07            [24] 2356 	push	ar7
      000C55 87 04            [24] 2357 	mov	ar4,@r1
      000C57 09               [12] 2358 	inc	r1
      000C58 87 05            [24] 2359 	mov	ar5,@r1
      000C5A 09               [12] 2360 	inc	r1
      000C5B 87 06            [24] 2361 	mov	ar6,@r1
      000C5D 09               [12] 2362 	inc	r1
      000C5E 87 07            [24] 2363 	mov	ar7,@r1
      000C60 19               [12] 2364 	dec	r1
      000C61 19               [12] 2365 	dec	r1
      000C62 19               [12] 2366 	dec	r1
      000C63 7E 00            [12] 2367 	mov	r6,#0x00
      000C65 7F 00            [12] 2368 	mov	r7,#0x00
      000C67 A7 04            [24] 2369 	mov	@r1,ar4
      000C69 09               [12] 2370 	inc	r1
      000C6A A7 05            [24] 2371 	mov	@r1,ar5
      000C6C 09               [12] 2372 	inc	r1
      000C6D A7 06            [24] 2373 	mov	@r1,ar6
      000C6F 09               [12] 2374 	inc	r1
      000C70 A7 07            [24] 2375 	mov	@r1,ar7
      000C72 19               [12] 2376 	dec	r1
      000C73 19               [12] 2377 	dec	r1
      000C74 19               [12] 2378 	dec	r1
                                   2379 ;	printf_large.c:877: return charsOutputted;
      000C75 D0 07            [24] 2380 	pop	ar7
                                   2381 ;	printf_large.c:748: value.l &= 0xFFFF;
      000C77                       2382 00185$:
                                   2383 ;	printf_large.c:752: if ( signed_argument )
      000C77 30*00 4C         [24] 2384 	jnb	b4,00190$
                                   2385 ;	printf_large.c:754: if (value.l < 0)
      000C7A C0 07            [24] 2386 	push	ar7
      000C7C E5*00            [12] 2387 	mov	a,_bp
      000C7E 24 14            [12] 2388 	add	a,#0x14
      000C80 F9               [12] 2389 	mov	r1,a
      000C81 87 04            [24] 2390 	mov	ar4,@r1
      000C83 09               [12] 2391 	inc	r1
      000C84 87 05            [24] 2392 	mov	ar5,@r1
      000C86 09               [12] 2393 	inc	r1
      000C87 87 06            [24] 2394 	mov	ar6,@r1
      000C89 09               [12] 2395 	inc	r1
      000C8A 87 07            [24] 2396 	mov	ar7,@r1
      000C8C 19               [12] 2397 	dec	r1
      000C8D 19               [12] 2398 	dec	r1
      000C8E 19               [12] 2399 	dec	r1
      000C8F EF               [12] 2400 	mov	a,r7
      000C90 D0 07            [24] 2401 	pop	ar7
      000C92 30 E7 2F         [24] 2402 	jnb	acc.7,00187$
                                   2403 ;	printf_large.c:755: value.l = -value.l;
      000C95 C0 07            [24] 2404 	push	ar7
      000C97 87 04            [24] 2405 	mov	ar4,@r1
      000C99 09               [12] 2406 	inc	r1
      000C9A 87 05            [24] 2407 	mov	ar5,@r1
      000C9C 09               [12] 2408 	inc	r1
      000C9D 87 06            [24] 2409 	mov	ar6,@r1
      000C9F 09               [12] 2410 	inc	r1
      000CA0 87 07            [24] 2411 	mov	ar7,@r1
      000CA2 19               [12] 2412 	dec	r1
      000CA3 19               [12] 2413 	dec	r1
      000CA4 19               [12] 2414 	dec	r1
      000CA5 C3               [12] 2415 	clr	c
      000CA6 E4               [12] 2416 	clr	a
      000CA7 9C               [12] 2417 	subb	a,r4
      000CA8 FC               [12] 2418 	mov	r4,a
      000CA9 E4               [12] 2419 	clr	a
      000CAA 9D               [12] 2420 	subb	a,r5
      000CAB FD               [12] 2421 	mov	r5,a
      000CAC E4               [12] 2422 	clr	a
      000CAD 9E               [12] 2423 	subb	a,r6
      000CAE FE               [12] 2424 	mov	r6,a
      000CAF E4               [12] 2425 	clr	a
      000CB0 9F               [12] 2426 	subb	a,r7
      000CB1 FF               [12] 2427 	mov	r7,a
      000CB2 A7 04            [24] 2428 	mov	@r1,ar4
      000CB4 09               [12] 2429 	inc	r1
      000CB5 A7 05            [24] 2430 	mov	@r1,ar5
      000CB7 09               [12] 2431 	inc	r1
      000CB8 A7 06            [24] 2432 	mov	@r1,ar6
      000CBA 09               [12] 2433 	inc	r1
      000CBB A7 07            [24] 2434 	mov	@r1,ar7
      000CBD 19               [12] 2435 	dec	r1
      000CBE 19               [12] 2436 	dec	r1
      000CBF 19               [12] 2437 	dec	r1
      000CC0 D0 07            [24] 2438 	pop	ar7
      000CC2 80 02            [24] 2439 	sjmp	00190$
      000CC4                       2440 00187$:
                                   2441 ;	printf_large.c:757: signed_argument = 0;
                                   2442 ;	assignBit
      000CC4 C2*00            [12] 2443 	clr	b4
      000CC6                       2444 00190$:
                                   2445 ;	printf_large.c:761: lsd = 1;
                                   2446 ;	assignBit
      000CC6 D2*00            [12] 2447 	setb	b5
                                   2448 ;	printf_large.c:763: do {
      000CC8 8F 01            [24] 2449 	mov	ar1,r7
      000CCA C0 00            [24] 2450 	push	ar0
      000CCC E5*00            [12] 2451 	mov	a,_bp
      000CCE 24 10            [12] 2452 	add	a,#0x10
      000CD0 F8               [12] 2453 	mov	r0,a
      000CD1 E4               [12] 2454 	clr	a
      000CD2 F6               [12] 2455 	mov	@r0,a
      000CD3 08               [12] 2456 	inc	r0
      000CD4 F6               [12] 2457 	mov	@r0,a
      000CD5 D0 00            [24] 2458 	pop	ar0
      000CD7                       2459 00194$:
                                   2460 ;	printf_large.c:764: value.byte[4] = 0;
      000CD7 E5*00            [12] 2461 	mov	a,_bp
      000CD9 24 14            [12] 2462 	add	a,#0x14
      000CDB 24 04            [12] 2463 	add	a,#0x04
      000CDD C0 00            [24] 2464 	push	ar0
      000CDF F8               [12] 2465 	mov	r0,a
      000CE0 76 00            [12] 2466 	mov	@r0,#0x00
      000CE2 D0 00            [24] 2467 	pop	ar0
                                   2468 ;	printf_large.c:766: calculate_digit(&value, radix);
      000CE4 88 05            [24] 2469 	mov	ar5,r0
      000CE6 C0 02            [24] 2470 	push	ar2
      000CE8 C0 01            [24] 2471 	push	ar1
      000CEA C0 00            [24] 2472 	push	ar0
      000CEC C0*00            [24] 2473 	push	bits
      000CEE 85 00 F0         [24] 2474 	mov	b,ar0
      000CF1 E5*00            [12] 2475 	mov	a,_bp
      000CF3 24 1B            [12] 2476 	add	a,#0x1b
      000CF5 F8               [12] 2477 	mov	r0,a
      000CF6 E6               [12] 2478 	mov	a,@r0
      000CF7 C0 E0            [24] 2479 	push	acc
      000CF9 8D 82            [24] 2480 	mov	dpl,r5
      000CFB 12r00rC0         [24] 2481 	lcall	_calculate_digit
      000CFE 15 81            [12] 2482 	dec	sp
      000D00 D0*00            [24] 2483 	pop	bits
      000D02 D0 00            [24] 2484 	pop	ar0
      000D04 D0 01            [24] 2485 	pop	ar1
      000D06 D0 02            [24] 2486 	pop	ar2
                                   2487 ;	printf_large.c:770: if (!lsd)
      000D08 20*00 28         [24] 2488 	jb	b5,00192$
                                   2489 ;	printf_large.c:772: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000D0B C0 00            [24] 2490 	push	ar0
      000D0D E5*00            [12] 2491 	mov	a,_bp
      000D0F 24 03            [12] 2492 	add	a,#0x03
      000D11 F8               [12] 2493 	mov	r0,a
      000D12 86 00            [24] 2494 	mov	ar0,@r0
      000D14 E6               [12] 2495 	mov	a,@r0
      000D15 C4               [12] 2496 	swap	a
      000D16 54 F0            [12] 2497 	anl	a,#0xf0
      000D18 FD               [12] 2498 	mov	r5,a
      000D19 E5*00            [12] 2499 	mov	a,_bp
      000D1B 24 03            [12] 2500 	add	a,#0x03
      000D1D F8               [12] 2501 	mov	r0,a
      000D1E 86 00            [24] 2502 	mov	ar0,@r0
      000D20 86 04            [24] 2503 	mov	ar4,@r0
      000D22 D0 00            [24] 2504 	pop	ar0
      000D24 EC               [12] 2505 	mov	a,r4
      000D25 C4               [12] 2506 	swap	a
      000D26 54 0F            [12] 2507 	anl	a,#0x0f
      000D28 42 05            [12] 2508 	orl	ar5,a
      000D2A E7               [12] 2509 	mov	a,@r1
      000D2B FC               [12] 2510 	mov	r4,a
      000D2C 42 05            [12] 2511 	orl	ar5,a
      000D2E A7 05            [24] 2512 	mov	@r1,ar5
                                   2513 ;	printf_large.c:773: pstore--;
      000D30 19               [12] 2514 	dec	r1
      000D31 80 0A            [24] 2515 	sjmp	00193$
      000D33                       2516 00192$:
                                   2517 ;	printf_large.c:777: *pstore = value.byte[4];
      000D33 C0 00            [24] 2518 	push	ar0
      000D35 A8 02            [24] 2519 	mov	r0,ar2
      000D37 86 05            [24] 2520 	mov	ar5,@r0
      000D39 D0 00            [24] 2521 	pop	ar0
      000D3B A7 05            [24] 2522 	mov	@r1,ar5
      000D3D                       2523 00193$:
                                   2524 ;	printf_large.c:779: length++;
      000D3D C0 00            [24] 2525 	push	ar0
      000D3F E5*00            [12] 2526 	mov	a,_bp
      000D41 24 10            [12] 2527 	add	a,#0x10
      000D43 F8               [12] 2528 	mov	r0,a
      000D44 06               [12] 2529 	inc	@r0
      000D45 B6 00 02         [24] 2530 	cjne	@r0,#0x00,00764$
      000D48 08               [12] 2531 	inc	r0
      000D49 06               [12] 2532 	inc	@r0
      000D4A                       2533 00764$:
      000D4A D0 00            [24] 2534 	pop	ar0
                                   2535 ;	printf_large.c:780: lsd = !lsd;
      000D4C B2*00            [12] 2536 	cpl	b5
                                   2537 ;	printf_large.c:781: } while( value.ul );
      000D4E 86 03            [24] 2538 	mov	ar3,@r0
      000D50 08               [12] 2539 	inc	r0
      000D51 86 04            [24] 2540 	mov	ar4,@r0
      000D53 08               [12] 2541 	inc	r0
      000D54 86 05            [24] 2542 	mov	ar5,@r0
      000D56 08               [12] 2543 	inc	r0
      000D57 86 07            [24] 2544 	mov	ar7,@r0
      000D59 18               [12] 2545 	dec	r0
      000D5A 18               [12] 2546 	dec	r0
      000D5B 18               [12] 2547 	dec	r0
      000D5C EB               [12] 2548 	mov	a,r3
      000D5D 4C               [12] 2549 	orl	a,r4
      000D5E 4D               [12] 2550 	orl	a,r5
      000D5F 4F               [12] 2551 	orl	a,r7
      000D60 60 03            [24] 2552 	jz	00765$
      000D62 02r0CrD7         [24] 2553 	ljmp	00194$
      000D65                       2554 00765$:
                                   2555 ;	printf_large.c:783: if (width == 0)
      000D65 89 07            [24] 2556 	mov	ar7,r1
      000D67 E5*00            [12] 2557 	mov	a,_bp
      000D69 24 10            [12] 2558 	add	a,#0x10
      000D6B F9               [12] 2559 	mov	r1,a
      000D6C C0 00            [24] 2560 	push	ar0
      000D6E E5*00            [12] 2561 	mov	a,_bp
      000D70 24 1E            [12] 2562 	add	a,#0x1e
      000D72 F8               [12] 2563 	mov	r0,a
      000D73 E7               [12] 2564 	mov	a,@r1
      000D74 F6               [12] 2565 	mov	@r0,a
      000D75 09               [12] 2566 	inc	r1
      000D76 E7               [12] 2567 	mov	a,@r1
      000D77 08               [12] 2568 	inc	r0
      000D78 F6               [12] 2569 	mov	@r0,a
      000D79 D0 00            [24] 2570 	pop	ar0
      000D7B E5*00            [12] 2571 	mov	a,_bp
      000D7D 24 06            [12] 2572 	add	a,#0x06
      000D7F F9               [12] 2573 	mov	r1,a
      000D80 E7               [12] 2574 	mov	a,@r1
      000D81 09               [12] 2575 	inc	r1
      000D82 47               [12] 2576 	orl	a,@r1
      000D83 70 0A            [24] 2577 	jnz	00198$
                                   2578 ;	printf_large.c:788: width = 1;
      000D85 E5*00            [12] 2579 	mov	a,_bp
      000D87 24 06            [12] 2580 	add	a,#0x06
      000D89 F9               [12] 2581 	mov	r1,a
      000D8A 77 01            [12] 2582 	mov	@r1,#0x01
      000D8C 09               [12] 2583 	inc	r1
      000D8D 77 00            [12] 2584 	mov	@r1,#0x00
      000D8F                       2585 00198$:
                                   2586 ;	printf_large.c:792: if (!zero_padding && !left_justify)
      000D8F 30*00 03         [24] 2587 	jnb	b1,00767$
      000D92 02r0Er47         [24] 2588 	ljmp	00203$
      000D95                       2589 00767$:
      000D95 30*00 03         [24] 2590 	jnb	b0,00768$
      000D98 02r0Er47         [24] 2591 	ljmp	00203$
      000D9B                       2592 00768$:
                                   2593 ;	printf_large.c:794: while ( width > (unsigned char) (length+1) )
      000D9B E5*00            [12] 2594 	mov	a,_bp
      000D9D 24 0C            [12] 2595 	add	a,#0x0c
      000D9F F9               [12] 2596 	mov	r1,a
      000DA0 87 04            [24] 2597 	mov	ar4,@r1
      000DA2 09               [12] 2598 	inc	r1
      000DA3 87 03            [24] 2599 	mov	ar3,@r1
      000DA5 E5*00            [12] 2600 	mov	a,_bp
      000DA7 24 06            [12] 2601 	add	a,#0x06
      000DA9 F9               [12] 2602 	mov	r1,a
      000DAA C0 00            [24] 2603 	push	ar0
      000DAC E5*00            [12] 2604 	mov	a,_bp
      000DAE 24 10            [12] 2605 	add	a,#0x10
      000DB0 F8               [12] 2606 	mov	r0,a
      000DB1 E7               [12] 2607 	mov	a,@r1
      000DB2 F6               [12] 2608 	mov	@r0,a
      000DB3 09               [12] 2609 	inc	r1
      000DB4 E7               [12] 2610 	mov	a,@r1
      000DB5 08               [12] 2611 	inc	r0
      000DB6 F6               [12] 2612 	mov	@r0,a
      000DB7 D0 00            [24] 2613 	pop	ar0
      000DB9                       2614 00199$:
      000DB9 C0 07            [24] 2615 	push	ar7
      000DBB E5*00            [12] 2616 	mov	a,_bp
      000DBD 24 1E            [12] 2617 	add	a,#0x1e
      000DBF F9               [12] 2618 	mov	r1,a
      000DC0 87 07            [24] 2619 	mov	ar7,@r1
      000DC2 0F               [12] 2620 	inc	r7
      000DC3 8F 06            [24] 2621 	mov	ar6,r7
      000DC5 7F 00            [12] 2622 	mov	r7,#0x00
      000DC7 E5*00            [12] 2623 	mov	a,_bp
      000DC9 24 10            [12] 2624 	add	a,#0x10
      000DCB F9               [12] 2625 	mov	r1,a
      000DCC C3               [12] 2626 	clr	c
      000DCD EE               [12] 2627 	mov	a,r6
      000DCE 97               [12] 2628 	subb	a,@r1
      000DCF EF               [12] 2629 	mov	a,r7
      000DD0 09               [12] 2630 	inc	r1
      000DD1 97               [12] 2631 	subb	a,@r1
      000DD2 D0 07            [24] 2632 	pop	ar7
      000DD4 50 53            [24] 2633 	jnc	00333$
                                   2634 ;	printf_large.c:796: OUTPUT_CHAR( ' ', p );
      000DD6 C0 07            [24] 2635 	push	ar7
      000DD8 C0 04            [24] 2636 	push	ar4
      000DDA C0 03            [24] 2637 	push	ar3
      000DDC C0 02            [24] 2638 	push	ar2
      000DDE C0 00            [24] 2639 	push	ar0
      000DE0 C0*00            [24] 2640 	push	bits
      000DE2 E5*00            [12] 2641 	mov	a,_bp
      000DE4 24 FB            [12] 2642 	add	a,#0xfb
      000DE6 F9               [12] 2643 	mov	r1,a
      000DE7 E7               [12] 2644 	mov	a,@r1
      000DE8 C0 E0            [24] 2645 	push	acc
      000DEA 09               [12] 2646 	inc	r1
      000DEB E7               [12] 2647 	mov	a,@r1
      000DEC C0 E0            [24] 2648 	push	acc
      000DEE 09               [12] 2649 	inc	r1
      000DEF E7               [12] 2650 	mov	a,@r1
      000DF0 C0 E0            [24] 2651 	push	acc
      000DF2 12r0DrF7         [24] 2652 	lcall	00770$
      000DF5 80 0E            [24] 2653 	sjmp	00771$
      000DF7                       2654 00770$:
      000DF7 A9*00            [24] 2655 	mov	r1,_bp
      000DF9 09               [12] 2656 	inc	r1
      000DFA E7               [12] 2657 	mov	a,@r1
      000DFB C0 E0            [24] 2658 	push	acc
      000DFD 09               [12] 2659 	inc	r1
      000DFE E7               [12] 2660 	mov	a,@r1
      000DFF C0 E0            [24] 2661 	push	acc
      000E01 75 82 20         [24] 2662 	mov	dpl,#0x20
      000E04 22               [24] 2663 	ret
      000E05                       2664 00771$:
      000E05 15 81            [12] 2665 	dec	sp
      000E07 15 81            [12] 2666 	dec	sp
      000E09 15 81            [12] 2667 	dec	sp
      000E0B D0*00            [24] 2668 	pop	bits
      000E0D D0 00            [24] 2669 	pop	ar0
      000E0F D0 02            [24] 2670 	pop	ar2
      000E11 D0 03            [24] 2671 	pop	ar3
      000E13 D0 04            [24] 2672 	pop	ar4
      000E15 D0 07            [24] 2673 	pop	ar7
      000E17 0C               [12] 2674 	inc	r4
      000E18 BC 00 01         [24] 2675 	cjne	r4,#0x00,00772$
      000E1B 0B               [12] 2676 	inc	r3
      000E1C                       2677 00772$:
                                   2678 ;	printf_large.c:797: width--;
      000E1C E5*00            [12] 2679 	mov	a,_bp
      000E1E 24 10            [12] 2680 	add	a,#0x10
      000E20 F9               [12] 2681 	mov	r1,a
      000E21 17               [12] 2682 	dec	@r1
      000E22 B7 FF 02         [24] 2683 	cjne	@r1,#0xff,00773$
      000E25 09               [12] 2684 	inc	r1
      000E26 17               [12] 2685 	dec	@r1
      000E27                       2686 00773$:
      000E27 80 90            [24] 2687 	sjmp	00199$
      000E29                       2688 00333$:
      000E29 E5*00            [12] 2689 	mov	a,_bp
      000E2B 24 0C            [12] 2690 	add	a,#0x0c
      000E2D F9               [12] 2691 	mov	r1,a
      000E2E A7 04            [24] 2692 	mov	@r1,ar4
      000E30 09               [12] 2693 	inc	r1
      000E31 A7 03            [24] 2694 	mov	@r1,ar3
      000E33 E5*00            [12] 2695 	mov	a,_bp
      000E35 24 10            [12] 2696 	add	a,#0x10
      000E37 F9               [12] 2697 	mov	r1,a
      000E38 C0 00            [24] 2698 	push	ar0
      000E3A E5*00            [12] 2699 	mov	a,_bp
      000E3C 24 06            [12] 2700 	add	a,#0x06
      000E3E F8               [12] 2701 	mov	r0,a
      000E3F E7               [12] 2702 	mov	a,@r1
      000E40 F6               [12] 2703 	mov	@r0,a
      000E41 09               [12] 2704 	inc	r1
      000E42 E7               [12] 2705 	mov	a,@r1
      000E43 08               [12] 2706 	inc	r0
      000E44 F6               [12] 2707 	mov	@r0,a
      000E45 D0 00            [24] 2708 	pop	ar0
      000E47                       2709 00203$:
                                   2710 ;	printf_large.c:801: if (signed_argument) // this now means the original value was negative
      000E47 30*00 52         [24] 2711 	jnb	b4,00213$
                                   2712 ;	printf_large.c:803: OUTPUT_CHAR( '-', p );
      000E4A C0 07            [24] 2713 	push	ar7
      000E4C C0 02            [24] 2714 	push	ar2
      000E4E C0 00            [24] 2715 	push	ar0
      000E50 C0*00            [24] 2716 	push	bits
      000E52 E5*00            [12] 2717 	mov	a,_bp
      000E54 24 FB            [12] 2718 	add	a,#0xfb
      000E56 F9               [12] 2719 	mov	r1,a
      000E57 E7               [12] 2720 	mov	a,@r1
      000E58 C0 E0            [24] 2721 	push	acc
      000E5A 09               [12] 2722 	inc	r1
      000E5B E7               [12] 2723 	mov	a,@r1
      000E5C C0 E0            [24] 2724 	push	acc
      000E5E 09               [12] 2725 	inc	r1
      000E5F E7               [12] 2726 	mov	a,@r1
      000E60 C0 E0            [24] 2727 	push	acc
      000E62 12r0Er67         [24] 2728 	lcall	00775$
      000E65 80 0E            [24] 2729 	sjmp	00776$
      000E67                       2730 00775$:
      000E67 A9*00            [24] 2731 	mov	r1,_bp
      000E69 09               [12] 2732 	inc	r1
      000E6A E7               [12] 2733 	mov	a,@r1
      000E6B C0 E0            [24] 2734 	push	acc
      000E6D 09               [12] 2735 	inc	r1
      000E6E E7               [12] 2736 	mov	a,@r1
      000E6F C0 E0            [24] 2737 	push	acc
      000E71 75 82 2D         [24] 2738 	mov	dpl,#0x2d
      000E74 22               [24] 2739 	ret
      000E75                       2740 00776$:
      000E75 15 81            [12] 2741 	dec	sp
      000E77 15 81            [12] 2742 	dec	sp
      000E79 15 81            [12] 2743 	dec	sp
      000E7B D0*00            [24] 2744 	pop	bits
      000E7D D0 00            [24] 2745 	pop	ar0
      000E7F D0 02            [24] 2746 	pop	ar2
      000E81 D0 07            [24] 2747 	pop	ar7
      000E83 E5*00            [12] 2748 	mov	a,_bp
      000E85 24 0C            [12] 2749 	add	a,#0x0c
      000E87 F9               [12] 2750 	mov	r1,a
      000E88 07               [12] 2751 	inc	@r1
      000E89 B7 00 02         [24] 2752 	cjne	@r1,#0x00,00777$
      000E8C 09               [12] 2753 	inc	r1
      000E8D 07               [12] 2754 	inc	@r1
      000E8E                       2755 00777$:
                                   2756 ;	printf_large.c:805: width--;
      000E8E E5*00            [12] 2757 	mov	a,_bp
      000E90 24 06            [12] 2758 	add	a,#0x06
      000E92 F9               [12] 2759 	mov	r1,a
      000E93 17               [12] 2760 	dec	@r1
      000E94 B7 FF 02         [24] 2761 	cjne	@r1,#0xff,00778$
      000E97 09               [12] 2762 	inc	r1
      000E98 17               [12] 2763 	dec	@r1
      000E99                       2764 00778$:
      000E99 02r0Fr4F         [24] 2765 	ljmp	00214$
      000E9C                       2766 00213$:
                                   2767 ;	printf_large.c:807: else if (length != 0)
      000E9C E5*00            [12] 2768 	mov	a,_bp
      000E9E 24 1E            [12] 2769 	add	a,#0x1e
      000EA0 F9               [12] 2770 	mov	r1,a
      000EA1 E7               [12] 2771 	mov	a,@r1
      000EA2 09               [12] 2772 	inc	r1
      000EA3 47               [12] 2773 	orl	a,@r1
      000EA4 70 03            [24] 2774 	jnz	00779$
      000EA6 02r0Fr4F         [24] 2775 	ljmp	00214$
      000EA9                       2776 00779$:
                                   2777 ;	printf_large.c:810: if (prefix_sign)
      000EA9 30*00 51         [24] 2778 	jnb	b2,00208$
                                   2779 ;	printf_large.c:812: OUTPUT_CHAR( '+', p );
      000EAC C0 07            [24] 2780 	push	ar7
      000EAE C0 02            [24] 2781 	push	ar2
      000EB0 C0 00            [24] 2782 	push	ar0
      000EB2 C0*00            [24] 2783 	push	bits
      000EB4 E5*00            [12] 2784 	mov	a,_bp
      000EB6 24 FB            [12] 2785 	add	a,#0xfb
      000EB8 F9               [12] 2786 	mov	r1,a
      000EB9 E7               [12] 2787 	mov	a,@r1
      000EBA C0 E0            [24] 2788 	push	acc
      000EBC 09               [12] 2789 	inc	r1
      000EBD E7               [12] 2790 	mov	a,@r1
      000EBE C0 E0            [24] 2791 	push	acc
      000EC0 09               [12] 2792 	inc	r1
      000EC1 E7               [12] 2793 	mov	a,@r1
      000EC2 C0 E0            [24] 2794 	push	acc
      000EC4 12r0ErC9         [24] 2795 	lcall	00781$
      000EC7 80 0E            [24] 2796 	sjmp	00782$
      000EC9                       2797 00781$:
      000EC9 A9*00            [24] 2798 	mov	r1,_bp
      000ECB 09               [12] 2799 	inc	r1
      000ECC E7               [12] 2800 	mov	a,@r1
      000ECD C0 E0            [24] 2801 	push	acc
      000ECF 09               [12] 2802 	inc	r1
      000ED0 E7               [12] 2803 	mov	a,@r1
      000ED1 C0 E0            [24] 2804 	push	acc
      000ED3 75 82 2B         [24] 2805 	mov	dpl,#0x2b
      000ED6 22               [24] 2806 	ret
      000ED7                       2807 00782$:
      000ED7 15 81            [12] 2808 	dec	sp
      000ED9 15 81            [12] 2809 	dec	sp
      000EDB 15 81            [12] 2810 	dec	sp
      000EDD D0*00            [24] 2811 	pop	bits
      000EDF D0 00            [24] 2812 	pop	ar0
      000EE1 D0 02            [24] 2813 	pop	ar2
      000EE3 D0 07            [24] 2814 	pop	ar7
      000EE5 E5*00            [12] 2815 	mov	a,_bp
      000EE7 24 0C            [12] 2816 	add	a,#0x0c
      000EE9 F9               [12] 2817 	mov	r1,a
      000EEA 07               [12] 2818 	inc	@r1
      000EEB B7 00 02         [24] 2819 	cjne	@r1,#0x00,00783$
      000EEE 09               [12] 2820 	inc	r1
      000EEF 07               [12] 2821 	inc	@r1
      000EF0                       2822 00783$:
                                   2823 ;	printf_large.c:814: width--;
      000EF0 E5*00            [12] 2824 	mov	a,_bp
      000EF2 24 06            [12] 2825 	add	a,#0x06
      000EF4 F9               [12] 2826 	mov	r1,a
      000EF5 17               [12] 2827 	dec	@r1
      000EF6 B7 FF 02         [24] 2828 	cjne	@r1,#0xff,00784$
      000EF9 09               [12] 2829 	inc	r1
      000EFA 17               [12] 2830 	dec	@r1
      000EFB                       2831 00784$:
      000EFB 80 52            [24] 2832 	sjmp	00214$
      000EFD                       2833 00208$:
                                   2834 ;	printf_large.c:816: else if (prefix_space)
      000EFD 30*00 4F         [24] 2835 	jnb	b3,00214$
                                   2836 ;	printf_large.c:818: OUTPUT_CHAR( ' ', p );
      000F00 C0 07            [24] 2837 	push	ar7
      000F02 C0 02            [24] 2838 	push	ar2
      000F04 C0 00            [24] 2839 	push	ar0
      000F06 C0*00            [24] 2840 	push	bits
      000F08 E5*00            [12] 2841 	mov	a,_bp
      000F0A 24 FB            [12] 2842 	add	a,#0xfb
      000F0C F9               [12] 2843 	mov	r1,a
      000F0D E7               [12] 2844 	mov	a,@r1
      000F0E C0 E0            [24] 2845 	push	acc
      000F10 09               [12] 2846 	inc	r1
      000F11 E7               [12] 2847 	mov	a,@r1
      000F12 C0 E0            [24] 2848 	push	acc
      000F14 09               [12] 2849 	inc	r1
      000F15 E7               [12] 2850 	mov	a,@r1
      000F16 C0 E0            [24] 2851 	push	acc
      000F18 12r0Fr1D         [24] 2852 	lcall	00786$
      000F1B 80 0E            [24] 2853 	sjmp	00787$
      000F1D                       2854 00786$:
      000F1D A9*00            [24] 2855 	mov	r1,_bp
      000F1F 09               [12] 2856 	inc	r1
      000F20 E7               [12] 2857 	mov	a,@r1
      000F21 C0 E0            [24] 2858 	push	acc
      000F23 09               [12] 2859 	inc	r1
      000F24 E7               [12] 2860 	mov	a,@r1
      000F25 C0 E0            [24] 2861 	push	acc
      000F27 75 82 20         [24] 2862 	mov	dpl,#0x20
      000F2A 22               [24] 2863 	ret
      000F2B                       2864 00787$:
      000F2B 15 81            [12] 2865 	dec	sp
      000F2D 15 81            [12] 2866 	dec	sp
      000F2F 15 81            [12] 2867 	dec	sp
      000F31 D0*00            [24] 2868 	pop	bits
      000F33 D0 00            [24] 2869 	pop	ar0
      000F35 D0 02            [24] 2870 	pop	ar2
      000F37 D0 07            [24] 2871 	pop	ar7
      000F39 E5*00            [12] 2872 	mov	a,_bp
      000F3B 24 0C            [12] 2873 	add	a,#0x0c
      000F3D F9               [12] 2874 	mov	r1,a
      000F3E 07               [12] 2875 	inc	@r1
      000F3F B7 00 02         [24] 2876 	cjne	@r1,#0x00,00788$
      000F42 09               [12] 2877 	inc	r1
      000F43 07               [12] 2878 	inc	@r1
      000F44                       2879 00788$:
                                   2880 ;	printf_large.c:820: width--;
      000F44 E5*00            [12] 2881 	mov	a,_bp
      000F46 24 06            [12] 2882 	add	a,#0x06
      000F48 F9               [12] 2883 	mov	r1,a
      000F49 17               [12] 2884 	dec	@r1
      000F4A B7 FF 02         [24] 2885 	cjne	@r1,#0xff,00789$
      000F4D 09               [12] 2886 	inc	r1
      000F4E 17               [12] 2887 	dec	@r1
      000F4F                       2888 00789$:
      000F4F                       2889 00214$:
                                   2890 ;	printf_large.c:825: if (!left_justify)
      000F4F 30*00 03         [24] 2891 	jnb	b0,00790$
      000F52 02r0FrEA         [24] 2892 	ljmp	00222$
      000F55                       2893 00790$:
                                   2894 ;	printf_large.c:827: while ( width-- > length )
      000F55 E5*00            [12] 2895 	mov	a,_bp
      000F57 24 0C            [12] 2896 	add	a,#0x0c
      000F59 F9               [12] 2897 	mov	r1,a
      000F5A C0 00            [24] 2898 	push	ar0
      000F5C E5*00            [12] 2899 	mov	a,_bp
      000F5E 24 10            [12] 2900 	add	a,#0x10
      000F60 F8               [12] 2901 	mov	r0,a
      000F61 E7               [12] 2902 	mov	a,@r1
      000F62 F6               [12] 2903 	mov	@r0,a
      000F63 09               [12] 2904 	inc	r1
      000F64 E7               [12] 2905 	mov	a,@r1
      000F65 08               [12] 2906 	inc	r0
      000F66 F6               [12] 2907 	mov	@r0,a
      000F67 D0 00            [24] 2908 	pop	ar0
      000F69 E5*00            [12] 2909 	mov	a,_bp
      000F6B 24 06            [12] 2910 	add	a,#0x06
      000F6D F9               [12] 2911 	mov	r1,a
      000F6E 87 03            [24] 2912 	mov	ar3,@r1
      000F70 09               [12] 2913 	inc	r1
      000F71 87 04            [24] 2914 	mov	ar4,@r1
      000F73                       2915 00215$:
      000F73 C0 07            [24] 2916 	push	ar7
      000F75 8B 06            [24] 2917 	mov	ar6,r3
      000F77 8C 07            [24] 2918 	mov	ar7,r4
      000F79 1B               [12] 2919 	dec	r3
      000F7A BB FF 01         [24] 2920 	cjne	r3,#0xff,00791$
      000F7D 1C               [12] 2921 	dec	r4
      000F7E                       2922 00791$:
      000F7E E5*00            [12] 2923 	mov	a,_bp
      000F80 24 1E            [12] 2924 	add	a,#0x1e
      000F82 F9               [12] 2925 	mov	r1,a
      000F83 C3               [12] 2926 	clr	c
      000F84 E7               [12] 2927 	mov	a,@r1
      000F85 9E               [12] 2928 	subb	a,r6
      000F86 09               [12] 2929 	inc	r1
      000F87 E7               [12] 2930 	mov	a,@r1
      000F88 9F               [12] 2931 	subb	a,r7
      000F89 D0 07            [24] 2932 	pop	ar7
      000F8B 40 03            [24] 2933 	jc	00792$
      000F8D 02r10r33         [24] 2934 	ljmp	00334$
      000F90                       2935 00792$:
                                   2936 ;	printf_large.c:829: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      000F90 30*00 06         [24] 2937 	jnb	b1,00248$
      000F93 7D 30            [12] 2938 	mov	r5,#0x30
      000F95 7E 00            [12] 2939 	mov	r6,#0x00
      000F97 80 04            [24] 2940 	sjmp	00249$
      000F99                       2941 00248$:
      000F99 7D 20            [12] 2942 	mov	r5,#0x20
      000F9B 7E 00            [12] 2943 	mov	r6,#0x00
      000F9D                       2944 00249$:
      000F9D C0 07            [24] 2945 	push	ar7
      000F9F C0 04            [24] 2946 	push	ar4
      000FA1 C0 03            [24] 2947 	push	ar3
      000FA3 C0 02            [24] 2948 	push	ar2
      000FA5 C0 00            [24] 2949 	push	ar0
      000FA7 C0*00            [24] 2950 	push	bits
      000FA9 E5*00            [12] 2951 	mov	a,_bp
      000FAB 24 FB            [12] 2952 	add	a,#0xfb
      000FAD F9               [12] 2953 	mov	r1,a
      000FAE E7               [12] 2954 	mov	a,@r1
      000FAF C0 E0            [24] 2955 	push	acc
      000FB1 09               [12] 2956 	inc	r1
      000FB2 E7               [12] 2957 	mov	a,@r1
      000FB3 C0 E0            [24] 2958 	push	acc
      000FB5 09               [12] 2959 	inc	r1
      000FB6 E7               [12] 2960 	mov	a,@r1
      000FB7 C0 E0            [24] 2961 	push	acc
      000FB9 12r0FrBE         [24] 2962 	lcall	00794$
      000FBC 80 0D            [24] 2963 	sjmp	00795$
      000FBE                       2964 00794$:
      000FBE A9*00            [24] 2965 	mov	r1,_bp
      000FC0 09               [12] 2966 	inc	r1
      000FC1 E7               [12] 2967 	mov	a,@r1
      000FC2 C0 E0            [24] 2968 	push	acc
      000FC4 09               [12] 2969 	inc	r1
      000FC5 E7               [12] 2970 	mov	a,@r1
      000FC6 C0 E0            [24] 2971 	push	acc
      000FC8 8D 82            [24] 2972 	mov	dpl,r5
      000FCA 22               [24] 2973 	ret
      000FCB                       2974 00795$:
      000FCB 15 81            [12] 2975 	dec	sp
      000FCD 15 81            [12] 2976 	dec	sp
      000FCF 15 81            [12] 2977 	dec	sp
      000FD1 D0*00            [24] 2978 	pop	bits
      000FD3 D0 00            [24] 2979 	pop	ar0
      000FD5 D0 02            [24] 2980 	pop	ar2
      000FD7 D0 03            [24] 2981 	pop	ar3
      000FD9 D0 04            [24] 2982 	pop	ar4
      000FDB D0 07            [24] 2983 	pop	ar7
      000FDD E5*00            [12] 2984 	mov	a,_bp
      000FDF 24 10            [12] 2985 	add	a,#0x10
      000FE1 F9               [12] 2986 	mov	r1,a
      000FE2 07               [12] 2987 	inc	@r1
      000FE3 B7 00 02         [24] 2988 	cjne	@r1,#0x00,00796$
      000FE6 09               [12] 2989 	inc	r1
      000FE7 07               [12] 2990 	inc	@r1
      000FE8                       2991 00796$:
      000FE8 80 89            [24] 2992 	sjmp	00215$
      000FEA                       2993 00222$:
                                   2994 ;	printf_large.c:835: if (width > length)
      000FEA E5*00            [12] 2995 	mov	a,_bp
      000FEC 24 06            [12] 2996 	add	a,#0x06
      000FEE F9               [12] 2997 	mov	r1,a
      000FEF C0 00            [24] 2998 	push	ar0
      000FF1 E5*00            [12] 2999 	mov	a,_bp
      000FF3 24 1E            [12] 3000 	add	a,#0x1e
      000FF5 F8               [12] 3001 	mov	r0,a
      000FF6 C3               [12] 3002 	clr	c
      000FF7 E6               [12] 3003 	mov	a,@r0
      000FF8 97               [12] 3004 	subb	a,@r1
      000FF9 08               [12] 3005 	inc	r0
      000FFA E6               [12] 3006 	mov	a,@r0
      000FFB 09               [12] 3007 	inc	r1
      000FFC 97               [12] 3008 	subb	a,@r1
      000FFD D0 00            [24] 3009 	pop	ar0
      000FFF 50 27            [24] 3010 	jnc	00219$
                                   3011 ;	printf_large.c:836: width -= length;
      001001 E5*00            [12] 3012 	mov	a,_bp
      001003 24 06            [12] 3013 	add	a,#0x06
      001005 F9               [12] 3014 	mov	r1,a
      001006 C0 00            [24] 3015 	push	ar0
      001008 E5*00            [12] 3016 	mov	a,_bp
      00100A 24 1E            [12] 3017 	add	a,#0x1e
      00100C F8               [12] 3018 	mov	r0,a
      00100D E7               [12] 3019 	mov	a,@r1
      00100E C3               [12] 3020 	clr	c
      00100F 96               [12] 3021 	subb	a,@r0
      001010 C0 E0            [24] 3022 	push	acc
      001012 09               [12] 3023 	inc	r1
      001013 E7               [12] 3024 	mov	a,@r1
      001014 08               [12] 3025 	inc	r0
      001015 96               [12] 3026 	subb	a,@r0
      001016 C0 E0            [24] 3027 	push	acc
      001018 E5*00            [12] 3028 	mov	a,_bp
      00101A 24 0F            [12] 3029 	add	a,#0x0f
      00101C F9               [12] 3030 	mov	r1,a
      00101D D0 E0            [24] 3031 	pop	acc
      00101F F7               [12] 3032 	mov	@r1,a
      001020 19               [12] 3033 	dec	r1
      001021 D0 E0            [24] 3034 	pop	acc
      001023 F7               [12] 3035 	mov	@r1,a
      001024 D0 00            [24] 3036 	pop	ar0
      001026 80 29            [24] 3037 	sjmp	00326$
      001028                       3038 00219$:
                                   3039 ;	printf_large.c:838: width = 0;
      001028 E5*00            [12] 3040 	mov	a,_bp
      00102A 24 0E            [12] 3041 	add	a,#0x0e
      00102C F9               [12] 3042 	mov	r1,a
      00102D E4               [12] 3043 	clr	a
      00102E F7               [12] 3044 	mov	@r1,a
      00102F 09               [12] 3045 	inc	r1
      001030 F7               [12] 3046 	mov	@r1,a
                                   3047 ;	printf_large.c:877: return charsOutputted;
                                   3048 ;	printf_large.c:842: while( length-- )
      001031 80 1E            [24] 3049 	sjmp	00326$
      001033                       3050 00334$:
      001033 E5*00            [12] 3051 	mov	a,_bp
      001035 24 10            [12] 3052 	add	a,#0x10
      001037 F9               [12] 3053 	mov	r1,a
      001038 C0 00            [24] 3054 	push	ar0
      00103A E5*00            [12] 3055 	mov	a,_bp
      00103C 24 0C            [12] 3056 	add	a,#0x0c
      00103E F8               [12] 3057 	mov	r0,a
      00103F E7               [12] 3058 	mov	a,@r1
      001040 F6               [12] 3059 	mov	@r0,a
      001041 09               [12] 3060 	inc	r1
      001042 E7               [12] 3061 	mov	a,@r1
      001043 08               [12] 3062 	inc	r0
      001044 F6               [12] 3063 	mov	@r0,a
      001045 D0 00            [24] 3064 	pop	ar0
      001047 E5*00            [12] 3065 	mov	a,_bp
      001049 24 0E            [12] 3066 	add	a,#0x0e
      00104B F9               [12] 3067 	mov	r1,a
      00104C A7 03            [24] 3068 	mov	@r1,ar3
      00104E 09               [12] 3069 	inc	r1
      00104F A7 04            [24] 3070 	mov	@r1,ar4
      001051                       3071 00326$:
      001051 8F 01            [24] 3072 	mov	ar1,r7
      001053 C0 00            [24] 3073 	push	ar0
      001055 E5*00            [12] 3074 	mov	a,_bp
      001057 24 0C            [12] 3075 	add	a,#0x0c
      001059 F8               [12] 3076 	mov	r0,a
      00105A 86 04            [24] 3077 	mov	ar4,@r0
      00105C 08               [12] 3078 	inc	r0
      00105D 86 07            [24] 3079 	mov	ar7,@r0
      00105F E5*00            [12] 3080 	mov	a,_bp
      001061 24 1E            [12] 3081 	add	a,#0x1e
      001063 F8               [12] 3082 	mov	r0,a
      001064 C0 01            [24] 3083 	push	ar1
      001066 E5*00            [12] 3084 	mov	a,_bp
      001068 24 10            [12] 3085 	add	a,#0x10
      00106A F9               [12] 3086 	mov	r1,a
      00106B E6               [12] 3087 	mov	a,@r0
      00106C F7               [12] 3088 	mov	@r1,a
      00106D 08               [12] 3089 	inc	r0
      00106E E6               [12] 3090 	mov	a,@r0
      00106F 09               [12] 3091 	inc	r1
      001070 F7               [12] 3092 	mov	@r1,a
      001071 D0 01            [24] 3093 	pop	ar1
      001073 D0 00            [24] 3094 	pop	ar0
      001075                       3095 00227$:
      001075 C0 00            [24] 3096 	push	ar0
      001077 E5*00            [12] 3097 	mov	a,_bp
      001079 24 10            [12] 3098 	add	a,#0x10
      00107B F8               [12] 3099 	mov	r0,a
      00107C 86 03            [24] 3100 	mov	ar3,@r0
      00107E 08               [12] 3101 	inc	r0
      00107F 86 06            [24] 3102 	mov	ar6,@r0
      001081 E5*00            [12] 3103 	mov	a,_bp
      001083 24 10            [12] 3104 	add	a,#0x10
      001085 F8               [12] 3105 	mov	r0,a
      001086 16               [12] 3106 	dec	@r0
      001087 B6 FF 02         [24] 3107 	cjne	@r0,#0xff,00798$
      00108A 08               [12] 3108 	inc	r0
      00108B 16               [12] 3109 	dec	@r0
      00108C                       3110 00798$:
      00108C D0 00            [24] 3111 	pop	ar0
      00108E EB               [12] 3112 	mov	a,r3
      00108F 4E               [12] 3113 	orl	a,r6
      001090 70 03            [24] 3114 	jnz	00799$
      001092 02r11r1D         [24] 3115 	ljmp	00335$
      001095                       3116 00799$:
                                   3117 ;	printf_large.c:844: lsd = !lsd;
      001095 B2*00            [12] 3118 	cpl	b5
                                   3119 ;	printf_large.c:845: if (!lsd)
      001097 20*00 10         [24] 3120 	jb	b5,00225$
                                   3121 ;	printf_large.c:847: pstore++;
      00109A 09               [12] 3122 	inc	r1
                                   3123 ;	printf_large.c:848: value.byte[4] = *pstore >> 4;
      00109B E7               [12] 3124 	mov	a,@r1
      00109C C4               [12] 3125 	swap	a
      00109D 54 0F            [12] 3126 	anl	a,#0x0f
      00109F FE               [12] 3127 	mov	r6,a
      0010A0 C0 00            [24] 3128 	push	ar0
      0010A2 A8 02            [24] 3129 	mov	r0,ar2
      0010A4 A6 06            [24] 3130 	mov	@r0,ar6
      0010A6 D0 00            [24] 3131 	pop	ar0
      0010A8 80 0C            [24] 3132 	sjmp	00226$
      0010AA                       3133 00225$:
                                   3134 ;	printf_large.c:852: value.byte[4] = *pstore & 0x0F;
      0010AA 87 06            [24] 3135 	mov	ar6,@r1
      0010AC 74 0F            [12] 3136 	mov	a,#0x0f
      0010AE 5E               [12] 3137 	anl	a,r6
      0010AF C0 00            [24] 3138 	push	ar0
      0010B1 A8 02            [24] 3139 	mov	r0,ar2
      0010B3 F6               [12] 3140 	mov	@r0,a
      0010B4 D0 00            [24] 3141 	pop	ar0
      0010B6                       3142 00226$:
                                   3143 ;	printf_large.c:855: output_digit( value.byte[4], lower_case, output_char, p );
      0010B6 C0 00            [24] 3144 	push	ar0
      0010B8 E5*00            [12] 3145 	mov	a,_bp
      0010BA 24 04            [12] 3146 	add	a,#0x04
      0010BC F8               [12] 3147 	mov	r0,a
      0010BD 86 00            [24] 3148 	mov	ar0,@r0
      0010BF 86 06            [24] 3149 	mov	ar6,@r0
      0010C1 D0 00            [24] 3150 	pop	ar0
      0010C3 C0 07            [24] 3151 	push	ar7
      0010C5 C0 04            [24] 3152 	push	ar4
      0010C7 C0 02            [24] 3153 	push	ar2
      0010C9 C0 01            [24] 3154 	push	ar1
      0010CB C0 00            [24] 3155 	push	ar0
      0010CD C0*00            [24] 3156 	push	bits
      0010CF 85 00 F0         [24] 3157 	mov	b,ar0
      0010D2 E5*00            [12] 3158 	mov	a,_bp
      0010D4 24 FB            [12] 3159 	add	a,#0xfb
      0010D6 F8               [12] 3160 	mov	r0,a
      0010D7 E6               [12] 3161 	mov	a,@r0
      0010D8 C0 E0            [24] 3162 	push	acc
      0010DA 08               [12] 3163 	inc	r0
      0010DB E6               [12] 3164 	mov	a,@r0
      0010DC C0 E0            [24] 3165 	push	acc
      0010DE 08               [12] 3166 	inc	r0
      0010DF E6               [12] 3167 	mov	a,@r0
      0010E0 C0 E0            [24] 3168 	push	acc
      0010E2 A8 F0            [24] 3169 	mov	r0,b
      0010E4 85 00 F0         [24] 3170 	mov	b,ar0
      0010E7 A8*00            [24] 3171 	mov	r0,_bp
      0010E9 08               [12] 3172 	inc	r0
      0010EA E6               [12] 3173 	mov	a,@r0
      0010EB C0 E0            [24] 3174 	push	acc
      0010ED 08               [12] 3175 	inc	r0
      0010EE E6               [12] 3176 	mov	a,@r0
      0010EF C0 E0            [24] 3177 	push	acc
      0010F1 A8 F0            [24] 3178 	mov	r0,b
      0010F3 85 00 F0         [24] 3179 	mov	b,ar0
      0010F6 E5*00            [12] 3180 	mov	a,_bp
      0010F8 24 13            [12] 3181 	add	a,#0x13
      0010FA F8               [12] 3182 	mov	r0,a
      0010FB E6               [12] 3183 	mov	a,@r0
      0010FC C0 E0            [24] 3184 	push	acc
      0010FE 8E 82            [24] 3185 	mov	dpl,r6
      001100 12r00r00         [24] 3186 	lcall	_output_digit
      001103 E5 81            [12] 3187 	mov	a,sp
      001105 24 FA            [12] 3188 	add	a,#0xfa
      001107 F5 81            [12] 3189 	mov	sp,a
      001109 D0*00            [24] 3190 	pop	bits
      00110B D0 00            [24] 3191 	pop	ar0
      00110D D0 01            [24] 3192 	pop	ar1
      00110F D0 02            [24] 3193 	pop	ar2
      001111 D0 04            [24] 3194 	pop	ar4
      001113 D0 07            [24] 3195 	pop	ar7
                                   3196 ;	printf_large.c:856: charsOutputted++;
      001115 0C               [12] 3197 	inc	r4
      001116 BC 00 01         [24] 3198 	cjne	r4,#0x00,00801$
      001119 0F               [12] 3199 	inc	r7
      00111A                       3200 00801$:
      00111A 02r10r75         [24] 3201 	ljmp	00227$
      00111D                       3202 00335$:
      00111D E5*00            [12] 3203 	mov	a,_bp
      00111F 24 0C            [12] 3204 	add	a,#0x0c
      001121 F9               [12] 3205 	mov	r1,a
      001122 A7 04            [24] 3206 	mov	@r1,ar4
      001124 09               [12] 3207 	inc	r1
      001125 A7 07            [24] 3208 	mov	@r1,ar7
                                   3209 ;	printf_large.c:861: if (left_justify)
      001127 20*00 03         [24] 3210 	jb	b0,00802$
      00112A 02r01r84         [24] 3211 	ljmp	00243$
      00112D                       3212 00802$:
                                   3213 ;	printf_large.c:863: while (width-- > 0)
      00112D E5*00            [12] 3214 	mov	a,_bp
      00112F 24 19            [12] 3215 	add	a,#0x19
      001131 F9               [12] 3216 	mov	r1,a
      001132 A7 04            [24] 3217 	mov	@r1,ar4
      001134 09               [12] 3218 	inc	r1
      001135 A7 07            [24] 3219 	mov	@r1,ar7
      001137 E5*00            [12] 3220 	mov	a,_bp
      001139 24 0E            [12] 3221 	add	a,#0x0e
      00113B F9               [12] 3222 	mov	r1,a
      00113C 87 04            [24] 3223 	mov	ar4,@r1
      00113E 09               [12] 3224 	inc	r1
      00113F 87 05            [24] 3225 	mov	ar5,@r1
      001141                       3226 00230$:
      001141 8C 03            [24] 3227 	mov	ar3,r4
      001143 8D 07            [24] 3228 	mov	ar7,r5
      001145 1C               [12] 3229 	dec	r4
      001146 BC FF 01         [24] 3230 	cjne	r4,#0xff,00803$
      001149 1D               [12] 3231 	dec	r5
      00114A                       3232 00803$:
      00114A EB               [12] 3233 	mov	a,r3
      00114B 4F               [12] 3234 	orl	a,r7
      00114C 70 03            [24] 3235 	jnz	00804$
      00114E 02r01r84         [24] 3236 	ljmp	00243$
      001151                       3237 00804$:
                                   3238 ;	printf_large.c:865: OUTPUT_CHAR(' ', p);
      001151 C0 05            [24] 3239 	push	ar5
      001153 C0 04            [24] 3240 	push	ar4
      001155 C0 02            [24] 3241 	push	ar2
      001157 C0 00            [24] 3242 	push	ar0
      001159 E5*00            [12] 3243 	mov	a,_bp
      00115B 24 FB            [12] 3244 	add	a,#0xfb
      00115D F9               [12] 3245 	mov	r1,a
      00115E E7               [12] 3246 	mov	a,@r1
      00115F C0 E0            [24] 3247 	push	acc
      001161 09               [12] 3248 	inc	r1
      001162 E7               [12] 3249 	mov	a,@r1
      001163 C0 E0            [24] 3250 	push	acc
      001165 09               [12] 3251 	inc	r1
      001166 E7               [12] 3252 	mov	a,@r1
      001167 C0 E0            [24] 3253 	push	acc
      001169 12r11r6E         [24] 3254 	lcall	00805$
      00116C 80 0E            [24] 3255 	sjmp	00806$
      00116E                       3256 00805$:
      00116E A9*00            [24] 3257 	mov	r1,_bp
      001170 09               [12] 3258 	inc	r1
      001171 E7               [12] 3259 	mov	a,@r1
      001172 C0 E0            [24] 3260 	push	acc
      001174 09               [12] 3261 	inc	r1
      001175 E7               [12] 3262 	mov	a,@r1
      001176 C0 E0            [24] 3263 	push	acc
      001178 75 82 20         [24] 3264 	mov	dpl,#0x20
      00117B 22               [24] 3265 	ret
      00117C                       3266 00806$:
      00117C 15 81            [12] 3267 	dec	sp
      00117E 15 81            [12] 3268 	dec	sp
      001180 15 81            [12] 3269 	dec	sp
      001182 D0 00            [24] 3270 	pop	ar0
      001184 D0 02            [24] 3271 	pop	ar2
      001186 D0 04            [24] 3272 	pop	ar4
      001188 D0 05            [24] 3273 	pop	ar5
      00118A E5*00            [12] 3274 	mov	a,_bp
      00118C 24 19            [12] 3275 	add	a,#0x19
      00118E F9               [12] 3276 	mov	r1,a
      00118F 07               [12] 3277 	inc	@r1
      001190 B7 00 02         [24] 3278 	cjne	@r1,#0x00,00807$
      001193 09               [12] 3279 	inc	r1
      001194 07               [12] 3280 	inc	@r1
      001195                       3281 00807$:
      001195 E5*00            [12] 3282 	mov	a,_bp
      001197 24 19            [12] 3283 	add	a,#0x19
      001199 F9               [12] 3284 	mov	r1,a
      00119A C0 00            [24] 3285 	push	ar0
      00119C E5*00            [12] 3286 	mov	a,_bp
      00119E 24 0C            [12] 3287 	add	a,#0x0c
      0011A0 F8               [12] 3288 	mov	r0,a
      0011A1 E7               [12] 3289 	mov	a,@r1
      0011A2 F6               [12] 3290 	mov	@r0,a
      0011A3 09               [12] 3291 	inc	r1
      0011A4 E7               [12] 3292 	mov	a,@r1
      0011A5 08               [12] 3293 	inc	r0
      0011A6 F6               [12] 3294 	mov	@r0,a
      0011A7 D0 00            [24] 3295 	pop	ar0
      0011A9 80 96            [24] 3296 	sjmp	00230$
      0011AB                       3297 00241$:
                                   3298 ;	printf_large.c:873: OUTPUT_CHAR( c, p );
      0011AB C0 02            [24] 3299 	push	ar2
      0011AD C0 00            [24] 3300 	push	ar0
      0011AF E5*00            [12] 3301 	mov	a,_bp
      0011B1 24 FB            [12] 3302 	add	a,#0xfb
      0011B3 F9               [12] 3303 	mov	r1,a
      0011B4 E7               [12] 3304 	mov	a,@r1
      0011B5 C0 E0            [24] 3305 	push	acc
      0011B7 09               [12] 3306 	inc	r1
      0011B8 E7               [12] 3307 	mov	a,@r1
      0011B9 C0 E0            [24] 3308 	push	acc
      0011BB 09               [12] 3309 	inc	r1
      0011BC E7               [12] 3310 	mov	a,@r1
      0011BD C0 E0            [24] 3311 	push	acc
      0011BF 12r11rC4         [24] 3312 	lcall	00808$
      0011C2 80 0D            [24] 3313 	sjmp	00809$
      0011C4                       3314 00808$:
      0011C4 A9*00            [24] 3315 	mov	r1,_bp
      0011C6 09               [12] 3316 	inc	r1
      0011C7 E7               [12] 3317 	mov	a,@r1
      0011C8 C0 E0            [24] 3318 	push	acc
      0011CA 09               [12] 3319 	inc	r1
      0011CB E7               [12] 3320 	mov	a,@r1
      0011CC C0 E0            [24] 3321 	push	acc
      0011CE 8E 82            [24] 3322 	mov	dpl,r6
      0011D0 22               [24] 3323 	ret
      0011D1                       3324 00809$:
      0011D1 15 81            [12] 3325 	dec	sp
      0011D3 15 81            [12] 3326 	dec	sp
      0011D5 15 81            [12] 3327 	dec	sp
      0011D7 D0 00            [24] 3328 	pop	ar0
      0011D9 D0 02            [24] 3329 	pop	ar2
      0011DB E5*00            [12] 3330 	mov	a,_bp
      0011DD 24 0C            [12] 3331 	add	a,#0x0c
      0011DF F9               [12] 3332 	mov	r1,a
      0011E0 07               [12] 3333 	inc	@r1
      0011E1 B7 00 02         [24] 3334 	cjne	@r1,#0x00,00810$
      0011E4 09               [12] 3335 	inc	r1
      0011E5 07               [12] 3336 	inc	@r1
      0011E6                       3337 00810$:
      0011E6 02r01r84         [24] 3338 	ljmp	00243$
      0011E9                       3339 00245$:
                                   3340 ;	printf_large.c:877: return charsOutputted;
      0011E9 E5*00            [12] 3341 	mov	a,_bp
      0011EB 24 0C            [12] 3342 	add	a,#0x0c
      0011ED F8               [12] 3343 	mov	r0,a
      0011EE 86 82            [24] 3344 	mov	dpl,@r0
      0011F0 08               [12] 3345 	inc	r0
      0011F1 86 83            [24] 3346 	mov	dph,@r0
                                   3347 ;	printf_large.c:878: }
      0011F3 85*00 81         [24] 3348 	mov	sp,_bp
      0011F6 D0*00            [24] 3349 	pop	_bp
      0011F8 22               [24] 3350 	ret
                                   3351 	.area CSEG    (CODE)
                                   3352 	.area CONST   (CODE)
                                   3353 	.area CONST   (CODE)
      000000                       3354 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  3355 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    3356 	.db 0x00
                                   3357 	.area CSEG    (CODE)
                                   3358 	.area XINIT   (CODE)
                                   3359 	.area CABS    (ABS,CODE)
