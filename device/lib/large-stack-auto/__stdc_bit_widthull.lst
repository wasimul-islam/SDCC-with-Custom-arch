                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __stdc_bit_widthull
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___stdc_bit_widthull
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '__stdc_bit_widthull'
                                     91 ;------------------------------------------------------------
                                     92 ;value                     Allocated to stack - _bp +1
                                     93 ;width                     Allocated to registers r7 
                                     94 ;i                         Allocated to registers r5 
                                     95 ;sloc0                     Allocated to stack - _bp +9
                                     96 ;------------------------------------------------------------
                                     97 ;	__stdc_bit_widthull.c:37: int_fast8_t __stdc_bit_widthull(unsigned long long value)
                                     98 ;	-----------------------------------------
                                     99 ;	 function __stdc_bit_widthull
                                    100 ;	-----------------------------------------
      000000                        101 ___stdc_bit_widthull:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 C0 82            [24]  112 	push	dpl
      000007 C0 83            [24]  113 	push	dph
      000009 C0 F0            [24]  114 	push	b
      00000B C0 E0            [24]  115 	push	acc
      00000D C0 04            [24]  116 	push	ar4
      00000F C0 05            [24]  117 	push	ar5
      000011 C0 06            [24]  118 	push	ar6
      000013 C0 07            [24]  119 	push	ar7
      000015 E5 81            [12]  120 	mov	a,sp
      000017 24 08            [12]  121 	add	a,#0x08
      000019 F5 81            [12]  122 	mov	sp,a
                                    123 ;	__stdc_bit_widthull.c:39: int_fast8_t width = 0;
      00001B 7F 00            [12]  124 	mov	r7,#0x00
                                    125 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      00001D 7D 00            [12]  126 	mov	r5,#0x00
      00001F                        127 00105$:
      00001F BD 40 00         [24]  128 	cjne	r5,#0x40,00122$
      000022                        129 00122$:
      000022 40 03            [24]  130 	jc	00123$
      000024 02r00rCA         [24]  131 	ljmp	00103$
      000027                        132 00123$:
                                    133 ;	__stdc_bit_widthull.c:41: if(value & (1ull << i))
      000027 C0 07            [24]  134 	push	ar7
      000029 8D F0            [24]  135 	mov	b,r5
      00002B 05 F0            [12]  136 	inc	b
      00002D E5*00            [12]  137 	mov	a,_bp
      00002F 24 09            [12]  138 	add	a,#0x09
      000031 F8               [12]  139 	mov	r0,a
      000032 76 01            [12]  140 	mov	@r0,#0x01
      000034 08               [12]  141 	inc	r0
      000035 76 00            [12]  142 	mov	@r0,#0x00
      000037 08               [12]  143 	inc	r0
      000038 76 00            [12]  144 	mov	@r0,#0x00
      00003A 08               [12]  145 	inc	r0
      00003B 76 00            [12]  146 	mov	@r0,#0x00
      00003D 08               [12]  147 	inc	r0
      00003E 76 00            [12]  148 	mov	@r0,#0x00
      000040 08               [12]  149 	inc	r0
      000041 76 00            [12]  150 	mov	@r0,#0x00
      000043 08               [12]  151 	inc	r0
      000044 76 00            [12]  152 	mov	@r0,#0x00
      000046 08               [12]  153 	inc	r0
      000047 76 00            [12]  154 	mov	@r0,#0x00
      000049 18               [12]  155 	dec	r0
      00004A 18               [12]  156 	dec	r0
      00004B 18               [12]  157 	dec	r0
      00004C 18               [12]  158 	dec	r0
      00004D 18               [12]  159 	dec	r0
      00004E 18               [12]  160 	dec	r0
      00004F 18               [12]  161 	dec	r0
      000050 80 26            [24]  162 	sjmp	00125$
      000052                        163 00124$:
      000052 E6               [12]  164 	mov	a,@r0
      000053 26               [12]  165 	add	a,@r0
      000054 F6               [12]  166 	mov	@r0,a
      000055 08               [12]  167 	inc	r0
      000056 E6               [12]  168 	mov	a,@r0
      000057 33               [12]  169 	rlc	a
      000058 F6               [12]  170 	mov	@r0,a
      000059 08               [12]  171 	inc	r0
      00005A E6               [12]  172 	mov	a,@r0
      00005B 33               [12]  173 	rlc	a
      00005C F6               [12]  174 	mov	@r0,a
      00005D 08               [12]  175 	inc	r0
      00005E E6               [12]  176 	mov	a,@r0
      00005F 33               [12]  177 	rlc	a
      000060 F6               [12]  178 	mov	@r0,a
      000061 08               [12]  179 	inc	r0
      000062 E6               [12]  180 	mov	a,@r0
      000063 33               [12]  181 	rlc	a
      000064 F6               [12]  182 	mov	@r0,a
      000065 08               [12]  183 	inc	r0
      000066 E6               [12]  184 	mov	a,@r0
      000067 33               [12]  185 	rlc	a
      000068 F6               [12]  186 	mov	@r0,a
      000069 08               [12]  187 	inc	r0
      00006A E6               [12]  188 	mov	a,@r0
      00006B 33               [12]  189 	rlc	a
      00006C F6               [12]  190 	mov	@r0,a
      00006D 08               [12]  191 	inc	r0
      00006E E6               [12]  192 	mov	a,@r0
      00006F 33               [12]  193 	rlc	a
      000070 F6               [12]  194 	mov	@r0,a
      000071 18               [12]  195 	dec	r0
      000072 18               [12]  196 	dec	r0
      000073 18               [12]  197 	dec	r0
      000074 18               [12]  198 	dec	r0
      000075 18               [12]  199 	dec	r0
      000076 18               [12]  200 	dec	r0
      000077 18               [12]  201 	dec	r0
      000078                        202 00125$:
      000078 D5 F0 D7         [24]  203 	djnz	b,00124$
      00007B A8*00            [24]  204 	mov	r0,_bp
      00007D 08               [12]  205 	inc	r0
      00007E E5*00            [12]  206 	mov	a,_bp
      000080 24 09            [12]  207 	add	a,#0x09
      000082 F9               [12]  208 	mov	r1,a
      000083 E6               [12]  209 	mov	a,@r0
      000084 57               [12]  210 	anl	a,@r1
      000085 F7               [12]  211 	mov	@r1,a
      000086 08               [12]  212 	inc	r0
      000087 E6               [12]  213 	mov	a,@r0
      000088 09               [12]  214 	inc	r1
      000089 57               [12]  215 	anl	a,@r1
      00008A F7               [12]  216 	mov	@r1,a
      00008B 08               [12]  217 	inc	r0
      00008C E6               [12]  218 	mov	a,@r0
      00008D 09               [12]  219 	inc	r1
      00008E 57               [12]  220 	anl	a,@r1
      00008F F7               [12]  221 	mov	@r1,a
      000090 08               [12]  222 	inc	r0
      000091 E6               [12]  223 	mov	a,@r0
      000092 09               [12]  224 	inc	r1
      000093 57               [12]  225 	anl	a,@r1
      000094 F7               [12]  226 	mov	@r1,a
      000095 08               [12]  227 	inc	r0
      000096 E6               [12]  228 	mov	a,@r0
      000097 09               [12]  229 	inc	r1
      000098 57               [12]  230 	anl	a,@r1
      000099 F7               [12]  231 	mov	@r1,a
      00009A 08               [12]  232 	inc	r0
      00009B E6               [12]  233 	mov	a,@r0
      00009C 09               [12]  234 	inc	r1
      00009D 57               [12]  235 	anl	a,@r1
      00009E F7               [12]  236 	mov	@r1,a
      00009F 08               [12]  237 	inc	r0
      0000A0 E6               [12]  238 	mov	a,@r0
      0000A1 09               [12]  239 	inc	r1
      0000A2 57               [12]  240 	anl	a,@r1
      0000A3 F7               [12]  241 	mov	@r1,a
      0000A4 08               [12]  242 	inc	r0
      0000A5 E6               [12]  243 	mov	a,@r0
      0000A6 09               [12]  244 	inc	r1
      0000A7 57               [12]  245 	anl	a,@r1
      0000A8 F7               [12]  246 	mov	@r1,a
      0000A9 D0 07            [24]  247 	pop	ar7
      0000AB E5*00            [12]  248 	mov	a,_bp
      0000AD 24 09            [12]  249 	add	a,#0x09
      0000AF F8               [12]  250 	mov	r0,a
      0000B0 E6               [12]  251 	mov	a,@r0
      0000B1 08               [12]  252 	inc	r0
      0000B2 46               [12]  253 	orl	a,@r0
      0000B3 08               [12]  254 	inc	r0
      0000B4 46               [12]  255 	orl	a,@r0
      0000B5 08               [12]  256 	inc	r0
      0000B6 46               [12]  257 	orl	a,@r0
      0000B7 08               [12]  258 	inc	r0
      0000B8 46               [12]  259 	orl	a,@r0
      0000B9 08               [12]  260 	inc	r0
      0000BA 46               [12]  261 	orl	a,@r0
      0000BB 08               [12]  262 	inc	r0
      0000BC 46               [12]  263 	orl	a,@r0
      0000BD 08               [12]  264 	inc	r0
      0000BE 46               [12]  265 	orl	a,@r0
      0000BF 60 05            [24]  266 	jz	00106$
                                    267 ;	__stdc_bit_widthull.c:42: width = (i + 1);
      0000C1 8D 06            [24]  268 	mov	ar6,r5
      0000C3 EE               [12]  269 	mov	a,r6
      0000C4 04               [12]  270 	inc	a
      0000C5 FF               [12]  271 	mov	r7,a
      0000C6                        272 00106$:
                                    273 ;	__stdc_bit_widthull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      0000C6 0D               [12]  274 	inc	r5
      0000C7 02r00r1F         [24]  275 	ljmp	00105$
      0000CA                        276 00103$:
                                    277 ;	__stdc_bit_widthull.c:43: return width;
      0000CA 8F 82            [24]  278 	mov	dpl,r7
                                    279 ;	__stdc_bit_widthull.c:44: }
      0000CC 85*00 81         [24]  280 	mov	sp,_bp
      0000CF D0*00            [24]  281 	pop	_bp
      0000D1 22               [24]  282 	ret
                                    283 	.area CSEG    (CODE)
                                    284 	.area CONST   (CODE)
                                    285 	.area XINIT   (CODE)
                                    286 	.area CABS    (ABS,CODE)
