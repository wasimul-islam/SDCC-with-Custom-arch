                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _moduint
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __moduint
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_moduint'
                                     91 ;------------------------------------------------------------
                                     92 ;b                         Allocated to stack - _bp -4
                                     93 ;a                         Allocated to registers r6 r7 
                                     94 ;count                     Allocated to registers r5 
                                     95 ;------------------------------------------------------------
                                     96 ;	_moduint.c:179: _moduint (unsigned int a, unsigned int b) __SDCC_NONBANKED
                                     97 ;	-----------------------------------------
                                     98 ;	 function _moduint
                                     99 ;	-----------------------------------------
      000000                        100 __moduint:
                           000007   101 	ar7 = 0x07
                           000006   102 	ar6 = 0x06
                           000005   103 	ar5 = 0x05
                           000004   104 	ar4 = 0x04
                           000003   105 	ar3 = 0x03
                           000002   106 	ar2 = 0x02
                           000001   107 	ar1 = 0x01
                           000000   108 	ar0 = 0x00
      000000 C0*00            [24]  109 	push	_bp
      000002 85 81*00         [24]  110 	mov	_bp,sp
      000005 AE 82            [24]  111 	mov	r6,dpl
      000007 AF 83            [24]  112 	mov	r7,dph
                                    113 ;	_moduint.c:181: unsigned char count = 0;
      000009 7D 00            [12]  114 	mov	r5,#0x00
                                    115 ;	_moduint.c:183: while (!MSB_SET(b))
      00000B 7C 00            [12]  116 	mov	r4,#0x00
      00000D                        117 00103$:
      00000D E5*00            [12]  118 	mov	a,_bp
      00000F 24 FC            [12]  119 	add	a,#0xfc
      000011 F8               [12]  120 	mov	r0,a
      000012 08               [12]  121 	inc	r0
      000013 E6               [12]  122 	mov	a,@r0
      000014 23               [12]  123 	rl	a
      000015 54 01            [12]  124 	anl	a,#0x01
      000017 FB               [12]  125 	mov	r3,a
      000018 70 2F            [24]  126 	jnz	00117$
                                    127 ;	_moduint.c:185: b <<= 1;
      00001A E5*00            [12]  128 	mov	a,_bp
      00001C 24 FC            [12]  129 	add	a,#0xfc
      00001E F8               [12]  130 	mov	r0,a
      00001F E6               [12]  131 	mov	a,@r0
      000020 26               [12]  132 	add	a,@r0
      000021 F6               [12]  133 	mov	@r0,a
      000022 08               [12]  134 	inc	r0
      000023 E6               [12]  135 	mov	a,@r0
      000024 33               [12]  136 	rlc	a
      000025 F6               [12]  137 	mov	@r0,a
                                    138 ;	_moduint.c:186: if (b > a)
      000026 E5*00            [12]  139 	mov	a,_bp
      000028 24 FC            [12]  140 	add	a,#0xfc
      00002A F8               [12]  141 	mov	r0,a
      00002B C3               [12]  142 	clr	c
      00002C EE               [12]  143 	mov	a,r6
      00002D 96               [12]  144 	subb	a,@r0
      00002E EF               [12]  145 	mov	a,r7
      00002F 08               [12]  146 	inc	r0
      000030 96               [12]  147 	subb	a,@r0
      000031 50 11            [24]  148 	jnc	00102$
                                    149 ;	_moduint.c:188: b >>=1;
      000033 E5*00            [12]  150 	mov	a,_bp
      000035 24 FC            [12]  151 	add	a,#0xfc
      000037 F8               [12]  152 	mov	r0,a
      000038 08               [12]  153 	inc	r0
      000039 E6               [12]  154 	mov	a,@r0
      00003A 18               [12]  155 	dec	r0
      00003B C3               [12]  156 	clr	c
      00003C 13               [12]  157 	rrc	a
      00003D C6               [12]  158 	xch	a,@r0
      00003E 13               [12]  159 	rrc	a
      00003F C6               [12]  160 	xch	a,@r0
      000040 08               [12]  161 	inc	r0
      000041 F6               [12]  162 	mov	@r0,a
                                    163 ;	_moduint.c:189: break;
      000042 80 05            [24]  164 	sjmp	00117$
      000044                        165 00102$:
                                    166 ;	_moduint.c:191: count++;
      000044 0C               [12]  167 	inc	r4
      000045 8C 05            [24]  168 	mov	ar5,r4
                                    169 ;	_moduint.c:193: do
      000047 80 C4            [24]  170 	sjmp	00103$
      000049                        171 00117$:
      000049                        172 00108$:
                                    173 ;	_moduint.c:195: if (a >= b)
      000049 E5*00            [12]  174 	mov	a,_bp
      00004B 24 FC            [12]  175 	add	a,#0xfc
      00004D F8               [12]  176 	mov	r0,a
      00004E C3               [12]  177 	clr	c
      00004F EE               [12]  178 	mov	a,r6
      000050 96               [12]  179 	subb	a,@r0
      000051 EF               [12]  180 	mov	a,r7
      000052 08               [12]  181 	inc	r0
      000053 96               [12]  182 	subb	a,@r0
      000054 40 0D            [24]  183 	jc	00107$
                                    184 ;	_moduint.c:196: a -= b;
      000056 E5*00            [12]  185 	mov	a,_bp
      000058 24 FC            [12]  186 	add	a,#0xfc
      00005A F8               [12]  187 	mov	r0,a
      00005B EE               [12]  188 	mov	a,r6
      00005C C3               [12]  189 	clr	c
      00005D 96               [12]  190 	subb	a,@r0
      00005E FE               [12]  191 	mov	r6,a
      00005F EF               [12]  192 	mov	a,r7
      000060 08               [12]  193 	inc	r0
      000061 96               [12]  194 	subb	a,@r0
      000062 FF               [12]  195 	mov	r7,a
      000063                        196 00107$:
                                    197 ;	_moduint.c:197: b >>= 1;
      000063 E5*00            [12]  198 	mov	a,_bp
      000065 24 FC            [12]  199 	add	a,#0xfc
      000067 F8               [12]  200 	mov	r0,a
      000068 08               [12]  201 	inc	r0
      000069 E6               [12]  202 	mov	a,@r0
      00006A 18               [12]  203 	dec	r0
      00006B C3               [12]  204 	clr	c
      00006C 13               [12]  205 	rrc	a
      00006D C6               [12]  206 	xch	a,@r0
      00006E 13               [12]  207 	rrc	a
      00006F C6               [12]  208 	xch	a,@r0
      000070 08               [12]  209 	inc	r0
      000071 F6               [12]  210 	mov	@r0,a
                                    211 ;	_moduint.c:199: while (count--);
      000072 8D 04            [24]  212 	mov	ar4,r5
      000074 1D               [12]  213 	dec	r5
      000075 EC               [12]  214 	mov	a,r4
      000076 70 D1            [24]  215 	jnz	00108$
                                    216 ;	_moduint.c:200: return a;
      000078 8E 82            [24]  217 	mov	dpl,r6
      00007A 8F 83            [24]  218 	mov	dph,r7
                                    219 ;	_moduint.c:201: }
      00007C D0*00            [24]  220 	pop	_bp
      00007E 22               [24]  221 	ret
                                    222 	.area CSEG    (CODE)
                                    223 	.area CONST   (CODE)
                                    224 	.area XINIT   (CODE)
                                    225 	.area CABS    (ABS,CODE)
