                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _atof
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 	.globl _toupper
                                     13 	.globl _isspace
                                     14 	.globl _atof
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; overlayable bit register bank
                                     32 ;--------------------------------------------------------
                                     33 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         34 bits:
      000000                         35 	.ds 1
                           008000    36 	b0 = bits[0]
                           008100    37 	b1 = bits[1]
                           008200    38 	b2 = bits[2]
                           008300    39 	b3 = bits[3]
                           008400    40 	b4 = bits[4]
                           008500    41 	b5 = bits[5]
                           008600    42 	b6 = bits[6]
                           008700    43 	b7 = bits[7]
                                     44 ;--------------------------------------------------------
                                     45 ; internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DSEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; uninitialized external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XABS    (ABS,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; initialized external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XISEG   (XDATA)
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT0 (CODE)
                                     82 	.area GSINIT1 (CODE)
                                     83 	.area GSINIT2 (CODE)
                                     84 	.area GSINIT3 (CODE)
                                     85 	.area GSINIT4 (CODE)
                                     86 	.area GSINIT5 (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area CSEG    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'atof'
                                    108 ;------------------------------------------------------------
                                    109 ;s                         Allocated to registers 
                                    110 ;__1310720004              Allocated to registers 
                                    111 ;value                     Allocated to stack - _bp +12
                                    112 ;fraction                  Allocated to registers r7 r6 r5 r2 
                                    113 ;iexp                      Allocated to registers r6 
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;__1966080005              Allocated to registers 
                                    116 ;c                         Allocated to registers 
                                    117 ;__1966080007              Allocated to registers 
                                    118 ;__2621440008              Allocated to registers 
                                    119 ;c                         Allocated to registers 
                                    120 ;sloc0                     Allocated to stack - _bp +26
                                    121 ;sloc1                     Allocated to stack - _bp +1
                                    122 ;sloc2                     Allocated to stack - _bp +4
                                    123 ;sloc3                     Allocated to stack - _bp +8
                                    124 ;------------------------------------------------------------
                                    125 ;	_atof.c:33: float atof(const char * s)
                                    126 ;	-----------------------------------------
                                    127 ;	 function atof
                                    128 ;	-----------------------------------------
      000000                        129 _atof:
                           000007   130 	ar7 = 0x07
                           000006   131 	ar6 = 0x06
                           000005   132 	ar5 = 0x05
                           000004   133 	ar4 = 0x04
                           000003   134 	ar3 = 0x03
                           000002   135 	ar2 = 0x02
                           000001   136 	ar1 = 0x01
                           000000   137 	ar0 = 0x00
      000000 C0*00            [24]  138 	push	_bp
      000002 E5 81            [12]  139 	mov	a,sp
      000004 F5*00            [12]  140 	mov	_bp,a
      000006 24 0F            [12]  141 	add	a,#0x0f
      000008 F5 81            [12]  142 	mov	sp,a
      00000A AD 82            [24]  143 	mov	r5,dpl
      00000C AE 83            [24]  144 	mov	r6,dph
      00000E AF F0            [24]  145 	mov	r7,b
                                    146 ;	_atof.c:40: while (isspace(*s)) s++;
      000010                        147 00101$:
      000010 8D 82            [24]  148 	mov	dpl,r5
      000012 8E 83            [24]  149 	mov	dph,r6
      000014 8F F0            [24]  150 	mov	b,r7
      000016 12r00r00         [24]  151 	lcall	__gptrget
      000019 FC               [12]  152 	mov	r4,a
      00001A 7B 00            [12]  153 	mov	r3,#0x00
      00001C 8C 82            [24]  154 	mov	dpl,r4
      00001E 8B 83            [24]  155 	mov	dph,r3
      000020 C0 07            [24]  156 	push	ar7
      000022 C0 06            [24]  157 	push	ar6
      000024 C0 05            [24]  158 	push	ar5
      000026 12r00r00         [24]  159 	lcall	_isspace
      000029 E5 82            [12]  160 	mov	a,dpl
      00002B 85 83 F0         [24]  161 	mov	b,dph
      00002E D0 05            [24]  162 	pop	ar5
      000030 D0 06            [24]  163 	pop	ar6
      000032 D0 07            [24]  164 	pop	ar7
      000034 45 F0            [12]  165 	orl	a,b
      000036 60 07            [24]  166 	jz	00155$
      000038 0D               [12]  167 	inc	r5
      000039 BD 00 D4         [24]  168 	cjne	r5,#0x00,00101$
      00003C 0E               [12]  169 	inc	r6
      00003D 80 D1            [24]  170 	sjmp	00101$
      00003F                        171 00155$:
      00003F A8*00            [24]  172 	mov	r0,_bp
      000041 08               [12]  173 	inc	r0
      000042 A6 05            [24]  174 	mov	@r0,ar5
      000044 08               [12]  175 	inc	r0
      000045 A6 06            [24]  176 	mov	@r0,ar6
      000047 08               [12]  177 	inc	r0
      000048 A6 07            [24]  178 	mov	@r0,ar7
                                    179 ;	_atof.c:43: if (*s == '-')
      00004A 8D 82            [24]  180 	mov	dpl,r5
      00004C 8E 83            [24]  181 	mov	dph,r6
      00004E 8F F0            [24]  182 	mov	b,r7
      000050 12r00r00         [24]  183 	lcall	__gptrget
      000053 FC               [12]  184 	mov	r4,a
      000054 BC 2D 12         [24]  185 	cjne	r4,#0x2d,00107$
                                    186 ;	_atof.c:45: sign=1;
                                    187 ;	assignBit
      000057 D2*00            [12]  188 	setb	b0
                                    189 ;	_atof.c:46: s++;
      000059 A8*00            [24]  190 	mov	r0,_bp
      00005B 08               [12]  191 	inc	r0
      00005C 74 01            [12]  192 	mov	a,#0x01
      00005E 2D               [12]  193 	add	a,r5
      00005F F6               [12]  194 	mov	@r0,a
      000060 E4               [12]  195 	clr	a
      000061 3E               [12]  196 	addc	a,r6
      000062 08               [12]  197 	inc	r0
      000063 F6               [12]  198 	mov	@r0,a
      000064 08               [12]  199 	inc	r0
      000065 A6 07            [24]  200 	mov	@r0,ar7
      000067 80 13            [24]  201 	sjmp	00108$
      000069                        202 00107$:
                                    203 ;	_atof.c:50: sign=0;
                                    204 ;	assignBit
      000069 C2*00            [12]  205 	clr	b0
                                    206 ;	_atof.c:51: if (*s == '+') s++;
      00006B BC 2B 0E         [24]  207 	cjne	r4,#0x2b,00108$
      00006E A8*00            [24]  208 	mov	r0,_bp
      000070 08               [12]  209 	inc	r0
      000071 74 01            [12]  210 	mov	a,#0x01
      000073 2D               [12]  211 	add	a,r5
      000074 F6               [12]  212 	mov	@r0,a
      000075 E4               [12]  213 	clr	a
      000076 3E               [12]  214 	addc	a,r6
      000077 08               [12]  215 	inc	r0
      000078 F6               [12]  216 	mov	@r0,a
      000079 08               [12]  217 	inc	r0
      00007A A6 07            [24]  218 	mov	@r0,ar7
      00007C                        219 00108$:
                                    220 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00007C E5*00            [12]  221 	mov	a,_bp
      00007E 24 0C            [12]  222 	add	a,#0x0c
      000080 F8               [12]  223 	mov	r0,a
      000081 E4               [12]  224 	clr	a
      000082 F6               [12]  225 	mov	@r0,a
      000083 08               [12]  226 	inc	r0
      000084 F6               [12]  227 	mov	@r0,a
      000085 08               [12]  228 	inc	r0
      000086 F6               [12]  229 	mov	@r0,a
      000087 08               [12]  230 	inc	r0
      000088 F6               [12]  231 	mov	@r0,a
      000089 A8*00            [24]  232 	mov	r0,_bp
      00008B 08               [12]  233 	inc	r0
      00008C                        234 00126$:
      00008C A8*00            [24]  235 	mov	r0,_bp
      00008E 08               [12]  236 	inc	r0
      00008F 86 82            [24]  237 	mov	dpl,@r0
      000091 08               [12]  238 	inc	r0
      000092 86 83            [24]  239 	mov	dph,@r0
      000094 08               [12]  240 	inc	r0
      000095 86 F0            [24]  241 	mov	b,@r0
      000097 12r00r00         [24]  242 	lcall	__gptrget
      00009A FE               [12]  243 	mov	r6,a
                                    244 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      00009B BE 30 00         [24]  245 	cjne	r6,#0x30,00226$
      00009E                        246 00226$:
      00009E 92*00            [24]  247 	mov	b1,c
      0000A0 50 03            [24]  248 	jnc	00227$
      0000A2 02r01r59         [24]  249 	ljmp	00156$
      0000A5                        250 00227$:
      0000A5 EE               [12]  251 	mov	a,r6
      0000A6 24 C6            [12]  252 	add	a,#0xff - 0x39
      0000A8 92*00            [24]  253 	mov	b1,c
      0000AA 50 03            [24]  254 	jnc	00228$
      0000AC 02r01r59         [24]  255 	ljmp	00156$
      0000AF                        256 00228$:
                                    257 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000AF C0*00            [24]  258 	push	bits
      0000B1 E5*00            [12]  259 	mov	a,_bp
      0000B3 24 0C            [12]  260 	add	a,#0x0c
      0000B5 F8               [12]  261 	mov	r0,a
      0000B6 E6               [12]  262 	mov	a,@r0
      0000B7 C0 E0            [24]  263 	push	acc
      0000B9 08               [12]  264 	inc	r0
      0000BA E6               [12]  265 	mov	a,@r0
      0000BB C0 E0            [24]  266 	push	acc
      0000BD 08               [12]  267 	inc	r0
      0000BE E6               [12]  268 	mov	a,@r0
      0000BF C0 E0            [24]  269 	push	acc
      0000C1 08               [12]  270 	inc	r0
      0000C2 E6               [12]  271 	mov	a,@r0
      0000C3 C0 E0            [24]  272 	push	acc
      0000C5 90 00 00         [24]  273 	mov	dptr,#0x0000
      0000C8 75 F0 20         [24]  274 	mov	b,#0x20
      0000CB 74 41            [12]  275 	mov	a,#0x41
      0000CD 12r00r00         [24]  276 	lcall	___fsmul
      0000D0 C8               [12]  277 	xch	a,r0
      0000D1 E5*00            [12]  278 	mov	a,_bp
      0000D3 24 04            [12]  279 	add	a,#0x04
      0000D5 C8               [12]  280 	xch	a,r0
      0000D6 A6 82            [24]  281 	mov	@r0,dpl
      0000D8 08               [12]  282 	inc	r0
      0000D9 A6 83            [24]  283 	mov	@r0,dph
      0000DB 08               [12]  284 	inc	r0
      0000DC A6 F0            [24]  285 	mov	@r0,b
      0000DE 08               [12]  286 	inc	r0
      0000DF F6               [12]  287 	mov	@r0,a
      0000E0 E5 81            [12]  288 	mov	a,sp
      0000E2 24 FC            [12]  289 	add	a,#0xfc
      0000E4 F5 81            [12]  290 	mov	sp,a
      0000E6 D0*00            [24]  291 	pop	bits
      0000E8 A8*00            [24]  292 	mov	r0,_bp
      0000EA 08               [12]  293 	inc	r0
      0000EB 86 82            [24]  294 	mov	dpl,@r0
      0000ED 08               [12]  295 	inc	r0
      0000EE 86 83            [24]  296 	mov	dph,@r0
      0000F0 08               [12]  297 	inc	r0
      0000F1 86 F0            [24]  298 	mov	b,@r0
      0000F3 12r00r00         [24]  299 	lcall	__gptrget
      0000F6 FB               [12]  300 	mov	r3,a
      0000F7 A3               [24]  301 	inc	dptr
      0000F8 18               [12]  302 	dec	r0
      0000F9 18               [12]  303 	dec	r0
      0000FA A6 82            [24]  304 	mov	@r0,dpl
      0000FC 08               [12]  305 	inc	r0
      0000FD A6 83            [24]  306 	mov	@r0,dph
      0000FF 7A 00            [12]  307 	mov	r2,#0x00
      000101 EB               [12]  308 	mov	a,r3
      000102 24 D0            [12]  309 	add	a,#0xd0
      000104 FB               [12]  310 	mov	r3,a
      000105 EA               [12]  311 	mov	a,r2
      000106 34 FF            [12]  312 	addc	a,#0xff
      000108 FA               [12]  313 	mov	r2,a
      000109 8B 82            [24]  314 	mov	dpl,r3
      00010B 8A 83            [24]  315 	mov	dph,r2
      00010D C0*00            [24]  316 	push	bits
      00010F 12r00r00         [24]  317 	lcall	___sint2fs
      000112 AA 82            [24]  318 	mov	r2,dpl
      000114 AB 83            [24]  319 	mov	r3,dph
      000116 AE F0            [24]  320 	mov	r6,b
      000118 FF               [12]  321 	mov	r7,a
      000119 D0*00            [24]  322 	pop	bits
      00011B C0*00            [24]  323 	push	bits
      00011D C0 02            [24]  324 	push	ar2
      00011F C0 03            [24]  325 	push	ar3
      000121 C0 06            [24]  326 	push	ar6
      000123 C0 07            [24]  327 	push	ar7
      000125 E5*00            [12]  328 	mov	a,_bp
      000127 24 04            [12]  329 	add	a,#0x04
      000129 F8               [12]  330 	mov	r0,a
      00012A 86 82            [24]  331 	mov	dpl,@r0
      00012C 08               [12]  332 	inc	r0
      00012D 86 83            [24]  333 	mov	dph,@r0
      00012F 08               [12]  334 	inc	r0
      000130 86 F0            [24]  335 	mov	b,@r0
      000132 08               [12]  336 	inc	r0
      000133 E6               [12]  337 	mov	a,@r0
      000134 12r00r00         [24]  338 	lcall	___fsadd
      000137 AC 82            [24]  339 	mov	r4,dpl
      000139 AD 83            [24]  340 	mov	r5,dph
      00013B AE F0            [24]  341 	mov	r6,b
      00013D FF               [12]  342 	mov	r7,a
      00013E E5 81            [12]  343 	mov	a,sp
      000140 24 FC            [12]  344 	add	a,#0xfc
      000142 F5 81            [12]  345 	mov	sp,a
      000144 D0*00            [24]  346 	pop	bits
      000146 E5*00            [12]  347 	mov	a,_bp
      000148 24 0C            [12]  348 	add	a,#0x0c
      00014A F8               [12]  349 	mov	r0,a
      00014B A6 04            [24]  350 	mov	@r0,ar4
      00014D 08               [12]  351 	inc	r0
      00014E A6 05            [24]  352 	mov	@r0,ar5
      000150 08               [12]  353 	inc	r0
      000151 A6 06            [24]  354 	mov	@r0,ar6
      000153 08               [12]  355 	inc	r0
      000154 A6 07            [24]  356 	mov	@r0,ar7
                                    357 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000156 02r00r8C         [24]  358 	ljmp	00126$
      000159                        359 00156$:
      000159 A8*00            [24]  360 	mov	r0,_bp
      00015B 08               [12]  361 	inc	r0
      00015C 86 05            [24]  362 	mov	ar5,@r0
      00015E 08               [12]  363 	inc	r0
      00015F 86 06            [24]  364 	mov	ar6,@r0
      000161 08               [12]  365 	inc	r0
      000162 86 07            [24]  366 	mov	ar7,@r0
                                    367 ;	_atof.c:61: if (*s == '.')
      000164 A8*00            [24]  368 	mov	r0,_bp
      000166 08               [12]  369 	inc	r0
      000167 86 82            [24]  370 	mov	dpl,@r0
      000169 08               [12]  371 	inc	r0
      00016A 86 83            [24]  372 	mov	dph,@r0
      00016C 08               [12]  373 	inc	r0
      00016D 86 F0            [24]  374 	mov	b,@r0
      00016F 12r00r00         [24]  375 	lcall	__gptrget
      000172 FC               [12]  376 	mov	r4,a
      000173 BC 2E 02         [24]  377 	cjne	r4,#0x2e,00229$
      000176 80 03            [24]  378 	sjmp	00230$
      000178                        379 00229$:
      000178 02r02rF4         [24]  380 	ljmp	00112$
      00017B                        381 00230$:
                                    382 ;	_atof.c:63: s++;
      00017B A8*00            [24]  383 	mov	r0,_bp
      00017D 08               [12]  384 	inc	r0
      00017E E5*00            [12]  385 	mov	a,_bp
      000180 24 04            [12]  386 	add	a,#0x04
      000182 F9               [12]  387 	mov	r1,a
      000183 74 01            [12]  388 	mov	a,#0x01
      000185 26               [12]  389 	add	a,@r0
      000186 F7               [12]  390 	mov	@r1,a
      000187 E4               [12]  391 	clr	a
      000188 08               [12]  392 	inc	r0
      000189 36               [12]  393 	addc	a,@r0
      00018A 09               [12]  394 	inc	r1
      00018B F7               [12]  395 	mov	@r1,a
      00018C 08               [12]  396 	inc	r0
      00018D E6               [12]  397 	mov	a,@r0
      00018E 09               [12]  398 	inc	r1
      00018F F7               [12]  399 	mov	@r1,a
                                    400 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      000190 7F CD            [12]  401 	mov	r7,#0xcd
      000192 7E CC            [12]  402 	mov	r6,#0xcc
      000194 7D CC            [12]  403 	mov	r5,#0xcc
      000196 7A 3D            [12]  404 	mov	r2,#0x3d
      000198                        405 00129$:
      000198 E5*00            [12]  406 	mov	a,_bp
      00019A 24 04            [12]  407 	add	a,#0x04
      00019C F8               [12]  408 	mov	r0,a
      00019D 86 82            [24]  409 	mov	dpl,@r0
      00019F 08               [12]  410 	inc	r0
      0001A0 86 83            [24]  411 	mov	dph,@r0
      0001A2 08               [12]  412 	inc	r0
      0001A3 86 F0            [24]  413 	mov	b,@r0
      0001A5 12r00r00         [24]  414 	lcall	__gptrget
      0001A8 FC               [12]  415 	mov	r4,a
                                    416 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      0001A9 BC 30 00         [24]  417 	cjne	r4,#0x30,00231$
      0001AC                        418 00231$:
      0001AC 92*00            [24]  419 	mov	b1,c
      0001AE 50 03            [24]  420 	jnc	00232$
      0001B0 02r02rE7         [24]  421 	ljmp	00157$
      0001B3                        422 00232$:
      0001B3 EC               [12]  423 	mov	a,r4
      0001B4 24 C6            [12]  424 	add	a,#0xff - 0x39
      0001B6 92*00            [24]  425 	mov	b1,c
      0001B8 50 03            [24]  426 	jnc	00233$
      0001BA 02r02rE7         [24]  427 	ljmp	00157$
      0001BD                        428 00233$:
                                    429 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001BD E5*00            [12]  430 	mov	a,_bp
      0001BF 24 04            [12]  431 	add	a,#0x04
      0001C1 F8               [12]  432 	mov	r0,a
      0001C2 86 82            [24]  433 	mov	dpl,@r0
      0001C4 08               [12]  434 	inc	r0
      0001C5 86 83            [24]  435 	mov	dph,@r0
      0001C7 08               [12]  436 	inc	r0
      0001C8 86 F0            [24]  437 	mov	b,@r0
      0001CA 12r00r00         [24]  438 	lcall	__gptrget
      0001CD FC               [12]  439 	mov	r4,a
      0001CE A3               [24]  440 	inc	dptr
      0001CF 18               [12]  441 	dec	r0
      0001D0 18               [12]  442 	dec	r0
      0001D1 A6 82            [24]  443 	mov	@r0,dpl
      0001D3 08               [12]  444 	inc	r0
      0001D4 A6 83            [24]  445 	mov	@r0,dph
      0001D6 7B 00            [12]  446 	mov	r3,#0x00
      0001D8 EC               [12]  447 	mov	a,r4
      0001D9 24 D0            [12]  448 	add	a,#0xd0
      0001DB FC               [12]  449 	mov	r4,a
      0001DC EB               [12]  450 	mov	a,r3
      0001DD 34 FF            [12]  451 	addc	a,#0xff
      0001DF FB               [12]  452 	mov	r3,a
      0001E0 8C 82            [24]  453 	mov	dpl,r4
      0001E2 8B 83            [24]  454 	mov	dph,r3
      0001E4 C0 07            [24]  455 	push	ar7
      0001E6 C0 06            [24]  456 	push	ar6
      0001E8 C0 05            [24]  457 	push	ar5
      0001EA C0 02            [24]  458 	push	ar2
      0001EC C0*00            [24]  459 	push	bits
      0001EE 12r00r00         [24]  460 	lcall	___sint2fs
      0001F1 C8               [12]  461 	xch	a,r0
      0001F2 E5*00            [12]  462 	mov	a,_bp
      0001F4 24 08            [12]  463 	add	a,#0x08
      0001F6 C8               [12]  464 	xch	a,r0
      0001F7 A6 82            [24]  465 	mov	@r0,dpl
      0001F9 08               [12]  466 	inc	r0
      0001FA A6 83            [24]  467 	mov	@r0,dph
      0001FC 08               [12]  468 	inc	r0
      0001FD A6 F0            [24]  469 	mov	@r0,b
      0001FF 08               [12]  470 	inc	r0
      000200 F6               [12]  471 	mov	@r0,a
      000201 D0*00            [24]  472 	pop	bits
      000203 D0 02            [24]  473 	pop	ar2
      000205 D0 05            [24]  474 	pop	ar5
      000207 D0 06            [24]  475 	pop	ar6
      000209 D0 07            [24]  476 	pop	ar7
      00020B C0 07            [24]  477 	push	ar7
      00020D C0 06            [24]  478 	push	ar6
      00020F C0 05            [24]  479 	push	ar5
      000211 C0 02            [24]  480 	push	ar2
      000213 C0*00            [24]  481 	push	bits
      000215 C0 07            [24]  482 	push	ar7
      000217 C0 06            [24]  483 	push	ar6
      000219 C0 05            [24]  484 	push	ar5
      00021B C0 02            [24]  485 	push	ar2
      00021D E5*00            [12]  486 	mov	a,_bp
      00021F 24 08            [12]  487 	add	a,#0x08
      000221 F8               [12]  488 	mov	r0,a
      000222 86 82            [24]  489 	mov	dpl,@r0
      000224 08               [12]  490 	inc	r0
      000225 86 83            [24]  491 	mov	dph,@r0
      000227 08               [12]  492 	inc	r0
      000228 86 F0            [24]  493 	mov	b,@r0
      00022A 08               [12]  494 	inc	r0
      00022B E6               [12]  495 	mov	a,@r0
      00022C 12r00r00         [24]  496 	lcall	___fsmul
      00022F C8               [12]  497 	xch	a,r0
      000230 E5*00            [12]  498 	mov	a,_bp
      000232 24 08            [12]  499 	add	a,#0x08
      000234 C8               [12]  500 	xch	a,r0
      000235 A6 82            [24]  501 	mov	@r0,dpl
      000237 08               [12]  502 	inc	r0
      000238 A6 83            [24]  503 	mov	@r0,dph
      00023A 08               [12]  504 	inc	r0
      00023B A6 F0            [24]  505 	mov	@r0,b
      00023D 08               [12]  506 	inc	r0
      00023E F6               [12]  507 	mov	@r0,a
      00023F E5 81            [12]  508 	mov	a,sp
      000241 24 FC            [12]  509 	add	a,#0xfc
      000243 F5 81            [12]  510 	mov	sp,a
      000245 D0*00            [24]  511 	pop	bits
      000247 C0*00            [24]  512 	push	bits
      000249 E5*00            [12]  513 	mov	a,_bp
      00024B 24 08            [12]  514 	add	a,#0x08
      00024D F8               [12]  515 	mov	r0,a
      00024E E6               [12]  516 	mov	a,@r0
      00024F C0 E0            [24]  517 	push	acc
      000251 08               [12]  518 	inc	r0
      000252 E6               [12]  519 	mov	a,@r0
      000253 C0 E0            [24]  520 	push	acc
      000255 08               [12]  521 	inc	r0
      000256 E6               [12]  522 	mov	a,@r0
      000257 C0 E0            [24]  523 	push	acc
      000259 08               [12]  524 	inc	r0
      00025A E6               [12]  525 	mov	a,@r0
      00025B C0 E0            [24]  526 	push	acc
      00025D E5*00            [12]  527 	mov	a,_bp
      00025F 24 0C            [12]  528 	add	a,#0x0c
      000261 F8               [12]  529 	mov	r0,a
      000262 86 82            [24]  530 	mov	dpl,@r0
      000264 08               [12]  531 	inc	r0
      000265 86 83            [24]  532 	mov	dph,@r0
      000267 08               [12]  533 	inc	r0
      000268 86 F0            [24]  534 	mov	b,@r0
      00026A 08               [12]  535 	inc	r0
      00026B E6               [12]  536 	mov	a,@r0
      00026C 12r00r00         [24]  537 	lcall	___fsadd
      00026F C8               [12]  538 	xch	a,r0
      000270 E5*00            [12]  539 	mov	a,_bp
      000272 24 08            [12]  540 	add	a,#0x08
      000274 C8               [12]  541 	xch	a,r0
      000275 A6 82            [24]  542 	mov	@r0,dpl
      000277 08               [12]  543 	inc	r0
      000278 A6 83            [24]  544 	mov	@r0,dph
      00027A 08               [12]  545 	inc	r0
      00027B A6 F0            [24]  546 	mov	@r0,b
      00027D 08               [12]  547 	inc	r0
      00027E F6               [12]  548 	mov	@r0,a
      00027F E5 81            [12]  549 	mov	a,sp
      000281 24 FC            [12]  550 	add	a,#0xfc
      000283 F5 81            [12]  551 	mov	sp,a
      000285 D0*00            [24]  552 	pop	bits
      000287 D0 02            [24]  553 	pop	ar2
      000289 D0 05            [24]  554 	pop	ar5
      00028B D0 06            [24]  555 	pop	ar6
      00028D D0 07            [24]  556 	pop	ar7
      00028F E5*00            [12]  557 	mov	a,_bp
      000291 24 08            [12]  558 	add	a,#0x08
      000293 F8               [12]  559 	mov	r0,a
      000294 E5*00            [12]  560 	mov	a,_bp
      000296 24 0C            [12]  561 	add	a,#0x0c
      000298 F9               [12]  562 	mov	r1,a
      000299 E6               [12]  563 	mov	a,@r0
      00029A F7               [12]  564 	mov	@r1,a
      00029B 08               [12]  565 	inc	r0
      00029C E6               [12]  566 	mov	a,@r0
      00029D 09               [12]  567 	inc	r1
      00029E F7               [12]  568 	mov	@r1,a
      00029F 08               [12]  569 	inc	r0
      0002A0 E6               [12]  570 	mov	a,@r0
      0002A1 09               [12]  571 	inc	r1
      0002A2 F7               [12]  572 	mov	@r1,a
      0002A3 08               [12]  573 	inc	r0
      0002A4 E6               [12]  574 	mov	a,@r0
      0002A5 09               [12]  575 	inc	r1
      0002A6 F7               [12]  576 	mov	@r1,a
                                    577 ;	_atof.c:67: fraction*=0.1;
      0002A7 C0*00            [24]  578 	push	bits
      0002A9 C0 07            [24]  579 	push	ar7
      0002AB C0 06            [24]  580 	push	ar6
      0002AD C0 05            [24]  581 	push	ar5
      0002AF C0 02            [24]  582 	push	ar2
      0002B1 90 CC CD         [24]  583 	mov	dptr,#0xcccd
      0002B4 75 F0 CC         [24]  584 	mov	b,#0xcc
      0002B7 74 3D            [12]  585 	mov	a,#0x3d
      0002B9 12r00r00         [24]  586 	lcall	___fsmul
      0002BC C8               [12]  587 	xch	a,r0
      0002BD E5*00            [12]  588 	mov	a,_bp
      0002BF 24 08            [12]  589 	add	a,#0x08
      0002C1 C8               [12]  590 	xch	a,r0
      0002C2 A6 82            [24]  591 	mov	@r0,dpl
      0002C4 08               [12]  592 	inc	r0
      0002C5 A6 83            [24]  593 	mov	@r0,dph
      0002C7 08               [12]  594 	inc	r0
      0002C8 A6 F0            [24]  595 	mov	@r0,b
      0002CA 08               [12]  596 	inc	r0
      0002CB F6               [12]  597 	mov	@r0,a
      0002CC E5 81            [12]  598 	mov	a,sp
      0002CE 24 FC            [12]  599 	add	a,#0xfc
      0002D0 F5 81            [12]  600 	mov	sp,a
      0002D2 D0*00            [24]  601 	pop	bits
      0002D4 E5*00            [12]  602 	mov	a,_bp
      0002D6 24 08            [12]  603 	add	a,#0x08
      0002D8 F8               [12]  604 	mov	r0,a
      0002D9 86 07            [24]  605 	mov	ar7,@r0
      0002DB 08               [12]  606 	inc	r0
      0002DC 86 06            [24]  607 	mov	ar6,@r0
      0002DE 08               [12]  608 	inc	r0
      0002DF 86 05            [24]  609 	mov	ar5,@r0
      0002E1 08               [12]  610 	inc	r0
      0002E2 86 02            [24]  611 	mov	ar2,@r0
                                    612 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002E4 02r01r98         [24]  613 	ljmp	00129$
      0002E7                        614 00157$:
      0002E7 E5*00            [12]  615 	mov	a,_bp
      0002E9 24 04            [12]  616 	add	a,#0x04
      0002EB F8               [12]  617 	mov	r0,a
      0002EC 86 05            [24]  618 	mov	ar5,@r0
      0002EE 08               [12]  619 	inc	r0
      0002EF 86 06            [24]  620 	mov	ar6,@r0
      0002F1 08               [12]  621 	inc	r0
      0002F2 86 07            [24]  622 	mov	ar7,@r0
      0002F4                        623 00112$:
                                    624 ;	_atof.c:72: if (toupper(*s)=='E')
      0002F4 8D 82            [24]  625 	mov	dpl,r5
      0002F6 8E 83            [24]  626 	mov	dph,r6
      0002F8 8F F0            [24]  627 	mov	b,r7
      0002FA 12r00r00         [24]  628 	lcall	__gptrget
      0002FD FC               [12]  629 	mov	r4,a
      0002FE 7B 00            [12]  630 	mov	r3,#0x00
      000300 8C 82            [24]  631 	mov	dpl,r4
      000302 8B 83            [24]  632 	mov	dph,r3
      000304 C0 07            [24]  633 	push	ar7
      000306 C0 06            [24]  634 	push	ar6
      000308 C0 05            [24]  635 	push	ar5
      00030A C0*00            [24]  636 	push	bits
      00030C 12r00r00         [24]  637 	lcall	_toupper
      00030F AB 82            [24]  638 	mov	r3,dpl
      000311 AC 83            [24]  639 	mov	r4,dph
      000313 D0*00            [24]  640 	pop	bits
      000315 D0 05            [24]  641 	pop	ar5
      000317 D0 06            [24]  642 	pop	ar6
      000319 D0 07            [24]  643 	pop	ar7
      00031B BB 45 05         [24]  644 	cjne	r3,#0x45,00234$
      00031E BC 00 02         [24]  645 	cjne	r4,#0x00,00234$
      000321 80 03            [24]  646 	sjmp	00235$
      000323                        647 00234$:
      000323 02r03rD5         [24]  648 	ljmp	00120$
      000326                        649 00235$:
                                    650 ;	_atof.c:74: s++;
      000326 0D               [12]  651 	inc	r5
      000327 BD 00 01         [24]  652 	cjne	r5,#0x00,00236$
      00032A 0E               [12]  653 	inc	r6
      00032B                        654 00236$:
                                    655 ;	_atof.c:75: iexp=(signed char)atoi(s);
      00032B 8D 82            [24]  656 	mov	dpl,r5
      00032D 8E 83            [24]  657 	mov	dph,r6
      00032F 8F F0            [24]  658 	mov	b,r7
      000331 C0*00            [24]  659 	push	bits
      000333 12r00r00         [24]  660 	lcall	_atoi
      000336 AE 82            [24]  661 	mov	r6,dpl
      000338 AF 83            [24]  662 	mov	r7,dph
      00033A D0*00            [24]  663 	pop	bits
                                    664 ;	_atof.c:77: while(iexp!=0)
      00033C                        665 00116$:
      00033C EE               [12]  666 	mov	a,r6
      00033D 70 03            [24]  667 	jnz	00237$
      00033F 02r03rD5         [24]  668 	ljmp	00120$
      000342                        669 00237$:
                                    670 ;	_atof.c:79: if(iexp<0)
      000342 EE               [12]  671 	mov	a,r6
      000343 30 E7 47         [24]  672 	jnb	acc.7,00114$
                                    673 ;	_atof.c:81: value*=0.1;
      000346 C0 06            [24]  674 	push	ar6
      000348 C0*00            [24]  675 	push	bits
      00034A E5*00            [12]  676 	mov	a,_bp
      00034C 24 0C            [12]  677 	add	a,#0x0c
      00034E F8               [12]  678 	mov	r0,a
      00034F E6               [12]  679 	mov	a,@r0
      000350 C0 E0            [24]  680 	push	acc
      000352 08               [12]  681 	inc	r0
      000353 E6               [12]  682 	mov	a,@r0
      000354 C0 E0            [24]  683 	push	acc
      000356 08               [12]  684 	inc	r0
      000357 E6               [12]  685 	mov	a,@r0
      000358 C0 E0            [24]  686 	push	acc
      00035A 08               [12]  687 	inc	r0
      00035B E6               [12]  688 	mov	a,@r0
      00035C C0 E0            [24]  689 	push	acc
      00035E 90 CC CD         [24]  690 	mov	dptr,#0xcccd
      000361 75 F0 CC         [24]  691 	mov	b,#0xcc
      000364 74 3D            [12]  692 	mov	a,#0x3d
      000366 12r00r00         [24]  693 	lcall	___fsmul
      000369 AC 82            [24]  694 	mov	r4,dpl
      00036B AD 83            [24]  695 	mov	r5,dph
      00036D AB F0            [24]  696 	mov	r3,b
      00036F FF               [12]  697 	mov	r7,a
      000370 E5 81            [12]  698 	mov	a,sp
      000372 24 FC            [12]  699 	add	a,#0xfc
      000374 F5 81            [12]  700 	mov	sp,a
      000376 D0*00            [24]  701 	pop	bits
      000378 D0 06            [24]  702 	pop	ar6
      00037A E5*00            [12]  703 	mov	a,_bp
      00037C 24 0C            [12]  704 	add	a,#0x0c
      00037E F8               [12]  705 	mov	r0,a
      00037F A6 04            [24]  706 	mov	@r0,ar4
      000381 08               [12]  707 	inc	r0
      000382 A6 05            [24]  708 	mov	@r0,ar5
      000384 08               [12]  709 	inc	r0
      000385 A6 03            [24]  710 	mov	@r0,ar3
      000387 08               [12]  711 	inc	r0
      000388 A6 07            [24]  712 	mov	@r0,ar7
                                    713 ;	_atof.c:82: iexp++;
      00038A 0E               [12]  714 	inc	r6
      00038B 80 AF            [24]  715 	sjmp	00116$
      00038D                        716 00114$:
                                    717 ;	_atof.c:86: value*=10.0;
      00038D C0 06            [24]  718 	push	ar6
      00038F C0*00            [24]  719 	push	bits
      000391 E5*00            [12]  720 	mov	a,_bp
      000393 24 0C            [12]  721 	add	a,#0x0c
      000395 F8               [12]  722 	mov	r0,a
      000396 E6               [12]  723 	mov	a,@r0
      000397 C0 E0            [24]  724 	push	acc
      000399 08               [12]  725 	inc	r0
      00039A E6               [12]  726 	mov	a,@r0
      00039B C0 E0            [24]  727 	push	acc
      00039D 08               [12]  728 	inc	r0
      00039E E6               [12]  729 	mov	a,@r0
      00039F C0 E0            [24]  730 	push	acc
      0003A1 08               [12]  731 	inc	r0
      0003A2 E6               [12]  732 	mov	a,@r0
      0003A3 C0 E0            [24]  733 	push	acc
      0003A5 90 00 00         [24]  734 	mov	dptr,#0x0000
      0003A8 75 F0 20         [24]  735 	mov	b,#0x20
      0003AB 74 41            [12]  736 	mov	a,#0x41
      0003AD 12r00r00         [24]  737 	lcall	___fsmul
      0003B0 AC 82            [24]  738 	mov	r4,dpl
      0003B2 AD 83            [24]  739 	mov	r5,dph
      0003B4 AB F0            [24]  740 	mov	r3,b
      0003B6 FF               [12]  741 	mov	r7,a
      0003B7 E5 81            [12]  742 	mov	a,sp
      0003B9 24 FC            [12]  743 	add	a,#0xfc
      0003BB F5 81            [12]  744 	mov	sp,a
      0003BD D0*00            [24]  745 	pop	bits
      0003BF D0 06            [24]  746 	pop	ar6
      0003C1 E5*00            [12]  747 	mov	a,_bp
      0003C3 24 0C            [12]  748 	add	a,#0x0c
      0003C5 F8               [12]  749 	mov	r0,a
      0003C6 A6 04            [24]  750 	mov	@r0,ar4
      0003C8 08               [12]  751 	inc	r0
      0003C9 A6 05            [24]  752 	mov	@r0,ar5
      0003CB 08               [12]  753 	inc	r0
      0003CC A6 03            [24]  754 	mov	@r0,ar3
      0003CE 08               [12]  755 	inc	r0
      0003CF A6 07            [24]  756 	mov	@r0,ar7
                                    757 ;	_atof.c:87: iexp--;
      0003D1 1E               [12]  758 	dec	r6
      0003D2 02r03r3C         [24]  759 	ljmp	00116$
      0003D5                        760 00120$:
                                    761 ;	_atof.c:93: if(sign) value*=-1.0;
      0003D5 30*00 0F         [24]  762 	jnb	b0,00122$
      0003D8 E5*00            [12]  763 	mov	a,_bp
      0003DA 24 0C            [12]  764 	add	a,#0x0c
      0003DC F8               [12]  765 	mov	r0,a
      0003DD E6               [12]  766 	mov  a,@r0
      0003DE 08               [12]  767 	inc	r0
      0003DF E6               [12]  768 	mov  a,@r0
      0003E0 08               [12]  769 	inc	r0
      0003E1 E6               [12]  770 	mov  a,@r0
      0003E2 08               [12]  771 	inc	r0
      0003E3 E6               [12]  772 	mov	a,@r0
      0003E4 B2 E7            [12]  773 	cpl	acc.7
      0003E6 F6               [12]  774 	mov	@r0,a
      0003E7                        775 00122$:
                                    776 ;	_atof.c:94: return (value);
      0003E7 E5*00            [12]  777 	mov	a,_bp
      0003E9 24 0C            [12]  778 	add	a,#0x0c
      0003EB F8               [12]  779 	mov	r0,a
      0003EC 86 82            [24]  780 	mov	dpl,@r0
      0003EE 08               [12]  781 	inc	r0
      0003EF 86 83            [24]  782 	mov	dph,@r0
      0003F1 08               [12]  783 	inc	r0
      0003F2 86 F0            [24]  784 	mov	b,@r0
      0003F4 08               [12]  785 	inc	r0
      0003F5 E6               [12]  786 	mov	a,@r0
                                    787 ;	_atof.c:95: }
      0003F6 85*00 81         [24]  788 	mov	sp,_bp
      0003F9 D0*00            [24]  789 	pop	_bp
      0003FB 22               [24]  790 	ret
                                    791 	.area CSEG    (CODE)
                                    792 	.area CONST   (CODE)
                                    793 	.area XINIT   (CODE)
                                    794 	.area CABS    (ABS,CODE)
