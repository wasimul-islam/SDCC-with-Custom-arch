                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module cotf
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _tancotf
                                     12 	.globl _fabsf
                                     13 	.globl _cotf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'cotf'
                                     93 ;------------------------------------------------------------
                                     94 ;x                         Allocated to registers r4 r5 r6 r7 
                                     95 ;y                         Allocated to stack - _bp +1
                                     96 ;------------------------------------------------------------
                                     97 ;	cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                                     98 ;	-----------------------------------------
                                     99 ;	 function cotf
                                    100 ;	-----------------------------------------
      000000                        101 _cotf:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 AC 82            [24]  112 	mov	r4,dpl
      000007 AD 83            [24]  113 	mov	r5,dph
      000009 AE F0            [24]  114 	mov	r6,b
      00000B FF               [12]  115 	mov	r7,a
      00000C E5 81            [12]  116 	mov	a,sp
      00000E 24 04            [12]  117 	add	a,#0x04
      000010 F5 81            [12]  118 	mov	sp,a
                                    119 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  120 	mov	dpl,r4
      000014 8D 83            [24]  121 	mov	dph,r5
      000016 8E F0            [24]  122 	mov	b,r6
      000018 EF               [12]  123 	mov	a,r7
      000019 C0 07            [24]  124 	push	ar7
      00001B C0 06            [24]  125 	push	ar6
      00001D C0 05            [24]  126 	push	ar5
      00001F C0 04            [24]  127 	push	ar4
      000021 12r00r00         [24]  128 	lcall	_fabsf
      000024 A8*00            [24]  129 	mov	r0,_bp
      000026 08               [12]  130 	inc	r0
      000027 A6 82            [24]  131 	mov	@r0,dpl
      000029 08               [12]  132 	inc	r0
      00002A A6 83            [24]  133 	mov	@r0,dph
      00002C 08               [12]  134 	inc	r0
      00002D A6 F0            [24]  135 	mov	@r0,b
      00002F 08               [12]  136 	inc	r0
      000030 F6               [12]  137 	mov	@r0,a
      000031 A8*00            [24]  138 	mov	r0,_bp
      000033 08               [12]  139 	inc	r0
                                    140 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      000034 74 60            [12]  141 	mov	a,#0x60
      000036 C0 E0            [24]  142 	push	acc
      000038 74 42            [12]  143 	mov	a,#0x42
      00003A C0 E0            [24]  144 	push	acc
      00003C 74 A2            [12]  145 	mov	a,#0xa2
      00003E C0 E0            [24]  146 	push	acc
      000040 74 0D            [12]  147 	mov	a,#0x0d
      000042 C0 E0            [24]  148 	push	acc
      000044 A8*00            [24]  149 	mov	r0,_bp
      000046 08               [12]  150 	inc	r0
      000047 86 82            [24]  151 	mov	dpl,@r0
      000049 08               [12]  152 	inc	r0
      00004A 86 83            [24]  153 	mov	dph,@r0
      00004C 08               [12]  154 	inc	r0
      00004D 86 F0            [24]  155 	mov	b,@r0
      00004F 08               [12]  156 	inc	r0
      000050 E6               [12]  157 	mov	a,@r0
      000051 12r00r00         [24]  158 	lcall	___fslt
      000054 AB 82            [24]  159 	mov	r3,dpl
      000056 E5 81            [12]  160 	mov	a,sp
      000058 24 FC            [12]  161 	add	a,#0xfc
      00005A F5 81            [12]  162 	mov	sp,a
      00005C D0 04            [24]  163 	pop	ar4
      00005E D0 05            [24]  164 	pop	ar5
      000060 D0 06            [24]  165 	pop	ar6
      000062 D0 07            [24]  166 	pop	ar7
      000064 EB               [12]  167 	mov	a,r3
      000065 60 39            [24]  168 	jz	00105$
                                    169 ;	cotf.c:44: errno = ERANGE;
      000067 90r00r00         [24]  170 	mov	dptr,#_errno
      00006A 74 22            [12]  171 	mov	a,#0x22
      00006C F0               [24]  172 	movx	@dptr,a
      00006D E4               [12]  173 	clr	a
      00006E A3               [24]  174 	inc	dptr
      00006F F0               [24]  175 	movx	@dptr,a
                                    176 ;	cotf.c:45: if (x<0.0)
      000070 C0 E0            [24]  177 	push	acc
      000072 C0 E0            [24]  178 	push	acc
      000074 C0 E0            [24]  179 	push	acc
      000076 C0 E0            [24]  180 	push	acc
      000078 8C 82            [24]  181 	mov	dpl,r4
      00007A 8D 83            [24]  182 	mov	dph,r5
      00007C 8E F0            [24]  183 	mov	b,r6
      00007E EF               [12]  184 	mov	a,r7
      00007F 12r00r00         [24]  185 	lcall	___fslt
      000082 AB 82            [24]  186 	mov	r3,dpl
      000084 E5 81            [12]  187 	mov	a,sp
      000086 24 FC            [12]  188 	add	a,#0xfc
      000088 F5 81            [12]  189 	mov	sp,a
      00008A EB               [12]  190 	mov	a,r3
      00008B 60 0A            [24]  191 	jz	00102$
                                    192 ;	cotf.c:46: return -HUGE_VALF;
      00008D 90 FF FF         [24]  193 	mov	dptr,#0xffff
      000090 75 F0 7F         [24]  194 	mov	b,#0x7f
      000093 74 FF            [12]  195 	mov	a,#0xff
      000095 80 27            [24]  196 	sjmp	00106$
      000097                        197 00102$:
                                    198 ;	cotf.c:48: return +HUGE_VALF;
      000097 90 FF FF         [24]  199 	mov	dptr,#0xffff
      00009A 74 7F            [12]  200 	mov	a,#0x7f
      00009C F5 F0            [12]  201 	mov	b,a
      00009E 80 1E            [24]  202 	sjmp	00106$
      0000A0                        203 00105$:
                                    204 ;	cotf.c:50: return tancotf(x, 1);
      0000A0 74 01            [12]  205 	mov	a,#0x01
      0000A2 C0 E0            [24]  206 	push	acc
      0000A4 8C 82            [24]  207 	mov	dpl,r4
      0000A6 8D 83            [24]  208 	mov	dph,r5
      0000A8 8E F0            [24]  209 	mov	b,r6
      0000AA EF               [12]  210 	mov	a,r7
      0000AB 12r00r00         [24]  211 	lcall	_tancotf
      0000AE AC 82            [24]  212 	mov	r4,dpl
      0000B0 AD 83            [24]  213 	mov	r5,dph
      0000B2 AE F0            [24]  214 	mov	r6,b
      0000B4 FF               [12]  215 	mov	r7,a
      0000B5 15 81            [12]  216 	dec	sp
      0000B7 8C 82            [24]  217 	mov	dpl,r4
      0000B9 8D 83            [24]  218 	mov	dph,r5
      0000BB 8E F0            [24]  219 	mov	b,r6
      0000BD EF               [12]  220 	mov	a,r7
      0000BE                        221 00106$:
                                    222 ;	cotf.c:51: }
      0000BE 85*00 81         [24]  223 	mov	sp,_bp
      0000C1 D0*00            [24]  224 	pop	_bp
      0000C3 22               [24]  225 	ret
                                    226 	.area CSEG    (CODE)
                                    227 	.area CONST   (CODE)
                                    228 	.area XINIT   (CODE)
                                    229 	.area CABS    (ABS,CODE)
