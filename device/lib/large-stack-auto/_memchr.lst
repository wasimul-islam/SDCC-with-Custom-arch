                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _memchr
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memchr
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'memchr'
                                     91 ;------------------------------------------------------------
                                     92 ;c                         Allocated to stack - _bp -4
                                     93 ;n                         Allocated to stack - _bp -6
                                     94 ;s                         Allocated to registers r5 r6 r7 
                                     95 ;p                         Allocated to stack - _bp +1
                                     96 ;end                       Allocated to stack - _bp +4
                                     97 ;------------------------------------------------------------
                                     98 ;	_memchr.c:31: void *memchr(const void *s, int c, size_t n)
                                     99 ;	-----------------------------------------
                                    100 ;	 function memchr
                                    101 ;	-----------------------------------------
      000000                        102 _memchr:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 E5 81            [12]  112 	mov	a,sp
      000004 F5*00            [12]  113 	mov	_bp,a
      000006 24 06            [12]  114 	add	a,#0x06
      000008 F5 81            [12]  115 	mov	sp,a
      00000A AD 82            [24]  116 	mov	r5,dpl
      00000C AE 83            [24]  117 	mov	r6,dph
      00000E AF F0            [24]  118 	mov	r7,b
                                    119 ;	_memchr.c:33: unsigned char *p = (unsigned char *)s;
      000010 A8*00            [24]  120 	mov	r0,_bp
      000012 08               [12]  121 	inc	r0
      000013 A6 05            [24]  122 	mov	@r0,ar5
      000015 08               [12]  123 	inc	r0
      000016 A6 06            [24]  124 	mov	@r0,ar6
      000018 08               [12]  125 	inc	r0
      000019 A6 07            [24]  126 	mov	@r0,ar7
                                    127 ;	_memchr.c:34: unsigned char *end = p + n;
      00001B A8*00            [24]  128 	mov	r0,_bp
      00001D 08               [12]  129 	inc	r0
      00001E E5*00            [12]  130 	mov	a,_bp
      000020 24 FA            [12]  131 	add	a,#0xfa
      000022 F9               [12]  132 	mov	r1,a
      000023 E7               [12]  133 	mov	a,@r1
      000024 26               [12]  134 	add	a,@r0
      000025 FA               [12]  135 	mov	r2,a
      000026 09               [12]  136 	inc	r1
      000027 E7               [12]  137 	mov	a,@r1
      000028 08               [12]  138 	inc	r0
      000029 36               [12]  139 	addc	a,@r0
      00002A FB               [12]  140 	mov	r3,a
      00002B 08               [12]  141 	inc	r0
      00002C 86 04            [24]  142 	mov	ar4,@r0
      00002E E5*00            [12]  143 	mov	a,_bp
      000030 24 04            [12]  144 	add	a,#0x04
      000032 F8               [12]  145 	mov	r0,a
      000033 A6 02            [24]  146 	mov	@r0,ar2
      000035 08               [12]  147 	inc	r0
      000036 A6 03            [24]  148 	mov	@r0,ar3
      000038 08               [12]  149 	inc	r0
      000039 A6 04            [24]  150 	mov	@r0,ar4
                                    151 ;	_memchr.c:38: return(0);
      00003B A8*00            [24]  152 	mov	r0,_bp
      00003D 08               [12]  153 	inc	r0
      00003E 86 02            [24]  154 	mov	ar2,@r0
      000040 08               [12]  155 	inc	r0
      000041 86 03            [24]  156 	mov	ar3,@r0
      000043 08               [12]  157 	inc	r0
      000044 86 04            [24]  158 	mov	ar4,@r0
      000046                        159 00105$:
                                    160 ;	_memchr.c:35: for(; p != end; p++)
      000046 E5*00            [12]  161 	mov	a,_bp
      000048 24 04            [12]  162 	add	a,#0x04
      00004A F8               [12]  163 	mov	r0,a
      00004B C0 02            [24]  164 	push	ar2
      00004D C0 03            [24]  165 	push	ar3
      00004F C0 04            [24]  166 	push	ar4
      000051 86 82            [24]  167 	mov	dpl,@r0
      000053 08               [12]  168 	inc	r0
      000054 86 83            [24]  169 	mov	dph,@r0
      000056 08               [12]  170 	inc	r0
      000057 86 F0            [24]  171 	mov	b,@r0
      000059 12r00r00         [24]  172 	lcall	___gptr_cmp
      00005C 15 81            [12]  173 	dec	sp
      00005E 15 81            [12]  174 	dec	sp
      000060 15 81            [12]  175 	dec	sp
      000062 60 3A            [24]  176 	jz	00103$
                                    177 ;	_memchr.c:36: if(*p == (unsigned char)c)
      000064 8A 82            [24]  178 	mov	dpl,r2
      000066 8B 83            [24]  179 	mov	dph,r3
      000068 8C F0            [24]  180 	mov	b,r4
      00006A 12r00r00         [24]  181 	lcall	__gptrget
      00006D FF               [12]  182 	mov	r7,a
      00006E E5*00            [12]  183 	mov	a,_bp
      000070 24 FC            [12]  184 	add	a,#0xfc
      000072 F8               [12]  185 	mov	r0,a
      000073 86 06            [24]  186 	mov	ar6,@r0
      000075 EF               [12]  187 	mov	a,r7
      000076 B5 06 13         [24]  188 	cjne	a,ar6,00106$
                                    189 ;	_memchr.c:37: return((void *)p);
      000079 A8*00            [24]  190 	mov	r0,_bp
      00007B 08               [12]  191 	inc	r0
      00007C 86 05            [24]  192 	mov	ar5,@r0
      00007E 08               [12]  193 	inc	r0
      00007F 86 06            [24]  194 	mov	ar6,@r0
      000081 08               [12]  195 	inc	r0
      000082 86 07            [24]  196 	mov	ar7,@r0
      000084 8D 82            [24]  197 	mov	dpl,r5
      000086 8E 83            [24]  198 	mov	dph,r6
      000088 8F F0            [24]  199 	mov	b,r7
      00008A 80 18            [24]  200 	sjmp	00107$
      00008C                        201 00106$:
                                    202 ;	_memchr.c:35: for(; p != end; p++)
      00008C 0A               [12]  203 	inc	r2
      00008D BA 00 01         [24]  204 	cjne	r2,#0x00,00124$
      000090 0B               [12]  205 	inc	r3
      000091                        206 00124$:
      000091 A8*00            [24]  207 	mov	r0,_bp
      000093 08               [12]  208 	inc	r0
      000094 A6 02            [24]  209 	mov	@r0,ar2
      000096 08               [12]  210 	inc	r0
      000097 A6 03            [24]  211 	mov	@r0,ar3
      000099 08               [12]  212 	inc	r0
      00009A A6 04            [24]  213 	mov	@r0,ar4
      00009C 80 A8            [24]  214 	sjmp	00105$
      00009E                        215 00103$:
                                    216 ;	_memchr.c:38: return(0);
      00009E 90 00 00         [24]  217 	mov	dptr,#0x0000
      0000A1 75 F0 00         [24]  218 	mov	b,#0x00
      0000A4                        219 00107$:
                                    220 ;	_memchr.c:39: }
      0000A4 85*00 81         [24]  221 	mov	sp,_bp
      0000A7 D0*00            [24]  222 	pop	_bp
      0000A9 22               [24]  223 	ret
                                    224 	.area CSEG    (CODE)
                                    225 	.area CONST   (CODE)
                                    226 	.area XINIT   (CODE)
                                    227 	.area CABS    (ABS,CODE)
