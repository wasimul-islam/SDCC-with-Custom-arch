                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _memmove
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memmove
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'memmove'
                                     91 ;------------------------------------------------------------
                                     92 ;src                       Allocated to stack - _bp -5
                                     93 ;size                      Allocated to stack - _bp -7
                                     94 ;dst                       Allocated to stack - _bp +1
                                     95 ;c                         Allocated to stack - _bp +10
                                     96 ;d                         Allocated to registers 
                                     97 ;s                         Allocated to registers 
                                     98 ;sloc0                     Allocated to stack - _bp +12
                                     99 ;sloc1                     Allocated to stack - _bp +4
                                    100 ;sloc2                     Allocated to stack - _bp +7
                                    101 ;------------------------------------------------------------
                                    102 ;	_memmove.c:35: void *memmove (void *dst, const void *src, size_t size)
                                    103 ;	-----------------------------------------
                                    104 ;	 function memmove
                                    105 ;	-----------------------------------------
      000000                        106 _memmove:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
      000005 C0 82            [24]  117 	push	dpl
      000007 C0 83            [24]  118 	push	dph
      000009 C0 F0            [24]  119 	push	b
      00000B E5 81            [12]  120 	mov	a,sp
      00000D 24 08            [12]  121 	add	a,#0x08
      00000F F5 81            [12]  122 	mov	sp,a
                                    123 ;	_memmove.c:37: size_t c = size;
      000011 E5*00            [12]  124 	mov	a,_bp
      000013 24 F9            [12]  125 	add	a,#0xf9
      000015 F8               [12]  126 	mov	r0,a
      000016 E5*00            [12]  127 	mov	a,_bp
      000018 24 0A            [12]  128 	add	a,#0x0a
      00001A F9               [12]  129 	mov	r1,a
      00001B E6               [12]  130 	mov	a,@r0
      00001C F7               [12]  131 	mov	@r1,a
      00001D 08               [12]  132 	inc	r0
      00001E E6               [12]  133 	mov	a,@r0
      00001F 09               [12]  134 	inc	r1
      000020 F7               [12]  135 	mov	@r1,a
                                    136 ;	_memmove.c:38: if (c == 0 || dst == src)
      000021 E5*00            [12]  137 	mov	a,_bp
      000023 24 0A            [12]  138 	add	a,#0x0a
      000025 F8               [12]  139 	mov	r0,a
      000026 E6               [12]  140 	mov	a,@r0
      000027 08               [12]  141 	inc	r0
      000028 46               [12]  142 	orl	a,@r0
      000029 60 28            [24]  143 	jz	00101$
      00002B A8*00            [24]  144 	mov	r0,_bp
      00002D 08               [12]  145 	inc	r0
      00002E E5*00            [12]  146 	mov	a,_bp
      000030 24 FB            [12]  147 	add	a,#0xfb
      000032 F9               [12]  148 	mov	r1,a
      000033 E7               [12]  149 	mov	a,@r1
      000034 C0 E0            [24]  150 	push	acc
      000036 09               [12]  151 	inc	r1
      000037 E7               [12]  152 	mov	a,@r1
      000038 C0 E0            [24]  153 	push	acc
      00003A 09               [12]  154 	inc	r1
      00003B E7               [12]  155 	mov	a,@r1
      00003C C0 E0            [24]  156 	push	acc
      00003E 86 82            [24]  157 	mov	dpl,@r0
      000040 08               [12]  158 	inc	r0
      000041 86 83            [24]  159 	mov	dph,@r0
      000043 08               [12]  160 	inc	r0
      000044 86 F0            [24]  161 	mov	b,@r0
      000046 12r00r00         [24]  162 	lcall	___gptr_cmp
      000049 15 81            [12]  163 	dec	sp
      00004B 15 81            [12]  164 	dec	sp
      00004D 15 81            [12]  165 	dec	sp
      00004F 60 02            [24]  166 	jz	00144$
      000051 80 0E            [24]  167 	sjmp	00102$
      000053                        168 00144$:
      000053                        169 00101$:
                                    170 ;	_memmove.c:39: return dst;
      000053 A8*00            [24]  171 	mov	r0,_bp
      000055 08               [12]  172 	inc	r0
      000056 86 82            [24]  173 	mov	dpl,@r0
      000058 08               [12]  174 	inc	r0
      000059 86 83            [24]  175 	mov	dph,@r0
      00005B 08               [12]  176 	inc	r0
      00005C 86 F0            [24]  177 	mov	b,@r0
      00005E 02r01r5A         [24]  178 	ljmp	00113$
      000061                        179 00102$:
                                    180 ;	_memmove.c:41: char *d = dst;
      000061 A8*00            [24]  181 	mov	r0,_bp
      000063 08               [12]  182 	inc	r0
      000064 86 02            [24]  183 	mov	ar2,@r0
      000066 08               [12]  184 	inc	r0
      000067 86 06            [24]  185 	mov	ar6,@r0
      000069 08               [12]  186 	inc	r0
      00006A 86 07            [24]  187 	mov	ar7,@r0
                                    188 ;	_memmove.c:42: const char *s = src;
      00006C E5*00            [12]  189 	mov	a,_bp
      00006E 24 FB            [12]  190 	add	a,#0xfb
      000070 F8               [12]  191 	mov	r0,a
      000071 86 03            [24]  192 	mov	ar3,@r0
      000073 08               [12]  193 	inc	r0
      000074 86 04            [24]  194 	mov	ar4,@r0
      000076 08               [12]  195 	inc	r0
      000077 86 05            [24]  196 	mov	ar5,@r0
                                    197 ;	_memmove.c:43: if (s < d) {
      000079 C0 02            [24]  198 	push	ar2
      00007B C0 06            [24]  199 	push	ar6
      00007D C0 07            [24]  200 	push	ar7
      00007F 8B 82            [24]  201 	mov	dpl,r3
      000081 8C 83            [24]  202 	mov	dph,r4
      000083 8D F0            [24]  203 	mov	b,r5
      000085 12r00r00         [24]  204 	lcall	___gptr_cmp
      000088 15 81            [12]  205 	dec	sp
      00008A 15 81            [12]  206 	dec	sp
      00008C 15 81            [12]  207 	dec	sp
      00008E 50 77            [24]  208 	jnc	00119$
                                    209 ;	_memmove.c:50: s += c;
      000090 E5*00            [12]  210 	mov	a,_bp
      000092 24 0A            [12]  211 	add	a,#0x0a
      000094 F8               [12]  212 	mov	r0,a
      000095 E5*00            [12]  213 	mov	a,_bp
      000097 24 04            [12]  214 	add	a,#0x04
      000099 F9               [12]  215 	mov	r1,a
      00009A E6               [12]  216 	mov	a,@r0
      00009B 2B               [12]  217 	add	a,r3
      00009C F7               [12]  218 	mov	@r1,a
      00009D 08               [12]  219 	inc	r0
      00009E E6               [12]  220 	mov	a,@r0
      00009F 3C               [12]  221 	addc	a,r4
      0000A0 09               [12]  222 	inc	r1
      0000A1 F7               [12]  223 	mov	@r1,a
      0000A2 09               [12]  224 	inc	r1
      0000A3 A7 05            [24]  225 	mov	@r1,ar5
                                    226 ;	_memmove.c:51: d += c;
      0000A5 E5*00            [12]  227 	mov	a,_bp
      0000A7 24 0A            [12]  228 	add	a,#0x0a
      0000A9 F8               [12]  229 	mov	r0,a
      0000AA E5*00            [12]  230 	mov	a,_bp
      0000AC 24 07            [12]  231 	add	a,#0x07
      0000AE F9               [12]  232 	mov	r1,a
      0000AF E6               [12]  233 	mov	a,@r0
      0000B0 2A               [12]  234 	add	a,r2
      0000B1 F7               [12]  235 	mov	@r1,a
      0000B2 08               [12]  236 	inc	r0
      0000B3 E6               [12]  237 	mov	a,@r0
      0000B4 3E               [12]  238 	addc	a,r6
      0000B5 09               [12]  239 	inc	r1
      0000B6 F7               [12]  240 	mov	@r1,a
      0000B7 09               [12]  241 	inc	r1
      0000B8 A7 07            [24]  242 	mov	@r1,ar7
                                    243 ;	_memmove.c:52: do {
      0000BA E5*00            [12]  244 	mov	a,_bp
      0000BC 24 0A            [12]  245 	add	a,#0x0a
      0000BE F8               [12]  246 	mov	r0,a
      0000BF 86 04            [24]  247 	mov	ar4,@r0
      0000C1 08               [12]  248 	inc	r0
      0000C2 86 05            [24]  249 	mov	ar5,@r0
      0000C4                        250 00104$:
                                    251 ;	_memmove.c:53: *--d = *--s;
      0000C4 E5*00            [12]  252 	mov	a,_bp
      0000C6 24 07            [12]  253 	add	a,#0x07
      0000C8 F8               [12]  254 	mov	r0,a
      0000C9 16               [12]  255 	dec	@r0
      0000CA B6 FF 02         [24]  256 	cjne	@r0,#0xff,00146$
      0000CD 08               [12]  257 	inc	r0
      0000CE 16               [12]  258 	dec	@r0
      0000CF                        259 00146$:
      0000CF E5*00            [12]  260 	mov	a,_bp
      0000D1 24 04            [12]  261 	add	a,#0x04
      0000D3 F8               [12]  262 	mov	r0,a
      0000D4 16               [12]  263 	dec	@r0
      0000D5 B6 FF 02         [24]  264 	cjne	@r0,#0xff,00147$
      0000D8 08               [12]  265 	inc	r0
      0000D9 16               [12]  266 	dec	@r0
      0000DA                        267 00147$:
      0000DA E5*00            [12]  268 	mov	a,_bp
      0000DC 24 04            [12]  269 	add	a,#0x04
      0000DE F8               [12]  270 	mov	r0,a
      0000DF 86 82            [24]  271 	mov	dpl,@r0
      0000E1 08               [12]  272 	inc	r0
      0000E2 86 83            [24]  273 	mov	dph,@r0
      0000E4 08               [12]  274 	inc	r0
      0000E5 86 F0            [24]  275 	mov	b,@r0
      0000E7 12r00r00         [24]  276 	lcall	__gptrget
      0000EA FB               [12]  277 	mov	r3,a
      0000EB E5*00            [12]  278 	mov	a,_bp
      0000ED 24 07            [12]  279 	add	a,#0x07
      0000EF F8               [12]  280 	mov	r0,a
      0000F0 86 82            [24]  281 	mov	dpl,@r0
      0000F2 08               [12]  282 	inc	r0
      0000F3 86 83            [24]  283 	mov	dph,@r0
      0000F5 08               [12]  284 	inc	r0
      0000F6 86 F0            [24]  285 	mov	b,@r0
      0000F8 EB               [12]  286 	mov	a,r3
      0000F9 12r00r00         [24]  287 	lcall	__gptrput
                                    288 ;	_memmove.c:54: } while (--c);
      0000FC 1C               [12]  289 	dec	r4
      0000FD BC FF 01         [24]  290 	cjne	r4,#0xff,00148$
      000100 1D               [12]  291 	dec	r5
      000101                        292 00148$:
      000101 EC               [12]  293 	mov	a,r4
      000102 4D               [12]  294 	orl	a,r5
      000103 70 BF            [24]  295 	jnz	00104$
                                    296 ;	_memmove.c:59: do {
      000105 80 48            [24]  297 	sjmp	00112$
      000107                        298 00119$:
      000107 E5*00            [12]  299 	mov	a,_bp
      000109 24 04            [12]  300 	add	a,#0x04
      00010B F8               [12]  301 	mov	r0,a
      00010C A6 03            [24]  302 	mov	@r0,ar3
      00010E 08               [12]  303 	inc	r0
      00010F A6 04            [24]  304 	mov	@r0,ar4
      000111 08               [12]  305 	inc	r0
      000112 A6 05            [24]  306 	mov	@r0,ar5
      000114 E5*00            [12]  307 	mov	a,_bp
      000116 24 0A            [12]  308 	add	a,#0x0a
      000118 F8               [12]  309 	mov	r0,a
      000119 86 04            [24]  310 	mov	ar4,@r0
      00011B 08               [12]  311 	inc	r0
      00011C 86 03            [24]  312 	mov	ar3,@r0
      00011E                        313 00107$:
                                    314 ;	_memmove.c:60: *d++ = *s++;
      00011E E5*00            [12]  315 	mov	a,_bp
      000120 24 04            [12]  316 	add	a,#0x04
      000122 F8               [12]  317 	mov	r0,a
      000123 86 82            [24]  318 	mov	dpl,@r0
      000125 08               [12]  319 	inc	r0
      000126 86 83            [24]  320 	mov	dph,@r0
      000128 08               [12]  321 	inc	r0
      000129 86 F0            [24]  322 	mov	b,@r0
      00012B 12r00r00         [24]  323 	lcall	__gptrget
      00012E FD               [12]  324 	mov	r5,a
      00012F A3               [24]  325 	inc	dptr
      000130 18               [12]  326 	dec	r0
      000131 18               [12]  327 	dec	r0
      000132 A6 82            [24]  328 	mov	@r0,dpl
      000134 08               [12]  329 	inc	r0
      000135 A6 83            [24]  330 	mov	@r0,dph
      000137 8A 82            [24]  331 	mov	dpl,r2
      000139 8E 83            [24]  332 	mov	dph,r6
      00013B 8F F0            [24]  333 	mov	b,r7
      00013D ED               [12]  334 	mov	a,r5
      00013E 12r00r00         [24]  335 	lcall	__gptrput
      000141 A3               [24]  336 	inc	dptr
      000142 AA 82            [24]  337 	mov	r2,dpl
      000144 AE 83            [24]  338 	mov	r6,dph
                                    339 ;	_memmove.c:61: } while (--c);
      000146 1C               [12]  340 	dec	r4
      000147 BC FF 01         [24]  341 	cjne	r4,#0xff,00150$
      00014A 1B               [12]  342 	dec	r3
      00014B                        343 00150$:
      00014B EC               [12]  344 	mov	a,r4
      00014C 4B               [12]  345 	orl	a,r3
      00014D 70 CF            [24]  346 	jnz	00107$
      00014F                        347 00112$:
                                    348 ;	_memmove.c:65: return dst;
      00014F A8*00            [24]  349 	mov	r0,_bp
      000151 08               [12]  350 	inc	r0
      000152 86 82            [24]  351 	mov	dpl,@r0
      000154 08               [12]  352 	inc	r0
      000155 86 83            [24]  353 	mov	dph,@r0
      000157 08               [12]  354 	inc	r0
      000158 86 F0            [24]  355 	mov	b,@r0
      00015A                        356 00113$:
                                    357 ;	_memmove.c:66: }
      00015A 85*00 81         [24]  358 	mov	sp,_bp
      00015D D0*00            [24]  359 	pop	_bp
      00015F 22               [24]  360 	ret
                                    361 	.area CSEG    (CODE)
                                    362 	.area CONST   (CODE)
                                    363 	.area XINIT   (CODE)
                                    364 	.area CABS    (ABS,CODE)
