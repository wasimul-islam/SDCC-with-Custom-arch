                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module atoi
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable bit register bank
                                     29 ;--------------------------------------------------------
                                     30 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         31 bits:
      000000                         32 	.ds 1
                           008000    33 	b0 = bits[0]
                           008100    34 	b1 = bits[1]
                           008200    35 	b2 = bits[2]
                           008300    36 	b3 = bits[3]
                           008400    37 	b4 = bits[4]
                           008500    38 	b5 = bits[5]
                           008600    39 	b6 = bits[6]
                           008700    40 	b7 = bits[7]
                                     41 ;--------------------------------------------------------
                                     42 ; internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DSEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
                                     61 ;--------------------------------------------------------
                                     62 ; paged external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area PSEG    (PAG,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; uninitialized external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XSEG    (XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; initialized external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'atoi'
                                    105 ;------------------------------------------------------------
                                    106 ;nptr                      Allocated to stack - _bp +1
                                    107 ;__1310720007              Allocated to registers 
                                    108 ;__1310720004              Allocated to registers 
                                    109 ;ret                       Allocated to registers r3 r4 
                                    110 ;neg                       Allocated to registers b0 
                                    111 ;__1310720005              Allocated to registers 
                                    112 ;c                         Allocated to registers 
                                    113 ;__1310720008              Allocated to registers 
                                    114 ;c                         Allocated to registers 
                                    115 ;sloc0                     Allocated to stack - _bp +4
                                    116 ;------------------------------------------------------------
                                    117 ;	atoi.c:34: int atoi(const char *nptr)
                                    118 ;	-----------------------------------------
                                    119 ;	 function atoi
                                    120 ;	-----------------------------------------
      000000                        121 _atoi:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 C0*00            [24]  130 	push	_bp
      000002 E5 81            [12]  131 	mov	a,sp
      000004 F5*00            [12]  132 	mov	_bp,a
      000006 24 06            [12]  133 	add	a,#0x06
      000008 F5 81            [12]  134 	mov	sp,a
      00000A AD 82            [24]  135 	mov	r5,dpl
      00000C AE 83            [24]  136 	mov	r6,dph
      00000E AF F0            [24]  137 	mov	r7,b
                                    138 ;	atoi.c:36: int ret = 0;
      000010 7B 00            [12]  139 	mov	r3,#0x00
      000012 7C 00            [12]  140 	mov	r4,#0x00
                                    141 ;	atoi.c:39: while (isblank (*nptr))
      000014                        142 00101$:
      000014 8D 82            [24]  143 	mov	dpl,r5
      000016 8E 83            [24]  144 	mov	dph,r6
      000018 8F F0            [24]  145 	mov	b,r7
      00001A 12r00r00         [24]  146 	lcall	__gptrget
      00001D FA               [12]  147 	mov	r2,a
                                    148 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      00001E BA 20 02         [24]  149 	cjne	r2,#0x20,00161$
      000021 80 03            [24]  150 	sjmp	00115$
      000023                        151 00161$:
      000023 BA 09 07         [24]  152 	cjne	r2,#0x09,00131$
      000026                        153 00115$:
                                    154 ;	atoi.c:40: nptr++;
      000026 0D               [12]  155 	inc	r5
      000027 BD 00 EA         [24]  156 	cjne	r5,#0x00,00101$
      00002A 0E               [12]  157 	inc	r6
      00002B 80 E7            [24]  158 	sjmp	00101$
      00002D                        159 00131$:
      00002D A8*00            [24]  160 	mov	r0,_bp
      00002F 08               [12]  161 	inc	r0
      000030 A6 05            [24]  162 	mov	@r0,ar5
      000032 08               [12]  163 	inc	r0
      000033 A6 06            [24]  164 	mov	@r0,ar6
      000035 08               [12]  165 	inc	r0
      000036 A6 07            [24]  166 	mov	@r0,ar7
                                    167 ;	atoi.c:42: neg = (*nptr == '-');
      000038 8D 82            [24]  168 	mov	dpl,r5
      00003A 8E 83            [24]  169 	mov	dph,r6
      00003C 8F F0            [24]  170 	mov	b,r7
      00003E 12r00r00         [24]  171 	lcall	__gptrget
      000041 FF               [12]  172 	mov	r7,a
      000042 BF 2D 03         [24]  173 	cjne	r7,#0x2d,00165$
      000045 D3               [12]  174 	setb	c
      000046 80 01            [24]  175 	sjmp	00166$
      000048                        176 00165$:
      000048 C3               [12]  177 	clr	c
      000049                        178 00166$:
      000049 92*00            [24]  179 	mov	b0,c
                                    180 ;	atoi.c:44: if (*nptr == '-' || *nptr == '+')
      00004B BF 2D 02         [24]  181 	cjne	r7,#0x2d,00167$
      00004E 80 03            [24]  182 	sjmp	00104$
      000050                        183 00167$:
      000050 BF 2B 09         [24]  184 	cjne	r7,#0x2b,00129$
      000053                        185 00104$:
                                    186 ;	atoi.c:45: nptr++;
      000053 A8*00            [24]  187 	mov	r0,_bp
      000055 08               [12]  188 	inc	r0
      000056 06               [12]  189 	inc	@r0
      000057 B6 00 02         [24]  190 	cjne	@r0,#0x00,00170$
      00005A 08               [12]  191 	inc	r0
      00005B 06               [12]  192 	inc	@r0
      00005C                        193 00170$:
                                    194 ;	atoi.c:47: while (isdigit (*nptr))
      00005C                        195 00129$:
      00005C A8*00            [24]  196 	mov	r0,_bp
      00005E 08               [12]  197 	inc	r0
      00005F E5*00            [12]  198 	mov	a,_bp
      000061 24 04            [12]  199 	add	a,#0x04
      000063 F9               [12]  200 	mov	r1,a
      000064 E6               [12]  201 	mov	a,@r0
      000065 F7               [12]  202 	mov	@r1,a
      000066 08               [12]  203 	inc	r0
      000067 E6               [12]  204 	mov	a,@r0
      000068 09               [12]  205 	inc	r1
      000069 F7               [12]  206 	mov	@r1,a
      00006A 08               [12]  207 	inc	r0
      00006B E6               [12]  208 	mov	a,@r0
      00006C 09               [12]  209 	inc	r1
      00006D F7               [12]  210 	mov	@r1,a
      00006E                        211 00107$:
      00006E E5*00            [12]  212 	mov	a,_bp
      000070 24 04            [12]  213 	add	a,#0x04
      000072 F8               [12]  214 	mov	r0,a
      000073 86 82            [24]  215 	mov	dpl,@r0
      000075 08               [12]  216 	inc	r0
      000076 86 83            [24]  217 	mov	dph,@r0
      000078 08               [12]  218 	inc	r0
      000079 86 F0            [24]  219 	mov	b,@r0
      00007B 12r00r00         [24]  220 	lcall	__gptrget
      00007E FA               [12]  221 	mov	r2,a
                                    222 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      00007F BA 30 00         [24]  223 	cjne	r2,#0x30,00171$
      000082                        224 00171$:
      000082 92*00            [24]  225 	mov	b1,c
      000084 40 4C            [24]  226 	jc	00109$
      000086 EA               [12]  227 	mov	a,r2
      000087 24 C6            [12]  228 	add	a,#0xff - 0x39
      000089 92*00            [24]  229 	mov	b1,c
      00008B 40 45            [24]  230 	jc	00109$
                                    231 ;	atoi.c:48: ret = ret * 10 + (*(nptr++) - '0');
      00008D C0*00            [24]  232 	push	bits
      00008F C0 03            [24]  233 	push	ar3
      000091 C0 04            [24]  234 	push	ar4
      000093 90 00 0A         [24]  235 	mov	dptr,#0x000a
      000096 12r00r00         [24]  236 	lcall	__mulint
      000099 AA 82            [24]  237 	mov	r2,dpl
      00009B AF 83            [24]  238 	mov	r7,dph
      00009D 15 81            [12]  239 	dec	sp
      00009F 15 81            [12]  240 	dec	sp
      0000A1 D0*00            [24]  241 	pop	bits
      0000A3 E5*00            [12]  242 	mov	a,_bp
      0000A5 24 04            [12]  243 	add	a,#0x04
      0000A7 F8               [12]  244 	mov	r0,a
      0000A8 86 82            [24]  245 	mov	dpl,@r0
      0000AA 08               [12]  246 	inc	r0
      0000AB 86 83            [24]  247 	mov	dph,@r0
      0000AD 08               [12]  248 	inc	r0
      0000AE 86 F0            [24]  249 	mov	b,@r0
      0000B0 12r00r00         [24]  250 	lcall	__gptrget
      0000B3 FE               [12]  251 	mov	r6,a
      0000B4 A3               [24]  252 	inc	dptr
      0000B5 18               [12]  253 	dec	r0
      0000B6 18               [12]  254 	dec	r0
      0000B7 A6 82            [24]  255 	mov	@r0,dpl
      0000B9 08               [12]  256 	inc	r0
      0000BA A6 83            [24]  257 	mov	@r0,dph
      0000BC 7D 00            [12]  258 	mov	r5,#0x00
      0000BE EE               [12]  259 	mov	a,r6
      0000BF 24 D0            [12]  260 	add	a,#0xd0
      0000C1 FE               [12]  261 	mov	r6,a
      0000C2 ED               [12]  262 	mov	a,r5
      0000C3 34 FF            [12]  263 	addc	a,#0xff
      0000C5 FD               [12]  264 	mov	r5,a
      0000C6 EE               [12]  265 	mov	a,r6
      0000C7 2A               [12]  266 	add	a,r2
      0000C8 FA               [12]  267 	mov	r2,a
      0000C9 ED               [12]  268 	mov	a,r5
      0000CA 3F               [12]  269 	addc	a,r7
      0000CB FF               [12]  270 	mov	r7,a
      0000CC 8A 03            [24]  271 	mov	ar3,r2
      0000CE 8F 04            [24]  272 	mov	ar4,r7
      0000D0 80 9C            [24]  273 	sjmp	00107$
      0000D2                        274 00109$:
                                    275 ;	atoi.c:50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
      0000D2 30*00 09         [24]  276 	jnb	b0,00120$
      0000D5 C3               [12]  277 	clr	c
      0000D6 E4               [12]  278 	clr	a
      0000D7 9B               [12]  279 	subb	a,r3
      0000D8 FE               [12]  280 	mov	r6,a
      0000D9 E4               [12]  281 	clr	a
      0000DA 9C               [12]  282 	subb	a,r4
      0000DB FF               [12]  283 	mov	r7,a
      0000DC 80 04            [24]  284 	sjmp	00121$
      0000DE                        285 00120$:
      0000DE 8B 06            [24]  286 	mov	ar6,r3
      0000E0 8C 07            [24]  287 	mov	ar7,r4
      0000E2                        288 00121$:
      0000E2 8E 82            [24]  289 	mov	dpl,r6
      0000E4 8F 83            [24]  290 	mov	dph,r7
                                    291 ;	atoi.c:51: }
      0000E6 85*00 81         [24]  292 	mov	sp,_bp
      0000E9 D0*00            [24]  293 	pop	_bp
      0000EB 22               [24]  294 	ret
                                    295 	.area CSEG    (CODE)
                                    296 	.area CONST   (CODE)
                                    297 	.area XINIT   (CODE)
                                    298 	.area CABS    (ABS,CODE)
