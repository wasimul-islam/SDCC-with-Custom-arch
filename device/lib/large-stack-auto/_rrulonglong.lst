                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _rrulonglong
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __rrulonglong
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_rrulonglong'
                                     91 ;------------------------------------------------------------
                                     92 ;s                         Allocated to stack - _bp -3
                                     93 ;l                         Allocated to stack - _bp +1
                                     94 ;top                       Allocated to stack - _bp +16
                                     95 ;middle                    Allocated to stack - _bp +19
                                     96 ;bottom                    Allocated to stack - _bp +22
                                     97 ;b                         Allocated to stack - _bp +25
                                     98 ;sloc0                     Allocated to stack - _bp +9
                                     99 ;sloc1                     Allocated to stack - _bp +12
                                    100 ;------------------------------------------------------------
                                    101 ;	_rrulonglong.c:41: unsigned long long _rrulonglong(unsigned long long l, char s) __SDCC_NONBANKED
                                    102 ;	-----------------------------------------
                                    103 ;	 function _rrulonglong
                                    104 ;	-----------------------------------------
      000000                        105 __rrulonglong:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D C0 04            [24]  120 	push	ar4
      00000F C0 05            [24]  121 	push	ar5
      000011 C0 06            [24]  122 	push	ar6
      000013 C0 07            [24]  123 	push	ar7
      000015 E5 81            [12]  124 	mov	a,sp
      000017 24 13            [12]  125 	add	a,#0x13
      000019 F5 81            [12]  126 	mov	sp,a
                                    127 ;	_rrulonglong.c:43: uint32_t *const top = (uint32_t *)((char *)(&l) + 0);
      00001B AF*00            [24]  128 	mov	r7,_bp
      00001D 0F               [12]  129 	inc	r7
      00001E 8F 04            [24]  130 	mov	ar4,r7
      000020 7D 00            [12]  131 	mov	r5,#0x00
      000022 7E 40            [12]  132 	mov	r6,#0x40
      000024 E5*00            [12]  133 	mov	a,_bp
      000026 24 10            [12]  134 	add	a,#0x10
      000028 F8               [12]  135 	mov	r0,a
      000029 A6 04            [24]  136 	mov	@r0,ar4
      00002B 08               [12]  137 	inc	r0
      00002C A6 05            [24]  138 	mov	@r0,ar5
      00002E 08               [12]  139 	inc	r0
      00002F A6 06            [24]  140 	mov	@r0,ar6
                                    141 ;	_rrulonglong.c:44: uint32_t *const middle = (uint16_t *)((char *)(&l) + 2);
      000031 8F 03            [24]  142 	mov	ar3,r7
      000033 8B 02            [24]  143 	mov	ar2,r3
      000035 7B 00            [12]  144 	mov	r3,#0x00
      000037 7E 40            [12]  145 	mov	r6,#0x40
      000039 74 02            [12]  146 	mov	a,#0x02
      00003B 2A               [12]  147 	add	a,r2
      00003C FA               [12]  148 	mov	r2,a
      00003D E4               [12]  149 	clr	a
      00003E 3B               [12]  150 	addc	a,r3
      00003F FB               [12]  151 	mov	r3,a
      000040 E5*00            [12]  152 	mov	a,_bp
      000042 24 13            [12]  153 	add	a,#0x13
      000044 F8               [12]  154 	mov	r0,a
      000045 A6 02            [24]  155 	mov	@r0,ar2
      000047 08               [12]  156 	inc	r0
      000048 A6 03            [24]  157 	mov	@r0,ar3
      00004A 08               [12]  158 	inc	r0
      00004B A6 06            [24]  159 	mov	@r0,ar6
                                    160 ;	_rrulonglong.c:45: uint32_t *const bottom = (uint32_t *)((char *)(&l) + 4);
      00004D 8F 05            [24]  161 	mov	ar5,r7
      00004F 8D 04            [24]  162 	mov	ar4,r5
      000051 7D 00            [12]  163 	mov	r5,#0x00
      000053 7E 40            [12]  164 	mov	r6,#0x40
      000055 74 04            [12]  165 	mov	a,#0x04
      000057 2C               [12]  166 	add	a,r4
      000058 FC               [12]  167 	mov	r4,a
      000059 E4               [12]  168 	clr	a
      00005A 3D               [12]  169 	addc	a,r5
      00005B FD               [12]  170 	mov	r5,a
      00005C E5*00            [12]  171 	mov	a,_bp
      00005E 24 16            [12]  172 	add	a,#0x16
      000060 F8               [12]  173 	mov	r0,a
      000061 A6 04            [24]  174 	mov	@r0,ar4
      000063 08               [12]  175 	inc	r0
      000064 A6 05            [24]  176 	mov	@r0,ar5
      000066 08               [12]  177 	inc	r0
      000067 A6 06            [24]  178 	mov	@r0,ar6
                                    179 ;	_rrulonglong.c:46: uint16_t *const b = (uint16_t *)(&l);
      000069 E5*00            [12]  180 	mov	a,_bp
      00006B 24 19            [12]  181 	add	a,#0x19
      00006D F8               [12]  182 	mov	r0,a
      00006E A6 07            [24]  183 	mov	@r0,ar7
      000070 08               [12]  184 	inc	r0
      000071 76 00            [12]  185 	mov	@r0,#0x00
      000073 08               [12]  186 	inc	r0
      000074 76 40            [12]  187 	mov	@r0,#0x40
                                    188 ;	_rrulonglong.c:56: (*bottom) >>= s;
      000076                        189 00103$:
                                    190 ;	_rrulonglong.c:48: for(;s >= 16; s -= 16)
      000076 E5*00            [12]  191 	mov	a,_bp
      000078 24 FD            [12]  192 	add	a,#0xfd
      00007A F8               [12]  193 	mov	r0,a
      00007B B6 10 00         [24]  194 	cjne	@r0,#0x10,00115$
      00007E                        195 00115$:
      00007E 50 03            [24]  196 	jnc	00116$
      000080 02r01r5F         [24]  197 	ljmp	00101$
      000083                        198 00116$:
                                    199 ;	_rrulonglong.c:50: b[3] = b[2];
      000083 E5*00            [12]  200 	mov	a,_bp
      000085 24 19            [12]  201 	add	a,#0x19
      000087 F8               [12]  202 	mov	r0,a
      000088 E5*00            [12]  203 	mov	a,_bp
      00008A 24 09            [12]  204 	add	a,#0x09
      00008C F9               [12]  205 	mov	r1,a
      00008D 74 06            [12]  206 	mov	a,#0x06
      00008F 26               [12]  207 	add	a,@r0
      000090 F7               [12]  208 	mov	@r1,a
      000091 E4               [12]  209 	clr	a
      000092 08               [12]  210 	inc	r0
      000093 36               [12]  211 	addc	a,@r0
      000094 09               [12]  212 	inc	r1
      000095 F7               [12]  213 	mov	@r1,a
      000096 08               [12]  214 	inc	r0
      000097 E6               [12]  215 	mov	a,@r0
      000098 09               [12]  216 	inc	r1
      000099 F7               [12]  217 	mov	@r1,a
      00009A E5*00            [12]  218 	mov	a,_bp
      00009C 24 19            [12]  219 	add	a,#0x19
      00009E F8               [12]  220 	mov	r0,a
      00009F 74 04            [12]  221 	mov	a,#0x04
      0000A1 26               [12]  222 	add	a,@r0
      0000A2 FA               [12]  223 	mov	r2,a
      0000A3 E4               [12]  224 	clr	a
      0000A4 08               [12]  225 	inc	r0
      0000A5 36               [12]  226 	addc	a,@r0
      0000A6 FB               [12]  227 	mov	r3,a
      0000A7 08               [12]  228 	inc	r0
      0000A8 86 07            [24]  229 	mov	ar7,@r0
      0000AA 8A 82            [24]  230 	mov	dpl,r2
      0000AC 8B 83            [24]  231 	mov	dph,r3
      0000AE 8F F0            [24]  232 	mov	b,r7
      0000B0 12r00r00         [24]  233 	lcall	__gptrget
      0000B3 FE               [12]  234 	mov	r6,a
      0000B4 A3               [24]  235 	inc	dptr
      0000B5 12r00r00         [24]  236 	lcall	__gptrget
      0000B8 FD               [12]  237 	mov	r5,a
      0000B9 E5*00            [12]  238 	mov	a,_bp
      0000BB 24 09            [12]  239 	add	a,#0x09
      0000BD F8               [12]  240 	mov	r0,a
      0000BE 86 82            [24]  241 	mov	dpl,@r0
      0000C0 08               [12]  242 	inc	r0
      0000C1 86 83            [24]  243 	mov	dph,@r0
      0000C3 08               [12]  244 	inc	r0
      0000C4 86 F0            [24]  245 	mov	b,@r0
      0000C6 EE               [12]  246 	mov	a,r6
      0000C7 12r00r00         [24]  247 	lcall	__gptrput
      0000CA A3               [24]  248 	inc	dptr
      0000CB ED               [12]  249 	mov	a,r5
      0000CC 12r00r00         [24]  250 	lcall	__gptrput
                                    251 ;	_rrulonglong.c:51: b[2] = b[1];
      0000CF E5*00            [12]  252 	mov	a,_bp
      0000D1 24 19            [12]  253 	add	a,#0x19
      0000D3 F8               [12]  254 	mov	r0,a
      0000D4 E5*00            [12]  255 	mov	a,_bp
      0000D6 24 09            [12]  256 	add	a,#0x09
      0000D8 F9               [12]  257 	mov	r1,a
      0000D9 74 02            [12]  258 	mov	a,#0x02
      0000DB 26               [12]  259 	add	a,@r0
      0000DC F7               [12]  260 	mov	@r1,a
      0000DD E4               [12]  261 	clr	a
      0000DE 08               [12]  262 	inc	r0
      0000DF 36               [12]  263 	addc	a,@r0
      0000E0 09               [12]  264 	inc	r1
      0000E1 F7               [12]  265 	mov	@r1,a
      0000E2 08               [12]  266 	inc	r0
      0000E3 E6               [12]  267 	mov	a,@r0
      0000E4 09               [12]  268 	inc	r1
      0000E5 F7               [12]  269 	mov	@r1,a
      0000E6 E5*00            [12]  270 	mov	a,_bp
      0000E8 24 09            [12]  271 	add	a,#0x09
      0000EA F8               [12]  272 	mov	r0,a
      0000EB 86 82            [24]  273 	mov	dpl,@r0
      0000ED 08               [12]  274 	inc	r0
      0000EE 86 83            [24]  275 	mov	dph,@r0
      0000F0 08               [12]  276 	inc	r0
      0000F1 86 F0            [24]  277 	mov	b,@r0
      0000F3 12r00r00         [24]  278 	lcall	__gptrget
      0000F6 FD               [12]  279 	mov	r5,a
      0000F7 A3               [24]  280 	inc	dptr
      0000F8 12r00r00         [24]  281 	lcall	__gptrget
      0000FB FE               [12]  282 	mov	r6,a
      0000FC 8A 82            [24]  283 	mov	dpl,r2
      0000FE 8B 83            [24]  284 	mov	dph,r3
      000100 8F F0            [24]  285 	mov	b,r7
      000102 ED               [12]  286 	mov	a,r5
      000103 12r00r00         [24]  287 	lcall	__gptrput
      000106 A3               [24]  288 	inc	dptr
      000107 EE               [12]  289 	mov	a,r6
      000108 12r00r00         [24]  290 	lcall	__gptrput
                                    291 ;	_rrulonglong.c:52: b[1] = b[0];
      00010B E5*00            [12]  292 	mov	a,_bp
      00010D 24 19            [12]  293 	add	a,#0x19
      00010F F8               [12]  294 	mov	r0,a
      000110 86 82            [24]  295 	mov	dpl,@r0
      000112 08               [12]  296 	inc	r0
      000113 86 83            [24]  297 	mov	dph,@r0
      000115 08               [12]  298 	inc	r0
      000116 86 F0            [24]  299 	mov	b,@r0
      000118 12r00r00         [24]  300 	lcall	__gptrget
      00011B FE               [12]  301 	mov	r6,a
      00011C A3               [24]  302 	inc	dptr
      00011D 12r00r00         [24]  303 	lcall	__gptrget
      000120 FF               [12]  304 	mov	r7,a
      000121 E5*00            [12]  305 	mov	a,_bp
      000123 24 09            [12]  306 	add	a,#0x09
      000125 F8               [12]  307 	mov	r0,a
      000126 86 82            [24]  308 	mov	dpl,@r0
      000128 08               [12]  309 	inc	r0
      000129 86 83            [24]  310 	mov	dph,@r0
      00012B 08               [12]  311 	inc	r0
      00012C 86 F0            [24]  312 	mov	b,@r0
      00012E EE               [12]  313 	mov	a,r6
      00012F 12r00r00         [24]  314 	lcall	__gptrput
      000132 A3               [24]  315 	inc	dptr
      000133 EF               [12]  316 	mov	a,r7
      000134 12r00r00         [24]  317 	lcall	__gptrput
                                    318 ;	_rrulonglong.c:53: b[0] = 0x000000;
      000137 E5*00            [12]  319 	mov	a,_bp
      000139 24 19            [12]  320 	add	a,#0x19
      00013B F8               [12]  321 	mov	r0,a
      00013C 86 82            [24]  322 	mov	dpl,@r0
      00013E 08               [12]  323 	inc	r0
      00013F 86 83            [24]  324 	mov	dph,@r0
      000141 08               [12]  325 	inc	r0
      000142 86 F0            [24]  326 	mov	b,@r0
      000144 E4               [12]  327 	clr	a
      000145 12r00r00         [24]  328 	lcall	__gptrput
      000148 A3               [24]  329 	inc	dptr
      000149 12r00r00         [24]  330 	lcall	__gptrput
                                    331 ;	_rrulonglong.c:48: for(;s >= 16; s -= 16)
      00014C E5*00            [12]  332 	mov	a,_bp
      00014E 24 FD            [12]  333 	add	a,#0xfd
      000150 F8               [12]  334 	mov	r0,a
      000151 86 07            [24]  335 	mov	ar7,@r0
      000153 E5*00            [12]  336 	mov	a,_bp
      000155 24 FD            [12]  337 	add	a,#0xfd
      000157 F8               [12]  338 	mov	r0,a
      000158 EF               [12]  339 	mov	a,r7
      000159 24 F0            [12]  340 	add	a,#0xf0
      00015B F6               [12]  341 	mov	@r0,a
      00015C 02r00r76         [24]  342 	ljmp	00103$
      00015F                        343 00101$:
                                    344 ;	_rrulonglong.c:56: (*bottom) >>= s;
      00015F E5*00            [12]  345 	mov	a,_bp
      000161 24 16            [12]  346 	add	a,#0x16
      000163 F8               [12]  347 	mov	r0,a
      000164 86 82            [24]  348 	mov	dpl,@r0
      000166 08               [12]  349 	inc	r0
      000167 86 83            [24]  350 	mov	dph,@r0
      000169 08               [12]  351 	inc	r0
      00016A 86 F0            [24]  352 	mov	b,@r0
      00016C 12r00r00         [24]  353 	lcall	__gptrget
      00016F FA               [12]  354 	mov	r2,a
      000170 A3               [24]  355 	inc	dptr
      000171 12r00r00         [24]  356 	lcall	__gptrget
      000174 FB               [12]  357 	mov	r3,a
      000175 A3               [24]  358 	inc	dptr
      000176 12r00r00         [24]  359 	lcall	__gptrget
      000179 FE               [12]  360 	mov	r6,a
      00017A A3               [24]  361 	inc	dptr
      00017B 12r00r00         [24]  362 	lcall	__gptrget
      00017E FF               [12]  363 	mov	r7,a
      00017F E5*00            [12]  364 	mov	a,_bp
      000181 24 FD            [12]  365 	add	a,#0xfd
      000183 F8               [12]  366 	mov	r0,a
      000184 86 F0            [24]  367 	mov	b,@r0
      000186 05 F0            [12]  368 	inc	b
      000188 80 0D            [24]  369 	sjmp	00118$
      00018A                        370 00117$:
      00018A C3               [12]  371 	clr	c
      00018B EF               [12]  372 	mov	a,r7
      00018C 13               [12]  373 	rrc	a
      00018D FF               [12]  374 	mov	r7,a
      00018E EE               [12]  375 	mov	a,r6
      00018F 13               [12]  376 	rrc	a
      000190 FE               [12]  377 	mov	r6,a
      000191 EB               [12]  378 	mov	a,r3
      000192 13               [12]  379 	rrc	a
      000193 FB               [12]  380 	mov	r3,a
      000194 EA               [12]  381 	mov	a,r2
      000195 13               [12]  382 	rrc	a
      000196 FA               [12]  383 	mov	r2,a
      000197                        384 00118$:
      000197 D5 F0 F0         [24]  385 	djnz	b,00117$
      00019A E5*00            [12]  386 	mov	a,_bp
      00019C 24 16            [12]  387 	add	a,#0x16
      00019E F8               [12]  388 	mov	r0,a
      00019F 86 82            [24]  389 	mov	dpl,@r0
      0001A1 08               [12]  390 	inc	r0
      0001A2 86 83            [24]  391 	mov	dph,@r0
      0001A4 08               [12]  392 	inc	r0
      0001A5 86 F0            [24]  393 	mov	b,@r0
      0001A7 EA               [12]  394 	mov	a,r2
      0001A8 12r00r00         [24]  395 	lcall	__gptrput
      0001AB A3               [24]  396 	inc	dptr
      0001AC EB               [12]  397 	mov	a,r3
      0001AD 12r00r00         [24]  398 	lcall	__gptrput
      0001B0 A3               [24]  399 	inc	dptr
      0001B1 EE               [12]  400 	mov	a,r6
      0001B2 12r00r00         [24]  401 	lcall	__gptrput
      0001B5 A3               [24]  402 	inc	dptr
      0001B6 EF               [12]  403 	mov	a,r7
      0001B7 12r00r00         [24]  404 	lcall	__gptrput
                                    405 ;	_rrulonglong.c:57: (*middle) |= (((*middle & 0xffff0000ul) >> s) & 0x0000fffful);
      0001BA E5*00            [12]  406 	mov	a,_bp
      0001BC 24 13            [12]  407 	add	a,#0x13
      0001BE F8               [12]  408 	mov	r0,a
      0001BF 86 82            [24]  409 	mov	dpl,@r0
      0001C1 08               [12]  410 	inc	r0
      0001C2 86 83            [24]  411 	mov	dph,@r0
      0001C4 08               [12]  412 	inc	r0
      0001C5 86 F0            [24]  413 	mov	b,@r0
      0001C7 E5*00            [12]  414 	mov	a,_bp
      0001C9 24 0C            [12]  415 	add	a,#0x0c
      0001CB F9               [12]  416 	mov	r1,a
      0001CC 12r00r00         [24]  417 	lcall	__gptrget
      0001CF F7               [12]  418 	mov	@r1,a
      0001D0 A3               [24]  419 	inc	dptr
      0001D1 12r00r00         [24]  420 	lcall	__gptrget
      0001D4 09               [12]  421 	inc	r1
      0001D5 F7               [12]  422 	mov	@r1,a
      0001D6 A3               [24]  423 	inc	dptr
      0001D7 12r00r00         [24]  424 	lcall	__gptrget
      0001DA 09               [12]  425 	inc	r1
      0001DB F7               [12]  426 	mov	@r1,a
      0001DC A3               [24]  427 	inc	dptr
      0001DD 12r00r00         [24]  428 	lcall	__gptrget
      0001E0 09               [12]  429 	inc	r1
      0001E1 F7               [12]  430 	mov	@r1,a
      0001E2 E5*00            [12]  431 	mov	a,_bp
      0001E4 24 0C            [12]  432 	add	a,#0x0c
      0001E6 F8               [12]  433 	mov	r0,a
      0001E7 7A 00            [12]  434 	mov	r2,#0x00
      0001E9 7B 00            [12]  435 	mov	r3,#0x00
      0001EB 08               [12]  436 	inc	r0
      0001EC 08               [12]  437 	inc	r0
      0001ED 86 06            [24]  438 	mov	ar6,@r0
      0001EF 08               [12]  439 	inc	r0
      0001F0 86 07            [24]  440 	mov	ar7,@r0
      0001F2 E5*00            [12]  441 	mov	a,_bp
      0001F4 24 FD            [12]  442 	add	a,#0xfd
      0001F6 F8               [12]  443 	mov	r0,a
      0001F7 86 F0            [24]  444 	mov	b,@r0
      0001F9 05 F0            [12]  445 	inc	b
      0001FB 80 0D            [24]  446 	sjmp	00120$
      0001FD                        447 00119$:
      0001FD C3               [12]  448 	clr	c
      0001FE EF               [12]  449 	mov	a,r7
      0001FF 13               [12]  450 	rrc	a
      000200 FF               [12]  451 	mov	r7,a
      000201 EE               [12]  452 	mov	a,r6
      000202 13               [12]  453 	rrc	a
      000203 FE               [12]  454 	mov	r6,a
      000204 EB               [12]  455 	mov	a,r3
      000205 13               [12]  456 	rrc	a
      000206 FB               [12]  457 	mov	r3,a
      000207 EA               [12]  458 	mov	a,r2
      000208 13               [12]  459 	rrc	a
      000209 FA               [12]  460 	mov	r2,a
      00020A                        461 00120$:
      00020A D5 F0 F0         [24]  462 	djnz	b,00119$
      00020D E4               [12]  463 	clr	a
      00020E FE               [12]  464 	mov	r6,a
      00020F FF               [12]  465 	mov	r7,a
      000210 E5*00            [12]  466 	mov	a,_bp
      000212 24 0C            [12]  467 	add	a,#0x0c
      000214 F8               [12]  468 	mov	r0,a
      000215 E6               [12]  469 	mov	a,@r0
      000216 42 02            [12]  470 	orl	ar2,a
      000218 08               [12]  471 	inc	r0
      000219 E6               [12]  472 	mov	a,@r0
      00021A 42 03            [12]  473 	orl	ar3,a
      00021C 08               [12]  474 	inc	r0
      00021D E6               [12]  475 	mov	a,@r0
      00021E 42 06            [12]  476 	orl	ar6,a
      000220 08               [12]  477 	inc	r0
      000221 E6               [12]  478 	mov	a,@r0
      000222 42 07            [12]  479 	orl	ar7,a
      000224 E5*00            [12]  480 	mov	a,_bp
      000226 24 13            [12]  481 	add	a,#0x13
      000228 F8               [12]  482 	mov	r0,a
      000229 86 82            [24]  483 	mov	dpl,@r0
      00022B 08               [12]  484 	inc	r0
      00022C 86 83            [24]  485 	mov	dph,@r0
      00022E 08               [12]  486 	inc	r0
      00022F 86 F0            [24]  487 	mov	b,@r0
      000231 EA               [12]  488 	mov	a,r2
      000232 12r00r00         [24]  489 	lcall	__gptrput
      000235 A3               [24]  490 	inc	dptr
      000236 EB               [12]  491 	mov	a,r3
      000237 12r00r00         [24]  492 	lcall	__gptrput
      00023A A3               [24]  493 	inc	dptr
      00023B EE               [12]  494 	mov	a,r6
      00023C 12r00r00         [24]  495 	lcall	__gptrput
      00023F A3               [24]  496 	inc	dptr
      000240 EF               [12]  497 	mov	a,r7
      000241 12r00r00         [24]  498 	lcall	__gptrput
                                    499 ;	_rrulonglong.c:58: (*top) >>= s;
      000244 E5*00            [12]  500 	mov	a,_bp
      000246 24 10            [12]  501 	add	a,#0x10
      000248 F8               [12]  502 	mov	r0,a
      000249 86 82            [24]  503 	mov	dpl,@r0
      00024B 08               [12]  504 	inc	r0
      00024C 86 83            [24]  505 	mov	dph,@r0
      00024E 08               [12]  506 	inc	r0
      00024F 86 F0            [24]  507 	mov	b,@r0
      000251 12r00r00         [24]  508 	lcall	__gptrget
      000254 FC               [12]  509 	mov	r4,a
      000255 A3               [24]  510 	inc	dptr
      000256 12r00r00         [24]  511 	lcall	__gptrget
      000259 FD               [12]  512 	mov	r5,a
      00025A A3               [24]  513 	inc	dptr
      00025B 12r00r00         [24]  514 	lcall	__gptrget
      00025E FE               [12]  515 	mov	r6,a
      00025F A3               [24]  516 	inc	dptr
      000260 12r00r00         [24]  517 	lcall	__gptrget
      000263 FF               [12]  518 	mov	r7,a
      000264 E5*00            [12]  519 	mov	a,_bp
      000266 24 FD            [12]  520 	add	a,#0xfd
      000268 F8               [12]  521 	mov	r0,a
      000269 86 F0            [24]  522 	mov	b,@r0
      00026B 05 F0            [12]  523 	inc	b
      00026D 80 0D            [24]  524 	sjmp	00122$
      00026F                        525 00121$:
      00026F C3               [12]  526 	clr	c
      000270 EF               [12]  527 	mov	a,r7
      000271 13               [12]  528 	rrc	a
      000272 FF               [12]  529 	mov	r7,a
      000273 EE               [12]  530 	mov	a,r6
      000274 13               [12]  531 	rrc	a
      000275 FE               [12]  532 	mov	r6,a
      000276 ED               [12]  533 	mov	a,r5
      000277 13               [12]  534 	rrc	a
      000278 FD               [12]  535 	mov	r5,a
      000279 EC               [12]  536 	mov	a,r4
      00027A 13               [12]  537 	rrc	a
      00027B FC               [12]  538 	mov	r4,a
      00027C                        539 00122$:
      00027C D5 F0 F0         [24]  540 	djnz	b,00121$
      00027F E5*00            [12]  541 	mov	a,_bp
      000281 24 10            [12]  542 	add	a,#0x10
      000283 F8               [12]  543 	mov	r0,a
      000284 86 82            [24]  544 	mov	dpl,@r0
      000286 08               [12]  545 	inc	r0
      000287 86 83            [24]  546 	mov	dph,@r0
      000289 08               [12]  547 	inc	r0
      00028A 86 F0            [24]  548 	mov	b,@r0
      00028C EC               [12]  549 	mov	a,r4
      00028D 12r00r00         [24]  550 	lcall	__gptrput
      000290 A3               [24]  551 	inc	dptr
      000291 ED               [12]  552 	mov	a,r5
      000292 12r00r00         [24]  553 	lcall	__gptrput
      000295 A3               [24]  554 	inc	dptr
      000296 EE               [12]  555 	mov	a,r6
      000297 12r00r00         [24]  556 	lcall	__gptrput
      00029A A3               [24]  557 	inc	dptr
      00029B EF               [12]  558 	mov	a,r7
      00029C 12r00r00         [24]  559 	lcall	__gptrput
                                    560 ;	_rrulonglong.c:60: return(l);
      00029F A8*00            [24]  561 	mov	r0,_bp
      0002A1 08               [12]  562 	inc	r0
      0002A2 86 82            [24]  563 	mov	dpl,@r0
      0002A4 08               [12]  564 	inc	r0
      0002A5 86 83            [24]  565 	mov	dph,@r0
      0002A7 08               [12]  566 	inc	r0
      0002A8 86 F0            [24]  567 	mov	b,@r0
      0002AA 08               [12]  568 	inc	r0
      0002AB E6               [12]  569 	mov	a,@r0
      0002AC 08               [12]  570 	inc	r0
      0002AD 86 04            [24]  571 	mov	ar4,@r0
      0002AF 08               [12]  572 	inc	r0
      0002B0 86 05            [24]  573 	mov	ar5,@r0
      0002B2 08               [12]  574 	inc	r0
      0002B3 86 06            [24]  575 	mov	ar6,@r0
      0002B5 08               [12]  576 	inc	r0
      0002B6 86 07            [24]  577 	mov	ar7,@r0
                                    578 ;	_rrulonglong.c:61: }
      0002B8 85*00 81         [24]  579 	mov	sp,_bp
      0002BB D0*00            [24]  580 	pop	_bp
      0002BD 22               [24]  581 	ret
                                    582 	.area CSEG    (CODE)
                                    583 	.area CONST   (CODE)
                                    584 	.area XINIT   (CODE)
                                    585 	.area CABS    (ABS,CODE)
