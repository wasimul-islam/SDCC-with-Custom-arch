                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strndup
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _malloc
                                     12 	.globl ___memcpy
                                     13 	.globl _strlen
                                     14 	.globl _strndup
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; uninitialized external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; initialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'strndup'
                                     94 ;------------------------------------------------------------
                                     95 ;n                         Allocated to stack - _bp -4
                                     96 ;s                         Allocated to registers r5 r6 r7 
                                     97 ;l                         Allocated to stack - _bp +1
                                     98 ;r                         Allocated to stack - _bp +3
                                     99 ;------------------------------------------------------------
                                    100 ;	strndup.c:33: char *strndup (const char *s, size_t n)
                                    101 ;	-----------------------------------------
                                    102 ;	 function strndup
                                    103 ;	-----------------------------------------
      000000                        104 _strndup:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 C0*00            [24]  113 	push	_bp
      000002 E5 81            [12]  114 	mov	a,sp
      000004 F5*00            [12]  115 	mov	_bp,a
      000006 24 05            [12]  116 	add	a,#0x05
      000008 F5 81            [12]  117 	mov	sp,a
                                    118 ;	strndup.c:35: size_t l = strlen (s);
      00000A AD 82            [24]  119 	mov	r5,dpl
      00000C AE 83            [24]  120 	mov	r6,dph
      00000E AF F0            [24]  121 	mov	r7,b
      000010 C0 07            [24]  122 	push	ar7
      000012 C0 06            [24]  123 	push	ar6
      000014 C0 05            [24]  124 	push	ar5
      000016 12r00r00         [24]  125 	lcall	_strlen
      000019 AB 82            [24]  126 	mov	r3,dpl
      00001B AC 83            [24]  127 	mov	r4,dph
      00001D D0 05            [24]  128 	pop	ar5
      00001F D0 06            [24]  129 	pop	ar6
      000021 D0 07            [24]  130 	pop	ar7
      000023 A8*00            [24]  131 	mov	r0,_bp
      000025 08               [12]  132 	inc	r0
      000026 A6 03            [24]  133 	mov	@r0,ar3
      000028 08               [12]  134 	inc	r0
      000029 A6 04            [24]  135 	mov	@r0,ar4
                                    136 ;	strndup.c:36: if (l > n)
      00002B A8*00            [24]  137 	mov	r0,_bp
      00002D 08               [12]  138 	inc	r0
      00002E E5*00            [12]  139 	mov	a,_bp
      000030 24 FC            [12]  140 	add	a,#0xfc
      000032 F9               [12]  141 	mov	r1,a
      000033 C3               [12]  142 	clr	c
      000034 E7               [12]  143 	mov	a,@r1
      000035 96               [12]  144 	subb	a,@r0
      000036 09               [12]  145 	inc	r1
      000037 E7               [12]  146 	mov	a,@r1
      000038 08               [12]  147 	inc	r0
      000039 96               [12]  148 	subb	a,@r0
      00003A 50 0E            [24]  149 	jnc	00102$
                                    150 ;	strndup.c:37: l = n;
      00003C E5*00            [12]  151 	mov	a,_bp
      00003E 24 FC            [12]  152 	add	a,#0xfc
      000040 F8               [12]  153 	mov	r0,a
      000041 A9*00            [24]  154 	mov	r1,_bp
      000043 09               [12]  155 	inc	r1
      000044 E6               [12]  156 	mov	a,@r0
      000045 F7               [12]  157 	mov	@r1,a
      000046 08               [12]  158 	inc	r0
      000047 E6               [12]  159 	mov	a,@r0
      000048 09               [12]  160 	inc	r1
      000049 F7               [12]  161 	mov	@r1,a
      00004A                        162 00102$:
                                    163 ;	strndup.c:38: char *r = malloc (l + 1);
      00004A C0 05            [24]  164 	push	ar5
      00004C C0 06            [24]  165 	push	ar6
      00004E C0 07            [24]  166 	push	ar7
      000050 A8*00            [24]  167 	mov	r0,_bp
      000052 08               [12]  168 	inc	r0
      000053 74 01            [12]  169 	mov	a,#0x01
      000055 26               [12]  170 	add	a,@r0
      000056 FA               [12]  171 	mov	r2,a
      000057 E4               [12]  172 	clr	a
      000058 08               [12]  173 	inc	r0
      000059 36               [12]  174 	addc	a,@r0
      00005A FF               [12]  175 	mov	r7,a
      00005B 8A 82            [24]  176 	mov	dpl,r2
      00005D 8F 83            [24]  177 	mov	dph,r7
      00005F C0 05            [24]  178 	push	ar5
      000061 12r00r00         [24]  179 	lcall	_malloc
      000064 AE 82            [24]  180 	mov	r6,dpl
      000066 AF 83            [24]  181 	mov	r7,dph
      000068 D0 05            [24]  182 	pop	ar5
      00006A E5*00            [12]  183 	mov	a,_bp
      00006C 24 03            [12]  184 	add	a,#0x03
      00006E F8               [12]  185 	mov	r0,a
      00006F A6 06            [24]  186 	mov	@r0,ar6
      000071 08               [12]  187 	inc	r0
      000072 A6 07            [24]  188 	mov	@r0,ar7
      000074 08               [12]  189 	inc	r0
      000075 76 00            [12]  190 	mov	@r0,#0x00
                                    191 ;	strndup.c:39: if (r)
      000077 D0 07            [24]  192 	pop	ar7
      000079 D0 06            [24]  193 	pop	ar6
      00007B D0 05            [24]  194 	pop	ar5
      00007D E5*00            [12]  195 	mov	a,_bp
      00007F 24 03            [12]  196 	add	a,#0x03
      000081 F8               [12]  197 	mov	r0,a
      000082 E6               [12]  198 	mov	a,@r0
      000083 08               [12]  199 	inc	r0
      000084 46               [12]  200 	orl	a,@r0
      000085 60 49            [24]  201 	jz	00104$
                                    202 ;	strndup.c:41: memcpy (r, s, l);
      000087 E5*00            [12]  203 	mov	a,_bp
      000089 24 03            [12]  204 	add	a,#0x03
      00008B F8               [12]  205 	mov	r0,a
      00008C 86 02            [24]  206 	mov	ar2,@r0
      00008E 08               [12]  207 	inc	r0
      00008F 86 03            [24]  208 	mov	ar3,@r0
      000091 08               [12]  209 	inc	r0
      000092 86 04            [24]  210 	mov	ar4,@r0
      000094 A8*00            [24]  211 	mov	r0,_bp
      000096 08               [12]  212 	inc	r0
      000097 E6               [12]  213 	mov	a,@r0
      000098 C0 E0            [24]  214 	push	acc
      00009A 08               [12]  215 	inc	r0
      00009B E6               [12]  216 	mov	a,@r0
      00009C C0 E0            [24]  217 	push	acc
      00009E C0 05            [24]  218 	push	ar5
      0000A0 C0 06            [24]  219 	push	ar6
      0000A2 C0 07            [24]  220 	push	ar7
      0000A4 8A 82            [24]  221 	mov	dpl,r2
      0000A6 8B 83            [24]  222 	mov	dph,r3
      0000A8 8C F0            [24]  223 	mov	b,r4
      0000AA 12r00r00         [24]  224 	lcall	___memcpy
      0000AD E5 81            [12]  225 	mov	a,sp
      0000AF 24 FB            [12]  226 	add	a,#0xfb
      0000B1 F5 81            [12]  227 	mov	sp,a
                                    228 ;	strndup.c:42: r[l] = 0;
      0000B3 E5*00            [12]  229 	mov	a,_bp
      0000B5 24 03            [12]  230 	add	a,#0x03
      0000B7 F8               [12]  231 	mov	r0,a
      0000B8 A9*00            [24]  232 	mov	r1,_bp
      0000BA 09               [12]  233 	inc	r1
      0000BB E7               [12]  234 	mov	a,@r1
      0000BC 26               [12]  235 	add	a,@r0
      0000BD FD               [12]  236 	mov	r5,a
      0000BE 09               [12]  237 	inc	r1
      0000BF E7               [12]  238 	mov	a,@r1
      0000C0 08               [12]  239 	inc	r0
      0000C1 36               [12]  240 	addc	a,@r0
      0000C2 FE               [12]  241 	mov	r6,a
      0000C3 08               [12]  242 	inc	r0
      0000C4 86 07            [24]  243 	mov	ar7,@r0
      0000C6 8D 82            [24]  244 	mov	dpl,r5
      0000C8 8E 83            [24]  245 	mov	dph,r6
      0000CA 8F F0            [24]  246 	mov	b,r7
      0000CC E4               [12]  247 	clr	a
      0000CD 12r00r00         [24]  248 	lcall	__gptrput
      0000D0                        249 00104$:
                                    250 ;	strndup.c:44: return (r);
      0000D0 E5*00            [12]  251 	mov	a,_bp
      0000D2 24 03            [12]  252 	add	a,#0x03
      0000D4 F8               [12]  253 	mov	r0,a
      0000D5 86 82            [24]  254 	mov	dpl,@r0
      0000D7 08               [12]  255 	inc	r0
      0000D8 86 83            [24]  256 	mov	dph,@r0
      0000DA 08               [12]  257 	inc	r0
      0000DB 86 F0            [24]  258 	mov	b,@r0
                                    259 ;	strndup.c:45: }
      0000DD 85*00 81         [24]  260 	mov	sp,_bp
      0000E0 D0*00            [24]  261 	pop	_bp
      0000E2 22               [24]  262 	ret
                                    263 	.area CSEG    (CODE)
                                    264 	.area CONST   (CODE)
                                    265 	.area XINIT   (CODE)
                                    266 	.area CABS    (ABS,CODE)
