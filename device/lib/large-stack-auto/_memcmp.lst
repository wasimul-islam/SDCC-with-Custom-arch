                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _memcmp
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memcmp
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'memcmp'
                                     91 ;------------------------------------------------------------
                                     92 ;buf2                      Allocated to stack - _bp -5
                                     93 ;count                     Allocated to stack - _bp -7
                                     94 ;buf1                      Allocated to registers r5 r6 r7 
                                     95 ;sloc0                     Allocated to stack - _bp +1
                                     96 ;sloc1                     Allocated to stack - _bp +4
                                     97 ;------------------------------------------------------------
                                     98 ;	_memcmp.c:31: int memcmp (const void * buf1, const void * buf2, size_t count)
                                     99 ;	-----------------------------------------
                                    100 ;	 function memcmp
                                    101 ;	-----------------------------------------
      000000                        102 _memcmp:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 E5 81            [12]  112 	mov	a,sp
      000004 F5*00            [12]  113 	mov	_bp,a
      000006 24 06            [12]  114 	add	a,#0x06
      000008 F5 81            [12]  115 	mov	sp,a
      00000A AD 82            [24]  116 	mov	r5,dpl
      00000C AE 83            [24]  117 	mov	r6,dph
      00000E AF F0            [24]  118 	mov	r7,b
                                    119 ;	_memcmp.c:33: if (!count)
      000010 E5*00            [12]  120 	mov	a,_bp
      000012 24 F9            [12]  121 	add	a,#0xf9
      000014 F8               [12]  122 	mov	r0,a
      000015 E6               [12]  123 	mov	a,@r0
      000016 08               [12]  124 	inc	r0
      000017 46               [12]  125 	orl	a,@r0
      000018 70 06            [24]  126 	jnz	00112$
                                    127 ;	_memcmp.c:34: return(0);
      00001A 90 00 00         [24]  128 	mov	dptr,#0x0000
      00001D 02r00rED         [24]  129 	ljmp	00107$
                                    130 ;	_memcmp.c:36: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
      000020                        131 00112$:
      000020 E5*00            [12]  132 	mov	a,_bp
      000022 24 F9            [12]  133 	add	a,#0xf9
      000024 F8               [12]  134 	mov	r0,a
      000025 86 03            [24]  135 	mov	ar3,@r0
      000027 08               [12]  136 	inc	r0
      000028 86 04            [24]  137 	mov	ar4,@r0
      00002A                        138 00104$:
      00002A 1B               [12]  139 	dec	r3
      00002B BB FF 01         [24]  140 	cjne	r3,#0xff,00127$
      00002E 1C               [12]  141 	dec	r4
      00002F                        142 00127$:
      00002F EB               [12]  143 	mov	a,r3
      000030 4C               [12]  144 	orl	a,r4
      000031 70 03            [24]  145 	jnz	00128$
      000033 02r00rBD         [24]  146 	ljmp	00106$
      000036                        147 00128$:
      000036 C0 03            [24]  148 	push	ar3
      000038 C0 04            [24]  149 	push	ar4
      00003A A8*00            [24]  150 	mov	r0,_bp
      00003C 08               [12]  151 	inc	r0
      00003D A6 05            [24]  152 	mov	@r0,ar5
      00003F 08               [12]  153 	inc	r0
      000040 A6 06            [24]  154 	mov	@r0,ar6
      000042 08               [12]  155 	inc	r0
      000043 A6 07            [24]  156 	mov	@r0,ar7
      000045 A8*00            [24]  157 	mov	r0,_bp
      000047 08               [12]  158 	inc	r0
      000048 86 82            [24]  159 	mov	dpl,@r0
      00004A 08               [12]  160 	inc	r0
      00004B 86 83            [24]  161 	mov	dph,@r0
      00004D 08               [12]  162 	inc	r0
      00004E 86 F0            [24]  163 	mov	b,@r0
      000050 12r00r00         [24]  164 	lcall	__gptrget
      000053 FA               [12]  165 	mov	r2,a
      000054 E5*00            [12]  166 	mov	a,_bp
      000056 24 FB            [12]  167 	add	a,#0xfb
      000058 F8               [12]  168 	mov	r0,a
      000059 E5*00            [12]  169 	mov	a,_bp
      00005B 24 04            [12]  170 	add	a,#0x04
      00005D F9               [12]  171 	mov	r1,a
      00005E E6               [12]  172 	mov	a,@r0
      00005F F7               [12]  173 	mov	@r1,a
      000060 08               [12]  174 	inc	r0
      000061 E6               [12]  175 	mov	a,@r0
      000062 09               [12]  176 	inc	r1
      000063 F7               [12]  177 	mov	@r1,a
      000064 08               [12]  178 	inc	r0
      000065 E6               [12]  179 	mov	a,@r0
      000066 09               [12]  180 	inc	r1
      000067 F7               [12]  181 	mov	@r1,a
      000068 E5*00            [12]  182 	mov	a,_bp
      00006A 24 04            [12]  183 	add	a,#0x04
      00006C F8               [12]  184 	mov	r0,a
      00006D 86 82            [24]  185 	mov	dpl,@r0
      00006F 08               [12]  186 	inc	r0
      000070 86 83            [24]  187 	mov	dph,@r0
      000072 08               [12]  188 	inc	r0
      000073 86 F0            [24]  189 	mov	b,@r0
      000075 12r00r00         [24]  190 	lcall	__gptrget
      000078 FC               [12]  191 	mov	r4,a
      000079 EA               [12]  192 	mov	a,r2
      00007A B5 04 02         [24]  193 	cjne	a,ar4,00129$
      00007D 80 06            [24]  194 	sjmp	00130$
      00007F                        195 00129$:
      00007F D0 04            [24]  196 	pop	ar4
      000081 D0 03            [24]  197 	pop	ar3
      000083 80 38            [24]  198 	sjmp	00106$
      000085                        199 00130$:
                                    200 ;	_memcmp.c:37: buf1 = (char *)buf1 + 1;
      000085 A8*00            [24]  201 	mov	r0,_bp
      000087 08               [12]  202 	inc	r0
      000088 74 01            [12]  203 	mov	a,#0x01
      00008A 26               [12]  204 	add	a,@r0
      00008B FA               [12]  205 	mov	r2,a
      00008C E4               [12]  206 	clr	a
      00008D 08               [12]  207 	inc	r0
      00008E 36               [12]  208 	addc	a,@r0
      00008F FB               [12]  209 	mov	r3,a
      000090 08               [12]  210 	inc	r0
      000091 86 04            [24]  211 	mov	ar4,@r0
      000093 8A 05            [24]  212 	mov	ar5,r2
      000095 8B 06            [24]  213 	mov	ar6,r3
      000097 8C 07            [24]  214 	mov	ar7,r4
                                    215 ;	_memcmp.c:38: buf2 = (char *)buf2 + 1;
      000099 E5*00            [12]  216 	mov	a,_bp
      00009B 24 04            [12]  217 	add	a,#0x04
      00009D F8               [12]  218 	mov	r0,a
      00009E 74 01            [12]  219 	mov	a,#0x01
      0000A0 26               [12]  220 	add	a,@r0
      0000A1 FA               [12]  221 	mov	r2,a
      0000A2 E4               [12]  222 	clr	a
      0000A3 08               [12]  223 	inc	r0
      0000A4 36               [12]  224 	addc	a,@r0
      0000A5 FB               [12]  225 	mov	r3,a
      0000A6 08               [12]  226 	inc	r0
      0000A7 86 04            [24]  227 	mov	ar4,@r0
      0000A9 E5*00            [12]  228 	mov	a,_bp
      0000AB 24 FB            [12]  229 	add	a,#0xfb
      0000AD F8               [12]  230 	mov	r0,a
      0000AE A6 02            [24]  231 	mov	@r0,ar2
      0000B0 08               [12]  232 	inc	r0
      0000B1 A6 03            [24]  233 	mov	@r0,ar3
      0000B3 08               [12]  234 	inc	r0
      0000B4 A6 04            [24]  235 	mov	@r0,ar4
      0000B6 D0 04            [24]  236 	pop	ar4
      0000B8 D0 03            [24]  237 	pop	ar3
      0000BA 02r00r2A         [24]  238 	ljmp	00104$
      0000BD                        239 00106$:
                                    240 ;	_memcmp.c:41: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
      0000BD 8D 82            [24]  241 	mov	dpl,r5
      0000BF 8E 83            [24]  242 	mov	dph,r6
      0000C1 8F F0            [24]  243 	mov	b,r7
      0000C3 12r00r00         [24]  244 	lcall	__gptrget
      0000C6 FD               [12]  245 	mov	r5,a
      0000C7 7F 00            [12]  246 	mov	r7,#0x00
      0000C9 E5*00            [12]  247 	mov	a,_bp
      0000CB 24 FB            [12]  248 	add	a,#0xfb
      0000CD F8               [12]  249 	mov	r0,a
      0000CE 86 03            [24]  250 	mov	ar3,@r0
      0000D0 08               [12]  251 	inc	r0
      0000D1 86 04            [24]  252 	mov	ar4,@r0
      0000D3 08               [12]  253 	inc	r0
      0000D4 86 06            [24]  254 	mov	ar6,@r0
      0000D6 8B 82            [24]  255 	mov	dpl,r3
      0000D8 8C 83            [24]  256 	mov	dph,r4
      0000DA 8E F0            [24]  257 	mov	b,r6
      0000DC 12r00r00         [24]  258 	lcall	__gptrget
      0000DF FB               [12]  259 	mov	r3,a
      0000E0 7E 00            [12]  260 	mov	r6,#0x00
      0000E2 ED               [12]  261 	mov	a,r5
      0000E3 C3               [12]  262 	clr	c
      0000E4 9B               [12]  263 	subb	a,r3
      0000E5 FD               [12]  264 	mov	r5,a
      0000E6 EF               [12]  265 	mov	a,r7
      0000E7 9E               [12]  266 	subb	a,r6
      0000E8 FF               [12]  267 	mov	r7,a
      0000E9 8D 82            [24]  268 	mov	dpl,r5
      0000EB 8F 83            [24]  269 	mov	dph,r7
      0000ED                        270 00107$:
                                    271 ;	_memcmp.c:42: }
      0000ED 85*00 81         [24]  272 	mov	sp,_bp
      0000F0 D0*00            [24]  273 	pop	_bp
      0000F2 22               [24]  274 	ret
                                    275 	.area CSEG    (CODE)
                                    276 	.area CONST   (CODE)
                                    277 	.area XINIT   (CODE)
                                    278 	.area CABS    (ABS,CODE)
