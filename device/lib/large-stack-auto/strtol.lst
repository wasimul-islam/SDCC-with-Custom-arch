                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strtol
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strtoul
                                     12 	.globl _strtol
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'strtol'
                                    106 ;------------------------------------------------------------
                                    107 ;endptr                    Allocated to stack - _bp -5
                                    108 ;base                      Allocated to stack - _bp -7
                                    109 ;nptr                      Allocated to stack - _bp +1
                                    110 ;__1310720007              Allocated to registers 
                                    111 ;__1310720004              Allocated to registers 
                                    112 ;ptr                       Allocated to stack - _bp +4
                                    113 ;rptr                      Allocated to stack - _bp +7
                                    114 ;u                         Allocated to stack - _bp +10
                                    115 ;neg                       Allocated to registers b0 
                                    116 ;__1310720005              Allocated to registers 
                                    117 ;c                         Allocated to registers 
                                    118 ;__1310720008              Allocated to registers 
                                    119 ;c                         Allocated to registers 
                                    120 ;sloc0                     Allocated to stack - _bp +27
                                    121 ;sloc1                     Allocated to stack - _bp +28
                                    122 ;------------------------------------------------------------
                                    123 ;	strtol.c:38: long int strtol(const char *nptr, char **endptr, int base)
                                    124 ;	-----------------------------------------
                                    125 ;	 function strtol
                                    126 ;	-----------------------------------------
      000000                        127 _strtol:
                           000007   128 	ar7 = 0x07
                           000006   129 	ar6 = 0x06
                           000005   130 	ar5 = 0x05
                           000004   131 	ar4 = 0x04
                           000003   132 	ar3 = 0x03
                           000002   133 	ar2 = 0x02
                           000001   134 	ar1 = 0x01
                           000000   135 	ar0 = 0x00
      000000 C0*00            [24]  136 	push	_bp
      000002 85 81*00         [24]  137 	mov	_bp,sp
      000005 C0 82            [24]  138 	push	dpl
      000007 C0 83            [24]  139 	push	dph
      000009 C0 F0            [24]  140 	push	b
      00000B E5 81            [12]  141 	mov	a,sp
      00000D 24 0A            [12]  142 	add	a,#0x0a
      00000F F5 81            [12]  143 	mov	sp,a
                                    144 ;	strtol.c:45: while (isblank (*ptr))
      000011 A8*00            [24]  145 	mov	r0,_bp
      000013 08               [12]  146 	inc	r0
      000014 E5*00            [12]  147 	mov	a,_bp
      000016 24 04            [12]  148 	add	a,#0x04
      000018 F9               [12]  149 	mov	r1,a
      000019 E6               [12]  150 	mov	a,@r0
      00001A F7               [12]  151 	mov	@r1,a
      00001B 08               [12]  152 	inc	r0
      00001C E6               [12]  153 	mov	a,@r0
      00001D 09               [12]  154 	inc	r1
      00001E F7               [12]  155 	mov	@r1,a
      00001F 08               [12]  156 	inc	r0
      000020 E6               [12]  157 	mov	a,@r0
      000021 09               [12]  158 	inc	r1
      000022 F7               [12]  159 	mov	@r1,a
      000023                        160 00101$:
      000023 E5*00            [12]  161 	mov	a,_bp
      000025 24 04            [12]  162 	add	a,#0x04
      000027 F8               [12]  163 	mov	r0,a
      000028 86 82            [24]  164 	mov	dpl,@r0
      00002A 08               [12]  165 	inc	r0
      00002B 86 83            [24]  166 	mov	dph,@r0
      00002D 08               [12]  167 	inc	r0
      00002E 86 F0            [24]  168 	mov	b,@r0
      000030 12r00r00         [24]  169 	lcall	__gptrget
      000033 FF               [12]  170 	mov	r7,a
                                    171 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000034 BF 20 02         [24]  172 	cjne	r7,#0x20,00208$
      000037 80 03            [24]  173 	sjmp	00132$
      000039                        174 00208$:
      000039 BF 09 0D         [24]  175 	cjne	r7,#0x09,00158$
      00003C                        176 00132$:
                                    177 ;	strtol.c:46: ptr++;
      00003C E5*00            [12]  178 	mov	a,_bp
      00003E 24 04            [12]  179 	add	a,#0x04
      000040 F8               [12]  180 	mov	r0,a
      000041 06               [12]  181 	inc	@r0
      000042 B6 00 02         [24]  182 	cjne	@r0,#0x00,00211$
      000045 08               [12]  183 	inc	r0
      000046 06               [12]  184 	inc	@r0
      000047                        185 00211$:
      000047 80 DA            [24]  186 	sjmp	00101$
      000049                        187 00158$:
      000049 E5*00            [12]  188 	mov	a,_bp
      00004B 24 04            [12]  189 	add	a,#0x04
      00004D F8               [12]  190 	mov	r0,a
      00004E 86 07            [24]  191 	mov	ar7,@r0
      000050 08               [12]  192 	inc	r0
      000051 86 06            [24]  193 	mov	ar6,@r0
      000053 08               [12]  194 	inc	r0
      000054 86 05            [24]  195 	mov	ar5,@r0
                                    196 ;	strtol.c:50: if (*ptr == '-')
      000056 E5*00            [12]  197 	mov	a,_bp
      000058 24 04            [12]  198 	add	a,#0x04
      00005A F8               [12]  199 	mov	r0,a
      00005B 86 82            [24]  200 	mov	dpl,@r0
      00005D 08               [12]  201 	inc	r0
      00005E 86 83            [24]  202 	mov	dph,@r0
      000060 08               [12]  203 	inc	r0
      000061 86 F0            [24]  204 	mov	b,@r0
      000063 12r00r00         [24]  205 	lcall	__gptrget
      000066 FC               [12]  206 	mov	r4,a
      000067 BC 2D 14         [24]  207 	cjne	r4,#0x2d,00105$
                                    208 ;	strtol.c:52: neg = true;
                                    209 ;	assignBit
      00006A D2*00            [12]  210 	setb	b0
                                    211 ;	strtol.c:53: ptr++;
      00006C E5*00            [12]  212 	mov	a,_bp
      00006E 24 04            [12]  213 	add	a,#0x04
      000070 F8               [12]  214 	mov	r0,a
      000071 74 01            [12]  215 	mov	a,#0x01
      000073 26               [12]  216 	add	a,@r0
      000074 FF               [12]  217 	mov	r7,a
      000075 E4               [12]  218 	clr	a
      000076 08               [12]  219 	inc	r0
      000077 36               [12]  220 	addc	a,@r0
      000078 FE               [12]  221 	mov	r6,a
      000079 08               [12]  222 	inc	r0
      00007A 86 05            [24]  223 	mov	ar5,@r0
      00007C 80 02            [24]  224 	sjmp	00106$
      00007E                        225 00105$:
                                    226 ;	strtol.c:56: neg = false;
                                    227 ;	assignBit
      00007E C2*00            [12]  228 	clr	b0
      000080                        229 00106$:
                                    230 ;	strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
      000080 30*00 56         [24]  231 	jnb	b0,00110$
      000083 8F 82            [24]  232 	mov	dpl,r7
      000085 8E 83            [24]  233 	mov	dph,r6
      000087 8D F0            [24]  234 	mov	b,r5
      000089 12r00r00         [24]  235 	lcall	__gptrget
      00008C FC               [12]  236 	mov	r4,a
      00008D FB               [12]  237 	mov	r3,a
                                    238 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      00008E BB 20 02         [24]  239 	cjne	r3,#0x20,00215$
      000091 80 0D            [24]  240 	sjmp	00109$
      000093                        241 00215$:
      000093 BB 09 02         [24]  242 	cjne	r3,#0x09,00216$
      000096 80 08            [24]  243 	sjmp	00109$
      000098                        244 00216$:
                                    245 ;	strtol.c:59: if (neg && (isblank (*ptr) || *ptr == '-' || *ptr == '+'))
      000098 BC 2D 02         [24]  246 	cjne	r4,#0x2d,00217$
      00009B 80 03            [24]  247 	sjmp	00109$
      00009D                        248 00217$:
      00009D BC 2B 39         [24]  249 	cjne	r4,#0x2b,00110$
      0000A0                        250 00109$:
                                    251 ;	strtol.c:61: if (endptr)
      0000A0 E5*00            [12]  252 	mov	a,_bp
      0000A2 24 FB            [12]  253 	add	a,#0xfb
      0000A4 F8               [12]  254 	mov	r0,a
      0000A5 E6               [12]  255 	mov	a,@r0
      0000A6 08               [12]  256 	inc	r0
      0000A7 46               [12]  257 	orl	a,@r0
      0000A8 60 26            [24]  258 	jz	00108$
                                    259 ;	strtol.c:62: *endptr = nptr;
      0000AA E5*00            [12]  260 	mov	a,_bp
      0000AC 24 FB            [12]  261 	add	a,#0xfb
      0000AE F8               [12]  262 	mov	r0,a
      0000AF 86 02            [24]  263 	mov	ar2,@r0
      0000B1 08               [12]  264 	inc	r0
      0000B2 86 03            [24]  265 	mov	ar3,@r0
      0000B4 08               [12]  266 	inc	r0
      0000B5 86 04            [24]  267 	mov	ar4,@r0
      0000B7 8A 82            [24]  268 	mov	dpl,r2
      0000B9 8B 83            [24]  269 	mov	dph,r3
      0000BB 8C F0            [24]  270 	mov	b,r4
      0000BD A8*00            [24]  271 	mov	r0,_bp
      0000BF 08               [12]  272 	inc	r0
      0000C0 E6               [12]  273 	mov	a,@r0
      0000C1 12r00r00         [24]  274 	lcall	__gptrput
      0000C4 A3               [24]  275 	inc	dptr
      0000C5 08               [12]  276 	inc	r0
      0000C6 E6               [12]  277 	mov	a,@r0
      0000C7 12r00r00         [24]  278 	lcall	__gptrput
      0000CA A3               [24]  279 	inc	dptr
      0000CB 08               [12]  280 	inc	r0
      0000CC E6               [12]  281 	mov	a,@r0
      0000CD 12r00r00         [24]  282 	lcall	__gptrput
      0000D0                        283 00108$:
                                    284 ;	strtol.c:63: return (0);
      0000D0 90 00 00         [24]  285 	mov	dptr,#(0x00&0x00ff)
      0000D3 E4               [12]  286 	clr	a
      0000D4 F5 F0            [12]  287 	mov	b,a
      0000D6 02r02r37         [24]  288 	ljmp	00129$
      0000D9                        289 00110$:
                                    290 ;	strtol.c:66: u = strtoul(ptr, &rptr, base);
      0000D9 E5*00            [12]  291 	mov	a,_bp
      0000DB 24 07            [12]  292 	add	a,#0x07
      0000DD FC               [12]  293 	mov	r4,a
      0000DE 7B 00            [12]  294 	mov	r3,#0x00
      0000E0 7A 40            [12]  295 	mov	r2,#0x40
      0000E2 C0 07            [24]  296 	push	ar7
      0000E4 C0 06            [24]  297 	push	ar6
      0000E6 C0 05            [24]  298 	push	ar5
      0000E8 C0*00            [24]  299 	push	bits
      0000EA E5*00            [12]  300 	mov	a,_bp
      0000EC 24 F9            [12]  301 	add	a,#0xf9
      0000EE F8               [12]  302 	mov	r0,a
      0000EF E6               [12]  303 	mov	a,@r0
      0000F0 C0 E0            [24]  304 	push	acc
      0000F2 08               [12]  305 	inc	r0
      0000F3 E6               [12]  306 	mov	a,@r0
      0000F4 C0 E0            [24]  307 	push	acc
      0000F6 C0 04            [24]  308 	push	ar4
      0000F8 C0 03            [24]  309 	push	ar3
      0000FA C0 02            [24]  310 	push	ar2
      0000FC 8F 82            [24]  311 	mov	dpl,r7
      0000FE 8E 83            [24]  312 	mov	dph,r6
      000100 8D F0            [24]  313 	mov	b,r5
      000102 12r00r00         [24]  314 	lcall	_strtoul
      000105 C8               [12]  315 	xch	a,r0
      000106 E5*00            [12]  316 	mov	a,_bp
      000108 24 0A            [12]  317 	add	a,#0x0a
      00010A C8               [12]  318 	xch	a,r0
      00010B A6 82            [24]  319 	mov	@r0,dpl
      00010D 08               [12]  320 	inc	r0
      00010E A6 83            [24]  321 	mov	@r0,dph
      000110 08               [12]  322 	inc	r0
      000111 A6 F0            [24]  323 	mov	@r0,b
      000113 08               [12]  324 	inc	r0
      000114 F6               [12]  325 	mov	@r0,a
      000115 E5 81            [12]  326 	mov	a,sp
      000117 24 FB            [12]  327 	add	a,#0xfb
      000119 F5 81            [12]  328 	mov	sp,a
      00011B D0*00            [24]  329 	pop	bits
      00011D D0 05            [24]  330 	pop	ar5
      00011F D0 06            [24]  331 	pop	ar6
      000121 D0 07            [24]  332 	pop	ar7
      000123 E5*00            [12]  333 	mov	a,_bp
      000125 24 0A            [12]  334 	add	a,#0x0a
                                    335 ;	strtol.c:69: if (rptr == ptr)
      000127 E5*00            [12]  336 	mov	a,_bp
      000129 24 07            [12]  337 	add	a,#0x07
      00012B F8               [12]  338 	mov	r0,a
      00012C C0 07            [24]  339 	push	ar7
      00012E C0 06            [24]  340 	push	ar6
      000130 C0 05            [24]  341 	push	ar5
      000132 86 82            [24]  342 	mov	dpl,@r0
      000134 08               [12]  343 	inc	r0
      000135 86 83            [24]  344 	mov	dph,@r0
      000137 08               [12]  345 	inc	r0
      000138 86 F0            [24]  346 	mov	b,@r0
      00013A 12r00r00         [24]  347 	lcall	___gptr_cmp
      00013D 15 81            [12]  348 	dec	sp
      00013F 15 81            [12]  349 	dec	sp
      000141 15 81            [12]  350 	dec	sp
      000143 70 39            [24]  351 	jnz	00117$
                                    352 ;	strtol.c:71: if (endptr)
      000145 E5*00            [12]  353 	mov	a,_bp
      000147 24 FB            [12]  354 	add	a,#0xfb
      000149 F8               [12]  355 	mov	r0,a
      00014A E6               [12]  356 	mov	a,@r0
      00014B 08               [12]  357 	inc	r0
      00014C 46               [12]  358 	orl	a,@r0
      00014D 60 26            [24]  359 	jz	00115$
                                    360 ;	strtol.c:72: *endptr = nptr;
      00014F E5*00            [12]  361 	mov	a,_bp
      000151 24 FB            [12]  362 	add	a,#0xfb
      000153 F8               [12]  363 	mov	r0,a
      000154 86 07            [24]  364 	mov	ar7,@r0
      000156 08               [12]  365 	inc	r0
      000157 86 06            [24]  366 	mov	ar6,@r0
      000159 08               [12]  367 	inc	r0
      00015A 86 05            [24]  368 	mov	ar5,@r0
      00015C 8F 82            [24]  369 	mov	dpl,r7
      00015E 8E 83            [24]  370 	mov	dph,r6
      000160 8D F0            [24]  371 	mov	b,r5
      000162 A8*00            [24]  372 	mov	r0,_bp
      000164 08               [12]  373 	inc	r0
      000165 E6               [12]  374 	mov	a,@r0
      000166 12r00r00         [24]  375 	lcall	__gptrput
      000169 A3               [24]  376 	inc	dptr
      00016A 08               [12]  377 	inc	r0
      00016B E6               [12]  378 	mov	a,@r0
      00016C 12r00r00         [24]  379 	lcall	__gptrput
      00016F A3               [24]  380 	inc	dptr
      000170 08               [12]  381 	inc	r0
      000171 E6               [12]  382 	mov	a,@r0
      000172 12r00r00         [24]  383 	lcall	__gptrput
      000175                        384 00115$:
                                    385 ;	strtol.c:73: return (0);
      000175 90 00 00         [24]  386 	mov	dptr,#(0x00&0x00ff)
      000178 E4               [12]  387 	clr	a
      000179 F5 F0            [12]  388 	mov	b,a
      00017B 02r02r37         [24]  389 	ljmp	00129$
      00017E                        390 00117$:
                                    391 ;	strtol.c:76: if (endptr)
      00017E E5*00            [12]  392 	mov	a,_bp
      000180 24 FB            [12]  393 	add	a,#0xfb
      000182 F8               [12]  394 	mov	r0,a
      000183 E6               [12]  395 	mov	a,@r0
      000184 08               [12]  396 	inc	r0
      000185 46               [12]  397 	orl	a,@r0
      000186 60 28            [24]  398 	jz	00119$
                                    399 ;	strtol.c:77: *endptr = rptr;
      000188 E5*00            [12]  400 	mov	a,_bp
      00018A 24 FB            [12]  401 	add	a,#0xfb
      00018C F8               [12]  402 	mov	r0,a
      00018D 86 05            [24]  403 	mov	ar5,@r0
      00018F 08               [12]  404 	inc	r0
      000190 86 06            [24]  405 	mov	ar6,@r0
      000192 08               [12]  406 	inc	r0
      000193 86 07            [24]  407 	mov	ar7,@r0
      000195 8D 82            [24]  408 	mov	dpl,r5
      000197 8E 83            [24]  409 	mov	dph,r6
      000199 8F F0            [24]  410 	mov	b,r7
      00019B E5*00            [12]  411 	mov	a,_bp
      00019D 24 07            [12]  412 	add	a,#0x07
      00019F F8               [12]  413 	mov	r0,a
      0001A0 E6               [12]  414 	mov	a,@r0
      0001A1 12r00r00         [24]  415 	lcall	__gptrput
      0001A4 A3               [24]  416 	inc	dptr
      0001A5 08               [12]  417 	inc	r0
      0001A6 E6               [12]  418 	mov	a,@r0
      0001A7 12r00r00         [24]  419 	lcall	__gptrput
      0001AA A3               [24]  420 	inc	dptr
      0001AB 08               [12]  421 	inc	r0
      0001AC E6               [12]  422 	mov	a,@r0
      0001AD 12r00r00         [24]  423 	lcall	__gptrput
      0001B0                        424 00119$:
                                    425 ;	strtol.c:80: if (!neg && u > LONG_MAX)
      0001B0 20*00 2A         [24]  426 	jb	b0,00124$
      0001B3 E5*00            [12]  427 	mov	a,_bp
      0001B5 24 0A            [12]  428 	add	a,#0x0a
      0001B7 F8               [12]  429 	mov	r0,a
      0001B8 C3               [12]  430 	clr	c
      0001B9 74 FF            [12]  431 	mov	a,#0xff
      0001BB 96               [12]  432 	subb	a,@r0
      0001BC 74 FF            [12]  433 	mov	a,#0xff
      0001BE 08               [12]  434 	inc	r0
      0001BF 96               [12]  435 	subb	a,@r0
      0001C0 74 FF            [12]  436 	mov	a,#0xff
      0001C2 08               [12]  437 	inc	r0
      0001C3 96               [12]  438 	subb	a,@r0
      0001C4 74 7F            [12]  439 	mov	a,#0x7f
      0001C6 08               [12]  440 	inc	r0
      0001C7 96               [12]  441 	subb	a,@r0
      0001C8 50 13            [24]  442 	jnc	00124$
                                    443 ;	strtol.c:82: errno = ERANGE;
      0001CA 90r00r00         [24]  444 	mov	dptr,#_errno
      0001CD 74 22            [12]  445 	mov	a,#0x22
      0001CF F0               [24]  446 	movx	@dptr,a
      0001D0 E4               [12]  447 	clr	a
      0001D1 A3               [24]  448 	inc	dptr
      0001D2 F0               [24]  449 	movx	@dptr,a
                                    450 ;	strtol.c:83: return (LONG_MAX);
      0001D3 90 FF FF         [24]  451 	mov	dptr,#0xffff
      0001D6 75 F0 FF         [24]  452 	mov	b,#0xff
      0001D9 74 7F            [12]  453 	mov	a,#0x7f
      0001DB 80 5A            [24]  454 	sjmp	00129$
      0001DD                        455 00124$:
                                    456 ;	strtol.c:85: else if (neg && u > -LONG_MIN)
      0001DD 30*00 26         [24]  457 	jnb	b0,00125$
      0001E0 E5*00            [12]  458 	mov	a,_bp
      0001E2 24 0A            [12]  459 	add	a,#0x0a
      0001E4 F8               [12]  460 	mov	r0,a
      0001E5 C3               [12]  461 	clr	c
      0001E6 E4               [12]  462 	clr	a
      0001E7 96               [12]  463 	subb	a,@r0
      0001E8 E4               [12]  464 	clr	a
      0001E9 08               [12]  465 	inc	r0
      0001EA 96               [12]  466 	subb	a,@r0
      0001EB E4               [12]  467 	clr	a
      0001EC 08               [12]  468 	inc	r0
      0001ED 96               [12]  469 	subb	a,@r0
      0001EE 74 80            [12]  470 	mov	a,#0x80
      0001F0 08               [12]  471 	inc	r0
      0001F1 96               [12]  472 	subb	a,@r0
      0001F2 50 12            [24]  473 	jnc	00125$
                                    474 ;	strtol.c:87: errno = ERANGE;
      0001F4 90r00r00         [24]  475 	mov	dptr,#_errno
      0001F7 74 22            [12]  476 	mov	a,#0x22
      0001F9 F0               [24]  477 	movx	@dptr,a
      0001FA E4               [12]  478 	clr	a
      0001FB A3               [24]  479 	inc	dptr
      0001FC F0               [24]  480 	movx	@dptr,a
                                    481 ;	strtol.c:88: return (LONG_MIN);
      0001FD 90 00 00         [24]  482 	mov	dptr,#0x0000
      000200 F5 F0            [12]  483 	mov	b,a
      000202 74 80            [12]  484 	mov	a,#0x80
      000204 80 31            [24]  485 	sjmp	00129$
      000206                        486 00125$:
                                    487 ;	strtol.c:91: return (neg ? -u : u);
      000206 30*00 17         [24]  488 	jnb	b0,00137$
      000209 E5*00            [12]  489 	mov	a,_bp
      00020B 24 0A            [12]  490 	add	a,#0x0a
      00020D F8               [12]  491 	mov	r0,a
      00020E C3               [12]  492 	clr	c
      00020F E4               [12]  493 	clr	a
      000210 96               [12]  494 	subb	a,@r0
      000211 FC               [12]  495 	mov	r4,a
      000212 08               [12]  496 	inc	r0
      000213 E4               [12]  497 	clr	a
      000214 96               [12]  498 	subb	a,@r0
      000215 FD               [12]  499 	mov	r5,a
      000216 08               [12]  500 	inc	r0
      000217 E4               [12]  501 	clr	a
      000218 96               [12]  502 	subb	a,@r0
      000219 FE               [12]  503 	mov	r6,a
      00021A 08               [12]  504 	inc	r0
      00021B E4               [12]  505 	clr	a
      00021C 96               [12]  506 	subb	a,@r0
      00021D FF               [12]  507 	mov	r7,a
      00021E 80 10            [24]  508 	sjmp	00138$
      000220                        509 00137$:
      000220 E5*00            [12]  510 	mov	a,_bp
      000222 24 0A            [12]  511 	add	a,#0x0a
      000224 F8               [12]  512 	mov	r0,a
      000225 86 04            [24]  513 	mov	ar4,@r0
      000227 08               [12]  514 	inc	r0
      000228 86 05            [24]  515 	mov	ar5,@r0
      00022A 08               [12]  516 	inc	r0
      00022B 86 06            [24]  517 	mov	ar6,@r0
      00022D 08               [12]  518 	inc	r0
      00022E 86 07            [24]  519 	mov	ar7,@r0
      000230                        520 00138$:
      000230 8C 82            [24]  521 	mov	dpl,r4
      000232 8D 83            [24]  522 	mov	dph,r5
      000234 8E F0            [24]  523 	mov	b,r6
      000236 EF               [12]  524 	mov	a,r7
      000237                        525 00129$:
                                    526 ;	strtol.c:92: }
      000237 85*00 81         [24]  527 	mov	sp,_bp
      00023A D0*00            [24]  528 	pop	_bp
      00023C 22               [24]  529 	ret
                                    530 	.area CSEG    (CODE)
                                    531 	.area CONST   (CODE)
                                    532 	.area XINIT   (CODE)
                                    533 	.area CABS    (ABS,CODE)
