                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module free
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _free
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'free'
                                     91 ;------------------------------------------------------------
                                     92 ;ptr                       Allocated to stack - _bp +1
                                     93 ;h                         Allocated to registers r3 r4 
                                     94 ;next_free                 Allocated to registers r2 r7 
                                     95 ;prev_free                 Allocated to stack - _bp +6
                                     96 ;f                         Allocated to registers r5 r6 
                                     97 ;sloc0                     Allocated to stack - _bp +4
                                     98 ;------------------------------------------------------------
                                     99 ;	free.c:50: void free(void *ptr)
                                    100 ;	-----------------------------------------
                                    101 ;	 function free
                                    102 ;	-----------------------------------------
      000000                        103 _free:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 85 81*00         [24]  113 	mov	_bp,sp
      000005 C0 82            [24]  114 	push	dpl
      000007 C0 83            [24]  115 	push	dph
      000009 C0 F0            [24]  116 	push	b
      00000B E5 81            [12]  117 	mov	a,sp
      00000D 24 04            [12]  118 	add	a,#0x04
      00000F F5 81            [12]  119 	mov	sp,a
                                    120 ;	free.c:55: if(!ptr)
      000011 A8*00            [24]  121 	mov	r0,_bp
      000013 08               [12]  122 	inc	r0
      000014 E6               [12]  123 	mov	a,@r0
      000015 08               [12]  124 	inc	r0
      000016 46               [12]  125 	orl	a,@r0
      000017 70 03            [24]  126 	jnz	00102$
                                    127 ;	free.c:56: return;
      000019 02r01r45         [24]  128 	ljmp	00113$
      00001C                        129 00102$:
                                    130 ;	free.c:58: prev_free = 0;
      00001C E5*00            [12]  131 	mov	a,_bp
      00001E 24 06            [12]  132 	add	a,#0x06
      000020 F8               [12]  133 	mov	r0,a
      000021 E4               [12]  134 	clr	a
      000022 F6               [12]  135 	mov	@r0,a
      000023 08               [12]  136 	inc	r0
      000024 F6               [12]  137 	mov	@r0,a
                                    138 ;	free.c:59: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h && h < ptr; prev_free = h, f = &(h->next_free), h = h->next_free); // Find adjacent blocks in free list
      000025 90r00r00         [24]  139 	mov	dptr,#___sdcc_heap_free
      000028 E0               [24]  140 	movx	a,@dptr
      000029 FA               [12]  141 	mov	r2,a
      00002A A3               [24]  142 	inc	dptr
      00002B E0               [24]  143 	movx	a,@dptr
      00002C FF               [12]  144 	mov	r7,a
      00002D 7Dr00            [12]  145 	mov	r5,#___sdcc_heap_free
      00002F 7Es00            [12]  146 	mov	r6,#(___sdcc_heap_free >> 8)
      000031                        147 00111$:
      000031 EA               [12]  148 	mov	a,r2
      000032 4F               [12]  149 	orl	a,r7
      000033 60 37            [24]  150 	jz	00103$
      000035 C0 05            [24]  151 	push	ar5
      000037 C0 06            [24]  152 	push	ar6
      000039 A8*00            [24]  153 	mov	r0,_bp
      00003B 08               [12]  154 	inc	r0
      00003C 86 05            [24]  155 	mov	ar5,@r0
      00003E 08               [12]  156 	inc	r0
      00003F 86 06            [24]  157 	mov	ar6,@r0
      000041 C3               [12]  158 	clr	c
      000042 EA               [12]  159 	mov	a,r2
      000043 9D               [12]  160 	subb	a,r5
      000044 EF               [12]  161 	mov	a,r7
      000045 9E               [12]  162 	subb	a,r6
      000046 D0 06            [24]  163 	pop	ar6
      000048 D0 05            [24]  164 	pop	ar5
      00004A 50 20            [24]  165 	jnc	00103$
      00004C E5*00            [12]  166 	mov	a,_bp
      00004E 24 06            [12]  167 	add	a,#0x06
      000050 F8               [12]  168 	mov	r0,a
      000051 A6 02            [24]  169 	mov	@r0,ar2
      000053 08               [12]  170 	inc	r0
      000054 A6 07            [24]  171 	mov	@r0,ar7
      000056 74 02            [12]  172 	mov	a,#0x02
      000058 2A               [12]  173 	add	a,r2
      000059 FB               [12]  174 	mov	r3,a
      00005A E4               [12]  175 	clr	a
      00005B 3F               [12]  176 	addc	a,r7
      00005C FC               [12]  177 	mov	r4,a
      00005D 8B 05            [24]  178 	mov	ar5,r3
      00005F 8C 06            [24]  179 	mov	ar6,r4
      000061 8B 82            [24]  180 	mov	dpl,r3
      000063 8C 83            [24]  181 	mov	dph,r4
      000065 E0               [24]  182 	movx	a,@dptr
      000066 FA               [12]  183 	mov	r2,a
      000067 A3               [24]  184 	inc	dptr
      000068 E0               [24]  185 	movx	a,@dptr
      000069 FF               [12]  186 	mov	r7,a
      00006A 80 C5            [24]  187 	sjmp	00111$
      00006C                        188 00103$:
                                    189 ;	free.c:60: next_free = h;
                                    190 ;	free.c:62: h = (void HEAPSPACE *)((char HEAPSPACE *)(ptr) - offsetof(struct header, next_free));
      00006C A8*00            [24]  191 	mov	r0,_bp
      00006E 08               [12]  192 	inc	r0
      00006F 86 03            [24]  193 	mov	ar3,@r0
      000071 08               [12]  194 	inc	r0
      000072 86 04            [24]  195 	mov	ar4,@r0
      000074 EB               [12]  196 	mov	a,r3
      000075 24 FE            [12]  197 	add	a,#0xfe
      000077 FB               [12]  198 	mov	r3,a
      000078 EC               [12]  199 	mov	a,r4
      000079 34 FF            [12]  200 	addc	a,#0xff
      00007B FC               [12]  201 	mov	r4,a
                                    202 ;	free.c:65: h->next_free = next_free;
      00007C E5*00            [12]  203 	mov	a,_bp
      00007E 24 04            [12]  204 	add	a,#0x04
      000080 F8               [12]  205 	mov	r0,a
      000081 74 02            [12]  206 	mov	a,#0x02
      000083 2B               [12]  207 	add	a,r3
      000084 F6               [12]  208 	mov	@r0,a
      000085 E4               [12]  209 	clr	a
      000086 3C               [12]  210 	addc	a,r4
      000087 08               [12]  211 	inc	r0
      000088 F6               [12]  212 	mov	@r0,a
      000089 E5*00            [12]  213 	mov	a,_bp
      00008B 24 04            [12]  214 	add	a,#0x04
      00008D F8               [12]  215 	mov	r0,a
      00008E 86 82            [24]  216 	mov	dpl,@r0
      000090 08               [12]  217 	inc	r0
      000091 86 83            [24]  218 	mov	dph,@r0
      000093 EA               [12]  219 	mov	a,r2
      000094 F0               [24]  220 	movx	@dptr,a
      000095 EF               [12]  221 	mov	a,r7
      000096 A3               [24]  222 	inc	dptr
      000097 F0               [24]  223 	movx	@dptr,a
                                    224 ;	free.c:66: *f = h;
      000098 8D 82            [24]  225 	mov	dpl,r5
      00009A 8E 83            [24]  226 	mov	dph,r6
      00009C EB               [12]  227 	mov	a,r3
      00009D F0               [24]  228 	movx	@dptr,a
      00009E EC               [12]  229 	mov	a,r4
      00009F A3               [24]  230 	inc	dptr
      0000A0 F0               [24]  231 	movx	@dptr,a
                                    232 ;	free.c:68: if(next_free == h->next) // Merge with next block
      0000A1 8B 82            [24]  233 	mov	dpl,r3
      0000A3 8C 83            [24]  234 	mov	dph,r4
      0000A5 E0               [24]  235 	movx	a,@dptr
      0000A6 FD               [12]  236 	mov	r5,a
      0000A7 A3               [24]  237 	inc	dptr
      0000A8 E0               [24]  238 	movx	a,@dptr
      0000A9 FE               [12]  239 	mov	r6,a
      0000AA EA               [12]  240 	mov	a,r2
      0000AB B5 05 39         [24]  241 	cjne	a,ar5,00105$
      0000AE EF               [12]  242 	mov	a,r7
      0000AF B5 06 35         [24]  243 	cjne	a,ar6,00105$
                                    244 ;	free.c:70: h->next_free = h->next->next_free;
      0000B2 8D 82            [24]  245 	mov	dpl,r5
      0000B4 8E 83            [24]  246 	mov	dph,r6
      0000B6 A3               [24]  247 	inc	dptr
      0000B7 A3               [24]  248 	inc	dptr
      0000B8 E0               [24]  249 	movx	a,@dptr
      0000B9 FE               [12]  250 	mov	r6,a
      0000BA A3               [24]  251 	inc	dptr
      0000BB E0               [24]  252 	movx	a,@dptr
      0000BC FF               [12]  253 	mov	r7,a
      0000BD E5*00            [12]  254 	mov	a,_bp
      0000BF 24 04            [12]  255 	add	a,#0x04
      0000C1 F8               [12]  256 	mov	r0,a
      0000C2 86 82            [24]  257 	mov	dpl,@r0
      0000C4 08               [12]  258 	inc	r0
      0000C5 86 83            [24]  259 	mov	dph,@r0
      0000C7 EE               [12]  260 	mov	a,r6
      0000C8 F0               [24]  261 	movx	@dptr,a
      0000C9 EF               [12]  262 	mov	a,r7
      0000CA A3               [24]  263 	inc	dptr
      0000CB F0               [24]  264 	movx	@dptr,a
                                    265 ;	free.c:71: h->next = h->next->next;
      0000CC 8B 82            [24]  266 	mov	dpl,r3
      0000CE 8C 83            [24]  267 	mov	dph,r4
      0000D0 E0               [24]  268 	movx	a,@dptr
      0000D1 FE               [12]  269 	mov	r6,a
      0000D2 A3               [24]  270 	inc	dptr
      0000D3 E0               [24]  271 	movx	a,@dptr
      0000D4 FF               [12]  272 	mov	r7,a
      0000D5 8E 82            [24]  273 	mov	dpl,r6
      0000D7 8F 83            [24]  274 	mov	dph,r7
      0000D9 E0               [24]  275 	movx	a,@dptr
      0000DA FE               [12]  276 	mov	r6,a
      0000DB A3               [24]  277 	inc	dptr
      0000DC E0               [24]  278 	movx	a,@dptr
      0000DD FF               [12]  279 	mov	r7,a
      0000DE 8B 82            [24]  280 	mov	dpl,r3
      0000E0 8C 83            [24]  281 	mov	dph,r4
      0000E2 EE               [12]  282 	mov	a,r6
      0000E3 F0               [24]  283 	movx	@dptr,a
      0000E4 EF               [12]  284 	mov	a,r7
      0000E5 A3               [24]  285 	inc	dptr
      0000E6 F0               [24]  286 	movx	@dptr,a
      0000E7                        287 00105$:
                                    288 ;	free.c:74: if (prev_free && prev_free->next == h) // Merge with previous block
      0000E7 E5*00            [12]  289 	mov	a,_bp
      0000E9 24 06            [12]  290 	add	a,#0x06
      0000EB F8               [12]  291 	mov	r0,a
      0000EC E6               [12]  292 	mov	a,@r0
      0000ED 08               [12]  293 	inc	r0
      0000EE 46               [12]  294 	orl	a,@r0
      0000EF 60 54            [24]  295 	jz	00113$
      0000F1 E5*00            [12]  296 	mov	a,_bp
      0000F3 24 06            [12]  297 	add	a,#0x06
      0000F5 F8               [12]  298 	mov	r0,a
      0000F6 86 82            [24]  299 	mov	dpl,@r0
      0000F8 08               [12]  300 	inc	r0
      0000F9 86 83            [24]  301 	mov	dph,@r0
      0000FB E0               [24]  302 	movx	a,@dptr
      0000FC FE               [12]  303 	mov	r6,a
      0000FD A3               [24]  304 	inc	dptr
      0000FE E0               [24]  305 	movx	a,@dptr
      0000FF FF               [12]  306 	mov	r7,a
      000100 EE               [12]  307 	mov	a,r6
      000101 B5 03 41         [24]  308 	cjne	a,ar3,00113$
      000104 EF               [12]  309 	mov	a,r7
      000105 B5 04 3D         [24]  310 	cjne	a,ar4,00113$
                                    311 ;	free.c:76: prev_free->next = h->next;
      000108 8B 82            [24]  312 	mov	dpl,r3
      00010A 8C 83            [24]  313 	mov	dph,r4
      00010C E0               [24]  314 	movx	a,@dptr
      00010D FB               [12]  315 	mov	r3,a
      00010E A3               [24]  316 	inc	dptr
      00010F E0               [24]  317 	movx	a,@dptr
      000110 FC               [12]  318 	mov	r4,a
      000111 E5*00            [12]  319 	mov	a,_bp
      000113 24 06            [12]  320 	add	a,#0x06
      000115 F8               [12]  321 	mov	r0,a
      000116 86 82            [24]  322 	mov	dpl,@r0
      000118 08               [12]  323 	inc	r0
      000119 86 83            [24]  324 	mov	dph,@r0
      00011B EB               [12]  325 	mov	a,r3
      00011C F0               [24]  326 	movx	@dptr,a
      00011D EC               [12]  327 	mov	a,r4
      00011E A3               [24]  328 	inc	dptr
      00011F F0               [24]  329 	movx	@dptr,a
                                    330 ;	free.c:77: prev_free->next_free = h->next_free;
      000120 E5*00            [12]  331 	mov	a,_bp
      000122 24 06            [12]  332 	add	a,#0x06
      000124 F8               [12]  333 	mov	r0,a
      000125 74 02            [12]  334 	mov	a,#0x02
      000127 26               [12]  335 	add	a,@r0
      000128 FE               [12]  336 	mov	r6,a
      000129 E4               [12]  337 	clr	a
      00012A 08               [12]  338 	inc	r0
      00012B 36               [12]  339 	addc	a,@r0
      00012C FF               [12]  340 	mov	r7,a
      00012D E5*00            [12]  341 	mov	a,_bp
      00012F 24 04            [12]  342 	add	a,#0x04
      000131 F8               [12]  343 	mov	r0,a
      000132 86 82            [24]  344 	mov	dpl,@r0
      000134 08               [12]  345 	inc	r0
      000135 86 83            [24]  346 	mov	dph,@r0
      000137 E0               [24]  347 	movx	a,@dptr
      000138 FC               [12]  348 	mov	r4,a
      000139 A3               [24]  349 	inc	dptr
      00013A E0               [24]  350 	movx	a,@dptr
      00013B FD               [12]  351 	mov	r5,a
      00013C 8E 82            [24]  352 	mov	dpl,r6
      00013E 8F 83            [24]  353 	mov	dph,r7
      000140 EC               [12]  354 	mov	a,r4
      000141 F0               [24]  355 	movx	@dptr,a
      000142 ED               [12]  356 	mov	a,r5
      000143 A3               [24]  357 	inc	dptr
      000144 F0               [24]  358 	movx	@dptr,a
      000145                        359 00113$:
                                    360 ;	free.c:79: }
      000145 85*00 81         [24]  361 	mov	sp,_bp
      000148 D0*00            [24]  362 	pop	_bp
      00014A 22               [24]  363 	ret
                                    364 	.area CSEG    (CODE)
                                    365 	.area CONST   (CODE)
                                    366 	.area XINIT   (CODE)
                                    367 	.area CABS    (ABS,CODE)
