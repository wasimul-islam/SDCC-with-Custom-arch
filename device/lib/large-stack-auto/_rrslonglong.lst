                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _rrslonglong
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __rrslonglong
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_rrslonglong'
                                     91 ;------------------------------------------------------------
                                     92 ;s                         Allocated to stack - _bp -3
                                     93 ;l                         Allocated to stack - _bp +1
                                     94 ;top                       Allocated to stack - _bp +16
                                     95 ;middle                    Allocated to stack - _bp +19
                                     96 ;bottom                    Allocated to stack - _bp +22
                                     97 ;b                         Allocated to stack - _bp +25
                                     98 ;sloc0                     Allocated to stack - _bp +9
                                     99 ;sloc1                     Allocated to stack - _bp +12
                                    100 ;------------------------------------------------------------
                                    101 ;	_rrslonglong.c:41: long long _rrslonglong(long long l, char s) __SDCC_NONBANKED
                                    102 ;	-----------------------------------------
                                    103 ;	 function _rrslonglong
                                    104 ;	-----------------------------------------
      000000                        105 __rrslonglong:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D C0 04            [24]  120 	push	ar4
      00000F C0 05            [24]  121 	push	ar5
      000011 C0 06            [24]  122 	push	ar6
      000013 C0 07            [24]  123 	push	ar7
      000015 E5 81            [12]  124 	mov	a,sp
      000017 24 13            [12]  125 	add	a,#0x13
      000019 F5 81            [12]  126 	mov	sp,a
                                    127 ;	_rrslonglong.c:43: int32_t *top = (uint32_t *)((char *)(&l) + 0);
      00001B AF*00            [24]  128 	mov	r7,_bp
      00001D 0F               [12]  129 	inc	r7
      00001E 8F 04            [24]  130 	mov	ar4,r7
      000020 7D 00            [12]  131 	mov	r5,#0x00
      000022 7E 40            [12]  132 	mov	r6,#0x40
      000024 E5*00            [12]  133 	mov	a,_bp
      000026 24 10            [12]  134 	add	a,#0x10
      000028 F8               [12]  135 	mov	r0,a
      000029 A6 04            [24]  136 	mov	@r0,ar4
      00002B 08               [12]  137 	inc	r0
      00002C A6 05            [24]  138 	mov	@r0,ar5
      00002E 08               [12]  139 	inc	r0
      00002F A6 06            [24]  140 	mov	@r0,ar6
                                    141 ;	_rrslonglong.c:44: uint32_t *middle = (uint16_t *)((char *)(&l) + 2);
      000031 8F 03            [24]  142 	mov	ar3,r7
      000033 8B 02            [24]  143 	mov	ar2,r3
      000035 7B 00            [12]  144 	mov	r3,#0x00
      000037 7E 40            [12]  145 	mov	r6,#0x40
      000039 74 02            [12]  146 	mov	a,#0x02
      00003B 2A               [12]  147 	add	a,r2
      00003C FA               [12]  148 	mov	r2,a
      00003D E4               [12]  149 	clr	a
      00003E 3B               [12]  150 	addc	a,r3
      00003F FB               [12]  151 	mov	r3,a
      000040 E5*00            [12]  152 	mov	a,_bp
      000042 24 13            [12]  153 	add	a,#0x13
      000044 F8               [12]  154 	mov	r0,a
      000045 A6 02            [24]  155 	mov	@r0,ar2
      000047 08               [12]  156 	inc	r0
      000048 A6 03            [24]  157 	mov	@r0,ar3
      00004A 08               [12]  158 	inc	r0
      00004B A6 06            [24]  159 	mov	@r0,ar6
                                    160 ;	_rrslonglong.c:45: uint32_t *bottom = (uint32_t *)((char *)(&l) + 4);
      00004D 8F 05            [24]  161 	mov	ar5,r7
      00004F 8D 04            [24]  162 	mov	ar4,r5
      000051 7D 00            [12]  163 	mov	r5,#0x00
      000053 7E 40            [12]  164 	mov	r6,#0x40
      000055 74 04            [12]  165 	mov	a,#0x04
      000057 2C               [12]  166 	add	a,r4
      000058 FC               [12]  167 	mov	r4,a
      000059 E4               [12]  168 	clr	a
      00005A 3D               [12]  169 	addc	a,r5
      00005B FD               [12]  170 	mov	r5,a
      00005C E5*00            [12]  171 	mov	a,_bp
      00005E 24 16            [12]  172 	add	a,#0x16
      000060 F8               [12]  173 	mov	r0,a
      000061 A6 04            [24]  174 	mov	@r0,ar4
      000063 08               [12]  175 	inc	r0
      000064 A6 05            [24]  176 	mov	@r0,ar5
      000066 08               [12]  177 	inc	r0
      000067 A6 06            [24]  178 	mov	@r0,ar6
                                    179 ;	_rrslonglong.c:46: uint16_t *b = (uint16_t *)(&l);
      000069 E5*00            [12]  180 	mov	a,_bp
      00006B 24 19            [12]  181 	add	a,#0x19
      00006D F8               [12]  182 	mov	r0,a
      00006E A6 07            [24]  183 	mov	@r0,ar7
      000070 08               [12]  184 	inc	r0
      000071 76 00            [12]  185 	mov	@r0,#0x00
      000073 08               [12]  186 	inc	r0
      000074 76 40            [12]  187 	mov	@r0,#0x40
                                    188 ;	_rrslonglong.c:56: (*bottom) >>= s;
      000076                        189 00103$:
                                    190 ;	_rrslonglong.c:48: for(;s >= 16; s-= 16)
      000076 E5*00            [12]  191 	mov	a,_bp
      000078 24 FD            [12]  192 	add	a,#0xfd
      00007A F8               [12]  193 	mov	r0,a
      00007B B6 10 00         [24]  194 	cjne	@r0,#0x10,00121$
      00007E                        195 00121$:
      00007E 50 03            [24]  196 	jnc	00122$
      000080 02r01r88         [24]  197 	ljmp	00101$
      000083                        198 00122$:
                                    199 ;	_rrslonglong.c:50: b[3] = b[2];
      000083 E5*00            [12]  200 	mov	a,_bp
      000085 24 19            [12]  201 	add	a,#0x19
      000087 F8               [12]  202 	mov	r0,a
      000088 E5*00            [12]  203 	mov	a,_bp
      00008A 24 09            [12]  204 	add	a,#0x09
      00008C F9               [12]  205 	mov	r1,a
      00008D 74 06            [12]  206 	mov	a,#0x06
      00008F 26               [12]  207 	add	a,@r0
      000090 F7               [12]  208 	mov	@r1,a
      000091 E4               [12]  209 	clr	a
      000092 08               [12]  210 	inc	r0
      000093 36               [12]  211 	addc	a,@r0
      000094 09               [12]  212 	inc	r1
      000095 F7               [12]  213 	mov	@r1,a
      000096 08               [12]  214 	inc	r0
      000097 E6               [12]  215 	mov	a,@r0
      000098 09               [12]  216 	inc	r1
      000099 F7               [12]  217 	mov	@r1,a
      00009A E5*00            [12]  218 	mov	a,_bp
      00009C 24 19            [12]  219 	add	a,#0x19
      00009E F8               [12]  220 	mov	r0,a
      00009F 74 04            [12]  221 	mov	a,#0x04
      0000A1 26               [12]  222 	add	a,@r0
      0000A2 FA               [12]  223 	mov	r2,a
      0000A3 E4               [12]  224 	clr	a
      0000A4 08               [12]  225 	inc	r0
      0000A5 36               [12]  226 	addc	a,@r0
      0000A6 FB               [12]  227 	mov	r3,a
      0000A7 08               [12]  228 	inc	r0
      0000A8 86 07            [24]  229 	mov	ar7,@r0
      0000AA 8A 82            [24]  230 	mov	dpl,r2
      0000AC 8B 83            [24]  231 	mov	dph,r3
      0000AE 8F F0            [24]  232 	mov	b,r7
      0000B0 12r00r00         [24]  233 	lcall	__gptrget
      0000B3 FE               [12]  234 	mov	r6,a
      0000B4 A3               [24]  235 	inc	dptr
      0000B5 12r00r00         [24]  236 	lcall	__gptrget
      0000B8 FD               [12]  237 	mov	r5,a
      0000B9 E5*00            [12]  238 	mov	a,_bp
      0000BB 24 09            [12]  239 	add	a,#0x09
      0000BD F8               [12]  240 	mov	r0,a
      0000BE 86 82            [24]  241 	mov	dpl,@r0
      0000C0 08               [12]  242 	inc	r0
      0000C1 86 83            [24]  243 	mov	dph,@r0
      0000C3 08               [12]  244 	inc	r0
      0000C4 86 F0            [24]  245 	mov	b,@r0
      0000C6 EE               [12]  246 	mov	a,r6
      0000C7 12r00r00         [24]  247 	lcall	__gptrput
      0000CA A3               [24]  248 	inc	dptr
      0000CB ED               [12]  249 	mov	a,r5
      0000CC 12r00r00         [24]  250 	lcall	__gptrput
                                    251 ;	_rrslonglong.c:51: b[2] = b[1];
      0000CF E5*00            [12]  252 	mov	a,_bp
      0000D1 24 19            [12]  253 	add	a,#0x19
      0000D3 F8               [12]  254 	mov	r0,a
      0000D4 E5*00            [12]  255 	mov	a,_bp
      0000D6 24 09            [12]  256 	add	a,#0x09
      0000D8 F9               [12]  257 	mov	r1,a
      0000D9 74 02            [12]  258 	mov	a,#0x02
      0000DB 26               [12]  259 	add	a,@r0
      0000DC F7               [12]  260 	mov	@r1,a
      0000DD E4               [12]  261 	clr	a
      0000DE 08               [12]  262 	inc	r0
      0000DF 36               [12]  263 	addc	a,@r0
      0000E0 09               [12]  264 	inc	r1
      0000E1 F7               [12]  265 	mov	@r1,a
      0000E2 08               [12]  266 	inc	r0
      0000E3 E6               [12]  267 	mov	a,@r0
      0000E4 09               [12]  268 	inc	r1
      0000E5 F7               [12]  269 	mov	@r1,a
      0000E6 E5*00            [12]  270 	mov	a,_bp
      0000E8 24 09            [12]  271 	add	a,#0x09
      0000EA F8               [12]  272 	mov	r0,a
      0000EB 86 82            [24]  273 	mov	dpl,@r0
      0000ED 08               [12]  274 	inc	r0
      0000EE 86 83            [24]  275 	mov	dph,@r0
      0000F0 08               [12]  276 	inc	r0
      0000F1 86 F0            [24]  277 	mov	b,@r0
      0000F3 12r00r00         [24]  278 	lcall	__gptrget
      0000F6 FD               [12]  279 	mov	r5,a
      0000F7 A3               [24]  280 	inc	dptr
      0000F8 12r00r00         [24]  281 	lcall	__gptrget
      0000FB FE               [12]  282 	mov	r6,a
      0000FC 8A 82            [24]  283 	mov	dpl,r2
      0000FE 8B 83            [24]  284 	mov	dph,r3
      000100 8F F0            [24]  285 	mov	b,r7
      000102 ED               [12]  286 	mov	a,r5
      000103 12r00r00         [24]  287 	lcall	__gptrput
      000106 A3               [24]  288 	inc	dptr
      000107 EE               [12]  289 	mov	a,r6
      000108 12r00r00         [24]  290 	lcall	__gptrput
                                    291 ;	_rrslonglong.c:52: b[1] = b[0];
      00010B E5*00            [12]  292 	mov	a,_bp
      00010D 24 19            [12]  293 	add	a,#0x19
      00010F F8               [12]  294 	mov	r0,a
      000110 86 82            [24]  295 	mov	dpl,@r0
      000112 08               [12]  296 	inc	r0
      000113 86 83            [24]  297 	mov	dph,@r0
      000115 08               [12]  298 	inc	r0
      000116 86 F0            [24]  299 	mov	b,@r0
      000118 12r00r00         [24]  300 	lcall	__gptrget
      00011B FE               [12]  301 	mov	r6,a
      00011C A3               [24]  302 	inc	dptr
      00011D 12r00r00         [24]  303 	lcall	__gptrget
      000120 FF               [12]  304 	mov	r7,a
      000121 E5*00            [12]  305 	mov	a,_bp
      000123 24 09            [12]  306 	add	a,#0x09
      000125 F8               [12]  307 	mov	r0,a
      000126 86 82            [24]  308 	mov	dpl,@r0
      000128 08               [12]  309 	inc	r0
      000129 86 83            [24]  310 	mov	dph,@r0
      00012B 08               [12]  311 	inc	r0
      00012C 86 F0            [24]  312 	mov	b,@r0
      00012E EE               [12]  313 	mov	a,r6
      00012F 12r00r00         [24]  314 	lcall	__gptrput
      000132 A3               [24]  315 	inc	dptr
      000133 EF               [12]  316 	mov	a,r7
      000134 12r00r00         [24]  317 	lcall	__gptrput
                                    318 ;	_rrslonglong.c:53: b[0] = (b[0] & 0x8000) ? 0xffff : 0x000000;
      000137 E5*00            [12]  319 	mov	a,_bp
      000139 24 19            [12]  320 	add	a,#0x19
      00013B F8               [12]  321 	mov	r0,a
      00013C 86 05            [24]  322 	mov	ar5,@r0
      00013E 08               [12]  323 	inc	r0
      00013F 86 04            [24]  324 	mov	ar4,@r0
      000141 08               [12]  325 	inc	r0
      000142 86 02            [24]  326 	mov	ar2,@r0
      000144 E5*00            [12]  327 	mov	a,_bp
      000146 24 19            [12]  328 	add	a,#0x19
      000148 F8               [12]  329 	mov	r0,a
      000149 86 82            [24]  330 	mov	dpl,@r0
      00014B 08               [12]  331 	inc	r0
      00014C 86 83            [24]  332 	mov	dph,@r0
      00014E 08               [12]  333 	inc	r0
      00014F 86 F0            [24]  334 	mov	b,@r0
      000151 12r00r00         [24]  335 	lcall	__gptrget
      000154 FE               [12]  336 	mov	r6,a
      000155 A3               [24]  337 	inc	dptr
      000156 12r00r00         [24]  338 	lcall	__gptrget
      000159 30 E7 06         [24]  339 	jnb	acc.7,00107$
      00015C 7B FF            [12]  340 	mov	r3,#0xff
      00015E 7F FF            [12]  341 	mov	r7,#0xff
      000160 80 04            [24]  342 	sjmp	00108$
      000162                        343 00107$:
      000162 7B 00            [12]  344 	mov	r3,#0x00
      000164 7F 00            [12]  345 	mov	r7,#0x00
      000166                        346 00108$:
      000166 8D 82            [24]  347 	mov	dpl,r5
      000168 8C 83            [24]  348 	mov	dph,r4
      00016A 8A F0            [24]  349 	mov	b,r2
      00016C EB               [12]  350 	mov	a,r3
      00016D 12r00r00         [24]  351 	lcall	__gptrput
      000170 A3               [24]  352 	inc	dptr
      000171 EF               [12]  353 	mov	a,r7
      000172 12r00r00         [24]  354 	lcall	__gptrput
                                    355 ;	_rrslonglong.c:48: for(;s >= 16; s-= 16)
      000175 E5*00            [12]  356 	mov	a,_bp
      000177 24 FD            [12]  357 	add	a,#0xfd
      000179 F8               [12]  358 	mov	r0,a
      00017A 86 07            [24]  359 	mov	ar7,@r0
      00017C E5*00            [12]  360 	mov	a,_bp
      00017E 24 FD            [12]  361 	add	a,#0xfd
      000180 F8               [12]  362 	mov	r0,a
      000181 EF               [12]  363 	mov	a,r7
      000182 24 F0            [12]  364 	add	a,#0xf0
      000184 F6               [12]  365 	mov	@r0,a
      000185 02r00r76         [24]  366 	ljmp	00103$
      000188                        367 00101$:
                                    368 ;	_rrslonglong.c:56: (*bottom) >>= s;
      000188 E5*00            [12]  369 	mov	a,_bp
      00018A 24 16            [12]  370 	add	a,#0x16
      00018C F8               [12]  371 	mov	r0,a
      00018D 86 82            [24]  372 	mov	dpl,@r0
      00018F 08               [12]  373 	inc	r0
      000190 86 83            [24]  374 	mov	dph,@r0
      000192 08               [12]  375 	inc	r0
      000193 86 F0            [24]  376 	mov	b,@r0
      000195 12r00r00         [24]  377 	lcall	__gptrget
      000198 FA               [12]  378 	mov	r2,a
      000199 A3               [24]  379 	inc	dptr
      00019A 12r00r00         [24]  380 	lcall	__gptrget
      00019D FB               [12]  381 	mov	r3,a
      00019E A3               [24]  382 	inc	dptr
      00019F 12r00r00         [24]  383 	lcall	__gptrget
      0001A2 FE               [12]  384 	mov	r6,a
      0001A3 A3               [24]  385 	inc	dptr
      0001A4 12r00r00         [24]  386 	lcall	__gptrget
      0001A7 FF               [12]  387 	mov	r7,a
      0001A8 E5*00            [12]  388 	mov	a,_bp
      0001AA 24 FD            [12]  389 	add	a,#0xfd
      0001AC F8               [12]  390 	mov	r0,a
      0001AD 86 F0            [24]  391 	mov	b,@r0
      0001AF 05 F0            [12]  392 	inc	b
      0001B1 80 0D            [24]  393 	sjmp	00125$
      0001B3                        394 00124$:
      0001B3 C3               [12]  395 	clr	c
      0001B4 EF               [12]  396 	mov	a,r7
      0001B5 13               [12]  397 	rrc	a
      0001B6 FF               [12]  398 	mov	r7,a
      0001B7 EE               [12]  399 	mov	a,r6
      0001B8 13               [12]  400 	rrc	a
      0001B9 FE               [12]  401 	mov	r6,a
      0001BA EB               [12]  402 	mov	a,r3
      0001BB 13               [12]  403 	rrc	a
      0001BC FB               [12]  404 	mov	r3,a
      0001BD EA               [12]  405 	mov	a,r2
      0001BE 13               [12]  406 	rrc	a
      0001BF FA               [12]  407 	mov	r2,a
      0001C0                        408 00125$:
      0001C0 D5 F0 F0         [24]  409 	djnz	b,00124$
      0001C3 E5*00            [12]  410 	mov	a,_bp
      0001C5 24 16            [12]  411 	add	a,#0x16
      0001C7 F8               [12]  412 	mov	r0,a
      0001C8 86 82            [24]  413 	mov	dpl,@r0
      0001CA 08               [12]  414 	inc	r0
      0001CB 86 83            [24]  415 	mov	dph,@r0
      0001CD 08               [12]  416 	inc	r0
      0001CE 86 F0            [24]  417 	mov	b,@r0
      0001D0 EA               [12]  418 	mov	a,r2
      0001D1 12r00r00         [24]  419 	lcall	__gptrput
      0001D4 A3               [24]  420 	inc	dptr
      0001D5 EB               [12]  421 	mov	a,r3
      0001D6 12r00r00         [24]  422 	lcall	__gptrput
      0001D9 A3               [24]  423 	inc	dptr
      0001DA EE               [12]  424 	mov	a,r6
      0001DB 12r00r00         [24]  425 	lcall	__gptrput
      0001DE A3               [24]  426 	inc	dptr
      0001DF EF               [12]  427 	mov	a,r7
      0001E0 12r00r00         [24]  428 	lcall	__gptrput
                                    429 ;	_rrslonglong.c:57: (*middle) |= (((*middle & 0xffff0000ul) >> s) & 0x0000fffful);
      0001E3 E5*00            [12]  430 	mov	a,_bp
      0001E5 24 13            [12]  431 	add	a,#0x13
      0001E7 F8               [12]  432 	mov	r0,a
      0001E8 86 82            [24]  433 	mov	dpl,@r0
      0001EA 08               [12]  434 	inc	r0
      0001EB 86 83            [24]  435 	mov	dph,@r0
      0001ED 08               [12]  436 	inc	r0
      0001EE 86 F0            [24]  437 	mov	b,@r0
      0001F0 E5*00            [12]  438 	mov	a,_bp
      0001F2 24 0C            [12]  439 	add	a,#0x0c
      0001F4 F9               [12]  440 	mov	r1,a
      0001F5 12r00r00         [24]  441 	lcall	__gptrget
      0001F8 F7               [12]  442 	mov	@r1,a
      0001F9 A3               [24]  443 	inc	dptr
      0001FA 12r00r00         [24]  444 	lcall	__gptrget
      0001FD 09               [12]  445 	inc	r1
      0001FE F7               [12]  446 	mov	@r1,a
      0001FF A3               [24]  447 	inc	dptr
      000200 12r00r00         [24]  448 	lcall	__gptrget
      000203 09               [12]  449 	inc	r1
      000204 F7               [12]  450 	mov	@r1,a
      000205 A3               [24]  451 	inc	dptr
      000206 12r00r00         [24]  452 	lcall	__gptrget
      000209 09               [12]  453 	inc	r1
      00020A F7               [12]  454 	mov	@r1,a
      00020B E5*00            [12]  455 	mov	a,_bp
      00020D 24 0C            [12]  456 	add	a,#0x0c
      00020F F8               [12]  457 	mov	r0,a
      000210 7A 00            [12]  458 	mov	r2,#0x00
      000212 7B 00            [12]  459 	mov	r3,#0x00
      000214 08               [12]  460 	inc	r0
      000215 08               [12]  461 	inc	r0
      000216 86 06            [24]  462 	mov	ar6,@r0
      000218 08               [12]  463 	inc	r0
      000219 86 07            [24]  464 	mov	ar7,@r0
      00021B E5*00            [12]  465 	mov	a,_bp
      00021D 24 FD            [12]  466 	add	a,#0xfd
      00021F F8               [12]  467 	mov	r0,a
      000220 86 F0            [24]  468 	mov	b,@r0
      000222 05 F0            [12]  469 	inc	b
      000224 80 0D            [24]  470 	sjmp	00127$
      000226                        471 00126$:
      000226 C3               [12]  472 	clr	c
      000227 EF               [12]  473 	mov	a,r7
      000228 13               [12]  474 	rrc	a
      000229 FF               [12]  475 	mov	r7,a
      00022A EE               [12]  476 	mov	a,r6
      00022B 13               [12]  477 	rrc	a
      00022C FE               [12]  478 	mov	r6,a
      00022D EB               [12]  479 	mov	a,r3
      00022E 13               [12]  480 	rrc	a
      00022F FB               [12]  481 	mov	r3,a
      000230 EA               [12]  482 	mov	a,r2
      000231 13               [12]  483 	rrc	a
      000232 FA               [12]  484 	mov	r2,a
      000233                        485 00127$:
      000233 D5 F0 F0         [24]  486 	djnz	b,00126$
      000236 E4               [12]  487 	clr	a
      000237 FE               [12]  488 	mov	r6,a
      000238 FF               [12]  489 	mov	r7,a
      000239 E5*00            [12]  490 	mov	a,_bp
      00023B 24 0C            [12]  491 	add	a,#0x0c
      00023D F8               [12]  492 	mov	r0,a
      00023E E6               [12]  493 	mov	a,@r0
      00023F 42 02            [12]  494 	orl	ar2,a
      000241 08               [12]  495 	inc	r0
      000242 E6               [12]  496 	mov	a,@r0
      000243 42 03            [12]  497 	orl	ar3,a
      000245 08               [12]  498 	inc	r0
      000246 E6               [12]  499 	mov	a,@r0
      000247 42 06            [12]  500 	orl	ar6,a
      000249 08               [12]  501 	inc	r0
      00024A E6               [12]  502 	mov	a,@r0
      00024B 42 07            [12]  503 	orl	ar7,a
      00024D E5*00            [12]  504 	mov	a,_bp
      00024F 24 13            [12]  505 	add	a,#0x13
      000251 F8               [12]  506 	mov	r0,a
      000252 86 82            [24]  507 	mov	dpl,@r0
      000254 08               [12]  508 	inc	r0
      000255 86 83            [24]  509 	mov	dph,@r0
      000257 08               [12]  510 	inc	r0
      000258 86 F0            [24]  511 	mov	b,@r0
      00025A EA               [12]  512 	mov	a,r2
      00025B 12r00r00         [24]  513 	lcall	__gptrput
      00025E A3               [24]  514 	inc	dptr
      00025F EB               [12]  515 	mov	a,r3
      000260 12r00r00         [24]  516 	lcall	__gptrput
      000263 A3               [24]  517 	inc	dptr
      000264 EE               [12]  518 	mov	a,r6
      000265 12r00r00         [24]  519 	lcall	__gptrput
      000268 A3               [24]  520 	inc	dptr
      000269 EF               [12]  521 	mov	a,r7
      00026A 12r00r00         [24]  522 	lcall	__gptrput
                                    523 ;	_rrslonglong.c:58: (*top) >>= s;
      00026D E5*00            [12]  524 	mov	a,_bp
      00026F 24 10            [12]  525 	add	a,#0x10
      000271 F8               [12]  526 	mov	r0,a
      000272 86 82            [24]  527 	mov	dpl,@r0
      000274 08               [12]  528 	inc	r0
      000275 86 83            [24]  529 	mov	dph,@r0
      000277 08               [12]  530 	inc	r0
      000278 86 F0            [24]  531 	mov	b,@r0
      00027A 12r00r00         [24]  532 	lcall	__gptrget
      00027D FC               [12]  533 	mov	r4,a
      00027E A3               [24]  534 	inc	dptr
      00027F 12r00r00         [24]  535 	lcall	__gptrget
      000282 FD               [12]  536 	mov	r5,a
      000283 A3               [24]  537 	inc	dptr
      000284 12r00r00         [24]  538 	lcall	__gptrget
      000287 FE               [12]  539 	mov	r6,a
      000288 A3               [24]  540 	inc	dptr
      000289 12r00r00         [24]  541 	lcall	__gptrget
      00028C FF               [12]  542 	mov	r7,a
      00028D E5*00            [12]  543 	mov	a,_bp
      00028F 24 FD            [12]  544 	add	a,#0xfd
      000291 F8               [12]  545 	mov	r0,a
      000292 86 F0            [24]  546 	mov	b,@r0
      000294 05 F0            [12]  547 	inc	b
      000296 EF               [12]  548 	mov	a,r7
      000297 33               [12]  549 	rlc	a
      000298 92 D2            [24]  550 	mov	ov,c
      00029A 80 0E            [24]  551 	sjmp	00129$
      00029C                        552 00128$:
      00029C A2 D2            [12]  553 	mov	c,ov
      00029E EF               [12]  554 	mov	a,r7
      00029F 13               [12]  555 	rrc	a
      0002A0 FF               [12]  556 	mov	r7,a
      0002A1 EE               [12]  557 	mov	a,r6
      0002A2 13               [12]  558 	rrc	a
      0002A3 FE               [12]  559 	mov	r6,a
      0002A4 ED               [12]  560 	mov	a,r5
      0002A5 13               [12]  561 	rrc	a
      0002A6 FD               [12]  562 	mov	r5,a
      0002A7 EC               [12]  563 	mov	a,r4
      0002A8 13               [12]  564 	rrc	a
      0002A9 FC               [12]  565 	mov	r4,a
      0002AA                        566 00129$:
      0002AA D5 F0 EF         [24]  567 	djnz	b,00128$
      0002AD E5*00            [12]  568 	mov	a,_bp
      0002AF 24 10            [12]  569 	add	a,#0x10
      0002B1 F8               [12]  570 	mov	r0,a
      0002B2 86 82            [24]  571 	mov	dpl,@r0
      0002B4 08               [12]  572 	inc	r0
      0002B5 86 83            [24]  573 	mov	dph,@r0
      0002B7 08               [12]  574 	inc	r0
      0002B8 86 F0            [24]  575 	mov	b,@r0
      0002BA EC               [12]  576 	mov	a,r4
      0002BB 12r00r00         [24]  577 	lcall	__gptrput
      0002BE A3               [24]  578 	inc	dptr
      0002BF ED               [12]  579 	mov	a,r5
      0002C0 12r00r00         [24]  580 	lcall	__gptrput
      0002C3 A3               [24]  581 	inc	dptr
      0002C4 EE               [12]  582 	mov	a,r6
      0002C5 12r00r00         [24]  583 	lcall	__gptrput
      0002C8 A3               [24]  584 	inc	dptr
      0002C9 EF               [12]  585 	mov	a,r7
      0002CA 12r00r00         [24]  586 	lcall	__gptrput
                                    587 ;	_rrslonglong.c:60: return(l);
      0002CD A8*00            [24]  588 	mov	r0,_bp
      0002CF 08               [12]  589 	inc	r0
      0002D0 86 82            [24]  590 	mov	dpl,@r0
      0002D2 08               [12]  591 	inc	r0
      0002D3 86 83            [24]  592 	mov	dph,@r0
      0002D5 08               [12]  593 	inc	r0
      0002D6 86 F0            [24]  594 	mov	b,@r0
      0002D8 08               [12]  595 	inc	r0
      0002D9 E6               [12]  596 	mov	a,@r0
      0002DA 08               [12]  597 	inc	r0
      0002DB 86 04            [24]  598 	mov	ar4,@r0
      0002DD 08               [12]  599 	inc	r0
      0002DE 86 05            [24]  600 	mov	ar5,@r0
      0002E0 08               [12]  601 	inc	r0
      0002E1 86 06            [24]  602 	mov	ar6,@r0
      0002E3 08               [12]  603 	inc	r0
      0002E4 86 07            [24]  604 	mov	ar7,@r0
                                    605 ;	_rrslonglong.c:61: }
      0002E6 85*00 81         [24]  606 	mov	sp,_bp
      0002E9 D0*00            [24]  607 	pop	_bp
      0002EB 22               [24]  608 	ret
                                    609 	.area CSEG    (CODE)
                                    610 	.area CONST   (CODE)
                                    611 	.area XINIT   (CODE)
                                    612 	.area CABS    (ABS,CODE)
