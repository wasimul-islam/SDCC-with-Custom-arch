                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; uninitialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; initialized external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'gets'
                                     93 ;------------------------------------------------------------
                                     94 ;s                         Allocated to registers r5 r6 r7 
                                     95 ;c                         Allocated to registers r2 
                                     96 ;count                     Allocated to stack - _bp +1
                                     97 ;------------------------------------------------------------
                                     98 ;	gets.c:32: gets (char *s)
                                     99 ;	-----------------------------------------
                                    100 ;	 function gets
                                    101 ;	-----------------------------------------
      000000                        102 _gets:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 05 81            [12]  113 	inc	sp
      000007 05 81            [12]  114 	inc	sp
      000009 AD 82            [24]  115 	mov	r5,dpl
      00000B AE 83            [24]  116 	mov	r6,dph
      00000D AF F0            [24]  117 	mov	r7,b
                                    118 ;	gets.c:35: unsigned int count = 0;
      00000F A8*00            [24]  119 	mov	r0,_bp
      000011 08               [12]  120 	inc	r0
      000012 E4               [12]  121 	clr	a
      000013 F6               [12]  122 	mov	@r0,a
      000014 08               [12]  123 	inc	r0
      000015 F6               [12]  124 	mov	@r0,a
                                    125 ;	gets.c:37: while (1)
      000016                        126 00109$:
                                    127 ;	gets.c:39: c = getchar ();
      000016 C0 07            [24]  128 	push	ar7
      000018 C0 06            [24]  129 	push	ar6
      00001A C0 05            [24]  130 	push	ar5
      00001C 12r00r00         [24]  131 	lcall	_getchar
      00001F AA 82            [24]  132 	mov	r2,dpl
      000021 AC 83            [24]  133 	mov	r4,dph
      000023 D0 05            [24]  134 	pop	ar5
      000025 D0 06            [24]  135 	pop	ar6
      000027 D0 07            [24]  136 	pop	ar7
                                    137 ;	gets.c:40: switch(c)
      000029 BA 08 02         [24]  138 	cjne	r2,#0x08,00133$
      00002C 80 0A            [24]  139 	sjmp	00101$
      00002E                        140 00133$:
      00002E BA 0A 02         [24]  141 	cjne	r2,#0x0a,00134$
      000031 80 3B            [24]  142 	sjmp	00105$
      000033                        143 00134$:
                                    144 ;	gets.c:42: case '\b': /* backspace */
      000033 BA 0D 62         [24]  145 	cjne	r2,#0x0d,00106$
      000036 80 36            [24]  146 	sjmp	00105$
      000038                        147 00101$:
                                    148 ;	gets.c:43: if (count)
      000038 A8*00            [24]  149 	mov	r0,_bp
      00003A 08               [12]  150 	inc	r0
      00003B E6               [12]  151 	mov	a,@r0
      00003C 08               [12]  152 	inc	r0
      00003D 46               [12]  153 	orl	a,@r0
      00003E 60 D6            [24]  154 	jz	00109$
                                    155 ;	gets.c:45: putchar ('\b');
      000040 90 00 08         [24]  156 	mov	dptr,#0x0008
      000043 C0 07            [24]  157 	push	ar7
      000045 C0 06            [24]  158 	push	ar6
      000047 C0 05            [24]  159 	push	ar5
      000049 12r00r00         [24]  160 	lcall	_putchar
                                    161 ;	gets.c:46: putchar (' ');
      00004C 90 00 20         [24]  162 	mov	dptr,#0x0020
      00004F 12r00r00         [24]  163 	lcall	_putchar
                                    164 ;	gets.c:47: putchar ('\b');
      000052 90 00 08         [24]  165 	mov	dptr,#0x0008
      000055 12r00r00         [24]  166 	lcall	_putchar
      000058 D0 05            [24]  167 	pop	ar5
      00005A D0 06            [24]  168 	pop	ar6
      00005C D0 07            [24]  169 	pop	ar7
                                    170 ;	gets.c:48: --s;
      00005E 1D               [12]  171 	dec	r5
      00005F BD FF 01         [24]  172 	cjne	r5,#0xff,00137$
      000062 1E               [12]  173 	dec	r6
      000063                        174 00137$:
                                    175 ;	gets.c:49: --count;
      000063 A8*00            [24]  176 	mov	r0,_bp
      000065 08               [12]  177 	inc	r0
      000066 16               [12]  178 	dec	@r0
      000067 B6 FF 02         [24]  179 	cjne	@r0,#0xff,00138$
      00006A 08               [12]  180 	inc	r0
      00006B 16               [12]  181 	dec	@r0
      00006C                        182 00138$:
                                    183 ;	gets.c:51: break;
                                    184 ;	gets.c:54: case '\r': /* CR or LF */
      00006C 80 A8            [24]  185 	sjmp	00109$
      00006E                        186 00105$:
                                    187 ;	gets.c:55: putchar ('\r');
      00006E 90 00 0D         [24]  188 	mov	dptr,#0x000d
      000071 C0 07            [24]  189 	push	ar7
      000073 C0 06            [24]  190 	push	ar6
      000075 C0 05            [24]  191 	push	ar5
      000077 12r00r00         [24]  192 	lcall	_putchar
                                    193 ;	gets.c:56: putchar ('\n');
      00007A 90 00 0A         [24]  194 	mov	dptr,#0x000a
      00007D 12r00r00         [24]  195 	lcall	_putchar
      000080 D0 05            [24]  196 	pop	ar5
      000082 D0 06            [24]  197 	pop	ar6
      000084 D0 07            [24]  198 	pop	ar7
                                    199 ;	gets.c:57: *s = 0;
      000086 8D 82            [24]  200 	mov	dpl,r5
      000088 8E 83            [24]  201 	mov	dph,r6
      00008A 8F F0            [24]  202 	mov	b,r7
      00008C E4               [12]  203 	clr	a
      00008D 12r00r00         [24]  204 	lcall	__gptrput
                                    205 ;	gets.c:58: return s;
      000090 8D 82            [24]  206 	mov	dpl,r5
      000092 8E 83            [24]  207 	mov	dph,r6
      000094 8F F0            [24]  208 	mov	b,r7
                                    209 ;	gets.c:60: default:
      000096 80 30            [24]  210 	sjmp	00111$
      000098                        211 00106$:
                                    212 ;	gets.c:61: *s++ = c;
      000098 8D 82            [24]  213 	mov	dpl,r5
      00009A 8E 83            [24]  214 	mov	dph,r6
      00009C 8F F0            [24]  215 	mov	b,r7
      00009E EA               [12]  216 	mov	a,r2
      00009F 12r00r00         [24]  217 	lcall	__gptrput
      0000A2 A3               [24]  218 	inc	dptr
      0000A3 AD 82            [24]  219 	mov	r5,dpl
      0000A5 AE 83            [24]  220 	mov	r6,dph
                                    221 ;	gets.c:62: ++count;
      0000A7 A8*00            [24]  222 	mov	r0,_bp
      0000A9 08               [12]  223 	inc	r0
      0000AA 06               [12]  224 	inc	@r0
      0000AB B6 00 02         [24]  225 	cjne	@r0,#0x00,00139$
      0000AE 08               [12]  226 	inc	r0
      0000AF 06               [12]  227 	inc	@r0
      0000B0                        228 00139$:
                                    229 ;	gets.c:63: putchar (c);
      0000B0 7C 00            [12]  230 	mov	r4,#0x00
      0000B2 8A 82            [24]  231 	mov	dpl,r2
      0000B4 8C 83            [24]  232 	mov	dph,r4
      0000B6 C0 07            [24]  233 	push	ar7
      0000B8 C0 06            [24]  234 	push	ar6
      0000BA C0 05            [24]  235 	push	ar5
      0000BC 12r00r00         [24]  236 	lcall	_putchar
      0000BF D0 05            [24]  237 	pop	ar5
      0000C1 D0 06            [24]  238 	pop	ar6
      0000C3 D0 07            [24]  239 	pop	ar7
                                    240 ;	gets.c:65: }
      0000C5 02r00r16         [24]  241 	ljmp	00109$
      0000C8                        242 00111$:
                                    243 ;	gets.c:67: }
      0000C8 85*00 81         [24]  244 	mov	sp,_bp
      0000CB D0*00            [24]  245 	pop	_bp
      0000CD 22               [24]  246 	ret
                                    247 	.area CSEG    (CODE)
                                    248 	.area CONST   (CODE)
                                    249 	.area XINIT   (CODE)
                                    250 	.area CABS    (ABS,CODE)
