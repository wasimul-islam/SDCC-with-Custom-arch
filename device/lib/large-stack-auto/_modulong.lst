                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _modulong
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __modulong
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '_modulong'
                                     91 ;------------------------------------------------------------
                                     92 ;b                         Allocated to stack - _bp -6
                                     93 ;a                         Allocated to registers r4 r5 r6 r7 
                                     94 ;count                     Allocated to stack - _bp +1
                                     95 ;------------------------------------------------------------
                                     96 ;	_modulong.c:346: _modulong (unsigned long a, unsigned long b) __SDCC_NONBANKED
                                     97 ;	-----------------------------------------
                                     98 ;	 function _modulong
                                     99 ;	-----------------------------------------
      000000                        100 __modulong:
                           000007   101 	ar7 = 0x07
                           000006   102 	ar6 = 0x06
                           000005   103 	ar5 = 0x05
                           000004   104 	ar4 = 0x04
                           000003   105 	ar3 = 0x03
                           000002   106 	ar2 = 0x02
                           000001   107 	ar1 = 0x01
                           000000   108 	ar0 = 0x00
      000000 C0*00            [24]  109 	push	_bp
      000002 85 81*00         [24]  110 	mov	_bp,sp
      000005 AC 82            [24]  111 	mov	r4,dpl
      000007 AD 83            [24]  112 	mov	r5,dph
      000009 AE F0            [24]  113 	mov	r6,b
      00000B FF               [12]  114 	mov	r7,a
      00000C 05 81            [12]  115 	inc	sp
                                    116 ;	_modulong.c:348: unsigned char count = 0;
      00000E 7B 00            [12]  117 	mov	r3,#0x00
                                    118 ;	_modulong.c:350: while (!MSB_SET(b))
      000010 A8*00            [24]  119 	mov	r0,_bp
      000012 08               [12]  120 	inc	r0
      000013 76 00            [12]  121 	mov	@r0,#0x00
      000015                        122 00103$:
      000015 E5*00            [12]  123 	mov	a,_bp
      000017 24 FA            [12]  124 	add	a,#0xfa
      000019 F8               [12]  125 	mov	r0,a
      00001A 08               [12]  126 	inc	r0
      00001B 08               [12]  127 	inc	r0
      00001C 08               [12]  128 	inc	r0
      00001D E6               [12]  129 	mov	a,@r0
      00001E 23               [12]  130 	rl	a
      00001F 54 01            [12]  131 	anl	a,#0x01
      000021 FA               [12]  132 	mov	r2,a
      000022 70 4C            [24]  133 	jnz	00117$
                                    134 ;	_modulong.c:352: b <<= 1;
      000024 E5*00            [12]  135 	mov	a,_bp
      000026 24 FA            [12]  136 	add	a,#0xfa
      000028 F8               [12]  137 	mov	r0,a
      000029 E6               [12]  138 	mov	a,@r0
      00002A 26               [12]  139 	add	a,@r0
      00002B F6               [12]  140 	mov	@r0,a
      00002C 08               [12]  141 	inc	r0
      00002D E6               [12]  142 	mov	a,@r0
      00002E 33               [12]  143 	rlc	a
      00002F F6               [12]  144 	mov	@r0,a
      000030 08               [12]  145 	inc	r0
      000031 E6               [12]  146 	mov	a,@r0
      000032 33               [12]  147 	rlc	a
      000033 F6               [12]  148 	mov	@r0,a
      000034 08               [12]  149 	inc	r0
      000035 E6               [12]  150 	mov	a,@r0
      000036 33               [12]  151 	rlc	a
      000037 F6               [12]  152 	mov	@r0,a
                                    153 ;	_modulong.c:353: if (b > a)
      000038 E5*00            [12]  154 	mov	a,_bp
      00003A 24 FA            [12]  155 	add	a,#0xfa
      00003C F8               [12]  156 	mov	r0,a
      00003D C3               [12]  157 	clr	c
      00003E EC               [12]  158 	mov	a,r4
      00003F 96               [12]  159 	subb	a,@r0
      000040 ED               [12]  160 	mov	a,r5
      000041 08               [12]  161 	inc	r0
      000042 96               [12]  162 	subb	a,@r0
      000043 EE               [12]  163 	mov	a,r6
      000044 08               [12]  164 	inc	r0
      000045 96               [12]  165 	subb	a,@r0
      000046 EF               [12]  166 	mov	a,r7
      000047 08               [12]  167 	inc	r0
      000048 96               [12]  168 	subb	a,@r0
      000049 50 1A            [24]  169 	jnc	00102$
                                    170 ;	_modulong.c:355: b >>=1;
      00004B E5*00            [12]  171 	mov	a,_bp
      00004D 24 FA            [12]  172 	add	a,#0xfa
      00004F F8               [12]  173 	mov	r0,a
      000050 08               [12]  174 	inc	r0
      000051 08               [12]  175 	inc	r0
      000052 08               [12]  176 	inc	r0
      000053 E6               [12]  177 	mov	a,@r0
      000054 C3               [12]  178 	clr	c
      000055 13               [12]  179 	rrc	a
      000056 F6               [12]  180 	mov	@r0,a
      000057 18               [12]  181 	dec	r0
      000058 E6               [12]  182 	mov	a,@r0
      000059 13               [12]  183 	rrc	a
      00005A F6               [12]  184 	mov	@r0,a
      00005B 18               [12]  185 	dec	r0
      00005C E6               [12]  186 	mov	a,@r0
      00005D 13               [12]  187 	rrc	a
      00005E F6               [12]  188 	mov	@r0,a
      00005F 18               [12]  189 	dec	r0
      000060 E6               [12]  190 	mov	a,@r0
      000061 13               [12]  191 	rrc	a
      000062 F6               [12]  192 	mov	@r0,a
                                    193 ;	_modulong.c:356: break;
      000063 80 0B            [24]  194 	sjmp	00117$
      000065                        195 00102$:
                                    196 ;	_modulong.c:358: count++;
      000065 A8*00            [24]  197 	mov	r0,_bp
      000067 08               [12]  198 	inc	r0
      000068 06               [12]  199 	inc	@r0
      000069 A8*00            [24]  200 	mov	r0,_bp
      00006B 08               [12]  201 	inc	r0
      00006C 86 03            [24]  202 	mov	ar3,@r0
                                    203 ;	_modulong.c:360: do
      00006E 80 A5            [24]  204 	sjmp	00103$
      000070                        205 00117$:
      000070                        206 00108$:
                                    207 ;	_modulong.c:362: if (a >= b)
      000070 E5*00            [12]  208 	mov	a,_bp
      000072 24 FA            [12]  209 	add	a,#0xfa
      000074 F8               [12]  210 	mov	r0,a
      000075 C3               [12]  211 	clr	c
      000076 EC               [12]  212 	mov	a,r4
      000077 96               [12]  213 	subb	a,@r0
      000078 ED               [12]  214 	mov	a,r5
      000079 08               [12]  215 	inc	r0
      00007A 96               [12]  216 	subb	a,@r0
      00007B EE               [12]  217 	mov	a,r6
      00007C 08               [12]  218 	inc	r0
      00007D 96               [12]  219 	subb	a,@r0
      00007E EF               [12]  220 	mov	a,r7
      00007F 08               [12]  221 	inc	r0
      000080 96               [12]  222 	subb	a,@r0
      000081 40 15            [24]  223 	jc	00107$
                                    224 ;	_modulong.c:363: a -= b;
      000083 E5*00            [12]  225 	mov	a,_bp
      000085 24 FA            [12]  226 	add	a,#0xfa
      000087 F8               [12]  227 	mov	r0,a
      000088 EC               [12]  228 	mov	a,r4
      000089 C3               [12]  229 	clr	c
      00008A 96               [12]  230 	subb	a,@r0
      00008B FC               [12]  231 	mov	r4,a
      00008C ED               [12]  232 	mov	a,r5
      00008D 08               [12]  233 	inc	r0
      00008E 96               [12]  234 	subb	a,@r0
      00008F FD               [12]  235 	mov	r5,a
      000090 EE               [12]  236 	mov	a,r6
      000091 08               [12]  237 	inc	r0
      000092 96               [12]  238 	subb	a,@r0
      000093 FE               [12]  239 	mov	r6,a
      000094 EF               [12]  240 	mov	a,r7
      000095 08               [12]  241 	inc	r0
      000096 96               [12]  242 	subb	a,@r0
      000097 FF               [12]  243 	mov	r7,a
      000098                        244 00107$:
                                    245 ;	_modulong.c:364: b >>= 1;
      000098 E5*00            [12]  246 	mov	a,_bp
      00009A 24 FA            [12]  247 	add	a,#0xfa
      00009C F8               [12]  248 	mov	r0,a
      00009D 08               [12]  249 	inc	r0
      00009E 08               [12]  250 	inc	r0
      00009F 08               [12]  251 	inc	r0
      0000A0 E6               [12]  252 	mov	a,@r0
      0000A1 C3               [12]  253 	clr	c
      0000A2 13               [12]  254 	rrc	a
      0000A3 F6               [12]  255 	mov	@r0,a
      0000A4 18               [12]  256 	dec	r0
      0000A5 E6               [12]  257 	mov	a,@r0
      0000A6 13               [12]  258 	rrc	a
      0000A7 F6               [12]  259 	mov	@r0,a
      0000A8 18               [12]  260 	dec	r0
      0000A9 E6               [12]  261 	mov	a,@r0
      0000AA 13               [12]  262 	rrc	a
      0000AB F6               [12]  263 	mov	@r0,a
      0000AC 18               [12]  264 	dec	r0
      0000AD E6               [12]  265 	mov	a,@r0
      0000AE 13               [12]  266 	rrc	a
      0000AF F6               [12]  267 	mov	@r0,a
                                    268 ;	_modulong.c:366: while (count--);
      0000B0 8B 02            [24]  269 	mov	ar2,r3
      0000B2 1B               [12]  270 	dec	r3
      0000B3 EA               [12]  271 	mov	a,r2
      0000B4 70 BA            [24]  272 	jnz	00108$
                                    273 ;	_modulong.c:368: return a;
      0000B6 8C 82            [24]  274 	mov	dpl,r4
      0000B8 8D 83            [24]  275 	mov	dph,r5
      0000BA 8E F0            [24]  276 	mov	b,r6
      0000BC EF               [12]  277 	mov	a,r7
                                    278 ;	_modulong.c:369: }
      0000BD 15 81            [12]  279 	dec	sp
      0000BF D0*00            [24]  280 	pop	_bp
      0000C1 22               [24]  281 	ret
                                    282 	.area CSEG    (CODE)
                                    283 	.area CONST   (CODE)
                                    284 	.area XINIT   (CODE)
                                    285 	.area CABS    (ABS,CODE)
