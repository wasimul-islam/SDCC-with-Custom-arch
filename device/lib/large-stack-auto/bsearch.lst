                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module bsearch
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _bsearch
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'bsearch'
                                     91 ;------------------------------------------------------------
                                     92 ;base                      Allocated to stack - _bp -5
                                     93 ;nmemb                     Allocated to stack - _bp -7
                                     94 ;size                      Allocated to stack - _bp -9
                                     95 ;compar                    Allocated to stack - _bp -11
                                     96 ;key                       Allocated to stack - _bp +1
                                     97 ;left                      Allocated to stack - _bp +6
                                     98 ;middle                    Allocated to registers r6 r7 r5 
                                     99 ;c                         Allocated to registers r3 r4 
                                    100 ;sloc0                     Allocated to stack - _bp +4
                                    101 ;sloc1                     Allocated to stack - _bp +6
                                    102 ;------------------------------------------------------------
                                    103 ;	bsearch.c:31: void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                                    104 ;	-----------------------------------------
                                    105 ;	 function bsearch
                                    106 ;	-----------------------------------------
      000000                        107 _bsearch:
                           000007   108 	ar7 = 0x07
                           000006   109 	ar6 = 0x06
                           000005   110 	ar5 = 0x05
                           000004   111 	ar4 = 0x04
                           000003   112 	ar3 = 0x03
                           000002   113 	ar2 = 0x02
                           000001   114 	ar1 = 0x01
                           000000   115 	ar0 = 0x00
      000000 C0*00            [24]  116 	push	_bp
      000002 85 81*00         [24]  117 	mov	_bp,sp
      000005 C0 82            [24]  118 	push	dpl
      000007 C0 83            [24]  119 	push	dph
      000009 C0 F0            [24]  120 	push	b
      00000B E5 81            [12]  121 	mov	a,sp
      00000D 24 05            [12]  122 	add	a,#0x05
      00000F F5 81            [12]  123 	mov	sp,a
                                    124 ;	bsearch.c:33: for(const char *left = base; nmemb;)
      000011 E5*00            [12]  125 	mov	a,_bp
      000013 24 FB            [12]  126 	add	a,#0xfb
      000015 F8               [12]  127 	mov	r0,a
      000016 E5*00            [12]  128 	mov	a,_bp
      000018 24 06            [12]  129 	add	a,#0x06
      00001A F9               [12]  130 	mov	r1,a
      00001B E6               [12]  131 	mov	a,@r0
      00001C F7               [12]  132 	mov	@r1,a
      00001D 08               [12]  133 	inc	r0
      00001E E6               [12]  134 	mov	a,@r0
      00001F 09               [12]  135 	inc	r1
      000020 F7               [12]  136 	mov	@r1,a
      000021 08               [12]  137 	inc	r0
      000022 E6               [12]  138 	mov	a,@r0
      000023 09               [12]  139 	inc	r1
      000024 F7               [12]  140 	mov	@r1,a
      000025                        141 00109$:
      000025 E5*00            [12]  142 	mov	a,_bp
      000027 24 F9            [12]  143 	add	a,#0xf9
      000029 F8               [12]  144 	mov	r0,a
      00002A E6               [12]  145 	mov	a,@r0
      00002B 08               [12]  146 	inc	r0
      00002C 46               [12]  147 	orl	a,@r0
      00002D 70 03            [24]  148 	jnz	00129$
      00002F 02r01r1E         [24]  149 	ljmp	00107$
      000032                        150 00129$:
                                    151 ;	bsearch.c:35: const char *middle = left + nmemb / 2 * size;
      000032 E5*00            [12]  152 	mov	a,_bp
      000034 24 F9            [12]  153 	add	a,#0xf9
      000036 F8               [12]  154 	mov	r0,a
      000037 E5*00            [12]  155 	mov	a,_bp
      000039 24 04            [12]  156 	add	a,#0x04
      00003B F9               [12]  157 	mov	r1,a
      00003C E6               [12]  158 	mov	a,@r0
      00003D F7               [12]  159 	mov	@r1,a
      00003E 08               [12]  160 	inc	r0
      00003F E6               [12]  161 	mov	a,@r0
      000040 C3               [12]  162 	clr	c
      000041 13               [12]  163 	rrc	a
      000042 C7               [12]  164 	xch	a,@r1
      000043 13               [12]  165 	rrc	a
      000044 C7               [12]  166 	xch	a,@r1
      000045 09               [12]  167 	inc	r1
      000046 F7               [12]  168 	mov	@r1,a
      000047 E5*00            [12]  169 	mov	a,_bp
      000049 24 F7            [12]  170 	add	a,#0xf7
      00004B F8               [12]  171 	mov	r0,a
      00004C E6               [12]  172 	mov	a,@r0
      00004D C0 E0            [24]  173 	push	acc
      00004F 08               [12]  174 	inc	r0
      000050 E6               [12]  175 	mov	a,@r0
      000051 C0 E0            [24]  176 	push	acc
      000053 E5*00            [12]  177 	mov	a,_bp
      000055 24 04            [12]  178 	add	a,#0x04
      000057 F8               [12]  179 	mov	r0,a
      000058 86 82            [24]  180 	mov	dpl,@r0
      00005A 08               [12]  181 	inc	r0
      00005B 86 83            [24]  182 	mov	dph,@r0
      00005D 12r00r00         [24]  183 	lcall	__mulint
      000060 AE 82            [24]  184 	mov	r6,dpl
      000062 AF 83            [24]  185 	mov	r7,dph
      000064 15 81            [12]  186 	dec	sp
      000066 15 81            [12]  187 	dec	sp
      000068 E5*00            [12]  188 	mov	a,_bp
      00006A 24 06            [12]  189 	add	a,#0x06
      00006C F8               [12]  190 	mov	r0,a
      00006D EE               [12]  191 	mov	a,r6
      00006E 26               [12]  192 	add	a,@r0
      00006F FE               [12]  193 	mov	r6,a
      000070 EF               [12]  194 	mov	a,r7
      000071 08               [12]  195 	inc	r0
      000072 36               [12]  196 	addc	a,@r0
      000073 FF               [12]  197 	mov	r7,a
      000074 08               [12]  198 	inc	r0
      000075 86 05            [24]  199 	mov	ar5,@r0
                                    200 ;	bsearch.c:36: int c = (*compar)(key, middle);
      000077 8E 02            [24]  201 	mov	ar2,r6
      000079 8F 03            [24]  202 	mov	ar3,r7
      00007B 8D 04            [24]  203 	mov	ar4,r5
      00007D C0 07            [24]  204 	push	ar7
      00007F C0 06            [24]  205 	push	ar6
      000081 C0 05            [24]  206 	push	ar5
      000083 C0 02            [24]  207 	push	ar2
      000085 C0 03            [24]  208 	push	ar3
      000087 C0 04            [24]  209 	push	ar4
      000089 12r00r8E         [24]  210 	lcall	00130$
      00008C 80 18            [24]  211 	sjmp	00131$
      00008E                        212 00130$:
      00008E E5*00            [12]  213 	mov	a,_bp
      000090 24 F5            [12]  214 	add	a,#0xf5
      000092 F8               [12]  215 	mov	r0,a
      000093 E6               [12]  216 	mov	a,@r0
      000094 C0 E0            [24]  217 	push	acc
      000096 08               [12]  218 	inc	r0
      000097 E6               [12]  219 	mov	a,@r0
      000098 C0 E0            [24]  220 	push	acc
      00009A A8*00            [24]  221 	mov	r0,_bp
      00009C 08               [12]  222 	inc	r0
      00009D 86 82            [24]  223 	mov	dpl,@r0
      00009F 08               [12]  224 	inc	r0
      0000A0 86 83            [24]  225 	mov	dph,@r0
      0000A2 08               [12]  226 	inc	r0
      0000A3 86 F0            [24]  227 	mov	b,@r0
      0000A5 22               [24]  228 	ret
      0000A6                        229 00131$:
      0000A6 AB 82            [24]  230 	mov	r3,dpl
      0000A8 AC 83            [24]  231 	mov	r4,dph
      0000AA 15 81            [12]  232 	dec	sp
      0000AC 15 81            [12]  233 	dec	sp
      0000AE 15 81            [12]  234 	dec	sp
      0000B0 D0 05            [24]  235 	pop	ar5
      0000B2 D0 06            [24]  236 	pop	ar6
      0000B4 D0 07            [24]  237 	pop	ar7
                                    238 ;	bsearch.c:38: if(c < 0)
      0000B6 EC               [12]  239 	mov	a,r4
      0000B7 30 E7 13         [24]  240 	jnb	acc.7,00105$
                                    241 ;	bsearch.c:39: nmemb = nmemb / 2;	
      0000BA E5*00            [12]  242 	mov	a,_bp
      0000BC 24 04            [12]  243 	add	a,#0x04
      0000BE F8               [12]  244 	mov	r0,a
      0000BF E5*00            [12]  245 	mov	a,_bp
      0000C1 24 F9            [12]  246 	add	a,#0xf9
      0000C3 F9               [12]  247 	mov	r1,a
      0000C4 E6               [12]  248 	mov	a,@r0
      0000C5 F7               [12]  249 	mov	@r1,a
      0000C6 08               [12]  250 	inc	r0
      0000C7 E6               [12]  251 	mov	a,@r0
      0000C8 09               [12]  252 	inc	r1
      0000C9 F7               [12]  253 	mov	@r1,a
      0000CA 02r00r25         [24]  254 	ljmp	00109$
      0000CD                        255 00105$:
                                    256 ;	bsearch.c:40: else if(c > 0)
      0000CD C3               [12]  257 	clr	c
      0000CE E4               [12]  258 	clr	a
      0000CF 9B               [12]  259 	subb	a,r3
      0000D0 74 80            [12]  260 	mov	a,#(0x00 ^ 0x80)
      0000D2 8C F0            [24]  261 	mov	b,r4
      0000D4 63 F0 80         [24]  262 	xrl	b,#0x80
      0000D7 95 F0            [12]  263 	subb	a,b
      0000D9 50 3B            [24]  264 	jnc	00102$
                                    265 ;	bsearch.c:42: left = middle + size;
      0000DB E5*00            [12]  266 	mov	a,_bp
      0000DD 24 F7            [12]  267 	add	a,#0xf7
      0000DF F8               [12]  268 	mov	r0,a
      0000E0 E6               [12]  269 	mov	a,@r0
      0000E1 2E               [12]  270 	add	a,r6
      0000E2 FA               [12]  271 	mov	r2,a
      0000E3 08               [12]  272 	inc	r0
      0000E4 E6               [12]  273 	mov	a,@r0
      0000E5 3F               [12]  274 	addc	a,r7
      0000E6 FB               [12]  275 	mov	r3,a
      0000E7 8D 04            [24]  276 	mov	ar4,r5
      0000E9 E5*00            [12]  277 	mov	a,_bp
      0000EB 24 06            [12]  278 	add	a,#0x06
      0000ED F8               [12]  279 	mov	r0,a
      0000EE A6 02            [24]  280 	mov	@r0,ar2
      0000F0 08               [12]  281 	inc	r0
      0000F1 A6 03            [24]  282 	mov	@r0,ar3
      0000F3 08               [12]  283 	inc	r0
      0000F4 A6 04            [24]  284 	mov	@r0,ar4
                                    285 ;	bsearch.c:43: nmemb = (nmemb - 1) / 2;
      0000F6 E5*00            [12]  286 	mov	a,_bp
      0000F8 24 F9            [12]  287 	add	a,#0xf9
      0000FA F8               [12]  288 	mov	r0,a
      0000FB E6               [12]  289 	mov	a,@r0
      0000FC 24 FF            [12]  290 	add	a,#0xff
      0000FE FB               [12]  291 	mov	r3,a
      0000FF 08               [12]  292 	inc	r0
      000100 E6               [12]  293 	mov	a,@r0
      000101 34 FF            [12]  294 	addc	a,#0xff
      000103 FC               [12]  295 	mov	r4,a
      000104 E5*00            [12]  296 	mov	a,_bp
      000106 24 F9            [12]  297 	add	a,#0xf9
      000108 F8               [12]  298 	mov	r0,a
      000109 A6 03            [24]  299 	mov	@r0,ar3
      00010B EC               [12]  300 	mov	a,r4
      00010C C3               [12]  301 	clr	c
      00010D 13               [12]  302 	rrc	a
      00010E C6               [12]  303 	xch	a,@r0
      00010F 13               [12]  304 	rrc	a
      000110 C6               [12]  305 	xch	a,@r0
      000111 08               [12]  306 	inc	r0
      000112 F6               [12]  307 	mov	@r0,a
      000113 02r00r25         [24]  308 	ljmp	00109$
      000116                        309 00102$:
                                    310 ;	bsearch.c:46: return(middle);
      000116 8E 82            [24]  311 	mov	dpl,r6
      000118 8F 83            [24]  312 	mov	dph,r7
      00011A 8D F0            [24]  313 	mov	b,r5
      00011C 80 06            [24]  314 	sjmp	00111$
      00011E                        315 00107$:
                                    316 ;	bsearch.c:49: return(0);
      00011E 90 00 00         [24]  317 	mov	dptr,#0x0000
      000121 75 F0 00         [24]  318 	mov	b,#0x00
      000124                        319 00111$:
                                    320 ;	bsearch.c:50: }
      000124 85*00 81         [24]  321 	mov	sp,_bp
      000127 D0*00            [24]  322 	pop	_bp
      000129 22               [24]  323 	ret
                                    324 	.area CSEG    (CODE)
                                    325 	.area CONST   (CODE)
                                    326 	.area XINIT   (CODE)
                                    327 	.area CABS    (ABS,CODE)
