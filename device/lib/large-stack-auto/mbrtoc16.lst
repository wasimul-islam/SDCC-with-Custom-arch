                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbrtoc16
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbrtowc
                                     12 	.globl _mbrtoc16
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
      000000                         56 _mbrtoc16_sps_65536_16:
      000000                         57 	.ds 3
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; initialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'mbrtoc16'
                                     94 ;------------------------------------------------------------
                                     95 ;s                         Allocated to stack - _bp -5
                                     96 ;n                         Allocated to stack - _bp -7
                                     97 ;ps                        Allocated to stack - _bp -10
                                     98 ;pc16                      Allocated to stack - _bp +1
                                     99 ;codepoint                 Allocated to stack - _bp +7
                                    100 ;ret                       Allocated to stack - _bp +11
                                    101 ;low_surrogate             Allocated to registers r4 r6 
                                    102 ;sloc0                     Allocated to stack - _bp +4
                                    103 ;sps                       Allocated with name '_mbrtoc16_sps_65536_16'
                                    104 ;------------------------------------------------------------
                                    105 ;	mbrtoc16.c:34: size_t mbrtoc16(char16_t *restrict pc16, const char *restrict s, size_t n, mbstate_t *restrict ps)
                                    106 ;	-----------------------------------------
                                    107 ;	 function mbrtoc16
                                    108 ;	-----------------------------------------
      000000                        109 _mbrtoc16:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 C0*00            [24]  118 	push	_bp
      000002 85 81*00         [24]  119 	mov	_bp,sp
      000005 C0 82            [24]  120 	push	dpl
      000007 C0 83            [24]  121 	push	dph
      000009 C0 F0            [24]  122 	push	b
      00000B E5 81            [12]  123 	mov	a,sp
      00000D 24 09            [12]  124 	add	a,#0x09
      00000F F5 81            [12]  125 	mov	sp,a
                                    126 ;	mbrtoc16.c:41: if(!s)
      000011 E5*00            [12]  127 	mov	a,_bp
      000013 24 FB            [12]  128 	add	a,#0xfb
      000015 F8               [12]  129 	mov	r0,a
      000016 E6               [12]  130 	mov	a,@r0
      000017 08               [12]  131 	inc	r0
      000018 46               [12]  132 	orl	a,@r0
      000019 70 3D            [24]  133 	jnz	00102$
                                    134 ;	mbrtoc16.c:42: return(mbrtoc16(0, "", 1, ps));
      00001B E5*00            [12]  135 	mov	a,_bp
      00001D 24 F6            [12]  136 	add	a,#0xf6
      00001F F8               [12]  137 	mov	r0,a
      000020 E6               [12]  138 	mov	a,@r0
      000021 C0 E0            [24]  139 	push	acc
      000023 08               [12]  140 	inc	r0
      000024 E6               [12]  141 	mov	a,@r0
      000025 C0 E0            [24]  142 	push	acc
      000027 08               [12]  143 	inc	r0
      000028 E6               [12]  144 	mov	a,@r0
      000029 C0 E0            [24]  145 	push	acc
      00002B 74 01            [12]  146 	mov	a,#0x01
      00002D C0 E0            [24]  147 	push	acc
      00002F E4               [12]  148 	clr	a
      000030 C0 E0            [24]  149 	push	acc
      000032 74r00            [12]  150 	mov	a,#___str_0
      000034 C0 E0            [24]  151 	push	acc
      000036 74s00            [12]  152 	mov	a,#(___str_0 >> 8)
      000038 C0 E0            [24]  153 	push	acc
      00003A 74 80            [12]  154 	mov	a,#0x80
      00003C C0 E0            [24]  155 	push	acc
      00003E 90 00 00         [24]  156 	mov	dptr,#0x0000
      000041 75 F0 00         [24]  157 	mov	b,#0x00
      000044 12r00r00         [24]  158 	lcall	_mbrtoc16
      000047 AB 82            [24]  159 	mov	r3,dpl
      000049 AC 83            [24]  160 	mov	r4,dph
      00004B E5 81            [12]  161 	mov	a,sp
      00004D 24 F8            [12]  162 	add	a,#0xf8
      00004F F5 81            [12]  163 	mov	sp,a
      000051 8B 82            [24]  164 	mov	dpl,r3
      000053 8C 83            [24]  165 	mov	dph,r4
      000055 02r02rB4         [24]  166 	ljmp	00119$
      000058                        167 00102$:
                                    168 ;	mbrtoc16.c:44: if(!ps)
      000058 E5*00            [12]  169 	mov	a,_bp
      00005A 24 F6            [12]  170 	add	a,#0xf6
      00005C F8               [12]  171 	mov	r0,a
      00005D E6               [12]  172 	mov	a,@r0
      00005E 08               [12]  173 	inc	r0
      00005F 46               [12]  174 	orl	a,@r0
      000060 70 0D            [24]  175 	jnz	00104$
                                    176 ;	mbrtoc16.c:45: ps = &sps;
      000062 E5*00            [12]  177 	mov	a,_bp
      000064 24 F6            [12]  178 	add	a,#0xf6
      000066 F8               [12]  179 	mov	r0,a
      000067 76r00            [12]  180 	mov	@r0,#_mbrtoc16_sps_65536_16
      000069 08               [12]  181 	inc	r0
      00006A 76s00            [12]  182 	mov	@r0,#(_mbrtoc16_sps_65536_16 >> 8)
      00006C 08               [12]  183 	inc	r0
      00006D 76 00            [12]  184 	mov	@r0,#0x00
      00006F                        185 00104$:
                                    186 ;	mbrtoc16.c:47: if(!ps->c[0] && (ps->c[1] || ps->c[2]))
      00006F E5*00            [12]  187 	mov	a,_bp
      000071 24 F6            [12]  188 	add	a,#0xf6
      000073 F8               [12]  189 	mov	r0,a
      000074 86 02            [24]  190 	mov	ar2,@r0
      000076 08               [12]  191 	inc	r0
      000077 86 03            [24]  192 	mov	ar3,@r0
      000079 08               [12]  193 	inc	r0
      00007A 86 04            [24]  194 	mov	ar4,@r0
      00007C 8A 82            [24]  195 	mov	dpl,r2
      00007E 8B 83            [24]  196 	mov	dph,r3
      000080 8C F0            [24]  197 	mov	b,r4
      000082 12r00r00         [24]  198 	lcall	__gptrget
      000085 60 03            [24]  199 	jz	00159$
      000087 02r01r3F         [24]  200 	ljmp	00108$
      00008A                        201 00159$:
      00008A 74 01            [12]  202 	mov	a,#0x01
      00008C 2A               [12]  203 	add	a,r2
      00008D FD               [12]  204 	mov	r5,a
      00008E E4               [12]  205 	clr	a
      00008F 3B               [12]  206 	addc	a,r3
      000090 FE               [12]  207 	mov	r6,a
      000091 8C 07            [24]  208 	mov	ar7,r4
      000093 8D 82            [24]  209 	mov	dpl,r5
      000095 8E 83            [24]  210 	mov	dph,r6
      000097 8F F0            [24]  211 	mov	b,r7
      000099 12r00r00         [24]  212 	lcall	__gptrget
      00009C 70 15            [24]  213 	jnz	00107$
      00009E 74 02            [12]  214 	mov	a,#0x02
      0000A0 2A               [12]  215 	add	a,r2
      0000A1 FA               [12]  216 	mov	r2,a
      0000A2 E4               [12]  217 	clr	a
      0000A3 3B               [12]  218 	addc	a,r3
      0000A4 FB               [12]  219 	mov	r3,a
      0000A5 8A 82            [24]  220 	mov	dpl,r2
      0000A7 8B 83            [24]  221 	mov	dph,r3
      0000A9 8C F0            [24]  222 	mov	b,r4
      0000AB 12r00r00         [24]  223 	lcall	__gptrget
      0000AE 70 03            [24]  224 	jnz	00161$
      0000B0 02r01r3F         [24]  225 	ljmp	00108$
      0000B3                        226 00161$:
      0000B3                        227 00107$:
                                    228 ;	mbrtoc16.c:49: if(pc16)
      0000B3 A8*00            [24]  229 	mov	r0,_bp
      0000B5 08               [12]  230 	inc	r0
      0000B6 E6               [12]  231 	mov	a,@r0
      0000B7 08               [12]  232 	inc	r0
      0000B8 46               [12]  233 	orl	a,@r0
      0000B9 60 4E            [24]  234 	jz	00106$
                                    235 ;	mbrtoc16.c:50: *pc16 = ps->c[1] + (ps->c[2] << 8);
      0000BB E5*00            [12]  236 	mov	a,_bp
      0000BD 24 F6            [12]  237 	add	a,#0xf6
      0000BF F8               [12]  238 	mov	r0,a
      0000C0 86 02            [24]  239 	mov	ar2,@r0
      0000C2 08               [12]  240 	inc	r0
      0000C3 86 03            [24]  241 	mov	ar3,@r0
      0000C5 08               [12]  242 	inc	r0
      0000C6 86 04            [24]  243 	mov	ar4,@r0
      0000C8 74 01            [12]  244 	mov	a,#0x01
      0000CA 2A               [12]  245 	add	a,r2
      0000CB FD               [12]  246 	mov	r5,a
      0000CC E4               [12]  247 	clr	a
      0000CD 3B               [12]  248 	addc	a,r3
      0000CE FE               [12]  249 	mov	r6,a
      0000CF 8C 07            [24]  250 	mov	ar7,r4
      0000D1 8D 82            [24]  251 	mov	dpl,r5
      0000D3 8E 83            [24]  252 	mov	dph,r6
      0000D5 8F F0            [24]  253 	mov	b,r7
      0000D7 12r00r00         [24]  254 	lcall	__gptrget
      0000DA FD               [12]  255 	mov	r5,a
      0000DB 7F 00            [12]  256 	mov	r7,#0x00
      0000DD 74 02            [12]  257 	mov	a,#0x02
      0000DF 2A               [12]  258 	add	a,r2
      0000E0 FA               [12]  259 	mov	r2,a
      0000E1 E4               [12]  260 	clr	a
      0000E2 3B               [12]  261 	addc	a,r3
      0000E3 FB               [12]  262 	mov	r3,a
      0000E4 8A 82            [24]  263 	mov	dpl,r2
      0000E6 8B 83            [24]  264 	mov	dph,r3
      0000E8 8C F0            [24]  265 	mov	b,r4
      0000EA 12r00r00         [24]  266 	lcall	__gptrget
      0000ED FE               [12]  267 	mov	r6,a
      0000EE E4               [12]  268 	clr	a
      0000EF FA               [12]  269 	mov	r2,a
      0000F0 2D               [12]  270 	add	a,r5
      0000F1 FD               [12]  271 	mov	r5,a
      0000F2 EE               [12]  272 	mov	a,r6
      0000F3 3F               [12]  273 	addc	a,r7
      0000F4 FF               [12]  274 	mov	r7,a
      0000F5 A8*00            [24]  275 	mov	r0,_bp
      0000F7 08               [12]  276 	inc	r0
      0000F8 86 82            [24]  277 	mov	dpl,@r0
      0000FA 08               [12]  278 	inc	r0
      0000FB 86 83            [24]  279 	mov	dph,@r0
      0000FD 08               [12]  280 	inc	r0
      0000FE 86 F0            [24]  281 	mov	b,@r0
      000100 ED               [12]  282 	mov	a,r5
      000101 12r00r00         [24]  283 	lcall	__gptrput
      000104 A3               [24]  284 	inc	dptr
      000105 EF               [12]  285 	mov	a,r7
      000106 12r00r00         [24]  286 	lcall	__gptrput
      000109                        287 00106$:
                                    288 ;	mbrtoc16.c:51: ps->c[1] = ps->c[2] = 0;
      000109 E5*00            [12]  289 	mov	a,_bp
      00010B 24 F6            [12]  290 	add	a,#0xf6
      00010D F8               [12]  291 	mov	r0,a
      00010E 86 05            [24]  292 	mov	ar5,@r0
      000110 08               [12]  293 	inc	r0
      000111 86 06            [24]  294 	mov	ar6,@r0
      000113 08               [12]  295 	inc	r0
      000114 86 07            [24]  296 	mov	ar7,@r0
      000116 74 01            [12]  297 	mov	a,#0x01
      000118 2D               [12]  298 	add	a,r5
      000119 FA               [12]  299 	mov	r2,a
      00011A E4               [12]  300 	clr	a
      00011B 3E               [12]  301 	addc	a,r6
      00011C FB               [12]  302 	mov	r3,a
      00011D 8F 04            [24]  303 	mov	ar4,r7
      00011F 74 02            [12]  304 	mov	a,#0x02
      000121 2D               [12]  305 	add	a,r5
      000122 FD               [12]  306 	mov	r5,a
      000123 E4               [12]  307 	clr	a
      000124 3E               [12]  308 	addc	a,r6
      000125 FE               [12]  309 	mov	r6,a
      000126 8D 82            [24]  310 	mov	dpl,r5
      000128 8E 83            [24]  311 	mov	dph,r6
      00012A 8F F0            [24]  312 	mov	b,r7
      00012C E4               [12]  313 	clr	a
      00012D 12r00r00         [24]  314 	lcall	__gptrput
      000130 8A 82            [24]  315 	mov	dpl,r2
      000132 8B 83            [24]  316 	mov	dph,r3
      000134 8C F0            [24]  317 	mov	b,r4
      000136 12r00r00         [24]  318 	lcall	__gptrput
                                    319 ;	mbrtoc16.c:52: return(-3);
      000139 90 FF FD         [24]  320 	mov	dptr,#0xfffd
      00013C 02r02rB4         [24]  321 	ljmp	00119$
      00013F                        322 00108$:
                                    323 ;	mbrtoc16.c:55: ret = mbrtowc(&codepoint, s, n, ps);
      00013F E5*00            [12]  324 	mov	a,_bp
      000141 24 07            [12]  325 	add	a,#0x07
      000143 FF               [12]  326 	mov	r7,a
      000144 7E 00            [12]  327 	mov	r6,#0x00
      000146 7D 40            [12]  328 	mov	r5,#0x40
      000148 E5*00            [12]  329 	mov	a,_bp
      00014A 24 F6            [12]  330 	add	a,#0xf6
      00014C F8               [12]  331 	mov	r0,a
      00014D E6               [12]  332 	mov	a,@r0
      00014E C0 E0            [24]  333 	push	acc
      000150 08               [12]  334 	inc	r0
      000151 E6               [12]  335 	mov	a,@r0
      000152 C0 E0            [24]  336 	push	acc
      000154 08               [12]  337 	inc	r0
      000155 E6               [12]  338 	mov	a,@r0
      000156 C0 E0            [24]  339 	push	acc
      000158 E5*00            [12]  340 	mov	a,_bp
      00015A 24 F9            [12]  341 	add	a,#0xf9
      00015C F8               [12]  342 	mov	r0,a
      00015D E6               [12]  343 	mov	a,@r0
      00015E C0 E0            [24]  344 	push	acc
      000160 08               [12]  345 	inc	r0
      000161 E6               [12]  346 	mov	a,@r0
      000162 C0 E0            [24]  347 	push	acc
      000164 E5*00            [12]  348 	mov	a,_bp
      000166 24 FB            [12]  349 	add	a,#0xfb
      000168 F8               [12]  350 	mov	r0,a
      000169 E6               [12]  351 	mov	a,@r0
      00016A C0 E0            [24]  352 	push	acc
      00016C 08               [12]  353 	inc	r0
      00016D E6               [12]  354 	mov	a,@r0
      00016E C0 E0            [24]  355 	push	acc
      000170 08               [12]  356 	inc	r0
      000171 E6               [12]  357 	mov	a,@r0
      000172 C0 E0            [24]  358 	push	acc
      000174 8F 82            [24]  359 	mov	dpl,r7
      000176 8E 83            [24]  360 	mov	dph,r6
      000178 8D F0            [24]  361 	mov	b,r5
      00017A 12r00r00         [24]  362 	lcall	_mbrtowc
      00017D AE 82            [24]  363 	mov	r6,dpl
      00017F AF 83            [24]  364 	mov	r7,dph
      000181 E5 81            [12]  365 	mov	a,sp
      000183 24 F8            [12]  366 	add	a,#0xf8
      000185 F5 81            [12]  367 	mov	sp,a
      000187 E5*00            [12]  368 	mov	a,_bp
      000189 24 0B            [12]  369 	add	a,#0x0b
      00018B F8               [12]  370 	mov	r0,a
      00018C A6 06            [24]  371 	mov	@r0,ar6
      00018E 08               [12]  372 	inc	r0
      00018F A6 07            [24]  373 	mov	@r0,ar7
                                    374 ;	mbrtoc16.c:57: if(ret > MB_LEN_MAX)
      000191 E5*00            [12]  375 	mov	a,_bp
      000193 24 0B            [12]  376 	add	a,#0x0b
      000195 F8               [12]  377 	mov	r0,a
      000196 C3               [12]  378 	clr	c
      000197 74 04            [12]  379 	mov	a,#0x04
      000199 96               [12]  380 	subb	a,@r0
      00019A E4               [12]  381 	clr	a
      00019B 08               [12]  382 	inc	r0
      00019C 96               [12]  383 	subb	a,@r0
      00019D 50 0D            [24]  384 	jnc	00112$
                                    385 ;	mbrtoc16.c:58: return(ret);
      00019F E5*00            [12]  386 	mov	a,_bp
      0001A1 24 0B            [12]  387 	add	a,#0x0b
      0001A3 F8               [12]  388 	mov	r0,a
      0001A4 86 82            [24]  389 	mov	dpl,@r0
      0001A6 08               [12]  390 	inc	r0
      0001A7 86 83            [24]  391 	mov	dph,@r0
      0001A9 02r02rB4         [24]  392 	ljmp	00119$
      0001AC                        393 00112$:
                                    394 ;	mbrtoc16.c:60: if (codepoint <= 0xffff) // Basic multilingual plane
      0001AC E5*00            [12]  395 	mov	a,_bp
      0001AE 24 07            [12]  396 	add	a,#0x07
      0001B0 F8               [12]  397 	mov	r0,a
      0001B1 C3               [12]  398 	clr	c
      0001B2 74 FF            [12]  399 	mov	a,#0xff
      0001B4 96               [12]  400 	subb	a,@r0
      0001B5 74 FF            [12]  401 	mov	a,#0xff
      0001B7 08               [12]  402 	inc	r0
      0001B8 96               [12]  403 	subb	a,@r0
      0001B9 E4               [12]  404 	clr	a
      0001BA 08               [12]  405 	inc	r0
      0001BB 96               [12]  406 	subb	a,@r0
      0001BC E4               [12]  407 	clr	a
      0001BD 08               [12]  408 	inc	r0
      0001BE 96               [12]  409 	subb	a,@r0
      0001BF 40 33            [24]  410 	jc	00116$
                                    411 ;	mbrtoc16.c:62: if(pc16)
      0001C1 A8*00            [24]  412 	mov	r0,_bp
      0001C3 08               [12]  413 	inc	r0
      0001C4 E6               [12]  414 	mov	a,@r0
      0001C5 08               [12]  415 	inc	r0
      0001C6 46               [12]  416 	orl	a,@r0
      0001C7 60 1E            [24]  417 	jz	00114$
                                    418 ;	mbrtoc16.c:63: *pc16 = codepoint;
      0001C9 E5*00            [12]  419 	mov	a,_bp
      0001CB 24 07            [12]  420 	add	a,#0x07
      0001CD F8               [12]  421 	mov	r0,a
      0001CE 86 05            [24]  422 	mov	ar5,@r0
      0001D0 08               [12]  423 	inc	r0
      0001D1 86 04            [24]  424 	mov	ar4,@r0
      0001D3 A8*00            [24]  425 	mov	r0,_bp
      0001D5 08               [12]  426 	inc	r0
      0001D6 86 82            [24]  427 	mov	dpl,@r0
      0001D8 08               [12]  428 	inc	r0
      0001D9 86 83            [24]  429 	mov	dph,@r0
      0001DB 08               [12]  430 	inc	r0
      0001DC 86 F0            [24]  431 	mov	b,@r0
      0001DE ED               [12]  432 	mov	a,r5
      0001DF 12r00r00         [24]  433 	lcall	__gptrput
      0001E2 A3               [24]  434 	inc	dptr
      0001E3 EC               [12]  435 	mov	a,r4
      0001E4 12r00r00         [24]  436 	lcall	__gptrput
      0001E7                        437 00114$:
                                    438 ;	mbrtoc16.c:64: return(ret);
      0001E7 E5*00            [12]  439 	mov	a,_bp
      0001E9 24 0B            [12]  440 	add	a,#0x0b
      0001EB F8               [12]  441 	mov	r0,a
      0001EC 86 82            [24]  442 	mov	dpl,@r0
      0001EE 08               [12]  443 	inc	r0
      0001EF 86 83            [24]  444 	mov	dph,@r0
      0001F1 02r02rB4         [24]  445 	ljmp	00119$
      0001F4                        446 00116$:
                                    447 ;	mbrtoc16.c:67: codepoint -= 0x100000;
      0001F4 E5*00            [12]  448 	mov	a,_bp
      0001F6 24 07            [12]  449 	add	a,#0x07
      0001F8 F8               [12]  450 	mov	r0,a
      0001F9 08               [12]  451 	inc	r0
      0001FA 08               [12]  452 	inc	r0
      0001FB E6               [12]  453 	mov	a,@r0
      0001FC 24 F0            [12]  454 	add	a,#0xf0
      0001FE F6               [12]  455 	mov	@r0,a
      0001FF 08               [12]  456 	inc	r0
      000200 E6               [12]  457 	mov	a,@r0
      000201 34 FF            [12]  458 	addc	a,#0xff
      000203 F6               [12]  459 	mov	@r0,a
                                    460 ;	mbrtoc16.c:68: if(pc16)
      000204 A8*00            [24]  461 	mov	r0,_bp
      000206 08               [12]  462 	inc	r0
      000207 E6               [12]  463 	mov	a,@r0
      000208 08               [12]  464 	inc	r0
      000209 46               [12]  465 	orl	a,@r0
      00020A 60 40            [24]  466 	jz	00118$
                                    467 ;	mbrtoc16.c:69: *pc16 = ((codepoint >> 10) & 0x3ff) + 0xd800;
      00020C E5*00            [12]  468 	mov	a,_bp
      00020E 24 07            [12]  469 	add	a,#0x07
      000210 F8               [12]  470 	mov	r0,a
      000211 08               [12]  471 	inc	r0
      000212 86 02            [24]  472 	mov	ar2,@r0
      000214 08               [12]  473 	inc	r0
      000215 E6               [12]  474 	mov	a,@r0
      000216 C3               [12]  475 	clr	c
      000217 13               [12]  476 	rrc	a
      000218 CA               [12]  477 	xch	a,r2
      000219 13               [12]  478 	rrc	a
      00021A CA               [12]  479 	xch	a,r2
      00021B C3               [12]  480 	clr	c
      00021C 13               [12]  481 	rrc	a
      00021D CA               [12]  482 	xch	a,r2
      00021E 13               [12]  483 	rrc	a
      00021F CA               [12]  484 	xch	a,r2
      000220 FB               [12]  485 	mov	r3,a
      000221 08               [12]  486 	inc	r0
      000222 E6               [12]  487 	mov	a,@r0
      000223 03               [12]  488 	rr	a
      000224 03               [12]  489 	rr	a
      000225 54 C0            [12]  490 	anl	a,#0xc0
      000227 4B               [12]  491 	orl	a,r3
      000228 FB               [12]  492 	mov	r3,a
      000229 E6               [12]  493 	mov	a,@r0
      00022A 03               [12]  494 	rr	a
      00022B 03               [12]  495 	rr	a
      00022C 54 3F            [12]  496 	anl	a,#0x3f
      00022E FC               [12]  497 	mov	r4,a
      00022F 7D 00            [12]  498 	mov	r5,#0x00
      000231 53 03 03         [24]  499 	anl	ar3,#0x03
      000234 74 D8            [12]  500 	mov	a,#0xd8
      000236 2B               [12]  501 	add	a,r3
      000237 FB               [12]  502 	mov	r3,a
      000238 A8*00            [24]  503 	mov	r0,_bp
      00023A 08               [12]  504 	inc	r0
      00023B 86 82            [24]  505 	mov	dpl,@r0
      00023D 08               [12]  506 	inc	r0
      00023E 86 83            [24]  507 	mov	dph,@r0
      000240 08               [12]  508 	inc	r0
      000241 86 F0            [24]  509 	mov	b,@r0
      000243 EA               [12]  510 	mov	a,r2
      000244 12r00r00         [24]  511 	lcall	__gptrput
      000247 A3               [24]  512 	inc	dptr
      000248 EB               [12]  513 	mov	a,r3
      000249 12r00r00         [24]  514 	lcall	__gptrput
      00024C                        515 00118$:
                                    516 ;	mbrtoc16.c:70: low_surrogate = (codepoint & 0x3ff) + 0xdc00;
      00024C E5*00            [12]  517 	mov	a,_bp
      00024E 24 07            [12]  518 	add	a,#0x07
      000250 F8               [12]  519 	mov	r0,a
      000251 86 04            [24]  520 	mov	ar4,@r0
      000253 08               [12]  521 	inc	r0
      000254 86 05            [24]  522 	mov	ar5,@r0
      000256 53 05 03         [24]  523 	anl	ar5,#0x03
      000259 74 DC            [12]  524 	mov	a,#0xdc
      00025B 2D               [12]  525 	add	a,r5
      00025C FE               [12]  526 	mov	r6,a
                                    527 ;	mbrtoc16.c:71: ps->c[0] = 0;
      00025D E5*00            [12]  528 	mov	a,_bp
      00025F 24 F6            [12]  529 	add	a,#0xf6
      000261 F8               [12]  530 	mov	r0,a
      000262 86 02            [24]  531 	mov	ar2,@r0
      000264 08               [12]  532 	inc	r0
      000265 86 03            [24]  533 	mov	ar3,@r0
      000267 08               [12]  534 	inc	r0
      000268 86 05            [24]  535 	mov	ar5,@r0
      00026A 8A 82            [24]  536 	mov	dpl,r2
      00026C 8B 83            [24]  537 	mov	dph,r3
      00026E 8D F0            [24]  538 	mov	b,r5
      000270 E4               [12]  539 	clr	a
      000271 12r00r00         [24]  540 	lcall	__gptrput
                                    541 ;	mbrtoc16.c:72: ps->c[1] = low_surrogate & 0xff;
      000274 E5*00            [12]  542 	mov	a,_bp
      000276 24 04            [12]  543 	add	a,#0x04
      000278 F8               [12]  544 	mov	r0,a
      000279 74 01            [12]  545 	mov	a,#0x01
      00027B 2A               [12]  546 	add	a,r2
      00027C F6               [12]  547 	mov	@r0,a
      00027D E4               [12]  548 	clr	a
      00027E 3B               [12]  549 	addc	a,r3
      00027F 08               [12]  550 	inc	r0
      000280 F6               [12]  551 	mov	@r0,a
      000281 08               [12]  552 	inc	r0
      000282 A6 05            [24]  553 	mov	@r0,ar5
      000284 8C 07            [24]  554 	mov	ar7,r4
      000286 E5*00            [12]  555 	mov	a,_bp
      000288 24 04            [12]  556 	add	a,#0x04
      00028A F8               [12]  557 	mov	r0,a
      00028B 86 82            [24]  558 	mov	dpl,@r0
      00028D 08               [12]  559 	inc	r0
      00028E 86 83            [24]  560 	mov	dph,@r0
      000290 08               [12]  561 	inc	r0
      000291 86 F0            [24]  562 	mov	b,@r0
      000293 EF               [12]  563 	mov	a,r7
      000294 12r00r00         [24]  564 	lcall	__gptrput
                                    565 ;	mbrtoc16.c:73: ps->c[2] = low_surrogate >> 8;
      000297 74 02            [12]  566 	mov	a,#0x02
      000299 2A               [12]  567 	add	a,r2
      00029A FA               [12]  568 	mov	r2,a
      00029B E4               [12]  569 	clr	a
      00029C 3B               [12]  570 	addc	a,r3
      00029D FB               [12]  571 	mov	r3,a
      00029E 8E 07            [24]  572 	mov	ar7,r6
      0002A0 8A 82            [24]  573 	mov	dpl,r2
      0002A2 8B 83            [24]  574 	mov	dph,r3
      0002A4 8D F0            [24]  575 	mov	b,r5
      0002A6 EF               [12]  576 	mov	a,r7
      0002A7 12r00r00         [24]  577 	lcall	__gptrput
                                    578 ;	mbrtoc16.c:75: return(ret);
      0002AA E5*00            [12]  579 	mov	a,_bp
      0002AC 24 0B            [12]  580 	add	a,#0x0b
      0002AE F8               [12]  581 	mov	r0,a
      0002AF 86 82            [24]  582 	mov	dpl,@r0
      0002B1 08               [12]  583 	inc	r0
      0002B2 86 83            [24]  584 	mov	dph,@r0
      0002B4                        585 00119$:
                                    586 ;	mbrtoc16.c:76: }
      0002B4 85*00 81         [24]  587 	mov	sp,_bp
      0002B7 D0*00            [24]  588 	pop	_bp
      0002B9 22               [24]  589 	ret
                                    590 	.area CSEG    (CODE)
                                    591 	.area CONST   (CODE)
                                    592 	.area CONST   (CODE)
      000000                        593 ___str_0:
      000000 00                     594 	.db 0x00
                                    595 	.area CSEG    (CODE)
                                    596 	.area XINIT   (CODE)
                                    597 	.area CABS    (ABS,CODE)
