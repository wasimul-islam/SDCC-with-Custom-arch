                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __stdc_count_onesull
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___stdc_count_onesull
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function '__stdc_count_onesull'
                                     91 ;------------------------------------------------------------
                                     92 ;value                     Allocated to stack - _bp +1
                                     93 ;count                     Allocated to registers r7 
                                     94 ;i                         Allocated to registers r6 
                                     95 ;sloc0                     Allocated to stack - _bp +9
                                     96 ;------------------------------------------------------------
                                     97 ;	__stdc_count_onesull.c:37: int_fast8_t __stdc_count_onesull(unsigned long long value)
                                     98 ;	-----------------------------------------
                                     99 ;	 function __stdc_count_onesull
                                    100 ;	-----------------------------------------
      000000                        101 ___stdc_count_onesull:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 C0 82            [24]  112 	push	dpl
      000007 C0 83            [24]  113 	push	dph
      000009 C0 F0            [24]  114 	push	b
      00000B C0 E0            [24]  115 	push	acc
      00000D C0 04            [24]  116 	push	ar4
      00000F C0 05            [24]  117 	push	ar5
      000011 C0 06            [24]  118 	push	ar6
      000013 C0 07            [24]  119 	push	ar7
      000015 E5 81            [12]  120 	mov	a,sp
      000017 24 08            [12]  121 	add	a,#0x08
      000019 F5 81            [12]  122 	mov	sp,a
                                    123 ;	__stdc_count_onesull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      00001B 7F 00            [12]  124 	mov	r7,#0x00
      00001D 7E 00            [12]  125 	mov	r6,#0x00
      00001F                        126 00105$:
      00001F BE 40 00         [24]  127 	cjne	r6,#0x40,00122$
      000022                        128 00122$:
      000022 40 03            [24]  129 	jc	00123$
      000024 02r00rC6         [24]  130 	ljmp	00103$
      000027                        131 00123$:
                                    132 ;	__stdc_count_onesull.c:41: if(value & (1ull << i))
      000027 C0 07            [24]  133 	push	ar7
      000029 8E F0            [24]  134 	mov	b,r6
      00002B 05 F0            [12]  135 	inc	b
      00002D E5*00            [12]  136 	mov	a,_bp
      00002F 24 09            [12]  137 	add	a,#0x09
      000031 F8               [12]  138 	mov	r0,a
      000032 76 01            [12]  139 	mov	@r0,#0x01
      000034 08               [12]  140 	inc	r0
      000035 76 00            [12]  141 	mov	@r0,#0x00
      000037 08               [12]  142 	inc	r0
      000038 76 00            [12]  143 	mov	@r0,#0x00
      00003A 08               [12]  144 	inc	r0
      00003B 76 00            [12]  145 	mov	@r0,#0x00
      00003D 08               [12]  146 	inc	r0
      00003E 76 00            [12]  147 	mov	@r0,#0x00
      000040 08               [12]  148 	inc	r0
      000041 76 00            [12]  149 	mov	@r0,#0x00
      000043 08               [12]  150 	inc	r0
      000044 76 00            [12]  151 	mov	@r0,#0x00
      000046 08               [12]  152 	inc	r0
      000047 76 00            [12]  153 	mov	@r0,#0x00
      000049 18               [12]  154 	dec	r0
      00004A 18               [12]  155 	dec	r0
      00004B 18               [12]  156 	dec	r0
      00004C 18               [12]  157 	dec	r0
      00004D 18               [12]  158 	dec	r0
      00004E 18               [12]  159 	dec	r0
      00004F 18               [12]  160 	dec	r0
      000050 80 26            [24]  161 	sjmp	00125$
      000052                        162 00124$:
      000052 E6               [12]  163 	mov	a,@r0
      000053 26               [12]  164 	add	a,@r0
      000054 F6               [12]  165 	mov	@r0,a
      000055 08               [12]  166 	inc	r0
      000056 E6               [12]  167 	mov	a,@r0
      000057 33               [12]  168 	rlc	a
      000058 F6               [12]  169 	mov	@r0,a
      000059 08               [12]  170 	inc	r0
      00005A E6               [12]  171 	mov	a,@r0
      00005B 33               [12]  172 	rlc	a
      00005C F6               [12]  173 	mov	@r0,a
      00005D 08               [12]  174 	inc	r0
      00005E E6               [12]  175 	mov	a,@r0
      00005F 33               [12]  176 	rlc	a
      000060 F6               [12]  177 	mov	@r0,a
      000061 08               [12]  178 	inc	r0
      000062 E6               [12]  179 	mov	a,@r0
      000063 33               [12]  180 	rlc	a
      000064 F6               [12]  181 	mov	@r0,a
      000065 08               [12]  182 	inc	r0
      000066 E6               [12]  183 	mov	a,@r0
      000067 33               [12]  184 	rlc	a
      000068 F6               [12]  185 	mov	@r0,a
      000069 08               [12]  186 	inc	r0
      00006A E6               [12]  187 	mov	a,@r0
      00006B 33               [12]  188 	rlc	a
      00006C F6               [12]  189 	mov	@r0,a
      00006D 08               [12]  190 	inc	r0
      00006E E6               [12]  191 	mov	a,@r0
      00006F 33               [12]  192 	rlc	a
      000070 F6               [12]  193 	mov	@r0,a
      000071 18               [12]  194 	dec	r0
      000072 18               [12]  195 	dec	r0
      000073 18               [12]  196 	dec	r0
      000074 18               [12]  197 	dec	r0
      000075 18               [12]  198 	dec	r0
      000076 18               [12]  199 	dec	r0
      000077 18               [12]  200 	dec	r0
      000078                        201 00125$:
      000078 D5 F0 D7         [24]  202 	djnz	b,00124$
      00007B A8*00            [24]  203 	mov	r0,_bp
      00007D 08               [12]  204 	inc	r0
      00007E E5*00            [12]  205 	mov	a,_bp
      000080 24 09            [12]  206 	add	a,#0x09
      000082 F9               [12]  207 	mov	r1,a
      000083 E6               [12]  208 	mov	a,@r0
      000084 57               [12]  209 	anl	a,@r1
      000085 F7               [12]  210 	mov	@r1,a
      000086 08               [12]  211 	inc	r0
      000087 E6               [12]  212 	mov	a,@r0
      000088 09               [12]  213 	inc	r1
      000089 57               [12]  214 	anl	a,@r1
      00008A F7               [12]  215 	mov	@r1,a
      00008B 08               [12]  216 	inc	r0
      00008C E6               [12]  217 	mov	a,@r0
      00008D 09               [12]  218 	inc	r1
      00008E 57               [12]  219 	anl	a,@r1
      00008F F7               [12]  220 	mov	@r1,a
      000090 08               [12]  221 	inc	r0
      000091 E6               [12]  222 	mov	a,@r0
      000092 09               [12]  223 	inc	r1
      000093 57               [12]  224 	anl	a,@r1
      000094 F7               [12]  225 	mov	@r1,a
      000095 08               [12]  226 	inc	r0
      000096 E6               [12]  227 	mov	a,@r0
      000097 09               [12]  228 	inc	r1
      000098 57               [12]  229 	anl	a,@r1
      000099 F7               [12]  230 	mov	@r1,a
      00009A 08               [12]  231 	inc	r0
      00009B E6               [12]  232 	mov	a,@r0
      00009C 09               [12]  233 	inc	r1
      00009D 57               [12]  234 	anl	a,@r1
      00009E F7               [12]  235 	mov	@r1,a
      00009F 08               [12]  236 	inc	r0
      0000A0 E6               [12]  237 	mov	a,@r0
      0000A1 09               [12]  238 	inc	r1
      0000A2 57               [12]  239 	anl	a,@r1
      0000A3 F7               [12]  240 	mov	@r1,a
      0000A4 08               [12]  241 	inc	r0
      0000A5 E6               [12]  242 	mov	a,@r0
      0000A6 09               [12]  243 	inc	r1
      0000A7 57               [12]  244 	anl	a,@r1
      0000A8 F7               [12]  245 	mov	@r1,a
      0000A9 D0 07            [24]  246 	pop	ar7
      0000AB E5*00            [12]  247 	mov	a,_bp
      0000AD 24 09            [12]  248 	add	a,#0x09
      0000AF F8               [12]  249 	mov	r0,a
      0000B0 E6               [12]  250 	mov	a,@r0
      0000B1 08               [12]  251 	inc	r0
      0000B2 46               [12]  252 	orl	a,@r0
      0000B3 08               [12]  253 	inc	r0
      0000B4 46               [12]  254 	orl	a,@r0
      0000B5 08               [12]  255 	inc	r0
      0000B6 46               [12]  256 	orl	a,@r0
      0000B7 08               [12]  257 	inc	r0
      0000B8 46               [12]  258 	orl	a,@r0
      0000B9 08               [12]  259 	inc	r0
      0000BA 46               [12]  260 	orl	a,@r0
      0000BB 08               [12]  261 	inc	r0
      0000BC 46               [12]  262 	orl	a,@r0
      0000BD 08               [12]  263 	inc	r0
      0000BE 46               [12]  264 	orl	a,@r0
      0000BF 60 01            [24]  265 	jz	00106$
                                    266 ;	__stdc_count_onesull.c:42: count++;
      0000C1 0F               [12]  267 	inc	r7
      0000C2                        268 00106$:
                                    269 ;	__stdc_count_onesull.c:40: for(uint_fast8_t i = 0; i < ULLONG_WIDTH; i++)
      0000C2 0E               [12]  270 	inc	r6
      0000C3 02r00r1F         [24]  271 	ljmp	00105$
      0000C6                        272 00103$:
                                    273 ;	__stdc_count_onesull.c:43: return count;
      0000C6 8F 82            [24]  274 	mov	dpl,r7
                                    275 ;	__stdc_count_onesull.c:44: }
      0000C8 85*00 81         [24]  276 	mov	sp,_bp
      0000CB D0*00            [24]  277 	pop	_bp
      0000CD 22               [24]  278 	ret
                                    279 	.area CSEG    (CODE)
                                    280 	.area CONST   (CODE)
                                    281 	.area XINIT   (CODE)
                                    282 	.area CABS    (ABS,CODE)
