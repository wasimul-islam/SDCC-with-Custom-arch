                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sincoshf
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sincoshf
                                     12 	.globl _expf
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; uninitialized external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; initialized external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'sincoshf'
                                    106 ;------------------------------------------------------------
                                    107 ;iscosh                    Allocated to stack - _bp -3
                                    108 ;x                         Allocated to stack - _bp +1
                                    109 ;y                         Allocated to registers r7 r6 r5 r4 
                                    110 ;w                         Allocated to registers r7 r6 r5 r4 
                                    111 ;z                         Allocated to stack - _bp +13
                                    112 ;sign                      Allocated to registers b0 
                                    113 ;sloc0                     Allocated to stack - _bp +5
                                    114 ;sloc1                     Allocated to stack - _bp +22
                                    115 ;sloc2                     Allocated to stack - _bp +9
                                    116 ;------------------------------------------------------------
                                    117 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    118 ;	-----------------------------------------
                                    119 ;	 function sincoshf
                                    120 ;	-----------------------------------------
      000000                        121 _sincoshf:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 C0*00            [24]  130 	push	_bp
      000002 85 81*00         [24]  131 	mov	_bp,sp
      000005 C0 82            [24]  132 	push	dpl
      000007 C0 83            [24]  133 	push	dph
      000009 C0 F0            [24]  134 	push	b
      00000B C0 E0            [24]  135 	push	acc
      00000D E5 81            [12]  136 	mov	a,sp
      00000F 24 0C            [12]  137 	add	a,#0x0c
      000011 F5 81            [12]  138 	mov	sp,a
                                    139 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  140 	clr	a
      000014 C0 E0            [24]  141 	push	acc
      000016 C0 E0            [24]  142 	push	acc
      000018 C0 E0            [24]  143 	push	acc
      00001A C0 E0            [24]  144 	push	acc
      00001C A8*00            [24]  145 	mov	r0,_bp
      00001E 08               [12]  146 	inc	r0
      00001F 86 82            [24]  147 	mov	dpl,@r0
      000021 08               [12]  148 	inc	r0
      000022 86 83            [24]  149 	mov	dph,@r0
      000024 08               [12]  150 	inc	r0
      000025 86 F0            [24]  151 	mov	b,@r0
      000027 08               [12]  152 	inc	r0
      000028 E6               [12]  153 	mov	a,@r0
      000029 12r00r00         [24]  154 	lcall	___fslt
      00002C AB 82            [24]  155 	mov	r3,dpl
      00002E E5 81            [12]  156 	mov	a,sp
      000030 24 FC            [12]  157 	add	a,#0xfc
      000032 F5 81            [12]  158 	mov	sp,a
      000034 EB               [12]  159 	mov	a,r3
      000035 60 14            [24]  160 	jz	00102$
      000037 A8*00            [24]  161 	mov	r0,_bp
      000039 08               [12]  162 	inc	r0
      00003A 86 07            [24]  163 	mov	ar7,@r0
      00003C 08               [12]  164 	inc	r0
      00003D 86 06            [24]  165 	mov	ar6,@r0
      00003F 08               [12]  166 	inc	r0
      000040 86 05            [24]  167 	mov	ar5,@r0
      000042 08               [12]  168 	inc	r0
      000043 E6               [12]  169 	mov	a,@r0
      000044 B2 E7            [12]  170 	cpl	acc.7
      000046 FC               [12]  171 	mov	r4,a
                                    172 ;	assignBit
      000047 D2*00            [12]  173 	setb	b0
      000049 80 10            [24]  174 	sjmp	00103$
      00004B                        175 00102$:
                                    176 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  177 	mov	r0,_bp
      00004D 08               [12]  178 	inc	r0
      00004E 86 07            [24]  179 	mov	ar7,@r0
      000050 08               [12]  180 	inc	r0
      000051 86 06            [24]  181 	mov	ar6,@r0
      000053 08               [12]  182 	inc	r0
      000054 86 05            [24]  183 	mov	ar5,@r0
      000056 08               [12]  184 	inc	r0
      000057 86 04            [24]  185 	mov	ar4,@r0
                                    186 ;	assignBit
      000059 C2*00            [12]  187 	clr	b0
      00005B                        188 00103$:
                                    189 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  190 	push	ar7
      00005D C0 06            [24]  191 	push	ar6
      00005F C0 05            [24]  192 	push	ar5
      000061 C0 04            [24]  193 	push	ar4
      000063 C0*00            [24]  194 	push	bits
      000065 C0 07            [24]  195 	push	ar7
      000067 C0 06            [24]  196 	push	ar6
      000069 C0 05            [24]  197 	push	ar5
      00006B C0 04            [24]  198 	push	ar4
      00006D 90 00 00         [24]  199 	mov	dptr,#0x0000
      000070 75 F0 80         [24]  200 	mov	b,#0x80
      000073 74 3F            [12]  201 	mov	a,#0x3f
      000075 12r00r00         [24]  202 	lcall	___fslt
      000078 AB 82            [24]  203 	mov	r3,dpl
      00007A E5 81            [12]  204 	mov	a,sp
      00007C 24 FC            [12]  205 	add	a,#0xfc
      00007E F5 81            [12]  206 	mov	sp,a
      000080 D0*00            [24]  207 	pop	bits
      000082 D0 04            [24]  208 	pop	ar4
      000084 D0 05            [24]  209 	pop	ar5
      000086 D0 06            [24]  210 	pop	ar6
      000088 D0 07            [24]  211 	pop	ar7
      00008A EB               [12]  212 	mov	a,r3
      00008B 70 0B            [24]  213 	jnz	00117$
      00008D E5*00            [12]  214 	mov	a,_bp
      00008F 24 FD            [12]  215 	add	a,#0xfd
      000091 F8               [12]  216 	mov	r0,a
      000092 E6               [12]  217 	mov	a,@r0
      000093 70 03            [24]  218 	jnz	00160$
      000095 02r02r76         [24]  219 	ljmp	00118$
      000098                        220 00160$:
      000098                        221 00117$:
                                    222 ;	sincoshf.c:66: if(y>YBAR)
      000098 C0 07            [24]  223 	push	ar7
      00009A C0 06            [24]  224 	push	ar6
      00009C C0 05            [24]  225 	push	ar5
      00009E C0 04            [24]  226 	push	ar4
      0000A0 C0*00            [24]  227 	push	bits
      0000A2 C0 07            [24]  228 	push	ar7
      0000A4 C0 06            [24]  229 	push	ar6
      0000A6 C0 05            [24]  230 	push	ar5
      0000A8 C0 04            [24]  231 	push	ar4
      0000AA 90 00 00         [24]  232 	mov	dptr,#0x0000
      0000AD 75 F0 10         [24]  233 	mov	b,#0x10
      0000B0 74 41            [12]  234 	mov	a,#0x41
      0000B2 12r00r00         [24]  235 	lcall	___fslt
      0000B5 AB 82            [24]  236 	mov	r3,dpl
      0000B7 E5 81            [12]  237 	mov	a,sp
      0000B9 24 FC            [12]  238 	add	a,#0xfc
      0000BB F5 81            [12]  239 	mov	sp,a
      0000BD D0*00            [24]  240 	pop	bits
      0000BF D0 04            [24]  241 	pop	ar4
      0000C1 D0 05            [24]  242 	pop	ar5
      0000C3 D0 06            [24]  243 	pop	ar6
      0000C5 D0 07            [24]  244 	pop	ar7
      0000C7 EB               [12]  245 	mov	a,r3
      0000C8 70 03            [24]  246 	jnz	00161$
      0000CA 02r01rB9         [24]  247 	ljmp	00110$
      0000CD                        248 00161$:
                                    249 ;	sincoshf.c:68: w=y-K1;
      0000CD C0*00            [24]  250 	push	bits
      0000CF E4               [12]  251 	clr	a
      0000D0 C0 E0            [24]  252 	push	acc
      0000D2 74 73            [12]  253 	mov	a,#0x73
      0000D4 C0 E0            [24]  254 	push	acc
      0000D6 74 31            [12]  255 	mov	a,#0x31
      0000D8 C0 E0            [24]  256 	push	acc
      0000DA 74 3F            [12]  257 	mov	a,#0x3f
      0000DC C0 E0            [24]  258 	push	acc
      0000DE 8F 82            [24]  259 	mov	dpl,r7
      0000E0 8E 83            [24]  260 	mov	dph,r6
      0000E2 8D F0            [24]  261 	mov	b,r5
      0000E4 EC               [12]  262 	mov	a,r4
      0000E5 12r00r00         [24]  263 	lcall	___fssub
      0000E8 AF 82            [24]  264 	mov	r7,dpl
      0000EA AE 83            [24]  265 	mov	r6,dph
      0000EC AD F0            [24]  266 	mov	r5,b
      0000EE FC               [12]  267 	mov	r4,a
      0000EF E5 81            [12]  268 	mov	a,sp
      0000F1 24 FC            [12]  269 	add	a,#0xfc
      0000F3 F5 81            [12]  270 	mov	sp,a
      0000F5 D0*00            [24]  271 	pop	bits
                                    272 ;	sincoshf.c:69: if (w>WMAX)
      0000F7 C0 07            [24]  273 	push	ar7
      0000F9 C0 06            [24]  274 	push	ar6
      0000FB C0 05            [24]  275 	push	ar5
      0000FD C0 04            [24]  276 	push	ar4
      0000FF C0*00            [24]  277 	push	bits
      000101 C0 07            [24]  278 	push	ar7
      000103 C0 06            [24]  279 	push	ar6
      000105 C0 05            [24]  280 	push	ar5
      000107 C0 04            [24]  281 	push	ar4
      000109 90 BD CF         [24]  282 	mov	dptr,#0xbdcf
      00010C 75 F0 33         [24]  283 	mov	b,#0x33
      00010F 74 42            [12]  284 	mov	a,#0x42
      000111 12r00r00         [24]  285 	lcall	___fslt
      000114 AB 82            [24]  286 	mov	r3,dpl
      000116 E5 81            [12]  287 	mov	a,sp
      000118 24 FC            [12]  288 	add	a,#0xfc
      00011A F5 81            [12]  289 	mov	sp,a
      00011C D0*00            [24]  290 	pop	bits
      00011E D0 04            [24]  291 	pop	ar4
      000120 D0 05            [24]  292 	pop	ar5
      000122 D0 06            [24]  293 	pop	ar6
      000124 D0 07            [24]  294 	pop	ar7
      000126 EB               [12]  295 	mov	a,r3
      000127 60 14            [24]  296 	jz	00105$
                                    297 ;	sincoshf.c:71: errno=ERANGE;
      000129 90r00r00         [24]  298 	mov	dptr,#_errno
      00012C 74 22            [12]  299 	mov	a,#0x22
      00012E F0               [24]  300 	movx	@dptr,a
      00012F E4               [12]  301 	clr	a
      000130 A3               [24]  302 	inc	dptr
      000131 F0               [24]  303 	movx	@dptr,a
                                    304 ;	sincoshf.c:72: z=HUGE_VALF;
      000132 7F FF            [12]  305 	mov	r7,#0xff
      000134 7E FF            [12]  306 	mov	r6,#0xff
      000136 7D 7F            [12]  307 	mov	r5,#0x7f
      000138 7C 7F            [12]  308 	mov	r4,#0x7f
      00013A 02r02r69         [24]  309 	ljmp	00111$
      00013D                        310 00105$:
                                    311 ;	sincoshf.c:76: z=expf(w);
      00013D 8F 82            [24]  312 	mov	dpl,r7
      00013F 8E 83            [24]  313 	mov	dph,r6
      000141 8D F0            [24]  314 	mov	b,r5
      000143 EC               [12]  315 	mov	a,r4
      000144 C0*00            [24]  316 	push	bits
      000146 12r00r00         [24]  317 	lcall	_expf
      000149 C8               [12]  318 	xch	a,r0
      00014A E5*00            [12]  319 	mov	a,_bp
      00014C 24 05            [12]  320 	add	a,#0x05
      00014E C8               [12]  321 	xch	a,r0
      00014F A6 82            [24]  322 	mov	@r0,dpl
      000151 08               [12]  323 	inc	r0
      000152 A6 83            [24]  324 	mov	@r0,dph
      000154 08               [12]  325 	inc	r0
      000155 A6 F0            [24]  326 	mov	@r0,b
      000157 08               [12]  327 	inc	r0
      000158 F6               [12]  328 	mov	@r0,a
      000159 D0*00            [24]  329 	pop	bits
                                    330 ;	sincoshf.c:77: z+=K3*z;
      00015B C0*00            [24]  331 	push	bits
      00015D E5*00            [12]  332 	mov	a,_bp
      00015F 24 05            [12]  333 	add	a,#0x05
      000161 F8               [12]  334 	mov	r0,a
      000162 E6               [12]  335 	mov	a,@r0
      000163 C0 E0            [24]  336 	push	acc
      000165 08               [12]  337 	inc	r0
      000166 E6               [12]  338 	mov	a,@r0
      000167 C0 E0            [24]  339 	push	acc
      000169 08               [12]  340 	inc	r0
      00016A E6               [12]  341 	mov	a,@r0
      00016B C0 E0            [24]  342 	push	acc
      00016D 08               [12]  343 	inc	r0
      00016E E6               [12]  344 	mov	a,@r0
      00016F C0 E0            [24]  345 	push	acc
      000171 90 08 97         [24]  346 	mov	dptr,#0x0897
      000174 75 F0 68         [24]  347 	mov	b,#0x68
      000177 74 37            [12]  348 	mov	a,#0x37
      000179 12r00r00         [24]  349 	lcall	___fsmul
      00017C AF 82            [24]  350 	mov	r7,dpl
      00017E AE 83            [24]  351 	mov	r6,dph
      000180 AD F0            [24]  352 	mov	r5,b
      000182 FC               [12]  353 	mov	r4,a
      000183 E5 81            [12]  354 	mov	a,sp
      000185 24 FC            [12]  355 	add	a,#0xfc
      000187 F5 81            [12]  356 	mov	sp,a
      000189 D0*00            [24]  357 	pop	bits
      00018B C0*00            [24]  358 	push	bits
      00018D C0 07            [24]  359 	push	ar7
      00018F C0 06            [24]  360 	push	ar6
      000191 C0 05            [24]  361 	push	ar5
      000193 C0 04            [24]  362 	push	ar4
      000195 E5*00            [12]  363 	mov	a,_bp
      000197 24 05            [12]  364 	add	a,#0x05
      000199 F8               [12]  365 	mov	r0,a
      00019A 86 82            [24]  366 	mov	dpl,@r0
      00019C 08               [12]  367 	inc	r0
      00019D 86 83            [24]  368 	mov	dph,@r0
      00019F 08               [12]  369 	inc	r0
      0001A0 86 F0            [24]  370 	mov	b,@r0
      0001A2 08               [12]  371 	inc	r0
      0001A3 E6               [12]  372 	mov	a,@r0
      0001A4 12r00r00         [24]  373 	lcall	___fsadd
      0001A7 AF 82            [24]  374 	mov	r7,dpl
      0001A9 AE 83            [24]  375 	mov	r6,dph
      0001AB AD F0            [24]  376 	mov	r5,b
      0001AD FC               [12]  377 	mov	r4,a
      0001AE E5 81            [12]  378 	mov	a,sp
      0001B0 24 FC            [12]  379 	add	a,#0xfc
      0001B2 F5 81            [12]  380 	mov	sp,a
      0001B4 D0*00            [24]  381 	pop	bits
      0001B6 02r02r69         [24]  382 	ljmp	00111$
      0001B9                        383 00110$:
                                    384 ;	sincoshf.c:82: z=expf(y);
      0001B9 8F 82            [24]  385 	mov	dpl,r7
      0001BB 8E 83            [24]  386 	mov	dph,r6
      0001BD 8D F0            [24]  387 	mov	b,r5
      0001BF EC               [12]  388 	mov	a,r4
      0001C0 C0*00            [24]  389 	push	bits
      0001C2 12r00r00         [24]  390 	lcall	_expf
      0001C5 AF 82            [24]  391 	mov	r7,dpl
      0001C7 AE 83            [24]  392 	mov	r6,dph
      0001C9 AD F0            [24]  393 	mov	r5,b
      0001CB FC               [12]  394 	mov	r4,a
      0001CC D0*00            [24]  395 	pop	bits
      0001CE E5*00            [12]  396 	mov	a,_bp
      0001D0 24 0D            [12]  397 	add	a,#0x0d
      0001D2 F8               [12]  398 	mov	r0,a
      0001D3 A6 07            [24]  399 	mov	@r0,ar7
      0001D5 08               [12]  400 	inc	r0
      0001D6 A6 06            [24]  401 	mov	@r0,ar6
      0001D8 08               [12]  402 	inc	r0
      0001D9 A6 05            [24]  403 	mov	@r0,ar5
      0001DB 08               [12]  404 	inc	r0
      0001DC A6 04            [24]  405 	mov	@r0,ar4
                                    406 ;	sincoshf.c:83: w=1.0/z;
      0001DE C0*00            [24]  407 	push	bits
      0001E0 E5*00            [12]  408 	mov	a,_bp
      0001E2 24 0D            [12]  409 	add	a,#0x0d
      0001E4 F8               [12]  410 	mov	r0,a
      0001E5 E6               [12]  411 	mov	a,@r0
      0001E6 C0 E0            [24]  412 	push	acc
      0001E8 08               [12]  413 	inc	r0
      0001E9 E6               [12]  414 	mov	a,@r0
      0001EA C0 E0            [24]  415 	push	acc
      0001EC 08               [12]  416 	inc	r0
      0001ED E6               [12]  417 	mov	a,@r0
      0001EE C0 E0            [24]  418 	push	acc
      0001F0 08               [12]  419 	inc	r0
      0001F1 E6               [12]  420 	mov	a,@r0
      0001F2 C0 E0            [24]  421 	push	acc
      0001F4 90 00 00         [24]  422 	mov	dptr,#0x0000
      0001F7 75 F0 80         [24]  423 	mov	b,#0x80
      0001FA 74 3F            [12]  424 	mov	a,#0x3f
      0001FC 12r00r00         [24]  425 	lcall	___fsdiv
      0001FF AF 82            [24]  426 	mov	r7,dpl
      000201 AE 83            [24]  427 	mov	r6,dph
      000203 AD F0            [24]  428 	mov	r5,b
      000205 FC               [12]  429 	mov	r4,a
      000206 E5 81            [12]  430 	mov	a,sp
      000208 24 FC            [12]  431 	add	a,#0xfc
      00020A F5 81            [12]  432 	mov	sp,a
      00020C D0*00            [24]  433 	pop	bits
                                    434 ;	sincoshf.c:84: if(!iscosh) w=-w;
      00020E E5*00            [12]  435 	mov	a,_bp
      000210 24 FD            [12]  436 	add	a,#0xfd
      000212 F8               [12]  437 	mov	r0,a
      000213 E6               [12]  438 	mov	a,@r0
      000214 70 04            [24]  439 	jnz	00108$
      000216 EC               [12]  440 	mov	a,r4
      000217 B2 E7            [12]  441 	cpl	acc.7
      000219 FC               [12]  442 	mov	r4,a
      00021A                        443 00108$:
                                    444 ;	sincoshf.c:85: z=(z+w)*0.5;
      00021A C0*00            [24]  445 	push	bits
      00021C C0 07            [24]  446 	push	ar7
      00021E C0 06            [24]  447 	push	ar6
      000220 C0 05            [24]  448 	push	ar5
      000222 C0 04            [24]  449 	push	ar4
      000224 E5*00            [12]  450 	mov	a,_bp
      000226 24 0D            [12]  451 	add	a,#0x0d
      000228 F8               [12]  452 	mov	r0,a
      000229 86 82            [24]  453 	mov	dpl,@r0
      00022B 08               [12]  454 	inc	r0
      00022C 86 83            [24]  455 	mov	dph,@r0
      00022E 08               [12]  456 	inc	r0
      00022F 86 F0            [24]  457 	mov	b,@r0
      000231 08               [12]  458 	inc	r0
      000232 E6               [12]  459 	mov	a,@r0
      000233 12r00r00         [24]  460 	lcall	___fsadd
      000236 AF 82            [24]  461 	mov	r7,dpl
      000238 AE 83            [24]  462 	mov	r6,dph
      00023A AD F0            [24]  463 	mov	r5,b
      00023C FC               [12]  464 	mov	r4,a
      00023D E5 81            [12]  465 	mov	a,sp
      00023F 24 FC            [12]  466 	add	a,#0xfc
      000241 F5 81            [12]  467 	mov	sp,a
      000243 D0*00            [24]  468 	pop	bits
      000245 C0*00            [24]  469 	push	bits
      000247 C0 07            [24]  470 	push	ar7
      000249 C0 06            [24]  471 	push	ar6
      00024B C0 05            [24]  472 	push	ar5
      00024D C0 04            [24]  473 	push	ar4
      00024F 90 00 00         [24]  474 	mov	dptr,#(0x00&0x00ff)
      000252 E4               [12]  475 	clr	a
      000253 F5 F0            [12]  476 	mov	b,a
      000255 74 3F            [12]  477 	mov	a,#0x3f
      000257 12r00r00         [24]  478 	lcall	___fsmul
      00025A AF 82            [24]  479 	mov	r7,dpl
      00025C AE 83            [24]  480 	mov	r6,dph
      00025E AD F0            [24]  481 	mov	r5,b
      000260 FC               [12]  482 	mov	r4,a
      000261 E5 81            [12]  483 	mov	a,sp
      000263 24 FC            [12]  484 	add	a,#0xfc
      000265 F5 81            [12]  485 	mov	sp,a
      000267 D0*00            [24]  486 	pop	bits
      000269                        487 00111$:
                                    488 ;	sincoshf.c:87: if(sign) z=-z;
      000269 20*00 03         [24]  489 	jb	b0,00164$
      00026C 02r04r19         [24]  490 	ljmp	00119$
      00026F                        491 00164$:
      00026F EC               [12]  492 	mov	a,r4
      000270 B2 E7            [12]  493 	cpl	acc.7
      000272 FC               [12]  494 	mov	r4,a
      000273 02r04r19         [24]  495 	ljmp	00119$
      000276                        496 00118$:
                                    497 ;	sincoshf.c:91: if (y<EPS)
      000276 E4               [12]  498 	clr	a
      000277 C0 E0            [24]  499 	push	acc
      000279 C0 E0            [24]  500 	push	acc
      00027B 74 80            [12]  501 	mov	a,#0x80
      00027D C0 E0            [24]  502 	push	acc
      00027F 74 39            [12]  503 	mov	a,#0x39
      000281 C0 E0            [24]  504 	push	acc
      000283 8F 82            [24]  505 	mov	dpl,r7
      000285 8E 83            [24]  506 	mov	dph,r6
      000287 8D F0            [24]  507 	mov	b,r5
      000289 EC               [12]  508 	mov	a,r4
      00028A 12r00r00         [24]  509 	lcall	___fslt
      00028D AB 82            [24]  510 	mov	r3,dpl
      00028F E5 81            [12]  511 	mov	a,sp
      000291 24 FC            [12]  512 	add	a,#0xfc
      000293 F5 81            [12]  513 	mov	sp,a
      000295 EB               [12]  514 	mov	a,r3
      000296 60 11            [24]  515 	jz	00115$
                                    516 ;	sincoshf.c:92: z=x;
      000298 A8*00            [24]  517 	mov	r0,_bp
      00029A 08               [12]  518 	inc	r0
      00029B 86 07            [24]  519 	mov	ar7,@r0
      00029D 08               [12]  520 	inc	r0
      00029E 86 06            [24]  521 	mov	ar6,@r0
      0002A0 08               [12]  522 	inc	r0
      0002A1 86 05            [24]  523 	mov	ar5,@r0
      0002A3 08               [12]  524 	inc	r0
      0002A4 86 04            [24]  525 	mov	ar4,@r0
      0002A6 02r04r19         [24]  526 	ljmp	00119$
      0002A9                        527 00115$:
                                    528 ;	sincoshf.c:95: z=x*x;
      0002A9 A8*00            [24]  529 	mov	r0,_bp
      0002AB 08               [12]  530 	inc	r0
      0002AC E6               [12]  531 	mov	a,@r0
      0002AD C0 E0            [24]  532 	push	acc
      0002AF 08               [12]  533 	inc	r0
      0002B0 E6               [12]  534 	mov	a,@r0
      0002B1 C0 E0            [24]  535 	push	acc
      0002B3 08               [12]  536 	inc	r0
      0002B4 E6               [12]  537 	mov	a,@r0
      0002B5 C0 E0            [24]  538 	push	acc
      0002B7 08               [12]  539 	inc	r0
      0002B8 E6               [12]  540 	mov	a,@r0
      0002B9 C0 E0            [24]  541 	push	acc
      0002BB A8*00            [24]  542 	mov	r0,_bp
      0002BD 08               [12]  543 	inc	r0
      0002BE 86 82            [24]  544 	mov	dpl,@r0
      0002C0 08               [12]  545 	inc	r0
      0002C1 86 83            [24]  546 	mov	dph,@r0
      0002C3 08               [12]  547 	inc	r0
      0002C4 86 F0            [24]  548 	mov	b,@r0
      0002C6 08               [12]  549 	inc	r0
      0002C7 E6               [12]  550 	mov	a,@r0
      0002C8 12r00r00         [24]  551 	lcall	___fsmul
      0002CB C8               [12]  552 	xch	a,r0
      0002CC E5*00            [12]  553 	mov	a,_bp
      0002CE 24 09            [12]  554 	add	a,#0x09
      0002D0 C8               [12]  555 	xch	a,r0
      0002D1 A6 82            [24]  556 	mov	@r0,dpl
      0002D3 08               [12]  557 	inc	r0
      0002D4 A6 83            [24]  558 	mov	@r0,dph
      0002D6 08               [12]  559 	inc	r0
      0002D7 A6 F0            [24]  560 	mov	@r0,b
      0002D9 08               [12]  561 	inc	r0
      0002DA F6               [12]  562 	mov	@r0,a
      0002DB E5 81            [12]  563 	mov	a,sp
      0002DD 24 FC            [12]  564 	add	a,#0xfc
      0002DF F5 81            [12]  565 	mov	sp,a
                                    566 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      0002E1 E5*00            [12]  567 	mov	a,_bp
      0002E3 24 09            [12]  568 	add	a,#0x09
      0002E5 F8               [12]  569 	mov	r0,a
      0002E6 E6               [12]  570 	mov	a,@r0
      0002E7 C0 E0            [24]  571 	push	acc
      0002E9 08               [12]  572 	inc	r0
      0002EA E6               [12]  573 	mov	a,@r0
      0002EB C0 E0            [24]  574 	push	acc
      0002ED 08               [12]  575 	inc	r0
      0002EE E6               [12]  576 	mov	a,@r0
      0002EF C0 E0            [24]  577 	push	acc
      0002F1 08               [12]  578 	inc	r0
      0002F2 E6               [12]  579 	mov	a,@r0
      0002F3 C0 E0            [24]  580 	push	acc
      0002F5 A8*00            [24]  581 	mov	r0,_bp
      0002F7 08               [12]  582 	inc	r0
      0002F8 86 82            [24]  583 	mov	dpl,@r0
      0002FA 08               [12]  584 	inc	r0
      0002FB 86 83            [24]  585 	mov	dph,@r0
      0002FD 08               [12]  586 	inc	r0
      0002FE 86 F0            [24]  587 	mov	b,@r0
      000300 08               [12]  588 	inc	r0
      000301 E6               [12]  589 	mov	a,@r0
      000302 12r00r00         [24]  590 	lcall	___fsmul
      000305 C8               [12]  591 	xch	a,r0
      000306 E5*00            [12]  592 	mov	a,_bp
      000308 24 05            [12]  593 	add	a,#0x05
      00030A C8               [12]  594 	xch	a,r0
      00030B A6 82            [24]  595 	mov	@r0,dpl
      00030D 08               [12]  596 	inc	r0
      00030E A6 83            [24]  597 	mov	@r0,dph
      000310 08               [12]  598 	inc	r0
      000311 A6 F0            [24]  599 	mov	@r0,b
      000313 08               [12]  600 	inc	r0
      000314 F6               [12]  601 	mov	@r0,a
      000315 E5 81            [12]  602 	mov	a,sp
      000317 24 FC            [12]  603 	add	a,#0xfc
      000319 F5 81            [12]  604 	mov	sp,a
      00031B E5*00            [12]  605 	mov	a,_bp
      00031D 24 09            [12]  606 	add	a,#0x09
      00031F F8               [12]  607 	mov	r0,a
      000320 E6               [12]  608 	mov	a,@r0
      000321 C0 E0            [24]  609 	push	acc
      000323 08               [12]  610 	inc	r0
      000324 E6               [12]  611 	mov	a,@r0
      000325 C0 E0            [24]  612 	push	acc
      000327 08               [12]  613 	inc	r0
      000328 E6               [12]  614 	mov	a,@r0
      000329 C0 E0            [24]  615 	push	acc
      00032B 08               [12]  616 	inc	r0
      00032C E6               [12]  617 	mov	a,@r0
      00032D C0 E0            [24]  618 	push	acc
      00032F 90 E6 EA         [24]  619 	mov	dptr,#0xe6ea
      000332 75 F0 42         [24]  620 	mov	b,#0x42
      000335 74 BE            [12]  621 	mov	a,#0xbe
      000337 12r00r00         [24]  622 	lcall	___fsmul
      00033A AA 82            [24]  623 	mov	r2,dpl
      00033C AB 83            [24]  624 	mov	r3,dph
      00033E AE F0            [24]  625 	mov	r6,b
      000340 FF               [12]  626 	mov	r7,a
      000341 E5 81            [12]  627 	mov	a,sp
      000343 24 FC            [12]  628 	add	a,#0xfc
      000345 F5 81            [12]  629 	mov	sp,a
      000347 74 F0            [12]  630 	mov	a,#0xf0
      000349 C0 E0            [24]  631 	push	acc
      00034B 74 69            [12]  632 	mov	a,#0x69
      00034D C0 E0            [24]  633 	push	acc
      00034F 74 E4            [12]  634 	mov	a,#0xe4
      000351 C0 E0            [24]  635 	push	acc
      000353 74 C0            [12]  636 	mov	a,#0xc0
      000355 C0 E0            [24]  637 	push	acc
      000357 8A 82            [24]  638 	mov	dpl,r2
      000359 8B 83            [24]  639 	mov	dph,r3
      00035B 8E F0            [24]  640 	mov	b,r6
      00035D EF               [12]  641 	mov	a,r7
      00035E 12r00r00         [24]  642 	lcall	___fsadd
      000361 AC 82            [24]  643 	mov	r4,dpl
      000363 AD 83            [24]  644 	mov	r5,dph
      000365 AE F0            [24]  645 	mov	r6,b
      000367 FF               [12]  646 	mov	r7,a
      000368 E5 81            [12]  647 	mov	a,sp
      00036A 24 FC            [12]  648 	add	a,#0xfc
      00036C F5 81            [12]  649 	mov	sp,a
      00036E C0 04            [24]  650 	push	ar4
      000370 C0 05            [24]  651 	push	ar5
      000372 C0 06            [24]  652 	push	ar6
      000374 C0 07            [24]  653 	push	ar7
      000376 E5*00            [12]  654 	mov	a,_bp
      000378 24 05            [12]  655 	add	a,#0x05
      00037A F8               [12]  656 	mov	r0,a
      00037B 86 82            [24]  657 	mov	dpl,@r0
      00037D 08               [12]  658 	inc	r0
      00037E 86 83            [24]  659 	mov	dph,@r0
      000380 08               [12]  660 	inc	r0
      000381 86 F0            [24]  661 	mov	b,@r0
      000383 08               [12]  662 	inc	r0
      000384 E6               [12]  663 	mov	a,@r0
      000385 12r00r00         [24]  664 	lcall	___fsmul
      000388 C8               [12]  665 	xch	a,r0
      000389 E5*00            [12]  666 	mov	a,_bp
      00038B 24 05            [12]  667 	add	a,#0x05
      00038D C8               [12]  668 	xch	a,r0
      00038E A6 82            [24]  669 	mov	@r0,dpl
      000390 08               [12]  670 	inc	r0
      000391 A6 83            [24]  671 	mov	@r0,dph
      000393 08               [12]  672 	inc	r0
      000394 A6 F0            [24]  673 	mov	@r0,b
      000396 08               [12]  674 	inc	r0
      000397 F6               [12]  675 	mov	@r0,a
      000398 E5 81            [12]  676 	mov	a,sp
      00039A 24 FC            [12]  677 	add	a,#0xfc
      00039C F5 81            [12]  678 	mov	sp,a
      00039E 74 93            [12]  679 	mov	a,#0x93
      0003A0 C0 E0            [24]  680 	push	acc
      0003A2 74 4F            [12]  681 	mov	a,#0x4f
      0003A4 C0 E0            [24]  682 	push	acc
      0003A6 74 2B            [12]  683 	mov	a,#0x2b
      0003A8 C0 E0            [24]  684 	push	acc
      0003AA 74 C2            [12]  685 	mov	a,#0xc2
      0003AC C0 E0            [24]  686 	push	acc
      0003AE E5*00            [12]  687 	mov	a,_bp
      0003B0 24 09            [12]  688 	add	a,#0x09
      0003B2 F8               [12]  689 	mov	r0,a
      0003B3 86 82            [24]  690 	mov	dpl,@r0
      0003B5 08               [12]  691 	inc	r0
      0003B6 86 83            [24]  692 	mov	dph,@r0
      0003B8 08               [12]  693 	inc	r0
      0003B9 86 F0            [24]  694 	mov	b,@r0
      0003BB 08               [12]  695 	inc	r0
      0003BC E6               [12]  696 	mov	a,@r0
      0003BD 12r00r00         [24]  697 	lcall	___fsadd
      0003C0 AA 82            [24]  698 	mov	r2,dpl
      0003C2 AB 83            [24]  699 	mov	r3,dph
      0003C4 AE F0            [24]  700 	mov	r6,b
      0003C6 FF               [12]  701 	mov	r7,a
      0003C7 E5 81            [12]  702 	mov	a,sp
      0003C9 24 FC            [12]  703 	add	a,#0xfc
      0003CB F5 81            [12]  704 	mov	sp,a
      0003CD C0 02            [24]  705 	push	ar2
      0003CF C0 03            [24]  706 	push	ar3
      0003D1 C0 06            [24]  707 	push	ar6
      0003D3 C0 07            [24]  708 	push	ar7
      0003D5 E5*00            [12]  709 	mov	a,_bp
      0003D7 24 05            [12]  710 	add	a,#0x05
      0003D9 F8               [12]  711 	mov	r0,a
      0003DA 86 82            [24]  712 	mov	dpl,@r0
      0003DC 08               [12]  713 	inc	r0
      0003DD 86 83            [24]  714 	mov	dph,@r0
      0003DF 08               [12]  715 	inc	r0
      0003E0 86 F0            [24]  716 	mov	b,@r0
      0003E2 08               [12]  717 	inc	r0
      0003E3 E6               [12]  718 	mov	a,@r0
      0003E4 12r00r00         [24]  719 	lcall	___fsdiv
      0003E7 AC 82            [24]  720 	mov	r4,dpl
      0003E9 AD 83            [24]  721 	mov	r5,dph
      0003EB AE F0            [24]  722 	mov	r6,b
      0003ED FF               [12]  723 	mov	r7,a
      0003EE E5 81            [12]  724 	mov	a,sp
      0003F0 24 FC            [12]  725 	add	a,#0xfc
      0003F2 F5 81            [12]  726 	mov	sp,a
      0003F4 C0 04            [24]  727 	push	ar4
      0003F6 C0 05            [24]  728 	push	ar5
      0003F8 C0 06            [24]  729 	push	ar6
      0003FA C0 07            [24]  730 	push	ar7
      0003FC A8*00            [24]  731 	mov	r0,_bp
      0003FE 08               [12]  732 	inc	r0
      0003FF 86 82            [24]  733 	mov	dpl,@r0
      000401 08               [12]  734 	inc	r0
      000402 86 83            [24]  735 	mov	dph,@r0
      000404 08               [12]  736 	inc	r0
      000405 86 F0            [24]  737 	mov	b,@r0
      000407 08               [12]  738 	inc	r0
      000408 E6               [12]  739 	mov	a,@r0
      000409 12r00r00         [24]  740 	lcall	___fsadd
      00040C AF 82            [24]  741 	mov	r7,dpl
      00040E AE 83            [24]  742 	mov	r6,dph
      000410 AD F0            [24]  743 	mov	r5,b
      000412 FC               [12]  744 	mov	r4,a
      000413 E5 81            [12]  745 	mov	a,sp
      000415 24 FC            [12]  746 	add	a,#0xfc
      000417 F5 81            [12]  747 	mov	sp,a
      000419                        748 00119$:
                                    749 ;	sincoshf.c:99: return z;
      000419 8F 82            [24]  750 	mov	dpl,r7
      00041B 8E 83            [24]  751 	mov	dph,r6
      00041D 8D F0            [24]  752 	mov	b,r5
      00041F EC               [12]  753 	mov	a,r4
                                    754 ;	sincoshf.c:100: }
      000420 85*00 81         [24]  755 	mov	sp,_bp
      000423 D0*00            [24]  756 	pop	_bp
      000425 22               [24]  757 	ret
                                    758 	.area CSEG    (CODE)
                                    759 	.area CONST   (CODE)
                                    760 	.area XINIT   (CODE)
                                    761 	.area CABS    (ABS,CODE)
