                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbstoc16s
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 	.globl ___mbstoc16s
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; initialized external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '__mbstoc16s'
                                     92 ;------------------------------------------------------------
                                     93 ;s                         Allocated to stack - _bp -5
                                     94 ;n                         Allocated to stack - _bp -7
                                     95 ;c16s                      Allocated to registers r5 r6 r7 
                                     96 ;m                         Allocated to stack - _bp +4
                                     97 ;l                         Allocated to stack - _bp +6
                                     98 ;codepoint                 Allocated to stack - _bp +8
                                     99 ;sloc0                     Allocated to stack - _bp +1
                                    100 ;------------------------------------------------------------
                                    101 ;	mbstoc16s.c:44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                                    102 ;	-----------------------------------------
                                    103 ;	 function __mbstoc16s
                                    104 ;	-----------------------------------------
      000000                        105 ___mbstoc16s:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B E5 81            [12]  119 	mov	a,sp
      00000D 24 08            [12]  120 	add	a,#0x08
      00000F F5 81            [12]  121 	mov	sp,a
                                    122 ;	mbstoc16s.c:46: size_t m = 0;
      000011 E5*00            [12]  123 	mov	a,_bp
      000013 24 04            [12]  124 	add	a,#0x04
      000015 F8               [12]  125 	mov	r0,a
      000016 E4               [12]  126 	clr	a
      000017 F6               [12]  127 	mov	@r0,a
      000018 08               [12]  128 	inc	r0
      000019 F6               [12]  129 	mov	@r0,a
                                    130 ;	mbstoc16s.c:85: return(m);
      00001A                        131 00116$:
                                    132 ;	mbstoc16s.c:53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
      00001A E5*00            [12]  133 	mov	a,_bp
      00001C 24 08            [12]  134 	add	a,#0x08
      00001E FA               [12]  135 	mov	r2,a
      00001F 7E 00            [12]  136 	mov	r6,#0x00
      000021 7F 40            [12]  137 	mov	r7,#0x40
      000023 74 04            [12]  138 	mov	a,#0x04
      000025 C0 E0            [24]  139 	push	acc
      000027 E4               [12]  140 	clr	a
      000028 C0 E0            [24]  141 	push	acc
      00002A E5*00            [12]  142 	mov	a,_bp
      00002C 24 FB            [12]  143 	add	a,#0xfb
      00002E F8               [12]  144 	mov	r0,a
      00002F E6               [12]  145 	mov	a,@r0
      000030 C0 E0            [24]  146 	push	acc
      000032 08               [12]  147 	inc	r0
      000033 E6               [12]  148 	mov	a,@r0
      000034 C0 E0            [24]  149 	push	acc
      000036 08               [12]  150 	inc	r0
      000037 E6               [12]  151 	mov	a,@r0
      000038 C0 E0            [24]  152 	push	acc
      00003A 8A 82            [24]  153 	mov	dpl,r2
      00003C 8E 83            [24]  154 	mov	dph,r6
      00003E 8F F0            [24]  155 	mov	b,r7
      000040 12r00r00         [24]  156 	lcall	_mbtowc
      000043 AE 82            [24]  157 	mov	r6,dpl
      000045 AF 83            [24]  158 	mov	r7,dph
      000047 E5 81            [12]  159 	mov	a,sp
      000049 24 FB            [12]  160 	add	a,#0xfb
      00004B F5 81            [12]  161 	mov	sp,a
      00004D E5*00            [12]  162 	mov	a,_bp
      00004F 24 06            [12]  163 	add	a,#0x06
      000051 F8               [12]  164 	mov	r0,a
      000052 A6 06            [24]  165 	mov	@r0,ar6
      000054 08               [12]  166 	inc	r0
      000055 A6 07            [24]  167 	mov	@r0,ar7
                                    168 ;	mbstoc16s.c:55: if(l < 0)
      000057 E5*00            [12]  169 	mov	a,_bp
      000059 24 06            [12]  170 	add	a,#0x06
      00005B F8               [12]  171 	mov	r0,a
      00005C 08               [12]  172 	inc	r0
      00005D E6               [12]  173 	mov	a,@r0
      00005E 30 E7 06         [24]  174 	jnb	acc.7,00106$
                                    175 ;	mbstoc16s.c:56: return(-1);
      000061 90 FF FF         [24]  176 	mov	dptr,#0xffff
      000064 02r01rCE         [24]  177 	ljmp	00118$
      000067                        178 00106$:
                                    179 ;	mbstoc16s.c:57: else if(!l)
      000067 E5*00            [12]  180 	mov	a,_bp
      000069 24 06            [12]  181 	add	a,#0x06
      00006B F8               [12]  182 	mov	r0,a
      00006C E6               [12]  183 	mov	a,@r0
      00006D 08               [12]  184 	inc	r0
      00006E 46               [12]  185 	orl	a,@r0
      00006F 70 2C            [24]  186 	jnz	00107$
                                    187 ;	mbstoc16s.c:59: if(m < n)
      000071 E5*00            [12]  188 	mov	a,_bp
      000073 24 04            [12]  189 	add	a,#0x04
      000075 F8               [12]  190 	mov	r0,a
      000076 E5*00            [12]  191 	mov	a,_bp
      000078 24 F9            [12]  192 	add	a,#0xf9
      00007A F9               [12]  193 	mov	r1,a
      00007B C3               [12]  194 	clr	c
      00007C E6               [12]  195 	mov	a,@r0
      00007D 97               [12]  196 	subb	a,@r1
      00007E 08               [12]  197 	inc	r0
      00007F E6               [12]  198 	mov	a,@r0
      000080 09               [12]  199 	inc	r1
      000081 97               [12]  200 	subb	a,@r1
      000082 40 03            [24]  201 	jc	00157$
      000084 02r01rC4         [24]  202 	ljmp	00115$
      000087                        203 00157$:
                                    204 ;	mbstoc16s.c:60: *c16s = 0;
      000087 A8*00            [24]  205 	mov	r0,_bp
      000089 08               [12]  206 	inc	r0
      00008A 86 82            [24]  207 	mov	dpl,@r0
      00008C 08               [12]  208 	inc	r0
      00008D 86 83            [24]  209 	mov	dph,@r0
      00008F 08               [12]  210 	inc	r0
      000090 86 F0            [24]  211 	mov	b,@r0
      000092 E4               [12]  212 	clr	a
      000093 12r00r00         [24]  213 	lcall	__gptrput
      000096 A3               [24]  214 	inc	dptr
      000097 12r00r00         [24]  215 	lcall	__gptrput
                                    216 ;	mbstoc16s.c:61: break;
      00009A 02r01rC4         [24]  217 	ljmp	00115$
      00009D                        218 00107$:
                                    219 ;	mbstoc16s.c:64: if (codepoint <= 0xffff) // Basic multilingual plane
      00009D E5*00            [12]  220 	mov	a,_bp
      00009F 24 08            [12]  221 	add	a,#0x08
      0000A1 F8               [12]  222 	mov	r0,a
      0000A2 C3               [12]  223 	clr	c
      0000A3 74 FF            [12]  224 	mov	a,#0xff
      0000A5 96               [12]  225 	subb	a,@r0
      0000A6 74 FF            [12]  226 	mov	a,#0xff
      0000A8 08               [12]  227 	inc	r0
      0000A9 96               [12]  228 	subb	a,@r0
      0000AA E4               [12]  229 	clr	a
      0000AB 08               [12]  230 	inc	r0
      0000AC 96               [12]  231 	subb	a,@r0
      0000AD E4               [12]  232 	clr	a
      0000AE 08               [12]  233 	inc	r0
      0000AF 96               [12]  234 	subb	a,@r0
      0000B0 40 4A            [24]  235 	jc	00113$
                                    236 ;	mbstoc16s.c:66: if (m >= n)
      0000B2 E5*00            [12]  237 	mov	a,_bp
      0000B4 24 04            [12]  238 	add	a,#0x04
      0000B6 F8               [12]  239 	mov	r0,a
      0000B7 E5*00            [12]  240 	mov	a,_bp
      0000B9 24 F9            [12]  241 	add	a,#0xf9
      0000BB F9               [12]  242 	mov	r1,a
      0000BC C3               [12]  243 	clr	c
      0000BD E6               [12]  244 	mov	a,@r0
      0000BE 97               [12]  245 	subb	a,@r1
      0000BF 08               [12]  246 	inc	r0
      0000C0 E6               [12]  247 	mov	a,@r0
      0000C1 09               [12]  248 	inc	r1
      0000C2 97               [12]  249 	subb	a,@r1
      0000C3 40 03            [24]  250 	jc	00159$
      0000C5 02r01rC4         [24]  251 	ljmp	00115$
      0000C8                        252 00159$:
                                    253 ;	mbstoc16s.c:69: *c16s++ = codepoint;
      0000C8 E5*00            [12]  254 	mov	a,_bp
      0000CA 24 08            [12]  255 	add	a,#0x08
      0000CC F8               [12]  256 	mov	r0,a
      0000CD 86 02            [24]  257 	mov	ar2,@r0
      0000CF 08               [12]  258 	inc	r0
      0000D0 86 04            [24]  259 	mov	ar4,@r0
      0000D2 A8*00            [24]  260 	mov	r0,_bp
      0000D4 08               [12]  261 	inc	r0
      0000D5 86 82            [24]  262 	mov	dpl,@r0
      0000D7 08               [12]  263 	inc	r0
      0000D8 86 83            [24]  264 	mov	dph,@r0
      0000DA 08               [12]  265 	inc	r0
      0000DB 86 F0            [24]  266 	mov	b,@r0
      0000DD EA               [12]  267 	mov	a,r2
      0000DE 12r00r00         [24]  268 	lcall	__gptrput
      0000E1 A3               [24]  269 	inc	dptr
      0000E2 EC               [12]  270 	mov	a,r4
      0000E3 12r00r00         [24]  271 	lcall	__gptrput
      0000E6 A3               [24]  272 	inc	dptr
      0000E7 18               [12]  273 	dec	r0
      0000E8 18               [12]  274 	dec	r0
      0000E9 A6 82            [24]  275 	mov	@r0,dpl
      0000EB 08               [12]  276 	inc	r0
      0000EC A6 83            [24]  277 	mov	@r0,dph
                                    278 ;	mbstoc16s.c:70: m++;
      0000EE E5*00            [12]  279 	mov	a,_bp
      0000F0 24 04            [12]  280 	add	a,#0x04
      0000F2 F8               [12]  281 	mov	r0,a
      0000F3 06               [12]  282 	inc	@r0
      0000F4 B6 00 02         [24]  283 	cjne	@r0,#0x00,00160$
      0000F7 08               [12]  284 	inc	r0
      0000F8 06               [12]  285 	inc	@r0
      0000F9                        286 00160$:
      0000F9 02r01rAF         [24]  287 	ljmp	00114$
      0000FC                        288 00113$:
                                    289 ;	mbstoc16s.c:74: if (m + 1 >= n)
      0000FC E5*00            [12]  290 	mov	a,_bp
      0000FE 24 04            [12]  291 	add	a,#0x04
      000100 F8               [12]  292 	mov	r0,a
      000101 74 01            [12]  293 	mov	a,#0x01
      000103 26               [12]  294 	add	a,@r0
      000104 FB               [12]  295 	mov	r3,a
      000105 E4               [12]  296 	clr	a
      000106 08               [12]  297 	inc	r0
      000107 36               [12]  298 	addc	a,@r0
      000108 FC               [12]  299 	mov	r4,a
      000109 E5*00            [12]  300 	mov	a,_bp
      00010B 24 F9            [12]  301 	add	a,#0xf9
      00010D F8               [12]  302 	mov	r0,a
      00010E C3               [12]  303 	clr	c
      00010F EB               [12]  304 	mov	a,r3
      000110 96               [12]  305 	subb	a,@r0
      000111 EC               [12]  306 	mov	a,r4
      000112 08               [12]  307 	inc	r0
      000113 96               [12]  308 	subb	a,@r0
      000114 40 03            [24]  309 	jc	00161$
      000116 02r01rC4         [24]  310 	ljmp	00115$
      000119                        311 00161$:
                                    312 ;	mbstoc16s.c:77: codepoint -= 0x100000;
      000119 E5*00            [12]  313 	mov	a,_bp
      00011B 24 08            [12]  314 	add	a,#0x08
      00011D F8               [12]  315 	mov	r0,a
      00011E 08               [12]  316 	inc	r0
      00011F 08               [12]  317 	inc	r0
      000120 E6               [12]  318 	mov	a,@r0
      000121 24 F0            [12]  319 	add	a,#0xf0
      000123 F6               [12]  320 	mov	@r0,a
      000124 08               [12]  321 	inc	r0
      000125 E6               [12]  322 	mov	a,@r0
      000126 34 FF            [12]  323 	addc	a,#0xff
      000128 F6               [12]  324 	mov	@r0,a
                                    325 ;	mbstoc16s.c:78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
      000129 E5*00            [12]  326 	mov	a,_bp
      00012B 24 08            [12]  327 	add	a,#0x08
      00012D F8               [12]  328 	mov	r0,a
      00012E 08               [12]  329 	inc	r0
      00012F 86 02            [24]  330 	mov	ar2,@r0
      000131 08               [12]  331 	inc	r0
      000132 E6               [12]  332 	mov	a,@r0
      000133 C3               [12]  333 	clr	c
      000134 13               [12]  334 	rrc	a
      000135 CA               [12]  335 	xch	a,r2
      000136 13               [12]  336 	rrc	a
      000137 CA               [12]  337 	xch	a,r2
      000138 C3               [12]  338 	clr	c
      000139 13               [12]  339 	rrc	a
      00013A CA               [12]  340 	xch	a,r2
      00013B 13               [12]  341 	rrc	a
      00013C CA               [12]  342 	xch	a,r2
      00013D FB               [12]  343 	mov	r3,a
      00013E 08               [12]  344 	inc	r0
      00013F E6               [12]  345 	mov	a,@r0
      000140 03               [12]  346 	rr	a
      000141 03               [12]  347 	rr	a
      000142 54 C0            [12]  348 	anl	a,#0xc0
      000144 4B               [12]  349 	orl	a,r3
      000145 FB               [12]  350 	mov	r3,a
      000146 E6               [12]  351 	mov	a,@r0
      000147 03               [12]  352 	rr	a
      000148 03               [12]  353 	rr	a
      000149 54 3F            [12]  354 	anl	a,#0x3f
      00014B 53 03 03         [24]  355 	anl	ar3,#0x03
      00014E 74 D8            [12]  356 	mov	a,#0xd8
      000150 2B               [12]  357 	add	a,r3
      000151 FB               [12]  358 	mov	r3,a
      000152 A8*00            [24]  359 	mov	r0,_bp
      000154 08               [12]  360 	inc	r0
      000155 86 82            [24]  361 	mov	dpl,@r0
      000157 08               [12]  362 	inc	r0
      000158 86 83            [24]  363 	mov	dph,@r0
      00015A 08               [12]  364 	inc	r0
      00015B 86 F0            [24]  365 	mov	b,@r0
      00015D EA               [12]  366 	mov	a,r2
      00015E 12r00r00         [24]  367 	lcall	__gptrput
      000161 A3               [24]  368 	inc	dptr
      000162 EB               [12]  369 	mov	a,r3
      000163 12r00r00         [24]  370 	lcall	__gptrput
      000166 A8*00            [24]  371 	mov	r0,_bp
      000168 08               [12]  372 	inc	r0
      000169 74 02            [12]  373 	mov	a,#0x02
      00016B 26               [12]  374 	add	a,@r0
      00016C FD               [12]  375 	mov	r5,a
      00016D E4               [12]  376 	clr	a
      00016E 08               [12]  377 	inc	r0
      00016F 36               [12]  378 	addc	a,@r0
      000170 FE               [12]  379 	mov	r6,a
      000171 08               [12]  380 	inc	r0
      000172 86 07            [24]  381 	mov	ar7,@r0
                                    382 ;	mbstoc16s.c:79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
      000174 E5*00            [12]  383 	mov	a,_bp
      000176 24 08            [12]  384 	add	a,#0x08
      000178 F8               [12]  385 	mov	r0,a
      000179 86 03            [24]  386 	mov	ar3,@r0
      00017B 08               [12]  387 	inc	r0
      00017C 86 04            [24]  388 	mov	ar4,@r0
      00017E 53 04 03         [24]  389 	anl	ar4,#0x03
      000181 74 DC            [12]  390 	mov	a,#0xdc
      000183 2C               [12]  391 	add	a,r4
      000184 FC               [12]  392 	mov	r4,a
      000185 8D 82            [24]  393 	mov	dpl,r5
      000187 8E 83            [24]  394 	mov	dph,r6
      000189 8F F0            [24]  395 	mov	b,r7
      00018B EB               [12]  396 	mov	a,r3
      00018C 12r00r00         [24]  397 	lcall	__gptrput
      00018F A3               [24]  398 	inc	dptr
      000190 EC               [12]  399 	mov	a,r4
      000191 12r00r00         [24]  400 	lcall	__gptrput
      000194 A8*00            [24]  401 	mov	r0,_bp
      000196 08               [12]  402 	inc	r0
      000197 74 02            [12]  403 	mov	a,#0x02
      000199 2D               [12]  404 	add	a,r5
      00019A F6               [12]  405 	mov	@r0,a
      00019B E4               [12]  406 	clr	a
      00019C 3E               [12]  407 	addc	a,r6
      00019D 08               [12]  408 	inc	r0
      00019E F6               [12]  409 	mov	@r0,a
      00019F 08               [12]  410 	inc	r0
      0001A0 A6 07            [24]  411 	mov	@r0,ar7
                                    412 ;	mbstoc16s.c:80: m += 2;
      0001A2 E5*00            [12]  413 	mov	a,_bp
      0001A4 24 04            [12]  414 	add	a,#0x04
      0001A6 F8               [12]  415 	mov	r0,a
      0001A7 74 02            [12]  416 	mov	a,#0x02
      0001A9 26               [12]  417 	add	a,@r0
      0001AA F6               [12]  418 	mov	@r0,a
      0001AB E4               [12]  419 	clr	a
      0001AC 08               [12]  420 	inc	r0
      0001AD 36               [12]  421 	addc	a,@r0
      0001AE F6               [12]  422 	mov	@r0,a
      0001AF                        423 00114$:
                                    424 ;	mbstoc16s.c:82: s += l;
      0001AF E5*00            [12]  425 	mov	a,_bp
      0001B1 24 FB            [12]  426 	add	a,#0xfb
      0001B3 F8               [12]  427 	mov	r0,a
      0001B4 E5*00            [12]  428 	mov	a,_bp
      0001B6 24 06            [12]  429 	add	a,#0x06
      0001B8 F9               [12]  430 	mov	r1,a
      0001B9 E7               [12]  431 	mov	a,@r1
      0001BA 26               [12]  432 	add	a,@r0
      0001BB F6               [12]  433 	mov	@r0,a
      0001BC 09               [12]  434 	inc	r1
      0001BD E7               [12]  435 	mov	a,@r1
      0001BE 08               [12]  436 	inc	r0
      0001BF 36               [12]  437 	addc	a,@r0
      0001C0 F6               [12]  438 	mov	@r0,a
      0001C1 02r00r1A         [24]  439 	ljmp	00116$
      0001C4                        440 00115$:
                                    441 ;	mbstoc16s.c:85: return(m);
      0001C4 E5*00            [12]  442 	mov	a,_bp
      0001C6 24 04            [12]  443 	add	a,#0x04
      0001C8 F8               [12]  444 	mov	r0,a
      0001C9 86 82            [24]  445 	mov	dpl,@r0
      0001CB 08               [12]  446 	inc	r0
      0001CC 86 83            [24]  447 	mov	dph,@r0
      0001CE                        448 00118$:
                                    449 ;	mbstoc16s.c:86: }
      0001CE 85*00 81         [24]  450 	mov	sp,_bp
      0001D1 D0*00            [24]  451 	pop	_bp
      0001D3 22               [24]  452 	ret
                                    453 	.area CSEG    (CODE)
                                    454 	.area CONST   (CODE)
                                    455 	.area XINIT   (CODE)
                                    456 	.area CABS    (ABS,CODE)
