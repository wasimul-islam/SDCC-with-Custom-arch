                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16rtomb
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wctomb
                                     12 	.globl _c16rtomb
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; uninitialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
      000000                         56 _c16rtomb_sps_65536_46:
      000000                         57 	.ds 3
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; initialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'c16rtomb'
                                     94 ;------------------------------------------------------------
                                     95 ;c16                       Allocated to stack - _bp -4
                                     96 ;ps                        Allocated to stack - _bp -7
                                     97 ;s                         Allocated to registers r5 r6 r7 
                                     98 ;codepoint                 Allocated to stack - _bp +1
                                     99 ;buf                       Allocated to stack - _bp +17
                                    100 ;high_surrogate            Allocated to registers r7 r6 
                                    101 ;sloc0                     Allocated to stack - _bp +1
                                    102 ;sloc1                     Allocated to stack - _bp +5
                                    103 ;sloc2                     Allocated to stack - _bp +21
                                    104 ;sloc3                     Allocated to stack - _bp +8
                                    105 ;sloc4                     Allocated to stack - _bp +11
                                    106 ;sloc5                     Allocated to stack - _bp +13
                                    107 ;sps                       Allocated with name '_c16rtomb_sps_65536_46'
                                    108 ;------------------------------------------------------------
                                    109 ;	c16rtomb.c:35: size_t c16rtomb(char *restrict s, char16_t c16, mbstate_t *restrict ps)
                                    110 ;	-----------------------------------------
                                    111 ;	 function c16rtomb
                                    112 ;	-----------------------------------------
      000000                        113 _c16rtomb:
                           000007   114 	ar7 = 0x07
                           000006   115 	ar6 = 0x06
                           000005   116 	ar5 = 0x05
                           000004   117 	ar4 = 0x04
                           000003   118 	ar3 = 0x03
                           000002   119 	ar2 = 0x02
                           000001   120 	ar1 = 0x01
                           000000   121 	ar0 = 0x00
      000000 C0*00            [24]  122 	push	_bp
      000002 E5 81            [12]  123 	mov	a,sp
      000004 F5*00            [12]  124 	mov	_bp,a
      000006 24 14            [12]  125 	add	a,#0x14
      000008 F5 81            [12]  126 	mov	sp,a
      00000A AD 82            [24]  127 	mov	r5,dpl
      00000C AE 83            [24]  128 	mov	r6,dph
      00000E AF F0            [24]  129 	mov	r7,b
                                    130 ;	c16rtomb.c:41: if(!s)
      000010 ED               [12]  131 	mov	a,r5
      000011 4E               [12]  132 	orl	a,r6
      000012 70 0A            [24]  133 	jnz	00102$
                                    134 ;	c16rtomb.c:42: s = buf;
      000014 E5*00            [12]  135 	mov	a,_bp
      000016 24 11            [12]  136 	add	a,#0x11
      000018 FC               [12]  137 	mov	r4,a
      000019 FD               [12]  138 	mov	r5,a
      00001A 7E 00            [12]  139 	mov	r6,#0x00
      00001C 7F 40            [12]  140 	mov	r7,#0x40
      00001E                        141 00102$:
                                    142 ;	c16rtomb.c:44: if(!ps)
      00001E E5*00            [12]  143 	mov	a,_bp
      000020 24 F9            [12]  144 	add	a,#0xf9
      000022 F8               [12]  145 	mov	r0,a
      000023 E6               [12]  146 	mov	a,@r0
      000024 08               [12]  147 	inc	r0
      000025 46               [12]  148 	orl	a,@r0
      000026 70 0D            [24]  149 	jnz	00104$
                                    150 ;	c16rtomb.c:45: ps = &sps;
      000028 E5*00            [12]  151 	mov	a,_bp
      00002A 24 F9            [12]  152 	add	a,#0xf9
      00002C F8               [12]  153 	mov	r0,a
      00002D 76r00            [12]  154 	mov	@r0,#_c16rtomb_sps_65536_46
      00002F 08               [12]  155 	inc	r0
      000030 76s00            [12]  156 	mov	@r0,#(_c16rtomb_sps_65536_46 >> 8)
      000032 08               [12]  157 	inc	r0
      000033 76 00            [12]  158 	mov	@r0,#0x00
      000035                        159 00104$:
                                    160 ;	c16rtomb.c:47: if (!c16) // 0 always resets conversion state.
      000035 E5*00            [12]  161 	mov	a,_bp
      000037 24 FC            [12]  162 	add	a,#0xfc
      000039 F8               [12]  163 	mov	r0,a
      00003A E6               [12]  164 	mov	a,@r0
      00003B 08               [12]  165 	inc	r0
      00003C 46               [12]  166 	orl	a,@r0
      00003D 70 49            [24]  167 	jnz	00119$
                                    168 ;	c16rtomb.c:49: ps->c[1] = ps->c[2] = 0;
      00003F C0 05            [24]  169 	push	ar5
      000041 C0 06            [24]  170 	push	ar6
      000043 C0 07            [24]  171 	push	ar7
      000045 E5*00            [12]  172 	mov	a,_bp
      000047 24 F9            [12]  173 	add	a,#0xf9
      000049 F8               [12]  174 	mov	r0,a
      00004A 86 02            [24]  175 	mov	ar2,@r0
      00004C 08               [12]  176 	inc	r0
      00004D 86 03            [24]  177 	mov	ar3,@r0
      00004F 08               [12]  178 	inc	r0
      000050 86 04            [24]  179 	mov	ar4,@r0
      000052 74 01            [12]  180 	mov	a,#0x01
      000054 2A               [12]  181 	add	a,r2
      000055 FD               [12]  182 	mov	r5,a
      000056 E4               [12]  183 	clr	a
      000057 3B               [12]  184 	addc	a,r3
      000058 FE               [12]  185 	mov	r6,a
      000059 8C 07            [24]  186 	mov	ar7,r4
      00005B 74 02            [12]  187 	mov	a,#0x02
      00005D 2A               [12]  188 	add	a,r2
      00005E FA               [12]  189 	mov	r2,a
      00005F E4               [12]  190 	clr	a
      000060 3B               [12]  191 	addc	a,r3
      000061 FB               [12]  192 	mov	r3,a
      000062 8A 82            [24]  193 	mov	dpl,r2
      000064 8B 83            [24]  194 	mov	dph,r3
      000066 8C F0            [24]  195 	mov	b,r4
      000068 E4               [12]  196 	clr	a
      000069 12r00r00         [24]  197 	lcall	__gptrput
      00006C 8D 82            [24]  198 	mov	dpl,r5
      00006E 8E 83            [24]  199 	mov	dph,r6
      000070 8F F0            [24]  200 	mov	b,r7
      000072 12r00r00         [24]  201 	lcall	__gptrput
                                    202 ;	c16rtomb.c:50: codepoint = 0;
      000075 A8*00            [24]  203 	mov	r0,_bp
      000077 08               [12]  204 	inc	r0
      000078 F6               [12]  205 	mov	@r0,a
      000079 08               [12]  206 	inc	r0
      00007A F6               [12]  207 	mov	@r0,a
      00007B 08               [12]  208 	inc	r0
      00007C F6               [12]  209 	mov	@r0,a
      00007D 08               [12]  210 	inc	r0
      00007E F6               [12]  211 	mov	@r0,a
      00007F D0 07            [24]  212 	pop	ar7
      000081 D0 06            [24]  213 	pop	ar6
      000083 D0 05            [24]  214 	pop	ar5
      000085 02r02r30         [24]  215 	ljmp	00120$
      000088                        216 00119$:
                                    217 ;	c16rtomb.c:52: else if(ps->c[1] || ps->c[2]) // We already have the high surrogate. Now get the low surrogate
      000088 E5*00            [12]  218 	mov	a,_bp
      00008A 24 F9            [12]  219 	add	a,#0xf9
      00008C F8               [12]  220 	mov	r0,a
      00008D 86 02            [24]  221 	mov	ar2,@r0
      00008F 08               [12]  222 	inc	r0
      000090 86 03            [24]  223 	mov	ar3,@r0
      000092 08               [12]  224 	inc	r0
      000093 86 04            [24]  225 	mov	ar4,@r0
      000095 E5*00            [12]  226 	mov	a,_bp
      000097 24 05            [12]  227 	add	a,#0x05
      000099 F8               [12]  228 	mov	r0,a
      00009A 74 01            [12]  229 	mov	a,#0x01
      00009C 2A               [12]  230 	add	a,r2
      00009D F6               [12]  231 	mov	@r0,a
      00009E E4               [12]  232 	clr	a
      00009F 3B               [12]  233 	addc	a,r3
      0000A0 08               [12]  234 	inc	r0
      0000A1 F6               [12]  235 	mov	@r0,a
      0000A2 08               [12]  236 	inc	r0
      0000A3 A6 04            [24]  237 	mov	@r0,ar4
      0000A5 E5*00            [12]  238 	mov	a,_bp
      0000A7 24 05            [12]  239 	add	a,#0x05
      0000A9 F8               [12]  240 	mov	r0,a
      0000AA 86 82            [24]  241 	mov	dpl,@r0
      0000AC 08               [12]  242 	inc	r0
      0000AD 86 83            [24]  243 	mov	dph,@r0
      0000AF 08               [12]  244 	inc	r0
      0000B0 86 F0            [24]  245 	mov	b,@r0
      0000B2 12r00r00         [24]  246 	lcall	__gptrget
      0000B5 70 25            [24]  247 	jnz	00114$
      0000B7 E5*00            [12]  248 	mov	a,_bp
      0000B9 24 0D            [12]  249 	add	a,#0x0d
      0000BB F8               [12]  250 	mov	r0,a
      0000BC 74 02            [12]  251 	mov	a,#0x02
      0000BE 2A               [12]  252 	add	a,r2
      0000BF F6               [12]  253 	mov	@r0,a
      0000C0 E4               [12]  254 	clr	a
      0000C1 3B               [12]  255 	addc	a,r3
      0000C2 08               [12]  256 	inc	r0
      0000C3 F6               [12]  257 	mov	@r0,a
      0000C4 08               [12]  258 	inc	r0
      0000C5 A6 04            [24]  259 	mov	@r0,ar4
      0000C7 E5*00            [12]  260 	mov	a,_bp
      0000C9 24 0D            [12]  261 	add	a,#0x0d
      0000CB F8               [12]  262 	mov	r0,a
      0000CC 86 82            [24]  263 	mov	dpl,@r0
      0000CE 08               [12]  264 	inc	r0
      0000CF 86 83            [24]  265 	mov	dph,@r0
      0000D1 08               [12]  266 	inc	r0
      0000D2 86 F0            [24]  267 	mov	b,@r0
      0000D4 12r00r00         [24]  268 	lcall	__gptrget
      0000D7 70 03            [24]  269 	jnz	00160$
      0000D9 02r01rBA         [24]  270 	ljmp	00115$
      0000DC                        271 00160$:
      0000DC                        272 00114$:
                                    273 ;	c16rtomb.c:56: if(c16 < 0xdc00 || c16 > 0xdfff)
      0000DC E5*00            [12]  274 	mov	a,_bp
      0000DE 24 FC            [12]  275 	add	a,#0xfc
      0000E0 F8               [12]  276 	mov	r0,a
      0000E1 C3               [12]  277 	clr	c
      0000E2 08               [12]  278 	inc	r0
      0000E3 E6               [12]  279 	mov	a,@r0
      0000E4 94 DC            [12]  280 	subb	a,#0xdc
      0000E6 50 03            [24]  281 	jnc	00161$
      0000E8 02r02r5B         [24]  282 	ljmp	00121$
      0000EB                        283 00161$:
      0000EB E5*00            [12]  284 	mov	a,_bp
      0000ED 24 FC            [12]  285 	add	a,#0xfc
      0000EF F8               [12]  286 	mov	r0,a
      0000F0 C3               [12]  287 	clr	c
      0000F1 74 FF            [12]  288 	mov	a,#0xff
      0000F3 96               [12]  289 	subb	a,@r0
      0000F4 74 DF            [12]  290 	mov	a,#0xdf
      0000F6 08               [12]  291 	inc	r0
      0000F7 96               [12]  292 	subb	a,@r0
      0000F8 50 03            [24]  293 	jnc	00162$
      0000FA 02r02r5B         [24]  294 	ljmp	00121$
      0000FD                        295 00162$:
                                    296 ;	c16rtomb.c:59: high_surrogate = ps->c[1] + (ps->c[2] << 8);
      0000FD C0 05            [24]  297 	push	ar5
      0000FF C0 06            [24]  298 	push	ar6
      000101 C0 07            [24]  299 	push	ar7
      000103 E5*00            [12]  300 	mov	a,_bp
      000105 24 F9            [12]  301 	add	a,#0xf9
      000107 F8               [12]  302 	mov	r0,a
      000108 86 04            [24]  303 	mov	ar4,@r0
      00010A 08               [12]  304 	inc	r0
      00010B 86 03            [24]  305 	mov	ar3,@r0
      00010D 08               [12]  306 	inc	r0
      00010E 86 02            [24]  307 	mov	ar2,@r0
      000110 E5*00            [12]  308 	mov	a,_bp
      000112 24 08            [12]  309 	add	a,#0x08
      000114 F8               [12]  310 	mov	r0,a
      000115 74 01            [12]  311 	mov	a,#0x01
      000117 2C               [12]  312 	add	a,r4
      000118 F6               [12]  313 	mov	@r0,a
      000119 E4               [12]  314 	clr	a
      00011A 3B               [12]  315 	addc	a,r3
      00011B 08               [12]  316 	inc	r0
      00011C F6               [12]  317 	mov	@r0,a
      00011D 08               [12]  318 	inc	r0
      00011E A6 02            [24]  319 	mov	@r0,ar2
      000120 E5*00            [12]  320 	mov	a,_bp
      000122 24 08            [12]  321 	add	a,#0x08
      000124 F8               [12]  322 	mov	r0,a
      000125 86 82            [24]  323 	mov	dpl,@r0
      000127 08               [12]  324 	inc	r0
      000128 86 83            [24]  325 	mov	dph,@r0
      00012A 08               [12]  326 	inc	r0
      00012B 86 F0            [24]  327 	mov	b,@r0
      00012D 12r00r00         [24]  328 	lcall	__gptrget
      000130 FF               [12]  329 	mov	r7,a
      000131 E5*00            [12]  330 	mov	a,_bp
      000133 24 0B            [12]  331 	add	a,#0x0b
      000135 F8               [12]  332 	mov	r0,a
      000136 A6 07            [24]  333 	mov	@r0,ar7
      000138 08               [12]  334 	inc	r0
      000139 76 00            [12]  335 	mov	@r0,#0x00
      00013B 74 02            [12]  336 	mov	a,#0x02
      00013D 2C               [12]  337 	add	a,r4
      00013E FC               [12]  338 	mov	r4,a
      00013F E4               [12]  339 	clr	a
      000140 3B               [12]  340 	addc	a,r3
      000141 FB               [12]  341 	mov	r3,a
      000142 8C 82            [24]  342 	mov	dpl,r4
      000144 8B 83            [24]  343 	mov	dph,r3
      000146 8A F0            [24]  344 	mov	b,r2
      000148 12r00r00         [24]  345 	lcall	__gptrget
      00014B FE               [12]  346 	mov	r6,a
      00014C 7F 00            [12]  347 	mov	r7,#0x00
      00014E E5*00            [12]  348 	mov	a,_bp
      000150 24 0B            [12]  349 	add	a,#0x0b
      000152 F8               [12]  350 	mov	r0,a
      000153 EF               [12]  351 	mov	a,r7
      000154 26               [12]  352 	add	a,@r0
      000155 FF               [12]  353 	mov	r7,a
      000156 EE               [12]  354 	mov	a,r6
      000157 08               [12]  355 	inc	r0
      000158 36               [12]  356 	addc	a,@r0
                                    357 ;	c16rtomb.c:60: ps->c[1] = ps->c[2] = 0;
      000159 8C 82            [24]  358 	mov	dpl,r4
      00015B 8B 83            [24]  359 	mov	dph,r3
      00015D 8A F0            [24]  360 	mov	b,r2
      00015F E4               [12]  361 	clr	a
      000160 12r00r00         [24]  362 	lcall	__gptrput
      000163 E5*00            [12]  363 	mov	a,_bp
      000165 24 08            [12]  364 	add	a,#0x08
      000167 F8               [12]  365 	mov	r0,a
      000168 86 82            [24]  366 	mov	dpl,@r0
      00016A 08               [12]  367 	inc	r0
      00016B 86 83            [24]  368 	mov	dph,@r0
      00016D 08               [12]  369 	inc	r0
      00016E 86 F0            [24]  370 	mov	b,@r0
      000170 E4               [12]  371 	clr	a
      000171 12r00r00         [24]  372 	lcall	__gptrput
                                    373 ;	c16rtomb.c:61: codepoint = (high_surrogate << 10) - (0xd800 << 10) + c16 - 0xdc00 + 0x10000;
      000174 EF               [12]  374 	mov	a,r7
      000175 2F               [12]  375 	add	a,r7
      000176 25 E0            [12]  376 	add	a,acc
      000178 FE               [12]  377 	mov	r6,a
      000179 7F 00            [12]  378 	mov	r7,#0x00
      00017B E5*00            [12]  379 	mov	a,_bp
      00017D 24 FC            [12]  380 	add	a,#0xfc
      00017F F8               [12]  381 	mov	r0,a
      000180 E6               [12]  382 	mov	a,@r0
      000181 2F               [12]  383 	add	a,r7
      000182 FF               [12]  384 	mov	r7,a
      000183 08               [12]  385 	inc	r0
      000184 E6               [12]  386 	mov	a,@r0
      000185 3E               [12]  387 	addc	a,r6
      000186 FE               [12]  388 	mov	r6,a
      000187 E5*00            [12]  389 	mov	a,_bp
      000189 24 0D            [12]  390 	add	a,#0x0d
      00018B F8               [12]  391 	mov	r0,a
      00018C A6 07            [24]  392 	mov	@r0,ar7
      00018E 08               [12]  393 	inc	r0
      00018F A6 06            [24]  394 	mov	@r0,ar6
      000191 08               [12]  395 	inc	r0
      000192 76 00            [12]  396 	mov	@r0,#0x00
      000194 08               [12]  397 	inc	r0
      000195 76 00            [12]  398 	mov	@r0,#0x00
      000197 E5*00            [12]  399 	mov	a,_bp
      000199 24 0D            [12]  400 	add	a,#0x0d
      00019B F8               [12]  401 	mov	r0,a
      00019C A9*00            [24]  402 	mov	r1,_bp
      00019E 09               [12]  403 	inc	r1
      00019F E6               [12]  404 	mov	a,@r0
      0001A0 F7               [12]  405 	mov	@r1,a
      0001A1 74 24            [12]  406 	mov	a,#0x24
      0001A3 08               [12]  407 	inc	r0
      0001A4 26               [12]  408 	add	a,@r0
      0001A5 09               [12]  409 	inc	r1
      0001A6 F7               [12]  410 	mov	@r1,a
      0001A7 E4               [12]  411 	clr	a
      0001A8 08               [12]  412 	inc	r0
      0001A9 36               [12]  413 	addc	a,@r0
      0001AA 09               [12]  414 	inc	r1
      0001AB F7               [12]  415 	mov	@r1,a
      0001AC E4               [12]  416 	clr	a
      0001AD 08               [12]  417 	inc	r0
      0001AE 36               [12]  418 	addc	a,@r0
      0001AF 09               [12]  419 	inc	r1
      0001B0 F7               [12]  420 	mov	@r1,a
      0001B1 D0 07            [24]  421 	pop	ar7
      0001B3 D0 06            [24]  422 	pop	ar6
      0001B5 D0 05            [24]  423 	pop	ar5
      0001B7 02r02r30         [24]  424 	ljmp	00120$
      0001BA                        425 00115$:
                                    426 ;	c16rtomb.c:63: else if(c16 < 0xd7ff || c16 >= 0xe000) // Basic multilingual plane.
      0001BA E5*00            [12]  427 	mov	a,_bp
      0001BC 24 FC            [12]  428 	add	a,#0xfc
      0001BE F8               [12]  429 	mov	r0,a
      0001BF C3               [12]  430 	clr	c
      0001C0 E6               [12]  431 	mov	a,@r0
      0001C1 94 FF            [12]  432 	subb	a,#0xff
      0001C3 08               [12]  433 	inc	r0
      0001C4 E6               [12]  434 	mov	a,@r0
      0001C5 94 D7            [12]  435 	subb	a,#0xd7
      0001C7 40 0C            [24]  436 	jc	00110$
      0001C9 E5*00            [12]  437 	mov	a,_bp
      0001CB 24 FC            [12]  438 	add	a,#0xfc
      0001CD F8               [12]  439 	mov	r0,a
      0001CE C3               [12]  440 	clr	c
      0001CF 08               [12]  441 	inc	r0
      0001D0 E6               [12]  442 	mov	a,@r0
      0001D1 94 E0            [12]  443 	subb	a,#0xe0
      0001D3 40 16            [24]  444 	jc	00111$
      0001D5                        445 00110$:
                                    446 ;	c16rtomb.c:64: codepoint = c16;
      0001D5 E5*00            [12]  447 	mov	a,_bp
      0001D7 24 FC            [12]  448 	add	a,#0xfc
      0001D9 F8               [12]  449 	mov	r0,a
      0001DA A9*00            [24]  450 	mov	r1,_bp
      0001DC 09               [12]  451 	inc	r1
      0001DD E6               [12]  452 	mov	a,@r0
      0001DE F7               [12]  453 	mov	@r1,a
      0001DF 08               [12]  454 	inc	r0
      0001E0 E6               [12]  455 	mov	a,@r0
      0001E1 09               [12]  456 	inc	r1
      0001E2 F7               [12]  457 	mov	@r1,a
      0001E3 09               [12]  458 	inc	r1
      0001E4 77 00            [12]  459 	mov	@r1,#0x00
      0001E6 09               [12]  460 	inc	r1
      0001E7 77 00            [12]  461 	mov	@r1,#0x00
      0001E9 80 45            [24]  462 	sjmp	00120$
      0001EB                        463 00111$:
                                    464 ;	c16rtomb.c:67: if(c16 > 0xdbff)
      0001EB E5*00            [12]  465 	mov	a,_bp
      0001ED 24 FC            [12]  466 	add	a,#0xfc
      0001EF F8               [12]  467 	mov	r0,a
      0001F0 C3               [12]  468 	clr	c
      0001F1 74 FF            [12]  469 	mov	a,#0xff
      0001F3 96               [12]  470 	subb	a,@r0
      0001F4 74 DB            [12]  471 	mov	a,#0xdb
      0001F6 08               [12]  472 	inc	r0
      0001F7 96               [12]  473 	subb	a,@r0
      0001F8 40 61            [24]  474 	jc	00121$
                                    475 ;	c16rtomb.c:70: ps->c[1] = c16 & 0xff;
      0001FA E5*00            [12]  476 	mov	a,_bp
      0001FC 24 FC            [12]  477 	add	a,#0xfc
      0001FE F8               [12]  478 	mov	r0,a
      0001FF 86 04            [24]  479 	mov	ar4,@r0
      000201 E5*00            [12]  480 	mov	a,_bp
      000203 24 05            [12]  481 	add	a,#0x05
      000205 F8               [12]  482 	mov	r0,a
      000206 86 82            [24]  483 	mov	dpl,@r0
      000208 08               [12]  484 	inc	r0
      000209 86 83            [24]  485 	mov	dph,@r0
      00020B 08               [12]  486 	inc	r0
      00020C 86 F0            [24]  487 	mov	b,@r0
      00020E EC               [12]  488 	mov	a,r4
      00020F 12r00r00         [24]  489 	lcall	__gptrput
                                    490 ;	c16rtomb.c:71: ps->c[2] = c16 >> 8;
      000212 E5*00            [12]  491 	mov	a,_bp
      000214 24 FC            [12]  492 	add	a,#0xfc
      000216 F8               [12]  493 	mov	r0,a
      000217 08               [12]  494 	inc	r0
      000218 86 04            [24]  495 	mov	ar4,@r0
      00021A E5*00            [12]  496 	mov	a,_bp
      00021C 24 0D            [12]  497 	add	a,#0x0d
      00021E F8               [12]  498 	mov	r0,a
      00021F 86 82            [24]  499 	mov	dpl,@r0
      000221 08               [12]  500 	inc	r0
      000222 86 83            [24]  501 	mov	dph,@r0
      000224 08               [12]  502 	inc	r0
      000225 86 F0            [24]  503 	mov	b,@r0
      000227 EC               [12]  504 	mov	a,r4
      000228 12r00r00         [24]  505 	lcall	__gptrput
                                    506 ;	c16rtomb.c:72: return(0);
      00022B 90 00 00         [24]  507 	mov	dptr,#0x0000
      00022E 80 37            [24]  508 	sjmp	00122$
      000230                        509 00120$:
                                    510 ;	c16rtomb.c:75: return(wctomb(s, codepoint));
      000230 A8*00            [24]  511 	mov	r0,_bp
      000232 08               [12]  512 	inc	r0
      000233 E6               [12]  513 	mov	a,@r0
      000234 C0 E0            [24]  514 	push	acc
      000236 08               [12]  515 	inc	r0
      000237 E6               [12]  516 	mov	a,@r0
      000238 C0 E0            [24]  517 	push	acc
      00023A 08               [12]  518 	inc	r0
      00023B E6               [12]  519 	mov	a,@r0
      00023C C0 E0            [24]  520 	push	acc
      00023E 08               [12]  521 	inc	r0
      00023F E6               [12]  522 	mov	a,@r0
      000240 C0 E0            [24]  523 	push	acc
      000242 8D 82            [24]  524 	mov	dpl,r5
      000244 8E 83            [24]  525 	mov	dph,r6
      000246 8F F0            [24]  526 	mov	b,r7
      000248 12r00r00         [24]  527 	lcall	_wctomb
      00024B AE 82            [24]  528 	mov	r6,dpl
      00024D AF 83            [24]  529 	mov	r7,dph
      00024F E5 81            [12]  530 	mov	a,sp
      000251 24 FC            [12]  531 	add	a,#0xfc
      000253 F5 81            [12]  532 	mov	sp,a
      000255 8E 82            [24]  533 	mov	dpl,r6
      000257 8F 83            [24]  534 	mov	dph,r7
                                    535 ;	c16rtomb.c:77: eilseq:
      000259 80 0C            [24]  536 	sjmp	00122$
      00025B                        537 00121$:
                                    538 ;	c16rtomb.c:78: errno = EILSEQ;
      00025B 90r00r00         [24]  539 	mov	dptr,#_errno
      00025E 74 54            [12]  540 	mov	a,#0x54
      000260 F0               [24]  541 	movx	@dptr,a
      000261 E4               [12]  542 	clr	a
      000262 A3               [24]  543 	inc	dptr
      000263 F0               [24]  544 	movx	@dptr,a
                                    545 ;	c16rtomb.c:79: return(-1);
      000264 90 FF FF         [24]  546 	mov	dptr,#0xffff
      000267                        547 00122$:
                                    548 ;	c16rtomb.c:80: }
      000267 85*00 81         [24]  549 	mov	sp,_bp
      00026A D0*00            [24]  550 	pop	_bp
      00026C 22               [24]  551 	ret
                                    552 	.area CSEG    (CODE)
                                    553 	.area CONST   (CODE)
                                    554 	.area XINIT   (CODE)
                                    555 	.area CABS    (ABS,CODE)
