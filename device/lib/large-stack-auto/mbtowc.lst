                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.14 #0 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbtowc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 ;--------------------------------------------------------
                                     13 ; special function registers
                                     14 ;--------------------------------------------------------
                                     15 	.area RSEG    (ABS,DATA)
      000000                         16 	.org 0x0000
                                     17 ;--------------------------------------------------------
                                     18 ; special function bits
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; overlayable register banks
                                     24 ;--------------------------------------------------------
                                     25 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         26 	.ds 8
                                     27 ;--------------------------------------------------------
                                     28 ; internal ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DSEG    (DATA)
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable items in internal ram
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; indirectly addressable internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area ISEG    (DATA)
                                     38 ;--------------------------------------------------------
                                     39 ; absolute internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area IABS    (ABS,DATA)
                                     42 	.area IABS    (ABS,DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; bit data
                                     45 ;--------------------------------------------------------
                                     46 	.area BSEG    (BIT)
                                     47 ;--------------------------------------------------------
                                     48 ; paged external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area PSEG    (PAG,XDATA)
                                     51 ;--------------------------------------------------------
                                     52 ; uninitialized external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area XSEG    (XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XABS    (ABS,XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; initialized external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XISEG   (XDATA)
                                     63 	.area HOME    (CODE)
                                     64 	.area GSINIT0 (CODE)
                                     65 	.area GSINIT1 (CODE)
                                     66 	.area GSINIT2 (CODE)
                                     67 	.area GSINIT3 (CODE)
                                     68 	.area GSINIT4 (CODE)
                                     69 	.area GSINIT5 (CODE)
                                     70 	.area GSINIT  (CODE)
                                     71 	.area GSFINAL (CODE)
                                     72 	.area CSEG    (CODE)
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; Home
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area HOME    (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CSEG    (CODE)
                                     89 ;------------------------------------------------------------
                                     90 ;Allocation info for local variables in function 'mbtowc'
                                     91 ;------------------------------------------------------------
                                     92 ;s                         Allocated to stack - _bp -5
                                     93 ;n                         Allocated to stack - _bp -7
                                     94 ;pwc                       Allocated to registers r5 r6 r7 
                                     95 ;codepoint                 Allocated to stack - _bp +8
                                     96 ;seqlen                    Allocated to registers r4 
                                     97 ;i                         Allocated to registers 
                                     98 ;first_byte                Allocated to stack - _bp +12
                                     99 ;sloc0                     Allocated to stack - _bp +1
                                    100 ;sloc1                     Allocated to stack - _bp +4
                                    101 ;------------------------------------------------------------
                                    102 ;	mbtowc.c:31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                                    103 ;	-----------------------------------------
                                    104 ;	 function mbtowc
                                    105 ;	-----------------------------------------
      000000                        106 _mbtowc:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 E5 81            [12]  116 	mov	a,sp
      000004 F5*00            [12]  117 	mov	_bp,a
      000006 24 0C            [12]  118 	add	a,#0x0c
      000008 F5 81            [12]  119 	mov	sp,a
      00000A AD 82            [24]  120 	mov	r5,dpl
      00000C AE 83            [24]  121 	mov	r6,dph
      00000E AF F0            [24]  122 	mov	r7,b
                                    123 ;	mbtowc.c:37: if(!s)
      000010 E5*00            [12]  124 	mov	a,_bp
      000012 24 FB            [12]  125 	add	a,#0xfb
      000014 F8               [12]  126 	mov	r0,a
      000015 E6               [12]  127 	mov	a,@r0
      000016 08               [12]  128 	inc	r0
      000017 46               [12]  129 	orl	a,@r0
      000018 70 06            [24]  130 	jnz	00102$
                                    131 ;	mbtowc.c:38: return(0);
      00001A 90 00 00         [24]  132 	mov	dptr,#0x0000
      00001D 02r02r56         [24]  133 	ljmp	00126$
      000020                        134 00102$:
                                    135 ;	mbtowc.c:40: seqlen = 1;
      000020 7C 01            [12]  136 	mov	r4,#0x01
                                    137 ;	mbtowc.c:41: first_byte = *s;
      000022 E5*00            [12]  138 	mov	a,_bp
      000024 24 FB            [12]  139 	add	a,#0xfb
      000026 F8               [12]  140 	mov	r0,a
      000027 A9*00            [24]  141 	mov	r1,_bp
      000029 09               [12]  142 	inc	r1
      00002A E6               [12]  143 	mov	a,@r0
      00002B F7               [12]  144 	mov	@r1,a
      00002C 08               [12]  145 	inc	r0
      00002D E6               [12]  146 	mov	a,@r0
      00002E 09               [12]  147 	inc	r1
      00002F F7               [12]  148 	mov	@r1,a
      000030 08               [12]  149 	inc	r0
      000031 E6               [12]  150 	mov	a,@r0
      000032 09               [12]  151 	inc	r1
      000033 F7               [12]  152 	mov	@r1,a
      000034 A8*00            [24]  153 	mov	r0,_bp
      000036 08               [12]  154 	inc	r0
      000037 86 82            [24]  155 	mov	dpl,@r0
      000039 08               [12]  156 	inc	r0
      00003A 86 83            [24]  157 	mov	dph,@r0
      00003C 08               [12]  158 	inc	r0
      00003D 86 F0            [24]  159 	mov	b,@r0
      00003F E5*00            [12]  160 	mov	a,_bp
      000041 24 0C            [12]  161 	add	a,#0x0c
      000043 F9               [12]  162 	mov	r1,a
      000044 12r00r00         [24]  163 	lcall	__gptrget
      000047 F7               [12]  164 	mov	@r1,a
                                    165 ;	mbtowc.c:43: if(first_byte & 0x80)
      000048 E5*00            [12]  166 	mov	a,_bp
      00004A 24 0C            [12]  167 	add	a,#0x0c
      00004C F8               [12]  168 	mov	r0,a
      00004D E6               [12]  169 	mov	a,@r0
      00004E 30 E7 5F         [24]  170 	jnb	acc.7,00107$
                                    171 ;	mbtowc.c:45: while (first_byte & (0x80 >> seqlen))
      000051 7A 01            [12]  172 	mov	r2,#0x01
      000053                        173 00103$:
      000053 C0 05            [24]  174 	push	ar5
      000055 C0 06            [24]  175 	push	ar6
      000057 C0 07            [24]  176 	push	ar7
      000059 8A F0            [24]  177 	mov	b,r2
      00005B 05 F0            [12]  178 	inc	b
      00005D 7E 80            [12]  179 	mov	r6,#0x80
      00005F E4               [12]  180 	clr	a
      000060 FF               [12]  181 	mov	r7,a
      000061 33               [12]  182 	rlc	a
      000062 92 D2            [24]  183 	mov	ov,c
      000064 80 08            [24]  184 	sjmp	00204$
      000066                        185 00203$:
      000066 A2 D2            [12]  186 	mov	c,ov
      000068 EF               [12]  187 	mov	a,r7
      000069 13               [12]  188 	rrc	a
      00006A FF               [12]  189 	mov	r7,a
      00006B EE               [12]  190 	mov	a,r6
      00006C 13               [12]  191 	rrc	a
      00006D FE               [12]  192 	mov	r6,a
      00006E                        193 00204$:
      00006E D5 F0 F5         [24]  194 	djnz	b,00203$
      000071 E5*00            [12]  195 	mov	a,_bp
      000073 24 0C            [12]  196 	add	a,#0x0c
      000075 F8               [12]  197 	mov	r0,a
      000076 86 03            [24]  198 	mov	ar3,@r0
      000078 7D 00            [12]  199 	mov	r5,#0x00
      00007A EB               [12]  200 	mov	a,r3
      00007B 52 06            [12]  201 	anl	ar6,a
      00007D ED               [12]  202 	mov	a,r5
      00007E 52 07            [12]  203 	anl	ar7,a
      000080 EE               [12]  204 	mov	a,r6
      000081 4F               [12]  205 	orl	a,r7
      000082 D0 07            [24]  206 	pop	ar7
      000084 D0 06            [24]  207 	pop	ar6
      000086 D0 05            [24]  208 	pop	ar5
      000088 60 03            [24]  209 	jz	00143$
                                    210 ;	mbtowc.c:46: seqlen++;
      00008A 0A               [12]  211 	inc	r2
      00008B 80 C6            [24]  212 	sjmp	00103$
      00008D                        213 00143$:
      00008D 8A 04            [24]  214 	mov	ar4,r2
                                    215 ;	mbtowc.c:47: first_byte &= (0xff >> (seqlen + 1));
      00008F 0A               [12]  216 	inc	r2
      000090 8A F0            [24]  217 	mov	b,r2
      000092 05 F0            [12]  218 	inc	b
      000094 7A FF            [12]  219 	mov	r2,#0xff
      000096 E4               [12]  220 	clr	a
      000097 FB               [12]  221 	mov	r3,a
      000098 33               [12]  222 	rlc	a
      000099 92 D2            [24]  223 	mov	ov,c
      00009B 80 08            [24]  224 	sjmp	00207$
      00009D                        225 00206$:
      00009D A2 D2            [12]  226 	mov	c,ov
      00009F EB               [12]  227 	mov	a,r3
      0000A0 13               [12]  228 	rrc	a
      0000A1 FB               [12]  229 	mov	r3,a
      0000A2 EA               [12]  230 	mov	a,r2
      0000A3 13               [12]  231 	rrc	a
      0000A4 FA               [12]  232 	mov	r2,a
      0000A5                        233 00207$:
      0000A5 D5 F0 F5         [24]  234 	djnz	b,00206$
      0000A8 E5*00            [12]  235 	mov	a,_bp
      0000AA 24 0C            [12]  236 	add	a,#0x0c
      0000AC F8               [12]  237 	mov	r0,a
      0000AD EA               [12]  238 	mov	a,r2
      0000AE 56               [12]  239 	anl	a,@r0
      0000AF F6               [12]  240 	mov	@r0,a
      0000B0                        241 00107$:
                                    242 ;	mbtowc.c:50: if(seqlen > 4 || n < seqlen)
      0000B0 EC               [12]  243 	mov	a,r4
      0000B1 24 FB            [12]  244 	add	a,#0xff - 0x04
      0000B3 40 11            [24]  245 	jc	00108$
      0000B5 8C 02            [24]  246 	mov	ar2,r4
      0000B7 7B 00            [12]  247 	mov	r3,#0x00
      0000B9 E5*00            [12]  248 	mov	a,_bp
      0000BB 24 F9            [12]  249 	add	a,#0xf9
      0000BD F8               [12]  250 	mov	r0,a
      0000BE C3               [12]  251 	clr	c
      0000BF E6               [12]  252 	mov	a,@r0
      0000C0 9A               [12]  253 	subb	a,r2
      0000C1 08               [12]  254 	inc	r0
      0000C2 E6               [12]  255 	mov	a,@r0
      0000C3 9B               [12]  256 	subb	a,r3
      0000C4 50 06            [24]  257 	jnc	00136$
      0000C6                        258 00108$:
                                    259 ;	mbtowc.c:51: return(-1);
      0000C6 90 FF FF         [24]  260 	mov	dptr,#0xffff
      0000C9 02r02r56         [24]  261 	ljmp	00126$
                                    262 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      0000CC                        263 00136$:
      0000CC 7B 01            [12]  264 	mov	r3,#0x01
      0000CE                        265 00121$:
      0000CE C3               [12]  266 	clr	c
      0000CF EB               [12]  267 	mov	a,r3
      0000D0 9C               [12]  268 	subb	a,r4
      0000D1 50 3F            [24]  269 	jnc	00113$
                                    270 ;	mbtowc.c:54: if((s[i] & 0xc0) != 0x80)
      0000D3 C0 05            [24]  271 	push	ar5
      0000D5 C0 06            [24]  272 	push	ar6
      0000D7 C0 07            [24]  273 	push	ar7
      0000D9 A8*00            [24]  274 	mov	r0,_bp
      0000DB 08               [12]  275 	inc	r0
      0000DC EB               [12]  276 	mov	a,r3
      0000DD 26               [12]  277 	add	a,@r0
      0000DE FA               [12]  278 	mov	r2,a
      0000DF E4               [12]  279 	clr	a
      0000E0 08               [12]  280 	inc	r0
      0000E1 36               [12]  281 	addc	a,@r0
      0000E2 FE               [12]  282 	mov	r6,a
      0000E3 08               [12]  283 	inc	r0
      0000E4 86 07            [24]  284 	mov	ar7,@r0
      0000E6 8A 82            [24]  285 	mov	dpl,r2
      0000E8 8E 83            [24]  286 	mov	dph,r6
      0000EA 8F F0            [24]  287 	mov	b,r7
      0000EC 12r00r00         [24]  288 	lcall	__gptrget
      0000EF FA               [12]  289 	mov	r2,a
      0000F0 53 02 C0         [24]  290 	anl	ar2,#0xc0
      0000F3 7F 00            [12]  291 	mov	r7,#0x00
      0000F5 BA 80 0B         [24]  292 	cjne	r2,#0x80,00211$
      0000F8 BF 00 08         [24]  293 	cjne	r7,#0x00,00211$
      0000FB D0 07            [24]  294 	pop	ar7
      0000FD D0 06            [24]  295 	pop	ar6
      0000FF D0 05            [24]  296 	pop	ar5
      000101 80 0C            [24]  297 	sjmp	00122$
      000103                        298 00211$:
      000103 D0 07            [24]  299 	pop	ar7
      000105 D0 06            [24]  300 	pop	ar6
      000107 D0 05            [24]  301 	pop	ar5
                                    302 ;	mbtowc.c:55: return(-1);
      000109 90 FF FF         [24]  303 	mov	dptr,#0xffff
      00010C 02r02r56         [24]  304 	ljmp	00126$
      00010F                        305 00122$:
                                    306 ;	mbtowc.c:53: for(i = 1; i < seqlen; i++)
      00010F 0B               [12]  307 	inc	r3
      000110 80 BC            [24]  308 	sjmp	00121$
      000112                        309 00113$:
                                    310 ;	mbtowc.c:57: codepoint = first_byte;
      000112 E5*00            [12]  311 	mov	a,_bp
      000114 24 0C            [12]  312 	add	a,#0x0c
      000116 F8               [12]  313 	mov	r0,a
      000117 E5*00            [12]  314 	mov	a,_bp
      000119 24 04            [12]  315 	add	a,#0x04
      00011B F9               [12]  316 	mov	r1,a
      00011C E6               [12]  317 	mov	a,@r0
      00011D F7               [12]  318 	mov	@r1,a
      00011E 09               [12]  319 	inc	r1
      00011F 77 00            [12]  320 	mov	@r1,#0x00
      000121 09               [12]  321 	inc	r1
      000122 77 00            [12]  322 	mov	@r1,#0x00
      000124 09               [12]  323 	inc	r1
      000125 77 00            [12]  324 	mov	@r1,#0x00
                                    325 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      000127 A8*00            [24]  326 	mov	r0,_bp
      000129 08               [12]  327 	inc	r0
      00012A E5*00            [12]  328 	mov	a,_bp
      00012C 24 FB            [12]  329 	add	a,#0xfb
      00012E F9               [12]  330 	mov	r1,a
      00012F 74 01            [12]  331 	mov	a,#0x01
      000131 26               [12]  332 	add	a,@r0
      000132 F7               [12]  333 	mov	@r1,a
      000133 E4               [12]  334 	clr	a
      000134 08               [12]  335 	inc	r0
      000135 36               [12]  336 	addc	a,@r0
      000136 09               [12]  337 	inc	r1
      000137 F7               [12]  338 	mov	@r1,a
      000138 08               [12]  339 	inc	r0
      000139 E6               [12]  340 	mov	a,@r0
      00013A 09               [12]  341 	inc	r1
      00013B F7               [12]  342 	mov	@r1,a
      00013C 8C 03            [24]  343 	mov	ar3,r4
      00013E 1B               [12]  344 	dec	r3
      00013F E5*00            [12]  345 	mov	a,_bp
      000141 24 FB            [12]  346 	add	a,#0xfb
      000143 F8               [12]  347 	mov	r0,a
      000144 A9*00            [24]  348 	mov	r1,_bp
      000146 09               [12]  349 	inc	r1
      000147 E6               [12]  350 	mov	a,@r0
      000148 F7               [12]  351 	mov	@r1,a
      000149 08               [12]  352 	inc	r0
      00014A E6               [12]  353 	mov	a,@r0
      00014B 09               [12]  354 	inc	r1
      00014C F7               [12]  355 	mov	@r1,a
      00014D 08               [12]  356 	inc	r0
      00014E E6               [12]  357 	mov	a,@r0
      00014F 09               [12]  358 	inc	r1
      000150 F7               [12]  359 	mov	@r1,a
      000151                        360 00124$:
      000151 EB               [12]  361 	mov	a,r3
      000152 70 03            [24]  362 	jnz	00212$
      000154 02r01rE9         [24]  363 	ljmp	00114$
      000157                        364 00212$:
                                    365 ;	mbtowc.c:61: codepoint <<= 6;
      000157 C0 05            [24]  366 	push	ar5
      000159 C0 06            [24]  367 	push	ar6
      00015B C0 07            [24]  368 	push	ar7
      00015D E5*00            [12]  369 	mov	a,_bp
      00015F 24 04            [12]  370 	add	a,#0x04
      000161 F8               [12]  371 	mov	r0,a
      000162 E5*00            [12]  372 	mov	a,_bp
      000164 24 08            [12]  373 	add	a,#0x08
      000166 F9               [12]  374 	mov	r1,a
      000167 08               [12]  375 	inc	r0
      000168 08               [12]  376 	inc	r0
      000169 E6               [12]  377 	mov	a,@r0
      00016A 09               [12]  378 	inc	r1
      00016B 09               [12]  379 	inc	r1
      00016C F7               [12]  380 	mov	@r1,a
      00016D 08               [12]  381 	inc	r0
      00016E E6               [12]  382 	mov	a,@r0
      00016F 54 03            [12]  383 	anl	a,#0x03
      000171 A2 E0            [12]  384 	mov	c,acc.0
      000173 C7               [12]  385 	xch	a,@r1
      000174 13               [12]  386 	rrc	a
      000175 C7               [12]  387 	xch	a,@r1
      000176 13               [12]  388 	rrc	a
      000177 A2 E0            [12]  389 	mov	c,acc.0
      000179 C7               [12]  390 	xch	a,@r1
      00017A 13               [12]  391 	rrc	a
      00017B C7               [12]  392 	xch	a,@r1
      00017C 13               [12]  393 	rrc	a
      00017D C7               [12]  394 	xch	a,@r1
      00017E 09               [12]  395 	inc	r1
      00017F F7               [12]  396 	mov	@r1,a
      000180 18               [12]  397 	dec	r0
      000181 18               [12]  398 	dec	r0
      000182 E6               [12]  399 	mov	a,@r0
      000183 03               [12]  400 	rr	a
      000184 03               [12]  401 	rr	a
      000185 54 3F            [12]  402 	anl	a,#0x3f
      000187 19               [12]  403 	dec	r1
      000188 47               [12]  404 	orl	a,@r1
      000189 F7               [12]  405 	mov	@r1,a
      00018A 18               [12]  406 	dec	r0
      00018B E6               [12]  407 	mov	a,@r0
      00018C 19               [12]  408 	dec	r1
      00018D 19               [12]  409 	dec	r1
      00018E F7               [12]  410 	mov	@r1,a
      00018F 08               [12]  411 	inc	r0
      000190 E6               [12]  412 	mov	a,@r0
      000191 54 03            [12]  413 	anl	a,#0x03
      000193 A2 E0            [12]  414 	mov	c,acc.0
      000195 C7               [12]  415 	xch	a,@r1
      000196 13               [12]  416 	rrc	a
      000197 C7               [12]  417 	xch	a,@r1
      000198 13               [12]  418 	rrc	a
      000199 A2 E0            [12]  419 	mov	c,acc.0
      00019B C7               [12]  420 	xch	a,@r1
      00019C 13               [12]  421 	rrc	a
      00019D C7               [12]  422 	xch	a,@r1
      00019E 13               [12]  423 	rrc	a
      00019F C7               [12]  424 	xch	a,@r1
      0001A0 09               [12]  425 	inc	r1
      0001A1 F7               [12]  426 	mov	@r1,a
                                    427 ;	mbtowc.c:62: codepoint |= (*s & 0x3f);
      0001A2 A8*00            [24]  428 	mov	r0,_bp
      0001A4 08               [12]  429 	inc	r0
      0001A5 86 82            [24]  430 	mov	dpl,@r0
      0001A7 08               [12]  431 	inc	r0
      0001A8 86 83            [24]  432 	mov	dph,@r0
      0001AA 08               [12]  433 	inc	r0
      0001AB 86 F0            [24]  434 	mov	b,@r0
      0001AD 12r00r00         [24]  435 	lcall	__gptrget
      0001B0 FF               [12]  436 	mov	r7,a
      0001B1 A3               [24]  437 	inc	dptr
      0001B2 18               [12]  438 	dec	r0
      0001B3 18               [12]  439 	dec	r0
      0001B4 A6 82            [24]  440 	mov	@r0,dpl
      0001B6 08               [12]  441 	inc	r0
      0001B7 A6 83            [24]  442 	mov	@r0,dph
      0001B9 53 07 3F         [24]  443 	anl	ar7,#0x3f
      0001BC E4               [12]  444 	clr	a
      0001BD FE               [12]  445 	mov	r6,a
      0001BE 33               [12]  446 	rlc	a
      0001BF 95 E0            [12]  447 	subb	a,acc
      0001C1 FD               [12]  448 	mov	r5,a
      0001C2 FA               [12]  449 	mov	r2,a
      0001C3 E5*00            [12]  450 	mov	a,_bp
      0001C5 24 08            [12]  451 	add	a,#0x08
      0001C7 F8               [12]  452 	mov	r0,a
      0001C8 E5*00            [12]  453 	mov	a,_bp
      0001CA 24 04            [12]  454 	add	a,#0x04
      0001CC F9               [12]  455 	mov	r1,a
      0001CD EF               [12]  456 	mov	a,r7
      0001CE 46               [12]  457 	orl	a,@r0
      0001CF F7               [12]  458 	mov	@r1,a
      0001D0 EE               [12]  459 	mov	a,r6
      0001D1 08               [12]  460 	inc	r0
      0001D2 46               [12]  461 	orl	a,@r0
      0001D3 09               [12]  462 	inc	r1
      0001D4 F7               [12]  463 	mov	@r1,a
      0001D5 ED               [12]  464 	mov	a,r5
      0001D6 08               [12]  465 	inc	r0
      0001D7 46               [12]  466 	orl	a,@r0
      0001D8 09               [12]  467 	inc	r1
      0001D9 F7               [12]  468 	mov	@r1,a
      0001DA EA               [12]  469 	mov	a,r2
      0001DB 08               [12]  470 	inc	r0
      0001DC 46               [12]  471 	orl	a,@r0
      0001DD 09               [12]  472 	inc	r1
      0001DE F7               [12]  473 	mov	@r1,a
                                    474 ;	mbtowc.c:63: s++;
                                    475 ;	mbtowc.c:59: for(s++, i = seqlen - 1; i; i--)
      0001DF 1B               [12]  476 	dec	r3
      0001E0 D0 07            [24]  477 	pop	ar7
      0001E2 D0 06            [24]  478 	pop	ar6
      0001E4 D0 05            [24]  479 	pop	ar5
      0001E6 02r01r51         [24]  480 	ljmp	00124$
      0001E9                        481 00114$:
                                    482 ;	mbtowc.c:66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      0001E9 E5*00            [12]  483 	mov	a,_bp
      0001EB 24 04            [12]  484 	add	a,#0x04
      0001ED F8               [12]  485 	mov	r0,a
      0001EE C3               [12]  486 	clr	c
      0001EF 08               [12]  487 	inc	r0
      0001F0 E6               [12]  488 	mov	a,@r0
      0001F1 94 D8            [12]  489 	subb	a,#0xd8
      0001F3 08               [12]  490 	inc	r0
      0001F4 E6               [12]  491 	mov	a,@r0
      0001F5 94 00            [12]  492 	subb	a,#0x00
      0001F7 08               [12]  493 	inc	r0
      0001F8 E6               [12]  494 	mov	a,@r0
      0001F9 94 00            [12]  495 	subb	a,#0x00
      0001FB 40 1A            [24]  496 	jc	00116$
      0001FD E5*00            [12]  497 	mov	a,_bp
      0001FF 24 04            [12]  498 	add	a,#0x04
      000201 F8               [12]  499 	mov	r0,a
      000202 C3               [12]  500 	clr	c
      000203 74 FF            [12]  501 	mov	a,#0xff
      000205 96               [12]  502 	subb	a,@r0
      000206 74 DF            [12]  503 	mov	a,#0xdf
      000208 08               [12]  504 	inc	r0
      000209 96               [12]  505 	subb	a,@r0
      00020A E4               [12]  506 	clr	a
      00020B 08               [12]  507 	inc	r0
      00020C 96               [12]  508 	subb	a,@r0
      00020D E4               [12]  509 	clr	a
      00020E 08               [12]  510 	inc	r0
      00020F 96               [12]  511 	subb	a,@r0
      000210 40 05            [24]  512 	jc	00116$
                                    513 ;	mbtowc.c:67: return(-1);
      000212 90 FF FF         [24]  514 	mov	dptr,#0xffff
      000215 80 3F            [24]  515 	sjmp	00126$
      000217                        516 00116$:
                                    517 ;	mbtowc.c:69: if(pwc)
      000217 ED               [12]  518 	mov	a,r5
      000218 4E               [12]  519 	orl	a,r6
      000219 60 21            [24]  520 	jz	00119$
                                    521 ;	mbtowc.c:70: *pwc = codepoint;
      00021B 8D 82            [24]  522 	mov	dpl,r5
      00021D 8E 83            [24]  523 	mov	dph,r6
      00021F 8F F0            [24]  524 	mov	b,r7
      000221 E5*00            [12]  525 	mov	a,_bp
      000223 24 04            [12]  526 	add	a,#0x04
      000225 F8               [12]  527 	mov	r0,a
      000226 E6               [12]  528 	mov	a,@r0
      000227 12r00r00         [24]  529 	lcall	__gptrput
      00022A A3               [24]  530 	inc	dptr
      00022B 08               [12]  531 	inc	r0
      00022C E6               [12]  532 	mov	a,@r0
      00022D 12r00r00         [24]  533 	lcall	__gptrput
      000230 A3               [24]  534 	inc	dptr
      000231 08               [12]  535 	inc	r0
      000232 E6               [12]  536 	mov	a,@r0
      000233 12r00r00         [24]  537 	lcall	__gptrput
      000236 A3               [24]  538 	inc	dptr
      000237 08               [12]  539 	inc	r0
      000238 E6               [12]  540 	mov	a,@r0
      000239 12r00r00         [24]  541 	lcall	__gptrput
      00023C                        542 00119$:
                                    543 ;	mbtowc.c:71: return(codepoint ? seqlen : 0);
      00023C E5*00            [12]  544 	mov	a,_bp
      00023E 24 04            [12]  545 	add	a,#0x04
      000240 F8               [12]  546 	mov	r0,a
      000241 E6               [12]  547 	mov	a,@r0
      000242 08               [12]  548 	inc	r0
      000243 46               [12]  549 	orl	a,@r0
      000244 08               [12]  550 	inc	r0
      000245 46               [12]  551 	orl	a,@r0
      000246 08               [12]  552 	inc	r0
      000247 46               [12]  553 	orl	a,@r0
      000248 60 04            [24]  554 	jz	00128$
      00024A 7F 00            [12]  555 	mov	r7,#0x00
      00024C 80 04            [24]  556 	sjmp	00129$
      00024E                        557 00128$:
      00024E 7C 00            [12]  558 	mov	r4,#0x00
      000250 7F 00            [12]  559 	mov	r7,#0x00
      000252                        560 00129$:
      000252 8C 82            [24]  561 	mov	dpl,r4
      000254 8F 83            [24]  562 	mov	dph,r7
      000256                        563 00126$:
                                    564 ;	mbtowc.c:72: }
      000256 85*00 81         [24]  565 	mov	sp,_bp
      000259 D0*00            [24]  566 	pop	_bp
      00025B 22               [24]  567 	ret
                                    568 	.area CSEG    (CODE)
                                    569 	.area CONST   (CODE)
                                    570 	.area XINIT   (CODE)
                                    571 	.area CABS    (ABS,CODE)
