// #error Warray-bounds= LangEnabledBy(C ObjC C++ LTO ObjC++,Wall,1,0), unknown language 'LTO'
// #error Wformat-overflow= LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=, warn_format >= 1, 0), unknown language 'LTO'
// #error Wformat-truncation= LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=, warn_format >= 1, 0), unknown language 'LTO'
// #error Winfinite-recursion LangEnabledBy(C ObjC C++ LTO ObjC++, Wall), unknown language 'LTO'
// #error Wmaybe-uninitialized LangEnabledBy(C ObjC C++ ObjC++ LTO,Wall), unknown language 'LTO'
// #error Wnonnull LangEnabledBy(C ObjC C++ LTO ObjC++,Wall), unknown language 'LTO'
// #error Wnonnull LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=,warn_format >= 1,0), unknown language 'LTO'
// #error Wstringop-overflow= LangEnabledBy(C ObjC C++ LTO ObjC++, Wall, 2, 0), unknown language 'LTO'
// #error Wstringop-overread LangEnabledBy(C ObjC C++ LTO ObjC++, Wall), unknown language 'LTO'
// #error Wstringop-truncation LangEnabledBy(C ObjC C++ LTO ObjC++, Wall), unknown language 'LTO'
// #error Wuninitialized LangEnabledBy(C ObjC C++ ObjC++ LTO,Wall), unknown language 'LTO'
// #error Wuse-after-free= LangEnabledBy(C ObjC C++ LTO ObjC++, Wall,2,0), unknown language 'LTO'
/* This file is auto-generated by optc-gen.awk.  */

#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "options.h"
#include "tm.h"
#include "opts.h"
#include "intl.h"
#include "insn-attr-common.h"

#include "cpplib.h"
#include "cpplib.h"
#include "diagnostic-color.h"
#include "diagnostic-url.h"
#include "diagnostic.h"
#include "pretty-print.h"

static const struct cl_enum_arg cl_enum_asm_dialect_data[] = 
{
  { "att", ASM_ATT, 0 },
  { "intel", ASM_INTEL, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_asm_dialect_set (void *var, int value)
{
  *((enum asm_dialect *) var) = (enum asm_dialect) value;
}

static int
cl_enum_asm_dialect_get (const void *var)
{
  return (int) *((const enum asm_dialect *) var);
}

static const struct cl_enum_arg cl_enum_auto_init_type_data[] = 
{
  { "pattern", AUTO_INIT_PATTERN, 0 },
  { "uninitialized", AUTO_INIT_UNINITIALIZED, 0 },
  { "zero", AUTO_INIT_ZERO, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_auto_init_type_set (void *var, int value)
{
  *((enum auto_init_type *) var) = (enum auto_init_type) value;
}

static int
cl_enum_auto_init_type_get (const void *var)
{
  return (int) *((const enum auto_init_type *) var);
}

static const struct cl_enum_arg cl_enum_calling_abi_data[] = 
{
  { "ms", MS_ABI, 0 },
  { "sysv", SYSV_ABI, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_calling_abi_set (void *var, int value)
{
  *((enum calling_abi *) var) = (enum calling_abi) value;
}

static int
cl_enum_calling_abi_get (const void *var)
{
  return (int) *((const enum calling_abi *) var);
}

static const struct cl_enum_arg cl_enum_cf_protection_level_data[] = 
{
  { "branch", CF_BRANCH, 0 },
  { "check", CF_CHECK, 0 },
  { "full", CF_FULL, 0 },
  { "none", CF_NONE, 0 },
  { "return", CF_RETURN, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_cf_protection_level_set (void *var, int value)
{
  *((enum cf_protection_level *) var) = (enum cf_protection_level) value;
}

static int
cl_enum_cf_protection_level_get (const void *var)
{
  return (int) *((const enum cf_protection_level *) var);
}

static const struct cl_enum_arg cl_enum_cmodel_data[] = 
{
  { "32", CM_32, 0 },
  { "kernel", CM_KERNEL, 0 },
  { "large", CM_LARGE, 0 },
  { "medium", CM_MEDIUM, 0 },
  { "small", CM_SMALL, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_cmodel_set (void *var, int value)
{
  *((enum cmodel *) var) = (enum cmodel) value;
}

static int
cl_enum_cmodel_get (const void *var)
{
  return (int) *((const enum cmodel *) var);
}

static const struct cl_enum_arg cl_enum_compressed_debug_sections_data[] = 
{
  { "none", 0, 0 },
  { "zlib", 1, 0 },
  { "zlib-gnu", 2, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_compressed_debug_sections_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_compressed_debug_sections_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_cpp_bidirectional_level_data[] = 
{
  { "any", bidirectional_any, 0| ((1) << CL_ENUM_SET_SHIFT) },
  { "none", bidirectional_none, 0| ((1) << CL_ENUM_SET_SHIFT) },
  { "ucn", bidirectional_ucn, 0| ((2) << CL_ENUM_SET_SHIFT) },
  { "unpaired", bidirectional_unpaired, 0| ((1) << CL_ENUM_SET_SHIFT) },
  { NULL, 0, 0 }
};

static void
cl_enum_cpp_bidirectional_level_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_cpp_bidirectional_level_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_cpp_normalize_level_data[] = 
{
  { "id", normalized_identifier_C, 0 },
  { "nfc", normalized_C, 0 },
  { "nfkc", normalized_KC, 0 },
  { "none", normalized_none, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_cpp_normalize_level_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_cpp_normalize_level_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostic_color_rule_data[] = 
{
  { "always", DIAGNOSTICS_COLOR_YES, 0 },
  { "auto", DIAGNOSTICS_COLOR_AUTO, 0 },
  { "never", DIAGNOSTICS_COLOR_NO, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostic_color_rule_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostic_color_rule_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostic_path_format_data[] = 
{
  { "inline-events", DPF_INLINE_EVENTS, 0 },
  { "none", DPF_NONE, 0 },
  { "separate-events", DPF_SEPARATE_EVENTS, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostic_path_format_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostic_path_format_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostic_prefixing_rule_data[] = 
{
  { "every-line", DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE, 0 },
  { "once", DIAGNOSTICS_SHOW_PREFIX_ONCE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostic_prefixing_rule_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostic_prefixing_rule_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostic_url_rule_data[] = 
{
  { "always", DIAGNOSTICS_URL_YES, 0 },
  { "auto", DIAGNOSTICS_URL_AUTO, 0 },
  { "never", DIAGNOSTICS_URL_NO, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostic_url_rule_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostic_url_rule_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostics_column_unit_data[] = 
{
  { "byte", DIAGNOSTICS_COLUMN_UNIT_BYTE, 0 },
  { "display", DIAGNOSTICS_COLUMN_UNIT_DISPLAY, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostics_column_unit_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostics_column_unit_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostics_escape_format_data[] = 
{
  { "bytes", DIAGNOSTICS_ESCAPE_FORMAT_BYTES, 0 },
  { "unicode", DIAGNOSTICS_ESCAPE_FORMAT_UNICODE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostics_escape_format_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostics_escape_format_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_diagnostics_output_format_data[] = 
{
  { "json", DIAGNOSTICS_OUTPUT_FORMAT_JSON, 0 },
  { "text", DIAGNOSTICS_OUTPUT_FORMAT_TEXT, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_diagnostics_output_format_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_diagnostics_output_format_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_dwarf_gnat_encodings_data[] = 
{
  { "all", DWARF_GNAT_ENCODINGS_ALL, 0 },
  { "gdb", DWARF_GNAT_ENCODINGS_GDB, 0 },
  { "minimal", DWARF_GNAT_ENCODINGS_MINIMAL, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_dwarf_gnat_encodings_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_dwarf_gnat_encodings_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_evrp_mode_data[] = 
{
  { "legacy", EVRP_MODE_EVRP_ONLY, 0 },
  { "legacy-first", EVRP_MODE_EVRP_FIRST, 0 },
  { "ranger", EVRP_MODE_RVRP_ONLY, 0 },
  { "ranger-first", EVRP_MODE_RVRP_FIRST, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_evrp_mode_set (void *var, int value)
{
  *((enum evrp_mode *) var) = (enum evrp_mode) value;
}

static int
cl_enum_evrp_mode_get (const void *var)
{
  return (int) *((const enum evrp_mode *) var);
}

static const struct cl_enum_arg cl_enum_excess_precision_data[] = 
{
  { "16", EXCESS_PRECISION_FLOAT16, 0 },
  { "fast", EXCESS_PRECISION_FAST, 0 },
  { "standard", EXCESS_PRECISION_STANDARD, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_excess_precision_set (void *var, int value)
{
  *((enum excess_precision *) var) = (enum excess_precision) value;
}

static int
cl_enum_excess_precision_get (const void *var)
{
  return (int) *((const enum excess_precision *) var);
}

static const struct cl_enum_arg cl_enum_fp_contract_mode_data[] = 
{
  { "fast", FP_CONTRACT_FAST, 0 },
  { "off", FP_CONTRACT_OFF, 0 },
  { "on", FP_CONTRACT_OFF, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_fp_contract_mode_set (void *var, int value)
{
  *((enum fp_contract_mode *) var) = (enum fp_contract_mode) value;
}

static int
cl_enum_fp_contract_mode_get (const void *var)
{
  return (int) *((const enum fp_contract_mode *) var);
}

static const struct cl_enum_arg cl_enum_fpmath_unit_data[] = 
{
  { "387", FPMATH_387, 0 },
  { "387+sse", (enum fpmath_unit) (FPMATH_SSE | FPMATH_387), 0 },
  { "387,sse", (enum fpmath_unit) (FPMATH_SSE | FPMATH_387), 0 },
  { "both", (enum fpmath_unit) (FPMATH_SSE | FPMATH_387), 0 },
  { "sse", FPMATH_SSE, 0 },
  { "sse+387", (enum fpmath_unit) (FPMATH_SSE | FPMATH_387), 0 },
  { "sse,387", (enum fpmath_unit) (FPMATH_SSE | FPMATH_387), 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_fpmath_unit_set (void *var, int value)
{
  *((enum fpmath_unit *) var) = (enum fpmath_unit) value;
}

static int
cl_enum_fpmath_unit_get (const void *var)
{
  return (int) *((const enum fpmath_unit *) var);
}

static const struct cl_enum_arg cl_enum_harden_sls_data[] = 
{
  { "all", harden_sls_all, 0 },
  { "indirect-jmp", harden_sls_indirect_jmp, 0 },
  { "none", harden_sls_none, 0 },
  { "return", harden_sls_return, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_harden_sls_set (void *var, int value)
{
  *((enum harden_sls *) var) = (enum harden_sls) value;
}

static int
cl_enum_harden_sls_get (const void *var)
{
  return (int) *((const enum harden_sls *) var);
}

static const struct cl_enum_arg cl_enum_indirect_branch_data[] = 
{
  { "keep", indirect_branch_keep, 0 },
  { "thunk", indirect_branch_thunk, 0 },
  { "thunk-extern", indirect_branch_thunk_extern, 0 },
  { "thunk-inline", indirect_branch_thunk_inline, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_indirect_branch_set (void *var, int value)
{
  *((enum indirect_branch *) var) = (enum indirect_branch) value;
}

static int
cl_enum_indirect_branch_get (const void *var)
{
  return (int) *((const enum indirect_branch *) var);
}

static const struct cl_enum_arg cl_enum_instrument_return_data[] = 
{
  { "call", instrument_return_call, 0 },
  { "none", instrument_return_none, 0 },
  { "nop5", instrument_return_nop5, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_instrument_return_set (void *var, int value)
{
  *((enum instrument_return *) var) = (enum instrument_return) value;
}

static int
cl_enum_instrument_return_get (const void *var)
{
  return (int) *((const enum instrument_return *) var);
}

static const struct cl_enum_arg cl_enum_ira_algorithm_data[] = 
{
  { "CB", IRA_ALGORITHM_CB, 0 },
  { "priority", IRA_ALGORITHM_PRIORITY, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ira_algorithm_set (void *var, int value)
{
  *((enum ira_algorithm *) var) = (enum ira_algorithm) value;
}

static int
cl_enum_ira_algorithm_get (const void *var)
{
  return (int) *((const enum ira_algorithm *) var);
}

static const struct cl_enum_arg cl_enum_ira_region_data[] = 
{
  { "all", IRA_REGION_ALL, 0 },
  { "mixed", IRA_REGION_MIXED, 0 },
  { "one", IRA_REGION_ONE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ira_region_set (void *var, int value)
{
  *((enum ira_region *) var) = (enum ira_region) value;
}

static int
cl_enum_ira_region_get (const void *var)
{
  return (int) *((const enum ira_region *) var);
}

static const struct cl_enum_arg cl_enum_ivar_visibility_data[] = 
{
  { "package", IVAR_VISIBILITY_PACKAGE, 0 },
  { "private", IVAR_VISIBILITY_PRIVATE, 0 },
  { "protected", IVAR_VISIBILITY_PROTECTED, 0 },
  { "public", IVAR_VISIBILITY_PUBLIC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ivar_visibility_set (void *var, int value)
{
  *((enum ivar_visibility *) var) = (enum ivar_visibility) value;
}

static int
cl_enum_ivar_visibility_get (const void *var)
{
  return (int) *((const enum ivar_visibility *) var);
}

static const struct cl_enum_arg cl_enum_ix86_align_data_data[] = 
{
  { "abi", ix86_align_data_type_abi, 0 },
  { "cacheline", ix86_align_data_type_cacheline, 0 },
  { "compat", ix86_align_data_type_compat, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ix86_align_data_set (void *var, int value)
{
  *((enum ix86_align_data *) var) = (enum ix86_align_data) value;
}

static int
cl_enum_ix86_align_data_get (const void *var)
{
  return (int) *((const enum ix86_align_data *) var);
}

static const struct cl_enum_arg cl_enum_ix86_veclibabi_data[] = 
{
  { "acml", ix86_veclibabi_type_acml, 0 },
  { "svml", ix86_veclibabi_type_svml, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ix86_veclibabi_set (void *var, int value)
{
  *((enum ix86_veclibabi *) var) = (enum ix86_veclibabi) value;
}

static int
cl_enum_ix86_veclibabi_get (const void *var)
{
  return (int) *((const enum ix86_veclibabi *) var);
}

static const struct cl_enum_arg cl_enum_live_patching_level_data[] = 
{
  { "inline-clone", LIVE_PATCHING_INLINE_CLONE, 0 },
  { "inline-only-static", LIVE_PATCHING_INLINE_ONLY_STATIC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_live_patching_level_set (void *var, int value)
{
  *((enum live_patching_level *) var) = (enum live_patching_level) value;
}

static int
cl_enum_live_patching_level_get (const void *var)
{
  return (int) *((const enum live_patching_level *) var);
}

static const struct cl_enum_arg cl_enum_lto_partition_model_data[] = 
{
  { "1to1", LTO_PARTITION_1TO1, 0 },
  { "balanced", LTO_PARTITION_BALANCED, 0 },
  { "max", LTO_PARTITION_MAX, 0 },
  { "none", LTO_PARTITION_NONE, 0 },
  { "one", LTO_PARTITION_ONE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_lto_partition_model_set (void *var, int value)
{
  *((enum lto_partition_model *) var) = (enum lto_partition_model) value;
}

static int
cl_enum_lto_partition_model_get (const void *var)
{
  return (int) *((const enum lto_partition_model *) var);
}

static const struct cl_enum_arg cl_enum_offload_abi_data[] = 
{
  { "ilp32", OFFLOAD_ABI_ILP32, 0 },
  { "lp64", OFFLOAD_ABI_LP64, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_offload_abi_set (void *var, int value)
{
  *((enum offload_abi *) var) = (enum offload_abi) value;
}

static int
cl_enum_offload_abi_get (const void *var)
{
  return (int) *((const enum offload_abi *) var);
}

static const struct cl_enum_arg cl_enum_openacc_kernels_data[] = 
{
  { "decompose", OPENACC_KERNELS_DECOMPOSE, 0 },
  { "parloops", OPENACC_KERNELS_PARLOOPS, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_openacc_kernels_set (void *var, int value)
{
  *((enum openacc_kernels *) var) = (enum openacc_kernels) value;
}

static int
cl_enum_openacc_kernels_get (const void *var)
{
  return (int) *((const enum openacc_kernels *) var);
}

static const struct cl_enum_arg cl_enum_openacc_privatization_data[] = 
{
  { "noisy", OPENACC_PRIVATIZATION_NOISY, 0 },
  { "quiet", OPENACC_PRIVATIZATION_QUIET, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_openacc_privatization_set (void *var, int value)
{
  *((enum openacc_privatization *) var) = (enum openacc_privatization) value;
}

static int
cl_enum_openacc_privatization_get (const void *var)
{
  return (int) *((const enum openacc_privatization *) var);
}

static const struct cl_enum_arg cl_enum_parloops_schedule_type_data[] = 
{
  { "auto", PARLOOPS_SCHEDULE_AUTO, 0 },
  { "dynamic", PARLOOPS_SCHEDULE_DYNAMIC, 0 },
  { "guided", PARLOOPS_SCHEDULE_GUIDED, 0 },
  { "runtime", PARLOOPS_SCHEDULE_RUNTIME, 0 },
  { "static", PARLOOPS_SCHEDULE_STATIC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_parloops_schedule_type_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_parloops_schedule_type_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_permitted_flt_eval_methods_data[] = 
{
  { "c11", PERMITTED_FLT_EVAL_METHODS_C11, 0 },
  { "ts-18661-3", PERMITTED_FLT_EVAL_METHODS_TS_18661, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_permitted_flt_eval_methods_set (void *var, int value)
{
  *((enum permitted_flt_eval_methods *) var) = (enum permitted_flt_eval_methods) value;
}

static int
cl_enum_permitted_flt_eval_methods_get (const void *var)
{
  return (int) *((const enum permitted_flt_eval_methods *) var);
}

static const struct cl_enum_arg cl_enum_pmode_data[] = 
{
  { "long", PMODE_DI, 0 },
  { "short", PMODE_SI, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_pmode_set (void *var, int value)
{
  *((enum pmode *) var) = (enum pmode) value;
}

static int
cl_enum_pmode_get (const void *var)
{
  return (int) *((const enum pmode *) var);
}

static const struct cl_enum_arg cl_enum_prefer_vector_width_data[] = 
{
  { "128", PVW_AVX128, 0 },
  { "256", PVW_AVX256, 0 },
  { "512", PVW_AVX512, 0 },
  { "none", PVW_NONE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_prefer_vector_width_set (void *var, int value)
{
  *((enum prefer_vector_width *) var) = (enum prefer_vector_width) value;
}

static int
cl_enum_prefer_vector_width_get (const void *var)
{
  return (int) *((const enum prefer_vector_width *) var);
}

static const struct cl_enum_arg cl_enum_profile_reproducibility_data[] = 
{
  { "multithreaded", PROFILE_REPRODUCIBILITY_MULTITHREADED, 0 },
  { "parallel-runs", PROFILE_REPRODUCIBILITY_PARALLEL_RUNS, 0 },
  { "serial", PROFILE_REPRODUCIBILITY_SERIAL, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_profile_reproducibility_set (void *var, int value)
{
  *((enum profile_reproducibility *) var) = (enum profile_reproducibility) value;
}

static int
cl_enum_profile_reproducibility_get (const void *var)
{
  return (int) *((const enum profile_reproducibility *) var);
}

static const struct cl_enum_arg cl_enum_profile_update_data[] = 
{
  { "atomic", PROFILE_UPDATE_ATOMIC, 0 },
  { "prefer-atomic", PROFILE_UPDATE_PREFER_ATOMIC, 0 },
  { "single", PROFILE_UPDATE_SINGLE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_profile_update_set (void *var, int value)
{
  *((enum profile_update *) var) = (enum profile_update) value;
}

static int
cl_enum_profile_update_get (const void *var)
{
  return (int) *((const enum profile_update *) var);
}

static const struct cl_enum_arg cl_enum_ranger_debug_data[] = 
{
  { "all", RANGER_DEBUG_ALL, 0 },
  { "cache", RANGER_DEBUG_TRACE_CACHE, 0 },
  { "gori", RANGER_DEBUG_GORI, 0 },
  { "none", RANGER_DEBUG_NONE, 0 },
  { "trace", RANGER_DEBUG_TRACE, 0 },
  { "tracegori", RANGER_DEBUG_TRACE_GORI, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_ranger_debug_set (void *var, int value)
{
  *((enum ranger_debug *) var) = (enum ranger_debug) value;
}

static int
cl_enum_ranger_debug_get (const void *var)
{
  return (int) *((const enum ranger_debug *) var);
}

static const struct cl_enum_arg cl_enum_reorder_blocks_algorithm_data[] = 
{
  { "simple", REORDER_BLOCKS_ALGORITHM_SIMPLE, 0 },
  { "stc", REORDER_BLOCKS_ALGORITHM_STC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_reorder_blocks_algorithm_set (void *var, int value)
{
  *((enum reorder_blocks_algorithm *) var) = (enum reorder_blocks_algorithm) value;
}

static int
cl_enum_reorder_blocks_algorithm_get (const void *var)
{
  return (int) *((const enum reorder_blocks_algorithm *) var);
}

static const struct cl_enum_arg cl_enum_sanitize_coverage_data[] = 
{
  { "trace-cmp", SANITIZE_COV_TRACE_CMP, 0 },
  { "trace-pc", SANITIZE_COV_TRACE_PC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_sanitize_coverage_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_sanitize_coverage_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_sso_struct_data[] = 
{
  { "big-endian", SSO_BIG_ENDIAN, 0 },
  { "little-endian", SSO_LITTLE_ENDIAN, 0 },
  { "native", SSO_NATIVE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_sso_struct_set (void *var, int value)
{
  *((enum scalar_storage_order_kind *) var) = (enum scalar_storage_order_kind) value;
}

static int
cl_enum_sso_struct_get (const void *var)
{
  return (int) *((const enum scalar_storage_order_kind *) var);
}

static const struct cl_enum_arg cl_enum_stack_protector_guard_data[] = 
{
  { "global", SSP_GLOBAL, 0 },
  { "tls", SSP_TLS, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_stack_protector_guard_set (void *var, int value)
{
  *((enum stack_protector_guard *) var) = (enum stack_protector_guard) value;
}

static int
cl_enum_stack_protector_guard_get (const void *var)
{
  return (int) *((const enum stack_protector_guard *) var);
}

static const struct cl_enum_arg cl_enum_stack_reuse_level_data[] = 
{
  { "all", SR_ALL, 0 },
  { "named_vars", SR_NAMED_VARS, 0 },
  { "none", SR_NONE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_stack_reuse_level_set (void *var, int value)
{
  *((enum stack_reuse_level *) var) = (enum stack_reuse_level) value;
}

static int
cl_enum_stack_reuse_level_get (const void *var)
{
  return (int) *((const enum stack_reuse_level *) var);
}

static const struct cl_enum_arg cl_enum_stdlib_kind_data[] = 
{
  { "libc++", 2, 0 },
  { "libstdc++", 1, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_stdlib_kind_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_stdlib_kind_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_stringop_alg_data[] = 
{
  { NULL, 0, 0 }
};

static void
cl_enum_stringop_alg_set (void *var, int value)
{
  *((enum stringop_alg *) var) = (enum stringop_alg) value;
}

static int
cl_enum_stringop_alg_get (const void *var)
{
  return (int) *((const enum stringop_alg *) var);
}

static const struct cl_enum_arg cl_enum_strong_eval_order_data[] = 
{
  { "all", 2, 0 },
  { "none", 0, 0 },
  { "some", 1, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_strong_eval_order_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_strong_eval_order_get (const void *var)
{
  return (int) *((const int *) var);
}

static const struct cl_enum_arg cl_enum_symbol_visibility_data[] = 
{
  { "default", VISIBILITY_DEFAULT, 0 },
  { "hidden", VISIBILITY_HIDDEN, 0 },
  { "internal", VISIBILITY_INTERNAL, 0 },
  { "protected", VISIBILITY_PROTECTED, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_symbol_visibility_set (void *var, int value)
{
  *((enum symbol_visibility *) var) = (enum symbol_visibility) value;
}

static int
cl_enum_symbol_visibility_get (const void *var)
{
  return (int) *((const enum symbol_visibility *) var);
}

static const struct cl_enum_arg cl_enum_threader_debug_data[] = 
{
  { "all", THREADER_DEBUG_ALL, 0 },
  { "none", THREADER_DEBUG_NONE, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_threader_debug_set (void *var, int value)
{
  *((enum threader_debug *) var) = (enum threader_debug) value;
}

static int
cl_enum_threader_debug_get (const void *var)
{
  return (int) *((const enum threader_debug *) var);
}

static const struct cl_enum_arg cl_enum_tls_dialect_data[] = 
{
  { "gnu", TLS_DIALECT_GNU, 0 },
  { "gnu2", TLS_DIALECT_GNU2, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_tls_dialect_set (void *var, int value)
{
  *((enum tls_dialect *) var) = (enum tls_dialect) value;
}

static int
cl_enum_tls_dialect_get (const void *var)
{
  return (int) *((const enum tls_dialect *) var);
}

static const struct cl_enum_arg cl_enum_tls_model_data[] = 
{
  { "global-dynamic", TLS_MODEL_GLOBAL_DYNAMIC, 0 },
  { "initial-exec", TLS_MODEL_INITIAL_EXEC, 0 },
  { "local-dynamic", TLS_MODEL_LOCAL_DYNAMIC, 0 },
  { "local-exec", TLS_MODEL_LOCAL_EXEC, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_tls_model_set (void *var, int value)
{
  *((enum tls_model *) var) = (enum tls_model) value;
}

static int
cl_enum_tls_model_get (const void *var)
{
  return (int) *((const enum tls_model *) var);
}

static const struct cl_enum_arg cl_enum_vect_cost_model_data[] = 
{
  { "cheap", VECT_COST_MODEL_CHEAP, 0 },
  { "dynamic", VECT_COST_MODEL_DYNAMIC, 0 },
  { "unlimited", VECT_COST_MODEL_UNLIMITED, 0 },
  { "very-cheap", VECT_COST_MODEL_VERY_CHEAP, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_vect_cost_model_set (void *var, int value)
{
  *((enum vect_cost_model *) var) = (enum vect_cost_model) value;
}

static int
cl_enum_vect_cost_model_get (const void *var)
{
  return (int) *((const enum vect_cost_model *) var);
}

static const struct cl_enum_arg cl_enum_vrp_mode_data[] = 
{
  { "ranger", VRP_MODE_RANGER, 0 },
  { "vrp", VRP_MODE_VRP, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_vrp_mode_set (void *var, int value)
{
  *((enum vrp_mode *) var) = (enum vrp_mode) value;
}

static int
cl_enum_vrp_mode_get (const void *var)
{
  return (int) *((const enum vrp_mode *) var);
}

static const struct cl_enum_arg cl_enum_vtv_priority_data[] = 
{
  { "none", VTV_NO_PRIORITY, 0 },
  { "preinit", VTV_PREINIT_PRIORITY, 0 },
  { "std", VTV_STANDARD_PRIORITY, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_vtv_priority_set (void *var, int value)
{
  *((enum vtv_priority *) var) = (enum vtv_priority) value;
}

static int
cl_enum_vtv_priority_get (const void *var)
{
  return (int) *((const enum vtv_priority *) var);
}

static const struct cl_enum_arg cl_enum_warn_aligned_new_level_data[] = 
{
  { "all", 2, 0 },
  { "global", 1, 0 },
  { "none", 0, 0 },
  { NULL, 0, 0 }
};

static void
cl_enum_warn_aligned_new_level_set (void *var, int value)
{
  *((int *) var) = (int) value;
}

static int
cl_enum_warn_aligned_new_level_get (const void *var)
{
  return (int) *((const int *) var);
}

const struct cl_enum cl_enums[] =
{
  {
    "Known assembler dialects (for use with the -masm= option):",
    NULL,
    cl_enum_asm_dialect_data,
    sizeof (enum asm_dialect),
    cl_enum_asm_dialect_set,
    cl_enum_asm_dialect_get
  },
  {
    NULL,
    "unrecognized automatic variable initialization type %qs",
    cl_enum_auto_init_type_data,
    sizeof (enum auto_init_type),
    cl_enum_auto_init_type_set,
    cl_enum_auto_init_type_get
  },
  {
    "Known ABIs (for use with the -mabi= option):",
    NULL,
    cl_enum_calling_abi_data,
    sizeof (enum calling_abi),
    cl_enum_calling_abi_set,
    cl_enum_calling_abi_get
  },
  {
    NULL,
    "unknown Control-Flow Protection Level %qs",
    cl_enum_cf_protection_level_data,
    sizeof (enum cf_protection_level),
    cl_enum_cf_protection_level_set,
    cl_enum_cf_protection_level_get
  },
  {
    "Known code models (for use with the -mcmodel= option):",
    NULL,
    cl_enum_cmodel_data,
    sizeof (enum cmodel),
    cl_enum_cmodel_set,
    cl_enum_cmodel_get
  },
  {
    NULL,
    NULL,
    cl_enum_compressed_debug_sections_data,
    sizeof (int),
    cl_enum_compressed_debug_sections_set,
    cl_enum_compressed_debug_sections_get
  },
  {
    NULL,
    "argument %qs to %<-Wbidi-chars%> not recognized",
    cl_enum_cpp_bidirectional_level_data,
    sizeof (int),
    cl_enum_cpp_bidirectional_level_set,
    cl_enum_cpp_bidirectional_level_get
  },
  {
    NULL,
    "argument %qs to %<-Wnormalized%> not recognized",
    cl_enum_cpp_normalize_level_data,
    sizeof (int),
    cl_enum_cpp_normalize_level_set,
    cl_enum_cpp_normalize_level_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostic_color_rule_data,
    sizeof (int),
    cl_enum_diagnostic_color_rule_set,
    cl_enum_diagnostic_color_rule_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostic_path_format_data,
    sizeof (int),
    cl_enum_diagnostic_path_format_set,
    cl_enum_diagnostic_path_format_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostic_prefixing_rule_data,
    sizeof (int),
    cl_enum_diagnostic_prefixing_rule_set,
    cl_enum_diagnostic_prefixing_rule_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostic_url_rule_data,
    sizeof (int),
    cl_enum_diagnostic_url_rule_set,
    cl_enum_diagnostic_url_rule_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostics_column_unit_data,
    sizeof (int),
    cl_enum_diagnostics_column_unit_set,
    cl_enum_diagnostics_column_unit_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostics_escape_format_data,
    sizeof (int),
    cl_enum_diagnostics_escape_format_set,
    cl_enum_diagnostics_escape_format_get
  },
  {
    NULL,
    NULL,
    cl_enum_diagnostics_output_format_data,
    sizeof (int),
    cl_enum_diagnostics_output_format_set,
    cl_enum_diagnostics_output_format_get
  },
  {
    NULL,
    NULL,
    cl_enum_dwarf_gnat_encodings_data,
    sizeof (int),
    cl_enum_dwarf_gnat_encodings_set,
    cl_enum_dwarf_gnat_encodings_get
  },
  {
    NULL,
    "unknown evrp mode %qs",
    cl_enum_evrp_mode_data,
    sizeof (enum evrp_mode),
    cl_enum_evrp_mode_set,
    cl_enum_evrp_mode_get
  },
  {
    NULL,
    "unknown excess precision style %qs",
    cl_enum_excess_precision_data,
    sizeof (enum excess_precision),
    cl_enum_excess_precision_set,
    cl_enum_excess_precision_get
  },
  {
    NULL,
    "unknown floating point contraction style %qs",
    cl_enum_fp_contract_mode_data,
    sizeof (enum fp_contract_mode),
    cl_enum_fp_contract_mode_set,
    cl_enum_fp_contract_mode_get
  },
  {
    "Valid arguments to -mfpmath=:",
    NULL,
    cl_enum_fpmath_unit_data,
    sizeof (enum fpmath_unit),
    cl_enum_fpmath_unit_set,
    cl_enum_fpmath_unit_get
  },
  {
    "Known choices for mitigation against straight line speculation with -mharden-sls=:",
    NULL,
    cl_enum_harden_sls_data,
    sizeof (enum harden_sls),
    cl_enum_harden_sls_set,
    cl_enum_harden_sls_get
  },
  {
    "Known indirect branch choices (for use with the -mindirect-branch=/-mfunction-return= options):",
    NULL,
    cl_enum_indirect_branch_data,
    sizeof (enum indirect_branch),
    cl_enum_indirect_branch_set,
    cl_enum_indirect_branch_get
  },
  {
    "Known choices for return instrumentation with -minstrument-return=:",
    NULL,
    cl_enum_instrument_return_data,
    sizeof (enum instrument_return),
    cl_enum_instrument_return_set,
    cl_enum_instrument_return_get
  },
  {
    NULL,
    "unknown IRA algorithm %qs",
    cl_enum_ira_algorithm_data,
    sizeof (enum ira_algorithm),
    cl_enum_ira_algorithm_set,
    cl_enum_ira_algorithm_get
  },
  {
    NULL,
    "unknown IRA region %qs",
    cl_enum_ira_region_data,
    sizeof (enum ira_region),
    cl_enum_ira_region_set,
    cl_enum_ira_region_get
  },
  {
    NULL,
    "unrecognized ivar visibility value %qs",
    cl_enum_ivar_visibility_data,
    sizeof (enum ivar_visibility),
    cl_enum_ivar_visibility_set,
    cl_enum_ivar_visibility_get
  },
  {
    "Known data alignment choices (for use with the -malign-data= option):",
    NULL,
    cl_enum_ix86_align_data_data,
    sizeof (enum ix86_align_data),
    cl_enum_ix86_align_data_set,
    cl_enum_ix86_align_data_get
  },
  {
    "Known vectorization library ABIs (for use with the -mveclibabi= option):",
    NULL,
    cl_enum_ix86_veclibabi_data,
    sizeof (enum ix86_veclibabi),
    cl_enum_ix86_veclibabi_set,
    cl_enum_ix86_veclibabi_get
  },
  {
    NULL,
    "unknown Live-Patching Level %qs",
    cl_enum_live_patching_level_data,
    sizeof (enum live_patching_level),
    cl_enum_live_patching_level_set,
    cl_enum_live_patching_level_get
  },
  {
    NULL,
    "unknown LTO partitioning model %qs",
    cl_enum_lto_partition_model_data,
    sizeof (enum lto_partition_model),
    cl_enum_lto_partition_model_set,
    cl_enum_lto_partition_model_get
  },
  {
    NULL,
    "unknown offload ABI %qs",
    cl_enum_offload_abi_data,
    sizeof (enum offload_abi),
    cl_enum_offload_abi_set,
    cl_enum_offload_abi_get
  },
  {
    NULL,
    NULL,
    cl_enum_openacc_kernels_data,
    sizeof (enum openacc_kernels),
    cl_enum_openacc_kernels_set,
    cl_enum_openacc_kernels_get
  },
  {
    NULL,
    NULL,
    cl_enum_openacc_privatization_data,
    sizeof (enum openacc_privatization),
    cl_enum_openacc_privatization_set,
    cl_enum_openacc_privatization_get
  },
  {
    NULL,
    NULL,
    cl_enum_parloops_schedule_type_data,
    sizeof (int),
    cl_enum_parloops_schedule_type_set,
    cl_enum_parloops_schedule_type_get
  },
  {
    NULL,
    "unknown specification for the set of FLT_EVAL_METHOD values to permit %qs",
    cl_enum_permitted_flt_eval_methods_data,
    sizeof (enum permitted_flt_eval_methods),
    cl_enum_permitted_flt_eval_methods_set,
    cl_enum_permitted_flt_eval_methods_get
  },
  {
    "Known address mode (for use with the -maddress-mode= option):",
    NULL,
    cl_enum_pmode_data,
    sizeof (enum pmode),
    cl_enum_pmode_set,
    cl_enum_pmode_get
  },
  {
    "Known preferred register vector length (to use with the -mprefer-vector-width= option):",
    NULL,
    cl_enum_prefer_vector_width_data,
    sizeof (enum prefer_vector_width),
    cl_enum_prefer_vector_width_set,
    cl_enum_prefer_vector_width_get
  },
  {
    NULL,
    "unknown profile reproducibility method %qs",
    cl_enum_profile_reproducibility_data,
    sizeof (enum profile_reproducibility),
    cl_enum_profile_reproducibility_set,
    cl_enum_profile_reproducibility_get
  },
  {
    NULL,
    "unknown profile update method %qs",
    cl_enum_profile_update_data,
    sizeof (enum profile_update),
    cl_enum_profile_update_set,
    cl_enum_profile_update_get
  },
  {
    NULL,
    "unknown ranger debug mode %qs",
    cl_enum_ranger_debug_data,
    sizeof (enum ranger_debug),
    cl_enum_ranger_debug_set,
    cl_enum_ranger_debug_get
  },
  {
    NULL,
    "unknown basic block reordering algorithm %qs",
    cl_enum_reorder_blocks_algorithm_data,
    sizeof (enum reorder_blocks_algorithm),
    cl_enum_reorder_blocks_algorithm_set,
    cl_enum_reorder_blocks_algorithm_get
  },
  {
    NULL,
    NULL,
    cl_enum_sanitize_coverage_data,
    sizeof (int),
    cl_enum_sanitize_coverage_set,
    cl_enum_sanitize_coverage_get
  },
  {
    NULL,
    "unrecognized scalar storage order value %qs",
    cl_enum_sso_struct_data,
    sizeof (enum scalar_storage_order_kind),
    cl_enum_sso_struct_set,
    cl_enum_sso_struct_get
  },
  {
    "Known stack protector guard (for use with the -mstack-protector-guard= option):",
    NULL,
    cl_enum_stack_protector_guard_data,
    sizeof (enum stack_protector_guard),
    cl_enum_stack_protector_guard_set,
    cl_enum_stack_protector_guard_get
  },
  {
    NULL,
    "unknown Stack Reuse Level %qs",
    cl_enum_stack_reuse_level_data,
    sizeof (enum stack_reuse_level),
    cl_enum_stack_reuse_level_set,
    cl_enum_stack_reuse_level_get
  },
  {
    NULL,
    NULL,
    cl_enum_stdlib_kind_data,
    sizeof (int),
    cl_enum_stdlib_kind_set,
    cl_enum_stdlib_kind_get
  },
  {
    "Valid arguments to -mstringop-strategy=:",
    NULL,
    cl_enum_stringop_alg_data,
    sizeof (enum stringop_alg),
    cl_enum_stringop_alg_set,
    cl_enum_stringop_alg_get
  },
  {
    NULL,
    NULL,
    cl_enum_strong_eval_order_data,
    sizeof (int),
    cl_enum_strong_eval_order_set,
    cl_enum_strong_eval_order_get
  },
  {
    NULL,
    "unrecognized visibility value %qs",
    cl_enum_symbol_visibility_data,
    sizeof (enum symbol_visibility),
    cl_enum_symbol_visibility_set,
    cl_enum_symbol_visibility_get
  },
  {
    NULL,
    "unknown threader debug mode %qs",
    cl_enum_threader_debug_data,
    sizeof (enum threader_debug),
    cl_enum_threader_debug_set,
    cl_enum_threader_debug_get
  },
  {
    "Known TLS dialects (for use with the -mtls-dialect= option):",
    NULL,
    cl_enum_tls_dialect_data,
    sizeof (enum tls_dialect),
    cl_enum_tls_dialect_set,
    cl_enum_tls_dialect_get
  },
  {
    NULL,
    "unknown TLS model %qs",
    cl_enum_tls_model_data,
    sizeof (enum tls_model),
    cl_enum_tls_model_set,
    cl_enum_tls_model_get
  },
  {
    NULL,
    "unknown vectorizer cost model %qs",
    cl_enum_vect_cost_model_data,
    sizeof (enum vect_cost_model),
    cl_enum_vect_cost_model_set,
    cl_enum_vect_cost_model_get
  },
  {
    NULL,
    "unknown vrp mode %qs",
    cl_enum_vrp_mode_data,
    sizeof (enum vrp_mode),
    cl_enum_vrp_mode_set,
    cl_enum_vrp_mode_get
  },
  {
    NULL,
    "unknown vtable verify initialization priority %qs",
    cl_enum_vtv_priority_data,
    sizeof (enum vtv_priority),
    cl_enum_vtv_priority_set,
    cl_enum_vtv_priority_get
  },
  {
    NULL,
    "argument %qs to %<-Waligned-new%> not recognized",
    cl_enum_warn_aligned_new_level_data,
    sizeof (int),
    cl_enum_warn_aligned_new_level_set,
    cl_enum_warn_aligned_new_level_get
  },
};
const unsigned int cl_enums_count = 56;

const struct gcc_options global_options_init =
{
  0, /* ix86_stack_protector_guard_offset */
  ADDR_SPACE_GENERIC, /* ix86_stack_protector_guard_reg */
  false, /* ix86_unsafe_math_optimizations */
  CM_32, /* ix86_cmodel */
  EXCESS_PRECISION_DEFAULT, /* ix86_excess_precision */
  ix86_veclibabi_type_none, /* ix86_veclibabi_type */
  PMODE_SI, /* ix86_pmode */
  0, /* ix86_incoming_stack_boundary_arg */
  0, /* ix86_preferred_stack_boundary_arg */
  0, /* ix86_regparm */
  RECIP_MASK_DEFAULT, /* recip_mask */
  TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT, /* ix86_isa_flags */
  0, /* ix86_isa_flags2 */
  0, /* ix86_isa_flags2_explicit */
  0, /* ix86_isa_flags_explicit */
  false, /* dump_base_name_prefixed */
  0, /* exit_after_options */
  0, /* flag_dump_all_passed */
  0, /* flag_opts_finished */
  false, /* flag_stack_usage_info */
  false, /* flag_warn_unused_result */
  false, /* in_lto_p */
  0, /* use_gnu_debug_info_extensions */
  0, /* help_enum_printed */
  0, /* help_printed */
  0, /* aux_base_name */
  0, /* main_input_basename */
  0, /* main_input_filename */
  CTFINFO_LEVEL_NONE, /* ctf_debug_info_level */
  DINFO_LEVEL_NONE, /* debug_info_level */
  { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }, /* debug_struct_generic */
  { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }, /* debug_struct_ordinary */
  DWARF_GNAT_ENCODINGS_DEFAULT, /* gnat_encodings */
  INCREMENTAL_LINK_NONE, /* flag_incremental_link */
  NO_STACK_CHECK, /* flag_stack_check */
  1, /* flag_complex_method */
  0, /* flag_debug_asm */
  1, /* flag_default_complex_method */
  0, /* flag_dump_rtl_in_asm */
  0, /* flag_gen_aux_info */
  0, /* flag_generate_lto */
  0, /* flag_generate_offload */
  0, /* flag_print_asm_name */
  0, /* flag_shlib */
  0, /* ix86_target_flags */
  0, /* main_input_baselength */
  0, /* optimize */
  0, /* optimize_debug */
  0, /* optimize_fast */
  0, /* optimize_size */
  0, /* recip_mask_explicit */
  0, /* rtl_dump_and_exit */
  0, /* target_flags */
  NO_DEBUG, /* write_symbols */
  0, /* flag_sanitize */
  (SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT | SANITIZE_KERNEL_ADDRESS | SANITIZE_KERNEL_HWADDRESS) & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN), /* flag_sanitize_recover */
  0, /* flag_zero_call_used_regs */
  0, /* help_columns */
  TARGET_DEFAULT_PACK_STRUCT, /* initial_max_fld_align */
  0, /* flag_ignored_attributes */
  0, /* flag_instrument_functions_exclude_files */
  0, /* flag_instrument_functions_exclude_functions */
  0, /* help_flag */
  0, /* no_sysroot_suffix */
  ".o", /* var_obj_ext */
  4, /* param_align_loop_iterations */
  100, /* param_align_threshold */
  5, /* param_analyzer_bb_explosion_factor */
  20, /* param_analyzer_max_constraints */
  200, /* param_analyzer_max_enodes_for_full_dump */
  8, /* param_analyzer_max_enodes_per_program_point */
  10, /* param_analyzer_max_infeasible_edges */
  2, /* param_analyzer_max_recursion_depth */
  12, /* param_analyzer_max_svalue_depth */
  10, /* param_analyzer_min_snodes_for_call_summary */
  1, /* param_asan_globals */
  1, /* param_asan_protect_allocas */
  1, /* param_asan_instrument_reads */
  1, /* param_asan_instrument_writes */
  7000, /* param_asan_instrumentation_with_call_threshold */
  1, /* param_asan_memintrin */
  1, /* param_asan_stack */
  1, /* param_asan_use_after_return */
  10, /* param_avg_loop_niter */
  0, /* param_avoid_fma_max_bits */
  90, /* param_builtin_expect_probability */
  3, /* param_builtin_string_cmp_inline_length */
  0, /* param_case_values_threshold */
  20, /* param_comdat_sharing_probability */
  0, /* param_construct_interfere_size */
  1000, /* param_cxx_max_namespaces_for_diagnostic_help */
  0, /* param_destruct_interfere_size */
  256, /* param_dse_max_alias_queries_per_store */
  256, /* param_dse_max_object_size */
  6, /* param_early_inlining_insns */
  EVRP_MODE_RVRP_ONLY, /* param_evrp_mode */
  800, /* param_evrp_sparse_threshold */
  50, /* param_evrp_switch_limit */
  3, /* param_fsm_scale_path_blocks */
  2, /* param_fsm_scale_path_stmts */
  10, /* param_gcse_after_reload_critical_fraction */
  3, /* param_gcse_after_reload_partial_fraction */
  10, /* param_gcse_cost_distance_ratio */
  3, /* param_gcse_unrestricted_cost */
  30, /* param_ggc_min_expand */
  4096, /* param_ggc_min_heapsize */
  0, /* param_gimple_fe_computed_hot_bb_threshold */
  0, /* param_graphite_allow_codegen_errors */
  100, /* param_graphite_max_arrays_per_scop */
  10, /* param_graphite_max_nb_scop_params */
  10, /* param_hash_table_verification_limit */
  10000, /* param_hot_bb_count_fraction */
  990, /* param_hot_bb_count_ws_permille */
  1000, /* param_hot_bb_frequency_fraction */
  1, /* param_hwasan_instrument_allocas */
  1, /* param_hwasan_instrument_mem_intrinsics */
  1, /* param_hwasan_instrument_reads */
  1, /* param_hwasan_instrument_stack */
  1, /* param_hwasan_instrument_writes */
  1, /* param_hwasan_random_frame_tag */
  200, /* param_inline_heuristics_hint_percent */
  30, /* param_inline_min_speedup */
  40, /* param_inline_unit_growth */
  251, /* param_integer_share_limit */
  500, /* param_ipa_cp_eval_threshold */
  16000, /* param_ipa_cp_large_unit_insns */
  64, /* param_ipa_cp_loop_hint_bonus */
  8, /* param_ipa_cp_max_recursive_depth */
  2, /* param_ipa_cp_min_recursive_probability */
  10, /* param_ipa_cp_profile_count_base */
  40, /* param_ipa_cp_recursion_penalty */
  6, /* param_ipa_cp_recursive_freq_factor */
  15, /* param_ipa_cp_single_call_penalty */
  10, /* param_ipa_cp_unit_growth */
  8, /* param_ipa_cp_value_list_size */
  8, /* param_ipa_jump_function_lookups */
  25000, /* param_ipa_max_aa_steps */
  16, /* param_ipa_max_agg_items */
  16, /* param_ipa_max_loop_predicates */
  10, /* param_ipa_max_param_expr_ops */
  5, /* param_ipa_max_switch_predicate_bounds */
  8, /* param_ipa_sra_max_replacements */
  2, /* param_ipa_sra_ptr_growth_factor */
  1, /* param_ira_consider_dup_in_all_alts */
  2, /* param_ira_loop_reserved_regs */
  1000, /* param_ira_max_conflict_table_size */
  100, /* param_ira_max_loops_num */
  10, /* param_iv_always_prune_cand_set_bound */
  40, /* param_iv_consider_all_candidates_bound */
  250, /* param_iv_max_considered_uses */
  300, /* param_jump_table_max_growth_ratio_for_size */
  800, /* param_jump_table_max_growth_ratio_for_speed */
  32, /* param_l1_cache_line_size */
  64, /* param_l1_cache_size */
  512, /* param_l2_cache_size */
  100, /* param_large_function_growth */
  2700, /* param_large_function_insns */
  1000, /* param_stack_frame_growth */
  256, /* param_large_stack_frame */
  10000, /* param_large_unit_insns */
  32768, /* param_lazy_modules */
  20, /* param_lim_expensive */
  -1, /* param_logical_op_non_short_circuit */
  51, /* param_loop_block_tile_size */
  64, /* param_loop_interchange_max_num_stmts */
  2, /* param_loop_interchange_stride_ratio */
  10000, /* param_loop_invariant_max_bbs_in_loop */
  1000, /* param_loop_max_datarefs_for_datadeps */
  200, /* param_loop_versioning_max_inner_insns */
  100, /* param_loop_versioning_max_outer_insns */
  40, /* param_lra_inheritance_ebb_probability_cutoff */
  500, /* param_lra_max_considered_reload_pseudos */
  1000000, /* param_max_partition_size */
  32, /* param_max_lto_streaming_parallelism */
  10000, /* param_min_partition_size */
  128, /* param_lto_partitions */
  80, /* param_max_average_unrolled_insns */
  4, /* param_max_combine_insns */
  8, /* param_max_unroll_iterations */
  16, /* param_max_completely_peel_times */
  200, /* param_max_completely_peeled_insns */
  100, /* param_max_crossjump_edges */
  1000, /* param_max_cse_insns */
  10, /* param_max_cse_path_length */
  500, /* param_max_cselib_memory_locations */
  100000, /* param_max_debug_marker_count */
  100, /* param_max_delay_slot_insn_search */
  333, /* param_max_delay_slot_live_search */
  5000, /* param_max_dse_active_local_stores */
  1, /* param_early_inliner_max_iterations */
  0, /* param_max_fields_for_field_sensitive */
  200, /* param_max_find_base_term_values */
  10, /* param_max_fsm_thread_length */
  100, /* param_max_fsm_thread_path_insns */
  20, /* param_max_gcse_insertion_ratio */
  131072, /* param_max_gcse_memory */
  8, /* param_max_goto_duplication_insns */
  8, /* param_max_grow_copy_bb_insns */
  30, /* param_max_hoist_depth */
  4000, /* param_inline_functions_called_once_insns */
  6, /* param_inline_functions_called_once_loop_depth */
  15, /* param_max_inline_insns_auto */
  450, /* param_max_inline_insns_recursive_auto */
  450, /* param_max_inline_insns_recursive */
  70, /* param_max_inline_insns_single */
  0, /* param_max_inline_insns_size */
  0, /* param_max_inline_insns_small */
  8, /* param_max_inline_recursive_depth_auto */
  8, /* param_max_inline_recursive_depth */
  350000, /* param_max_isl_operations */
  10, /* param_max_iterations_computation_cost */
  1000, /* param_max_iterations_to_track */
  15, /* param_max_jump_thread_duplication_stmts */
  10000, /* param_max_last_value_rtl */
  20, /* param_max_loop_header_insns */
  40, /* param_max_modulo_backtrack_attempts */
  100, /* param_max_partial_antic_length */
  32, /* param_max_peel_branches */
  16, /* param_max_peel_times */
  100, /* param_max_peeled_insns */
  32, /* param_max_pending_list_length */
  15, /* param_max_pipeline_region_blocks */
  200, /* param_max_pipeline_region_insns */
  5, /* param_max_pow_sqrt_depth */
  100, /* param_max_predicted_iterations */
  100, /* param_max_reload_search_insns */
  10, /* param_max_rtl_if_conversion_insns */
  20, /* param_max_rtl_if_conversion_predictable_cost */
  40, /* param_max_rtl_if_conversion_unpredictable_cost */
  0, /* param_max_sched_extend_regions_iters */
  3, /* param_max_sched_insn_conflict_delay */
  100, /* param_max_sched_ready_insns */
  10, /* param_max_sched_region_blocks */
  100, /* param_max_sched_region_insns */
  50, /* param_max_slsr_candidate_scan */
  50, /* param_max_speculative_devirt_maydefs */
  3, /* param_max_ssa_name_query_depth */
  64, /* param_max_store_chains_to_track */
  64, /* param_max_stores_to_merge */
  2, /* param_max_stores_to_sink */
  1024, /* param_max_stores_to_track */
  10, /* param_max_tail_merge_comparisons */
  2, /* param_max_tail_merge_iterations */
  10000, /* param_max_tracked_strlens */
  4, /* param_max_tree_if_conversion_phi_args */
  8, /* param_max_unroll_times */
  200, /* param_max_unrolled_insns */
  50, /* param_max_unswitch_insns */
  3, /* param_max_unswitch_level */
  1, /* param_max_variable_expansions */
  12, /* param_max_vartrack_expr_depth */
  50, /* param_max_vartrack_reverse_op_size */
  50000000, /* param_max_vartrack_size */
  10, /* param_max_vrp_switch_assertions */
  5, /* param_min_crossjump_insns */
  10, /* param_min_inline_recursive_probability */
  9, /* param_min_insn_to_prefetch_ratio */
  30, /* param_min_loop_cond_split_prob */
  0, /* param_min_nondebug_insn_uid */
  4096, /* param_min_pagesize */
  32, /* param_min_size_for_stack_sharing */
  40, /* param_min_spec_prob */
  0, /* param_min_vect_loop_bound */
  16, /* param_modref_max_accesses */
  8, /* param_modref_max_adjustments */
  32, /* param_modref_max_bases */
  256, /* param_modref_max_depth */
  256, /* param_modref_max_escape_points */
  16, /* param_modref_max_refs */
  64, /* param_modref_max_tests */
  OPENACC_KERNELS_PARLOOPS, /* param_openacc_kernels */
  OPENACC_PRIVATIZATION_QUIET, /* param_openacc_privatization */
  0, /* param_parloops_chunk_size */
  100, /* param_parloops_min_per_thread */
  0, /* param_parloops_schedule */
  70, /* param_partial_inlining_entry_probability */
  2, /* param_predictable_branch_outcome */
  1, /* param_prefetch_dynamic_strides */
  200, /* param_prefetch_latency */
  3, /* param_prefetch_min_insn_to_mem_ratio */
  -1, /* param_prefetch_minimum_stride */
  0, /* param_profile_func_internal_id */
  RANGER_DEBUG_NONE, /* param_ranger_debug */
  6, /* param_ranger_logical_depth */
  200, /* param_relation_block_limit */
  7, /* param_rpo_vn_max_loop_depth */
  1000, /* param_sccvn_max_alias_queries_per_access */
  10, /* param_scev_max_expr_complexity */
  100, /* param_scev_max_expr_size */
  -1, /* param_sched_autopref_queue_depth */
  1, /* param_sched_mem_true_dep_cost */
  1, /* param_sched_pressure_algorithm */
  40, /* param_sched_spec_prob_cutoff */
  10, /* param_sched_state_edge_prob_cutoff */
  2, /* param_selsched_insns_to_rename */
  50, /* param_selsched_max_lookahead */
  2, /* param_selsched_max_sched_times */
  3, /* param_simultaneous_prefetches */
  75, /* param_sink_frequency_threshold */
  0, /* param_sms_dfa_history */
  0, /* param_sms_loop_average_count_threshold */
  2, /* param_sms_max_ii_factor */
  2, /* param_sms_min_sc */
  32, /* param_sra_max_propagations */
  0, /* param_sra_max_scalarization_size_size */
  0, /* param_sra_max_scalarization_size_speed */
  512, /* param_ssa_name_def_chain_limit */
  8, /* param_ssp_buffer_size */
  12, /* param_stack_clash_protection_guard_size */
  12, /* param_stack_clash_protection_probe_interval */
  1, /* param_store_merging_allow_unaligned */
  65536, /* param_store_merging_max_size */
  8, /* param_switch_conversion_branch_ratio */
  THREADER_DEBUG_NONE, /* param_threader_debug */
  9, /* param_tm_max_aggregate_size */
  95, /* param_tracer_dynamic_coverage_feedback */
  75, /* param_tracer_dynamic_coverage */
  100, /* param_tracer_max_code_growth */
  80, /* param_tracer_min_branch_probability_feedback */
  50, /* param_tracer_min_branch_probability */
  10, /* param_tracer_min_branch_ratio */
  0, /* param_tree_reassoc_width */
  0, /* param_tsan_distinguish_volatile */
  1, /* param_tsan_instrument_func_entry_exit */
  1000, /* param_uninit_control_dep_attempts */
  2, /* param_uninlined_function_insns */
  0, /* param_uninlined_function_time */
  2, /* param_uninlined_function_thunk_insns */
  2, /* param_uninlined_function_thunk_time */
  20, /* param_unlikely_bb_count_fraction */
  4, /* param_unroll_jam_max_unroll */
  1, /* param_unroll_jam_min_percent */
  256, /* param_use_after_scope_direct_emission_threshold */
  1, /* param_use_canonical_types */
  1, /* param_vect_epilogues_nomask */
  1, /* param_vect_induction_float */
  50, /* param_vect_inner_loop_cost_factor */
  -1, /* param_vect_max_peeling_for_alignment */
  10, /* param_vect_max_version_for_alias_checks */
  6, /* param_vect_max_version_for_alignment_checks */
  2, /* param_vect_partial_vector_usage */
  VRP_MODE_VRP, /* param_vrp1_mode */
  VRP_MODE_RANGER, /* param_vrp2_mode */
  64, /* x86_stlf_window_ninsns */
  0, /* flag_preprocess_only */
  1, /* warn_nsobject_attribute */
  0, /* warn_abi */
  0, /* warn_abi_tag */
  0, /* warn_absolute_value */
  0, /* warn_address */
  1, /* warn_address_of_packed_member */
  0, /* warn_aggregate_return */
  1, /* warn_aggressive_loop_optimizations */
  0, /* warn_aligned_new */
  HOST_WIDE_INT_MAX, /* warn_alloc_size_limit */
  0, /* warn_alloc_zero */
  0, /* warn_alloca */
  HOST_WIDE_INT_MAX, /* warn_alloca_limit */
  1, /* warn_analyzer_double_fclose */
  1, /* warn_analyzer_double_free */
  1, /* warn_analyzer_exposure_through_output_file */
  1, /* warn_analyzer_file_leak */
  1, /* warn_analyzer_free_of_non_heap */
  1, /* warn_analyzer_malloc_leak */
  1, /* warn_analyzer_mismatching_deallocation */
  1, /* warn_analyzer_null_argument */
  1, /* warn_analyzer_null_dereference */
  1, /* warn_analyzer_possible_null_argument */
  1, /* warn_analyzer_possible_null_dereference */
  1, /* warn_analyzer_shift_count_negative */
  1, /* warn_analyzer_shift_count_overflow */
  1, /* warn_analyzer_stale_setjmp_buffer */
  1, /* warn_analyzer_tainted_allocation_size */
  1, /* warn_analyzer_tainted_array_index */
  1, /* warn_analyzer_tainted_divisor */
  1, /* warn_analyzer_tainted_offset */
  1, /* warn_analyzer_tainted_size */
  0, /* warn_analyzer_too_complex */
  1, /* warn_analyzer_unsafe_call_within_signal_handler */
  1, /* warn_analyzer_use_after_free */
  1, /* warn_analyzer_use_of_pointer_in_stale_stack_frame */
  1, /* warn_analyzer_use_of_uninitialized_value */
  1, /* warn_analyzer_write_to_const */
  1, /* warn_analyzer_write_to_string_literal */
  0, /* warn_arith_conv */
  0, /* warn_array_bounds */
  0, /* warn_array_compare */
  0, /* warn_array_parameter */
  0, /* warn_assign_intercept */
  1, /* warn_attribute_alias */
  1, /* warn_attribute_warning */
  1, /* warn_attributes */
  0, /* warn_bad_function_cast */
  bidirectional_unpaired, /* warn_bidirectional */
  0, /* warn_bool_compare */
  0, /* warn_bool_op */
  1, /* warn_builtin_declaration_mismatch */
  1, /* cpp_warn_builtin_macro_redefined */
  0, /* warn_cxx_compat */
  0, /* warn_cxx11_compat */
  1, /* warn_cxx11_extensions */
  0, /* warn_cxx14_compat */
  1, /* warn_cxx14_extensions */
  0, /* warn_cxx17_compat */
  1, /* warn_cxx17_extensions */
  0, /* warn_cxx20_compat */
  1, /* warn_cxx20_extensions */
  1, /* warn_cxx23_extensions */
  -1, /* warn_c11_c2x_compat */
  -1, /* warn_c90_c99_compat */
  -1, /* warn_c99_c11_compat */
  1, /* warn_cannot_profile */
  0, /* warn_cast_align */
  0, /* warn_cast_function_type */
  0, /* warn_cast_qual */
  0, /* warn_catch_value */
  0, /* warn_char_subscripts */
  1, /* warn_class_conversion */
  0, /* warn_class_memaccess */
  0, /* warn_clobbered */
  0, /* warn_comma_subscript */
  0, /* cpp_warn_comment */
  0, /* warn_conditionally_supported */
  0, /* warn_conversion */
  1, /* warn_conversion_null */
  1, /* warn_coverage_invalid_linenum */
  1, /* warn_coverage_mismatch */
  1, /* warn_cpp */
  0, /* warn_ctad_maybe_unsupported */
  0, /* warn_ctor_dtor_privacy */
  0, /* warn_dangling_else */
  0, /* warn_dangling_pointer */
  0, /* cpp_warn_date_time */
  -1, /* warn_declaration_after_statement */
  1, /* warn_delete_incomplete */
  0, /* warn_delnonvdtor */
  1, /* warn_deprecated */
  0, /* warn_deprecated_copy */
  1, /* warn_deprecated_decl */
  0, /* warn_deprecated_enum_enum_conv */
  0, /* warn_deprecated_enum_float_conv */
  1, /* warn_designated_init */
  0, /* warn_disabled_optimization */
  1, /* warn_discarded_array_qualifiers */
  1, /* warn_discarded_qualifiers */
  1, /* warn_div_by_zero */
  0, /* warn_double_promotion */
  0, /* warn_duplicate_decl_specifier */
  0, /* warn_duplicated_branches */
  0, /* warn_duplicated_cond */
  0, /* warn_ecpp */
  0, /* warn_empty_body */
  1, /* cpp_warn_endif_labels */
  -1, /* warn_enum_compare */
  0, /* warn_enum_conversion */
  0, /* warnings_are_errors */
  1, /* warn_exceptions */
  0, /* cpp_warn_expansion_to_defined */
  0, /* extra_warnings */
  0, /* warn_extra_semi */
  0, /* flag_fatal_errors */
  0, /* warn_float_conversion */
  0, /* warn_float_equal */
  0, /* warn_format_contains_nul */
  0, /* warn_format_diag */
  0, /* warn_format_extra_args */
  0, /* warn_format_nonliteral */
  0, /* warn_format_overflow */
  0, /* warn_format_security */
  0, /* warn_format_signedness */
  0, /* warn_format_trunc */
  0, /* warn_format_y2k */
  0, /* warn_format_zero_length */
  0, /* warn_format */
  0, /* warn_frame_address */
  HOST_WIDE_INT_MAX, /* warn_frame_larger_than_size */
  1, /* warn_free_nonheap_object */
  1, /* warn_if_not_aligned */
  1, /* warn_ignored_attributes */
  0, /* warn_ignored_qualifiers */
  0, /* warn_implicit */
  0, /* warn_implicit_fallthrough */
  -1, /* warn_implicit_function_declaration */
  -1, /* warn_implicit_int */
  1, /* warn_inaccessible_base */
  1, /* warn_incompatible_pointer_types */
  0, /* warn_infinite_recursion */
  1, /* warn_inh_var_ctor */
  1, /* warn_init_list */
  0, /* warn_init_self */
  0, /* warn_inline */
  1, /* warn_int_conversion */
  0, /* warn_int_in_bool_context */
  1, /* warn_int_to_pointer_cast */
  1, /* warn_interference_size */
  0, /* warn_imported_macros */
  1, /* warn_invalid_memory_model */
  1, /* warn_invalid_offsetof */
  0, /* cpp_warn_invalid_pch */
  0, /* warn_jump_misses_init */
  HOST_WIDE_INT_MAX, /* warn_larger_than_size */
  1, /* cpp_warn_literal_suffix */
  0, /* warn_logical_not_paren */
  0, /* warn_logical_op */
  -1, /* warn_long_long */
  1, /* warn_lto_type_mismatch */
  -1, /* warn_main */
  0, /* warn_maybe_uninitialized */
  0, /* warn_memset_elt_size */
  0, /* warn_memset_transposed_args */
  0, /* warn_misleading_indentation */
  0, /* warn_mismatched_alloc */
  0, /* warn_mismatched_new_delete */
  0, /* warn_mismatched_tags */
  0, /* warn_missing_attributes */
  0, /* warn_missing_braces */
  0, /* warn_missing_declarations */
  0, /* warn_missing_field_initializers */
  0, /* cpp_warn_missing_include_dirs */
  0, /* warn_missing_parameter_type */
  1, /* warn_missing_profile */
  0, /* warn_missing_prototypes */
  1, /* warn_missing_requires */
  1, /* warn_missing_template_keyword */
  0, /* cpp_warn_multichar */
  0, /* warn_multiple_inheritance */
  0, /* warn_multistatement_macros */
  0, /* warn_namespaces */
  -1, /* warn_narrowing */
  0, /* warn_nested_externs */
  0, /* warn_noexcept */
  0, /* warn_noexcept_type */
  1, /* warn_nontemplate_friend */
  0, /* warn_nonvdtor */
  0, /* warn_nonnull */
  0, /* warn_nonnull_compare */
  normalized_C, /* cpp_warn_normalize */
  0, /* warn_null_dereference */
  1, /* warn_objc_root_class */
  1, /* warn_odr_violations */
  0, /* warn_old_style_cast */
  0, /* warn_old_style_declaration */
  -1, /* warn_old_style_definition */
  0, /* warn_openacc_parallelism */
  0, /* warn_openmp_simd */
  1, /* warn_overflow */
  0, /* warn_overlength_strings */
  0, /* warn_overloaded_virtual */
  0, /* warn_override_init */
  1, /* warn_override_init_side_effects */
  0, /* warn_packed */
  -1, /* warn_packed_bitfield_compat */
  0, /* warn_packed_not_aligned */
  0, /* warn_padded */
  0, /* warn_parentheses */
  0, /* pedantic */
  0, /* warn_pessimizing_move */
  -1, /* warn_placement_new */
  1, /* warn_pmf2ptr */
  0, /* warn_pointer_arith */
  1, /* warn_pointer_compare */
  0, /* warn_pointer_sign */
  1, /* warn_pointer_to_int_cast */
  1, /* warn_pragmas */
  1, /* warn_prio_ctor_dtor */
  1, /* warn_property_assign_default */
  1, /* warn_protocol */
  1, /* warn_psabi */
  0, /* warn_range_loop_construct */
  0, /* warn_redundant_decls */
  0, /* warn_redundant_move */
  0, /* warn_redundant_tags */
  0, /* warn_register */
  0, /* warn_reorder */
  0, /* warn_restrict */
  1, /* warn_return_local_addr */
  -1, /* warn_return_type */
  1, /* warn_scalar_storage_order */
  0, /* warn_selector */
  0, /* warn_sequence_point */
  0, /* warn_shadow */
  1, /* warn_shadow_ivar */
  0, /* warn_shadow_compatible_local */
  0, /* warn_shadow_local */
  1, /* warn_shift_count_negative */
  1, /* warn_shift_count_overflow */
  -1, /* warn_shift_negative_value */
  -1, /* warn_shift_overflow */
  0, /* warn_sign_compare */
  0, /* warn_sign_conversion */
  0, /* warn_sign_promo */
  0, /* warn_sized_deallocation */
  1, /* warn_sizeof_array_argument */
  0, /* warn_sizeof_array_div */
  0, /* warn_sizeof_pointer_div */
  0, /* warn_sizeof_pointer_memaccess */
  0, /* warn_stack_protect */
  HOST_WIDE_INT_MAX, /* warn_stack_usage */
  0, /* warn_strict_aliasing */
  0, /* warn_strict_null_sentinel */
  0, /* warn_strict_overflow */
  0, /* warn_strict_prototypes */
  0, /* warn_strict_selector_match */
  0, /* warn_string_compare */
  2, /* warn_stringop_overflow */
  1, /* warn_stringop_overread */
  0, /* warn_stringop_truncation */
  1, /* warn_subobject_linkage */
  0, /* warn_suggest_attribute_cold */
  0, /* warn_suggest_attribute_const */
  0, /* warn_suggest_attribute_format */
  0, /* warn_suggest_attribute_malloc */
  0, /* warn_suggest_attribute_noreturn */
  0, /* warn_suggest_attribute_pure */
  0, /* warn_suggest_final_methods */
  0, /* warn_suggest_final_types */
  0, /* warn_override */
  0, /* warn_switch */
  1, /* warn_switch_bool */
  0, /* warn_switch_default */
  0, /* warn_switch_enum */
  1, /* warn_switch_outside_range */
  1, /* warn_switch_unreachable */
  1, /* warn_sync_nand */
  0, /* warn_synth */
  0, /* warn_system_headers */
  0, /* warn_tautological_compare */
  0, /* warn_templates */
  1, /* warn_terminate */
  0, /* warn_traditional */
  0, /* warn_traditional_conversion */
  0, /* warn_trampolines */
  2, /* cpp_warn_trigraphs */
  0, /* warn_trivial_auto_var_init */
  1, /* warn_tsan */
  0, /* warn_type_limits */
  0, /* warn_undeclared_selector */
  0, /* cpp_warn_undef */
  0, /* warn_uninitialized */
  0, /* warn_unknown_pragmas */
  0, /* warn_unsuffixed_float_constants */
  0, /* warn_unused */
  0, /* warn_unused_but_set_parameter */
  0, /* warn_unused_but_set_variable */
  0, /* warn_unused_const_variable */
  0, /* warn_unused_function */
  0, /* warn_unused_label */
  0, /* warn_unused_local_typedefs */
  0, /* cpp_warn_unused_macros */
  0, /* warn_unused_parameter */
  1, /* warn_unused_result */
  0, /* warn_unused_value */
  0, /* warn_unused_variable */
  0, /* warn_use_after_free */
  0, /* warn_useless_cast */
  1, /* warn_varargs */
  0, /* cpp_warn_variadic_macros */
  0, /* warn_vector_operation_performance */
  1, /* warn_vexing_parse */
  0, /* warn_virtual_inheritance */
  1, /* warn_virtual_move_assign */
  -1, /* warn_vla */
  HOST_WIDE_INT_MAX, /* warn_vla_limit */
  0, /* warn_vla_parameter */
  0, /* warn_volatile */
  0, /* warn_volatile_register_var */
  0, /* warn_write_strings */
  0, /* warn_zero_as_null_pointer_constant */
  0, /* warn_zero_length_bounds */
  0, /* aux_info_file_name */
  0, /* dump_base_name */
  0, /* dump_base_ext */
  0, /* dump_dir_name */
  -1, /* flag_pic */
  -1, /* flag_pie */
  -1, /* flag_abi_compat_version */
  0, /* flag_abi_version */
  1, /* flag_access_control */
  0, /* ada_specs_parent */
  1, /* flag_aggressive_loop_optimizations */
  0, /* flag_align_functions */
  0, /* str_align_functions */
  0, /* flag_align_jumps */
  0, /* str_align_jumps */
  0, /* flag_align_labels */
  0, /* str_align_labels */
  0, /* flag_align_loops */
  0, /* str_align_loops */
  -1, /* aligned_new_threshold */
  1, /* flag_allocation_dce */
  0, /* flag_allow_parameterless_variadic_functions */
  0, /* flag_store_data_races */
  0, /* flag_analyzer */
  0, /* flag_analyzer_call_summaries */
  0, /* flag_analyzer_checker */
  1, /* flag_analyzer_feasibility */
  0, /* flag_analyzer_fine_grained */
  0, /* flag_analyzer_show_duplicate_count */
  1, /* flag_analyzer_state_merge */
  1, /* flag_analyzer_state_purge */
  0, /* flag_analyzer_transitivity */
  0, /* flag_analyzer_verbose_edges */
  0, /* flag_analyzer_verbose_state_changes */
  2, /* analyzer_verbosity */
  0, /* common_deferred_options */
  0, /* flag_no_asm */
  0, /* flag_associative_math */
  0, /* flag_asynchronous_unwind_tables */
  1, /* flag_auto_inc_dec */
  0, /* flag_auto_profile */
  0, /* auto_profile_file */
  1, /* flag_bit_tests */
  0, /* flag_bounds_check */
  0, /* flag_branch_on_count_reg */
  0, /* flag_branch_probabilities */
  0, /* flag_building_libgcc */
  0, /* flag_no_builtin */
  0, /* flag_caller_saves */
  NO_CALLGRAPH_INFO, /* flag_callgraph_info */
  CF_NONE, /* flag_cf_protection */
  -1, /* flag_char8_t */
  0, /* flag_check_new */
  CHECKING_P ? ENABLE_EXTRA_CHECKING ? 2 : 1 : 0, /* flag_checking */
  0, /* flag_code_hoisting */
  0, /* flag_combine_stack_adjustments */
  1, /* flag_no_common */
  0, /* flag_compare_debug */
  0, /* flag_compare_debug_opt */
  0, /* flag_compare_elim_after_reload */
  0, /* flag_concepts */
  1, /* concepts_diagnostics_max_depth */
  0, /* flag_concepts_ts */
  0, /* flag_conserve_stack */
  8, /* constexpr_cache_depth */
  512, /* max_constexpr_depth */
  0, /* flag_constexpr_fp_except */
  262144, /* constexpr_loop_limit */
  33554432, /* constexpr_ops_limit */
  0, /* flag_coroutines */
  0, /* flag_cprop_registers */
  0, /* flag_crossjumping */
  0, /* flag_cse_follow_jumps */
  0, /* flag_cx_fortran_rules */
  0, /* flag_cx_limited_range */
  0, /* flag_data_sections */
  0, /* flag_dbg_cnt_list */
  1, /* flag_dce */
  0, /* flag_debug_types_section */
  -1, /* flag_declone_ctor_dtor */
  0, /* flag_defer_pop */
  0, /* flag_delayed_branch */
  0, /* flag_delete_dead_exceptions */
  -1, /* flag_delete_null_pointer_checks */
  0, /* flag_devirtualize */
  0, /* flag_ltrans_devirtualize */
  0, /* flag_devirtualize_speculatively */
  DIAGNOSTICS_COLOR_NO, /* flag_diagnostics_show_color */
  0, /* flag_diagnostics_generate_patch */
  6, /* diagnostics_minimum_margin_width */
  0, /* flag_diagnostics_parseable_fixits */
  DPF_INLINE_EVENTS, /* flag_diagnostics_path_format */
  1, /* flag_diagnostics_show_caret */
  1, /* flag_diagnostics_show_cwe */
  1, /* flag_diagnostics_show_labels */
  1, /* flag_diagnostics_show_line_numbers */
  1, /* flag_diagnostics_show_option */
  0, /* flag_diagnostics_show_path_depths */
  0, /* flag_diagnostics_show_template_tree */
  DIAGNOSTICS_URL_AUTO, /* flag_diagnostics_show_urls */
  0, /* flag_dse */
  0, /* flag_dump_ada_spec */
  0, /* flag_dump_ada_spec_slim */
  0, /* flag_dump_analyzer */
  0, /* flag_dump_analyzer_callgraph */
  0, /* flag_dump_analyzer_exploded_graph */
  0, /* flag_dump_analyzer_exploded_nodes */
  0, /* flag_dump_analyzer_exploded_nodes_2 */
  0, /* flag_dump_analyzer_exploded_nodes_3 */
  0, /* flag_dump_analyzer_exploded_paths */
  0, /* flag_dump_analyzer_feasibility */
  0, /* flag_dump_analyzer_json */
  0, /* flag_dump_analyzer_state_purge */
  0, /* flag_dump_analyzer_stderr */
  0, /* flag_dump_analyzer_supergraph */
  0, /* flag_dump_analyzer_untracked */
  0, /* flag_dump_final_insns */
  0, /* flag_dump_go_spec */
  0, /* flag_dump_locations */
  0, /* flag_dump_noaddr */
  0, /* flag_dump_passes */
  0, /* flag_dump_unnumbered */
  0, /* flag_dump_unnumbered_links */
  HAVE_GAS_CFI_DIRECTIVE, /* flag_dwarf2_cfi_asm */
  1, /* flag_early_inlining */
  1, /* flag_elide_constructors */
  1, /* flag_elide_type */
  1, /* flag_debug_only_used_symbols */
  1, /* flag_eliminate_unused_debug_types */
  0, /* flag_emit_class_debug_always */
  1, /* flag_enforce_eh_specs */
  0, /* flag_exceptions */
  EXCESS_PRECISION_DEFAULT, /* flag_excess_precision */
  0, /* flag_expensive_optimizations */
  1, /* flag_ext_numeric_literals */
  -1, /* flag_extern_tls_init */
  0, /* flag_fat_lto_objects */
  0, /* flag_finite_loops */
  0, /* flag_finite_math_only */
  0, /* flag_float_store */
  0, /* flag_fold_simple_inlines */
  0, /* flag_forward_propagate */
  FP_CONTRACT_FAST, /* flag_fp_contract_mode */
  1, /* flag_fp_int_builtin_inexact */
  0, /* flag_no_function_cse */
  0, /* flag_function_sections */
  0, /* flag_gcse */
  0, /* flag_gcse_after_reload */
  0, /* flag_gcse_las */
  1, /* flag_gcse_lm */
  0, /* flag_gcse_sm */
  0, /* flag_gimple */
  0, /* flag_no_gnu_keywords */
  NEXT_OBJC_RUNTIME, /* flag_next_runtime */
  0, /* flag_tm */
  1, /* flag_gnu_unique */
  -1, /* flag_gnu89_inline */
  0, /* flag_graphite */
  0, /* flag_graphite_identity */
  0, /* flag_guess_branch_prob */
  0, /* flag_harden_compares */
  0, /* flag_harden_conditional_branches */
  0, /* flag_hoist_adjacent_loads */
  0, /* flag_no_ident */
  0, /* flag_if_conversion */
  0, /* flag_if_conversion2 */
  1, /* flag_implement_inlines */
  0, /* flag_implicit_constexpr */
  1, /* flag_implicit_inline_templates */
  1, /* flag_implicit_templates */
  0, /* flag_indirect_inlining */
  0, /* flag_inhibit_size_directive */
  0, /* flag_no_inline */
  1, /* flag_inline_atomics */
  0, /* flag_inline_functions */
  0, /* flag_inline_functions_called_once */
  0, /* flag_inline_small_functions */
  0, /* flag_instrument_function_entry_exit */
  0, /* flag_ipa_bit_cp */
  0, /* flag_ipa_cp */
  0, /* flag_ipa_cp_clone */
  0, /* flag_ipa_icf */
  0, /* flag_ipa_icf_functions */
  0, /* flag_ipa_icf_variables */
  0, /* flag_ipa_modref */
  0, /* flag_ipa_profile */
  0, /* flag_ipa_pta */
  0, /* flag_ipa_pure_const */
  0, /* flag_ipa_ra */
  0, /* flag_ipa_reference */
  0, /* flag_ipa_reference_addressable */
  0, /* flag_ipa_sra */
  1, /* flag_ipa_stack_alignment */
  1, /* flag_ipa_strict_aliasing */
  0, /* flag_ipa_vrp */
  IRA_ALGORITHM_CB, /* flag_ira_algorithm */
  1, /* flag_ira_hoist_pressure */
  0, /* flag_ira_loop_pressure */
  IRA_REGION_ONE, /* flag_ira_region */
  1, /* flag_ira_share_save_slots */
  1, /* flag_ira_share_spill_slots */
  5, /* flag_ira_verbose */
  0, /* flag_isolate_erroneous_paths_attribute */
  0, /* flag_isolate_erroneous_paths_dereference */
  IVAR_VISIBILITY_PROTECTED, /* default_ivar_visibility */
  1, /* flag_ivopts */
  1, /* flag_jump_tables */
  0, /* flag_keep_gc_roots_live */
  1, /* flag_keep_inline_dllexport */
  0, /* flag_keep_inline_functions */
  1, /* flag_keep_static_consts */
  0, /* flag_keep_static_functions */
  0, /* note_include_translate_yes */
  0, /* note_include_translate_no */
  0, /* note_module_cmi_yes */
  0, /* flag_large_source_files */
  0, /* flag_lax_vector_conversions */
  -1, /* flag_leading_underscore */
  2, /* flag_lifetime_dse */
  0, /* flag_limit_function_alignment */
  LIVE_PATCHING_NONE, /* flag_live_patching */
  0, /* flag_live_range_shrinkage */
  1, /* flag_local_ivars */
  0, /* flag_loop_interchange */
  0, /* flag_loop_nest_optimize */
  0, /* flag_loop_parallelize_all */
  0, /* flag_unroll_jam */
  0, /* flag_lra_remat */
  -1, /* flag_lto_compression_level */
  LTO_PARTITION_BALANCED, /* flag_lto_partition */
  0, /* flag_lto_report */
  0, /* flag_lto_report_wpa */
  0, /* flag_lto */
  1, /* flag_errno_math */
  0, /* flag_max_errors */
  0, /* mem_report */
  0, /* mem_report_wpa */
  1, /* flag_merge_constants */
  1, /* flag_merge_debug_strings */
  0, /* flag_header_unit */
  0, /* flag_module_implicit_inline */
  1, /* flag_module_lazy */
  0, /* flag_module_only */
  0, /* flag_module_version_ignore */
  0, /* flag_modules */
  0, /* flag_modulo_sched */
  0, /* flag_modulo_sched_allow_regmoves */
  0, /* flag_move_loop_invariants */
  0, /* flag_move_loop_stores */
  0, /* flag_ms_extensions */
  1, /* flag_new_inheriting_ctors */
  0, /* flag_new_ttp */
  1, /* flag_nil_receivers */
  0, /* flag_non_call_exceptions */
  0, /* flag_no_nonansi_builtin */
  0, /* flag_nothrow_opt */
  0, /* flag_objc_abi */
  0, /* flag_objc_call_cxx_cdtors */
  0, /* flag_objc_direct_dispatch */
  0, /* flag_objc_exceptions */
  0, /* flag_objc_gc */
  0, /* flag_objc_nilcheck */
  -1, /* flag_objc_sjlj_exceptions */
  0, /* flag_objc1_only */
  0, /* flag_omit_frame_pointer */
  0, /* flag_openacc */
  0, /* flag_openacc_dims */
  0, /* flag_openmp */
  0, /* flag_openmp_simd */
  0, /* flag_opt_info */
  0, /* flag_optimize_sibling_calls */
  0, /* flag_optimize_strlen */
  0, /* flag_pack_struct */
  0, /* flag_partial_inlining */
  0, /* flag_patchable_function_entry */
  DEFAULT_PCC_STRUCT_RETURN, /* flag_pcc_struct_return */
  0, /* flag_peel_loops */
  0, /* flag_no_peephole */
  0, /* flag_peephole2 */
  0, /* flag_permissive */
  PERMITTED_FLT_EVAL_METHODS_DEFAULT, /* flag_permitted_flt_eval_methods */
  0, /* flag_plan9_extensions */
  1, /* flag_plt */
  0, /* post_ipa_mem_report */
  0, /* pre_ipa_mem_report */
  0, /* flag_predictive_commoning */
  -1, /* flag_prefetch_loop_arrays */
  1, /* flag_pretty_templates */
  1, /* flag_printf_return_value */
  0, /* profile_flag */
  0, /* profile_abs_path_flag */
  0, /* profile_arc_flag */
  0, /* flag_profile_correction */
  0, /* profile_data_prefix */
  0, /* flag_profile_exclude_files */
  0, /* flag_profile_filter_files */
  0, /* profile_info_section */
  0, /* profile_note_location */
  0, /* flag_profile_partial_training */
  0, /* profile_prefix_path */
  0, /* flag_profile_reorder_functions */
  0, /* profile_report */
  PROFILE_REPRODUCIBILITY_SERIAL, /* flag_profile_reproducible */
  PROFILE_UPDATE_SINGLE, /* flag_profile_update */
  0, /* flag_profile_use */
  0, /* flag_profile_values */
  0, /* flag_reciprocal_math */
  0, /* flag_record_gcc_switches */
  0, /* flag_ree */
  0, /* flag_rename_registers */
  0, /* flag_reorder_blocks */
  REORDER_BLOCKS_ALGORITHM_SIMPLE, /* flag_reorder_blocks_algorithm */
  0, /* flag_reorder_blocks_and_partition */
  0, /* flag_reorder_functions */
  0, /* flag_replace_objc_classes */
  0, /* flag_report_bug */
  0, /* flag_rerun_cse_after_loop */
  0, /* flag_resched_modulo_sched */
  0, /* flag_rounding_math */
  1, /* flag_rtti */
  0, /* flag_sanitize_address_use_after_scope */
  0, /* flag_sanitize_coverage */
  0, /* flag_sanitize_undefined_trap_on_error */
  0, /* flag_save_optimization_record */
  1, /* flag_sched_critical_path_heuristic */
  1, /* flag_sched_dep_count_heuristic */
  1, /* flag_sched_group_heuristic */
  1, /* flag_schedule_interblock */
  1, /* flag_sched_last_insn_heuristic */
  0, /* flag_sched_pressure */
  1, /* flag_sched_rank_heuristic */
  1, /* flag_schedule_speculative */
  1, /* flag_sched_spec_insn_heuristic */
  0, /* flag_schedule_speculative_load */
  0, /* flag_schedule_speculative_load_dangerous */
  0, /* flag_sched_stalled_insns */
  1, /* flag_sched_stalled_insns_dep */
  1, /* sched_verbose_param */
  0, /* flag_sched2_use_superblocks */
  2, /* flag_schedule_fusion */
  0, /* flag_schedule_insns */
  0, /* flag_schedule_insns_after_reload */
  0, /* flag_section_anchors */
  0, /* flag_sel_sched_pipelining */
  0, /* flag_sel_sched_pipelining_outer_loops */
  0, /* flag_sel_sched_reschedule_pipelined */
  0, /* flag_selective_scheduling */
  0, /* flag_selective_scheduling2 */
  0, /* flag_self_test */
  1, /* flag_semantic_interposition */
  0, /* flag_short_enums */
  0, /* flag_short_wchar */
  1, /* flag_show_column */
  0, /* flag_shrink_wrap */
  1, /* flag_shrink_wrap_separate */
  0, /* flag_signaling_nans */
  1, /* flag_signed_bitfields */
  0, /* flag_signed_char */
  1, /* flag_signed_zeros */
  VECT_COST_MODEL_UNLIMITED, /* flag_simd_cost_model */
  0, /* flag_single_precision_constant */
  -1, /* flag_sized_deallocation */
  1, /* flag_split_ivs_in_unroller */
  0, /* flag_split_loops */
  0, /* flag_split_paths */
  -1, /* flag_split_stack */
  0, /* flag_split_wide_types */
  0, /* flag_split_wide_types_early */
  1, /* flag_ssa_backprop */
  0, /* flag_ssa_phiopt */
  SSO_NATIVE, /* default_sso */
  0, /* flag_stack_clash_protection */
  -1, /* flag_stack_protect */
  SR_ALL, /* flag_stack_reuse */
  0, /* flag_stack_usage */
  0, /* flag_detailed_statistics */
  1, /* flag_stdarg_opt */
  0, /* flag_store_merging */
  0, /* flag_strict_aliasing */
  0, /* flag_strict_enums */
  -1, /* flag_strict_volatile_bitfields */
  -1, /* flag_strong_eval_order */
  1, /* flag_sync_libcalls */
  0, /* flag_syntax_only */
  10, /* template_backtrace_limit */
  0, /* flag_test_coverage */
  0, /* flag_thread_jumps */
  1, /* flag_threadsafe_statics */
  0, /* time_report */
  0, /* time_report_details */
  TLS_MODEL_GLOBAL_DYNAMIC, /* flag_tls_default */
  2, /* flag_toplevel_reorder */
  0, /* flag_tracer */
  0, /* flag_trampolines */
  1, /* flag_trapping_math */
  0, /* flag_trapv */
  0, /* flag_tree_bit_ccp */
  0, /* flag_tree_builtin_call_dce */
  0, /* flag_tree_ccp */
  0, /* flag_tree_ch */
  0, /* flag_tree_coalesce_vars */
  0, /* flag_tree_copy_prop */
  0, /* flag_tree_cselim */
  0, /* flag_tree_dce */
  0, /* flag_tree_dom */
  0, /* flag_tree_dse */
  1, /* flag_tree_forwprop */
  0, /* flag_tree_fre */
  0, /* flag_tree_loop_distribute_patterns */
  0, /* flag_tree_loop_distribution */
  -1, /* flag_tree_loop_if_convert */
  1, /* flag_tree_loop_im */
  1, /* flag_tree_loop_ivcanon */
  1, /* flag_tree_loop_optimize */
  0, /* flag_tree_loop_vectorize */
  0, /* flag_tree_live_range_split */
  1, /* flag_tree_parallelize_loops */
  0, /* flag_tree_partial_pre */
  1, /* flag_tree_phiprop */
  0, /* flag_tree_pre */
  0, /* flag_tree_pta */
  1, /* flag_tree_reassoc */
  1, /* flag_tree_scev_cprop */
  0, /* flag_tree_sink */
  0, /* flag_tree_slp_vectorize */
  0, /* flag_tree_slsr */
  0, /* flag_tree_sra */
  0, /* flag_tree_switch_conversion */
  0, /* flag_tree_tail_merge */
  0, /* flag_tree_ter */
  0, /* flag_tree_vectorize */
  0, /* flag_tree_vrp */
  AUTO_INIT_UNINITIALIZED, /* flag_auto_var_init */
  0, /* flag_unconstrained_commons */
  1, /* flag_unit_at_a_time */
  0, /* flag_unroll_all_loops */
  0, /* flag_cunroll_grow_size */
  0, /* flag_unroll_loops */
  0, /* flag_unsafe_math_optimizations */
  0, /* flag_unswitch_loops */
  0, /* flag_unwind_tables */
  DEFAULT_USE_CXA_ATEXIT, /* flag_use_cxa_atexit */
  2, /* flag_use_cxa_get_exception_ptr */
  0, /* flag_use_linker_plugin */
  0, /* flag_var_tracking */
  0, /* flag_var_tracking_assignments */
  0, /* flag_var_tracking_assignments_toggle */
  0, /* flag_var_tracking_uninit */
  0, /* flag_variable_expansion_in_unroller */
  VECT_COST_MODEL_DEFAULT, /* flag_vect_cost_model */
  0, /* flag_verbose_asm */
  0, /* flag_version_loops_for_strides */
  0, /* flag_visibility_ms_compat */
  VISIBILITY_DEFAULT, /* default_visibility */
  0, /* flag_value_profile_transformations */
  VTV_NO_PRIORITY, /* flag_vtable_verify */
  0, /* flag_vtv_counts */
  0, /* flag_vtv_debug */
  1, /* flag_weak */
  0, /* flag_web */
  0, /* flag_whole_program */
  -1, /* flag_working_directory */
  0, /* flag_wrapv */
  0, /* flag_wrapv_pointer */
  1, /* flag_zero_initialized_in_bss */
  0, /* flag_zero_link */
  0, /* dwarf2out_as_loc_support */
  0, /* dwarf2out_as_locview_support */
  1, /* debug_column_info */
  0, /* flag_describe_dies */
  5, /* dwarf_version */
  4, /* dwarf_offset_size */
  0, /* flag_gen_declaration */
  -1, /* debug_generate_pub_sections */
  0, /* debug_inline_points */
  2, /* debug_internal_reset_location_views */
  1, /* dwarf_record_gcc_switches */
  0, /* dwarf_split_debug_info */
  0, /* debug_nonbind_markers_p */
  0, /* dwarf_strict */
  0, /* flag_gtoggle */
  2, /* debug_variable_location_views */
  0, /* imultiarch */
  0, /* plugindir_string */
  SYSV_ABI, /* ix86_abi */
  ix86_align_data_type_compat, /* ix86_align_data_type */
  ASM_ATT, /* ix86_asm_dialect */
  DEFAULT_LIBC, /* linux_libc */
  0, /* ix86_branch_cost */
  0, /* flag_cet_switch */
  1, /* ix86_direct_extern_access */
  0, /* flag_dispatch_scheduler */
  0, /* ix86_dump_tunes */
  0, /* flag_fentry */
  0, /* fentry_name */
  0, /* fentry_section */
  0, /* ix86_force_drap */
  0, /* flag_force_indirect_call */
  FPMATH_387, /* ix86_fpmath */
  indirect_branch_keep, /* ix86_function_return */
  harden_sls_none, /* ix86_harden_sls */
  0, /* ix86_indirect_branch_cs_prefix */
  0, /* ix86_indirect_branch_register */
  indirect_branch_keep, /* ix86_indirect_branch */
  instrument_return_none, /* ix86_instrument_return */
  DEFAULT_LARGE_SECTION_THRESHOLD, /* ix86_section_threshold */
  0, /* flag_manual_endbr */
  0, /* ix86_tune_memcpy_strategy */
  0, /* ix86_tune_memset_strategy */
  PVW_NONE, /* ix86_move_max */
  0, /* ix86_needed */
  0, /* ix86_tune_no_default */
  0, /* flag_nop_mcount */
  PVW_NONE, /* prefer_vector_width_type */
  0, /* ix86_recip_name */
  0, /* flag_record_mcount */
  0, /* ix86_flag_record_return */
  0, /* flag_skip_rax_setup */
  0, /* ix86_sse2avx */
  0, /* ix86_stack_protector_guard_offset_str */
  0, /* ix86_stack_protector_guard_reg_str */
  0, /* ix86_stack_protector_guard_symbol_str */
  SSP_TLS, /* ix86_stack_protector_guard */
  0, /* ix86_force_align_arg_pointer */
  PVW_NONE, /* ix86_store_max */
  TLS_DIALECT_GNU, /* ix86_tls_dialect */
  0, /* asm_file_name */
  0, /* pass_exit_codes */
  0, /* flag_pedantic_errors */
  0, /* use_pipes */
  0, /* print_file_name */
  0, /* print_multi_directory */
  0, /* print_multi_lib */
  0, /* print_multi_os_directory */
  0, /* print_multiarch */
  0, /* print_prog_name */
  0, /* print_search_dirs */
  0, /* print_sysroot */
  0, /* print_sysroot_headers_suffix */
  0, /* quiet_flag */
  1, /* flag_stdlib_kind */
  0, /* report_times */
  0, /* flag_undef */
  0, /* verbose_flag */
  0, /* version_flag */
  0, /* inhibit_warnings */
  0, /* wrapper_string */
  0, /* VAR_malign_functions_ (private state) */
#undef x_VAR_malign_functions_
  0, /* VAR_malign_jumps_ (private state) */
#undef x_VAR_malign_jumps_
  0, /* VAR_malign_loops_ (private state) */
#undef x_VAR_malign_loops_
  0, /* VAR_mmitigate_rop (private state) */
#undef x_VAR_mmitigate_rop
  0, /* VAR_mmpx (private state) */
#undef x_VAR_mmpx
  0, /* VAR_mpc32 (private state) */
#undef x_VAR_mpc32
  0, /* VAR_mpc64 (private state) */
#undef x_VAR_mpc64
  0, /* VAR_mpc80 (private state) */
#undef x_VAR_mpc80
  0, /* VAR_mpcommit (private state) */
#undef x_VAR_mpcommit
  false, /* frontend_set_flag_associative_math */
  false, /* frontend_set_flag_cx_limited_range */
  false, /* frontend_set_flag_excess_precision */
  false, /* frontend_set_flag_finite_math_only */
  false, /* frontend_set_flag_errno_math */
  false, /* frontend_set_flag_reciprocal_math */
  false, /* frontend_set_flag_rounding_math */
  false, /* frontend_set_flag_signaling_nans */
  false, /* frontend_set_flag_signed_zeros */
  false, /* frontend_set_flag_trapping_math */
  false, /* frontend_set_flag_unsafe_math_optimizations */
};

struct gcc_options global_options;
struct gcc_options global_options_set;

const char * const lang_names[] =
{
  "C",
  "C++",
  "ObjC",
  "ObjC++",
  0
};

const unsigned int cl_options_count = N_OPTS;

#if (1U << 4) > CL_MIN_OPTION_CLASS
  #error the number of languages exceeds the implementation limit
#endif
const unsigned int cl_lang_count = 4;

const struct cl_option cl_options[] =
{
 /* [0] = */ {
    "-###",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1] = */ {
    "--all-warnings",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wall, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [2] = */ {
    "--ansi",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_ansi, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [3] = */ {
    "--assemble",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_S, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [4] = */ {
    "--assert",
    NULL,
    "assertion missing after %qs",
    NULL,
    NULL, NULL, OPT_A, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [5] = */ {
    "--assert=",
    NULL,
    "assertion missing after %qs",
    NULL,
    NULL, NULL, OPT_A, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [6] = */ {
    "--comments",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_C, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [7] = */ {
    "--comments-in-macros",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_CC, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [8] = */ {
    "--compile",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_c, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [9] = */ {
    "--completion=",
    "Provide bash completion for options starting with provided string.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [10] = */ {
    "--coverage",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_coverage, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [11] = */ {
    "--debug",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_g, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [12] = */ {
    "--define-macro",
    NULL,
    "macro name missing after %qs",
    NULL,
    NULL, NULL, OPT_D, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [13] = */ {
    "--define-macro=",
    NULL,
    "macro name missing after %qs",
    NULL,
    NULL, NULL, OPT_D, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [14] = */ {
    "--dependencies",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_M, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [15] = */ {
    "--dump",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_d, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [16] = */ {
    "--dump=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_d, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [17] = */ {
    "--dumpbase",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_dumpbase, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [18] = */ {
    "--dumpbase-ext",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_dumpbase_ext, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [19] = */ {
    "--dumpdir",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_dumpdir, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [20] = */ {
    "--entry",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_e, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [21] = */ {
    "--entry=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_e, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [22] = */ {
    "--extra-warnings",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wextra, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [23] = */ {
    "--for-assembler",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Xassembler, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [24] = */ {
    "--for-assembler=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Xassembler, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [25] = */ {
    "--for-linker",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Xlinker, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [26] = */ {
    "--for-linker=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Xlinker, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [27] = */ {
    "--force-link",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_u, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [28] = */ {
    "--force-link=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_u, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [29] = */ {
    "--help",
    "Display this information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_help_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [30] = */ {
    "--help=",
    "--help=<class>	Display descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [31] = */ {
    "--imacros",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_imacros, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [32] = */ {
    "--imacros=",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_imacros, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [33] = */ {
    "--include",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_include, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [34] = */ {
    "--include-barrier",
    NULL,
    NULL,
    NULL,
    "-", NULL, OPT_I, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [35] = */ {
    "--include-directory",
    NULL,
    "missing path after %qs",
    NULL,
    NULL, NULL, OPT_I, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [36] = */ {
    "--include-directory-after",
    NULL,
    "missing path after %qs",
    NULL,
    NULL, NULL, OPT_idirafter, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [37] = */ {
    "--include-directory-after=",
    NULL,
    "missing path after %qs",
    NULL,
    NULL, NULL, OPT_idirafter, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [38] = */ {
    "--include-directory=",
    NULL,
    "missing path after %qs",
    NULL,
    NULL, NULL, OPT_I, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [39] = */ {
    "--include-prefix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iprefix, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [40] = */ {
    "--include-prefix=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iprefix, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [41] = */ {
    "--include-with-prefix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefix, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [42] = */ {
    "--include-with-prefix-after",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefix, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [43] = */ {
    "--include-with-prefix-after=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefix, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [44] = */ {
    "--include-with-prefix-before",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefixbefore, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [45] = */ {
    "--include-with-prefix-before=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefixbefore, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [46] = */ {
    "--include-with-prefix=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_iwithprefix, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [47] = */ {
    "--include=",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_include, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [48] = */ {
    "--language",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_x, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [49] = */ {
    "--language=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_x, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [50] = */ {
    "--library-directory",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_L, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [51] = */ {
    "--library-directory=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_L, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [52] = */ {
    "--no-canonical-prefixes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_no_canonical_prefixes, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [53] = */ {
    "--no-integrated-cpp",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_no_integrated_cpp, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [54] = */ {
    "--no-line-commands",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_P, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [55] = */ {
    "--no-standard-includes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_nostdinc, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [56] = */ {
    "--no-standard-libraries",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_nostdlib, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [57] = */ {
    "--no-sysroot-suffix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_no_sysroot_suffix), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [58] = */ {
    "--no-warnings",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_w, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [59] = */ {
    "--obj-ext",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__obj_ext_, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [60] = */ {
    "--obj-ext=",
    "Define object file extension, used for generation of make dependencies",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_var_obj_ext), 0, CLVC_STRING, 0, -1, -1 },
 /* [61] = */ {
    "--optimize",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_O, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [62] = */ {
    "--output",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_o, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [63] = */ {
    "--output-pch=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [64] = */ {
    "--output=",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_o, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [65] = */ {
    "--param=align-loop-iterations=",
    "Loops iterating at least selected number of iterations will get loop alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_align_loop_iterations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [66] = */ {
    "--param=align-threshold=",
    "Select fraction of the maximal frequency of executions of basic block in function given basic block get alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_align_threshold), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [67] = */ {
    "--param=analyzer-bb-explosion-factor=",
    "The maximum number of 'after supernode' exploded nodes within the analyzer per supernode, before terminating analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_bb_explosion_factor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [68] = */ {
    "--param=analyzer-max-constraints=",
    "The maximum number of constraints per state.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_constraints), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [69] = */ {
    "--param=analyzer-max-enodes-for-full-dump=",
    "The maximum depth of exploded nodes that should appear in a dot dump before switching to a less verbose format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_enodes_for_full_dump), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [70] = */ {
    "--param=analyzer-max-enodes-per-program-point=",
    "The maximum number of exploded nodes per program point within the analyzer, before terminating analysis of that point.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 45, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_enodes_per_program_point), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [71] = */ {
    "--param=analyzer-max-infeasible-edges=",
    "The maximum number of infeasible edges to reject before declaring a diagnostic as infeasible.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_infeasible_edges), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [72] = */ {
    "--param=analyzer-max-recursion-depth=",
    "The maximum number of times a callsite can appear in a call stack within the analyzer, before terminating analysis of a call that would recurse deeper.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_recursion_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [73] = */ {
    "--param=analyzer-max-svalue-depth=",
    "The maximum depth of a symbolic value, before approximating the value as unknown.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_max_svalue_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [74] = */ {
    "--param=analyzer-min-snodes-for-call-summary=",
    "The minimum number of supernodes within a function for the analyzer to consider summarizing its effects at call sites.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 44, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_analyzer_min_snodes_for_call_summary), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [75] = */ {
    "--param=asan-globals=",
    "Enable asan globals protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_globals), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [76] = */ {
    "--param=asan-instrument-allocas=",
    "Enable asan allocas/VLAs protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_protect_allocas), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [77] = */ {
    "--param=asan-instrument-reads=",
    "Enable asan load operations protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_instrument_reads), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [78] = */ {
    "--param=asan-instrument-writes=",
    "Enable asan store operations protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_instrument_writes), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [79] = */ {
    "--param=asan-instrumentation-with-call-threshold=",
    "Use callbacks instead of inline code if number of accesses in function becomes greater or equal to this number.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 48, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_instrumentation_with_call_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [80] = */ {
    "--param=asan-memintrin=",
    "Enable asan builtin functions protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_memintrin), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [81] = */ {
    "--param=asan-stack=",
    "Enable asan stack protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_stack), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [82] = */ {
    "--param=asan-use-after-return=",
    "Enable asan detection of use-after-return bugs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_asan_use_after_return), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [83] = */ {
    "--param=avg-loop-niter=",
    "Average number of iterations of a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_avg_loop_niter), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [84] = */ {
    "--param=avoid-fma-max-bits=",
    "Maximum number of bits for which we avoid creating FMAs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_avoid_fma_max_bits), 0, CLVC_INTEGER, 0, 0, 512 },
 /* [85] = */ {
    "--param=builtin-expect-probability=",
    "Set the estimated probability in percentage for builtin expect. The default value is 90% probability.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_builtin_expect_probability), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [86] = */ {
    "--param=builtin-string-cmp-inline-length=",
    "The maximum length of a constant string for a builtin string cmp call eligible for inlining. The default value is 3.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_builtin_string_cmp_inline_length), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [87] = */ {
    "--param=case-values-threshold=",
    "The smallest number of different values for which it is best to use a jump-table instead of a tree of conditional branches, if 0, use the default for the machine.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_case_values_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [88] = */ {
    "--param=comdat-sharing-probability=",
    "Probability that COMDAT function will be shared with different compilation unit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_comdat_sharing_probability), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [89] = */ {
    "--param=constructive-interference-size=",
    "The maximum recommended size of contiguous memory occupied by two objects accessed with temporal locality by concurrent threads.  Typically the L1 cache line size, but can be smaller to accommodate a variety of target processors with different cache line sizes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_construct_interfere_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [90] = */ {
    "--param=cxx-max-namespaces-for-diagnostic-help=",
    "Maximum number of namespaces to search for alternatives when name lookup fails.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 46, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_cxx_max_namespaces_for_diagnostic_help), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [91] = */ {
    "--param=destructive-interference-size=",
    "The minimum recommended offset between two concurrently-accessed objects to avoid additional performance degradation due to contention introduced by the implementation.  Typically the L1 cache line size, but can be larger to accommodate a variety of target processors with different cache line sizes. C++17 code might use this value in structure layout, but is strongly discouraged from doing so in public ABIs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_destruct_interfere_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [92] = */ {
    "--param=dse-max-alias-queries-per-store=",
    "Maximum number of queries into the alias oracle per store.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_dse_max_alias_queries_per_store), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [93] = */ {
    "--param=dse-max-object-size=",
    "Maximum size (in bytes) of objects tracked bytewise by dead store elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_dse_max_object_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [94] = */ {
    "--param=early-inlining-insns=",
    "Maximal estimated growth of function body caused by early inlining of single call.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_early_inlining_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [95] = */ {
    "--param=evrp-mode=",
    "--param=evrp-mode=[legacy|ranger|legacy-first|ranger-first] Specifies the mode Early VRP should operate in.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_evrp_mode), 16, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [96] = */ {
    "--param=evrp-sparse-threshold=",
    "Maximum number of basic blocks before EVRP uses a sparse cache.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_evrp_sparse_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [97] = */ {
    "--param=evrp-switch-limit=",
    "Maximum number of outgoing edges in a switch before EVRP will not process it.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_evrp_switch_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [98] = */ {
    "--param=fsm-scale-path-blocks=",
    "Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_fsm_scale_path_blocks), 0, CLVC_INTEGER, 0, 1, 10 },
 /* [99] = */ {
    "--param=fsm-scale-path-stmts=",
    "Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_fsm_scale_path_stmts), 0, CLVC_INTEGER, 0, 1, 10 },
 /* [100] = */ {
    "--param=gcse-after-reload-critical-fraction=",
    "The threshold ratio of critical edges execution count that permit performing redundancy elimination after reload.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 43, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_gcse_after_reload_critical_fraction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [101] = */ {
    "--param=gcse-after-reload-partial-fraction=",
    "The threshold ratio for performing partial redundancy elimination after reload.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 42, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_gcse_after_reload_partial_fraction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [102] = */ {
    "--param=gcse-cost-distance-ratio=",
    "Scaling factor in calculation of maximum distance an expression can be moved by GCSE optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_gcse_cost_distance_ratio), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [103] = */ {
    "--param=gcse-unrestricted-cost=",
    "Cost at which GCSE optimizations will not constraint the distance an expression can travel.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_gcse_unrestricted_cost), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [104] = */ {
    "--param=ggc-min-expand=",
    "Minimum heap expansion to trigger garbage collection, as a percentage of the total size of the heap.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ggc_min_expand), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [105] = */ {
    "--param=ggc-min-heapsize=",
    "Minimum heap size before we start collecting garbage, in kilobytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ggc_min_heapsize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [106] = */ {
    "--param=gimple-fe-computed-hot-bb-threshold=",
    "The number of executions of a basic block which is considered hot. The parameter is used only in GIMPLE FE.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 43, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_gimple_fe_computed_hot_bb_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [107] = */ {
    "--param=graphite-allow-codegen-errors=",
    "Whether codegen errors should be ICEs when -fchecking.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_graphite_allow_codegen_errors), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [108] = */ {
    "--param=graphite-max-arrays-per-scop=",
    "Maximum number of arrays per SCoP.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_graphite_max_arrays_per_scop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [109] = */ {
    "--param=graphite-max-nb-scop-params=",
    "Maximum number of parameters in a SCoP.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_graphite_max_nb_scop_params), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [110] = */ {
    "--param=hash-table-verification-limit=",
    "The number of elements for which hash table verification is done for each searched element.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hash_table_verification_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [111] = */ {
    "--param=hot-bb-count-fraction=",
    "The denominator n of fraction 1/n of the maximal execution count of a basic block in the entire program that a basic block needs to at least have in order to be considered hot (used in non-LTO mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hot_bb_count_fraction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [112] = */ {
    "--param=hot-bb-count-ws-permille=",
    "The number of most executed permilles of the profiled execution of the entire program to which the execution count of a basic block must be part of in order to be considered hot (used in LTO mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hot_bb_count_ws_permille), 0, CLVC_INTEGER, 0, 0, 1000 },
 /* [113] = */ {
    "--param=hot-bb-frequency-fraction=",
    "The denominator n of fraction 1/n of the execution frequency of the entry block of a function that a basic block of this function needs to at least have in order to be considered hot.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hot_bb_frequency_fraction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [114] = */ {
    "--param=hwasan-instrument-allocas=",
    "Enable hwasan instrumentation of allocas/VLAs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_instrument_allocas), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [115] = */ {
    "--param=hwasan-instrument-mem-intrinsics=",
    "Enable hwasan instrumentation of builtin functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_instrument_mem_intrinsics), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [116] = */ {
    "--param=hwasan-instrument-reads=",
    "Enable hwasan instrumentation of load operations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_instrument_reads), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [117] = */ {
    "--param=hwasan-instrument-stack=",
    "Enable hwasan instrumentation of statically sized stack-allocated variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_instrument_stack), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [118] = */ {
    "--param=hwasan-instrument-writes=",
    "Enable hwasan instrumentation of store operations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_instrument_writes), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [119] = */ {
    "--param=hwasan-random-frame-tag=",
    "Use random base tag for each frame, as opposed to base always zero.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_hwasan_random_frame_tag), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [120] = */ {
    "--param=inline-heuristics-hint-percent=",
    "The scale (in percents) applied to inline-insns-single and auto limits when heuristics hints that inlining is very profitable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_inline_heuristics_hint_percent), 0, CLVC_INTEGER, 0, 100, 1000000 },
 /* [121] = */ {
    "--param=inline-min-speedup=",
    "The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_inline_min_speedup), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [122] = */ {
    "--param=inline-unit-growth=",
    "How much can given compilation unit grow because of the inlining (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_inline_unit_growth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [123] = */ {
    "--param=integer-share-limit=",
    "The upper bound for sharing integer constants.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_integer_share_limit), 0, CLVC_INTEGER, 0, 2, 65536 },
 /* [124] = */ {
    "--param=ipa-cp-eval-threshold=",
    "Threshold ipa-cp opportunity evaluation that is still considered beneficial to clone.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_eval_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [125] = */ {
    "--param=ipa-cp-large-unit-insns=",
    "The size of translation unit that IPA-CP pass considers large.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_large_unit_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [126] = */ {
    "--param=ipa-cp-loop-hint-bonus=",
    "Compile-time bonus IPA-CP assigns to candidates which make loop bounds or strides known.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_loop_hint_bonus), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [127] = */ {
    "--param=ipa-cp-max-recursive-depth=",
    "Maximum depth of recursive cloning for self-recursive function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_max_recursive_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [128] = */ {
    "--param=ipa-cp-min-recursive-probability=",
    "Recursive cloning only when the probability of call being executed exceeds the parameter.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_min_recursive_probability), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [129] = */ {
    "--param=ipa-cp-profile-count-base=",
    "When using profile feedback, use the edge at this percentage position in frequncy histogram as the bases for IPA-CP heuristics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_profile_count_base), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [130] = */ {
    "--param=ipa-cp-recursion-penalty=",
    "Percentage penalty the recursive functions will receive when they are evaluated for cloning.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_recursion_penalty), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [131] = */ {
    "--param=ipa-cp-recursive-freq-factor=",
    "When propagating IPA-CP effect estimates, multiply frequencies of recursive edges that bring back an unchanged value by this factor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_recursive_freq_factor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [132] = */ {
    "--param=ipa-cp-single-call-penalty=",
    "Percentage penalty functions containing a single call to another function will receive when they are evaluated for cloning.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_single_call_penalty), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [133] = */ {
    "--param=ipa-cp-unit-growth=",
    "How much can given compilation unit grow because of the interprocedural constant propagation (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_unit_growth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [134] = */ {
    "--param=ipa-cp-value-list-size=",
    "Maximum size of a list of values associated with each parameter for interprocedural constant propagation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_cp_value_list_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [135] = */ {
    "--param=ipa-jump-function-lookups=",
    "Maximum number of statements visited during jump function offset discovery.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_jump_function_lookups), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [136] = */ {
    "--param=ipa-max-aa-steps=",
    "Maximum number of statements that will be visited by IPA formal parameter analysis based on alias analysis in any given function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_max_aa_steps), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [137] = */ {
    "--param=ipa-max-agg-items=",
    "Maximum number of aggregate content items for a parameter in jump functions and lattices.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_max_agg_items), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [138] = */ {
    "--param=ipa-max-loop-predicates=",
    "Maximum number of different predicates used to track properties of loops in IPA analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_max_loop_predicates), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [139] = */ {
    "--param=ipa-max-param-expr-ops=",
    "Maximum number of operations in a parameter expression that can be handled by IPA analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_max_param_expr_ops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [140] = */ {
    "--param=ipa-max-switch-predicate-bounds=",
    "Maximal number of boundary endpoints of case ranges of switch statement used during IPA function summary generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_max_switch_predicate_bounds), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [141] = */ {
    "--param=ipa-sra-max-replacements=",
    "Maximum pieces that IPA-SRA tracks per formal parameter, as a consequence, also the maximum number of replacements of a formal parameter.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_sra_max_replacements), 0, CLVC_INTEGER, 0, 0, 16 },
 /* [142] = */ {
    "--param=ipa-sra-ptr-growth-factor=",
    "Maximum allowed growth of number and total size of new parameters that ipa-sra replaces a pointer to an aggregate with.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ipa_sra_ptr_growth_factor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [143] = */ {
    "--param=ira-consider-dup-in-all-alts=",
    "Control ira to consider matching constraint (duplicated operand number) heavily in all available alternatives for preferred register class.  If it is set as zero, it means ira only respects the matching constraint when it's in the only available alternative with an appropriate register class.  Otherwise, it means ira will check all available alternatives for preferred register class even if it has found some choice with an appropriate register class and respect the found qualified matching constraint.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ira_consider_dup_in_all_alts), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [144] = */ {
    "--param=ira-loop-reserved-regs=",
    "The number of registers in each class kept unused by loop invariant motion.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ira_loop_reserved_regs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [145] = */ {
    "--param=ira-max-conflict-table-size=",
    "Max size of conflict table in MB.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ira_max_conflict_table_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [146] = */ {
    "--param=ira-max-loops-num=",
    "Max loops number for regional RA.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ira_max_loops_num), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [147] = */ {
    "--param=iv-always-prune-cand-set-bound=",
    "If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_iv_always_prune_cand_set_bound), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [148] = */ {
    "--param=iv-consider-all-candidates-bound=",
    "Bound on number of candidates below that all candidates are considered in iv optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_iv_consider_all_candidates_bound), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [149] = */ {
    "--param=iv-max-considered-uses=",
    "Bound on number of iv uses in loop optimized in iv optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_iv_max_considered_uses), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [150] = */ {
    "--param=jump-table-max-growth-ratio-for-size=",
    "The maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 44, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_jump_table_max_growth_ratio_for_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [151] = */ {
    "--param=jump-table-max-growth-ratio-for-speed=",
    "The maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for speed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 45, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_jump_table_max_growth_ratio_for_speed), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [152] = */ {
    "--param=l1-cache-line-size=",
    "The size of L1 cache line.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_l1_cache_line_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [153] = */ {
    "--param=l1-cache-size=",
    "The size of L1 cache.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_l1_cache_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [154] = */ {
    "--param=l2-cache-size=",
    "The size of L2 cache.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_l2_cache_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [155] = */ {
    "--param=large-function-growth=",
    "Maximal growth due to inlining of large function (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_large_function_growth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [156] = */ {
    "--param=large-function-insns=",
    "The size of function body to be considered large.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_large_function_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [157] = */ {
    "--param=large-stack-frame-growth=",
    "Maximal stack frame growth due to inlining (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_stack_frame_growth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [158] = */ {
    "--param=large-stack-frame=",
    "The size of stack frame to be considered large.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_large_stack_frame), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [159] = */ {
    "--param=large-unit-insns=",
    "The size of translation unit to be considered large.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_large_unit_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [160] = */ {
    "--param=lazy-modules=",
    "Maximum number of concurrently open C++ module files when lazy loading.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_CXX | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_lazy_modules), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [161] = */ {
    "--param=lim-expensive=",
    "The minimum cost of an expensive expression in the loop invariant motion.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_lim_expensive), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [162] = */ {
    "--param=logical-op-non-short-circuit=",
    "True if a non-short-circuit operation is optimal.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_logical_op_non_short_circuit), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [163] = */ {
    "--param=loop-block-tile-size=",
    "Size of tiles for loop blocking.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_block_tile_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [164] = */ {
    "--param=loop-interchange-max-num-stmts=",
    "The maximum number of stmts in loop nest for loop interchange.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_interchange_max_num_stmts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [165] = */ {
    "--param=loop-interchange-stride-ratio=",
    "The minimum stride ratio for loop interchange to be profitable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_interchange_stride_ratio), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [166] = */ {
    "--param=loop-invariant-max-bbs-in-loop=",
    "Max basic blocks number in loop for loop invariant motion.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_invariant_max_bbs_in_loop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [167] = */ {
    "--param=loop-max-datarefs-for-datadeps=",
    "Maximum number of datarefs in loop for building loop data dependencies.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_max_datarefs_for_datadeps), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [168] = */ {
    "--param=loop-versioning-max-inner-insns=",
    "The maximum number of instructions in an inner loop that is being considered for versioning.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_versioning_max_inner_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [169] = */ {
    "--param=loop-versioning-max-outer-insns=",
    "The maximum number of instructions in an outer loop that is being considered for versioning, on top of the instructions in inner loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_loop_versioning_max_outer_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [170] = */ {
    "--param=lra-inheritance-ebb-probability-cutoff=",
    "Minimal fall-through edge probability in percentage used to add BB to inheritance EBB in LRA.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 46, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_lra_inheritance_ebb_probability_cutoff), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [171] = */ {
    "--param=lra-max-considered-reload-pseudos=",
    "The max number of reload pseudos which are considered during spilling a non-reload pseudo.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_lra_max_considered_reload_pseudos), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [172] = */ {
    "--param=lto-max-partition=",
    "Maximal size of a partition for LTO (in estimated instructions).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_partition_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [173] = */ {
    "--param=lto-max-streaming-parallelism=",
    "maximal number of LTO partitions streamed in parallel.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_lto_streaming_parallelism), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [174] = */ {
    "--param=lto-min-partition=",
    "Minimal size of a partition for LTO (in estimated instructions).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_partition_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [175] = */ {
    "--param=lto-partitions=",
    "Number of partitions the program should be split to.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_lto_partitions), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [176] = */ {
    "--param=max-average-unrolled-insns=",
    "The maximum number of instructions to consider to unroll in a loop on average.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_average_unrolled_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [177] = */ {
    "--param=max-combine-insns=",
    "The maximum number of insns combine tries to combine.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_combine_insns), 0, CLVC_INTEGER, 0, 2, 4 },
 /* [178] = */ {
    "--param=max-completely-peel-loop-nest-depth=",
    "The maximum depth of a loop nest we completely peel.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 43, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_unroll_iterations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [179] = */ {
    "--param=max-completely-peel-times=",
    "The maximum number of peelings of a single loop that is peeled completely.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_completely_peel_times), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [180] = */ {
    "--param=max-completely-peeled-insns=",
    "The maximum number of insns of a completely peeled loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_completely_peeled_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [181] = */ {
    "--param=max-crossjump-edges=",
    "The maximum number of incoming edges to consider for crossjumping.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_crossjump_edges), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [182] = */ {
    "--param=max-cse-insns=",
    "The maximum instructions CSE process before flushing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_cse_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [183] = */ {
    "--param=max-cse-path-length=",
    "The maximum length of path considered in cse.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_cse_path_length), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [184] = */ {
    "--param=max-cselib-memory-locations=",
    "The maximum memory locations recorded by cselib.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_cselib_memory_locations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [185] = */ {
    "--param=max-debug-marker-count=",
    "Max. count of debug markers to expand or inline.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_debug_marker_count), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [186] = */ {
    "--param=max-delay-slot-insn-search=",
    "The maximum number of instructions to consider to fill a delay slot.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_delay_slot_insn_search), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [187] = */ {
    "--param=max-delay-slot-live-search=",
    "The maximum number of instructions to consider to find accurate live register information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_delay_slot_live_search), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [188] = */ {
    "--param=max-dse-active-local-stores=",
    "Maximum number of active local stores in RTL dead store elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_dse_active_local_stores), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [189] = */ {
    "--param=max-early-inliner-iterations=",
    "The maximum number of nested indirect inlining performed by early inliner.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_early_inliner_max_iterations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [190] = */ {
    "--param=max-fields-for-field-sensitive=",
    "Maximum number of fields in a structure before pointer analysis treats the structure as a single variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_fields_for_field_sensitive), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [191] = */ {
    "--param=max-find-base-term-values=",
    "Maximum number of VALUEs handled during a single find_base_term call.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_find_base_term_values), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [192] = */ {
    "--param=max-fsm-thread-length=",
    "Maximum number of basic blocks on a jump thread path.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_fsm_thread_length), 0, CLVC_INTEGER, 0, 1, 999999 },
 /* [193] = */ {
    "--param=max-fsm-thread-path-insns=",
    "Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_fsm_thread_path_insns), 0, CLVC_INTEGER, 0, 1, 999999 },
 /* [194] = */ {
    "--param=max-gcse-insertion-ratio=",
    "The maximum ratio of insertions to deletions of expressions in GCSE.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_gcse_insertion_ratio), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [195] = */ {
    "--param=max-gcse-memory=",
    "The maximum amount of memory to be allocated by GCSE, in kilobytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_gcse_memory), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [196] = */ {
    "--param=max-goto-duplication-insns=",
    "The maximum number of insns to duplicate when unfactoring computed gotos.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_goto_duplication_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [197] = */ {
    "--param=max-grow-copy-bb-insns=",
    "The maximum expansion factor when copying basic blocks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_grow_copy_bb_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [198] = */ {
    "--param=max-hoist-depth=",
    "Maximum depth of search in the dominator tree for expressions to hoist.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_hoist_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [199] = */ {
    "--param=max-inline-functions-called-once-insns=",
    "Maximum combined size of caller and callee which is inlined if callee is called once.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 46, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_inline_functions_called_once_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [200] = */ {
    "--param=max-inline-functions-called-once-loop-depth=",
    "Maximum loop depth of a call which is considered for inlining functions called once.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 51, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_inline_functions_called_once_loop_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [201] = */ {
    "--param=max-inline-insns-auto=",
    "The maximum number of instructions when automatically inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_auto), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [202] = */ {
    "--param=max-inline-insns-recursive-auto=",
    "The maximum number of instructions non-inline function can grow to via recursive inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_recursive_auto), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [203] = */ {
    "--param=max-inline-insns-recursive=",
    "The maximum number of instructions inline function can grow to via recursive inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_recursive), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [204] = */ {
    "--param=max-inline-insns-single=",
    "The maximum number of instructions in a single function eligible for inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_single), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [205] = */ {
    "--param=max-inline-insns-size=",
    "The maximum number of instructions when inlining for size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [206] = */ {
    "--param=max-inline-insns-small=",
    "The maximum number of instructions when automatically inlining small functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_insns_small), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [207] = */ {
    "--param=max-inline-recursive-depth-auto=",
    "The maximum depth of recursive inlining for non-inline functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_recursive_depth_auto), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [208] = */ {
    "--param=max-inline-recursive-depth=",
    "The maximum depth of recursive inlining for inline functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_inline_recursive_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [209] = */ {
    "--param=max-isl-operations=",
    "Maximum number of isl operations, 0 means unlimited.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_isl_operations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [210] = */ {
    "--param=max-iterations-computation-cost=",
    "Bound on the cost of an expression to compute the number of iterations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_iterations_computation_cost), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [211] = */ {
    "--param=max-iterations-to-track=",
    "Bound on the number of iterations the brute force # of iterations analysis algorithm evaluates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_iterations_to_track), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [212] = */ {
    "--param=max-jump-thread-duplication-stmts=",
    "Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_jump_thread_duplication_stmts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [213] = */ {
    "--param=max-last-value-rtl=",
    "The maximum number of RTL nodes that can be recorded as combiner's last value.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_last_value_rtl), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [214] = */ {
    "--param=max-loop-header-insns=",
    "The maximum number of insns in loop header duplicated by the copy loop headers pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_loop_header_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [215] = */ {
    "--param=max-modulo-backtrack-attempts=",
    "The maximum number of backtrack attempts the scheduler should make when modulo scheduling a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_modulo_backtrack_attempts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [216] = */ {
    "--param=max-partial-antic-length=",
    "Maximum length of partial antic set when performing tree pre optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_partial_antic_length), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [217] = */ {
    "--param=max-peel-branches=",
    "The maximum number of branches on the path through the peeled sequence.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_peel_branches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [218] = */ {
    "--param=max-peel-times=",
    "The maximum number of peelings of a single loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_peel_times), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [219] = */ {
    "--param=max-peeled-insns=",
    "The maximum number of insns of a peeled loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_peeled_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [220] = */ {
    "--param=max-pending-list-length=",
    "The maximum length of scheduling's pending operations list.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_pending_list_length), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [221] = */ {
    "--param=max-pipeline-region-blocks=",
    "The maximum number of blocks in a region to be considered for interblock scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_pipeline_region_blocks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [222] = */ {
    "--param=max-pipeline-region-insns=",
    "The maximum number of insns in a region to be considered for interblock scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_pipeline_region_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [223] = */ {
    "--param=max-pow-sqrt-depth=",
    "Maximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_pow_sqrt_depth), 0, CLVC_INTEGER, 0, 1, 32 },
 /* [224] = */ {
    "--param=max-predicted-iterations=",
    "The maximum number of loop iterations we predict statically.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_predicted_iterations), 0, CLVC_INTEGER, 0, 0, 65536 },
 /* [225] = */ {
    "--param=max-reload-search-insns=",
    "The maximum number of instructions to search backward when looking for equivalent reload.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_reload_search_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [226] = */ {
    "--param=max-rtl-if-conversion-insns=",
    "Maximum number of insns in a basic block to consider for RTL if-conversion.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_rtl_if_conversion_insns), 0, CLVC_INTEGER, 0, 0, 99 },
 /* [227] = */ {
    "--param=max-rtl-if-conversion-predictable-cost=",
    "Maximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered predictable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 46, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_rtl_if_conversion_predictable_cost), 0, CLVC_INTEGER, 0, 0, 200 },
 /* [228] = */ {
    "--param=max-rtl-if-conversion-unpredictable-cost=",
    "Maximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered unpredictable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 48, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_rtl_if_conversion_unpredictable_cost), 0, CLVC_INTEGER, 0, 0, 200 },
 /* [229] = */ {
    "--param=max-sched-extend-regions-iters=",
    "The maximum number of iterations through CFG to extend regions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_sched_extend_regions_iters), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [230] = */ {
    "--param=max-sched-insn-conflict-delay=",
    "The maximum conflict delay for an insn to be considered for speculative motion.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_sched_insn_conflict_delay), 0, CLVC_INTEGER, 0, 1, 10 },
 /* [231] = */ {
    "--param=max-sched-ready-insns=",
    "The maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_sched_ready_insns), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [232] = */ {
    "--param=max-sched-region-blocks=",
    "The maximum number of blocks in a region to be considered for interblock scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_sched_region_blocks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [233] = */ {
    "--param=max-sched-region-insns=",
    "The maximum number of insns in a region to be considered for interblock scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_sched_region_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [234] = */ {
    "--param=max-slsr-cand-scan=",
    "Maximum length of candidate scans for straight-line strength reduction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_slsr_candidate_scan), 0, CLVC_INTEGER, 0, 1, 999999 },
 /* [235] = */ {
    "--param=max-speculative-devirt-maydefs=",
    "Maximum number of may-defs visited when devirtualizing speculatively.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_speculative_devirt_maydefs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [236] = */ {
    "--param=max-ssa-name-query-depth=",
    "Maximum recursion depth allowed when querying a property of an SSA name.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_ssa_name_query_depth), 0, CLVC_INTEGER, 0, 1, 10 },
 /* [237] = */ {
    "--param=max-store-chains-to-track=",
    "Maximum number of store chains to track at the same time in the store merging pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_store_chains_to_track), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [238] = */ {
    "--param=max-stores-to-merge=",
    "Maximum number of constant stores to merge in the store merging pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_stores_to_merge), 0, CLVC_INTEGER, 0, 2, 65536 },
 /* [239] = */ {
    "--param=max-stores-to-sink=",
    "Maximum number of conditional store pairs that can be sunk.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_stores_to_sink), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [240] = */ {
    "--param=max-stores-to-track=",
    "Maximum number of store chains to track at the same time in the store merging pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_stores_to_track), 0, CLVC_INTEGER, 0, 2, 1048576 },
 /* [241] = */ {
    "--param=max-tail-merge-comparisons=",
    "Maximum amount of similar bbs to compare a bb with.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_tail_merge_comparisons), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [242] = */ {
    "--param=max-tail-merge-iterations=",
    "Maximum amount of iterations of the pass over a function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_tail_merge_iterations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [243] = */ {
    "--param=max-tracked-strlens=",
    "Maximum number of strings for which strlen optimization pass will track string lengths.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_tracked_strlens), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [244] = */ {
    "--param=max-tree-if-conversion-phi-args=",
    "Maximum number of arguments in a PHI supported by TREE if-conversion unless the loop is marked with simd pragma.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_tree_if_conversion_phi_args), 0, CLVC_INTEGER, 0, 2, 65536 },
 /* [245] = */ {
    "--param=max-unroll-times=",
    "The maximum number of unrollings of a single loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_unroll_times), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [246] = */ {
    "--param=max-unrolled-insns=",
    "The maximum number of instructions to consider to unroll in a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_unrolled_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [247] = */ {
    "--param=max-unswitch-insns=",
    "The maximum number of insns of an unswitched loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_unswitch_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [248] = */ {
    "--param=max-unswitch-level=",
    "The maximum number of unswitchings in a single loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_unswitch_level), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [249] = */ {
    "--param=max-variable-expansions-in-unroller=",
    "If -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 43, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_variable_expansions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [250] = */ {
    "--param=max-vartrack-expr-depth=",
    "Max. recursion depth for expanding var tracking expressions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_vartrack_expr_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [251] = */ {
    "--param=max-vartrack-reverse-op-size=",
    "Max. size of loc list for which reverse ops should be added.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_vartrack_reverse_op_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [252] = */ {
    "--param=max-vartrack-size=",
    "Max. size of var tracking hash tables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_vartrack_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [253] = */ {
    "--param=max-vrp-switch-assertions=",
    "Maximum number of assertions to add along the default edge of a switch statement during VRP.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_max_vrp_switch_assertions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [254] = */ {
    "--param=min-crossjump-insns=",
    "The minimum number of matching instructions to consider for crossjumping.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_crossjump_insns), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [255] = */ {
    "--param=min-inline-recursive-probability=",
    "Inline recursively only when the probability of call being executed exceeds the parameter.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_inline_recursive_probability), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [256] = */ {
    "--param=min-insn-to-prefetch-ratio=",
    "Min. ratio of insns to prefetches to enable prefetching for a loop with an unknown trip count.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_insn_to_prefetch_ratio), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [257] = */ {
    "--param=min-loop-cond-split-prob=",
    "The minimum threshold for probability of semi-invariant condition statement to trigger loop split.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_loop_cond_split_prob), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [258] = */ {
    "--param=min-nondebug-insn-uid=",
    "The minimum UID to be used for a nondebug insn.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_nondebug_insn_uid), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [259] = */ {
    "--param=min-pagesize=",
    "Minimum page size for warning purposes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_pagesize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [260] = */ {
    "--param=min-size-for-stack-sharing=",
    "The minimum size of variables taking part in stack slot sharing when not optimizing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_size_for_stack_sharing), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [261] = */ {
    "--param=min-spec-prob=",
    "The minimum probability of reaching a source block for interblock speculative scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_spec_prob), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [262] = */ {
    "--param=min-vect-loop-bound=",
    "If -ftree-vectorize is used, the minimal loop bound of a loop to be considered for vectorization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_min_vect_loop_bound), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [263] = */ {
    "--param=modref-max-accesses=",
    "Maximum number of accesses stored in each modref reference.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_accesses), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [264] = */ {
    "--param=modref-max-adjustments=",
    "Maximum number of times a given range is adjusted during the dataflow.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_adjustments), 0, CLVC_INTEGER, 0, 0, 254 },
 /* [265] = */ {
    "--param=modref-max-bases=",
    "Maximum number of bases stored in each modref tree.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_bases), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [266] = */ {
    "--param=modref-max-depth=",
    "Maximum depth of DFS walk used by modref escape analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_depth), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [267] = */ {
    "--param=modref-max-escape-points=",
    "Maximum number of escape points tracked by modref per SSA-name.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_escape_points), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [268] = */ {
    "--param=modref-max-refs=",
    "Maximum number of references stored in each modref base.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_refs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [269] = */ {
    "--param=modref-max-tests=",
    "Maximum number of tests performed by modref query.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_modref_max_tests), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [270] = */ {
    "--param=openacc-kernels=",
    "--param=openacc-kernels=[decompose|parloops]	Specify mode of OpenACC 'kernels' constructs handling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_openacc_kernels), 31, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [271] = */ {
    "--param=openacc-privatization=",
    "--param=openacc-privatization=[quiet|noisy]	Specify mode of OpenACC privatization diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_openacc_privatization), 32, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [272] = */ {
    "--param=parloops-chunk-size=",
    "Chunk size of omp schedule for loops parallelized by parloops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_parloops_chunk_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [273] = */ {
    "--param=parloops-min-per-thread=",
    "Minimum number of iterations per thread of an innermost parallelized loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_parloops_min_per_thread), 0, CLVC_INTEGER, 0, 2, 65536 },
 /* [274] = */ {
    "--param=parloops-schedule=",
    "--param=parloops-schedule=[static|dynamic|guided|auto|runtime]	Schedule type of omp schedule for loops parallelized by parloops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_parloops_schedule), 33, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [275] = */ {
    "--param=partial-inlining-entry-probability=",
    "Maximum probability of the entry BB of split region (in percent relative to entry BB of the function) to make partial inlining happen.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 42, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_partial_inlining_entry_probability), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [276] = */ {
    "--param=predictable-branch-outcome=",
    "Maximal estimated outcome of branch considered predictable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_predictable_branch_outcome), 0, CLVC_INTEGER, 0, 0, 50 },
 /* [277] = */ {
    "--param=prefetch-dynamic-strides=",
    "Whether software prefetch hints should be issued for non-constant strides.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_prefetch_dynamic_strides), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [278] = */ {
    "--param=prefetch-latency=",
    "The number of insns executed before prefetch is completed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_prefetch_latency), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [279] = */ {
    "--param=prefetch-min-insn-to-mem-ratio=",
    "Min. ratio of insns to mem ops to enable prefetching in a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_prefetch_min_insn_to_mem_ratio), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [280] = */ {
    "--param=prefetch-minimum-stride=",
    "The minimum constant stride beyond which we should use prefetch hints for.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_prefetch_minimum_stride), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [281] = */ {
    "--param=profile-func-internal-id=",
    "Use internal function id in profile lookup.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_profile_func_internal_id), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [282] = */ {
    "--param=ranger-debug=",
    "--param=ranger-debug=[none|trace|gori|cache|tracegori|all] Specifies the output mode for debugging ranger.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ranger_debug), 39, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [283] = */ {
    "--param=ranger-logical-depth=",
    "Maximum depth of logical expression evaluation ranger will look through when evaluating outgoing edge ranges.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ranger_logical_depth), 0, CLVC_INTEGER, 0, 1, 999 },
 /* [284] = */ {
    "--param=relation-block-limit=",
    "Maximum number of relations the oracle will register in a basic block.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_relation_block_limit), 0, CLVC_INTEGER, 0, 0, 9999 },
 /* [285] = */ {
    "--param=rpo-vn-max-loop-depth=",
    "Maximum depth of a loop nest to fully value-number optimistically.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_rpo_vn_max_loop_depth), 0, CLVC_INTEGER, 0, 2, 65536 },
 /* [286] = */ {
    "--param=sccvn-max-alias-queries-per-access=",
    "Maximum number of disambiguations to perform per memory access.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 42, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sccvn_max_alias_queries_per_access), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [287] = */ {
    "--param=scev-max-expr-complexity=",
    "Bound on the complexity of the expressions in the scalar evolutions analyzer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_scev_max_expr_complexity), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [288] = */ {
    "--param=scev-max-expr-size=",
    "Bound on size of expressions used in the scalar evolutions analyzer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_scev_max_expr_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [289] = */ {
    "--param=sched-autopref-queue-depth=",
    "Hardware autoprefetcher scheduler model control flag.  Number of lookahead cycles the model looks into, at '0' only enable instruction sorting heuristic.  Disabled by default.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sched_autopref_queue_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [290] = */ {
    "--param=sched-mem-true-dep-cost=",
    "Minimal distance between possibly conflicting store and load.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sched_mem_true_dep_cost), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [291] = */ {
    "--param=sched-pressure-algorithm=",
    "Which -fsched-pressure algorithm to apply.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sched_pressure_algorithm), 0, CLVC_INTEGER, 0, 1, 2 },
 /* [292] = */ {
    "--param=sched-spec-prob-cutoff=",
    "The minimal probability of speculation success (in percents), so that speculative insn will be scheduled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sched_spec_prob_cutoff), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [293] = */ {
    "--param=sched-state-edge-prob-cutoff=",
    "The minimum probability an edge must have for the scheduler to save its state across it.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sched_state_edge_prob_cutoff), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [294] = */ {
    "--param=selsched-insns-to-rename=",
    "Maximum number of instructions in the ready list that are considered eligible for renaming.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_selsched_insns_to_rename), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [295] = */ {
    "--param=selsched-max-lookahead=",
    "The maximum size of the lookahead window of selective scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_selsched_max_lookahead), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [296] = */ {
    "--param=selsched-max-sched-times=",
    "Maximum number of times that an insn could be scheduled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_selsched_max_sched_times), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [297] = */ {
    "--param=simultaneous-prefetches=",
    "The number of prefetches that can run at the same time.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_simultaneous_prefetches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [298] = */ {
    "--param=sink-frequency-threshold=",
    "Target block's relative execution frequency (as a percentage) required to sink a statement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sink_frequency_threshold), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [299] = */ {
    "--param=sms-dfa-history=",
    "The number of cycles the swing modulo scheduler considers when checking conflicts using DFA.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sms_dfa_history), 0, CLVC_INTEGER, 0, 0, 16 },
 /* [300] = */ {
    "--param=sms-loop-average-count-threshold=",
    "A threshold on the average loop count considered by the swing modulo scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sms_loop_average_count_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [301] = */ {
    "--param=sms-max-ii-factor=",
    "A factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sms_max_ii_factor), 0, CLVC_INTEGER, 0, 1, 16 },
 /* [302] = */ {
    "--param=sms-min-sc=",
    "The minimum value of stage count that swing modulo scheduler will generate.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sms_min_sc), 0, CLVC_INTEGER, 0, 1, 2 },
 /* [303] = */ {
    "--param=sra-max-propagations=",
    "Maximum number of artificial accesses to enable forward propagation that Scalar Replacement of Aggregates will keep for one local variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sra_max_propagations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [304] = */ {
    "--param=sra-max-scalarization-size-Osize=",
    "Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sra_max_scalarization_size_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [305] = */ {
    "--param=sra-max-scalarization-size-Ospeed=",
    "Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for speed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_sra_max_scalarization_size_speed), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [306] = */ {
    "--param=ssa-name-def-chain-limit=",
    "The maximum number of SSA_NAME assignments to follow in determining a value.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ssa_name_def_chain_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [307] = */ {
    "--param=ssp-buffer-size=",
    "The lower bound for a buffer to be considered for stack smashing protection.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_ssp_buffer_size), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [308] = */ {
    "--param=stack-clash-protection-guard-size=",
    "Size of the stack guard expressed as a power of two in bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_stack_clash_protection_guard_size), 0, CLVC_INTEGER, 0, 12, 30 },
 /* [309] = */ {
    "--param=stack-clash-protection-probe-interval=",
    "Interval in which to probe the stack expressed as a power of two in bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 45, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_stack_clash_protection_probe_interval), 0, CLVC_INTEGER, 0, 10, 16 },
 /* [310] = */ {
    "--param=store-merging-allow-unaligned=",
    "Allow the store merging pass to introduce unaligned stores if it is legal to do so.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_store_merging_allow_unaligned), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [311] = */ {
    "--param=store-merging-max-size=",
    "Maximum size of a single store merging region in bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_store_merging_max_size), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [312] = */ {
    "--param=switch-conversion-max-branch-ratio=",
    "The maximum ratio between array size and switch branches for a switch conversion to take place.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 42, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_switch_conversion_branch_ratio), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [313] = */ {
    "--param=threader-debug=",
    "--param=threader-debug=[none|all] Enables verbose dumping of the threader solver.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_threader_debug), 49, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [314] = */ {
    "--param=tm-max-aggregate-size=",
    "Size in bytes after which thread-local aggregates should be instrumented with the logging functions instead of save/restore pairs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tm_max_aggregate_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [315] = */ {
    "--param=tracer-dynamic-coverage-feedback=",
    "The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_dynamic_coverage_feedback), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [316] = */ {
    "--param=tracer-dynamic-coverage=",
    "The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is not available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_dynamic_coverage), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [317] = */ {
    "--param=tracer-max-code-growth=",
    "Maximal code growth caused by tail duplication (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_max_code_growth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [318] = */ {
    "--param=tracer-min-branch-probability-feedback=",
    "Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 46, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_min_branch_probability_feedback), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [319] = */ {
    "--param=tracer-min-branch-probability=",
    "Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is not available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 37, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_min_branch_probability), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [320] = */ {
    "--param=tracer-min-branch-ratio=",
    "Stop reverse growth if the reverse probability of best edge is less than this threshold (in percent).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tracer_min_branch_ratio), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [321] = */ {
    "--param=tree-reassoc-width=",
    "Set the maximum number of instructions executed in parallel in reassociated tree.  If 0, use the target dependent heuristic.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tree_reassoc_width), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [322] = */ {
    "--param=tsan-distinguish-volatile=",
    "Emit special instrumentation for accesses to volatiles.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tsan_distinguish_volatile), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [323] = */ {
    "--param=tsan-instrument-func-entry-exit=",
    "Emit instrumentation calls to __tsan_func_entry() and __tsan_func_exit().",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_tsan_instrument_func_entry_exit), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [324] = */ {
    "--param=uninit-control-dep-attempts=",
    "Maximum number of nested calls to search for control dependencies during uninitialized variable analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_uninit_control_dep_attempts), 0, CLVC_INTEGER, 0, 1, 65536 },
 /* [325] = */ {
    "--param=uninlined-function-insns=",
    "Instruction accounted for function prologue, epilogue and other overhead.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_uninlined_function_insns), 0, CLVC_INTEGER, 0, 0, 1000000 },
 /* [326] = */ {
    "--param=uninlined-function-time=",
    "Time accounted for function prologue, epilogue and other overhead.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_uninlined_function_time), 0, CLVC_INTEGER, 0, 0, 1000000 },
 /* [327] = */ {
    "--param=uninlined-thunk-insns=",
    "Instruction accounted for function thunk overhead.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_uninlined_function_thunk_insns), 0, CLVC_INTEGER, 0, 0, 1000000 },
 /* [328] = */ {
    "--param=uninlined-thunk-time=",
    "Time accounted for function thunk overhead.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_uninlined_function_thunk_time), 0, CLVC_INTEGER, 0, 0, 1000000 },
 /* [329] = */ {
    "--param=unlikely-bb-count-fraction=",
    "The denominator n of fraction 1/n of the number of profiled runs of the entire program below which the execution count of a basic block must be in order for the basic block to be considered unlikely.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_unlikely_bb_count_fraction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [330] = */ {
    "--param=unroll-jam-max-unroll=",
    "Maximum unroll factor for the unroll-and-jam transformation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_unroll_jam_max_unroll), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [331] = */ {
    "--param=unroll-jam-min-percent=",
    "Minimum percentage of memrefs that must go away for unroll-and-jam to be considered profitable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_unroll_jam_min_percent), 0, CLVC_INTEGER, 0, 0, 100 },
 /* [332] = */ {
    "--param=use-after-scope-direct-emission-threshold=",
    "Use direct poisoning/unpoisoning instructions for variables smaller or equal to this number.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 49, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_use_after_scope_direct_emission_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [333] = */ {
    "--param=use-canonical-types=",
    "Whether to use canonical types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_use_canonical_types), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [334] = */ {
    "--param=vect-epilogues-nomask=",
    "Enable loop epilogue vectorization using smaller vector size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_epilogues_nomask), 0, CLVC_INTEGER, 0, 0, 1 },
 /* [335] = */ {
    "--param=vect-induction-float=",
    "Enable loop vectorization of floating point inductions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_induction_float), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [336] = */ {
    "--param=vect-inner-loop-cost-factor=",
    "The maximum factor which the loop vectorizer applies to the cost of statements in an inner loop relative to the loop being vectorized.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_inner_loop_cost_factor), 0, CLVC_INTEGER, 0, 1, 10000 },
 /* [337] = */ {
    "--param=vect-max-peeling-for-alignment=",
    "Maximum number of loop peels to enhance alignment of data references in a loop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_max_peeling_for_alignment), 0, CLVC_INTEGER, 0, 0, 64 },
 /* [338] = */ {
    "--param=vect-max-version-for-alias-checks=",
    "Bound on number of runtime checks inserted by the vectorizer's loop versioning for alias check.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 41, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_max_version_for_alias_checks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [339] = */ {
    "--param=vect-max-version-for-alignment-checks=",
    "Bound on number of runtime checks inserted by the vectorizer's loop versioning for alignment check.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 45, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_max_version_for_alignment_checks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [340] = */ {
    "--param=vect-partial-vector-usage=",
    "Controls how loop vectorizer uses partial vectors.  0 means never, 1 means only for loops whose need to iterate can be removed, 2 means for all loops.  The default value is 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vect_partial_vector_usage), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [341] = */ {
    "--param=vrp1-mode=",
    "--param=vrp1-mode=[vrp|ranger] Specifies the mode VRP1 should operate in.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vrp1_mode), 53, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [342] = */ {
    "--param=vrp2-mode=",
    "--param=vrp2-mode=[vrp|ranger] Specifies the mode VRP2 should operate in.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_param_vrp2_mode), 53, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [343] = */ {
    "--param=x86-stlf-window-ninsns=",
    "Instructions number above which STFL stall penalty can be compensated.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED | CL_PARAMS,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_x86_stlf_window_ninsns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [344] = */ {
    "--pass-exit-codes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_pass_exit_codes, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [345] = */ {
    "--pedantic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wpedantic, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [346] = */ {
    "--pedantic-errors",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_pedantic_errors, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [347] = */ {
    "--pie",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_pie, N_OPTS, 4, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [348] = */ {
    "--pipe",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_pipe, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [349] = */ {
    "--prefix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_B, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [350] = */ {
    "--prefix=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_B, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [351] = */ {
    "--preprocess",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_E, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_DRIVER | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [352] = */ {
    "--print-file-name",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_file_name_, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [353] = */ {
    "--print-file-name=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_file_name_, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [354] = */ {
    "--print-libgcc-file-name",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_libgcc_file_name, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [355] = */ {
    "--print-missing-file-dependencies",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_MG, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [356] = */ {
    "--print-multi-directory",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_multi_directory, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [357] = */ {
    "--print-multi-lib",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_multi_lib, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [358] = */ {
    "--print-multi-os-directory",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_multi_os_directory, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [359] = */ {
    "--print-multiarch",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_multiarch, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [360] = */ {
    "--print-prog-name",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_prog_name_, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [361] = */ {
    "--print-prog-name=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_prog_name_, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [362] = */ {
    "--print-search-dirs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_search_dirs, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [363] = */ {
    "--print-sysroot",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_sysroot, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [364] = */ {
    "--print-sysroot-headers-suffix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_print_sysroot_headers_suffix, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [365] = */ {
    "--profile",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_p, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [366] = */ {
    "--save-temps",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_save_temps, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [367] = */ {
    "--shared",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_shared, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [368] = */ {
    "--specs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_specs_, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [369] = */ {
    "--specs=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_specs_, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [370] = */ {
    "--static",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_static, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [371] = */ {
    "--static-pie",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_static_pie, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [372] = */ {
    "--symbolic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_symbolic, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [373] = */ {
    "--sysroot",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__sysroot_, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [374] = */ {
    "--sysroot=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [375] = */ {
    "--target-help",
    "Display target specific command line options (including assembler and linker options).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [376] = */ {
    "--time",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_time, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [377] = */ {
    "--trace-includes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_H, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [378] = */ {
    "--traditional",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_traditional, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [379] = */ {
    "--traditional-cpp",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_traditional_cpp, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [380] = */ {
    "--trigraphs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_trigraphs, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [381] = */ {
    "--undefine-macro",
    NULL,
    "macro name missing after %qs",
    NULL,
    NULL, NULL, OPT_U, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [382] = */ {
    "--undefine-macro=",
    NULL,
    "macro name missing after %qs",
    NULL,
    NULL, NULL, OPT_U, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [383] = */ {
    "--user-dependencies",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_MM, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [384] = */ {
    "--verbose",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_v, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [385] = */ {
    "--version",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [386] = */ {
    "--write-dependencies",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_MD, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 1 /* NoDriverArg */, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [387] = */ {
    "--write-user-dependencies",
    NULL,
    "missing filename after %qs",
    NULL,
    NULL, NULL, OPT_MMD, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 1 /* NoDriverArg */, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [388] = */ {
    "-A",
    "-A<question>=<answer>	Assert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>.",
    "assertion missing after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [389] = */ {
    "-B",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [390] = */ {
    "-C",
    "Do not discard comments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [391] = */ {
    "-CC",
    "Do not discard comments in macro expansions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [392] = */ {
    "-D",
    "-D<macro>[=<val>]	Define a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1.",
    "macro name missing after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [393] = */ {
    "-E",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_DRIVER | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_preprocess_only), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [394] = */ {
    "-F",
    "-F <dir>	Add <dir> to the end of the main framework include path.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [395] = */ {
    "-H",
    "Print the name of header files as they are used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [396] = */ {
    "-I",
    "-I <dir>	Add <dir> to the end of the main include path.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [397] = */ {
    "-L",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [398] = */ {
    "-M",
    "Generate make dependencies.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [399] = */ {
    "-MD",
    "Generate make dependencies and compile.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 1 /* NoDriverArg */, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [400] = */ {
    "-MF",
    "-MF <file>	Write dependency output to the given file.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [401] = */ {
    "-MG",
    "Treat missing header files as generated files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [402] = */ {
    "-MM",
    "Like -M but ignore system header files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [403] = */ {
    "-MMD",
    "Like -MD but ignore system header files.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_SEPARATE,
    0, 0, 0, 0, 1 /* NoDriverArg */, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [404] = */ {
    "-MP",
    "Generate phony targets for all headers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [405] = */ {
    "-MQ",
    "-MQ <target>	Add a target that may require quoting.",
    "missing makefile target after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [406] = */ {
    "-MT",
    "-MT <target>	Add a target that does not require quoting.",
    "missing makefile target after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [407] = */ {
    "-Mmodules",
    "Generate C++ Module dependency information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [408] = */ {
    "-Mno-modules",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [409] = */ {
    "-N",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [410] = */ {
    "-O",
    "-O<number>	Set optimization level to <number>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [411] = */ {
    "-Ofast",
    "Optimize for speed disregarding exact standards compliance.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_O, 5, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [412] = */ {
    "-Og",
    "Optimize for debugging experience rather than speed or size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_O, 2, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [413] = */ {
    "-Os",
    "Optimize for space rather than speed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_O, 2, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [414] = */ {
    "-Oz",
    "Optimize for space aggressively rather than speed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_O, 2, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [415] = */ {
    "-P",
    "Do not generate #line directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [416] = */ {
    "-Q",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [417] = */ {
    "-Qn",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ 418,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [418] = */ {
    "-Qy",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ 417,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [419] = */ {
    "-R",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [420] = */ {
    "-S",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [421] = */ {
    "-T",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [422] = */ {
    "-Tbss",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 4, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [423] = */ {
    "-Tbss=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 5, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [424] = */ {
    "-Tdata",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 5, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [425] = */ {
    "-Tdata=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 6, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [426] = */ {
    "-Ttext",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 5, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [427] = */ {
    "-Ttext=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_T, 6, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [428] = */ {
    "-U",
    "-U<macro>	Undefine <macro>.",
    "macro name missing after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [429] = */ {
    "-W",
    "This switch is deprecated; use -Wextra instead.",
    NULL,
    NULL,
    NULL, NULL, OPT_Wextra, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [430] = */ {
    "-WNSObject-attribute",
    "Warn if the NSObject attribute is applied to a non-typedef.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 430,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nsobject_attribute), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [431] = */ {
    "-Wa,",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [432] = */ {
    "-Wabi",
    "Warn about things that will change when compiling with an ABI-compliant compiler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 432,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_abi), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [433] = */ {
    "-Wabi-tag",
    "Warn if a subobject has an abi_tag attribute that the complete object type does not have.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 433,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_abi_tag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [434] = */ {
    "-Wabi=",
    "Warn about things that change between the current -fabi-version and the specified version.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [435] = */ {
    "-Wabsolute-value",
    "Warn on suspicious calls of standard functions computing absolute values.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 435,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_absolute_value), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [436] = */ {
    "-Waddress",
    "Warn about suspicious uses of memory addresses.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 436,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_address), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [437] = */ {
    "-Waddress-of-packed-member",
    "Warn when the address of packed member of struct or union is taken.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 437,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_address_of_packed_member), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [438] = */ {
    "-Waggregate-return",
    "Warn about returning structures, unions or arrays.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 438,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_aggregate_return), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [439] = */ {
    "-Waggressive-loop-optimizations",
    "Warn if a loop with constant number of iterations triggers undefined behavior.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 439,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_aggressive_loop_optimizations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [440] = */ {
    "-Waligned-new",
    "Warn about 'new' of type with extended alignment without -faligned-new.",
    NULL,
    NULL,
    "global", "none", OPT_Waligned_new_, N_OPTS, 12, /* .neg_idx = */ 440,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [441] = */ {
    "-Waligned-new=",
    "-Waligned-new=[none|global|all]	Warn even if 'new' uses a class member allocation function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_aligned_new), 55, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [442] = */ {
    "-Wall",
    "Enable most warning messages.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 442,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [443] = */ {
    "-Walloc-size-larger-than=",
    "-Walloc-size-larger-than=<bytes>	Warn for calls to allocation functions that attempt to allocate objects larger than the specified number of bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 443,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_alloc_size_limit), 0, CLVC_SIZE, 0, -1, -1 },
 /* [444] = */ {
    "-Walloc-zero",
    "Warn for calls to allocation functions that specify zero bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 444,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_alloc_zero), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [445] = */ {
    "-Walloca",
    "Warn on any use of alloca.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 445,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_alloca), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [446] = */ {
    "-Walloca-larger-than=",
    "-Walloca-larger-than=<number>	Warn on unbounded uses of alloca, and on bounded uses of alloca whose bound can be larger than <number> bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 446,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_alloca_limit), 0, CLVC_SIZE, 0, -1, -1 },
 /* [447] = */ {
    "-Wanalyzer-double-fclose",
    "Warn about code paths in which a stdio FILE can be closed more than once.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 447,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_double_fclose), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [448] = */ {
    "-Wanalyzer-double-free",
    "Warn about code paths in which a pointer can be freed more than once.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 448,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_double_free), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [449] = */ {
    "-Wanalyzer-exposure-through-output-file",
    "Warn about code paths in which sensitive data is written to a file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 38, /* .neg_idx = */ 449,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_exposure_through_output_file), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [450] = */ {
    "-Wanalyzer-file-leak",
    "Warn about code paths in which a stdio FILE is not closed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 450,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_file_leak), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [451] = */ {
    "-Wanalyzer-free-of-non-heap",
    "Warn about code paths in which a non-heap pointer is freed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 451,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_free_of_non_heap), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [452] = */ {
    "-Wanalyzer-malloc-leak",
    "Warn about code paths in which a heap-allocated pointer leaks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 452,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_malloc_leak), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [453] = */ {
    "-Wanalyzer-mismatching-deallocation",
    "Warn about code paths in which the wrong deallocation function is called.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ 453,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_mismatching_deallocation), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [454] = */ {
    "-Wanalyzer-null-argument",
    "Warn about code paths in which NULL is passed to a must-not-be-NULL function argument.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 454,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_null_argument), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [455] = */ {
    "-Wanalyzer-null-dereference",
    "Warn about code paths in which a NULL pointer is dereferenced.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 455,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_null_dereference), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [456] = */ {
    "-Wanalyzer-possible-null-argument",
    "Warn about code paths in which a possibly-NULL value is passed to a must-not-be-NULL function argument.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ 456,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_possible_null_argument), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [457] = */ {
    "-Wanalyzer-possible-null-dereference",
    "Warn about code paths in which a possibly-NULL pointer is dereferenced.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 35, /* .neg_idx = */ 457,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_possible_null_dereference), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [458] = */ {
    "-Wanalyzer-shift-count-negative",
    "Warn about code paths in which a shift with negative count is attempted.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 458,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_shift_count_negative), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [459] = */ {
    "-Wanalyzer-shift-count-overflow",
    "Warn about code paths in which a shift with count >= width of type is attempted.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 459,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_shift_count_overflow), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [460] = */ {
    "-Wanalyzer-stale-setjmp-buffer",
    "Warn about code paths in which a longjmp rewinds to a jmp_buf saved in a stack frame that has returned.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 460,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_stale_setjmp_buffer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [461] = */ {
    "-Wanalyzer-tainted-allocation-size",
    "Warn about code paths in which an unsanitized value is used as an allocation size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 461,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_tainted_allocation_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [462] = */ {
    "-Wanalyzer-tainted-array-index",
    "Warn about code paths in which an unsanitized value is used as an array index.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 462,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_tainted_array_index), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [463] = */ {
    "-Wanalyzer-tainted-divisor",
    "Warn about code paths in which an unsanitized value is used as a divisor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 463,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_tainted_divisor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [464] = */ {
    "-Wanalyzer-tainted-offset",
    "Warn about code paths in which an unsanitized value is used as a pointer offset.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 464,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_tainted_offset), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [465] = */ {
    "-Wanalyzer-tainted-size",
    "Warn about code paths in which an unsanitized value is used as a size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 465,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_tainted_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [466] = */ {
    "-Wanalyzer-too-complex",
    "Warn if the code is too complicated for the analyzer to fully explore.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 466,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_too_complex), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [467] = */ {
    "-Wanalyzer-unsafe-call-within-signal-handler",
    "Warn about code paths in which an async-signal-unsafe function is called from a signal handler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 43, /* .neg_idx = */ 467,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_unsafe_call_within_signal_handler), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [468] = */ {
    "-Wanalyzer-use-after-free",
    "Warn about code paths in which a freed value is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 468,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_use_after_free), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [469] = */ {
    "-Wanalyzer-use-of-pointer-in-stale-stack-frame",
    "Warn about code paths in which a pointer to a stale stack frame is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 45, /* .neg_idx = */ 469,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_use_of_pointer_in_stale_stack_frame), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [470] = */ {
    "-Wanalyzer-use-of-uninitialized-value",
    "Warn about code paths in which an uninitialized value is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ 470,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_use_of_uninitialized_value), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [471] = */ {
    "-Wanalyzer-write-to-const",
    "Warn about code paths which attempt to write to a const object.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 471,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_write_to_const), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [472] = */ {
    "-Wanalyzer-write-to-string-literal",
    "Warn about code paths which attempt to write to a string literal.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 472,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_analyzer_write_to_string_literal), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [473] = */ {
    "-Warith-conversion",
    "Warn if conversion of the result of arithmetic might change the value even though converting the operands cannot.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 473,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_arith_conv), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [474] = */ {
    "-Warray-bounds",
    "Warn if an array is accessed out of bounds.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 474,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_array_bounds), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [475] = */ {
    "-Warray-bounds=",
    "Warn if an array is accessed out of bounds.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_array_bounds), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [476] = */ {
    "-Warray-compare",
    "Warn about comparisons between two operands of array type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 476,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_array_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [477] = */ {
    "-Warray-parameter",
    "Warn about mismatched declarations of array parameters and unsafe accesses to them.",
    NULL,
    NULL,
    "2", "0", OPT_Warray_parameter_, N_OPTS, 16, /* .neg_idx = */ 477,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [478] = */ {
    "-Warray-parameter=",
    "Warn about mismatched declarations of array parameters and unsafe accesses to them.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_array_parameter), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [479] = */ {
    "-Wassign-intercept",
    "Warn whenever an Objective-C assignment is being intercepted by the garbage collector.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 479,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_assign_intercept), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [480] = */ {
    "-Wattribute-alias",
    "Warn about type safety and similar errors and mismatches in declarations with alias attributes.",
    NULL,
    NULL,
    "1", "0", OPT_Wattribute_alias_, N_OPTS, 16, /* .neg_idx = */ 480,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [481] = */ {
    "-Wattribute-alias=",
    "Warn about type safety and similar errors and mismatches in declarations with alias attributes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_attribute_alias), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [482] = */ {
    "-Wattribute-warning",
    "Warn about uses of __attribute__((warning)) declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 482,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_attribute_warning), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [483] = */ {
    "-Wattributes",
    "Warn about inappropriate attribute usage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 483,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_attributes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [484] = */ {
    "-Wattributes=",
    "Do not warn about specified attributes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 484,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [485] = */ {
    "-Wbad-function-cast",
    "Warn about casting functions to incompatible types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 485,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_bad_function_cast), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [486] = */ {
    "-Wbidi-chars",
    NULL,
    NULL,
    NULL,
    "any", "none", OPT_Wbidi_chars_, N_OPTS, 11, /* .neg_idx = */ 486,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [487] = */ {
    "-Wbidi-chars=",
    "-Wbidi-chars=[none|unpaired|any|ucn] Warn about UTF-8 bidirectional control characters.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_bidirectional), 6, CLVC_ENUM, CLEV_SET, -1, -1 },
 /* [488] = */ {
    "-Wbool-compare",
    "Warn about boolean expression compared with an integer value different from true/false.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 488,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_bool_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [489] = */ {
    "-Wbool-operation",
    "Warn about certain operations on boolean expressions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 489,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_bool_op), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [490] = */ {
    "-Wbuiltin-declaration-mismatch",
    "Warn when a built-in function is declared with the wrong signature.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 490,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_builtin_declaration_mismatch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [491] = */ {
    "-Wbuiltin-macro-redefined",
    "Warn when a built-in preprocessor macro is undefined or redefined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 491,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_builtin_macro_redefined), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [492] = */ {
    "-Wc++-compat",
    "Warn about C constructs that are not in the common subset of C and C++.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 492,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [493] = */ {
    "-Wc++0x-compat",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wc__11_compat, N_OPTS, 13, /* .neg_idx = */ 493,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [494] = */ {
    "-Wc++11-compat",
    "Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 494,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx11_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [495] = */ {
    "-Wc++11-extensions",
    "Warn about C++11 constructs in code compiled with an older standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 495,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx11_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [496] = */ {
    "-Wc++14-compat",
    "Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 496,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx14_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [497] = */ {
    "-Wc++14-extensions",
    "Warn about C++14 constructs in code compiled with an older standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 497,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx14_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [498] = */ {
    "-Wc++17-compat",
    "Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 498,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx17_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [499] = */ {
    "-Wc++17-extensions",
    "Warn about C++17 constructs in code compiled with an older standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 499,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx17_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [500] = */ {
    "-Wc++1z-compat",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wc__17_compat, N_OPTS, 13, /* .neg_idx = */ 500,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [501] = */ {
    "-Wc++20-compat",
    "Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 501,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx20_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [502] = */ {
    "-Wc++20-extensions",
    "Warn about C++20 constructs in code compiled with an older standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 502,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx20_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [503] = */ {
    "-Wc++23-extensions",
    "Warn about C++23 constructs in code compiled with an older standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 503,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cxx23_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [504] = */ {
    "-Wc++2a-compat",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wc__20_compat, N_OPTS, 13, /* .neg_idx = */ 504,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [505] = */ {
    "-Wc11-c2x-compat",
    "Warn about features not present in ISO C11, but present in ISO C2X.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 505,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_c11_c2x_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [506] = */ {
    "-Wc90-c99-compat",
    "Warn about features not present in ISO C90, but present in ISO C99.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 506,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_c90_c99_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [507] = */ {
    "-Wc99-c11-compat",
    "Warn about features not present in ISO C99, but present in ISO C11.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 507,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_c99_c11_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [508] = */ {
    "-Wcannot-profile",
    "Warn when profiling instrumentation was requested, but could not be applied to a certain function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 508,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cannot_profile), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [509] = */ {
    "-Wcast-align",
    "Warn about pointer casts which increase alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 509,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cast_align), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [510] = */ {
    "-Wcast-align=strict",
    "Warn about pointer casts which increase alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 510,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cast_align), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [511] = */ {
    "-Wcast-function-type",
    "Warn about casts between incompatible function types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 511,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cast_function_type), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [512] = */ {
    "-Wcast-qual",
    "Warn about casts which discard qualifiers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 512,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cast_qual), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [513] = */ {
    "-Wcatch-value",
    "Warn about catch handlers of non-reference type.",
    NULL,
    NULL,
    "1", "0", OPT_Wcatch_value_, N_OPTS, 12, /* .neg_idx = */ 513,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [514] = */ {
    "-Wcatch-value=",
    "Warn about catch handlers of non-reference type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_catch_value), 0, CLVC_INTEGER, 0, 0, 3 },
 /* [515] = */ {
    "-Wchar-subscripts",
    "Warn about subscripts whose type is \"char\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 515,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_char_subscripts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [516] = */ {
    "-Wchkp",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 5, /* .neg_idx = */ 516,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [517] = */ {
    "-Wclass-conversion",
    "Warn when a conversion function will never be called due to the type it converts to.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 517,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_class_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [518] = */ {
    "-Wclass-memaccess",
    "Warn for unsafe raw memory writes to objects of class types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 518,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_class_memaccess), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [519] = */ {
    "-Wclobbered",
    "Warn about variables that might be changed by \"longjmp\" or \"vfork\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 519,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_clobbered), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [520] = */ {
    "-Wcomma-subscript",
    "Warn about uses of a comma operator within a subscripting expression.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 520,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_comma_subscript), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [521] = */ {
    "-Wcomment",
    "Warn about possibly nested block comments, and C++ comments spanning more than one physical line.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 521,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_comment), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [522] = */ {
    "-Wcomments",
    "Synonym for -Wcomment.",
    NULL,
    NULL,
    NULL, NULL, OPT_Wcomment, N_OPTS, 9, /* .neg_idx = */ 522,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [523] = */ {
    "-Wconditionally-supported",
    "Warn for conditionally-supported constructs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 523,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_conditionally_supported), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [524] = */ {
    "-Wconversion",
    "Warn for implicit type conversions that may change a value.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 524,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [525] = */ {
    "-Wconversion-null",
    "Warn for converting NULL from/to a non-pointer type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 525,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_conversion_null), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [526] = */ {
    "-Wcoverage-invalid-line-number",
    "Warn in case a function ends earlier than it begins due to an invalid linenum macros.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 526,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_coverage_invalid_linenum), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [527] = */ {
    "-Wcoverage-mismatch",
    "Warn in case profiles in -fprofile-use do not match.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 527,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_coverage_mismatch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [528] = */ {
    "-Wcpp",
    "Warn when a #warning directive is encountered.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 528,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_cpp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [529] = */ {
    "-Wctad-maybe-unsupported",
    "Warn when performing class template argument deduction on a type with no deduction guides.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 529,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_ctad_maybe_unsupported), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [530] = */ {
    "-Wctor-dtor-privacy",
    "Warn when all constructors and destructors are private.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 530,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_ctor_dtor_privacy), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [531] = */ {
    "-Wdangling-else",
    "Warn about dangling else.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 531,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_dangling_else), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [532] = */ {
    "-Wdangling-pointer",
    "Warn for uses of pointers to auto variables whose lifetime has ended.",
    NULL,
    NULL,
    "2", "0", OPT_Wdangling_pointer_, N_OPTS, 17, /* .neg_idx = */ 532,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [533] = */ {
    "-Wdangling-pointer=",
    "Warn for uses of pointers to auto variables whose lifetime has ended.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_dangling_pointer), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [534] = */ {
    "-Wdate-time",
    "Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 534,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_date_time), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [535] = */ {
    "-Wdeclaration-after-statement",
    "Warn when a declaration is found after a statement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 535,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_declaration_after_statement), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [536] = */ {
    "-Wdelete-incomplete",
    "Warn when deleting a pointer to incomplete type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 536,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_delete_incomplete), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [537] = */ {
    "-Wdelete-non-virtual-dtor",
    "Warn about deleting polymorphic objects with non-virtual destructors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 537,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_delnonvdtor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [538] = */ {
    "-Wdeprecated",
    "Warn if a deprecated compiler feature, class, method, or field is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 538,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [539] = */ {
    "-Wdeprecated-copy",
    "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 539,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated_copy), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [540] = */ {
    "-Wdeprecated-copy-dtor",
    "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation or destructor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 540,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated_copy), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [541] = */ {
    "-Wdeprecated-declarations",
    "Warn about uses of __attribute__((deprecated)) declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 541,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated_decl), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [542] = */ {
    "-Wdeprecated-enum-enum-conversion",
    "Warn about deprecated arithmetic conversions on operands of enumeration types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ 542,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated_enum_enum_conv), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [543] = */ {
    "-Wdeprecated-enum-float-conversion",
    "Warn about deprecated arithmetic conversions on operands where one is of enumeration type and the other is of a floating-point type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 543,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_deprecated_enum_float_conv), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [544] = */ {
    "-Wdesignated-init",
    "Warn about positional initialization of structs requiring designated initializers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 544,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_designated_init), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [545] = */ {
    "-Wdisabled-optimization",
    "Warn when an optimization pass is disabled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 545,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_disabled_optimization), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [546] = */ {
    "-Wdiscarded-array-qualifiers",
    "Warn if qualifiers on arrays which are pointer targets are discarded.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 546,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_discarded_array_qualifiers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [547] = */ {
    "-Wdiscarded-qualifiers",
    "Warn if type qualifiers on pointers are discarded.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 547,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_discarded_qualifiers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [548] = */ {
    "-Wdiv-by-zero",
    "Warn about compile-time integer division by zero.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 548,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_div_by_zero), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [549] = */ {
    "-Wdouble-promotion",
    "Warn about implicit conversions from \"float\" to \"double\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 549,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_double_promotion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [550] = */ {
    "-Wduplicate-decl-specifier",
    "Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 550,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_duplicate_decl_specifier), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [551] = */ {
    "-Wduplicated-branches",
    "Warn about duplicated branches in if-else statements.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 551,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_duplicated_branches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [552] = */ {
    "-Wduplicated-cond",
    "Warn about duplicated conditions in an if-else-if chain.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 552,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_duplicated_cond), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [553] = */ {
    "-Weffc++",
    "Warn about violations of Effective C++ style rules.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 553,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_ecpp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [554] = */ {
    "-Wempty-body",
    "Warn about an empty body in an if or else statement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 554,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_empty_body), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [555] = */ {
    "-Wendif-labels",
    "Warn about stray tokens after #else and #endif.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 555,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_endif_labels), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [556] = */ {
    "-Wenum-compare",
    "Warn about comparison of different enum types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 556,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_enum_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [557] = */ {
    "-Wenum-conversion",
    "Warn about implicit conversion of enum types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 557,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_enum_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [558] = */ {
    "-Werror",
    "Treat all warnings as errors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 558,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warnings_are_errors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [559] = */ {
    "-Werror-implicit-function-declaration",
    "This switch is deprecated; use -Werror=implicit-function-declaration instead.",
    NULL,
    NULL,
    "implicit-function-declaration", NULL, OPT_Werror_, N_OPTS, 36, /* .neg_idx = */ -1,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [560] = */ {
    "-Werror=",
    "Treat specified warning as error.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 560,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [561] = */ {
    "-Wexceptions",
    "Warn when an exception handler is shadowed by another handler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 561,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [562] = */ {
    "-Wexpansion-to-defined",
    "Warn if \"defined\" is used outside #if.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 562,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_expansion_to_defined), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [563] = */ {
    "-Wextra",
    "Print extra (possibly unwanted) warnings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 563,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_extra_warnings), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [564] = */ {
    "-Wextra-semi",
    "Warn about semicolon after in-class function definition.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 564,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_extra_semi), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [565] = */ {
    "-Wfatal-errors",
    "Exit on the first error occurred.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 565,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fatal_errors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [566] = */ {
    "-Wfloat-conversion",
    "Warn for implicit type conversions that cause loss of floating point precision.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 566,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_float_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [567] = */ {
    "-Wfloat-equal",
    "Warn if testing floating point numbers for equality.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 567,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_float_equal), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [568] = */ {
    "-Wformat",
    "Warn about printf/scanf/strftime/strfmon format string anomalies.",
    NULL,
    NULL,
    "1", "0", OPT_Wformat_, N_OPTS, 7, /* .neg_idx = */ 568,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [569] = */ {
    "-Wformat-contains-nul",
    "Warn about format strings that contain NUL bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 569,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_contains_nul), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [570] = */ {
    "-Wformat-diag",
    "Warn about GCC format strings with strings unsuitable for diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 570,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_diag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [571] = */ {
    "-Wformat-extra-args",
    "Warn if passing too many arguments to a function for its format string.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 571,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_extra_args), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [572] = */ {
    "-Wformat-nonliteral",
    "Warn about format strings that are not literals.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 572,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_nonliteral), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [573] = */ {
    "-Wformat-overflow",
    "Warn about function calls with format strings that write past the end of the destination region.  Same as -Wformat-overflow=1.",
    NULL,
    NULL,
    "1", "0", OPT_Wformat_overflow_, N_OPTS, 16, /* .neg_idx = */ 573,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, 0, 2 },
 /* [574] = */ {
    "-Wformat-overflow=",
    "Warn about function calls with format strings that write past the end of the destination region.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_overflow), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [575] = */ {
    "-Wformat-security",
    "Warn about possible security problems with format functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 575,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_security), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [576] = */ {
    "-Wformat-signedness",
    "Warn about sign differences with format functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 576,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_signedness), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [577] = */ {
    "-Wformat-truncation",
    "Warn about calls to snprintf and similar functions that truncate output. Same as -Wformat-truncation=1.",
    NULL,
    NULL,
    "1", "0", OPT_Wformat_truncation_, N_OPTS, 18, /* .neg_idx = */ 577,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [578] = */ {
    "-Wformat-truncation=",
    "Warn about calls to snprintf and similar functions that truncate output.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_trunc), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [579] = */ {
    "-Wformat-y2k",
    "Warn about strftime formats yielding 2-digit years.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 579,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_y2k), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [580] = */ {
    "-Wformat-zero-length",
    "Warn about zero-length formats.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 580,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format_zero_length), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [581] = */ {
    "-Wformat=",
    "Warn about printf/scanf/strftime/strfmon format string anomalies.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_format), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [582] = */ {
    "-Wframe-address",
    "Warn when __builtin_frame_address or __builtin_return_address is used unsafely.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 582,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_frame_address), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [583] = */ {
    "-Wframe-larger-than=",
    "-Wframe-larger-than=<byte-size>	Warn if a function's stack frame requires in excess of <byte-size>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_frame_larger_than_size), 0, CLVC_SIZE, 0, -1, -1 },
 /* [584] = */ {
    "-Wfree-nonheap-object",
    "Warn when attempting to free a non-heap object.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 584,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_free_nonheap_object), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [585] = */ {
    "-Whsa",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 4, /* .neg_idx = */ 585,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [586] = */ {
    "-Wif-not-aligned",
    "Warn when the field in a struct is not aligned.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 586,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_if_not_aligned), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [587] = */ {
    "-Wignored-attributes",
    "Warn whenever attributes are ignored.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 587,
    CL_C | CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_ignored_attributes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [588] = */ {
    "-Wignored-qualifiers",
    "Warn whenever type qualifiers are ignored.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 588,
    CL_C | CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_ignored_qualifiers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [589] = */ {
    "-Wimplicit",
    "Warn about implicit declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 589,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_implicit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [590] = */ {
    "-Wimplicit-fallthrough",
    NULL,
    NULL,
    NULL,
    "3", "0", OPT_Wimplicit_fallthrough_, N_OPTS, 21, /* .neg_idx = */ 590,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [591] = */ {
    "-Wimplicit-fallthrough=",
    "Warn when a switch case falls through.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_implicit_fallthrough), 0, CLVC_INTEGER, 0, 0, 5 },
 /* [592] = */ {
    "-Wimplicit-function-declaration",
    "Warn about implicit function declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 592,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_implicit_function_declaration), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [593] = */ {
    "-Wimplicit-int",
    "Warn when a declaration does not specify a type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 593,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_implicit_int), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [594] = */ {
    "-Wimport",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 7, /* .neg_idx = */ 594,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [595] = */ {
    "-Winaccessible-base",
    "Warn when a base is inaccessible in derived due to ambiguity.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 595,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_inaccessible_base), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [596] = */ {
    "-Wincompatible-pointer-types",
    "Warn when there is a conversion between pointers that have incompatible types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 596,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_incompatible_pointer_types), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [597] = */ {
    "-Winfinite-recursion",
    "Warn for infinitely recursive calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 597,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_infinite_recursion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [598] = */ {
    "-Winherited-variadic-ctor",
    "Warn about C++11 inheriting constructors when the base has a variadic constructor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 598,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_inh_var_ctor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [599] = */ {
    "-Winit-list-lifetime",
    "Warn about uses of std::initializer_list that can result in dangling pointers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 599,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_init_list), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [600] = */ {
    "-Winit-self",
    "Warn about variables which are initialized to themselves.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 600,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_init_self), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [601] = */ {
    "-Winline",
    "Warn when an inlined function cannot be inlined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 601,
    CL_COMMON | CL_WARNING | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_inline), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [602] = */ {
    "-Wint-conversion",
    "Warn about incompatible integer to pointer and pointer to integer conversions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 602,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_int_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [603] = */ {
    "-Wint-in-bool-context",
    "Warn for suspicious integer expressions in boolean context.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 603,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_int_in_bool_context), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [604] = */ {
    "-Wint-to-pointer-cast",
    "Warn when there is a cast to a pointer from an integer of a different size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 604,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_int_to_pointer_cast), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [605] = */ {
    "-Winterference-size",
    "Warn about nonsensical values of --param destructive-interference-size or constructive-interference-size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 605,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_interference_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [606] = */ {
    "-Winvalid-imported-macros",
    "Warn about macros that have conflicting header units definitions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 606,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_imported_macros), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [607] = */ {
    "-Winvalid-memory-model",
    "Warn when an atomic memory model parameter is known to be outside the valid range.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 607,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_invalid_memory_model), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [608] = */ {
    "-Winvalid-offsetof",
    "Warn about invalid uses of the \"offsetof\" macro.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 608,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_invalid_offsetof), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [609] = */ {
    "-Winvalid-pch",
    "Warn about PCH files that are found but not used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 609,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_invalid_pch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [610] = */ {
    "-Wjump-misses-init",
    "Warn when a jump misses a variable initialization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 610,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_jump_misses_init), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [611] = */ {
    "-Wl,",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [612] = */ {
    "-Wlarger-than-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wlarger_than_, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [613] = */ {
    "-Wlarger-than=",
    "-Wlarger-than=<byte-size>	Warn if an object's size exceeds <byte-size>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_larger_than_size), 0, CLVC_SIZE, 0, -1, -1 },
 /* [614] = */ {
    "-Wliteral-suffix",
    "Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 614,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_literal_suffix), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [615] = */ {
    "-Wlogical-not-parentheses",
    "Warn when logical not is used on the left hand side operand of a comparison.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 615,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_logical_not_paren), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [616] = */ {
    "-Wlogical-op",
    "Warn when a logical operator is suspiciously always evaluating to true or false.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 616,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_logical_op), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [617] = */ {
    "-Wlong-long",
    "Do not warn about using \"long long\" when -pedantic.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 617,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_long_long), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [618] = */ {
    "-Wlto-type-mismatch",
    "During link time optimization warn about mismatched types of global declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 618,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_lto_type_mismatch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [619] = */ {
    "-Wmain",
    "Warn about suspicious declarations of \"main\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 619,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_main), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [620] = */ {
    "-Wmaybe-uninitialized",
    "Warn about maybe uninitialized automatic variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 620,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_maybe_uninitialized), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [621] = */ {
    "-Wmemset-elt-size",
    "Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 621,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_memset_elt_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [622] = */ {
    "-Wmemset-transposed-args",
    "Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 622,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_memset_transposed_args), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [623] = */ {
    "-Wmisleading-indentation",
    "Warn when the indentation of the code does not reflect the block structure.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 623,
    CL_C | CL_CXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_misleading_indentation), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [624] = */ {
    "-Wmismatched-dealloc",
    "Warn for deallocation calls with arguments returned from mismatched allocation functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 624,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_mismatched_alloc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [625] = */ {
    "-Wmismatched-new-delete",
    "Warn for mismatches between calls to operator new or delete and the corresponding call to the allocation or deallocation function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 625,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_mismatched_new_delete), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [626] = */ {
    "-Wmismatched-tags",
    "Warn when a class is redeclared or referenced using a mismatched class-key.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 626,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_mismatched_tags), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [627] = */ {
    "-Wmissing-attributes",
    "Warn about declarations of entities that may be missing attributes that related entities have been declared with.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 627,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_attributes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [628] = */ {
    "-Wmissing-braces",
    "Warn about possibly missing braces around initializers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 628,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_braces), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [629] = */ {
    "-Wmissing-declarations",
    "Warn about global functions without previous declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 629,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_declarations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [630] = */ {
    "-Wmissing-field-initializers",
    "Warn about missing fields in struct initializers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 630,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_field_initializers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [631] = */ {
    "-Wmissing-format-attribute",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wsuggest_attribute_format, N_OPTS, 25, /* .neg_idx = */ 631,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [632] = */ {
    "-Wmissing-include-dirs",
    "Warn about user-specified include directories that do not exist.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 632,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_missing_include_dirs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [633] = */ {
    "-Wmissing-noreturn",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wsuggest_attribute_noreturn, N_OPTS, 17, /* .neg_idx = */ 633,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [634] = */ {
    "-Wmissing-parameter-type",
    "Warn about function parameters declared without a type specifier in K&R-style functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 634,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_parameter_type), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [635] = */ {
    "-Wmissing-profile",
    "Warn in case profiles in -fprofile-use do not exist.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 635,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_profile), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [636] = */ {
    "-Wmissing-prototypes",
    "Warn about global functions without prototypes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 636,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_prototypes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [637] = */ {
    "-Wmissing-requires",
    "Warn about likely missing requires keyword.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 637,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_requires), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [638] = */ {
    "-Wmissing-template-keyword",
    "Warn when the template keyword is missing after a member access token in a dependent member access expression if that member is a template.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 638,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_missing_template_keyword), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [639] = */ {
    "-Wmudflap",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 8, /* .neg_idx = */ 639,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [640] = */ {
    "-Wmultichar",
    "Warn about use of multi-character character constants.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 640,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_multichar), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [641] = */ {
    "-Wmultiple-inheritance",
    "Warn on direct multiple inheritance.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 641,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_multiple_inheritance), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [642] = */ {
    "-Wmultistatement-macros",
    "Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 642,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_multistatement_macros), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [643] = */ {
    "-Wnamespaces",
    "Warn on namespace definition.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 643,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_namespaces), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [644] = */ {
    "-Wnarrowing",
    "Warn about narrowing conversions within { } that are ill-formed in C++11.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 644,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_narrowing), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [645] = */ {
    "-Wnested-externs",
    "Warn about \"extern\" declarations not at file scope.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 645,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nested_externs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [646] = */ {
    "-Wno-alloc-size-larger-than",
    "Disable Walloc-size-larger-than= warning.  Equivalent to Walloc-size-larger-than=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Walloc_size_larger_than_, N_OPTS, 26, /* .neg_idx = */ 646,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [647] = */ {
    "-Wno-alloca-larger-than",
    "Disable Walloca-larger-than= warning.  Equivalent to Walloca-larger-than=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Walloca_larger_than_, N_OPTS, 22, /* .neg_idx = */ 647,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [648] = */ {
    "-Wno-frame-larger-than",
    "Disable -Wframe-larger-than= warning.  Equivalent to -Wframe-larger-than=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Wframe_larger_than_, N_OPTS, 21, /* .neg_idx = */ 648,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [649] = */ {
    "-Wno-larger-than",
    "Disable -Wlarger-than= warning.  Equivalent to -Wlarger-than=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Wlarger_than_, N_OPTS, 15, /* .neg_idx = */ 649,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [650] = */ {
    "-Wno-stack-usage",
    "Disable Wstack-usage= warning.  Equivalent to Wstack-usage=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Wstack_usage_, N_OPTS, 15, /* .neg_idx = */ 650,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [651] = */ {
    "-Wno-vla-larger-than",
    "Disable Wvla-larger-than= warning.  Equivalent to Wvla-larger-than=<SIZE_MAX> or larger.",
    NULL,
    NULL,
    "18446744073709551615EiB", "none", OPT_Wvla_larger_than_, N_OPTS, 19, /* .neg_idx = */ 651,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [652] = */ {
    "-Wnoexcept",
    "Warn when a noexcept expression evaluates to false even though the expression can't actually throw.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 652,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_noexcept), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [653] = */ {
    "-Wnoexcept-type",
    "Warn if C++17 noexcept function type will change the mangled name of a symbol.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 653,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_noexcept_type), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [654] = */ {
    "-Wnon-template-friend",
    "Warn when non-templatized friend functions are declared within a template.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 654,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nontemplate_friend), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [655] = */ {
    "-Wnon-virtual-dtor",
    "Warn about non-virtual destructors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 655,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nonvdtor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [656] = */ {
    "-Wnonnull",
    "Warn about NULL being passed to argument slots marked as requiring non-NULL.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 656,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nonnull), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [657] = */ {
    "-Wnonnull-compare",
    "Warn if comparing pointer parameter with nonnull attribute with NULL.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 657,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_nonnull_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [658] = */ {
    "-Wnormalized",
    NULL,
    NULL,
    NULL,
    "nfc", "none", OPT_Wnormalized_, N_OPTS, 11, /* .neg_idx = */ 658,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [659] = */ {
    "-Wnormalized=",
    "-Wnormalized=[none|id|nfc|nfkc]	Warn about non-normalized Unicode strings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_normalize), 7, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [660] = */ {
    "-Wnull-dereference",
    "Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 660,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_null_dereference), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [661] = */ {
    "-Wobjc-root-class",
    "Warn if a class interface has no superclass.  Root classes may use an attribute to suppress this warning.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 661,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_objc_root_class), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [662] = */ {
    "-Wodr",
    "Warn about some C++ One Definition Rule violations during link time optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 662,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_odr_violations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [663] = */ {
    "-Wold-style-cast",
    "Warn if a C-style cast is used in a program.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 663,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_old_style_cast), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [664] = */ {
    "-Wold-style-declaration",
    "Warn for obsolescent usage in a declaration.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 664,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_old_style_declaration), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [665] = */ {
    "-Wold-style-definition",
    "Warn if an old-style parameter definition is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 665,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_old_style_definition), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [666] = */ {
    "-Wopenacc-parallelism",
    "Warn about potentially suboptimal choices related to OpenACC parallelism.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 666,
    CL_C | CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_openacc_parallelism), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [667] = */ {
    "-Wopenmp-simd",
    "Warn if a simd directive is overridden by the vectorizer cost model.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 667,
    CL_C | CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_openmp_simd), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [668] = */ {
    "-Woverflow",
    "Warn about overflow in arithmetic expressions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 668,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_overflow), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [669] = */ {
    "-Woverlength-strings",
    "Warn if a string is longer than the maximum portable length specified by the standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 669,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_overlength_strings), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [670] = */ {
    "-Woverloaded-virtual",
    "Warn about overloaded virtual function names.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 670,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_overloaded_virtual), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [671] = */ {
    "-Woverride-init",
    "Warn about overriding initializers without side effects.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 671,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_override_init), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [672] = */ {
    "-Woverride-init-side-effects",
    "Warn about overriding initializers with side effects.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 672,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_override_init_side_effects), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [673] = */ {
    "-Wp,",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [674] = */ {
    "-Wpacked",
    "Warn when the packed attribute has no effect on struct layout.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 674,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_packed), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [675] = */ {
    "-Wpacked-bitfield-compat",
    "Warn about packed bit-fields whose offset changed in GCC 4.4.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 675,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_packed_bitfield_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [676] = */ {
    "-Wpacked-not-aligned",
    "Warn when fields in a struct with the packed attribute are misaligned.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 676,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_packed_not_aligned), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [677] = */ {
    "-Wpadded",
    "Warn when padding is required to align structure members.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 677,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_padded), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [678] = */ {
    "-Wparentheses",
    "Warn about possibly missing parentheses.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 678,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_parentheses), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [679] = */ {
    "-Wpedantic",
    "Issue warnings needed for strict compliance to the standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 679,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_pedantic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [680] = */ {
    "-Wpessimizing-move",
    "Warn about calling std::move on a local object in a return statement preventing copy elision.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 680,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pessimizing_move), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [681] = */ {
    "-Wplacement-new",
    "Warn for placement new expressions with undefined behavior.",
    NULL,
    NULL,
    "1", "0", OPT_Wplacement_new_, N_OPTS, 14, /* .neg_idx = */ 681,
    CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [682] = */ {
    "-Wplacement-new=",
    "Warn for placement new expressions with undefined behavior.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_CXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_placement_new), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [683] = */ {
    "-Wpmf-conversions",
    "Warn when converting the type of pointers to member functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 683,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pmf2ptr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [684] = */ {
    "-Wpointer-arith",
    "Warn about function pointer arithmetic.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 684,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pointer_arith), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [685] = */ {
    "-Wpointer-compare",
    "Warn when a pointer is compared with a zero character constant.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 685,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pointer_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [686] = */ {
    "-Wpointer-sign",
    "Warn when a pointer differs in signedness in an assignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 686,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pointer_sign), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [687] = */ {
    "-Wpointer-to-int-cast",
    "Warn when a pointer is cast to an integer of a different size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 687,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pointer_to_int_cast), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [688] = */ {
    "-Wpragmas",
    "Warn about misuses of pragmas.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 688,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_pragmas), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [689] = */ {
    "-Wprio-ctor-dtor",
    "Warn if constructor or destructors with priorities from 0 to 100 are used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 689,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_prio_ctor_dtor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [690] = */ {
    "-Wproperty-assign-default",
    "Warn if a property for an Objective-C object has no assign semantics specified.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 690,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_property_assign_default), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [691] = */ {
    "-Wprotocol",
    "Warn if inherited methods are unimplemented.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 691,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_protocol), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [692] = */ {
    "-Wpsabi",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 692,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_psabi), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [693] = */ {
    "-Wrange-loop-construct",
    "Warn when a range-based for-loop is creating unnecessary copies.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 693,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_range_loop_construct), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [694] = */ {
    "-Wredundant-decls",
    "Warn about multiple declarations of the same object.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 694,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_redundant_decls), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [695] = */ {
    "-Wredundant-move",
    "Warn about redundant calls to std::move.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 695,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_redundant_move), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [696] = */ {
    "-Wredundant-tags",
    "Warn when a class or enumerated type is referenced using a redundant class-key.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 696,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_redundant_tags), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [697] = */ {
    "-Wregister",
    "Warn about uses of register storage specifier.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 697,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_register), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [698] = */ {
    "-Wreorder",
    "Warn when the compiler reorders code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 698,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_reorder), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [699] = */ {
    "-Wrestrict",
    "Warn when an argument passed to a restrict-qualified parameter aliases with another argument.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 699,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_restrict), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [700] = */ {
    "-Wreturn-local-addr",
    "Warn about returning a pointer/reference to a local or temporary variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 700,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_return_local_addr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [701] = */ {
    "-Wreturn-type",
    "Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 701,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_return_type), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [702] = */ {
    "-Wscalar-storage-order",
    "Warn on suspicious constructs involving reverse scalar storage order.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 702,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_scalar_storage_order), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [703] = */ {
    "-Wselector",
    "Warn if a selector has multiple methods.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 703,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_selector), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [704] = */ {
    "-Wsequence-point",
    "Warn about possible violations of sequence point rules.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 704,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sequence_point), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [705] = */ {
    "-Wshadow",
    "Warn when one variable shadows another.  Same as -Wshadow=global.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 705,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shadow), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [706] = */ {
    "-Wshadow-compatible-local",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wshadow_compatible_local, N_OPTS, 24, /* .neg_idx = */ 706,
    CL_COMMON | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [707] = */ {
    "-Wshadow-ivar",
    "Warn if a local declaration hides an instance variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 707,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shadow_ivar), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [708] = */ {
    "-Wshadow-local",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wshadow_local, N_OPTS, 13, /* .neg_idx = */ 708,
    CL_COMMON | CL_UNDOCUMENTED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [709] = */ {
    "-Wshadow=compatible-local",
    "Warn when one local variable shadows another local variable or parameter of compatible type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 709,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shadow_compatible_local), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [710] = */ {
    "-Wshadow=global",
    "Warn when one variable shadows another (globally).",
    NULL,
    NULL,
    NULL, NULL, OPT_Wshadow, N_OPTS, 14, /* .neg_idx = */ 710,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [711] = */ {
    "-Wshadow=local",
    "Warn when one local variable shadows another local variable or parameter.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 711,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shadow_local), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [712] = */ {
    "-Wshift-count-negative",
    "Warn if shift count is negative.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 712,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shift_count_negative), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [713] = */ {
    "-Wshift-count-overflow",
    "Warn if shift count >= width of type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 713,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shift_count_overflow), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [714] = */ {
    "-Wshift-negative-value",
    "Warn if left shifting a negative value.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 714,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shift_negative_value), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [715] = */ {
    "-Wshift-overflow",
    "Warn if left shift of a signed value overflows.",
    NULL,
    NULL,
    "1", "0", OPT_Wshift_overflow_, N_OPTS, 15, /* .neg_idx = */ 715,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [716] = */ {
    "-Wshift-overflow=",
    "Warn if left shift of a signed value overflows.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_shift_overflow), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [717] = */ {
    "-Wsign-compare",
    "Warn about signed-unsigned comparisons.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 717,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sign_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [718] = */ {
    "-Wsign-conversion",
    "Warn for implicit type conversions between signed and unsigned integers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 718,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sign_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [719] = */ {
    "-Wsign-promo",
    "Warn when overload promotes from unsigned to signed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 719,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sign_promo), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [720] = */ {
    "-Wsized-deallocation",
    "Warn about missing sized deallocation functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 720,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sized_deallocation), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [721] = */ {
    "-Wsizeof-array-argument",
    "Warn when sizeof is applied on a parameter declared as an array.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 721,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sizeof_array_argument), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [722] = */ {
    "-Wsizeof-array-div",
    "Warn about divisions of two sizeof operators when the first one is applied to an array and the divisor does not equal the size of the array element.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 722,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sizeof_array_div), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [723] = */ {
    "-Wsizeof-pointer-div",
    "Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 723,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sizeof_pointer_div), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [724] = */ {
    "-Wsizeof-pointer-memaccess",
    "Warn about suspicious length parameters to certain string functions if the argument uses sizeof.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 724,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sizeof_pointer_memaccess), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [725] = */ {
    "-Wstack-protector",
    "Warn when not issuing stack smashing protection for some reason.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 725,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_stack_protect), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [726] = */ {
    "-Wstack-usage=",
    "-Wstack-usage=<byte-size>	Warn if stack usage might exceed <byte-size>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_stack_usage), 0, CLVC_SIZE, 0, -1, -1 },
 /* [727] = */ {
    "-Wstrict-aliasing",
    "Warn about code which might break strict aliasing rules.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 727,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [728] = */ {
    "-Wstrict-aliasing=",
    "Warn about code which might break strict aliasing rules.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_strict_aliasing), 0, CLVC_INTEGER, 0, 0, 3 },
 /* [729] = */ {
    "-Wstrict-null-sentinel",
    "Warn about uncasted NULL used as sentinel.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 729,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_strict_null_sentinel), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [730] = */ {
    "-Wstrict-overflow",
    "Warn about optimizations that assume that signed overflow is undefined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 730,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [731] = */ {
    "-Wstrict-overflow=",
    "Warn about optimizations that assume that signed overflow is undefined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_strict_overflow), 0, CLVC_INTEGER, 0, 0, 5 },
 /* [732] = */ {
    "-Wstrict-prototypes",
    "Warn about unprototyped function declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 732,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_strict_prototypes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [733] = */ {
    "-Wstrict-selector-match",
    "Warn if type signatures of candidate methods do not match exactly.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 733,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_strict_selector_match), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [734] = */ {
    "-Wstring-compare",
    "Warn about calls to strcmp and strncmp used in equality expressions that are necessarily true or false due to the length of one and size of the other argument.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 734,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_string_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [735] = */ {
    "-Wstringop-overflow",
    "Warn about buffer overflow in string manipulation functions like memcpy and strcpy.",
    NULL,
    NULL,
    "2", "0", OPT_Wstringop_overflow_, N_OPTS, 18, /* .neg_idx = */ 735,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [736] = */ {
    "-Wstringop-overflow=",
    "Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and strcpy.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_stringop_overflow), 0, CLVC_INTEGER, 0, 0, 4 },
 /* [737] = */ {
    "-Wstringop-overread",
    "Warn about reading past the end of a source array in string manipulation functions like memchr and memcpy.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 737,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_stringop_overread), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [738] = */ {
    "-Wstringop-truncation",
    "Warn about truncation in string manipulation functions like strncat and strncpy.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 738,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_stringop_truncation), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [739] = */ {
    "-Wsubobject-linkage",
    "Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 739,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_subobject_linkage), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [740] = */ {
    "-Wsuggest-attribute=cold",
    "Warn about functions which might be candidates for __attribute__((cold)).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 740,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_cold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [741] = */ {
    "-Wsuggest-attribute=const",
    "Warn about functions which might be candidates for __attribute__((const)).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 741,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_const), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [742] = */ {
    "-Wsuggest-attribute=format",
    "Warn about functions which might be candidates for format attributes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 742,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_format), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [743] = */ {
    "-Wsuggest-attribute=malloc",
    "Warn about functions which might be candidates for __attribute__((malloc)).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 743,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_malloc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [744] = */ {
    "-Wsuggest-attribute=noreturn",
    "Warn about functions which might be candidates for __attribute__((noreturn)).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 744,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_noreturn), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [745] = */ {
    "-Wsuggest-attribute=pure",
    "Warn about functions which might be candidates for __attribute__((pure)).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 745,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_attribute_pure), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [746] = */ {
    "-Wsuggest-final-methods",
    "Warn about C++ virtual methods where adding final keyword would improve code quality.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 746,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_final_methods), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [747] = */ {
    "-Wsuggest-final-types",
    "Warn about C++ polymorphic types where adding final keyword would improve code quality.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 747,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_suggest_final_types), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [748] = */ {
    "-Wsuggest-override",
    "Suggest that the override keyword be used when the declaration of a virtual function overrides another.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 748,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_override), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [749] = */ {
    "-Wswitch",
    "Warn about enumerated switches, with no default, missing a case.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 749,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [750] = */ {
    "-Wswitch-bool",
    "Warn about switches with boolean controlling expression.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 750,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch_bool), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [751] = */ {
    "-Wswitch-default",
    "Warn about enumerated switches missing a \"default:\" statement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 751,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch_default), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [752] = */ {
    "-Wswitch-enum",
    "Warn about all enumerated switches missing a specific case.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 752,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch_enum), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [753] = */ {
    "-Wswitch-outside-range",
    "Warn about switch values that are outside of the switch's type range.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 753,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch_outside_range), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [754] = */ {
    "-Wswitch-unreachable",
    "Warn about statements between switch's controlling expression and the first case.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 754,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_switch_unreachable), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [755] = */ {
    "-Wsync-nand",
    "Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 755,
    CL_C | CL_CXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_sync_nand), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [756] = */ {
    "-Wsynth",
    "Deprecated.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 756,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_synth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [757] = */ {
    "-Wsystem-headers",
    "Do not suppress warnings from system headers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 757,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_system_headers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [758] = */ {
    "-Wtautological-compare",
    "Warn if a comparison always evaluates to true or false.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 758,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_tautological_compare), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [759] = */ {
    "-Wtemplates",
    "Warn on primary template declaration.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 759,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_templates), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [760] = */ {
    "-Wterminate",
    "Warn if a throw expression will always result in a call to terminate().",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 760,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_terminate), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [761] = */ {
    "-Wtraditional",
    "Warn about features not present in traditional C.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 761,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_traditional), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [762] = */ {
    "-Wtraditional-conversion",
    "Warn of prototypes causing type conversions different from what would happen in the absence of prototype.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 762,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_traditional_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [763] = */ {
    "-Wtrampolines",
    "Warn whenever a trampoline is generated.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 763,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_trampolines), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [764] = */ {
    "-Wtrigraphs",
    "Warn if trigraphs are encountered that might affect the meaning of the program.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 764,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_trigraphs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [765] = */ {
    "-Wtrivial-auto-var-init",
    "Warn about cases where -ftrivial-auto-var-init cannot initialize an auto variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 765,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_trivial_auto_var_init), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [766] = */ {
    "-Wtsan",
    "Warn about unsupported features in ThreadSanitizer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 766,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_tsan), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [767] = */ {
    "-Wtype-limits",
    "Warn if a comparison is always true or always false due to the limited range of the data type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 767,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_type_limits), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [768] = */ {
    "-Wundeclared-selector",
    "Warn about @selector()s without previously declared methods.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 768,
    CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_undeclared_selector), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [769] = */ {
    "-Wundef",
    "Warn if an undefined macro is used in an #if directive.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 769,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_undef), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [770] = */ {
    "-Wuninitialized",
    "Warn about uninitialized automatic variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 770,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_uninitialized), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [771] = */ {
    "-Wunknown-pragmas",
    "Warn about unrecognized pragmas.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 771,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unknown_pragmas), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [772] = */ {
    "-Wunreachable-code",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 772,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [773] = */ {
    "-Wunsafe-loop-optimizations",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 26, /* .neg_idx = */ 773,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [774] = */ {
    "-Wunsuffixed-float-constants",
    "Warn about unsuffixed float constants.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 774,
    CL_C | CL_ObjC | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unsuffixed_float_constants), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [775] = */ {
    "-Wunused",
    "Enable all -Wunused- warnings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 775,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [776] = */ {
    "-Wunused-but-set-parameter",
    "Warn when a function parameter is only set, otherwise unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 776,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_but_set_parameter), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [777] = */ {
    "-Wunused-but-set-variable",
    "Warn when a variable is only set, otherwise unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 777,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_but_set_variable), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [778] = */ {
    "-Wunused-const-variable",
    "Warn when a const variable is unused.",
    NULL,
    NULL,
    "2", "0", OPT_Wunused_const_variable_, N_OPTS, 22, /* .neg_idx = */ 778,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [779] = */ {
    "-Wunused-const-variable=",
    "Warn when a const variable is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_const_variable), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [780] = */ {
    "-Wunused-function",
    "Warn when a function is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 780,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_function), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [781] = */ {
    "-Wunused-label",
    "Warn when a label is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 781,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_label), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [782] = */ {
    "-Wunused-local-typedefs",
    "Warn when typedefs locally defined in a function are not used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 782,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_local_typedefs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [783] = */ {
    "-Wunused-macros",
    "Warn about macros defined in the main file that are not used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 783,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_unused_macros), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [784] = */ {
    "-Wunused-parameter",
    "Warn when a function parameter is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 784,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_parameter), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [785] = */ {
    "-Wunused-result",
    "Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 785,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_result), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [786] = */ {
    "-Wunused-value",
    "Warn when an expression value is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 786,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_value), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [787] = */ {
    "-Wunused-variable",
    "Warn when a variable is unused.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 787,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_unused_variable), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [788] = */ {
    "-Wuse-after-free",
    "Warn for uses of pointers to deallocated storage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 788,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_use_after_free), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [789] = */ {
    "-Wuse-after-free=",
    "Warn for uses of pointers to deallocated storage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_use_after_free), 0, CLVC_INTEGER, 0, 0, 3 },
 /* [790] = */ {
    "-Wuseless-cast",
    "Warn about useless casts.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 790,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_useless_cast), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [791] = */ {
    "-Wvarargs",
    "Warn about questionable usage of the macros used to retrieve variable arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 791,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_varargs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [792] = */ {
    "-Wvariadic-macros",
    "Warn about using variadic macros.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 792,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_cpp_warn_variadic_macros), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [793] = */ {
    "-Wvector-operation-performance",
    "Warn when a vector operation is compiled outside the SIMD.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 793,
    CL_COMMON | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_vector_operation_performance), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [794] = */ {
    "-Wvexing-parse",
    "Warn about the most vexing parse syntactic ambiguity.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 794,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_vexing_parse), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [795] = */ {
    "-Wvirtual-inheritance",
    "Warn on direct virtual inheritance.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 795,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_virtual_inheritance), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [796] = */ {
    "-Wvirtual-move-assign",
    "Warn if a virtual base has a non-trivial move assignment operator.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 796,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_virtual_move_assign), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [797] = */ {
    "-Wvla",
    "Warn if a variable length array is used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 797,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_vla), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [798] = */ {
    "-Wvla-larger-than=",
    "-Wvla-larger-than=<number>	Warn on unbounded uses of variable-length arrays, and on bounded uses of variable-length arrays whose bound can be larger than <number> bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 798,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 1 /* ByteSize */,
    offsetof (struct gcc_options, x_warn_vla_limit), 0, CLVC_SIZE, 0, -1, -1 },
 /* [799] = */ {
    "-Wvla-parameter",
    "Warn about mismatched declarations of VLA parameters.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 799,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_vla_parameter), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [800] = */ {
    "-Wvolatile",
    "Warn about deprecated uses of volatile qualifier.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 800,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_volatile), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [801] = */ {
    "-Wvolatile-register-var",
    "Warn when a register variable is declared volatile.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 801,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_volatile_register_var), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [802] = */ {
    "-Wwrite-strings",
    "In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 802,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_write_strings), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [803] = */ {
    "-Wzero-as-null-pointer-constant",
    "Warn when a literal '0' is used as null pointer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 803,
    CL_CXX | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_zero_as_null_pointer_constant), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [804] = */ {
    "-Wzero-length-bounds",
    "Warn about accesses to interior zero-length array members.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 804,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_WARNING,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_warn_zero_length_bounds), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [805] = */ {
    "-Xassembler",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [806] = */ {
    "-Xlinker",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [807] = */ {
    "-Xpreprocessor",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [808] = */ {
    "-Z",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [809] = */ {
    "-ansi",
    "A synonym for -std=c89 (for C) or -std=c++98 (for C++).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [810] = */ {
    "-aux-info",
    "-aux-info <file>	Emit declaration information into <file>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_aux_info_file_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [811] = */ {
    "-aux-info=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_aux_info, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [812] = */ {
    "-c",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [813] = */ {
    "-coverage",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [814] = */ {
    "-d",
    "-d<letters>	Enable dumps from specific passes of the compiler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [815] = */ {
    "-dumpbase",
    "-dumpbase <file>	Set the file basename to be used for dumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dump_base_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [816] = */ {
    "-dumpbase-ext",
    "-dumpbase-ext .<ext>    Drop a trailing .<ext> from the dump basename to name auxiliary output files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dump_base_ext), 0, CLVC_STRING, 0, -1, -1 },
 /* [817] = */ {
    "-dumpdir",
    "-dumpdir <dir>	Set the directory name to be used for dumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 7, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dump_dir_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [818] = */ {
    "-dumpfullversion",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 15, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [819] = */ {
    "-dumpmachine",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 11, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [820] = */ {
    "-dumpspecs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 9, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [821] = */ {
    "-dumpversion",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_d, 11, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [822] = */ {
    "-e",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [823] = */ {
    "-export-dynamic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_e, 14, /* .neg_idx = */ -1,
    CL_DRIVER | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [824] = */ {
    "-fPIC",
    "Generate position-independent code if possible (large mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 825,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pic), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [825] = */ {
    "-fPIE",
    "Generate position-independent code for executables if possible (large mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1228,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pie), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [826] = */ {
    "-fabi-compat-version=",
    "The version of the C++ ABI used for -Wabi warnings and link compatibility aliases.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_abi_compat_version), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [827] = */ {
    "-fabi-version=",
    "The version of the C++ ABI in use.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_abi_version), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [828] = */ {
    "-faccess-control",
    "Enforce class member access control semantics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 828,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_access_control), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [829] = */ {
    "-fada-spec-parent=",
    "-fada-spec-parent=unit	Dump Ada specs as child units of given parent.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ada_specs_parent), 0, CLVC_STRING, 0, -1, -1 },
 /* [830] = */ {
    "-faggressive-loop-optimizations",
    "Aggressively optimize loops using language constraints.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 830,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_aggressive_loop_optimizations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [831] = */ {
    "-falign-functions",
    "Align the start of functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 831,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_align_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [832] = */ {
    "-falign-functions=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_str_align_functions), 0, CLVC_STRING, 0, -1, -1 },
 /* [833] = */ {
    "-falign-jumps",
    "Align labels which are only reached by jumping.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 833,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_align_jumps), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [834] = */ {
    "-falign-jumps=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_str_align_jumps), 0, CLVC_STRING, 0, -1, -1 },
 /* [835] = */ {
    "-falign-labels",
    "Align all labels.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 835,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_align_labels), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [836] = */ {
    "-falign-labels=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_str_align_labels), 0, CLVC_STRING, 0, -1, -1 },
 /* [837] = */ {
    "-falign-loops",
    "Align the start of loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 837,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_align_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [838] = */ {
    "-falign-loops=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_str_align_loops), 0, CLVC_STRING, 0, -1, -1 },
 /* [839] = */ {
    "-faligned-new",
    "Support C++17 allocation of over-aligned types.",
    NULL,
    NULL,
    "1", "0", OPT_faligned_new_, N_OPTS, 12, /* .neg_idx = */ 839,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [840] = */ {
    "-faligned-new=",
    "-faligned-new=<N>	Use C++17 over-aligned type allocation for alignments greater than N.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_aligned_new_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [841] = */ {
    "-fall-virtual",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 12, /* .neg_idx = */ 841,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [842] = */ {
    "-fallocation-dce",
    "Tell DCE to remove unused C++ allocations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 842,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_allocation_dce), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [843] = */ {
    "-fallow-parameterless-variadic-functions",
    "Allow variadic functions without named parameter.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 39, /* .neg_idx = */ 843,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_allow_parameterless_variadic_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [844] = */ {
    "-fallow-store-data-races",
    "Allow the compiler to introduce new data races on stores.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 844,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_store_data_races), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [845] = */ {
    "-falt-external-templates",
    "No longer supported.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 23, /* .neg_idx = */ 845,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [846] = */ {
    "-fanalyzer",
    "Enable static analysis pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 846,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [847] = */ {
    "-fanalyzer-call-summaries",
    "Approximate the effect of function calls to simplify analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 847,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_call_summaries), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [848] = */ {
    "-fanalyzer-checker=",
    "Restrict the analyzer to run just the named checker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_checker), 0, CLVC_STRING, 0, -1, -1 },
 /* [849] = */ {
    "-fanalyzer-feasibility",
    "Verify that paths are feasible when emitting diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 849,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_feasibility), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [850] = */ {
    "-fanalyzer-fine-grained",
    "Avoid combining multiple statements into one exploded edge.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 850,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_fine_grained), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [851] = */ {
    "-fanalyzer-show-duplicate-count",
    "Issue a note when diagnostics are deduplicated.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 851,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_show_duplicate_count), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [852] = */ {
    "-fanalyzer-state-merge",
    "Merge similar-enough states during analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 852,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_state_merge), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [853] = */ {
    "-fanalyzer-state-purge",
    "Purge unneeded state during analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 853,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_state_purge), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [854] = */ {
    "-fanalyzer-transitivity",
    "Enable transitivity of constraints during analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 854,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_transitivity), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [855] = */ {
    "-fanalyzer-verbose-edges",
    "Emit more verbose descriptions of control flow in diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 855,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_verbose_edges), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [856] = */ {
    "-fanalyzer-verbose-state-changes",
    "Emit more verbose descriptions of state changes in diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ 856,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_analyzer_verbose_state_changes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [857] = */ {
    "-fanalyzer-verbosity=",
    "Control which events are displayed in diagnostic paths.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 857,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_analyzer_verbosity), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [858] = */ {
    "-fargument-alias",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 858,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [859] = */ {
    "-fargument-noalias",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 859,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [860] = */ {
    "-fargument-noalias-anything",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 26, /* .neg_idx = */ 860,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [861] = */ {
    "-fargument-noalias-global",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 24, /* .neg_idx = */ 861,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [862] = */ {
    "-fasan-shadow-offset=",
    "-fasan-shadow-offset=<number>	Use custom shadow memory offset.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [863] = */ {
    "-fasm",
    "Recognize the \"asm\" keyword.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 863,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_asm), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [864] = */ {
    "-fassociative-math",
    "Allow optimization for floating-point arithmetic which may change the result of the operation due to rounding.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 864,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_associative_math), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [865] = */ {
    "-fasynchronous-unwind-tables",
    "Generate unwind tables that are exact at each instruction boundary.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 865,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_asynchronous_unwind_tables), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [866] = */ {
    "-fauto-inc-dec",
    "Generate auto-inc/dec instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 866,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_auto_inc_dec), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [867] = */ {
    "-fauto-profile",
    "Use sample profile information for call graph node weights. The default profile file is fbdata.afdo in 'pwd'.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 867,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_auto_profile), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [868] = */ {
    "-fauto-profile=",
    "Use sample profile information for call graph node weights. The profile file is specified in the argument.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_auto_profile_file), 0, CLVC_STRING, 0, -1, -1 },
 /* [869] = */ {
    "-fbit-tests",
    "Use bit tests for sufficiently large switch statements.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 869,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_bit_tests), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [870] = */ {
    "-fbounds-check",
    "Generate code to check bounds before indexing arrays.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 870,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_bounds_check), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [871] = */ {
    "-fbranch-count-reg",
    "Replace add, compare, branch with branch on count register.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 871,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_branch_on_count_reg), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [872] = */ {
    "-fbranch-probabilities",
    "Use profiling information for branch probabilities.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 872,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_branch_probabilities), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [873] = */ {
    "-fbranch-target-load-optimize",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 28, /* .neg_idx = */ 873,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [874] = */ {
    "-fbranch-target-load-optimize2",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 29, /* .neg_idx = */ 874,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [875] = */ {
    "-fbtr-bb-exclusive",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 875,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [876] = */ {
    "-fbuilding-libgcc",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 876,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_building_libgcc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [877] = */ {
    "-fbuiltin",
    "Recognize built-in functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 877,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_builtin), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [878] = */ {
    "-fbuiltin-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 878,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [879] = */ {
    "-fcall-saved-",
    "-fcall-saved-<register>	Mark <register> as being preserved across functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [880] = */ {
    "-fcall-used-",
    "-fcall-used-<register>	Mark <register> as being corrupted by function calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [881] = */ {
    "-fcaller-saves",
    "Save registers around function calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 881,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_caller_saves), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [882] = */ {
    "-fcallgraph-info",
    "Output callgraph information on a per-file basis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_callgraph_info), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [883] = */ {
    "-fcallgraph-info=",
    "Output callgraph information on a per-file basis with decorations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [884] = */ {
    "-fcanonical-system-headers",
    "Where shorter, use canonicalized paths to systems headers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 884,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [885] = */ {
    "-fcf-protection",
    NULL,
    NULL,
    NULL,
    "full", NULL, OPT_fcf_protection_, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [886] = */ {
    "-fcf-protection=",
    "-fcf-protection=[full|branch|return|none|check]	Instrument functions with checks to verify jump/call/return control-flow transfer instructions have valid targets.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cf_protection), 3, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [887] = */ {
    "-fchar8_t",
    "Enable the char8_t fundamental type and use it as the type for UTF-8 string and character literals.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 887,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_char8_t), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [888] = */ {
    "-fcheck-data-deps",
    "This switch is deprecated; do not use.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 16, /* .neg_idx = */ 888,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [889] = */ {
    "-fcheck-new",
    "Check the return value of new in C++.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 889,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_check_new), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [890] = */ {
    "-fcheck-pointer-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 21, /* .neg_idx = */ 890,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [891] = */ {
    "-fchecking",
    "Perform internal consistency checkings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 891,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_checking), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [892] = */ {
    "-fchecking=",
    "Perform internal consistency checkings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_checking), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [893] = */ {
    "-fchkp-check-incomplete-type",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 27, /* .neg_idx = */ 893,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [894] = */ {
    "-fchkp-check-read",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 16, /* .neg_idx = */ 894,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [895] = */ {
    "-fchkp-check-write",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 17, /* .neg_idx = */ 895,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [896] = */ {
    "-fchkp-first-field-has-own-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 32, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [897] = */ {
    "-fchkp-flexible-struct-trailing-arrays",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 37, /* .neg_idx = */ 897,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [898] = */ {
    "-fchkp-instrument-calls",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 22, /* .neg_idx = */ 898,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [899] = */ {
    "-fchkp-instrument-marked-only",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 28, /* .neg_idx = */ 899,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [900] = */ {
    "-fchkp-narrow-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 19, /* .neg_idx = */ 900,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [901] = */ {
    "-fchkp-narrow-to-innermost-array",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 31, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [902] = */ {
    "-fchkp-optimize",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 14, /* .neg_idx = */ 902,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [903] = */ {
    "-fchkp-store-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 18, /* .neg_idx = */ 903,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [904] = */ {
    "-fchkp-treat-zero-dynamic-size-as-infinite",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 41, /* .neg_idx = */ 904,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [905] = */ {
    "-fchkp-use-fast-string-functions",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 31, /* .neg_idx = */ 905,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [906] = */ {
    "-fchkp-use-nochk-string-functions",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 32, /* .neg_idx = */ 906,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [907] = */ {
    "-fchkp-use-static-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 23, /* .neg_idx = */ 907,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [908] = */ {
    "-fchkp-use-static-const-bounds",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 29, /* .neg_idx = */ 908,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [909] = */ {
    "-fchkp-use-wrappers",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 18, /* .neg_idx = */ 909,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [910] = */ {
    "-fchkp-zero-input-bounds-for-main",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 32, /* .neg_idx = */ 910,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [911] = */ {
    "-fcilkplus",
    "Removed in GCC 8.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 9, /* .neg_idx = */ 911,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [912] = */ {
    "-fcode-hoisting",
    "Enable code hoisting.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 912,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_code_hoisting), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [913] = */ {
    "-fcombine-stack-adjustments",
    "Looks for opportunities to reduce stack adjustments and stack references.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 913,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_combine_stack_adjustments), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [914] = */ {
    "-fcommon",
    "Put uninitialized globals in the common section.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 914,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_common), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [915] = */ {
    "-fcompare-debug",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 915,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [916] = */ {
    "-fcompare-debug-second",
    "Run only the second compilation of -fcompare-debug.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_compare_debug), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [917] = */ {
    "-fcompare-debug=",
    "-fcompare-debug[=<opts>]	Compile with and without e.g. -gtoggle, and compare the final-insns dump.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_compare_debug_opt), 0, CLVC_STRING, 0, -1, -1 },
 /* [918] = */ {
    "-fcompare-elim",
    "Perform comparison elimination after register allocation has finished.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 918,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_compare_elim_after_reload), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [919] = */ {
    "-fconcepts",
    "Enable support for C++ concepts.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 919,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_concepts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [920] = */ {
    "-fconcepts-diagnostics-depth=",
    "Specify maximum error replay depth during recursive diagnosis of a constraint satisfaction failure.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_concepts_diagnostics_max_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [921] = */ {
    "-fconcepts-ts",
    "Enable certain features present in the Concepts TS.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 921,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_concepts_ts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [922] = */ {
    "-fcond-mismatch",
    "Allow the arguments of the '?' operator to have different types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 922,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [923] = */ {
    "-fconserve-space",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 923,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [924] = */ {
    "-fconserve-stack",
    "Do not perform optimizations increasing noticeably stack usage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 924,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_conserve_stack), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [925] = */ {
    "-fconstant-string-class=",
    "-fconst-string-class=<name>	Use class <name> for constant strings.",
    "no class name specified with %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 925,
    CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [926] = */ {
    "-fconstexpr-cache-depth=",
    "-fconstexpr-cache-depth=<number>	Specify maximum constexpr recursion cache depth.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_constexpr_cache_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [927] = */ {
    "-fconstexpr-depth=",
    "-fconstexpr-depth=<number>	Specify maximum constexpr recursion depth.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_max_constexpr_depth), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [928] = */ {
    "-fconstexpr-fp-except",
    "Allow IEC559 floating point exceptions in constant expressions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 928,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_constexpr_fp_except), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [929] = */ {
    "-fconstexpr-loop-limit=",
    "-fconstexpr-loop-limit=<number>	Specify maximum constexpr loop iteration count.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_constexpr_loop_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [930] = */ {
    "-fconstexpr-ops-limit=",
    "-fconstexpr-ops-limit=<number>	Specify maximum number of constexpr operations during a single constexpr evaluation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_constexpr_ops_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [931] = */ {
    "-fcoroutines",
    "Enable C++ coroutines (experimental).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 931,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_coroutines), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [932] = */ {
    "-fcprop-registers",
    "Perform a register copy-propagation optimization pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 932,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cprop_registers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [933] = */ {
    "-fcrossjumping",
    "Perform cross-jumping optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 933,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_crossjumping), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [934] = */ {
    "-fcse-follow-jumps",
    "When running CSE, follow jumps to their targets.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 934,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cse_follow_jumps), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [935] = */ {
    "-fcse-skip-blocks",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 16, /* .neg_idx = */ 935,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [936] = */ {
    "-fcx-fortran-rules",
    "Complex multiplication and division follow Fortran rules.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 936,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cx_fortran_rules), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [937] = */ {
    "-fcx-limited-range",
    "Omit range reduction step when performing complex division.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 937,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cx_limited_range), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [938] = */ {
    "-fdata-sections",
    "Place data items into their own section.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 938,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_data_sections), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [939] = */ {
    "-fdbg-cnt-list",
    "List all available debugging counters with their limits and counts.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 939,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dbg_cnt_list), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [940] = */ {
    "-fdbg-cnt=",
    "-fdbg-cnt=<counter>[:<lower_limit1>-]<upper_limit1>[:<lower_limit2>-<upper_limit2>:...][,<counter>:...]	Set the debug counter limit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [941] = */ {
    "-fdce",
    "Use the RTL dead code elimination pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 941,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dce), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [942] = */ {
    "-fdebug-cpp",
    "Emit debug annotations during preprocessing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 942,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [943] = */ {
    "-fdebug-prefix-map=",
    "-fdebug-prefix-map=<old>=<new>	Map one directory name to another in debug information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [944] = */ {
    "-fdebug-types-section",
    "Output .debug_types section when using DWARF v4 debuginfo.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 944,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_debug_types_section), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [945] = */ {
    "-fdeclone-ctor-dtor",
    "Factor complex constructors and destructors to favor space over speed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 945,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_declone_ctor_dtor), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [946] = */ {
    "-fdeduce-init-list",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 946,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [947] = */ {
    "-fdefault-inline",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 947,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [948] = */ {
    "-fdefer-pop",
    "Defer popping functions args from stack until later.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 948,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_defer_pop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [949] = */ {
    "-fdelayed-branch",
    "Attempt to fill delay slots of branch instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 949,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_delayed_branch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [950] = */ {
    "-fdelete-dead-exceptions",
    "Delete dead instructions that may throw exceptions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 950,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_delete_dead_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [951] = */ {
    "-fdelete-null-pointer-checks",
    "Delete useless null pointer checks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 951,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_delete_null_pointer_checks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [952] = */ {
    "-fdevirtualize",
    "Try to convert virtual calls to direct ones.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 952,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_devirtualize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [953] = */ {
    "-fdevirtualize-at-ltrans",
    "Stream extra data to support more aggressive devirtualization in LTO local transformation mode.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 953,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ltrans_devirtualize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [954] = */ {
    "-fdevirtualize-speculatively",
    "Perform speculative devirtualization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 954,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_devirtualize_speculatively), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [955] = */ {
    "-fdiagnostics-color",
    NULL,
    NULL,
    NULL,
    "always", "never", OPT_fdiagnostics_color_, N_OPTS, 18, /* .neg_idx = */ 955,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [956] = */ {
    "-fdiagnostics-color=",
    "-fdiagnostics-color=[never|always|auto]	Colorize diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_color), 8, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [957] = */ {
    "-fdiagnostics-column-origin=",
    "-fdiagnostics-column-origin=<number>	Set the number of the first column.  The default is 1-based as per GNU style, but some utilities may expect 0-based, for example.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [958] = */ {
    "-fdiagnostics-column-unit=",
    "-fdiagnostics-column-unit=[display|byte]	Select whether column numbers are output as display columns (default) or raw bytes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 12, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [959] = */ {
    "-fdiagnostics-escape-format=",
    "-fdiagnostics-escape-format=[unicode|bytes]	Select how to escape non-printable-ASCII bytes in the source for diagnostics that suggest it.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 13, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [960] = */ {
    "-fdiagnostics-format=",
    "-fdiagnostics-format=[text|json]	Select output format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 14, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [961] = */ {
    "-fdiagnostics-generate-patch",
    "Print fix-it hints to stderr in unified diff format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 961,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_generate_patch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [962] = */ {
    "-fdiagnostics-minimum-margin-width=",
    "Set minimum width of left margin of source code when showing source.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ 962,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_diagnostics_minimum_margin_width), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [963] = */ {
    "-fdiagnostics-parseable-fixits",
    "Print fix-it hints in machine-readable form.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 963,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_parseable_fixits), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [964] = */ {
    "-fdiagnostics-path-format=",
    "Specify how to print any control-flow path associated with a diagnostic.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_path_format), 9, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [965] = */ {
    "-fdiagnostics-plain-output",
    "Turn off any diagnostics features that complicate the output, such as line numbers, color, and warning URLs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [966] = */ {
    "-fdiagnostics-show-caret",
    "Show the source line with a caret indicating the column.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 966,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_caret), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [967] = */ {
    "-fdiagnostics-show-cwe",
    "Print CWE identifiers for diagnostic messages, where available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 967,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_cwe), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [968] = */ {
    "-fdiagnostics-show-labels",
    "Show labels annotating ranges of source code when showing source.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 968,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_labels), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [969] = */ {
    "-fdiagnostics-show-line-numbers",
    "Show line numbers in the left margin when showing source.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 969,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_line_numbers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [970] = */ {
    "-fdiagnostics-show-location=",
    "-fdiagnostics-show-location=[once|every-line]	How often to emit source location at the beginning of line-wrapped diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 10, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [971] = */ {
    "-fdiagnostics-show-option",
    "Amend appropriate diagnostic messages with the command line option that controls them.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 971,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_option), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [972] = */ {
    "-fdiagnostics-show-path-depths",
    "Show stack depths of events in paths.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 972,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_path_depths), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [973] = */ {
    "-fdiagnostics-show-template-tree",
    "Print hierarchical comparisons when template types are mismatched.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ 973,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_template_tree), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [974] = */ {
    "-fdiagnostics-urls=",
    "-fdiagnostics-urls=[never|always|auto]	Embed URLs in diagnostics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_diagnostics_show_urls), 11, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [975] = */ {
    "-fdirectives-only",
    "Preprocess directives only.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 975,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [976] = */ {
    "-fdisable-",
    "-fdisable-[tree|rtl|ipa]-<pass>=range1+range2	Disable an optimization pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [977] = */ {
    "-fdollars-in-identifiers",
    "Permit '$' as an identifier character.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 977,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [978] = */ {
    "-fdse",
    "Use the RTL dead store elimination pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 978,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dse), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [979] = */ {
    "-fdump-",
    "-fdump-<type>	Dump various compiler internals to a file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [980] = */ {
    "-fdump-ada-spec",
    "Write all declarations as Ada code transitively.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 14, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_ada_spec), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [981] = */ {
    "-fdump-ada-spec-slim",
    "Write all declarations as Ada code for the given file only.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_ada_spec_slim), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [982] = */ {
    "-fdump-analyzer",
    "Dump various analyzer internals to SRCFILE.analyzer.txt.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 14, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [983] = */ {
    "-fdump-analyzer-callgraph",
    "Dump analyzer-specific call graph information to a SRCFILE.callgraph.dot file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 24, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_callgraph), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [984] = */ {
    "-fdump-analyzer-exploded-graph",
    "Dump the analyzer exploded graph to a SRCFILE.eg.dot file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 29, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_exploded_graph), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [985] = */ {
    "-fdump-analyzer-exploded-nodes",
    "Emit diagnostics showing the location of nodes in the exploded graph.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 29, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_exploded_nodes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [986] = */ {
    "-fdump-analyzer-exploded-nodes-2",
    "Dump a textual representation of the exploded graph to SRCFILE.eg.txt.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 31, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_exploded_nodes_2), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [987] = */ {
    "-fdump-analyzer-exploded-nodes-3",
    "Dump a textual representation of the exploded graph to SRCFILE.eg-ID.txt.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 31, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_exploded_nodes_3), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [988] = */ {
    "-fdump-analyzer-exploded-paths",
    "Dump a textual representation of each diagnostic's exploded path to SRCFILE.IDX.KIND.epath.txt.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 29, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_exploded_paths), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [989] = */ {
    "-fdump-analyzer-feasibility",
    "Dump various analyzer internals to SRCFILE.*.fg.dot and SRCFILE.*.tg.dot.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 26, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_feasibility), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [990] = */ {
    "-fdump-analyzer-json",
    "Dump analyzer-specific data to a SRCFILE.analyzer.json.gz file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 19, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_json), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [991] = */ {
    "-fdump-analyzer-state-purge",
    "Dump state-purging information to a SRCFILE.state-purge.dot file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 26, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_state_purge), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [992] = */ {
    "-fdump-analyzer-stderr",
    "Dump various analyzer internals to stderr.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 21, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_stderr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [993] = */ {
    "-fdump-analyzer-supergraph",
    "Dump the analyzer supergraph to a SRCFILE.supergraph.dot file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 25, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_supergraph), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [994] = */ {
    "-fdump-analyzer-untracked",
    "Emit custom warnings with internal details intended for analyzer developers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 24, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_analyzer_untracked), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [995] = */ {
    "-fdump-final-insns",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 17, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [996] = */ {
    "-fdump-final-insns=",
    "-fdump-final-insns=filename	Dump to filename the insns at the end of translation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_final_insns), 0, CLVC_STRING, 0, -1, -1 },
 /* [997] = */ {
    "-fdump-go-spec=",
    "-fdump-go-spec=filename	Write all declarations to file as Go code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_go_spec), 0, CLVC_STRING, 0, -1, -1 },
 /* [998] = */ {
    "-fdump-internal-locations",
    "Dump detailed information on GCC's internal representation of source code locations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 24, /* .neg_idx = */ 998,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_locations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [999] = */ {
    "-fdump-noaddr",
    "Suppress output of addresses in debugging dumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 12, /* .neg_idx = */ 999,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_noaddr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1000] = */ {
    "-fdump-passes",
    "Dump optimization passes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 12, /* .neg_idx = */ 1000,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_passes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1001] = */ {
    "-fdump-unnumbered",
    "Suppress output of instruction numbers, line number notes and addresses in debugging dumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 16, /* .neg_idx = */ 1001,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_unnumbered), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1002] = */ {
    "-fdump-unnumbered-links",
    "Suppress output of previous and next insn numbers in debugging dumps.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_fdump_, 22, /* .neg_idx = */ 1002,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dump_unnumbered_links), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1003] = */ {
    "-fdwarf2-cfi-asm",
    "Enable CFI tables via GAS assembler directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1003,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dwarf2_cfi_asm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1004] = */ {
    "-fearly-inlining",
    "Perform early inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1004,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_early_inlining), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1005] = */ {
    "-felide-constructors",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1005,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_elide_constructors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1006] = */ {
    "-felide-type",
    "Do not elide common elements in template comparisons.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1006,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_elide_type), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1007] = */ {
    "-feliminate-dwarf2-dups",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 22, /* .neg_idx = */ 1007,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1008] = */ {
    "-feliminate-unused-debug-symbols",
    "Perform unused symbol elimination in debug info.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ 1008,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_debug_only_used_symbols), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1009] = */ {
    "-feliminate-unused-debug-types",
    "Perform unused type elimination in debug info.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 1009,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_eliminate_unused_debug_types), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1010] = */ {
    "-femit-class-debug-always",
    "Do not suppress C++ class debug information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 1010,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_emit_class_debug_always), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1011] = */ {
    "-femit-struct-debug-baseonly",
    "-femit-struct-debug-baseonly	Aggressive reduced debug info for structs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ 1011,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1012] = */ {
    "-femit-struct-debug-detailed=",
    "-femit-struct-debug-detailed=<spec-list>	Detailed reduced debug info for structs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1012,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1013] = */ {
    "-femit-struct-debug-reduced",
    "-femit-struct-debug-reduced	Conservative reduced debug info for structs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1013,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1014] = */ {
    "-fenable-",
    "-fenable-[tree|rtl|ipa]-<pass>=range1+range2	Enable an optimization pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1015] = */ {
    "-fenforce-eh-specs",
    "Generate code to check exception specifications.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1015,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_enforce_eh_specs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1016] = */ {
    "-fenum-int-equiv",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 15, /* .neg_idx = */ 1016,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1017] = */ {
    "-fexceptions",
    "Enable exception handling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1017,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1018] = */ {
    "-fexcess-precision=",
    "-fexcess-precision=[fast|standard|16]	Specify handling of excess floating-point precision.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_excess_precision), 17, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1019] = */ {
    "-fexec-charset=",
    "-fexec-charset=<cset>	Convert all strings and character constants to character set <cset>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1020] = */ {
    "-fexpensive-optimizations",
    "Perform a number of minor, expensive optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 1020,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_expensive_optimizations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1021] = */ {
    "-fext-numeric-literals",
    "Interpret imaginary, fixed-point, or other gnu number suffix as the corresponding number literal rather than a user-defined number literal.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1021,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ext_numeric_literals), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1022] = */ {
    "-fextended-identifiers",
    "Permit universal character names (\\u and \\U) in identifiers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1022,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1023] = */ {
    "-fextern-tls-init",
    "Support dynamic initialization of thread-local variables in a different translation unit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1023,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_extern_tls_init), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1024] = */ {
    "-fexternal-templates",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 19, /* .neg_idx = */ 1024,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1025] = */ {
    "-ffast-math",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1025,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1026] = */ {
    "-ffat-lto-objects",
    "Output lto objects containing both the intermediate language and binary output.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1026,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fat_lto_objects), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1027] = */ {
    "-ffile-prefix-map=",
    "-ffile-prefix-map=<old>=<new>	Map one directory name to another in compilation result.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1028] = */ {
    "-ffinite-loops",
    "Assume that loops with an exit will terminate and not loop indefinitely.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1028,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_finite_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1029] = */ {
    "-ffinite-math-only",
    "Assume no NaNs or infinities are generated.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1029,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_finite_math_only), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1030] = */ {
    "-ffixed-",
    "-ffixed-<register>	Mark <register> as being unavailable to the compiler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1031] = */ {
    "-ffloat-store",
    "Don't allocate floats and doubles in extended-precision registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1031,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_float_store), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1032] = */ {
    "-ffold-simple-inlines",
    "Fold calls to simple inline functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1032,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fold_simple_inlines), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1033] = */ {
    "-ffor-scope",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1033,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1034] = */ {
    "-fforce-addr",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 11, /* .neg_idx = */ 1034,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1035] = */ {
    "-fforward-propagate",
    "Perform a forward propagation pass on RTL.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1035,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_forward_propagate), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1036] = */ {
    "-ffp-contract=",
    "-ffp-contract=[off|on|fast]	Perform floating-point expression contraction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fp_contract_mode), 18, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1037] = */ {
    "-ffp-int-builtin-inexact",
    "Allow built-in functions ceil, floor, round, trunc to raise \"inexact\" exceptions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1037,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fp_int_builtin_inexact), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1038] = */ {
    "-ffreestanding",
    "Do not assume that standard C libraries and \"main\" exist.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1038,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1039] = */ {
    "-ffriend-injection",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 17, /* .neg_idx = */ 1039,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1040] = */ {
    "-ffunction-cse",
    "Allow function addresses to be held in registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1040,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_function_cse), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1041] = */ {
    "-ffunction-sections",
    "Place each function into its own section.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1041,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_function_sections), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1042] = */ {
    "-fgcse",
    "Perform global common subexpression elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1042,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gcse), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1043] = */ {
    "-fgcse-after-reload",
    "Perform global common subexpression elimination after register allocation has finished.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1043,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gcse_after_reload), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1044] = */ {
    "-fgcse-las",
    "Perform redundant load after store elimination in global common subexpression elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1044,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gcse_las), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1045] = */ {
    "-fgcse-lm",
    "Perform enhanced load motion during global common subexpression elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1045,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gcse_lm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1046] = */ {
    "-fgcse-sm",
    "Perform store motion after global common subexpression elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1046,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gcse_sm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1047] = */ {
    "-fgimple",
    "Enable parsing GIMPLE.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1047,
    CL_C,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gimple), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1048] = */ {
    "-fgnat-encodings=",
    "-fgnat-encodings=[all|gdb|minimal]	Select the balance between GNAT encodings and standard DWARF emitted in the debug information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_gnat_encodings), 15, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1049] = */ {
    "-fgnu-keywords",
    "Recognize GNU-defined keywords.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1049,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_gnu_keywords), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1050] = */ {
    "-fgnu-runtime",
    "Generate code for GNU runtime environment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_next_runtime), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1051] = */ {
    "-fgnu-tm",
    "Enable support for GNU transactional memory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1051,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1052] = */ {
    "-fgnu-unique",
    "Use STB_GNU_UNIQUE if supported by the assembler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1052,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gnu_unique), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1053] = */ {
    "-fgnu89-inline",
    "Use traditional GNU semantics for inline functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1053,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gnu89_inline), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1054] = */ {
    "-fgraphite",
    "Enable in and out of Graphite representation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1054,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_graphite), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1055] = */ {
    "-fgraphite-identity",
    "Enable Graphite Identity transformation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1055,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_graphite_identity), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1056] = */ {
    "-fguess-branch-probability",
    "Enable guessing of branch probabilities.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1056,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_guess_branch_prob), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1057] = */ {
    "-fguiding-decls",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 14, /* .neg_idx = */ 1057,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1058] = */ {
    "-fhandle-exceptions",
    NULL,
    NULL,
    "%<-fhandle-exceptions%> has been renamed %<-fexceptions%> (and is now on by default)",
    NULL, NULL, OPT_fexceptions, N_OPTS, 18, /* .neg_idx = */ 1058,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1059] = */ {
    "-fharden-compares",
    "Harden conditionals not used in branches, checking reversed conditions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1059,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_harden_compares), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1060] = */ {
    "-fharden-conditional-branches",
    "Harden conditional branches by checking reversed conditions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1060,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_harden_conditional_branches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1061] = */ {
    "-fhelp",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__help, N_OPTS, 5, /* .neg_idx = */ 1061,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1062] = */ {
    "-fhelp=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__help_, N_OPTS, 6, /* .neg_idx = */ 1062,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1063] = */ {
    "-fhoist-adjacent-loads",
    "Enable hoisting adjacent loads to encourage generating conditional move instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1063,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_hoist_adjacent_loads), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1064] = */ {
    "-fhonor-std",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1064,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1065] = */ {
    "-fhosted",
    "Assume normal C execution environment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1065,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1066] = */ {
    "-fhuge-objects",
    "No longer supported.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 13, /* .neg_idx = */ 1066,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1067] = */ {
    "-fident",
    "Process #ident directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1067,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_ident), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1068] = */ {
    "-fif-conversion",
    "Perform conversion of conditional jumps to branchless equivalents.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1068,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_if_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1069] = */ {
    "-fif-conversion2",
    "Perform conversion of conditional jumps to conditional execution.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1069,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_if_conversion2), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1070] = */ {
    "-fimplement-inlines",
    "Export functions even if they can be inlined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1070,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_implement_inlines), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1071] = */ {
    "-fimplicit-constexpr",
    "Make inline functions constexpr by default.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1071,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_implicit_constexpr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1072] = */ {
    "-fimplicit-inline-templates",
    "Emit implicit instantiations of inline templates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1072,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_implicit_inline_templates), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1073] = */ {
    "-fimplicit-templates",
    "Emit implicit instantiations of templates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1073,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_implicit_templates), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1074] = */ {
    "-findirect-inlining",
    "Perform indirect inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1074,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_indirect_inlining), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1075] = */ {
    "-finhibit-size-directive",
    "Do not generate .size directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1075,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_inhibit_size_directive), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1076] = */ {
    "-finline",
    "Enable inlining of function declared \"inline\", disabling disables all inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1076,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_inline), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1077] = */ {
    "-finline-atomics",
    "Inline __atomic operations when a lock free instruction sequence is available.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1077,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_inline_atomics), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1078] = */ {
    "-finline-functions",
    "Integrate functions not declared \"inline\" into their callers when profitable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1078,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_inline_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1079] = */ {
    "-finline-functions-called-once",
    "Integrate functions only required by their single caller.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 1079,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_inline_functions_called_once), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1080] = */ {
    "-finline-limit-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_finline_limit_, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1081] = */ {
    "-finline-limit=",
    "-finline-limit=<number>	Limit the size of inlined functions to <number>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1082] = */ {
    "-finline-small-functions",
    "Integrate functions into their callers when code size is known not to grow.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1082,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_inline_small_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1083] = */ {
    "-finput-charset=",
    "-finput-charset=<cset>	Specify the default character set for source files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1084] = */ {
    "-finstrument-functions",
    "Instrument function entry and exit with profiling calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1084,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_instrument_function_entry_exit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1085] = */ {
    "-finstrument-functions-exclude-file-list=",
    "-finstrument-functions-exclude-file-list=filename,...	Do not instrument functions listed in files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 40, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1086] = */ {
    "-finstrument-functions-exclude-function-list=",
    "-finstrument-functions-exclude-function-list=name,...	Do not instrument listed functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 44, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1087] = */ {
    "-fipa-bit-cp",
    "Perform interprocedural bitwise constant propagation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1087,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_bit_cp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1088] = */ {
    "-fipa-cp",
    "Perform interprocedural constant propagation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1088,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_cp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1089] = */ {
    "-fipa-cp-alignment",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 1089,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1090] = */ {
    "-fipa-cp-clone",
    "Perform cloning to make Interprocedural constant propagation stronger.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1090,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_cp_clone), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1091] = */ {
    "-fipa-icf",
    "Perform Identical Code Folding for functions and read-only variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1091,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_icf), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1092] = */ {
    "-fipa-icf-functions",
    "Perform Identical Code Folding for functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1092,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_icf_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1093] = */ {
    "-fipa-icf-variables",
    "Perform Identical Code Folding for variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1093,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_icf_variables), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1094] = */ {
    "-fipa-matrix-reorg",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 1094,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1095] = */ {
    "-fipa-modref",
    "Perform interprocedural modref analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1095,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_modref), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1096] = */ {
    "-fipa-profile",
    "Perform interprocedural profile propagation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1096,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_profile), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1097] = */ {
    "-fipa-pta",
    "Perform interprocedural points-to analysis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1097,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_pta), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1098] = */ {
    "-fipa-pure-const",
    "Discover pure and const functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1098,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_pure_const), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1099] = */ {
    "-fipa-ra",
    "Use caller save register across calls if possible.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1099,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_ra), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1100] = */ {
    "-fipa-reference",
    "Discover read-only and non addressable static variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1100,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_reference), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1101] = */ {
    "-fipa-reference-addressable",
    "Discover read-only, write-only and non-addressable static variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1101,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_reference_addressable), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1102] = */ {
    "-fipa-sra",
    "Perform interprocedural reduction of aggregates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1102,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_sra), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1103] = */ {
    "-fipa-stack-alignment",
    "Reduce stack alignment on call sites if possible.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1103,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_stack_alignment), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1104] = */ {
    "-fipa-strict-aliasing",
    "Assume strict aliasing rules apply across (uninlined) function boundaries.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1104,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_strict_aliasing), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1105] = */ {
    "-fipa-struct-reorg",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 17, /* .neg_idx = */ 1105,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1106] = */ {
    "-fipa-vrp",
    "Perform IPA Value Range Propagation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1106,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ipa_vrp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1107] = */ {
    "-fira-algorithm=",
    "-fira-algorithm=[CB|priority]	Set the used IRA algorithm.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_algorithm), 23, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1108] = */ {
    "-fira-hoist-pressure",
    "Use IRA based register pressure calculation in RTL hoist optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1108,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_hoist_pressure), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1109] = */ {
    "-fira-loop-pressure",
    "Use IRA based register pressure calculation in RTL loop optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1109,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_loop_pressure), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1110] = */ {
    "-fira-region=",
    "-fira-region=[one|all|mixed]	Set regions for IRA.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_region), 24, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1111] = */ {
    "-fira-share-save-slots",
    "Share slots for saving different hard registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1111,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_share_save_slots), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1112] = */ {
    "-fira-share-spill-slots",
    "Share stack slots for spilled pseudo-registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1112,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_share_spill_slots), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1113] = */ {
    "-fira-verbose=",
    "-fira-verbose=<number>	Control IRA's level of diagnostic messages.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ira_verbose), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1114] = */ {
    "-fisolate-erroneous-paths-attribute",
    "Detect paths that trigger erroneous or undefined behavior due to a null value being used in a way forbidden by a returns_nonnull or nonnull attribute.  Isolate those paths from the main control flow and turn the statement with erroneous or undefined behavior into a trap.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ 1114,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_isolate_erroneous_paths_attribute), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1115] = */ {
    "-fisolate-erroneous-paths-dereference",
    "Detect paths that trigger erroneous or undefined behavior due to dereferencing a null pointer.  Isolate those paths from the main control flow and turn the statement with erroneous or undefined behavior into a trap.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 36, /* .neg_idx = */ 1115,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_isolate_erroneous_paths_dereference), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1116] = */ {
    "-fivar-visibility=",
    "-fvisibility=[private|protected|public|package]	Set the default symbol visibility.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_default_ivar_visibility), 25, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1117] = */ {
    "-fivopts",
    "Optimize induction variables on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1117,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ivopts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1118] = */ {
    "-fjump-tables",
    "Use jump tables for sufficiently large switch statements.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1118,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_jump_tables), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1119] = */ {
    "-fkeep-gc-roots-live",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1119,
    CL_COMMON | CL_UNDOCUMENTED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_keep_gc_roots_live), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1120] = */ {
    "-fkeep-inline-dllexport",
    "Don't emit dllexported inline functions unless needed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1120,
#if TARGET_DLLIMPORT_DECL_ATTRIBUTES
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#else
    0,
    1 /* Disabled.  */, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#endif
    offsetof (struct gcc_options, x_flag_keep_inline_dllexport), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1121] = */ {
    "-fkeep-inline-functions",
    "Generate code for functions even if they are fully inlined.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1121,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_keep_inline_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1122] = */ {
    "-fkeep-static-consts",
    "Emit static const variables even if they are not used.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1122,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_keep_static_consts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1123] = */ {
    "-fkeep-static-functions",
    "Generate code for static functions even if they are never called.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1123,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_keep_static_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1124] = */ {
    "-flabels-ok",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1124,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1125] = */ {
    "-flang-info-include-translate",
    "Note #include directives translated to import declarations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1125,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_note_include_translate_yes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1126] = */ {
    "-flang-info-include-translate-not",
    "Note #include directives not translated to import declarations, and not known to be textual.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ 1126,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_note_include_translate_no), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1127] = */ {
    "-flang-info-include-translate=",
    "Note a #include translation of a specific header.",
    "missing header name",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ -1,
    CL_CXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1128] = */ {
    "-flang-info-module-cmi",
    "Note Compiled Module Interface pathnames.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1128,
    CL_CXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_note_module_cmi_yes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1129] = */ {
    "-flang-info-module-cmi=",
    "Note Compiled Module Interface pathname of a specific module or header-unit.",
    "missing module name",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_CXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1130] = */ {
    "-flarge-source-files",
    "Improve GCC's ability to track column numbers in large source files, at the expense of slower compilation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1130,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_large_source_files), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1131] = */ {
    "-flax-vector-conversions",
    "Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1131,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lax_vector_conversions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1132] = */ {
    "-fleading-underscore",
    "Give external symbols a leading underscore.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1132,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_leading_underscore), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1133] = */ {
    "-flifetime-dse",
    "Tell DSE that the storage for a C++ object is dead when the constructor starts and when the destructor finishes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1133,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lifetime_dse), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [1134] = */ {
    "-flifetime-dse=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lifetime_dse), 0, CLVC_INTEGER, 0, 0, 2 },
 /* [1135] = */ {
    "-flimit-function-alignment",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1135,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_limit_function_alignment), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1136] = */ {
    "-flive-patching",
    NULL,
    NULL,
    NULL,
    "inline-clone", NULL, OPT_flive_patching_, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1137] = */ {
    "-flive-patching=",
    "-flive-patching=[inline-only-static|inline-clone]	Control IPA optimizations to provide a safe compilation for live-patching.  At the same time, provides multiple-level control on the enabled IPA optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_live_patching), 28, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1138] = */ {
    "-flive-range-shrinkage",
    "Relief of register pressure through live range shrinkage.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1138,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_live_range_shrinkage), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1139] = */ {
    "-flocal-ivars",
    "Allow access to instance variables as if they were local declarations within instance method implementations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1139,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_local_ivars), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1140] = */ {
    "-floop-block",
    "Enable loop nest transforms.  Same as -floop-nest-optimize.",
    NULL,
    NULL,
    NULL, NULL, OPT_floop_nest_optimize, N_OPTS, 11, /* .neg_idx = */ 1140,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1141] = */ {
    "-floop-flatten",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 13, /* .neg_idx = */ 1141,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1142] = */ {
    "-floop-interchange",
    "Enable loop interchange on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1142,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_loop_interchange), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1143] = */ {
    "-floop-nest-optimize",
    "Enable the loop nest optimizer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1143,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_loop_nest_optimize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1144] = */ {
    "-floop-optimize",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 14, /* .neg_idx = */ 1144,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1145] = */ {
    "-floop-parallelize-all",
    "Mark all loops as parallel.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1145,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_loop_parallelize_all), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1146] = */ {
    "-floop-strip-mine",
    "Enable loop nest transforms.  Same as -floop-nest-optimize.",
    NULL,
    NULL,
    NULL, NULL, OPT_floop_nest_optimize, N_OPTS, 16, /* .neg_idx = */ 1146,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1147] = */ {
    "-floop-unroll-and-jam",
    "Perform unroll-and-jam on loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1147,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unroll_jam), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1148] = */ {
    "-flra-remat",
    "Do CFG-sensitive rematerialization in LRA.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1148,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lra_remat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1149] = */ {
    "-flto",
    "Enable link-time optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1149,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1150] = */ {
    "-flto-compression-level=",
    "-flto-compression-level=<number>	Use zlib/zstd compression level <number> for IL.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lto_compression_level), 0, CLVC_INTEGER, 0, 0, 19 },
 /* [1151] = */ {
    "-flto-odr-type-merging",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 21, /* .neg_idx = */ 1151,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1152] = */ {
    "-flto-partition=",
    "Specify the algorithm to partition symbols and vars at linktime.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lto_partition), 29, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1153] = */ {
    "-flto-report",
    "Report various link-time optimization statistics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1153,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lto_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1154] = */ {
    "-flto-report-wpa",
    "Report various link-time optimization statistics for WPA only.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1154,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lto_report_wpa), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1155] = */ {
    "-flto=",
    "Link-time optimization with number of parallel jobs or jobserver.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_lto), 0, CLVC_STRING, 0, -1, -1 },
 /* [1156] = */ {
    "-fmacro-prefix-map=",
    "-fmacro-prefix-map=<old>=<new>	Map one directory name to another in __FILE__, __BASE_FILE__, and __builtin_FILE().",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1157] = */ {
    "-fmath-errno",
    "Set errno after built-in math functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1157,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_errno_math), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1158] = */ {
    "-fmax-errors=",
    "-fmax-errors=<number>	Maximum number of errors to report.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_max_errors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1159] = */ {
    "-fmax-include-depth=",
    "fmax-include-depth=<number> Set the maximum depth of the nested #include.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1160] = */ {
    "-fmem-report",
    "Report on permanent memory allocation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1160,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_mem_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1161] = */ {
    "-fmem-report-wpa",
    "Report on permanent memory allocation in WPA only.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1161,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_mem_report_wpa), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1162] = */ {
    "-fmerge-all-constants",
    "Attempt to merge identical constants and constant variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1162,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_merge_constants), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [1163] = */ {
    "-fmerge-constants",
    "Attempt to merge identical constants across compilation units.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1163,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_merge_constants), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1164] = */ {
    "-fmerge-debug-strings",
    "Attempt to merge identical debug strings across compilation units.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1164,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_merge_debug_strings), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1165] = */ {
    "-fmessage-length=",
    "-fmessage-length=<number>	Limit diagnostics to <number> characters per line.  0 suppresses line-wrapping.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1166] = */ {
    "-fmodule-header",
    "Enable C++ header module (experimental).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjC,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_header_unit), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1167] = */ {
    "-fmodule-header=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1168] = */ {
    "-fmodule-implicit-inline",
    "Member functions defined within their class are inline in module purview.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1168,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_module_implicit_inline), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1169] = */ {
    "-fmodule-lazy",
    "Enable lazy module importing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1169,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_module_lazy), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1170] = */ {
    "-fmodule-mapper=",
    "Mapper for module to CMI files.",
    "missing mapper",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1171] = */ {
    "-fmodule-only",
    "Only emit Compiled Module Interface.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjC,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_module_only), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1172] = */ {
    "-fmodule-version-ignore",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1172,
    CL_CXX | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_module_version_ignore), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1173] = */ {
    "-fmodules-ts",
    "Enable C++ modules-ts (experimental).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1173,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_modules), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1174] = */ {
    "-fmodulo-sched",
    "Perform SMS based modulo scheduling before the first scheduling pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1174,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_modulo_sched), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1175] = */ {
    "-fmodulo-sched-allow-regmoves",
    "Perform SMS based modulo scheduling with register moves allowed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1175,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_modulo_sched_allow_regmoves), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1176] = */ {
    "-fmove-loop-invariants",
    "Move loop invariant computations out of loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1176,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_move_loop_invariants), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1177] = */ {
    "-fmove-loop-stores",
    "Move stores out of loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1177,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_move_loop_stores), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1178] = */ {
    "-fms-extensions",
    "Don't warn about uses of Microsoft extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1178,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ms_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1179] = */ {
    "-fmudflap",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 8, /* .neg_idx = */ 1179,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1180] = */ {
    "-fmudflapir",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1180,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1181] = */ {
    "-fmudflapth",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1181,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1182] = */ {
    "-fname-mangling-version-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 23, /* .neg_idx = */ 1182,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1183] = */ {
    "-fnew-abi",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 8, /* .neg_idx = */ 1183,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1184] = */ {
    "-fnew-inheriting-ctors",
    "Implement C++17 inheriting constructor semantics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1184,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_new_inheriting_ctors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1185] = */ {
    "-fnew-ttp-matching",
    "Implement resolution of DR 150 for matching of template template arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1185,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_new_ttp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1186] = */ {
    "-fnext-runtime",
    "Generate code for NeXT (Apple Mac OS X) runtime environment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_next_runtime), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1187] = */ {
    "-fnil-receivers",
    "Assume that receivers of Objective-C messages may be nil.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1187,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_nil_receivers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1188] = */ {
    "-fno-modules",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_modules), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1189] = */ {
    "-fnon-call-exceptions",
    "Support synchronous non-call exceptions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1189,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_non_call_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1190] = */ {
    "-fnonansi-builtins",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1190,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_nonansi_builtin), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1191] = */ {
    "-fnonnull-objects",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 16, /* .neg_idx = */ 1191,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1192] = */ {
    "-fnothrow-opt",
    "Treat a throw() exception specification as noexcept to improve code size.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1192,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_nothrow_opt), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1193] = */ {
    "-fobjc-abi-version=",
    "Specify which ABI to use for Objective-C family code and meta-data generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_abi), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1194] = */ {
    "-fobjc-call-cxx-cdtors",
    "Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1194,
    CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_call_cxx_cdtors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1195] = */ {
    "-fobjc-direct-dispatch",
    "Allow fast jumps to the message dispatcher.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1195,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_direct_dispatch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1196] = */ {
    "-fobjc-exceptions",
    "Enable Objective-C exception and synchronization syntax.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1196,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1197] = */ {
    "-fobjc-gc",
    "Enable garbage collection (GC) in Objective-C/Objective-C++ programs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1197,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_gc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1198] = */ {
    "-fobjc-nilcheck",
    "Enable inline checks for nil receivers with the NeXT runtime and ABI version 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1198,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_nilcheck), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1199] = */ {
    "-fobjc-sjlj-exceptions",
    "Enable Objective-C setjmp exception handling runtime.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1199,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc_sjlj_exceptions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1200] = */ {
    "-fobjc-std=objc1",
    "Conform to the Objective-C 1.0 language as implemented in GCC 4.0.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1200,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_objc1_only), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1201] = */ {
    "-foffload-abi=",
    "-foffload-abi=[lp64|ilp32]	Set the ABI to use in an offload compiler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 30, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1202] = */ {
    "-foffload-options=",
    "-foffload-options=<targets>=<options>	Specify options for the offloading targets.",
    "options or targets=options missing after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1202,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1203] = */ {
    "-foffload=",
    NULL,
    "targets missing after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1203,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1204] = */ {
    "-fomit-frame-pointer",
    "When possible do not generate stack frames.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1204,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_omit_frame_pointer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1205] = */ {
    "-fopenacc",
    "Enable OpenACC.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1205,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_openacc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1206] = */ {
    "-fopenacc-dim=",
    "Specify default OpenACC compute dimensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1206,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_openacc_dims), 0, CLVC_STRING, 0, -1, -1 },
 /* [1207] = */ {
    "-fopenmp",
    "Enable OpenMP (implies -frecursive in Fortran).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1207,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_openmp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1208] = */ {
    "-fopenmp-simd",
    "Enable OpenMP's SIMD directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1208,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_openmp_simd), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1209] = */ {
    "-foperator-names",
    "Recognize C++ keywords like \"compl\" and \"xor\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1209,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1210] = */ {
    "-fopt-info",
    "Enable all optimization info dumps on stderr.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1210,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_opt_info), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1211] = */ {
    "-fopt-info-",
    "-fopt-info[-<type>=filename]	Dump compiler optimization details.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1212] = */ {
    "-foptimize-register-move",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 23, /* .neg_idx = */ 1212,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1213] = */ {
    "-foptimize-sibling-calls",
    "Optimize sibling and tail recursive calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1213,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_optimize_sibling_calls), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1214] = */ {
    "-foptimize-strlen",
    "Enable string length optimizations on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1214,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_optimize_strlen), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1215] = */ {
    "-foptional-diags",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 1215,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1216] = */ {
    "-fpack-struct",
    "Pack structure members together without holes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1216,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pack_struct), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1217] = */ {
    "-fpack-struct=",
    "-fpack-struct=<number>	Set initial maximum structure member alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1218] = */ {
    "-fpartial-inlining",
    "Perform partial inlining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1218,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_partial_inlining), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1219] = */ {
    "-fpatchable-function-entry=",
    "Insert NOP instructions at each function entry.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1219,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_patchable_function_entry), 0, CLVC_STRING, 0, -1, -1 },
 /* [1220] = */ {
    "-fpcc-struct-return",
    "Return small aggregates in memory, not registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1220,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pcc_struct_return), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1221] = */ {
    "-fpch-deps",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1221,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1222] = */ {
    "-fpch-preprocess",
    "Look for and use PCH files even when preprocessing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1222,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1223] = */ {
    "-fpeel-loops",
    "Perform loop peeling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1223,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_peel_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1224] = */ {
    "-fpeephole",
    "Enable machine specific peephole optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1224,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_no_peephole), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1225] = */ {
    "-fpeephole2",
    "Enable an RTL peephole pass before sched2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1225,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_peephole2), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1226] = */ {
    "-fpermissive",
    "Downgrade conformance errors to warnings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1226,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_permissive), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1227] = */ {
    "-fpermitted-flt-eval-methods=",
    "-fpermitted-flt-eval-methods=[c11|ts-18661]	Specify which values of FLT_EVAL_METHOD are permitted.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_permitted_flt_eval_methods), 34, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1228] = */ {
    "-fpic",
    "Generate position-independent code if possible (small mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1229,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pic), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1229] = */ {
    "-fpie",
    "Generate position-independent code for executables if possible (small mode).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 824,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pie), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1230] = */ {
    "-fplan9-extensions",
    "Enable Plan 9 language extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1230,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_plan9_extensions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1231] = */ {
    "-fplt",
    "Use PLT for PIC calls (-fno-plt: load the address from GOT at call site).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1231,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_plt), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1232] = */ {
    "-fplugin-arg-",
    "-fplugin-arg-<name>-<key>[=<value>]	Specify argument <key>=<value> for plugin <name>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1233] = */ {
    "-fplugin=",
    "Specify a plugin to load.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1234] = */ {
    "-fpost-ipa-mem-report",
    "Report on memory allocation before interprocedural optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1234,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_post_ipa_mem_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1235] = */ {
    "-fpre-ipa-mem-report",
    "Report on memory allocation before interprocedural optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1235,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_pre_ipa_mem_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1236] = */ {
    "-fpredictive-commoning",
    "Run predictive commoning optimization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1236,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_predictive_commoning), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1237] = */ {
    "-fprefetch-loop-arrays",
    "Generate prefetch instructions, if available, for arrays in loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1237,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_prefetch_loop_arrays), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1238] = */ {
    "-fpreprocessed",
    "Treat the input file as already preprocessed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1238,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1239] = */ {
    "-fpretty-templates",
    "Do not pretty-print template specializations as the template signature followed by the arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1239,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pretty_templates), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1240] = */ {
    "-fprintf-return-value",
    "Treat known sprintf return values as constants.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1240,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_printf_return_value), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1241] = */ {
    "-fprofile",
    "Enable basic program profiling code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1241,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1242] = */ {
    "-fprofile-abs-path",
    "Generate absolute source path names for gcov.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1242,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_abs_path_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1243] = */ {
    "-fprofile-arcs",
    "Insert arc-based program profiling code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1243,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_arc_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1244] = */ {
    "-fprofile-correction",
    "Enable correction of flow inconsistent profile data input.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1244,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_correction), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1245] = */ {
    "-fprofile-dir=",
    "Set the top-level directory for storing the profile data. The default is 'pwd'.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_data_prefix), 0, CLVC_STRING, 0, -1, -1 },
 /* [1246] = */ {
    "-fprofile-exclude-files=",
    "Instrument only functions from files whose name does not match any of the regular expressions (separated by semi-colons).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_exclude_files), 0, CLVC_STRING, 0, -1, -1 },
 /* [1247] = */ {
    "-fprofile-filter-files=",
    "Instrument only functions from files whose name matches any of the regular expressions (separated by semi-colons).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_filter_files), 0, CLVC_STRING, 0, -1, -1 },
 /* [1248] = */ {
    "-fprofile-generate",
    "Enable common options for generating profile info for profile feedback directed optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1248,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1249] = */ {
    "-fprofile-generate=",
    "Enable common options for generating profile info for profile feedback directed optimizations, and set -fprofile-dir=.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1250] = */ {
    "-fprofile-info-section",
    "Register the profile information in the .gcov_info section instead of using a constructor/destructor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1251] = */ {
    "-fprofile-info-section=",
    "Register the profile information in the specified section instead of using a constructor/destructor.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_info_section), 0, CLVC_STRING, 0, -1, -1 },
 /* [1252] = */ {
    "-fprofile-note=",
    "Select the name for storing the profile note file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_note_location), 0, CLVC_STRING, 0, -1, -1 },
 /* [1253] = */ {
    "-fprofile-partial-training",
    "Do not assume that functions never executed during the train run are cold.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1253,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_partial_training), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1254] = */ {
    "-fprofile-prefix-map=",
    "-fprofile-prefix-map=<old>=<new>	Map one directory name to another in GCOV coverage result.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1255] = */ {
    "-fprofile-prefix-path=",
    "Remove prefix from absolute path before mangling name for -fprofile-generate= and -fprofile-use=.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_prefix_path), 0, CLVC_STRING, 0, -1, -1 },
 /* [1256] = */ {
    "-fprofile-reorder-functions",
    "Enable function reordering that improves code placement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1256,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_reorder_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1257] = */ {
    "-fprofile-report",
    "Report on consistency of profile.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1257,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1258] = */ {
    "-fprofile-reproducible=",
    "-fprofile-reproducible=[serial|parallel-runs|multithreaded]	Control level of reproducibility of profile gathered by -fprofile-generate.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_reproducible), 37, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1259] = */ {
    "-fprofile-update=",
    "-fprofile-update=[single|atomic|prefer-atomic]	Set the profile update method.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_update), 38, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1260] = */ {
    "-fprofile-use",
    "Enable common options for performing profile feedback directed optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1260,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_use), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1261] = */ {
    "-fprofile-use=",
    "Enable common options for performing profile feedback directed optimizations, and set -fprofile-dir=.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1262] = */ {
    "-fprofile-values",
    "Insert code to profile values of expressions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1262,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_profile_values), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1263] = */ {
    "-frandom-seed",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1263,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1264] = */ {
    "-frandom-seed=",
    "-frandom-seed=<string>	Make compile reproducible using <string>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1265] = */ {
    "-freciprocal-math",
    "Same as -fassociative-math for expressions which include division.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1265,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_reciprocal_math), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1266] = */ {
    "-frecord-gcc-switches",
    "Record gcc command line switches in the object file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1266,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_record_gcc_switches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1267] = */ {
    "-free",
    "Turn on Redundant Extensions Elimination pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1267,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ree), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1268] = */ {
    "-freg-struct-return",
    "Return small aggregates in registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1268,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pcc_struct_return), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1269] = */ {
    "-fregmove",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 8, /* .neg_idx = */ 1269,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1270] = */ {
    "-frename-registers",
    "Perform a register renaming optimization pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1270,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_rename_registers), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1271] = */ {
    "-freorder-blocks",
    "Reorder basic blocks to improve code placement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1271,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_reorder_blocks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1272] = */ {
    "-freorder-blocks-algorithm=",
    "-freorder-blocks-algorithm=[simple|stc]	Set the used basic block reordering algorithm.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_reorder_blocks_algorithm), 40, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1273] = */ {
    "-freorder-blocks-and-partition",
    "Reorder basic blocks and partition into hot and cold sections.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 1273,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_reorder_blocks_and_partition), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1274] = */ {
    "-freorder-functions",
    "Reorder functions to improve code placement.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1274,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_reorder_functions), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1275] = */ {
    "-freplace-objc-classes",
    "Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1275,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_replace_objc_classes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1276] = */ {
    "-frepo",
    "Removed in GCC 10.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 5, /* .neg_idx = */ 1276,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1277] = */ {
    "-freport-bug",
    "Collect and dump debug information into temporary file if ICE in C/C++ compiler occurred.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1277,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_report_bug), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1278] = */ {
    "-frerun-cse-after-loop",
    "Add a common subexpression elimination pass after loop optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1278,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_rerun_cse_after_loop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1279] = */ {
    "-frerun-loop-opt",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 1279,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1280] = */ {
    "-freschedule-modulo-scheduled-loops",
    "Enable/Disable the traditional scheduling in loops that already passed modulo scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 34, /* .neg_idx = */ 1280,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_resched_modulo_sched), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1281] = */ {
    "-frounding-math",
    "Disable optimizations that assume default FP rounding behavior.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1281,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_rounding_math), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1282] = */ {
    "-frtti",
    "Generate run time type descriptor information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1282,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_rtti), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1283] = */ {
    "-fsanitize-address-use-after-scope",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 1283,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sanitize_address_use_after_scope), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1284] = */ {
    "-fsanitize-coverage=",
    "Select type of coverage sanitization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1284,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sanitize_coverage), 41, CLVC_ENUM, CLEV_BITSET, -1, -1 },
 /* [1285] = */ {
    "-fsanitize-recover",
    "This switch is deprecated; use -fsanitize-recover= instead.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1285,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1286] = */ {
    "-fsanitize-recover=",
    "After diagnosing undefined behavior attempt to continue execution.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1286,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1287] = */ {
    "-fsanitize-sections=",
    "-fsanitize-sections=<sec1,sec2,...>	Sanitize global variables in user-defined sections.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1288] = */ {
    "-fsanitize-undefined-trap-on-error",
    "Use trap instead of a library function for undefined behavior sanitization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 1288,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sanitize_undefined_trap_on_error), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1289] = */ {
    "-fsanitize=",
    "Select what to sanitize.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1289,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1290] = */ {
    "-fsave-optimization-record",
    "Write a SRCFILE.opt-record.json file detailing what optimizations were performed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1290,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_save_optimization_record), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1291] = */ {
    "-fsched-critical-path-heuristic",
    "Enable the critical path heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 1291,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_critical_path_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1292] = */ {
    "-fsched-dep-count-heuristic",
    "Enable the dependent count heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1292,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_dep_count_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1293] = */ {
    "-fsched-group-heuristic",
    "Enable the group heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1293,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_group_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1294] = */ {
    "-fsched-interblock",
    "Enable scheduling across basic blocks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1294,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_interblock), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1295] = */ {
    "-fsched-last-insn-heuristic",
    "Enable the last instruction heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1295,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_last_insn_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1296] = */ {
    "-fsched-pressure",
    "Enable register pressure sensitive insn scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1296,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_pressure), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1297] = */ {
    "-fsched-rank-heuristic",
    "Enable the rank heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1297,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_rank_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1298] = */ {
    "-fsched-spec",
    "Allow speculative motion of non-loads.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1298,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_speculative), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1299] = */ {
    "-fsched-spec-insn-heuristic",
    "Enable the speculative instruction heuristic in the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1299,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_spec_insn_heuristic), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1300] = */ {
    "-fsched-spec-load",
    "Allow speculative motion of some loads.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1300,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_speculative_load), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1301] = */ {
    "-fsched-spec-load-dangerous",
    "Allow speculative motion of more loads.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1301,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_speculative_load_dangerous), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1302] = */ {
    "-fsched-stalled-insns",
    "Allow premature scheduling of queued insns.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1302,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_stalled_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1303] = */ {
    "-fsched-stalled-insns-dep",
    "Set dependence distance checking in premature scheduling of queued insns.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 1303,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched_stalled_insns_dep), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1304] = */ {
    "-fsched-stalled-insns-dep=",
    "-fsched-stalled-insns-dep=<number>	Set dependence distance checking in premature scheduling of queued insns.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1305] = */ {
    "-fsched-stalled-insns=",
    "-fsched-stalled-insns=<number>	Set number of queued insns that can be prematurely scheduled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1306] = */ {
    "-fsched-verbose=",
    "-fsched-verbose=<number>	Set the verbosity level of the scheduler.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_sched_verbose_param), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1307] = */ {
    "-fsched2-use-superblocks",
    "If scheduling post reload, do superblock scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1307,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sched2_use_superblocks), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1308] = */ {
    "-fsched2-use-traces",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 18, /* .neg_idx = */ 1308,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1309] = */ {
    "-fschedule-fusion",
    "Perform a target dependent instruction fusion optimization pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1309,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_fusion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1310] = */ {
    "-fschedule-insns",
    "Reschedule instructions before register allocation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1310,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_insns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1311] = */ {
    "-fschedule-insns2",
    "Reschedule instructions after register allocation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1311,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_schedule_insns_after_reload), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1312] = */ {
    "-fsection-anchors",
    "Access data in the same section from shared anchor points.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1312,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_section_anchors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1313] = */ {
    "-fsee",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 4, /* .neg_idx = */ 1313,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1314] = */ {
    "-fsel-sched-pipelining",
    "Perform software pipelining of inner loops during selective scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1314,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sel_sched_pipelining), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1315] = */ {
    "-fsel-sched-pipelining-outer-loops",
    "Perform software pipelining of outer loops during selective scheduling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 33, /* .neg_idx = */ 1315,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sel_sched_pipelining_outer_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1316] = */ {
    "-fsel-sched-reschedule-pipelined",
    "Reschedule pipelined regions without pipelining.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ 1316,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sel_sched_reschedule_pipelined), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1317] = */ {
    "-fselective-scheduling",
    "Schedule instructions using selective scheduling algorithm.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1317,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_selective_scheduling), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1318] = */ {
    "-fselective-scheduling2",
    "Run selective scheduling after reload.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1318,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_selective_scheduling2), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1319] = */ {
    "-fself-test=",
    "Run self-tests, using the given path to locate test files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1319,
    CL_COMMON | CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_self_test), 0, CLVC_STRING, 0, -1, -1 },
 /* [1320] = */ {
    "-fsemantic-interposition",
    "Allow interposing function (or variables) by ones with different semantics (or initializer) respectively by dynamic linker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1320,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_semantic_interposition), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1321] = */ {
    "-fshort-enums",
    "Use the narrowest integer type possible for enumeration types.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1321,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_short_enums), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1322] = */ {
    "-fshort-wchar",
    "Force the underlying type for \"wchar_t\" to be \"unsigned short\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1322,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_short_wchar), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1323] = */ {
    "-fshow-column",
    "Show column numbers in diagnostics, when available.  Default on.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1323,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_show_column), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1324] = */ {
    "-fshrink-wrap",
    "Emit function prologues only before parts of the function that need it, rather than at the top of the function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1324,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_shrink_wrap), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1325] = */ {
    "-fshrink-wrap-separate",
    "Shrink-wrap parts of the prologue and epilogue separately.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1325,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_shrink_wrap_separate), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1326] = */ {
    "-fsignaling-nans",
    "Disable optimizations observable by IEEE signaling NaNs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1326,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signaling_nans), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1327] = */ {
    "-fsigned-bitfields",
    "When \"signed\" or \"unsigned\" is not given make the bitfield signed.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1327,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signed_bitfields), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1328] = */ {
    "-fsigned-char",
    "Make \"char\" signed by default.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1328,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signed_char), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1329] = */ {
    "-fsigned-zeros",
    "Disable floating point optimizations that ignore the IEEE signedness of zero.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1329,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signed_zeros), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1330] = */ {
    "-fsimd-cost-model=",
    "-fsimd-cost-model=[unlimited|dynamic|cheap|very-cheap]	Specifies the vectorization cost model for code marked with a simd directive.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_simd_cost_model), 52, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1331] = */ {
    "-fsingle-precision-constant",
    "Convert floating point constants to single precision constants.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1331,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_single_precision_constant), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1332] = */ {
    "-fsized-deallocation",
    "Enable C++14 sized deallocation support.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1332,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sized_deallocation), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1333] = */ {
    "-fsplit-ivs-in-unroller",
    "Split lifetimes of induction variables when loops are unrolled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1333,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_ivs_in_unroller), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1334] = */ {
    "-fsplit-loops",
    "Perform loop splitting.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1334,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1335] = */ {
    "-fsplit-paths",
    "Split paths leading to loop backedges.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1335,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_paths), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1336] = */ {
    "-fsplit-stack",
    "Generate discontiguous stack frames.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1336,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_stack), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1337] = */ {
    "-fsplit-wide-types",
    "Split wide types into independent registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1337,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_wide_types), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1338] = */ {
    "-fsplit-wide-types-early",
    "Split wide types into independent registers earlier.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1338,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_split_wide_types_early), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1339] = */ {
    "-fsquangle",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 9, /* .neg_idx = */ 1339,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1340] = */ {
    "-fssa-backprop",
    "Enable backward propagation of use properties at the SSA level.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1340,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ssa_backprop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1341] = */ {
    "-fssa-phiopt",
    "Optimize conditional patterns using SSA PHI nodes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1341,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_ssa_phiopt), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1342] = */ {
    "-fsso-struct=",
    "-fsso-struct=[big-endian|little-endian|native]	Set the default scalar storage order.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_C | CL_ObjC | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_default_sso), 42, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1343] = */ {
    "-fstack-check",
    "Insert stack checking code into the program.  Same as -fstack-check=specific.",
    NULL,
    NULL,
    "specific", "no", OPT_fstack_check_, N_OPTS, 12, /* .neg_idx = */ 1343,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1344] = */ {
    "-fstack-check=",
    "-fstack-check=[no|generic|specific]	Insert stack checking code into the program.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1345] = */ {
    "-fstack-clash-protection",
    "Insert code to probe each page of stack space as it is allocated to protect from stack-clash style attacks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1345,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_clash_protection), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1346] = */ {
    "-fstack-limit",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1346,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1347] = */ {
    "-fstack-limit-register=",
    "-fstack-limit-register=<register>	Trap if the stack goes past <register>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1348] = */ {
    "-fstack-limit-symbol=",
    "-fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_common_deferred_options), 0, CLVC_DEFER, 0, -1, -1 },
 /* [1349] = */ {
    "-fstack-protector",
    "Use propolice as a stack protection method.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1349,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_protect), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1350] = */ {
    "-fstack-protector-all",
    "Use a stack protection method for every function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_protect), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [1351] = */ {
    "-fstack-protector-explicit",
    "Use stack protection method only for functions with the stack_protect attribute.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_protect), 0, CLVC_EQUAL, 4, -1, -1 },
 /* [1352] = */ {
    "-fstack-protector-strong",
    "Use a smart stack protection method for certain functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_protect), 0, CLVC_EQUAL, 3, -1, -1 },
 /* [1353] = */ {
    "-fstack-reuse=",
    "-fstack-reuse=[all|named_vars|none]	Set stack reuse level for local variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_reuse), 44, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1354] = */ {
    "-fstack-usage",
    "Output stack usage information on a per-function basis.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stack_usage), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1355] = */ {
    "-fstats",
    "Display statistics accumulated during compilation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1355,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_detailed_statistics), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1356] = */ {
    "-fstdarg-opt",
    "Optimize amount of stdarg registers saved to stack at start of function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1356,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_stdarg_opt), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1357] = */ {
    "-fstore-merging",
    "Merge adjacent stores.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1357,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_store_merging), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1358] = */ {
    "-fstrength-reduce",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 16, /* .neg_idx = */ 1358,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1359] = */ {
    "-fstrict-aliasing",
    "Assume strict aliasing rules apply.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1359,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_strict_aliasing), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1360] = */ {
    "-fstrict-enums",
    "Assume that values of enumeration type are always within the minimum range of that type.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1360,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_strict_enums), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1361] = */ {
    "-fstrict-overflow",
    "Treat signed overflow as undefined.  Negated as -fwrapv -fwrapv-pointer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1361,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1362] = */ {
    "-fstrict-prototype",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 17, /* .neg_idx = */ 1362,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1363] = */ {
    "-fstrict-volatile-bitfields",
    "Force bitfield accesses to match their type width.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1363,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_strict_volatile_bitfields), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1364] = */ {
    "-fstrong-eval-order",
    "Follow the C++17 evaluation order requirements for assignment expressions, shift, member function calls, etc.",
    NULL,
    NULL,
    "all", "none", OPT_fstrong_eval_order_, N_OPTS, 18, /* .neg_idx = */ 1364,
    CL_CXX | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1365] = */ {
    "-fstrong-eval-order=",
    "Follow the C++17 evaluation order requirements for assignment expressions, shift, member function calls, etc.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_strong_eval_order), 47, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1366] = */ {
    "-fsync-libcalls",
    "Implement __atomic operations via libcalls to legacy __sync functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1366,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_sync_libcalls), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1367] = */ {
    "-fsyntax-only",
    "Check for syntax errors, then stop.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1367,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_syntax_only), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1368] = */ {
    "-ftabstop=",
    "-ftabstop=<number>      Distance between tab stops for column reporting.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1369] = */ {
    "-ftarget-help",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__target_help, N_OPTS, 12, /* .neg_idx = */ 1369,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1370] = */ {
    "-ftemplate-backtrace-limit=",
    "Set the maximum number of template instantiation notes for a single warning or error.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_template_backtrace_limit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1371] = */ {
    "-ftemplate-depth-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_ftemplate_depth_, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1372] = */ {
    "-ftemplate-depth=",
    "-ftemplate-depth=<number>	Specify maximum template instantiation depth.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1373] = */ {
    "-ftest-coverage",
    "Create data files needed by \"gcov\".",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1373,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_test_coverage), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1374] = */ {
    "-fthis-is-variable",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 17, /* .neg_idx = */ 1374,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1375] = */ {
    "-fthread-jumps",
    "Perform jump threading optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1375,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_thread_jumps), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1376] = */ {
    "-fthreadsafe-statics",
    "-fno-threadsafe-statics	Do not generate thread-safe code for initializing local statics.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1376,
    CL_CXX | CL_ObjCXX | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_threadsafe_statics), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1377] = */ {
    "-ftime-report",
    "Report the time taken by each compiler pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1377,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_time_report), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1378] = */ {
    "-ftime-report-details",
    "Record times taken by sub-phases separately.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1378,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_time_report_details), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1379] = */ {
    "-ftls-model=",
    "-ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]	Set the default thread-local storage code generation model.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tls_default), 51, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1380] = */ {
    "-ftoplevel-reorder",
    "Reorder top level functions, variables, and asms.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1380,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_toplevel_reorder), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1381] = */ {
    "-ftracer",
    "Perform superblock formation via tail duplication.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1381,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tracer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1382] = */ {
    "-ftrack-macro-expansion",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1383] = */ {
    "-ftrack-macro-expansion=",
    "-ftrack-macro-expansion=<0|1|2>	Track locations of tokens coming from macro expansion and display them in error messages.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_ftrack_macro_expansion, 23, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 1 /* UInteger */, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1384] = */ {
    "-ftrampolines",
    "For targets that normally need trampolines for nested functions, always generate them instead of using descriptors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1384,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_trampolines), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1385] = */ {
    "-ftrapping-math",
    "Assume floating-point operations can trap.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1385,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_trapping_math), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1386] = */ {
    "-ftrapv",
    "Trap for signed overflow in addition, subtraction and multiplication.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1386,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_trapv), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1387] = */ {
    "-ftree-bit-ccp",
    "Enable SSA-BIT-CCP optimization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1387,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_bit_ccp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1388] = */ {
    "-ftree-builtin-call-dce",
    "Enable conditional dead code elimination for builtin calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1388,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_builtin_call_dce), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1389] = */ {
    "-ftree-ccp",
    "Enable SSA-CCP optimization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1389,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_ccp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1390] = */ {
    "-ftree-ch",
    "Enable loop header copying on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1390,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_ch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1391] = */ {
    "-ftree-coalesce-inlined-vars",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1392] = */ {
    "-ftree-coalesce-vars",
    "Enable SSA coalescing of user variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1392,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_coalesce_vars), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1393] = */ {
    "-ftree-copy-prop",
    "Enable copy propagation on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1393,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_copy_prop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1394] = */ {
    "-ftree-copyrename",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 16, /* .neg_idx = */ 1394,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1395] = */ {
    "-ftree-cselim",
    "Transform condition stores into unconditional ones.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1395,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_cselim), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1396] = */ {
    "-ftree-dce",
    "Enable SSA dead code elimination optimization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1396,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_dce), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1397] = */ {
    "-ftree-dominator-opts",
    "Enable dominator optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1397,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_dom), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1398] = */ {
    "-ftree-dse",
    "Enable dead store elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1398,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_dse), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1399] = */ {
    "-ftree-forwprop",
    "Enable forward propagation on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1399,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_forwprop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1400] = */ {
    "-ftree-fre",
    "Enable Full Redundancy Elimination (FRE) on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1400,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_fre), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1401] = */ {
    "-ftree-loop-distribute-patterns",
    "Enable loop distribution for patterns transformed into a library call.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ 1401,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_distribute_patterns), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1402] = */ {
    "-ftree-loop-distribution",
    "Enable loop distribution on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1402,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_distribution), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1403] = */ {
    "-ftree-loop-if-convert",
    "Convert conditional jumps in innermost loops to branchless equivalents.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1403,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_if_convert), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1404] = */ {
    "-ftree-loop-if-convert-stores",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 28, /* .neg_idx = */ 1404,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1405] = */ {
    "-ftree-loop-im",
    "Enable loop invariant motion on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1405,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_im), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1406] = */ {
    "-ftree-loop-ivcanon",
    "Create canonical induction variables in loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1406,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_ivcanon), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1407] = */ {
    "-ftree-loop-linear",
    "Enable loop nest transforms.  Same as -floop-nest-optimize.",
    NULL,
    NULL,
    NULL, NULL, OPT_floop_nest_optimize, N_OPTS, 17, /* .neg_idx = */ 1407,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1408] = */ {
    "-ftree-loop-optimize",
    "Enable loop optimizations on tree level.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1408,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_optimize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1409] = */ {
    "-ftree-loop-vectorize",
    "Enable loop vectorization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1409,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_loop_vectorize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1410] = */ {
    "-ftree-lrs",
    "Perform live range splitting during the SSA->normal pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1410,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_live_range_split), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1411] = */ {
    "-ftree-parallelize-loops=",
    "-ftree-parallelize-loops=<number>	Enable automatic parallelization of loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_parallelize_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1412] = */ {
    "-ftree-partial-pre",
    "In SSA-PRE optimization on trees, enable partial-partial redundancy elimination.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1412,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_partial_pre), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1413] = */ {
    "-ftree-phiprop",
    "Enable hoisting loads from conditional pointers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1413,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_phiprop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1414] = */ {
    "-ftree-pre",
    "Enable SSA-PRE optimization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1414,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_pre), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1415] = */ {
    "-ftree-pta",
    "Perform function-local points-to analysis on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1415,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_pta), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1416] = */ {
    "-ftree-reassoc",
    "Enable reassociation on tree level.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1416,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_reassoc), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1417] = */ {
    "-ftree-salias",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 12, /* .neg_idx = */ 1417,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1418] = */ {
    "-ftree-scev-cprop",
    "Enable copy propagation of scalar-evolution information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1418,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_scev_cprop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1419] = */ {
    "-ftree-sink",
    "Enable SSA code sinking on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1419,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_sink), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1420] = */ {
    "-ftree-slp-vectorize",
    "Enable basic block vectorization (SLP) on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1420,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_slp_vectorize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1421] = */ {
    "-ftree-slsr",
    "Perform straight-line strength reduction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1421,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_slsr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1422] = */ {
    "-ftree-sra",
    "Perform scalar replacement of aggregates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1422,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_sra), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1423] = */ {
    "-ftree-store-ccp",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 15, /* .neg_idx = */ 1423,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1424] = */ {
    "-ftree-store-copy-prop",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 21, /* .neg_idx = */ 1424,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1425] = */ {
    "-ftree-switch-conversion",
    "Perform conversions of switch initializations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ 1425,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_switch_conversion), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1426] = */ {
    "-ftree-tail-merge",
    "Enable tail merging on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1426,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_tail_merge), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1427] = */ {
    "-ftree-ter",
    "Replace temporary expressions in the SSA->normal pass.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1427,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_ter), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1428] = */ {
    "-ftree-vect-loop-version",
    "Does nothing. Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 23, /* .neg_idx = */ 1428,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1429] = */ {
    "-ftree-vectorize",
    "Enable vectorization on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1429,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_vectorize), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1430] = */ {
    "-ftree-vectorizer-verbose=",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1431] = */ {
    "-ftree-vrp",
    "Perform Value Range Propagation on trees.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1431,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_tree_vrp), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1432] = */ {
    "-ftrivial-auto-var-init=",
    "-ftrivial-auto-var-init=[uninitialized|pattern|zero]	Add initializations to automatic variables.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_auto_var_init), 1, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1433] = */ {
    "-funconstrained-commons",
    "Assume common declarations may be overridden with ones with a larger trailing array.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ 1433,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unconstrained_commons), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1434] = */ {
    "-funit-at-a-time",
    "Compile whole compilation unit at a time.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1434,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unit_at_a_time), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1435] = */ {
    "-funroll-all-loops",
    "Perform loop unrolling for all loops.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1435,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unroll_all_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1436] = */ {
    "-funroll-completely-grow-size",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1436,
    CL_UNDOCUMENTED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cunroll_grow_size), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1437] = */ {
    "-funroll-loops",
    "Perform loop unrolling when iteration count is known.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1437,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unroll_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1438] = */ {
    "-funsafe-loop-optimizations",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 26, /* .neg_idx = */ 1438,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1439] = */ {
    "-funsafe-math-optimizations",
    "Allow math optimizations that may violate IEEE or ISO standards.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1439,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unsafe_math_optimizations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1440] = */ {
    "-funsigned-bitfields",
    "When \"signed\" or \"unsigned\" is not given make the bitfield unsigned.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1440,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signed_bitfields), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1441] = */ {
    "-funsigned-char",
    "Make \"char\" unsigned by default.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1441,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_signed_char), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1442] = */ {
    "-funswitch-loops",
    "Perform loop unswitching.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1442,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unswitch_loops), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1443] = */ {
    "-funwind-tables",
    "Just generate unwind tables for exception handling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1443,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_unwind_tables), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1444] = */ {
    "-fuse-cxa-atexit",
    "Use __cxa_atexit to register destructors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1444,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_use_cxa_atexit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1445] = */ {
    "-fuse-cxa-get-exception-ptr",
    "Use __cxa_get_exception_ptr in exception handling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1445,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_use_cxa_get_exception_ptr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1446] = */ {
    "-fuse-ld=bfd",
    "Use the bfd linker instead of the default linker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1447,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1447] = */ {
    "-fuse-ld=gold",
    "Use the gold linker instead of the default linker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1446,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1448] = */ {
    "-fuse-ld=lld",
    "Use the lld LLVM linker instead of the default linker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1448,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1449] = */ {
    "-fuse-ld=mold",
    "Use the Modern linker (MOLD) linker instead of the default linker.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1449,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1450] = */ {
    "-fuse-linker-plugin",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1450,
    CL_COMMON | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_use_linker_plugin), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1451] = */ {
    "-fvar-tracking",
    "Perform variable tracking.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1451,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_var_tracking), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1452] = */ {
    "-fvar-tracking-assignments",
    "Perform variable tracking by annotating assignments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1452,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_var_tracking_assignments), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1453] = */ {
    "-fvar-tracking-assignments-toggle",
    "Toggle -fvar-tracking-assignments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 32, /* .neg_idx = */ 1453,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_var_tracking_assignments_toggle), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1454] = */ {
    "-fvar-tracking-uninit",
    "Perform variable tracking and also tag variables that are uninitialized.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1454,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_var_tracking_uninit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1455] = */ {
    "-fvariable-expansion-in-unroller",
    "Apply variable expansion when loops are unrolled.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 31, /* .neg_idx = */ 1455,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_variable_expansion_in_unroller), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1456] = */ {
    "-fvect-cost-model",
    "Enables the dynamic vectorizer cost model.  Preserved for backward compatibility.",
    NULL,
    NULL,
    "dynamic", "unlimited", OPT_fvect_cost_model_, N_OPTS, 16, /* .neg_idx = */ 1456,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1457] = */ {
    "-fvect-cost-model=",
    "-fvect-cost-model=[unlimited|dynamic|cheap|very-cheap]	Specifies the cost model for vectorization.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_vect_cost_model), 52, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1458] = */ {
    "-fverbose-asm",
    "Add extra commentary to assembler output.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1458,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_verbose_asm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1459] = */ {
    "-fversion",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT__version, N_OPTS, 8, /* .neg_idx = */ 1459,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1460] = */ {
    "-fversion-loops-for-strides",
    "Version loops based on whether indices have a stride of one.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1460,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_version_loops_for_strides), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1461] = */ {
    "-fvisibility-inlines-hidden",
    "Marks all inlined functions and methods as having hidden visibility.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1461,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1462] = */ {
    "-fvisibility-ms-compat",
    "Changes visibility to match Microsoft Visual Studio by default.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1462,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_visibility_ms_compat), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1463] = */ {
    "-fvisibility=",
    "-fvisibility=[default|internal|hidden|protected]	Set the default symbol visibility.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_default_visibility), 48, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1464] = */ {
    "-fvpt",
    "Use expression value profiles in optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1464,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_value_profile_transformations), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1465] = */ {
    "-fvtable-gc",
    "No longer supported.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 10, /* .neg_idx = */ 1465,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1466] = */ {
    "-fvtable-thunks",
    "No longer supported.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 14, /* .neg_idx = */ 1466,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1467] = */ {
    "-fvtable-verify=",
    "Validate vtable pointers before using them.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_vtable_verify), 54, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1468] = */ {
    "-fvtv-counts",
    "Output vtable verification counters.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1468,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_vtv_counts), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1469] = */ {
    "-fvtv-debug",
    "Output vtable verification pointer sets information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1469,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_vtv_debug), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1470] = */ {
    "-fweak",
    "Emit common-like symbols as weak symbols.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1470,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_weak), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1471] = */ {
    "-fweb",
    "Construct webs and split unrelated uses of single variable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1471,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_web), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1472] = */ {
    "-fwhole-program",
    "Perform whole program optimizations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1472,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_whole_program), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1473] = */ {
    "-fwide-exec-charset=",
    "-fwide-exec-charset=<cset>	Convert all wide strings and character constants to character set <cset>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1474] = */ {
    "-fworking-directory",
    "Generate a #line directive pointing at the current working directory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ 1474,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_working_directory), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1475] = */ {
    "-fwrapv",
    "Assume signed arithmetic overflow wraps around.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1475,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_wrapv), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1476] = */ {
    "-fwrapv-pointer",
    "Assume pointer overflow wraps around.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1476,
    CL_COMMON | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_wrapv_pointer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1477] = */ {
    "-fxref",
    "No longer supported.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 5, /* .neg_idx = */ 1477,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1478] = */ {
    "-fzee",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_ignore, N_OPTS, 4, /* .neg_idx = */ 1478,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1479] = */ {
    "-fzero-call-used-regs=",
    "Clear call-used registers upon function return.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1480] = */ {
    "-fzero-initialized-in-bss",
    "Put zero initialized data in the bss section.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 1480,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_zero_initialized_in_bss), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1481] = */ {
    "-fzero-link",
    "Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1481,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_zero_link), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1482] = */ {
    "-g",
    "Generate debug information in default format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1483] = */ {
    "-gas-loc-support",
    "Assume assembler support for (DWARF2+) .loc directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 15, /* .neg_idx = */ 1483,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf2out_as_loc_support), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1484] = */ {
    "-gas-locview-support",
    "Assume assembler support for view in (DWARF2+) .loc directives.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 19, /* .neg_idx = */ 1484,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf2out_as_locview_support), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1485] = */ {
    "-gbtf",
    "Generate BTF debug information at default level.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 4, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1486] = */ {
    "-gcoff",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, OPT_g, 5, /* .neg_idx = */ 1486,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1487] = */ {
    "-gcoff1",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, OPT_g, 6, /* .neg_idx = */ 1487,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1488] = */ {
    "-gcoff2",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, OPT_g, 6, /* .neg_idx = */ 1488,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1489] = */ {
    "-gcoff3",
    "Does nothing.  Preserved for backward compatibility.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, OPT_g, 6, /* .neg_idx = */ 1489,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1490] = */ {
    "-gcolumn-info",
    "Record DW_AT_decl_column and DW_AT_call_column in DWARF.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 12, /* .neg_idx = */ 1490,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_column_info), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1491] = */ {
    "-gctf",
    "Generate CTF debug information at default level.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 4, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1492] = */ {
    "-gdescribe-dies",
    "Add description attributes to some DWARF DIEs that have no name attribute.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 14, /* .neg_idx = */ 1492,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_describe_dies), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1493] = */ {
    "-gdwarf",
    "Generate debug information in default version of DWARF format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 6, /* .neg_idx = */ 1494,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1494] = */ {
    "-gdwarf-",
    "Generate debug information in DWARF v2 (or later) format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gdwarf, 7, /* .neg_idx = */ 1507,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_version), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1495] = */ {
    "-gdwarf32",
    "Use 32-bit DWARF format when emitting DWARF debug information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gdwarf, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_offset_size), 0, CLVC_EQUAL, 4, -1, -1 },
 /* [1496] = */ {
    "-gdwarf64",
    "Use 64-bit DWARF format when emitting DWARF debug information.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gdwarf, 8, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_offset_size), 0, CLVC_EQUAL, 8, -1, -1 },
 /* [1497] = */ {
    "-gen-decls",
    "Dump declarations to a .decl file.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 9, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gen_declaration), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1498] = */ {
    "-ggdb",
    "Generate debug information in default extended format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 4, /* .neg_idx = */ 1498,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1499] = */ {
    "-ggnu-pubnames",
    "Generate DWARF pubnames and pubtypes sections with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 13, /* .neg_idx = */ 1503,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_generate_pub_sections), 0, CLVC_EQUAL, 2, -1, -1 },
 /* [1500] = */ {
    "-ginline-points",
    "Generate extended entry point information for inlined functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 14, /* .neg_idx = */ 1500,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_inline_points), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1501] = */ {
    "-ginternal-reset-location-views",
    "Compute locview reset points based on insn length estimates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 30, /* .neg_idx = */ 1501,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_internal_reset_location_views), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1502] = */ {
    "-gno-",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 4, /* .neg_idx = */ -1,
    CL_JOINED | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1503] = */ {
    "-gno-pubnames",
    "Don't generate DWARF pubnames and pubtypes sections.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gno_, 12, /* .neg_idx = */ 1504,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_generate_pub_sections), 0, CLVC_EQUAL, 0, -1, -1 },
 /* [1504] = */ {
    "-gpubnames",
    "Generate DWARF pubnames and pubtypes sections.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 9, /* .neg_idx = */ 1499,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_generate_pub_sections), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1505] = */ {
    "-grecord-gcc-switches",
    "Record gcc command line switches in DWARF DW_AT_producer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 20, /* .neg_idx = */ 1505,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_record_gcc_switches), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1506] = */ {
    "-gsplit-dwarf",
    "Generate debug information in separate .dwo files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 12, /* .neg_idx = */ 1506,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_split_debug_info), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1507] = */ {
    "-gstabs",
    "Generate debug information in STABS format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 6, /* .neg_idx = */ 1508,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1508] = */ {
    "-gstabs+",
    "Generate debug information in extended STABS format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gstabs, 7, /* .neg_idx = */ 1514,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1509] = */ {
    "-gstatement-frontiers",
    "Emit progressive recommended breakpoint locations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 20, /* .neg_idx = */ 1509,
    CL_COMMON | CL_DRIVER | CL_OPTIMIZATION,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_nonbind_markers_p), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1510] = */ {
    "-gstrict-dwarf",
    "Don't emit DWARF additions beyond selected version.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 13, /* .neg_idx = */ 1510,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_dwarf_strict), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1511] = */ {
    "-gtoggle",
    "Toggle debug information generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 7, /* .neg_idx = */ 1511,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_gtoggle), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1512] = */ {
    "-gvariable-location-views",
    "Augment variable location lists with progressive views.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 24, /* .neg_idx = */ 1512,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_variable_location_views), 0, CLVC_EQUAL, 1, -1, -1 },
 /* [1513] = */ {
    "-gvariable-location-views=incompat5",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 34, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_debug_variable_location_views), 0, CLVC_EQUAL, -1, -1, -1 },
 /* [1514] = */ {
    "-gvms",
    "Generate debug information in VMS format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 4, /* .neg_idx = */ 1515,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1515] = */ {
    "-gxcoff",
    "Generate debug information in XCOFF format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 6, /* .neg_idx = */ 1516,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1516] = */ {
    "-gxcoff+",
    "Generate debug information in extended XCOFF format.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_gxcoff, 7, /* .neg_idx = */ 1493,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1517] = */ {
    "-gz",
    "Generate compressed debug sections.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 2, /* .neg_idx = */ 1517,
    CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1518] = */ {
    "-gz=",
    "-gz=<format>	Generate compressed debug sections in format <format>.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_g, 3, /* .neg_idx = */ -1,
    CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 5, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1519] = */ {
    "-h",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1520] = */ {
    "-idirafter",
    "-idirafter <dir>	Add <dir> to the end of the system include path.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1521] = */ {
    "-imacros",
    "-imacros <file>	Accept definition of macros in <file>.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1522] = */ {
    "-imultiarch",
    "-imultiarch <dir>	Set <dir> to be the multiarch include subdirectory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 1 /* RejectDriver */, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_imultiarch), 0, CLVC_STRING, 0, -1, -1 },
 /* [1523] = */ {
    "-imultilib",
    "-imultilib <dir>	Set <dir> to be the multilib include subdirectory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1524] = */ {
    "-include",
    "-include <file>	Include the contents of <file> before other files.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1525] = */ {
    "-iplugindir=",
    "-iplugindir=<dir>	Set <dir> to be the default plugin directory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_COMMON | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_plugindir_string), 0, CLVC_STRING, 0, -1, -1 },
 /* [1526] = */ {
    "-iprefix",
    "-iprefix <path>	Specify <path> as a prefix for next two options.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1527] = */ {
    "-iquote",
    "-iquote <dir>	Add <dir> to the end of the quote include path.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1528] = */ {
    "-isysroot",
    "-isysroot <dir>	Set <dir> to be the system root directory.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1529] = */ {
    "-isystem",
    "-isystem <dir>	Add <dir> to the start of the system include path.",
    "missing path after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1530] = */ {
    "-iwithprefix",
    "-iwithprefix <dir>	Add <dir> to the end of the system include path.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1531] = */ {
    "-iwithprefixbefore",
    "-iwithprefixbefore <dir>	Add <dir> to the end of the main include path.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_iwithprefix, 17, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1532] = */ {
    "-l",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1533] = */ {
    "-lang-asm",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_l, 8, /* .neg_idx = */ -1,
    CL_C | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 1 /* RejectDriver */, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1534] = */ {
    "-m128bit-long-double",
    "sizeof(long double) is 16.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_128BIT_LONG_DOUBLE, -1, -1 },
 /* [1535] = */ {
    "-m16",
    "Generate 16bit i386 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ 1536,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_CODE16, -1, -1 },
 /* [1536] = */ {
    "-m32",
    "Generate 32bit i386 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ 1539,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_CLEAR, OPTION_MASK_ISA_64BIT, -1, -1 },
 /* [1537] = */ {
    "-m3dnow",
    "Support 3DNow! built-in functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1537,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_3DNOW, -1, -1 },
 /* [1538] = */ {
    "-m3dnowa",
    "Support Athlon 3Dnow! built-in functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1538,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_3DNOW_A, -1, -1 },
 /* [1539] = */ {
    "-m64",
    "Generate 64bit x86-64 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ 1729,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ABI_64, -1, -1 },
 /* [1540] = */ {
    "-m80387",
    "Use hardware fp.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1540,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_80387, -1, -1 },
 /* [1541] = */ {
    "-m8bit-idiv",
    "Expand 32bit/64bit integer divide into 8bit unsigned integer divide with run-time check.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1541,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_USE_8BIT_IDIV, -1, -1 },
 /* [1542] = */ {
    "-m96bit-long-double",
    "sizeof(long double) is 12.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_128BIT_LONG_DOUBLE, -1, -1 },
 /* [1543] = */ {
    "-mabi=",
    "Generate code that conforms to the given ABI.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_abi), 2, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1544] = */ {
    "-mabm",
    "Support code generation of Advanced Bit Manipulation (ABM) instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1544,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_ABM, -1, -1 },
 /* [1545] = */ {
    "-maccumulate-outgoing-args",
    "Reserve space for outgoing arguments in the function prologue.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1545,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_ACCUMULATE_OUTGOING_ARGS, -1, -1 },
 /* [1546] = */ {
    "-maddress-mode=",
    "Use given address mode.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_pmode), 35, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1547] = */ {
    "-madx",
    "Support flag-preserving add-carry instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1547,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_ADX, -1, -1 },
 /* [1548] = */ {
    "-maes",
    "Support AES built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1548,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AES, -1, -1 },
 /* [1549] = */ {
    "-malign-data=",
    "Use the given data alignment.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_align_data_type), 26, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1550] = */ {
    "-malign-double",
    "Align some doubles on dword boundary.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1550,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_ALIGN_DOUBLE, -1, -1 },
 /* [1551] = */ {
    "-malign-functions=",
    "Function starts are aligned to this power of 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_malign_functions_), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1552] = */ {
    "-malign-jumps=",
    "Jump targets are aligned to this power of 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_malign_jumps_), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1553] = */ {
    "-malign-loops=",
    "Loop code aligned to this power of 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_malign_loops_), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1554] = */ {
    "-malign-stringops",
    "Align destination of the string operations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_NO_ALIGN_STRINGOPS, -1, -1 },
 /* [1555] = */ {
    "-mamx-bf16",
    "Support AMX-BF16 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1555,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AMX_BF16, -1, -1 },
 /* [1556] = */ {
    "-mamx-int8",
    "Support AMX-INT8 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1556,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AMX_INT8, -1, -1 },
 /* [1557] = */ {
    "-mamx-tile",
    "Support AMX-TILE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1557,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AMX_TILE, -1, -1 },
 /* [1558] = */ {
    "-masm=",
    "Use given assembler dialect.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_asm_dialect), 0, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1559] = */ {
    "-mavx",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1559,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX, -1, -1 },
 /* [1560] = */ {
    "-mavx2",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1560,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX2, -1, -1 },
 /* [1561] = */ {
    "-mavx256-split-unaligned-load",
    "Split 32-byte AVX unaligned load.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ 1561,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_AVX256_SPLIT_UNALIGNED_LOAD, -1, -1 },
 /* [1562] = */ {
    "-mavx256-split-unaligned-store",
    "Split 32-byte AVX unaligned store.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 1562,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_AVX256_SPLIT_UNALIGNED_STORE, -1, -1 },
 /* [1563] = */ {
    "-mavx5124fmaps",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124FMAPS built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1563,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVX5124FMAPS, -1, -1 },
 /* [1564] = */ {
    "-mavx5124vnniw",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1564,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVX5124VNNIW, -1, -1 },
 /* [1565] = */ {
    "-mavx512bf16",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BF16 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1565,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVX512BF16, -1, -1 },
 /* [1566] = */ {
    "-mavx512bitalg",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1566,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512BITALG, -1, -1 },
 /* [1567] = */ {
    "-mavx512bw",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512BW built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1567,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512BW, -1, -1 },
 /* [1568] = */ {
    "-mavx512cd",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512CD built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1568,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512CD, -1, -1 },
 /* [1569] = */ {
    "-mavx512dq",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512DQ built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1569,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512DQ, -1, -1 },
 /* [1570] = */ {
    "-mavx512er",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512ER built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1570,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512ER, -1, -1 },
 /* [1571] = */ {
    "-mavx512f",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1571,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512F, -1, -1 },
 /* [1572] = */ {
    "-mavx512fp16",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512FP16 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1572,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVX512FP16, -1, -1 },
 /* [1573] = */ {
    "-mavx512ifma",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1573,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512IFMA, -1, -1 },
 /* [1574] = */ {
    "-mavx512pf",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512PF built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1574,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512PF, -1, -1 },
 /* [1575] = */ {
    "-mavx512vbmi",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1575,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512VBMI, -1, -1 },
 /* [1576] = */ {
    "-mavx512vbmi2",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VBMI2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1576,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512VBMI2, -1, -1 },
 /* [1577] = */ {
    "-mavx512vl",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1577,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512VL, -1, -1 },
 /* [1578] = */ {
    "-mavx512vnni",
    "Support AVX512VNNI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1578,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512VNNI, -1, -1 },
 /* [1579] = */ {
    "-mavx512vp2intersect",
    "Support AVX512VP2INTERSECT built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1579,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVX512VP2INTERSECT, -1, -1 },
 /* [1580] = */ {
    "-mavx512vpopcntdq",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1580,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_AVX512VPOPCNTDQ, -1, -1 },
 /* [1581] = */ {
    "-mavxvnni",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and AVXVNNI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1581,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_AVXVNNI, -1, -1 },
 /* [1582] = */ {
    "-mbionic",
    "Use Bionic C library.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1617,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_linux_libc), 0, CLVC_EQUAL, LIBC_BIONIC, -1, -1 },
 /* [1583] = */ {
    "-mbmi",
    "Support BMI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1583,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_BMI, -1, -1 },
 /* [1584] = */ {
    "-mbmi2",
    "Support BMI2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1584,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_BMI2, -1, -1 },
 /* [1585] = */ {
    "-mbranch-cost=",
    "Branches are this expensive (arbitrary units).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_branch_cost), 0, CLVC_INTEGER, 0, 0, 5 },
 /* [1586] = */ {
    "-mcall-ms2sysv-xlogues",
    "Use libgcc stubs to save and restore registers clobbered by 64-bit Microsoft to System V ABI calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1586,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_CALL_MS2SYSV_XLOGUES, -1, -1 },
 /* [1587] = */ {
    "-mcet-switch",
    "Turn on CET instrumentation for switch statements that use a jump table and an indirect jump.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1587,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_cet_switch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1588] = */ {
    "-mcld",
    "Generate cld instruction in the function prologue.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1588,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_CLD, -1, -1 },
 /* [1589] = */ {
    "-mcldemote",
    "Support CLDEMOTE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1589,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_CLDEMOTE, -1, -1 },
 /* [1590] = */ {
    "-mclflushopt",
    "Support CLFLUSHOPT instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1590,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_CLFLUSHOPT, -1, -1 },
 /* [1591] = */ {
    "-mclwb",
    "Support CLWB instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1591,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_CLWB, -1, -1 },
 /* [1592] = */ {
    "-mclzero",
    "Support CLZERO built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1592,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_CLZERO, -1, -1 },
 /* [1593] = */ {
    "-mcmodel=",
    "Use given x86-64 code model.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_cmodel), 4, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1594] = */ {
    "-mcrc32",
    "Support code generation of crc32 instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1594,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_CRC32, -1, -1 },
 /* [1595] = */ {
    "-mcx16",
    "Support code generation of cmpxchg16b instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1595,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_CX16, -1, -1 },
 /* [1596] = */ {
    "-mdirect-extern-access",
    "Do not use GOT to access external symbols.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1596,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_direct_extern_access), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1597] = */ {
    "-mdispatch-scheduler",
    "Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4 or znver1 and Haifa scheduling is selected.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_dispatch_scheduler), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1598] = */ {
    "-mdump-tune-features",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_dump_tunes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1599] = */ {
    "-menqcmd",
    "Support ENQCMD built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1599,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_ENQCMD, -1, -1 },
 /* [1600] = */ {
    "-mf16c",
    "Support F16C built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1600,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_F16C, -1, -1 },
 /* [1601] = */ {
    "-mfancy-math-387",
    "Generate sin, cos, sqrt for FPU.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_NO_FANCY_MATH_387, -1, -1 },
 /* [1602] = */ {
    "-mfentry",
    "Emit profiling counter call at function entry before prologue.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1602,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_fentry), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1603] = */ {
    "-mfentry-name=",
    "Set name of __fentry__ symbol called at function entry.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_fentry_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [1604] = */ {
    "-mfentry-section=",
    "Set name of section to record mrecord-mcount calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_fentry_section), 0, CLVC_STRING, 0, -1, -1 },
 /* [1605] = */ {
    "-mfma",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1605,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_FMA, -1, -1 },
 /* [1606] = */ {
    "-mfma4",
    "Support FMA4 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1606,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_FMA4, -1, -1 },
 /* [1607] = */ {
    "-mforce-drap",
    "Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1607,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_force_drap), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1608] = */ {
    "-mforce-indirect-call",
    "Make all function calls indirect.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1608,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_force_indirect_call), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1609] = */ {
    "-mfp-ret-in-387",
    "Return values of functions in FPU registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1609,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_FLOAT_RETURNS, -1, -1 },
 /* [1610] = */ {
    "-mfpmath=",
    "Generate floating point mathematics using given instruction set.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_fpmath), 19, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1611] = */ {
    "-mfsgsbase",
    "Support FSGSBASE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1611,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_FSGSBASE, -1, -1 },
 /* [1612] = */ {
    "-mfunction-return=",
    "Convert function return to call and return thunk.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_function_return), 21, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1613] = */ {
    "-mfused-madd",
    NULL,
    NULL,
    "%<-mfused-madd%> is deprecated; use %<-ffp-contract=%> instead",
    "fast", "off", OPT_ffp_contract_, N_OPTS, 11, /* .neg_idx = */ 1613,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1614] = */ {
    "-mfxsr",
    "Support FXSAVE and FXRSTOR instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1614,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_FXSR, -1, -1 },
 /* [1615] = */ {
    "-mgeneral-regs-only",
    "Generate code which uses only the general registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_target_flags), 0, CLVC_BIT_SET, OPTION_MASK_GENERAL_REGS_ONLY, -1, -1 },
 /* [1616] = */ {
    "-mgfni",
    "Support GFNI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1616,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_GFNI, -1, -1 },
 /* [1617] = */ {
    "-mglibc",
    "Use GNU C library.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1719,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_linux_libc), 0, CLVC_EQUAL, LIBC_GLIBC, -1, -1 },
 /* [1618] = */ {
    "-mhard-float",
    "Use hardware fp.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_80387, -1, -1 },
 /* [1619] = */ {
    "-mharden-sls=",
    "Generate code to mitigate against straight line speculation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_harden_sls), 20, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1620] = */ {
    "-mhle",
    "Support Hardware Lock Elision prefixes.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1620,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_HLE, -1, -1 },
 /* [1621] = */ {
    "-mhreset",
    "Support HRESET built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1621,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_HRESET, -1, -1 },
 /* [1622] = */ {
    "-miamcu",
    "Generate code that conforms to Intel MCU psABI.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1622,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_IAMCU, -1, -1 },
 /* [1623] = */ {
    "-mieee-fp",
    "Use IEEE math for fp comparisons.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1623,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_IEEE_FP, -1, -1 },
 /* [1624] = */ {
    "-mincoming-stack-boundary=",
    "Assume incoming stack aligned to this power of 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_incoming_stack_boundary_arg), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1625] = */ {
    "-mindirect-branch-cs-prefix",
    "Add CS prefix to call and jmp to indirect thunk with branch target in r8-r15 registers.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ 1625,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_indirect_branch_cs_prefix), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1626] = */ {
    "-mindirect-branch-register",
    "Force indirect call and jump via register.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 25, /* .neg_idx = */ 1626,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_indirect_branch_register), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1627] = */ {
    "-mindirect-branch=",
    "Convert indirect call and jump to call and return thunks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_indirect_branch), 21, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1628] = */ {
    "-minline-all-stringops",
    "Inline all known string operations.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ 1628,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_INLINE_ALL_STRINGOPS, -1, -1 },
 /* [1629] = */ {
    "-minline-stringops-dynamically",
    "Inline memset/memcpy string operations, but perform inline version only for small blocks.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 29, /* .neg_idx = */ 1629,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_INLINE_STRINGOPS_DYNAMICALLY, -1, -1 },
 /* [1630] = */ {
    "-minstrument-return=",
    "Instrument function exit in instrumented functions with __fentry__.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_instrument_return), 22, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1631] = */ {
    "-mintel-syntax",
    NULL,
    NULL,
    "%<-mintel-syntax%> and %<-mno-intel-syntax%> are deprecated; use %<-masm=intel%> and %<-masm=att%> instead",
    "intel", "att", OPT_masm_, N_OPTS, 13, /* .neg_idx = */ 1631,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1632] = */ {
    "-mkl",
    "Support KL built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ 1632,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_KL, -1, -1 },
 /* [1633] = */ {
    "-mlarge-data-threshold=",
    "-mlarge-data-threshold=<number>	Data greater than given threshold will go into .ldata section in x86-64 medium model.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_section_threshold), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1634] = */ {
    "-mlong-double-128",
    "Use 128-bit long double.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1636,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_LONG_DOUBLE_128, -1, -1 },
 /* [1635] = */ {
    "-mlong-double-64",
    "Use 64-bit long double.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1634,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_LONG_DOUBLE_64, -1, -1 },
 /* [1636] = */ {
    "-mlong-double-80",
    "Use 80-bit long double.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1635,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_LONG_DOUBLE_64, -1, -1 },
 /* [1637] = */ {
    "-mlwp",
    "Support LWP built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1637,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_LWP, -1, -1 },
 /* [1638] = */ {
    "-mlzcnt",
    "Support LZCNT built-in function and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1638,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_LZCNT, -1, -1 },
 /* [1639] = */ {
    "-mmanual-endbr",
    "Insert ENDBR instruction at function entry only via cf_check attribute for CET instrumentation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1639,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_manual_endbr), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1640] = */ {
    "-mmemcpy-strategy=",
    "Specify memcpy expansion strategy when expected size is known.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_tune_memcpy_strategy), 0, CLVC_STRING, 0, -1, -1 },
 /* [1641] = */ {
    "-mmemset-strategy=",
    "Specify memset expansion strategy when expected size is known.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_tune_memset_strategy), 0, CLVC_STRING, 0, -1, -1 },
 /* [1642] = */ {
    "-mmitigate-rop",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 13, /* .neg_idx = */ 1642,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mmitigate_rop), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1643] = */ {
    "-mmmx",
    "Support MMX built-in functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1643,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_MMX, -1, -1 },
 /* [1644] = */ {
    "-mmovbe",
    "Support code generation of movbe instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1644,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_MOVBE, -1, -1 },
 /* [1645] = */ {
    "-mmovdir64b",
    "Support MOVDIR64B built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1645,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_MOVDIR64B, -1, -1 },
 /* [1646] = */ {
    "-mmovdiri",
    "Support MOVDIRI built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1646,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_MOVDIRI, -1, -1 },
 /* [1647] = */ {
    "-mmove-max=",
    "Maximum number of bits that can be moved from memory to memory efficiently.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_move_max), 36, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1648] = */ {
    "-mmpx",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 4, /* .neg_idx = */ 1648,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mmpx), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1649] = */ {
    "-mms-bitfields",
    "Use native (MS) bitfield layout.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1649,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_MS_BITFIELD_LAYOUT, -1, -1 },
 /* [1650] = */ {
    "-mmusl",
    "Use musl C library.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1582,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_linux_libc), 0, CLVC_EQUAL, LIBC_MUSL, -1, -1 },
 /* [1651] = */ {
    "-mmwait",
    "Support MWAIT and MONITOR built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1651,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_MWAIT, -1, -1 },
 /* [1652] = */ {
    "-mmwaitx",
    "Support MWAITX and MONITORX built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1652,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_MWAITX, -1, -1 },
 /* [1653] = */ {
    "-mneeded",
    "Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1653,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_needed), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1654] = */ {
    "-mno-align-stringops",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ -1,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_NO_ALIGN_STRINGOPS, -1, -1 },
 /* [1655] = */ {
    "-mno-default",
    "Clear all tune features.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_tune_no_default), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1656] = */ {
    "-mno-fancy-math-387",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_NO_FANCY_MATH_387, -1, -1 },
 /* [1657] = */ {
    "-mno-push-args",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_NO_PUSH_ARGS, -1, -1 },
 /* [1658] = */ {
    "-mno-red-zone",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_NO_RED_ZONE, -1, -1 },
 /* [1659] = */ {
    "-mno-sse4",
    "Do not support SSE4.1 and SSE4.2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_CLEAR, OPTION_MASK_ISA_SSE4_1, -1, -1 },
 /* [1660] = */ {
    "-mnop-mcount",
    "Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1660,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_nop_mcount), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1661] = */ {
    "-momit-leaf-frame-pointer",
    "Omit the frame pointer in leaf functions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ 1661,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_OMIT_LEAF_FRAME_POINTER, -1, -1 },
 /* [1662] = */ {
    "-mpc32",
    "Set 80387 floating-point precision to 32-bit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mpc32), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1663] = */ {
    "-mpc64",
    "Set 80387 floating-point precision to 64-bit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mpc64), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1664] = */ {
    "-mpc80",
    "Set 80387 floating-point precision to 80-bit.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mpc80), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1665] = */ {
    "-mpclmul",
    "Support PCLMUL built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1665,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_PCLMUL, -1, -1 },
 /* [1666] = */ {
    "-mpcommit",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 8, /* .neg_idx = */ 1666,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_VAR_mpcommit), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1667] = */ {
    "-mpconfig",
    "Support PCONFIG built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1667,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_PCONFIG, -1, -1 },
 /* [1668] = */ {
    "-mpku",
    "Support PKU built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1668,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_PKU, -1, -1 },
 /* [1669] = */ {
    "-mpopcnt",
    "Support code generation of popcnt instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1669,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_POPCNT, -1, -1 },
 /* [1670] = */ {
    "-mprefer-avx128",
    "Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.",
    NULL,
    NULL,
    "128", "256", OPT_mprefer_vector_width_, N_OPTS, 14, /* .neg_idx = */ 1670,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1671] = */ {
    "-mprefer-vector-width=",
    "Use given register vector width instructions instead of maximum register width in the auto-vectorizer.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_prefer_vector_width_type), 36, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1672] = */ {
    "-mpreferred-stack-boundary=",
    "Attempt to keep stack aligned to this power of 2.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 26, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_preferred_stack_boundary_arg), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1673] = */ {
    "-mprefetchwt1",
    "Support PREFETCHWT1 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ 1673,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_PREFETCHWT1, -1, -1 },
 /* [1674] = */ {
    "-mprfchw",
    "Support PREFETCHW instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1674,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_PRFCHW, -1, -1 },
 /* [1675] = */ {
    "-mptwrite",
    "Support PTWRITE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1675,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_PTWRITE, -1, -1 },
 /* [1676] = */ {
    "-mpush-args",
    "Use push instructions to save outgoing arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1676,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_NO_PUSH_ARGS, -1, -1 },
 /* [1677] = */ {
    "-mrdpid",
    "Support RDPID built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1677,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_RDPID, -1, -1 },
 /* [1678] = */ {
    "-mrdrnd",
    "Support RDRND built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1678,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_RDRND, -1, -1 },
 /* [1679] = */ {
    "-mrdseed",
    "Support RDSEED instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1679,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_RDSEED, -1, -1 },
 /* [1680] = */ {
    "-mrecip",
    "Generate reciprocals instead of divss and sqrtss.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1680,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_RECIP, -1, -1 },
 /* [1681] = */ {
    "-mrecip=",
    "Control generation of reciprocal estimates.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_recip_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [1682] = */ {
    "-mrecord-mcount",
    "Generate __mcount_loc section with all mcount or __fentry__ calls.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1682,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_record_mcount), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1683] = */ {
    "-mrecord-return",
    "Generate a __return_loc section pointing to all return instrumentation code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ 1683,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_flag_record_return), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1684] = */ {
    "-mred-zone",
    "Use red-zone in the x86-64 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_NO_RED_ZONE, -1, -1 },
 /* [1685] = */ {
    "-mregparm=",
    "Number of registers used to pass integer arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 1 /* UInteger */, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_regparm), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1686] = */ {
    "-mrelax-cmpxchg-loop",
    "Relax cmpxchg loop for atomic_fetch_{or,xor,and,nand} by adding load and cmp before cmpxchg, execute pause and loop back to load and compare if load value is not expected.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 19, /* .neg_idx = */ 1686,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_RELAX_CMPXCHG_LOOP, -1, -1 },
 /* [1687] = */ {
    "-mrtd",
    "Alternate calling convention.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1687,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_RTD, -1, -1 },
 /* [1688] = */ {
    "-mrtm",
    "Support RTM built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1688,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_RTM, -1, -1 },
 /* [1689] = */ {
    "-msahf",
    "Support code generation of sahf instruction in 64bit x86-64 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1689,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SAHF, -1, -1 },
 /* [1690] = */ {
    "-mserialize",
    "Support SERIALIZE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1690,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_SERIALIZE, -1, -1 },
 /* [1691] = */ {
    "-msgx",
    "Support SGX built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1691,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_SGX, -1, -1 },
 /* [1692] = */ {
    "-msha",
    "Support SHA1 and SHA256 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1692,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SHA, -1, -1 },
 /* [1693] = */ {
    "-mshstk",
    "Enable shadow stack built-in functions from Control-flow Enforcement Technology (CET).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1693,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SHSTK, -1, -1 },
 /* [1694] = */ {
    "-mskip-rax-setup",
    "Skip setting up RAX register when passing variable arguments.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ 1694,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_skip_rax_setup), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1695] = */ {
    "-msoft-float",
    "Do not use hardware fp.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1695,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_CLEAR, MASK_80387, -1, -1 },
 /* [1696] = */ {
    "-msse",
    "Support MMX and SSE built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1696,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE, -1, -1 },
 /* [1697] = */ {
    "-msse2",
    "Support MMX, SSE and SSE2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1697,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE2, -1, -1 },
 /* [1698] = */ {
    "-msse2avx",
    "Encode SSE instructions with VEX prefix.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1698,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_sse2avx), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1699] = */ {
    "-msse3",
    "Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1699,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE3, -1, -1 },
 /* [1700] = */ {
    "-msse4",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE4_2, -1, -1 },
 /* [1701] = */ {
    "-msse4.1",
    "Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1701,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE4_1, -1, -1 },
 /* [1702] = */ {
    "-msse4.2",
    "Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1702,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE4_2, -1, -1 },
 /* [1703] = */ {
    "-msse4a",
    "Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1703,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSE4A, -1, -1 },
 /* [1704] = */ {
    "-msse5",
    NULL,
    NULL,
    "%<-msse5%> was removed",
    NULL, NULL, OPT_mavx, N_OPTS, 5, /* .neg_idx = */ 1704,
    CL_TARGET | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1705] = */ {
    "-msseregparm",
    "Use SSE register passing conventions for SF and DF mode.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_SSEREGPARM, -1, -1 },
 /* [1706] = */ {
    "-mssse3",
    "Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1706,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_SSSE3, -1, -1 },
 /* [1707] = */ {
    "-mstack-arg-probe",
    "Enable stack probing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ 1707,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_STACK_PROBE, -1, -1 },
 /* [1708] = */ {
    "-mstack-protector-guard-offset=",
    "Use the given offset for addressing the stack-protector guard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_stack_protector_guard_offset_str), 0, CLVC_STRING, 0, -1, -1 },
 /* [1709] = */ {
    "-mstack-protector-guard-reg=",
    "Use the given base register for addressing the stack-protector guard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 27, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_stack_protector_guard_reg_str), 0, CLVC_STRING, 0, -1, -1 },
 /* [1710] = */ {
    "-mstack-protector-guard-symbol=",
    "Use the given symbol for addressing the stack-protector guard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 30, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_stack_protector_guard_symbol_str), 0, CLVC_STRING, 0, -1, -1 },
 /* [1711] = */ {
    "-mstack-protector-guard=",
    "Use given stack-protector guard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_stack_protector_guard), 43, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1712] = */ {
    "-mstackrealign",
    "Realign stack in prologue.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ 1712,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_force_align_arg_pointer), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1713] = */ {
    "-mstore-max=",
    "Maximum number of bits that can be stored to memory efficiently.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_store_max), 36, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1714] = */ {
    "-mstv",
    "Disable Scalar to Vector optimization pass transforming 64-bit integer computations into a vector ones.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1714,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_STV, -1, -1 },
 /* [1715] = */ {
    "-mtbm",
    "Support TBM built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1715,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_TBM, -1, -1 },
 /* [1716] = */ {
    "-mtls-dialect=",
    "Use given thread-local storage dialect.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_tls_dialect), 50, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1717] = */ {
    "-mtls-direct-seg-refs",
    "Use direct references against %gs when accessing tls data.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 20, /* .neg_idx = */ 1717,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_TLS_DIRECT_SEG_REFS, -1, -1 },
 /* [1718] = */ {
    "-mtsxldtrk",
    "Support TSXLDTRK built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1718,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_TSXLDTRK, -1, -1 },
 /* [1719] = */ {
    "-muclibc",
    "Use uClibc C library.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1650,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_linux_libc), 0, CLVC_EQUAL, LIBC_UCLIBC, -1, -1 },
 /* [1720] = */ {
    "-muintr",
    "Support UINTR built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1720,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_UINTR, -1, -1 },
 /* [1721] = */ {
    "-mvaes",
    "Support VAES built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ 1721,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_VAES, -1, -1 },
 /* [1722] = */ {
    "-mveclibabi=",
    "Vector library ABI to use.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_TARGET | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_ix86_veclibabi_type), 27, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1723] = */ {
    "-mvect8-ret-in-mem",
    "Return 8-byte vectors in memory.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ 1723,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_VECT8_RETURNS, -1, -1 },
 /* [1724] = */ {
    "-mvpclmulqdq",
    "Support VPCLMULQDQ built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1724,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_VPCLMULQDQ, -1, -1 },
 /* [1725] = */ {
    "-mvzeroupper",
    "Generate vzeroupper instruction before a transfer of control flow out of the function.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ 1725,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_target_flags), 0, CLVC_BIT_SET, MASK_VZEROUPPER, -1, -1 },
 /* [1726] = */ {
    "-mwaitpkg",
    "Support WAITPKG built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ 1726,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_WAITPKG, -1, -1 },
 /* [1727] = */ {
    "-mwbnoinvd",
    "Support WBNOINVD built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1727,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_WBNOINVD, -1, -1 },
 /* [1728] = */ {
    "-mwidekl",
    "Support WIDEKL built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1728,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags2), 0, CLVC_BIT_SET, OPTION_MASK_ISA2_WIDEKL, -1, -1 },
 /* [1729] = */ {
    "-mx32",
    "Generate 32bit x86-64 code.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1535,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ABI_X32, -1, -1 },
 /* [1730] = */ {
    "-mxop",
    "Support XOP built-in functions and code generation.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ 1730,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_XOP, -1, -1 },
 /* [1731] = */ {
    "-mxsave",
    "Support XSAVE and XRSTOR instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1731,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_XSAVE, -1, -1 },
 /* [1732] = */ {
    "-mxsavec",
    "Support XSAVEC instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1732,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_XSAVEC, -1, -1 },
 /* [1733] = */ {
    "-mxsaveopt",
    "Support XSAVEOPT instruction.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ 1733,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_XSAVEOPT, -1, -1 },
 /* [1734] = */ {
    "-mxsaves",
    "Support XSAVES and XRSTORS instructions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ 1734,
    CL_TARGET,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 /* Host_Wide_Int */, 0, 0,
    offsetof (struct gcc_options, x_ix86_isa_flags), 0, CLVC_BIT_SET, OPTION_MASK_ISA_XSAVES, -1, -1 },
 /* [1735] = */ {
    "-n",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1736] = */ {
    "-no-canonical-prefixes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1737] = */ {
    "-no-integrated-cpp",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1738] = */ {
    "-no-pie",
    "Don't create a dynamically linked position independent executable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1774,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1739] = */ {
    "-nodefaultlibs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1740] = */ {
    "-nolibc",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1741] = */ {
    "-nostartfiles",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1742] = */ {
    "-nostdinc",
    "Do not search standard system include directories (those specified with -isystem will still be used).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1743] = */ {
    "-nostdinc++",
    "Do not search standard system include directories for C++.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1744] = */ {
    "-nostdlib",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1745] = */ {
    "-o",
    "-o <file>	Place output into <file>.",
    "missing filename after %qs",
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_COMMON | CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_asm_file_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [1746] = */ {
    "-p",
    "Enable function profiling.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_profile_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1747] = */ {
    "-pass-exit-codes",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_pass_exit_codes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1748] = */ {
    "-pedantic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_Wpedantic, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1749] = */ {
    "-pedantic-errors",
    "Like -pedantic but issue them as errors.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_pedantic_errors), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1750] = */ {
    "-pg",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 2, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1751] = */ {
    "-pie",
    "Create a dynamically linked position independent executable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 3, /* .neg_idx = */ 1738,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1752] = */ {
    "-pipe",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_use_pipes), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1753] = */ {
    "-posix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1754] = */ {
    "-print-file-name=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_file_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [1755] = */ {
    "-print-libgcc-file-name",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 22, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1756] = */ {
    "-print-multi-directory",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_multi_directory), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1757] = */ {
    "-print-multi-lib",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_multi_lib), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1758] = */ {
    "-print-multi-os-directory",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 24, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_multi_os_directory), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1759] = */ {
    "-print-multiarch",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_multiarch), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1760] = */ {
    "-print-objc-runtime-info",
    "Generate C header of platform-specific features.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 23, /* .neg_idx = */ -1,
    CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1761] = */ {
    "-print-prog-name=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_prog_name), 0, CLVC_STRING, 0, -1, -1 },
 /* [1762] = */ {
    "-print-search-dirs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 17, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_search_dirs), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1763] = */ {
    "-print-sysroot",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_sysroot), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1764] = */ {
    "-print-sysroot-headers-suffix",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 28, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_print_sysroot_headers_suffix), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1765] = */ {
    "-profile",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1766] = */ {
    "-pthread",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1767] = */ {
    "-quiet",
    "Do not display functions compiled or elapsed time.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 1 /* RejectDriver */, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_quiet_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1768] = */ {
    "-r",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1769] = */ {
    "-rdynamic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1770] = */ {
    "-remap",
    "Remap file names when including files.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1771] = */ {
    "-s",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1772] = */ {
    "-save-temps",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1773] = */ {
    "-save-temps=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1774] = */ {
    "-shared",
    "Create a shared library.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ 1791,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1775] = */ {
    "-shared-libgcc",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1776] = */ {
    "-specs",
    NULL,
    NULL,
    NULL,
    NULL, NULL, OPT_specs_, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1777] = */ {
    "-specs=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1778] = */ {
    "-static",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 6, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1779] = */ {
    "-static-libasan",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1780] = */ {
    "-static-libgcc",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1781] = */ {
    "-static-libgfortran",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1782] = */ {
    "-static-libgo",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 12, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1783] = */ {
    "-static-libhwasan",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1784] = */ {
    "-static-liblsan",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1785] = */ {
    "-static-libmpx",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 13, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1786] = */ {
    "-static-libmpxwrappers",
    "Removed in GCC 9.  This switch has no effect.",
    NULL,
    NULL,
    NULL, NULL, OPT_SPECIAL_warn_removed, N_OPTS, 21, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1787] = */ {
    "-static-libphobos",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1788] = */ {
    "-static-libstdc++",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1789] = */ {
    "-static-libtsan",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 14, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1790] = */ {
    "-static-libubsan",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1791] = */ {
    "-static-pie",
    "Create a static position independent executable.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 10, /* .neg_idx = */ 1751,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1792] = */ {
    "-std=c++03",
    "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__98, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1793] = */ {
    "-std=c++0x",
    "Deprecated in favor of -std=c++11.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__11, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1794] = */ {
    "-std=c++11",
    "Conform to the ISO 2011 C++ standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1795] = */ {
    "-std=c++14",
    "Conform to the ISO 2014 C++ standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1796] = */ {
    "-std=c++17",
    "Conform to the ISO 2017 C++ standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1797] = */ {
    "-std=c++1y",
    "Deprecated in favor of -std=c++14.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__14, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1798] = */ {
    "-std=c++1z",
    "Deprecated in favor of -std=c++17.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__17, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1799] = */ {
    "-std=c++20",
    "Conform to the ISO 2020 C++ standard (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1800] = */ {
    "-std=c++23",
    "Conform to the ISO 2023 C++ draft standard (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1801] = */ {
    "-std=c++2a",
    "Conform to the ISO 2020 C++ standard (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__20, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1802] = */ {
    "-std=c++2b",
    "Conform to the ISO 2023 C++ draft standard (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c__23, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1803] = */ {
    "-std=c++98",
    "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1804] = */ {
    "-std=c11",
    "Conform to the ISO 2011 C standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1805] = */ {
    "-std=c17",
    "Conform to the ISO 2017 C standard (published in 2018).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1806] = */ {
    "-std=c18",
    "Conform to the ISO 2017 C standard (published in 2018).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c17, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1807] = */ {
    "-std=c1x",
    "Deprecated in favor of -std=c11.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c11, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1808] = */ {
    "-std=c2x",
    "Conform to the ISO 202X C standard draft (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1809] = */ {
    "-std=c89",
    "Conform to the ISO 1990 C standard.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c90, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1810] = */ {
    "-std=c90",
    "Conform to the ISO 1990 C standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1811] = */ {
    "-std=c99",
    "Conform to the ISO 1999 C standard.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1812] = */ {
    "-std=c9x",
    "Deprecated in favor of -std=c99.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c99, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1813] = */ {
    "-std=gnu++03",
    "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__98, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1814] = */ {
    "-std=gnu++0x",
    "Deprecated in favor of -std=gnu++11.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__11, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1815] = */ {
    "-std=gnu++11",
    "Conform to the ISO 2011 C++ standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1816] = */ {
    "-std=gnu++14",
    "Conform to the ISO 2014 C++ standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1817] = */ {
    "-std=gnu++17",
    "Conform to the ISO 2017 C++ standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1818] = */ {
    "-std=gnu++1y",
    "Deprecated in favor of -std=gnu++14.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__14, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1819] = */ {
    "-std=gnu++1z",
    "Deprecated in favor of -std=gnu++17.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__17, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1820] = */ {
    "-std=gnu++20",
    "Conform to the ISO 2020 C++ standard with GNU extensions (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1821] = */ {
    "-std=gnu++23",
    "Conform to the ISO 2023 C++ draft standard with GNU extensions (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1822] = */ {
    "-std=gnu++2a",
    "Conform to the ISO 2020 C++ standard with GNU extensions (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__20, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX | CL_UNDOCUMENTED,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1823] = */ {
    "-std=gnu++2b",
    "Conform to the ISO 2023 C++ draft standard with GNU extensions (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu__23, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1824] = */ {
    "-std=gnu++98",
    "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_CXX | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1825] = */ {
    "-std=gnu11",
    "Conform to the ISO 2011 C standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1826] = */ {
    "-std=gnu17",
    "Conform to the ISO 2017 C standard (published in 2018) with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1827] = */ {
    "-std=gnu18",
    "Conform to the ISO 2017 C standard (published in 2018) with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu17, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1828] = */ {
    "-std=gnu1x",
    "Deprecated in favor of -std=gnu11.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu11, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1829] = */ {
    "-std=gnu2x",
    "Conform to the ISO 202X C standard draft with GNU extensions (experimental and incomplete support).",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1830] = */ {
    "-std=gnu89",
    "Conform to the ISO 1990 C standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu90, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1831] = */ {
    "-std=gnu90",
    "Conform to the ISO 1990 C standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1832] = */ {
    "-std=gnu99",
    "Conform to the ISO 1999 C standard with GNU extensions.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1833] = */ {
    "-std=gnu9x",
    "Deprecated in favor of -std=gnu99.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_gnu99, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1834] = */ {
    "-std=iso9899:1990",
    "Conform to the ISO 1990 C standard.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c90, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1835] = */ {
    "-std=iso9899:199409",
    "Conform to the ISO 1990 C standard as amended in 1994.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 18, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1836] = */ {
    "-std=iso9899:1999",
    "Conform to the ISO 1999 C standard.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c99, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1837] = */ {
    "-std=iso9899:199x",
    "Deprecated in favor of -std=iso9899:1999.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c99, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1838] = */ {
    "-std=iso9899:2011",
    "Conform to the ISO 2011 C standard.",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c11, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1839] = */ {
    "-std=iso9899:2017",
    "Conform to the ISO 2017 C standard (published in 2018).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c17, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1840] = */ {
    "-std=iso9899:2018",
    "Conform to the ISO 2017 C standard (published in 2018).",
    NULL,
    NULL,
    NULL, NULL, OPT_std_c17, N_OPTS, 16, /* .neg_idx = */ -1,
    CL_C | CL_ObjC,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1841] = */ {
    "-stdlib=",
    "-stdlib=[libstdc++|libc++]	The standard library to be used for C++ headers and runtime.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
#if ENABLE_STDLIB_OPTION
    CL_CXX | CL_ObjCXX | CL_COMMON | CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 1 /* RejectNegative */, 0, 0, 0, 0, 0,
#else
    0,
    1 /* Disabled.  */, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#endif
    offsetof (struct gcc_options, x_flag_stdlib_kind), 45, CLVC_ENUM, CLEV_NORMAL, -1, -1 },
 /* [1842] = */ {
    "-symbolic",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 8, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1843] = */ {
    "-t",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1844] = */ {
    "-time",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 4, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_report_times), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1845] = */ {
    "-time=",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 5, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED,
    0, 0, 0, 0, 0, 0, 0, 1 /* JoinedOrMissing */, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1846] = */ {
    "-traditional",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 11, /* .neg_idx = */ -1,
    CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1847] = */ {
    "-traditional-cpp",
    "Enable traditional preprocessing.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 15, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1848] = */ {
    "-trigraphs",
    "-trigraphs	Support ISO C trigraphs.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 9, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1849] = */ {
    "-u",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1850] = */ {
    "-undef",
    "Do not predefine system-specific and GCC-specific macros.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, OPT_u, 5, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_flag_undef), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1851] = */ {
    "-v",
    "Enable verbose output.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON | CL_DRIVER,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_verbose_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1852] = */ {
    "-version",
    "Display the compiler's version.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_COMMON,
    0, 0, 0, 0, 0, 1 /* RejectDriver */, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_version_flag), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1853] = */ {
    "-w",
    "Suppress warnings.",
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_C | CL_CXX | CL_ObjC | CL_ObjCXX | CL_COMMON,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_inhibit_warnings), 0, CLVC_INTEGER, 0, -1, -1 },
 /* [1854] = */ {
    "-wrapper",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 7, /* .neg_idx = */ -1,
    CL_DRIVER | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    offsetof (struct gcc_options, x_wrapper_string), 0, CLVC_STRING, 0, -1, -1 },
 /* [1855] = */ {
    "-x",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 },
 /* [1856] = */ {
    "-z",
    NULL,
    NULL,
    NULL,
    NULL, NULL, N_OPTS, N_OPTS, 1, /* .neg_idx = */ -1,
    CL_DRIVER | CL_JOINED | CL_SEPARATE,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    (unsigned short) -1, 0, CLVC_STRING, 0, -1, -1 }
};



bool                                                                  
common_handle_option_auto (struct gcc_options *opts,                  
                           struct gcc_options *opts_set,              
                           const struct cl_decoded_option *decoded,   
                           unsigned int lang_mask, int kind,          
                           location_t loc,                            
                           const struct cl_option_handlers *handlers, 
                           diagnostic_context *dc)                    
{                                                                     
  size_t scode = decoded->opt_index;                                  
  HOST_WIDE_INT value = decoded->value;                               
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  gcc_assert (decoded->canonical_option_num_elements <= 2);           
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT_Wextra:
      if (!opts_set->x_warn_absolute_value)
        handle_generated_option (opts, opts_set,
                                 OPT_Wabsolute_value, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cast_function_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcast_function_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_clobbered)
        handle_generated_option (opts, opts_set,
                                 OPT_Wclobbered, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_empty_body)
        handle_generated_option (opts, opts_set,
                                 OPT_Wempty_body, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_expansion_to_defined)
        handle_generated_option (opts, opts_set,
                                 OPT_Wexpansion_to_defined, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_ignored_qualifiers)
        handle_generated_option (opts, opts_set,
                                 OPT_Wignored_qualifiers, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_field_initializers)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_field_initializers, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_parameter_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_parameter_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_old_style_declaration)
        handle_generated_option (opts, opts_set,
                                 OPT_Wold_style_declaration, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_override_init)
        handle_generated_option (opts, opts_set,
                                 OPT_Woverride_init, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sign_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsign_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sized_deallocation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsized_deallocation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_type_limits)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtype_limits, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_but_set_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_but_set_parameter, NULL, (opts->x_warn_unused && opts->x_extra_warnings),
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_parameter, NULL, (opts->x_warn_unused && opts->x_extra_warnings),
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wpedantic:
      if (!opts_set->x_cpp_warn_expansion_to_defined)
        handle_generated_option (opts, opts_set,
                                 OPT_Wexpansion_to_defined, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wuninitialized:
      if (!opts_set->x_warn_maybe_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmaybe_uninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wshadow:
      if (!opts_set->x_warn_shadow_ivar)
        handle_generated_option (opts, opts_set,
                                 OPT_Wshadow_ivar, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_shadow_local)
        handle_generated_option (opts, opts_set,
                                 OPT_Wshadow_local, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wshadow_local:
      if (!opts_set->x_warn_shadow_compatible_local)
        handle_generated_option (opts, opts_set,
                                 OPT_Wshadow_compatible_local, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused:
      if (!opts_set->x_warn_unused_but_set_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_but_set_parameter, NULL, (opts->x_warn_unused && opts->x_extra_warnings),
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_but_set_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_but_set_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_function)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_function, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_label)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_label, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_local_typedefs)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_local_typedefs, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_parameter, NULL, (opts->x_warn_unused && opts->x_extra_warnings),
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_value)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_value, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_fnon_call_exceptions:
      if (!opts_set->x_flag_exceptions)
        handle_generated_option (opts, opts_set,
                                 OPT_fexceptions, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_funroll_loops:
      if (!opts_set->x_flag_rename_registers)
        handle_generated_option (opts, opts_set,
                                 OPT_frename_registers, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_flag_web)
        handle_generated_option (opts, opts_set,
                                 OPT_fweb, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_ftree_vectorize:
      if (!opts_set->x_flag_tree_loop_vectorize)
        handle_generated_option (opts, opts_set,
                                 OPT_ftree_loop_vectorize, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_flag_tree_slp_vectorize)
        handle_generated_option (opts, opts_set,
                                 OPT_ftree_slp_vectorize, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_funroll_all_loops:
      if (!opts_set->x_flag_unroll_loops)
        handle_generated_option (opts, opts_set,
                                 OPT_funroll_loops, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_fvar_tracking_uninit:
      if (!opts_set->x_flag_var_tracking)
        handle_generated_option (opts, opts_set,
                                 OPT_fvar_tracking, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    default:    
      break;    
    }           
  return true;  
}               



bool                                                                  
C_handle_option_auto (struct gcc_options *opts ATTRIBUTE_UNUSED,              
                           struct gcc_options *opts_set ATTRIBUTE_UNUSED,              
                           size_t scode ATTRIBUTE_UNUSED, const char *arg ATTRIBUTE_UNUSED, HOST_WIDE_INT value ATTRIBUTE_UNUSED,  
                           unsigned int lang_mask ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,          
                           location_t loc ATTRIBUTE_UNUSED,                            
                           const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED, 
                           diagnostic_context *dc ATTRIBUTE_UNUSED)                    
{                                                                     
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT_Wall:
      if (!opts_set->x_warn_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Waddress, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_bounds_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_parameter_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_op)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_operation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_char_subscripts)
        handle_generated_option (opts, opts_set,
                                 OPT_Wchar_subscripts, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_comment)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcomment, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_dangling_pointer)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_pointer_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_duplicate_decl_specifier)
        handle_generated_option (opts, opts_set,
                                 OPT_Wduplicate_decl_specifier, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_enum_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_frame_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Wframe_address, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_infinite_recursion)
        handle_generated_option (opts, opts_set,
                                 OPT_Winfinite_recursion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_int_in_bool_context)
        handle_generated_option (opts, opts_set,
                                 OPT_Wint_in_bool_context, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_logical_not_paren)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlogical_not_parentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_maybe_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmaybe_uninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_elt_size)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_elt_size, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_transposed_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_transposed_args, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_misleading_indentation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmisleading_indentation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_alloc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_dealloc, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_new_delete)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_new_delete, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_attributes)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_attributes, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_braces)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_braces, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_multistatement_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmultistatement_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_openmp_simd)
        handle_generated_option (opts, opts_set,
                                 OPT_Wopenmp_simd, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_packed_not_aligned)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpacked_not_aligned, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_parentheses)
        handle_generated_option (opts, opts_set,
                                 OPT_Wparentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_sign)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_sign, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_restrict)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrestrict, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_return_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreturn_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sequence_point)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsequence_point, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_array_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_array_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_aliasing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_aliasing_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_overflow_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overflow_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overread)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overread, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_truncation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_truncation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_switch)
        handle_generated_option (opts, opts_set,
                                 OPT_Wswitch, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_tautological_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtautological_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_trigraphs)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtrigraphs, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unknown_pragmas)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunknown_pragmas, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_use_after_free)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuse_after_free_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_vla_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvla_parameter, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_volatile_register_var)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvolatile_register_var, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_zero_length_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Wzero_length_bounds, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wparentheses:
      if (!opts_set->x_warn_dangling_else)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_else, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wpedantic:
      if (!opts_set->x_cpp_warn_endif_labels)
        handle_generated_option (opts, opts_set,
                                 OPT_Wendif_labels, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_overlength_strings)
        handle_generated_option (opts, opts_set,
                                 OPT_Woverlength_strings, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_arith)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_arith, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_sign)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_sign, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc___compat:
      if (!opts_set->x_warn_enum_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wextra:
      if (!opts_set->x_warn_enum_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_fallthrough)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_fallthrough_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_string_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstring_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wconversion:
      if (!opts_set->x_warn_float_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wfloat_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sign_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsign_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wformat_:
      if (!opts_set->x_warn_format_contains_nul)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_contains_nul, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_diag)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_diag, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_extra_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_extra_args, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_nonliteral)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_nonliteral, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_overflow_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_security)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_security, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_trunc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_truncation_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_y2k)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_y2k, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_zero_length)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_zero_length, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wimplicit:
      if (!opts_set->x_warn_implicit_function_declaration)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_function_declaration, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_int)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_int, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc90_c99_compat:
      if (!opts_set->x_warn_long_long)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlong_long, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wabi:
      if (!opts_set->x_warn_psabi)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpsabi, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused_variable:
      if (!opts_set->x_warn_unused_const_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_const_variable_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused:
      if (!opts_set->x_warn_unused_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wtraditional:
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    default:    
      break;    
    }           
  return true;  
}               



bool                                                                  
CXX_handle_option_auto (struct gcc_options *opts ATTRIBUTE_UNUSED,              
                           struct gcc_options *opts_set ATTRIBUTE_UNUSED,              
                           size_t scode ATTRIBUTE_UNUSED, const char *arg ATTRIBUTE_UNUSED, HOST_WIDE_INT value ATTRIBUTE_UNUSED,  
                           unsigned int lang_mask ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,          
                           location_t loc ATTRIBUTE_UNUSED,                            
                           const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED, 
                           diagnostic_context *dc ATTRIBUTE_UNUSED)                    
{                                                                     
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT_Wall:
      if (!opts_set->x_warn_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Waddress, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_aligned_new)
        handle_generated_option (opts, opts_set,
                                 OPT_Waligned_new_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_bounds_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_parameter_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_op)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_operation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx11_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__11_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx14_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__14_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx17_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__17_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx20_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__20_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_catch_value)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcatch_value_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_char_subscripts)
        handle_generated_option (opts, opts_set,
                                 OPT_Wchar_subscripts, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_class_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wclass_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_comment)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcomment, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_dangling_pointer)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_pointer_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_delnonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdelete_non_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_frame_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Wframe_address, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_infinite_recursion)
        handle_generated_option (opts, opts_set,
                                 OPT_Winfinite_recursion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_init_self)
        handle_generated_option (opts, opts_set,
                                 OPT_Winit_self, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_int_in_bool_context)
        handle_generated_option (opts, opts_set,
                                 OPT_Wint_in_bool_context, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_logical_not_paren)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlogical_not_parentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_maybe_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmaybe_uninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_elt_size)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_elt_size, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_transposed_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_transposed_args, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_misleading_indentation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmisleading_indentation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_alloc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_dealloc, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_new_delete)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_new_delete, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_attributes)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_attributes, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_multistatement_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmultistatement_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_narrowing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnarrowing, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_openmp_simd)
        handle_generated_option (opts, opts_set,
                                 OPT_Wopenmp_simd, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_packed_not_aligned)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpacked_not_aligned, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_parentheses)
        handle_generated_option (opts, opts_set,
                                 OPT_Wparentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pessimizing_move)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpessimizing_move, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_range_loop_construct)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrange_loop_construct, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_reorder)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreorder, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_restrict)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrestrict, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_return_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreturn_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sequence_point)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsequence_point, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sign_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsign_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_array_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_array_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_aliasing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_aliasing_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_overflow_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overflow_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overread)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overread, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_truncation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_truncation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_switch)
        handle_generated_option (opts, opts_set,
                                 OPT_Wswitch, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_tautological_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtautological_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_trigraphs)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtrigraphs, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unknown_pragmas)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunknown_pragmas, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_use_after_free)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuse_after_free_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_vla_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvla_parameter, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_volatile_register_var)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvolatile_register_var, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_zero_length_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Wzero_length_bounds, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wparentheses:
      if (!opts_set->x_warn_dangling_else)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_else, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Weffc__:
      if (!opts_set->x_warn_delnonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdelete_non_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnon_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wextra:
      if (!opts_set->x_warn_deprecated_copy)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdeprecated_copy, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_fallthrough)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_fallthrough_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_redundant_move)
        handle_generated_option (opts, opts_set,
                                 OPT_Wredundant_move, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_string_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstring_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wpedantic:
      if (!opts_set->x_cpp_warn_endif_labels)
        handle_generated_option (opts, opts_set,
                                 OPT_Wendif_labels, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_overlength_strings)
        handle_generated_option (opts, opts_set,
                                 OPT_Woverlength_strings, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_arith)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_arith, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wconversion:
      if (!opts_set->x_warn_float_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wfloat_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wformat_:
      if (!opts_set->x_warn_format_contains_nul)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_contains_nul, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_diag)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_diag, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_extra_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_extra_args, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_nonliteral)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_nonliteral, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_overflow_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_security)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_security, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_trunc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_truncation_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_y2k)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_y2k, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_zero_length)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_zero_length, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc__11_compat:
      if (!opts_set->x_warn_narrowing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnarrowing, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wabi:
      if (!opts_set->x_warn_noexcept_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnoexcept_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_psabi)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpsabi, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc__17_compat:
      if (!opts_set->x_warn_noexcept_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnoexcept_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused:
      if (!opts_set->x_warn_unused_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wtraditional:
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    default:    
      break;    
    }           
  return true;  
}               



bool                                                                  
ObjC_handle_option_auto (struct gcc_options *opts ATTRIBUTE_UNUSED,              
                           struct gcc_options *opts_set ATTRIBUTE_UNUSED,              
                           size_t scode ATTRIBUTE_UNUSED, const char *arg ATTRIBUTE_UNUSED, HOST_WIDE_INT value ATTRIBUTE_UNUSED,  
                           unsigned int lang_mask ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,          
                           location_t loc ATTRIBUTE_UNUSED,                            
                           const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED, 
                           diagnostic_context *dc ATTRIBUTE_UNUSED)                    
{                                                                     
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT_Wall:
      if (!opts_set->x_warn_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Waddress, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_bounds_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_parameter_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_op)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_operation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_char_subscripts)
        handle_generated_option (opts, opts_set,
                                 OPT_Wchar_subscripts, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_comment)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcomment, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_dangling_pointer)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_pointer_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_duplicate_decl_specifier)
        handle_generated_option (opts, opts_set,
                                 OPT_Wduplicate_decl_specifier, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_enum_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_frame_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Wframe_address, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_infinite_recursion)
        handle_generated_option (opts, opts_set,
                                 OPT_Winfinite_recursion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_int_in_bool_context)
        handle_generated_option (opts, opts_set,
                                 OPT_Wint_in_bool_context, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_logical_not_paren)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlogical_not_parentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_maybe_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmaybe_uninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_elt_size)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_elt_size, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_transposed_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_transposed_args, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_alloc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_dealloc, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_new_delete)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_new_delete, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_attributes)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_attributes, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_braces)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_braces, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_multistatement_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmultistatement_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_packed_not_aligned)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpacked_not_aligned, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_parentheses)
        handle_generated_option (opts, opts_set,
                                 OPT_Wparentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_sign)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_sign, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_restrict)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrestrict, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_return_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreturn_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sequence_point)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsequence_point, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_array_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_array_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_aliasing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_aliasing_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_overflow_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overflow_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overread)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overread, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_truncation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_truncation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_switch)
        handle_generated_option (opts, opts_set,
                                 OPT_Wswitch, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_tautological_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtautological_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_trigraphs)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtrigraphs, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unknown_pragmas)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunknown_pragmas, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_use_after_free)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuse_after_free_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_vla_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvla_parameter, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_volatile_register_var)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvolatile_register_var, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_zero_length_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Wzero_length_bounds, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wparentheses:
      if (!opts_set->x_warn_dangling_else)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_else, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wpedantic:
      if (!opts_set->x_cpp_warn_endif_labels)
        handle_generated_option (opts, opts_set,
                                 OPT_Wendif_labels, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_overlength_strings)
        handle_generated_option (opts, opts_set,
                                 OPT_Woverlength_strings, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_arith)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_arith, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_sign)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_sign, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc___compat:
      if (!opts_set->x_warn_enum_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wextra:
      if (!opts_set->x_warn_enum_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wenum_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_fallthrough)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_fallthrough_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_string_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstring_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wconversion:
      if (!opts_set->x_warn_float_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wfloat_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sign_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsign_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wformat_:
      if (!opts_set->x_warn_format_contains_nul)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_contains_nul, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_diag)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_diag, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_extra_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_extra_args, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_nonliteral)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_nonliteral, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_overflow_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_security)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_security, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_trunc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_truncation_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_y2k)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_y2k, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_zero_length)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_zero_length, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wimplicit:
      if (!opts_set->x_warn_implicit_function_declaration)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_function_declaration, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_int)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_int, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc90_c99_compat:
      if (!opts_set->x_warn_long_long)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlong_long, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wabi:
      if (!opts_set->x_warn_psabi)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpsabi, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused_variable:
      if (!opts_set->x_warn_unused_const_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_const_variable_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused:
      if (!opts_set->x_warn_unused_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wtraditional:
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    default:    
      break;    
    }           
  return true;  
}               



bool                                                                  
ObjCXX_handle_option_auto (struct gcc_options *opts ATTRIBUTE_UNUSED,              
                           struct gcc_options *opts_set ATTRIBUTE_UNUSED,              
                           size_t scode ATTRIBUTE_UNUSED, const char *arg ATTRIBUTE_UNUSED, HOST_WIDE_INT value ATTRIBUTE_UNUSED,  
                           unsigned int lang_mask ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,          
                           location_t loc ATTRIBUTE_UNUSED,                            
                           const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED, 
                           diagnostic_context *dc ATTRIBUTE_UNUSED)                    
{                                                                     
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT_Wall:
      if (!opts_set->x_warn_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Waddress, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_aligned_new)
        handle_generated_option (opts, opts_set,
                                 OPT_Waligned_new_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_bounds_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_array_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Warray_parameter_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_bool_op)
        handle_generated_option (opts, opts_set,
                                 OPT_Wbool_operation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx11_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__11_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx14_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__14_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx17_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__17_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_cxx20_compat)
        handle_generated_option (opts, opts_set,
                                 OPT_Wc__20_compat, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_catch_value)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcatch_value_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_char_subscripts)
        handle_generated_option (opts, opts_set,
                                 OPT_Wchar_subscripts, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_class_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wclass_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_comment)
        handle_generated_option (opts, opts_set,
                                 OPT_Wcomment, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_dangling_pointer)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_pointer_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_delnonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdelete_non_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_frame_address)
        handle_generated_option (opts, opts_set,
                                 OPT_Wframe_address, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_infinite_recursion)
        handle_generated_option (opts, opts_set,
                                 OPT_Winfinite_recursion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_init_self)
        handle_generated_option (opts, opts_set,
                                 OPT_Winit_self, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_int_in_bool_context)
        handle_generated_option (opts, opts_set,
                                 OPT_Wint_in_bool_context, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_logical_not_paren)
        handle_generated_option (opts, opts_set,
                                 OPT_Wlogical_not_parentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_maybe_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmaybe_uninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_elt_size)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_elt_size, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_memset_transposed_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmemset_transposed_args, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_alloc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_dealloc, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_mismatched_new_delete)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmismatched_new_delete, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_missing_attributes)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmissing_attributes, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_multistatement_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmultistatement_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_narrowing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnarrowing, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_packed_not_aligned)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpacked_not_aligned, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_parentheses)
        handle_generated_option (opts, opts_set,
                                 OPT_Wparentheses, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pessimizing_move)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpessimizing_move, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_range_loop_construct)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrange_loop_construct, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_reorder)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreorder, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_restrict)
        handle_generated_option (opts, opts_set,
                                 OPT_Wrestrict, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_return_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wreturn_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sequence_point)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsequence_point, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sign_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsign_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_array_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_array_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_div)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_div, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_sizeof_pointer_memaccess)
        handle_generated_option (opts, opts_set,
                                 OPT_Wsizeof_pointer_memaccess, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_aliasing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_aliasing_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_strict_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstrict_overflow_, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overflow_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_overread)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_overread, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_stringop_truncation)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstringop_truncation, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_switch)
        handle_generated_option (opts, opts_set,
                                 OPT_Wswitch, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_tautological_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtautological_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_trigraphs)
        handle_generated_option (opts, opts_set,
                                 OPT_Wtrigraphs, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_uninitialized)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuninitialized, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unknown_pragmas)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunknown_pragmas, NULL, value ? 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_unused)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_use_after_free)
        handle_generated_option (opts, opts_set,
                                 OPT_Wuse_after_free_, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_vla_parameter)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvla_parameter, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_volatile_register_var)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvolatile_register_var, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_zero_length_bounds)
        handle_generated_option (opts, opts_set,
                                 OPT_Wzero_length_bounds, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wparentheses:
      if (!opts_set->x_warn_dangling_else)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdangling_else, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Weffc__:
      if (!opts_set->x_warn_delnonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdelete_non_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonvdtor)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnon_virtual_dtor, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wextra:
      if (!opts_set->x_warn_deprecated_copy)
        handle_generated_option (opts, opts_set,
                                 OPT_Wdeprecated_copy, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_implicit_fallthrough)
        handle_generated_option (opts, opts_set,
                                 OPT_Wimplicit_fallthrough_, NULL, value ? 3 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_redundant_move)
        handle_generated_option (opts, opts_set,
                                 OPT_Wredundant_move, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_string_compare)
        handle_generated_option (opts, opts_set,
                                 OPT_Wstring_compare, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wpedantic:
      if (!opts_set->x_cpp_warn_endif_labels)
        handle_generated_option (opts, opts_set,
                                 OPT_Wendif_labels, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_main)
        handle_generated_option (opts, opts_set,
                                 OPT_Wmain, NULL, value ? 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_overlength_strings)
        handle_generated_option (opts, opts_set,
                                 OPT_Woverlength_strings, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_pointer_arith)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpointer_arith, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wconversion:
      if (!opts_set->x_warn_float_conversion)
        handle_generated_option (opts, opts_set,
                                 OPT_Wfloat_conversion, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wformat_:
      if (!opts_set->x_warn_format_contains_nul)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_contains_nul, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_diag)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_diag, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_extra_args)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_extra_args, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_nonliteral)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_nonliteral, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_overflow)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_overflow_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_security)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_security, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_trunc)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_truncation_, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_y2k)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_y2k, NULL, value ? warn_format >= 2 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_format_zero_length)
        handle_generated_option (opts, opts_set,
                                 OPT_Wformat_zero_length, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_nonnull)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnonnull, NULL, value ? warn_format >= 1 : 0,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc__11_compat:
      if (!opts_set->x_warn_narrowing)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnarrowing, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wabi:
      if (!opts_set->x_warn_noexcept_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnoexcept_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      if (!opts_set->x_warn_psabi)
        handle_generated_option (opts, opts_set,
                                 OPT_Wpsabi, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wc__17_compat:
      if (!opts_set->x_warn_noexcept_type)
        handle_generated_option (opts, opts_set,
                                 OPT_Wnoexcept_type, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wunused:
      if (!opts_set->x_warn_unused_variable)
        handle_generated_option (opts, opts_set,
                                 OPT_Wunused_variable, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    case OPT_Wtraditional:
      if (!opts_set->x_cpp_warn_variadic_macros)
        handle_generated_option (opts, opts_set,
                                 OPT_Wvariadic_macros, NULL, value,
                                 lang_mask, kind, loc, handlers, true, dc);
      break;

    default:    
      break;    
    }           
  return true;  
}               


#include "cpplib.h"
void
cpp_handle_option_auto (const struct gcc_options * opts,                   
                        size_t scode, struct cpp_options * cpp_opts)
{                                                                     
  enum opt_code code = (enum opt_code) scode;                         
                                                                      
  switch (code)                                                       
    {                                                                 
    case OPT__obj_ext_:
      cpp_opts->obj_ext = opts->x_var_obj_ext;
      break;
    case OPT_Wbidi_chars_:
      cpp_opts->cpp_warn_bidirectional = opts->x_warn_bidirectional;
      break;
    case OPT_Wbuiltin_macro_redefined:
      cpp_opts->warn_builtin_macro_redefined = opts->x_cpp_warn_builtin_macro_redefined;
      break;
    case OPT_Wc___compat:
      cpp_opts->warn_cxx_operator_names = opts->x_warn_cxx_compat;
      break;
    case OPT_Wc__11_compat:
      cpp_opts->cpp_warn_cxx11_compat = opts->x_warn_cxx11_compat;
      break;
    case OPT_Wc11_c2x_compat:
      cpp_opts->cpp_warn_c11_c2x_compat = opts->x_warn_c11_c2x_compat;
      break;
    case OPT_Wc90_c99_compat:
      cpp_opts->cpp_warn_c90_c99_compat = opts->x_warn_c90_c99_compat;
      break;
    case OPT_Wcomment:
      cpp_opts->warn_comments = opts->x_cpp_warn_comment;
      break;
    case OPT_Wdate_time:
      cpp_opts->warn_date_time = opts->x_cpp_warn_date_time;
      break;
    case OPT_Wdeprecated:
      cpp_opts->cpp_warn_deprecated = opts->x_warn_deprecated;
      break;
    case OPT_Wendif_labels:
      cpp_opts->warn_endif_labels = opts->x_cpp_warn_endif_labels;
      break;
    case OPT_Wexpansion_to_defined:
      cpp_opts->warn_expansion_to_defined = opts->x_cpp_warn_expansion_to_defined;
      break;
    case OPT_Winvalid_pch:
      cpp_opts->warn_invalid_pch = opts->x_cpp_warn_invalid_pch;
      break;
    case OPT_Wliteral_suffix:
      cpp_opts->warn_literal_suffix = opts->x_cpp_warn_literal_suffix;
      break;
    case OPT_Wlong_long:
      cpp_opts->cpp_warn_long_long = opts->x_warn_long_long;
      break;
    case OPT_Wmissing_include_dirs:
      cpp_opts->warn_missing_include_dirs = opts->x_cpp_warn_missing_include_dirs;
      break;
    case OPT_Wmultichar:
      cpp_opts->warn_multichar = opts->x_cpp_warn_multichar;
      break;
    case OPT_Wnormalized_:
      cpp_opts->warn_normalize = opts->x_cpp_warn_normalize;
      break;
    case OPT_Wpedantic:
      cpp_opts->cpp_pedantic = opts->x_pedantic;
      break;
    case OPT_Wtraditional:
      cpp_opts->cpp_warn_traditional = opts->x_warn_traditional;
      break;
    case OPT_Wtrigraphs:
      cpp_opts->warn_trigraphs = opts->x_cpp_warn_trigraphs;
      break;
    case OPT_Wundef:
      cpp_opts->warn_undef = opts->x_cpp_warn_undef;
      break;
    case OPT_Wvariadic_macros:
      cpp_opts->warn_variadic_macros = opts->x_cpp_warn_variadic_macros;
      break;
    default:    
      break;    
    }           
}

void
init_global_opts_from_cpp(struct gcc_options * opts,                   
                         const struct cpp_options * cpp_opts)
{                                                                     
  opts->x_var_obj_ext = cpp_opts->obj_ext;
  opts->x_warn_bidirectional = cpp_opts->cpp_warn_bidirectional;
  opts->x_cpp_warn_builtin_macro_redefined = cpp_opts->warn_builtin_macro_redefined;
  opts->x_warn_cxx_compat = cpp_opts->warn_cxx_operator_names;
  opts->x_warn_cxx11_compat = cpp_opts->cpp_warn_cxx11_compat;
  opts->x_warn_c11_c2x_compat = cpp_opts->cpp_warn_c11_c2x_compat;
  opts->x_warn_c90_c99_compat = cpp_opts->cpp_warn_c90_c99_compat;
  opts->x_cpp_warn_comment = cpp_opts->warn_comments;
  opts->x_cpp_warn_date_time = cpp_opts->warn_date_time;
  opts->x_warn_deprecated = cpp_opts->cpp_warn_deprecated;
  opts->x_cpp_warn_endif_labels = cpp_opts->warn_endif_labels;
  opts->x_cpp_warn_expansion_to_defined = cpp_opts->warn_expansion_to_defined;
  opts->x_cpp_warn_invalid_pch = cpp_opts->warn_invalid_pch;
  opts->x_cpp_warn_literal_suffix = cpp_opts->warn_literal_suffix;
  opts->x_warn_long_long = cpp_opts->cpp_warn_long_long;
  opts->x_cpp_warn_missing_include_dirs = cpp_opts->warn_missing_include_dirs;
  opts->x_cpp_warn_multichar = cpp_opts->warn_multichar;
  opts->x_cpp_warn_normalize = cpp_opts->warn_normalize;
  opts->x_pedantic = cpp_opts->cpp_pedantic;
  opts->x_warn_traditional = cpp_opts->cpp_warn_traditional;
  opts->x_cpp_warn_trigraphs = cpp_opts->warn_trigraphs;
  opts->x_cpp_warn_undef = cpp_opts->warn_undef;
  opts->x_cpp_warn_variadic_macros = cpp_opts->warn_variadic_macros;
}               

#if !defined(GENERATOR_FILE) && defined(ENABLE_PLUGIN)
DEBUG_VARIABLE const struct cl_var cl_vars[] =
{
  { "ix86_stack_protector_guard_offset", offsetof (struct gcc_options, x_ix86_stack_protector_guard_offset) },
  { "ix86_stack_protector_guard_reg", offsetof (struct gcc_options, x_ix86_stack_protector_guard_reg) },
  { "ix86_unsafe_math_optimizations", offsetof (struct gcc_options, x_ix86_unsafe_math_optimizations) },
  { "ix86_excess_precision", offsetof (struct gcc_options, x_ix86_excess_precision) },
  { "recip_mask", offsetof (struct gcc_options, x_recip_mask) },
  { "ix86_isa_flags2_explicit", offsetof (struct gcc_options, x_ix86_isa_flags2_explicit) },
  { "ix86_isa_flags_explicit", offsetof (struct gcc_options, x_ix86_isa_flags_explicit) },
  { "dump_base_name_prefixed", offsetof (struct gcc_options, x_dump_base_name_prefixed) },
  { "exit_after_options", offsetof (struct gcc_options, x_exit_after_options) },
  { "flag_dump_all_passed", offsetof (struct gcc_options, x_flag_dump_all_passed) },
  { "flag_opts_finished", offsetof (struct gcc_options, x_flag_opts_finished) },
  { "flag_stack_usage_info", offsetof (struct gcc_options, x_flag_stack_usage_info) },
  { "flag_warn_unused_result", offsetof (struct gcc_options, x_flag_warn_unused_result) },
  { "in_lto_p", offsetof (struct gcc_options, x_in_lto_p) },
  { "use_gnu_debug_info_extensions", offsetof (struct gcc_options, x_use_gnu_debug_info_extensions) },
  { "help_enum_printed", offsetof (struct gcc_options, x_help_enum_printed) },
  { "help_printed", offsetof (struct gcc_options, x_help_printed) },
  { "aux_base_name", offsetof (struct gcc_options, x_aux_base_name) },
  { "main_input_basename", offsetof (struct gcc_options, x_main_input_basename) },
  { "main_input_filename", offsetof (struct gcc_options, x_main_input_filename) },
  { "ctf_debug_info_level", offsetof (struct gcc_options, x_ctf_debug_info_level) },
  { "debug_info_level", offsetof (struct gcc_options, x_debug_info_level) },
  { "debug_struct_generic", offsetof (struct gcc_options, x_debug_struct_generic) },
  { "debug_struct_ordinary", offsetof (struct gcc_options, x_debug_struct_ordinary) },
  { "flag_incremental_link", offsetof (struct gcc_options, x_flag_incremental_link) },
  { "flag_stack_check", offsetof (struct gcc_options, x_flag_stack_check) },
  { "flag_complex_method", offsetof (struct gcc_options, x_flag_complex_method) },
  { "flag_debug_asm", offsetof (struct gcc_options, x_flag_debug_asm) },
  { "flag_default_complex_method", offsetof (struct gcc_options, x_flag_default_complex_method) },
  { "flag_dump_rtl_in_asm", offsetof (struct gcc_options, x_flag_dump_rtl_in_asm) },
  { "flag_gen_aux_info", offsetof (struct gcc_options, x_flag_gen_aux_info) },
  { "flag_generate_lto", offsetof (struct gcc_options, x_flag_generate_lto) },
  { "flag_generate_offload", offsetof (struct gcc_options, x_flag_generate_offload) },
  { "flag_print_asm_name", offsetof (struct gcc_options, x_flag_print_asm_name) },
  { "flag_shlib", offsetof (struct gcc_options, x_flag_shlib) },
  { "main_input_baselength", offsetof (struct gcc_options, x_main_input_baselength) },
  { "optimize", offsetof (struct gcc_options, x_optimize) },
  { "optimize_debug", offsetof (struct gcc_options, x_optimize_debug) },
  { "optimize_fast", offsetof (struct gcc_options, x_optimize_fast) },
  { "optimize_size", offsetof (struct gcc_options, x_optimize_size) },
  { "recip_mask_explicit", offsetof (struct gcc_options, x_recip_mask_explicit) },
  { "rtl_dump_and_exit", offsetof (struct gcc_options, x_rtl_dump_and_exit) },
  { "target_flags", offsetof (struct gcc_options, x_target_flags) },
  { "write_symbols", offsetof (struct gcc_options, x_write_symbols) },
  { "flag_sanitize", offsetof (struct gcc_options, x_flag_sanitize) },
  { "flag_sanitize_recover", offsetof (struct gcc_options, x_flag_sanitize_recover) },
  { "flag_zero_call_used_regs", offsetof (struct gcc_options, x_flag_zero_call_used_regs) },
  { "help_columns", offsetof (struct gcc_options, x_help_columns) },
  { "initial_max_fld_align", offsetof (struct gcc_options, x_initial_max_fld_align) },
  { "flag_ignored_attributes", offsetof (struct gcc_options, x_flag_ignored_attributes) },
  { "flag_instrument_functions_exclude_files", offsetof (struct gcc_options, x_flag_instrument_functions_exclude_files) },
  { "flag_instrument_functions_exclude_functions", offsetof (struct gcc_options, x_flag_instrument_functions_exclude_functions) },
  { NULL, (unsigned short) -1 }
};
#endif
