/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"} by {\n"
"	; peephole 0 removed dead load into %1 from %2.\n"
"} if notVolatile(%1), notVolatile(%2), notUsed(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ld	a, (%2, sp)\n"
"} by {\n"
"	; peephole 0a removed dead load into a from (%2, sp).\n"
"} if notUsed('a'), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	%1, %2\n"
"} by {\n"
"	; peephole 0w removed dead load into %1 from %2.\n"
"} if notVolatile(%1), notVolatile(%2), notUsed(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%2, sp)\n"
"} by {\n"
"	; peephole 0wa removed dead load into %1 from (%2, sp).\n"
"} if notUsed(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	clr	%1\n"
"} by {\n"
"	; peephole 1 removed dead clear of %1.\n"
"} if notVolatile(%1), notUsed(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	or	a, %1\n"
"} by {\n"
"	; peephole 2 removed dead or.\n"
"} if notVolatile(%1), notUsed('a'), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	clrw	%1\n"
"} by {\n"
"	; peephole 3 removed dead clrw of %1.\n"
"} if notVolatile(%1), notUsed(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%2, %1\n"
"} by {\n"
"	ld	%1, %2\n"
"	; peephole 4 removed redundant load from %1 into %2.\n"
"} if notVolatile(%1), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	ldw	%1, %2\n"
"	ldw	%2, %1\n"
"} by {\n"
" 	ldw	%1, %2\n"
"	; peephole 4w removed redundant load from %1 into %2.\n"
"} if notVolatile(%1), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	ld	(%1, sp), %2\n"
"	ld	%2, (%1, sp)\n"
"} by {\n"
"	ld	(%1, sp), %2\n"
"	; peephole 4a removed redundant load from (%1, sp) into %2.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"	ld	%1, %2\n"
"} by {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"	; peephole 4b removed redundant load from %2 into %1.\n"
"} if notVolatile(%1), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), %2\n"
"	ld	a, (%2)\n"
"	%3	a\n"
"	ldw	%2, (%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), %2\n"
"	ld	a, (%2)\n"
"	%3	a\n"
"	; peephole 4c removed redundant load from (%1, sp) into %2.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	ld	%2, a\n"
"} by {\n"
"	mov	%2, %1\n"
"	; peephole 4d replaced pair of mem-to-mem load with mov.\n"
"} if operandsLitOrSym(%1), operandsLitOrSym(%2), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	exg	a, %1\n"
"} by {\n"
"	ld	%1, a\n"
"	; peephole 5 removed redundant exg.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	exgw	x, y\n"
"	ldw	x, y\n"
"} by {\n"
"	; peephole 5w replaced exgw-ldw by ldw.\n"
"	ldw	y, x\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	xl, a\n"
"	srl	a\n"
"	srlw	x\n"
"} by {\n"
"	srl	a\n"
"	; peephole 5a removed redundant srlw x.\n"
"} if notUsed('x')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"	ld	%1, %2\n"
"} by {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"	; peephole 5a removed redundant rght shift of .\n"
"} if notVolatile(%1), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; peephole 6 removed dead pop / push pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	popw	%1\n"
"	pushw	%1\n"
"} by {\n"
"	; peephole 7 removed dead popw / pushw pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ldw	(%1), %3\n"
"} by {\n"
"	; peephole 8 moved addition of offset into storage instruction\n"
"	ldw	(%2, %1), %3\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ld	a, %4\n"
"	ld	(%1), a\n"
"} by {\n"
"	; peephole 9 moved addition of offset into storage instruction\n"
"	ld	a, %4\n"
"	ld	(%2, %1), a\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	clr	(%1)\n"
"} by {\n"
"	; peephole 9a moved addition of offset into clear instruction\n"
"	clr	(%2, %1)\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ldw	%3, %4\n"
"	ldw	(%1), %3\n"
"} by {\n"
"	; peephole 10 moved addition of offset into storage instruction\n"
"	ldw	%3, %4\n"
"	ldw	(%2, %1), %3\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	incw	%1\n"
"	incw	%1\n"
"	ldw	%3, %4\n"
"	ldw	(%1), %3\n"
"} by {\n"
"	; peephole 10a moved addition of offset into storage instruction\n"
"	ldw	%3, %4\n"
"	ldw	(0x02, %1), %3\n"
"} if notUsed(%1), notSame(%1 %4)\n"
"\n"
"replace restart {\n"
"	addw	%1, #(_%2)\n"
"	ld	a, (%1)\n"
"} by {\n"
"	; peephole 10b moved addition of offset into storage instruction\n"
"	ld	a, (_%2, %1)\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #(_%2)\n"
"	inc	(%1)\n"
"} by {\n"
"	; peephole 10c moved addition of offset into increment instruction\n"
"	inc	(_%2, %1)\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #(_%2)\n"
"	ldw	%1, (%1)\n"
"} by {\n"
"	; peephole 10d moved addition of offset into storage instruction\n"
"	ldw	%1, (_%2, %1)\n"
"}if notUsed('c')\n"
"\n"
"replace restart {\n"
"	addw	%1, #(_%2)\n"
"	ld	(%1), a\n"
"} by {\n"
"	; peephole 10e moved addition of offset into storage instruction\n"
"	ld	(_%2, %1), a\n"
"} if notUsed(%1), notUsed('c')\n"
"\n"
"replace restart {\n"
"	ldw %1, sp\n"
"	addw    %1, #%2\n"
"	ld	a, (%1)\n"
"} by {\n"
"	ld	a, (%2, sp)\n"
"	; peephole 10f moved addition to sp to storage instruction.\n"
"} if notUsed(%1), notUsed('c'), operandsLiteral(%2), immdInRange(0 255 '+' 0 %2 %9)\n"
"\n"
"replace restart {\n"
"	ldw	%1, sp\n"
"	incw	x\n"
"	ld	a, (%1)\n"
"} by {\n"
"	ld	a, (1, sp)\n"
"	; peephole 10g moved increment to sp into storage instruction.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ldw	%1, sp\n"
"	incw	x\n"
"	incw	x\n"
"	ld	a, (%1)\n"
"} by {\n"
"	ld	a, (2, sp)\n"
"	; peephole 10h moved increments to sp into storage instruction.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), x\n"
"	ldw	x, (%2, sp)\n"
"	addw	x, (%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), x\n"
"	; peephole 11 eliminated load using commutativity of addition\n"
"	addw	x, (%2, sp)\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%2, sp)\n"
"	ld	a, (%1)\n"
"	%3	a\n"
"	ldw	%1, (%2, sp)\n"
"} by {\n"
"	ldw	%1, (%2, sp)\n"
"	ld	a, (%1)\n"
"	%3	a\n"
"	; peephole 12 removed redundant load from (%2, sp) into %1.\n"
"} if notSame(%3 'push' 'pop')\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), %2\n"
"	ldw	%2, (%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), %2\n"
"	; peephole 13 removed redundant load from (%1, sp) into %2.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), x\n"
"	ldw	y, (%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), x\n"
"	ldw	y, x\n"
"	; peephole 14 replaced load from (%1, sp) into y by load from x into y.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	y, x\n"
"	ldw	(%1, sp), y\n"
"} by {\n"
"	ldw	(%1, sp), x\n"
"	; peephole 14a loaded (%1, sp) directly from x instead of going through y.\n"
"} if notUsed('y')\n"
"\n"
"replace restart {\n"
"	ldw	y, x\n"
"	ld	a, %1\n"
"	ld	(%2, y), a\n"
"} by {\n"
"	; peephole 14b used y directly instead of going through x.\n"
"	ld	a, %1\n"
"	ld	(%2, x), a\n"
"} if notUsed('y')\n"
"\n"
"replace restart {\n"
"	ldw	x, y\n"
"	ld	a, %1\n"
"	ld	(%2, x), a\n"
"} by {\n"
"	; peephole 14c used y directly instead of going through x.\n"
"	ld	a, %1\n"
"	ld	(%2, y), a\n"
"} if notUsed('x')\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), y\n"
"	ldw	x, (%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), y\n"
"	ldw	x, y\n"
"	; peephole 15 replaced load from (%1, sp) into x by load from y into x.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	%2	a\n"
"	ld	%1, a\n"
"} by {\n"
"	%2	%1\n"
"	; peephole 16 applied %2 on %1 instead of a.\n"
"} if notUsed('a'), notSame(%2 'push' 'pop'), notSame(%1 'xl' 'xh' 'yl' 'yh')\n"
"\n"
"replace restart {\n"
"	ldw	%2, #%1\n"
"	ldw	%3, #%1\n"
"	ld	a, (%3)\n"
"} by {\n"
"	ldw	%2, #%1\n"
"	ld	a, (%2)\n"
"	; peephole 101 removed use of extra index register (%3).\n"
"} if notUsed(%3)\n"
"\n"
"replace restart {\n"
"	xor	a, #%1\n"
"	and	a, #%2\n"
"} by {\n"
"	cpl	a\n"
"	and	a, #%1\n"
"	; peephole 110 replaced 'xor-and' by 'cpl-and'.\n"
"} if operandsLiteral(%1 %2), immdInRange(0 0 '^' %1 %2 %3), notUsed('c')\n"
"	\n"
"replace restart {\n"
"	and	a, #%1\n"
"	cp	a, #%2\n"
"} by {\n"
"	cpl	a\n"
"	bcp	a, #%1\n"
"	; peephole 111 replaced 'and-cp' by 'cpl-bcp'.\n"
"} if operandsLiteral(%1 %2), immdInRange(0 0 '^' %1 %2 %3), notUsed('a' 'n' 'c')\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	and	a, #%2\n"
"} by {\n"
"	and	a, #%3\n"
"	; peephole 130 combined 'and-and' (%1, %2) into 'and' (%3).\n"
"} if operandsLiteral(%1 %2), immdInRange(0 255 '&' %1 %2 %3)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	cpl	a\n"
"	and	a, #%2\n"
"} by {\n"
"	; peephole 131 removed unneeded 'and' before 'cpl-and'.\n"
"	cpl a\n"
"	and a, #%2\n"
"} if operandsLiteral(%1 %2), immdInRange(0 255 '&' %1 %2 %3), immdInRange(0 0 '^' %2 %3 %4)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	%4	a, #%2\n"
"	and	a, #%3\n"
"} by {\n"
"	and	a, #%5\n"
"	%4	a, #%6\n"
"	; peephole 132 removed unneded and in 'and-%4-and' (%1 %2 %3) -> (%5 %6).\n"
"} if operandsLiteral(%1 %2 %3), same(%4 'or' 'xor') immdInRange(0 255 '&' %1 %3 %5), immdInRange(0 255 '&' %2 %3 %6)\n"
"\n"
"replace restart {\n"
"	xor	a, #0\n"
"} by {\n"
"	; peephole 133 removed xor with 0 \n"
"} if notUsed('n' 'z')\n"
"\n"
"replace restart {\n"
"	and	a, #255\n"
"} by {\n"
"	; peephole 134 removed and with 255\n"
"} if notUsed('n' 'z')\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	sub	a, #%2\n"
"	clr	a\n"
"	rlc	a\n"
"	s%3	a\n"
"} by {\n"
"	and	a, #%1\n"
"	xor	a, #%1\n"
"	s%3	a\n"
"	; peephole 140 replaced 'and-sub-clr-rlc-s%3' to reverse A0 bit by 'xor-and-s%3'.\n"
"} if same(%3 'rl' 'll'), operandsLiteral(%1 %2), immdInRange(0 0 '^' %1 %2 %4), immdInRange(0 0 '^' %1 1 %5)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	sub	a, #%2\n"
"	clr	a\n"
"	rlc	a\n"
"} by {\n"
"	and	a, #%1\n"
"	xor	a, #%1\n"
"	; peephole 141 replaced 'and-sub-clr-rlc' to reverse A0 bit by 'xor-and'.\n"
"} if operandsLiteral(%1 %2), immdInRange(0 0 '^' %1 %2 %4), immdInRange(0 0 '^' %1 1 %5), notUsed('c')\n"
"  \n"
"replace restart {\n"
"	srl	a\n"
"	cpl	a\n"
"	and	a, #%1\n"
"	swap	a\n"
"	sll	a\n"
"} by {\n"
"	cpl	a\n"
"	and	a, #%2\n"
"	swap	a\n"
"	; peephole 143 replaced 'srl-cpl-and-swap-sll' (%1) to reverse bits by 'cpl-and-swap' (%2).\n"
"} if operandsLiteral(%1), immdInRange(0 0 '&' %1 0xF8 %4), immdInRange(2 0x0E '*' %1 2 %2), notUsed('c')\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	cpl	a\n"
"	and	a, #%1\n"
"	swap	a\n"
"} by {\n"
"	cpl a\n"
"	and a, #%2\n"
"	; peephole 144 replaced 'swap-cpl-and-swap' (%1) to reverse bits by 'cpl-and' with swapped and literal (%2).\n"
"} if operandsLiteral(%1), immdInRange(0 255 'swap' %1 8 %2)\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	and	a, #%1\n"
"	cpl	a\n"
"	swap	a\n"
"} by {\n"
"	and	a, #%2\n"
"	cpl	a\n"
"	; peephole 145 replaced 'swap-and-cpl-swap' (%1) to reverse bits by 'and-cpl' with swapped and literal (%2).\n"
"} if operandsLiteral(%1), immdInRange(0 255 'swap' %1 8 %2)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	xor	a, #%1\n"
"	srl	a\n"
"} by {\n"
"	and	a, #%1\n"
"	sub	a, #%1\n"
"	; peephole 150 replaced 'xor-and-srl' by 'and-sub'.\n"
"} if operandsLiteral(%1), immdInRange(1 1 '+' 0 %1 %2), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	and	a, #%1\n"
"	sub	a, #%1\n"
"} by {\n"
"	and	a, #%3\n"
"	sub	a, #%3\n"
"	; peephole 153 replaced 'srl-and-sub' (%1) by 'and-sub' (%3).\n"
"} if operandsLiteral(%1), immdInRange(0 7 'singleSetBit' %1 8 %2), immdInRange(2 255 '*' %1 2 %3), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	and	a, #%1\n"
"	sub	a, #%1\n"
"} by {\n"
"	and	a, #%3\n"
"	sub	a, #%3\n"
"	; peephole 154 replaced 'swap-and-sub' (%1) by 'and-sub' (%3).\n"
"} if operandsLiteral(%1), immdInRange(0 7 'singleSetBit' %1 8 %2), immdInRange(0 255 'swap' %1 8 %3), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	and	a, #%2\n"
"	xor	a, #%1\n"
"	sll	a\n"
"} by {\n"
"	and	a, #%5\n"
"	xor	a, #%3\n"
"	; peephole 160 replaced 'srl-xor-and-sll' (%1, %2) by 'xor-and' (%3, %5).\n"
"} if operandsLiteral(%1 %2), immdInRange(2 255 '*' %1 2 %3), immdInRange(2 255 '*' %2 2 %4), immdInRange(0 255 '|' %4 1 %5), notUsed('c')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	cpl	a\n"
"	and	a, #%2\n"
"	sll	a\n"
"} by {\n"
"	and a, #%5\n"
"	xor a, #%4\n"
"	; peephole 161 replaced 'srl-cpl-and-sll' (%2) by 'xor-and' (%4, %5).\n"
"} if operandsLiteral(%2), immdInRange(2 255 '*' %2 2 %4), immdInRange(0 255 '|' %4 1 %5), notUsed('c')\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	%1	a, #%4\n"
"	%2	a, #%5\n"
"	swap	a\n"
"} by {\n"
"	%1	a, #%8\n"
"	%2	a, #%9\n"
"	; peephole 170 replaced swaps by swapping literal values of '%1-%2' (%4, %5) -> (%8, %9).\n"
"}if same(%1 'and' 'or' 'xor'), same(%2 'and' 'or' 'xor'), operandsLiteral(%4 %5), immdInRange(0 255 'swap' %4 8 %8), immdInRange(0 255 'swap' %5 8 %9)\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	%1	a, #%4\n"
"	swap	a\n"
"} by {\n"
"	%1	a, #%8\n"
"	; peephole 171 replaced swaps by swapping literal values of '%1' (%4) -> (%8).\n"
"}if same(%1 'and' 'or' 'xor'), operandsLiteral(%4), immdInRange(0 255 'swap' %4 8 %8)\n"
"\n"
"replace restart {\n"
"	clrw	%6\n"
"	ld	a, (%1, sp)\n"
"	and	a, #%2\n"
"	ld	%6l, a\n"
"	cpw	%6, #%3\n"
"} by {\n"
"	ld	a, (%1, sp)\n"
"	and	a, #%2\n"
"	cp	a, #%4\n"
"	; peephole 180 replaced comparison operation using '%6' with comparison operation using 'a'\n"
"} if operandsLiteral(%2 %3), immdInRange(0 127 '+' 0 %3 %4), immdInRange(0 127 '+' 0 %2 %5), notUsed(%6)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	or	a, #%3\n"
"	ld	%1, a\n"
"} by {\n"
"	bset	%1, #%4\n"
"	; peephole 202x replaced 'or' by 'bset' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%3), immdInRange(0 7 'singleSetBit' %3 8 %4), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	ldw	%2, #%1\n"
"	ld	a, (%2)\n"
"	or	a, #%3\n"
"	ld	(%2), a\n"
"} by {\n"
"	ldw	%2, #%1\n"
"	bset	%10, #%4\n"
"	; peephole 203x replaced 'or' by 'bset' (index register) ('%1' -> '%10').\n"
"} if operandsLiteral(%3), immdInRange(0 7 'singleSetBit' %3 8 %4), notUsed('a' 'n' 'z'), removeParentheses(%1 %10)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	and	a, #%3\n"
"	ld	%1, a\n"
"} by {\n"
"	bres	%1, #%4\n"
"	; peephole 204x replaced 'and' by 'bres' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%3), immdInRange(0 7 'singleResetBit' %3 8 %4), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	ldw	%2, #%1\n"
"	ld	a, (%2)\n"
"	and	a, #%3\n"
"	ld	(%2), a\n"
"} by {\n"
"	ldw	%2, #%1\n"
"	bres	%10, #%4\n"
"	; peephole 205x replaced 'and' by 'bres' (index register) ('%1' -> '%10').\n"
"} if operandsLiteral(%3), immdInRange(0 7 'singleResetBit' %3 8 %4), notUsed('a' 'n' 'z'), removeParentheses(%1 %10)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	xor	a, #%3\n"
"	ld	%1, a\n"
"} by {\n"
"	bcpl	%1, #%4\n"
"	; peephole 210x replaced 'xor' by 'bcpl' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%3), immdInRange(0 7 'singleSetBit' %3 8 %4), notUsed('a' 'n' 'z')\n"
"  \n"
"replace restart {\n"
"	ld	a, %1\n"
"	and	a, #%3\n"
"	sub	a, #%3\n"
"	bccm	%1, #%4\n"
"} by {\n"
"	bcpl	%1, #%4\n"
"	; peephole 220x replaced 'and-sub-bccm' by 'bcpl' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%3), immdInRange(0 7 'singleSetBit' %3 8 %5), immdInRange(0 0 '-' %4 %5 %6), notUsed('a' 'n' 'z')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	or	a, #0x80\n"
"	ld	%1, a\n"
"} by {\n"
"	rlc	%1\n"
"	scf\n"
"	rrc	%1\n"
"	; peephole 17 set msb in carry instead of a.\n"
"} if notUsed('a'), notSame(%1 'xl' 'xh' 'yl' 'yh'), notUsed('c'), notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	cpl	a\n"
"	and	a, #%3\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	xor	a, #%3\n"
"	ld	(%1), a\n"
"	; peephole 300a replaced 'cpl-and-and-or' by 'xor' v1.\n"
"} if operandsLiteral(%3 %4), immdInRange(0xFF 0xFF '^' %3 %4 %5)\n"
"  \n"
"replace restart {\n"
"	ld	a, (%2, sp)\n"
"	ldw	%1, sp\n"
"	addw	%1, #%5\n"
"	cpl	a\n"
"	and	a, #%3\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, sp\n"
"	addw	%1, #%5\n"
"	ld	a, (%2, sp)\n"
"	xor	a, #%3\n"
"	ld	(%2, sp), a\n"
"	; peephole 300b replaced 'cpl-and-and-or' by 'xor' v2, with addw.\n"
"} if operandsLiteral(%3 %4 %2 %5), immdInRange(0 0 '^' %2 %5 %8), immdInRange(0xFF 0xFF '^' %3 %4 %9)\n"
"\n"
"replace restart {\n"
"	ld	a, (%2, sp)\n"
"	ldw	%1, sp\n"
"	incw	%1\n"
"	cpl	a\n"
"	and	a, #%3\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, sp\n"
"	incw	%1\n"
"	ld	a, (%2, sp)\n"
"	xor	a, #%3\n"
"	ld	(%2, sp), a\n"
"	; peephole 300c replaced 'cpl-and-and-or' by 'xor' v3, with incw.\n"
"} if operandsLiteral(%3 %4 %2), immdInRange(0 0 '^' %2 1 %8), immdInRange(0xFF 0xFF '^' %3 %4 %9)\n"
"\n"
"replace restart {\n"
"	ld	a, (%2, sp)\n"
"	ldw	%1, sp\n"
"	incw	%1\n"
"	incw	%1\n"
"	cpl	a\n"
"	and	a, #%3\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, sp\n"
"	incw	%1\n"
"	incw	%1\n"
"	ld	a, (%2, sp)\n"
"	xor	a, #%3\n"
"	ld	(%2, sp), a\n"
"	; peephole 300d replaced 'cpl-and-and-or' by 'xor' v4, with 2 incw.\n"
"} if operandsLiteral(%3 %4 %2), immdInRange(0 0 '^' %2 2 %8), immdInRange(0xFF 0xFF '^' %3 %4 %9)\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	and	a, #%3\n"
"	%10	a, #%5\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	%10	a, #%5\n"
"	ld	(%1), a\n"
"	; peephole 310 replaced 'and-%10-and-or' by '%10'.\n"
"} if same(%10 'or' 'xor'), operandsLiteral(%3 %4 %5), immdInRange(0xFF 0xFF '^' %3 %4 %6), immdInRange(0 255 '&' %3 %5 %7), immdInRange(0 0 '^' %5 %7 %8)\n"
"\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	and	a, #%3\n"
"	push	a\n"
"	ld	a, (%1)\n"
"	and	a, #%4\n"
"	or	a, (1, sp)\n"
"	ld	(%1), a\n"
"	pop	a\n"
"} by {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	and	a, #%6\n"
"	ld	(%1), a\n"
"	; peephole 320 replaced 'and-and-or' by 'combined and'.\n"
"} if operandsLiteral(%3 %4), immdInRange(0 255 '|' %3 %4 %6)\n"
"\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	%4	a, #%3\n"
"	ld	(%1), a\n"
"} by {\n"
"	ld	a, %10\n"
"	%4	a, #%3\n"
"	ld	%10, a\n"
"	; peephole 330x replaced 'ldw-ld-%4-ld' by 'ld-%4-ld direct' ('%2' -> '%10').\n"
"} if same(%4 'xor' 'or' 'and'), notUsed(%1), removeParentheses(%2 %10)\n"
"\n"
"replace restart {\n"
"	ldw	%1, sp\n"
"	addw	%1, #%2\n"
"	ld	a, (%1)\n"
"	%4	a, #%3\n"
"	ld	(%1), a\n"
"} by {\n"
"	ld	a, (%2, sp)\n"
"	%4	a, #%3\n"
"	ld	(%2, sp), a\n"
"	; peephole 330c replaced 'ldw-addw-ld-%4-ld' by 'ld-%4-ld sp indexed'.\n"
"} if same(%4 'xor' 'or' 'and'), operandsLiteral(%2), immdInRange(0 0xFF '+' %2 0 %6), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"	%8	a, #%3\n"
"	%9	a, #%4\n"
"	ld	(%1), a\n"
"} by {\n"
"	ld	a, %10\n"
"	%8	a, #%3\n"
"	%9	a, #%4\n"
"	ld	%10, a\n"
"	; peephole 340x exchanged 'ldw-ld-%8-%9-ld' by 'ld-%8-%9-ld direct' ('%2' -> '%10').\n"
"} if same(%1 'x' 'y'), same(%8 'or' 'and'), same(%9 'or' 'and'), notUsed(%1), removeParentheses(%2 %10)\n"
"\n"
"replace restart {\n"
"	rlc	a\n"
"	xor	a, #0x01\n"
"} by {\n"
"	ccf\n"
"	; peephole 20a replaced xor by ccf-\n"
"	rlc	a\n"
"} if notUsed('c')\n"
"\n"
"replace restart {\n"
"	clr	a\n"
"	and	a, %1\n"
"} by {\n"
"	clr	a\n"
"	; peephole 22 removed redundant and.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	clr	a\n"
"	or	a, %1\n"
"} by {\n"
"	; peephole 22a removed redundant clr a.\n"
"	ld	a, %1\n"
"}\n"
"\n"
"replace restart {\n"
"	clr	a\n"
"	or	a, (%1, %2)\n"
"} by {\n"
"	; peephole 22b removed redundant clr a.\n"
"	ld	a, (%1, %2)\n"
"}\n"
"\n"
"replace restart {\n"
"	tnzw	%1\n"
"	jrne	%2\n"
"	clrw	%1\n"
"} by {\n"
"	tnzw	%1\n"
"	jrne	%2\n"
"	; peephole 22c removed redundant clrw %1.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%3, %4)\n"
"	jrne	%2\n"
"	clrw	%1\n"
"} by {\n"
"	ldw	%1, (%3, %4)\n"
"	jrne	%2\n"
"	; peephole 22d removed redundant clrw %1.\n"
"}\n"
"\n"
"replace restart {\n"
"	push	a\n"
"	clr	a\n"
"	clr	(%1, sp)\n"
"} by {\n"
"	clr	a\n"
"	push	a\n"
"	; peephole 22e optimise 'push-clr-clr' sequence, remove 'clr (%1, sp)' and reorder to 'clr-push'.\n"
"} if immdInRange(1 1 '+' 0 %1 %2)\n"
"\n"
"replace restart {\n"
"	%3	a, %1\n"
"	tnz	a\n"
"} by {\n"
"	%3	a, %1\n"
"	; peephole 23 removed redundant tnz.\n"
"} if same(%3 'and' 'or' 'xor' 'add' 'adc' 'sub' 'sbc')\n"
"\n"
"replace restart {\n"
"	%3	(%1, %2)\n"
"	tnz	(%1, %2)\n"
"} by {\n"
"	%3	(%1, %2)\n"
"	; peephole 24 removed redundant tnz.\n"
"} if same(%3 'neg' 'cpl' 'inc' 'dec' 'sll' 'srl' 'sra' 'rlc' 'rrc')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	tnz	a\n"
"} by {\n"
"	ld	a, %1\n"
"	; peephole 30 removed redundant tnz.\n"
"} if notSame(%1 'xl' 'xh' 'yl' 'yh')\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%1)\n"
"	tnzw	%1\n"
"} by {\n"
"	ldw	%1, (%1)\n"
"	; peephole 30bw removed redundant tnzw.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, (%1, %2)\n"
"	tnz	a\n"
"} by {\n"
"	ld	a, (%1, %2)\n"
"	; peephole 31 removed redundant tnz.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%2, %3)\n"
"	tnzw	%1\n"
"} by {\n"
"	ldw	%1, (%2, %3)\n"
"	; peephole 31w removed redundant tnzw.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	(%1, %2), a\n"
"	tnz	(%1, %2)\n"
"} by {\n"
"	ld	(%1, %2), a\n"
"	; peephole 31a removed redundant tnz.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	(%1, %2), a\n"
"	tnz	a\n"
"} by {\n"
"	ld	(%1, %2), a\n"
"	; peephole 31b removed redundant tnz.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), x\n"
"	tnzw	(%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), x\n"
"	; peephole 31c removed redundant tnzw.\n"
"}\n"
"\n"
"replace restart {\n"
"	rlc	a\n"
"	tnz	a\n"
"} by {\n"
"	rlc	a\n"
"	; peephole 32 removed redundant tnz.\n"
"}\n"
"\n"
"replace restart {\n"
"	addw	sp, #%1\n"
"	addw	sp, #%2\n"
"} by {\n"
"	addw	sp, #%9\n"
"	; peephole 33 combined additions to sp.\n"
"} if immdInRange(0 255 '+' %1 %2 %9)\n"
"\n"
"replace restart {\n"
"	pop	a\n"
"	addw	sp, #%2\n"
"} by {\n"
"	addw	sp, #%9\n"
"	; peephole 34 merged pop a into addw.\n"
"} if notUsed('a'), immdInRange(0 255 '+' 1 %2 %9)\n"
"\n"
"replace restart {\n"
"	addw	sp, #%2\n"
"	pop	a\n"
"} by {\n"
"	addw	sp, #%9\n"
"	; peephole 35 merged pop a into addw.\n"
"} if notUsed('a'), immdInRange(0 255 '+' 1 %2 %9)\n"
"\n"
"replace restart {\n"
"	popw	x\n"
"	addw	sp, #%2\n"
"} by {\n"
"	addw	sp, #%9\n"
"	; peephole 36 merged popw x into addw.\n"
"} if notUsed('x'), immdInRange(0 255 '+' 2 %2 %9)\n"
"\n"
"replace restart {\n"
"	addw	sp, #%2\n"
"	popw	x\n"
"} by {\n"
"	addw	sp, #%9\n"
"	; peephole 37 merged popw x into addw.\n"
"} if notUsed('x'), immdInRange(0 255 '+' 2 %2 %9)\n"
"\n"
"replace restart {\n"
"	pop	a\n"
"	pop	a\n"
"} by {\n"
"	popw	x\n"
"	; peephole 38 merged pop a into popw x\n"
"} if notUsed('a'), notUsed('x')\n"
"\n"
"replace restart {\n"
"	pop	a\n"
"	popw	x\n"
"} by {\n"
"	addw	sp, #3\n"
"	; peephole 39 merged popw x into addw.\n"
"} if notUsed('a'), notUsed('x')\n"
"\n"
"replace restart {\n"
"	popw	x\n"
"	pop	a\n"
"} by {\n"
"	addw	sp, #3\n"
"	; peephole 40 merged popw x into addw.\n"
"} if notUsed('a'), notUsed('x')\n"
"\n"
"replace restart {\n"
"	popw	x\n"
"	popw	x\n"
"} by {\n"
"	addw	sp, #4\n"
"	; peephole 41 merged popw x into addw.\n"
"} if notUsed('x')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrc	%3\n"
"	ld	a, %1\n"
"} by {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrc	%3\n"
"	; peephole 42 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrslt	%3\n"
"	ld	a, %1\n"
"} by {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrslt	%3\n"
"	; peephole 43 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrsle	%3\n"
"	ld	a, %1\n"
"} by {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrsle	%3\n"
"	; peephole 44 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrule	%3\n"
"	ld	a, %1\n"
"} by {\n"
"	ld	a, %1\n"
"	cp	a, %2\n"
"	jrule	%3\n"
"	; peephole 45 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrc	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrc	%3\n"
"	; peephole 46 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrslt	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrslt	%3\n"
"	; peephole 47 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrsle	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrsle	%3\n"
"	; peephole 48 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrule	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrule	%3\n"
"	; peephole 49 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrnc	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	cpw	x, %2\n"
"	jrnc	%3\n"
"	; peephole 50 removed redundant load of a from %1.\n"
"} if notVolatile(%1), notUsed('n'), notUsed('z')\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	jreq	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	jreq	%3\n"
"	; peephole 50eq removed redundant load of x from %1.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ldw	x, %1\n"
"	jrne	%3\n"
"	ldw	x, %1\n"
"} by {\n"
"	ldw	x, %1\n"
"	jrne	%3\n"
"	; peephole 50ne removed redundant load of x from %1.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	cp	a, %1\n"
"	jrne	%2\n"
"	ld	a, #0x01\n"
"} by {\n"
"	sub	a, %1\n"
"	jrne	%2\n"
"	inc	a\n"
"	; peephole 51 used inc to get #1 into a.\n"
"} if notUsedFrom(%2 'a')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	%2	a, #%3\n"
"} by {\n"
"	ld	a, %1\n"
"	; peephole 600a removed unneeded %2 a, #%3\n"
"} if same(%2 'cp' 'sub'), operandsLiteral(%3), immdInRange(0 0 '+' 0 %3 %4), notUsed('v' 'c')\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	%2	a, #%3\n"
"} by {\n"
"	ld	%1, a\n"
"	; peephole 600b removed unneeded %2 a, #%3\n"
"} if same(%2 'cp' 'sub'), operandsLiteral(%3), immdInRange(0 0 '+' 0 %3 %4), notUsed('v' 'c')\n"
"\n"
"replace restart {\n"
"	ld	a, (%1, sp)\n"
"	%5	a\n"
"	ld	(%2, sp), a\n"
"} by {\n"
"	%5	(%1, sp)\n"
"	ld	a, (%1, sp)\n"
"	; peephole 610 optimized direct operation in stack (%5).\n"
"}if same(%5 'swap' 'clr' 'dec' 'inc' 'neg' 'cpl'), immdInRange(0 0 '-' %1 %2 %7), notVolatile(%1)\n"
"\n"
"replace restart {\n"
"%3:\n"
"	ld	a,	%1\n"
"	%4	a,	#%2\n"
"	jr%5	%3\n"
"} by {\n"
"%3:\n"
"	ld	a,	#%2\n"
"%6:\n"
"	%4	a,	%1\n"
"	jr%5	%6\n"
"	; peephole 620x moved 'ld' outside of loop: '%4-jr%5' ('%1').\n"
"} if same(%4 'cp' 'bcp'), same(%5 'ne' 'eq'), operandsLitOrSym(%1), notUsed('a'), notUsedFrom(%3 'a'), newLabel(%6), labelRefCountChange(%3 -1)\n"
"\n"
"replace restart {\n"
"	tnz	_%1\n"
"} by {\n"
"	ld	a, _%1\n"
"	; peephole 625a changed tnz by ld\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"} by {\n"
"	bcp	a, #%1\n"
"	; peephole 500 replaced 'and' by 'bcp'.\n"
"} if operandsLiteral(%1), immdInRange(0 255 '+' 0 %1 %2), notUsed('a')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	bcp	a, #%1\n"
"} by {\n"
"	bcp	a, #%2\n"
"	; peephole 510 replaced 'srl-bcp' (%1) by 'bcp' (%2).\n"
"} if operandsLiteral(%1), immdInRange(2 255 '*' %1 2 %2), notUsed('a' 'n' 'c')\n"
"\n"
"replace restart {\n"
"	swap	a\n"
"	bcp	a, #%1\n"
"} by {\n"
"	bcp	a, #%2\n"
"	; peephole 511 replaced 'swap-bcp' (%1) by 'bcp' (%2).\n"
"} if operandsLiteral(%1), immdInRange(0 255 'swap' %1 8 %2), notUsed('a' 'n' 'c')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	and	a, #%1\n"
"	cp	a, #%2\n"
"} by {\n"
"	and	a, #%3\n"
"	cp	a, #%4\n"
"	; peephole 512 replaced 'srl-and-cp' (%1 %2) by 'and-cp' (%3 %4).\n"
"} if operandsLiteral(%1 %2), immdInRange(2 255 '*' %1 2 %3), immdInRange(2 255 '*' %2 2 %4), notUsed('a')\n"
"  \n"
"replace restart {\n"
"	swap	a\n"
"	and	a, #%1\n"
"	cp	a, #%2\n"
"} by {\n"
"	and	a, #%3\n"
"	cp	a, #%4\n"
"	; peephole 513 replaced 'swap-and-cp' (%1 %2) by 'and-cp' (%3 %4).\n"
"} if operandsLiteral(%1 %2), immdInRange(0 255 'swap' %1 8 %3), immdInRange(0 255 'swap' %2 8 %4), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	a, (%1)\n"
"} by {\n"
"	ld	a, %10\n"
"	; peephole 630x replaced 'ldw-ld' by 'ld direct' ('%2' -> '%10').\n"
"} if same(%1 'x' 'y'), notUsed(%1), removeParentheses(%2 %10)\n"
"\n"
"replace restart {\n"
"	ldw	%1, #(%2)\n"
"	ld	a, %2\n"
"} by {\n"
"	ldw	%1, #(%2)\n"
"	ld	a, (%1)\n"
"	; peephole 631 replaced 'ldw-ld' by 'ldw-ld' with index register (%1).\n"
"}\n"
"\n"
"replace restart {\n"
"	addw	%1, %2\n"
"} by {\n"
"	; peephole 640 removed dead addw into %1 from %2.\n"
"} if same(%1 'x' 'y'), notVolatile(%2), notUsed(%1), notUsed('n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	addw	%1, (%2, sp)\n"
"} by {\n"
"	; peephole 641 removed dead addw into %1 from (%2, sp).\n"
"} if notUsed(%1), notUsed('n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	incw	%1\n"
"} by {\n"
"	; peephole 642 removed dead incw %1.\n"
"} if notUsed(%1), notUsed('n' 'z')\n"
"\n"
"replace restart {\n"
"	jr%1	%2\n"
"%2:\n"
"} by {\n"
"%2:\n"
"	; peephole 650 removed redundant relative jump 'jr%1'.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	ld	a, (%1, sp)\n"
"	swap	a\n"
"	and	a, #%3	\n"
"	ld	xl, a\n"
"	ld	a, (%1, sp)\n"
"	swap	a\n"
"	and	a, #%4\n"
"	pushw	x\n"
"	%5	a, (%2, sp)\n"
"	popw	x\n"
"} by {\n"
"	ld	a, (%1, sp)\n"
"	swap	a\n"
"	; peephole 660c optimized swap (v3).\n"
"} if same(%5 'or' 'add'), operandsLiteral(%3 %4), immdInRange(0xFF 0xFF '^' %3 %4 %6), immdInRange(2 2 '+' %2 0 %7), notUsed('x')\n"
"\n"
"replace restart {\n"
"	addw	sp, #%1\n"
"} by {\n"
"	pop	a\n"
"	; peephole 670 replaced 'addw sp, #1' by 'pop a'\n"
"} if optimizeFor('code-size'), operandsLiteral(%1), immdInRange(1 1 '+' 0 %1 %2), notUsed('a')\n"
"\n"
"replace restart {\n"
"	addw	sp, #%1\n"
"} by {\n"
"	popw	x\n"
"	; peephole 671 replaced 'addw sp, #2' by 'popw x'\n"
"} if optimizeFor('code-size'), operandsLiteral(%1), immdInRange(2 2 '+' 0 %1 %2), notUsed('x')\n"
"\n"
"\n"
"replace restart {\n"
"	l%1	(%4, sp), %2\n"
"	addw	sp, #%5\n"
"	re%3\n"
"} by {\n"
"	; peephole 680 removed dead l%1 into stack variable %4 (%6).\n"
"	addw	sp, #%5\n"
"	re%3\n"
"} if same(%1 'd' 'dw'), operandsLiteral(%5), immdInRange(-100000 0 '-' %4 %5 %6)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	dec	a\n"
"	jrne	%2\n"
"} by {\n"
"	bcp	a, #%1\n"
"	jreq	%2\n"
"	; peephole j520 replaced 'and-dec-jrne' by 'bcp-jreq'.\n"
"} if operandsLiteral(%1), immdInRange(1 1 '+' 0 %1 %2), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%2 'a' 'n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	dec	a\n"
"	jreq	%2\n"
"} by {\n"
"	bcp	a, #%1\n"
"	jrne	%2\n"
"	; peephole j521 replaced 'and-dec-jreq' by 'bcp-jrne'.\n"
"} if operandsLiteral(%1), immdInRange(1 1 '+' 0 %1 %2), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%2 'a' 'n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	bcp	a, #%2\n"
"	jreq	%3\n"
"} by {\n"
"	btjf	%1, #%4, %3\n"
"	; peephole j530x replaced 'ld-bcp-jreq' by 'btjf' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%2), immdInRange(0 7 'singleSetBit' %2 8 %4), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%3 'a' 'n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	ld	a,	%1\n"
"	bcp	a,	#%2\n"
"	jrne	%3\n"
"} by {\n"
"	btjt	%1, #%4, %3\n"
"	; peephole j531x replaced 'ld-bcp-jrne' by 'btjt' ('%1').\n"
"} if operandsLitOrSym(%1), operandsLiteral(%2), immdInRange(0 7 'singleSetBit' %2 8 %4), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%3 'a' 'n' 'z' 'c')\n"
"\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	jrc	%2\n"
"} by {\n"
"	btjt	%1, #0, %2\n"
"	; peephole j540x replaced 'ld-srl-jrc' by 'btjt' ('%1').\n"
"} if operandsLitOrSym(%1), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%2 'a' 'n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	jrnc	%2\n"
"} by {\n"
"	btjf	%1, #0, %2\n"
"	; peephole j541x replaced 'ld-srl-jrnc' by 'btjf' ('%1').\n"
"} if operandsLitOrSym(%1), notUsed('a' 'n' 'z' 'c'), notUsedFrom(%2 'a' 'n' 'z' 'c')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	bcp	a, #%2\n"
"	jreq	%3\n"
"} by {\n"
"	ld	a, %1\n"
"	jrpl	%3\n"
"	; peephole j550 replaced 'ld-bcp-jreq' by 'ld-jrpl'.\n"
"} if operandsLiteral(%2), immdInRange(0x80 0x80 '+' %2 0 %4), notUsed('n' 'z'), notUsedFrom(%3 'n' 'z')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	bcp	a, #%2\n"
"	jrne	%3\n"
"} by {\n"
"	ld	a, %1\n"
"	jrmi	%3\n"
"	; peephole j551 replaced 'ld-bcp-jrne' by 'ld-jrmi'.\n"
"} if operandsLiteral(%2), immdInRange(0x80 0x80 '+' %2 0 %4), notUsed('n' 'z'), notUsedFrom(%3 'n' 'z')\n"
"\n"
"replace restart {\n"
"	srl	a\n"
"	and	a, #%1\n"
"	dec	a\n"
"} by {\n"
"	and	a, #%3\n"
"	cp	a, #2\n"
"	; peephole 515 replaced 'srl-and-dec' (%1) by 'and-cp' (%3 2).\n"
"} if operandsLiteral(%1), immdInRange(2 255 '*' %1 2 %3), notUsed('a' 'c')\n"
"  \n"
"replace restart {\n"
"	swap	a\n"
"	and	a, #%1\n"
"	dec	a\n"
"} by {\n"
"	and	a, #%3\n"
"	cp	a, #16\n"
"	; peephole 516 replaced 'swap-and-dec' (%1) by 'and-cp' (%3 16).\n"
"} if operandsLiteral(%1), immdInRange(0 255 'swap' %1 8 %3), notUsed('a' 'c')\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 52 removed unreachable ret.\n"
"}\n"
"\n"
"replace {\n"
"	jpf	%5\n"
"	retf\n"
"} by {\n"
"	jpf	%5\n"
"	; peephole 52a removed unreachable retf.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"	addw	sp, %1\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 53 removed unreachable addw.\n"
"}\n"
"\n"
"replace restart {\n"
"	jpf	%5\n"
"	addw	sp, %1\n"
"} by {\n"
"	jpf	%5\n"
"	; peephole 53a removed unreachable addw.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"	popw	%1\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 53b removed unreachable popw.\n"
"}\n"
"\n"
"replace restart {\n"
"	jpf	%5\n"
"	popw	%1\n"
"} by {\n"
"	jpf	%5\n"
"	; peephole 53c removed unreachable popw.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"	ldw	%1, (%2, sp)\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 54 removed unreachable ldw.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"	jp	(%1)\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 55 removed unreachable jp (%1).\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jp	%6\n"
"	; peephole j1 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jpf	%5\n"
"} by {\n"
"	jpf	%6\n"
"	; peephole j1a jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%1:\n"
"} by {\n"
"%1:\n"
"	; peephole j1b removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jpf	%1\n"
"%1:\n"
"} by {\n"
"%1:\n"
"	; peephole j1c removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"%2:\n"
"%1:\n"
"	; peephole j1d removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jpf	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"%2:\n"
"%1:\n"
"	; peephole j1e removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jra	%1\n"
"%1:\n"
"} by {\n"
"%1:\n"
"	; peephole j1f removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"	jp	%2\n"
"} by {\n"
"	jp	%1\n"
"	; peephole j2a removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jra	%1\n"
"	jp	%2\n"
"} by {\n"
"	jra	%1\n"
"	; peephole j2b removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"	jra	%2\n"
"} by {\n"
"	jp	%1\n"
"	; peephole jc2 removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jra	%1\n"
"	jra	%2\n"
"} by {\n"
"	jra	%1\n"
"	; peephole j2d removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jreq	%1\n"
"	jreq	%2\n"
"} by {\n"
"	jreq	%1\n"
"	; peephole j2d-eq removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jrne	%1\n"
"	jrne	%2\n"
"} by {\n"
"	jrne	%1\n"
"	; peephole j2d-ne removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	ret\n"
"	; peephole j2e replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jpf	%5\n"
"} by {\n"
"	retf\n"
"	; peephole j2f replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	btjt	%1, #0, %2\n"
"} by {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	; peephole j3 jumped by carry bit instead of testing bit explicitly.\n"
"	jrc %2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	btjf	%1, #0, %2\n"
"} by {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	; peephole j4 jumped by carry bit instead of testing bit explicitly.\n"
"	jrnc %2\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jra	%5\n"
"	; peephole j5 changed absolute to relative unconditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jpf	%5\n"
"} by {\n"
"	jra	%5\n"
"	; peephole j5a changed absolute to relative unconditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jrc	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrnc	%5\n"
"	; peephole j6 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jreq	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrne	%5\n"
"	; peephole j7 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jreq	%1\n"
"	jrne	%2\n"
"%1:\n"
"} by {\n"
"	jrne	%2\n"
"	; peephole j7-eq-ne replaced jreq-jrne by jrne\n"
"%1:	\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrne	%1\n"
"	jreq	%2\n"
"%1:\n"
"} by {\n"
"	jreq	%2\n"
"	; peephole j7-ne-eq replaced jrne-jreq by jreq\n"
"%1:	\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrmi	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrpl	%5\n"
"	; peephole j8 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrnc	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrc	%5\n"
"	; peephole j9 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrne	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jreq	%5\n"
"	; peephole j10 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrpl	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrmi	%5\n"
"	; peephole j11 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsge	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrslt	%5\n"
"	; peephole j12 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsgt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsle	%5\n"
"	; peephole j13 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsle	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsgt	%5\n"
"	; peephole j14 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrslt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsge	%5\n"
"	; peephole j15 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrugt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrule	%5\n"
"	; peephole j16 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrule	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrugt	%5\n"
"	; peephole j17 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrc	%5\n"
"} by {\n"
"	jrc	%6\n"
"	; peephole j18 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jreq	%5\n"
"} by {\n"
"	jreq	%6\n"
"	; peephole j19 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrmi	%5\n"
"} by {\n"
"	jrmi	%6\n"
"	; peephole j20 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrnc	%5\n"
"} by {\n"
"	jrnc	%6\n"
"	; peephole j21 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrne	%5\n"
"} by {\n"
"	jrne	%6\n"
"	; peephole j22 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrpl	%5\n"
"} by {\n"
"	jrpl	%6\n"
"	; peephole j23 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrge	%5\n"
"} by {\n"
"	jrge	%6\n"
"	; peephole j24 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrgt	%5\n"
"} by {\n"
"	jrgt	%6\n"
"	; peephole j25 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrle	%5\n"
"} by {\n"
"	jrle	%6\n"
"	; peephole j26 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrlt	%5\n"
"} by {\n"
"	jrlt	%6\n"
"	; peephole j27 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrugt	%5\n"
"} by {\n"
"	jrugt	%6\n"
"	; peephole j28 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrule	%5\n"
"} by {\n"
"	jrule	%6\n"
"	; peephole j29 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	call	%5\n"
"} by {\n"
"	callr	%5\n"
"	; peephole j30 changed absolute to relative call.\n"
"} if labelInRange(%5)\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole j30 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"replace restart {\n"
"	ldw	x, (%1, sp)\n"
"	cpw	x, #%2\n"
"	jrsge	%3\n"
"	ldw	x, #%2\n"
"} by {\n"
"	ldw	x, #%2\n"
"	cpw	x, (%1, sp)\n"
"	jrslt	%3\n"
"	; peephole j31 removed load by inverting jump condition.\n"
"} if notUsedFrom(%3 'x')\n"
"\n"
"replace restart {\n"
"	ldw	x, (%1, sp)\n"
"	cpw	x, #%2\n"
"	jrsle	%3\n"
"	ldw	x, #%2\n"
"} by {\n"
"	ldw	x, #%2\n"
"	cpw	x, (%1, sp)\n"
"	jrsgt	%3\n"
"	; peephole j32 removed load by inverting jump condition.\n"
"} if notUsedFrom(%3 'x')\n"
"\n"
"replace restart {\n"
"	btjt	%1, %2, %3\n"
"	jra	%4\n"
"%3:\n"
"} by {\n"
"	btjf	%1, %2, %4\n"
"	; peephole j33 removed jra by using inverse bit-test-jump logic\n"
"%3:\n"
"} if labelRefCountChange(%3 -1)\n"
"\n"
"replace restart {\n"
"	btjf	%1, %2, %3\n"
"	jra	%4\n"
"%3:\n"
"} by {\n"
"	btjt	%1, %2, %4\n"
"	; peephole j34 removed jra by using inverse bit-test-jump logic\n"
"%3:\n"
"} if labelRefCountChange(%3 -1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	ld	xl, a\n"
"	ld	a, xh\n"
"} by {\n"
"	rlwa	x\n"
"	; peephole r1 used rlwa.\n"
"} if notUsed('xh')\n"
"\n"
"replace restart {\n"
"	ld	yl, a\n"
"	ld	a, yh\n"
"} by {\n"
"	rlwa	y\n"
"	; peephole r2 used rlwa.\n"
"} if notUsed('yh')\n"
"\n"
"replace restart {\n"
"	ld	xh, a\n"
"	ld	a, xl\n"
"} by {\n"
"	rrwa	x\n"
"	; peephole r3 used rrwa.\n"
"} if notUsed('xl')\n"
"\n"
"replace restart {\n"
"	ld	yh, a\n"
"	ld	a, yl\n"
"} by {\n"
"	rrwa	y\n"
"	; peephole r4 used rrwa.\n"
"} if notUsed('yl')\n"
"\n"
"barrier\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%2:\n"
"	clr	a\n"
"%5:\n"
"} by {\n"
"	.byte 0x21\n"
"	; peephole jrf1 used jump-on-false opcode to shorten jump over 1-byte instruction.\n"
"	%2:\n"
"	clr	a\n"
"	%5:\n"
"} if labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%2:\n"
"	clrw	x\n"
"%5:\n"
"} by {\n"
"	.byte 0x21\n"
"	; peephole jrf2 used jump-on-false opcode to shorten jump over 1-byte instruction.\n"
"	%2:\n"
"	clrw	x\n"
"	%5:\n"
"} if labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%2:\n"
"	ld	a, xl\n"
"%5:\n"
"} by {\n"
"	.byte 0x21\n"
"	; peephole jrf3 used jump-on-false opcode to shorten jump over 1-byte instruction.\n"
"	%2:\n"
"	ld	a, xl\n"
"	%5:\n"
"} if labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jrugt	%1\n"
"	clr	a\n"
"	jra	%2\n"
"%1:\n"
"	ld	a, #0x01\n"
"%2:\n"
"} by {\n"
"	jrule	%1\n"
"	ld	a, #0x01\n"
"	.byte 0x21\n"
"	; peephole jrf4 used jump-on-false opcode to shorten jump over 1-byte instruction.\n"
"%1:\n"
"	clr	a\n"
"%2:\n"
"} if labelRefCount(%1 1), labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%2:\n"
"	ldw	x, y\n"
"%5:\n"
"} by {\n"
"	.byte 0x21\n"
"	; peephole jrf5 used jump-on-false opcode to shorten jump over 1-byte instruction.\n"
"	%2:\n"
"	ldw	x, y\n"
"	%5:\n"
"} if labelRefCountChange(%5 -1)\n"
"\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	ld	a, #%2\n"
"%5:\n"
"} by {\n"
"	.byte 0xc5\n"
"	; peephole jrf6 used bcp opcode to jump over 2-byte instruction.\n"
"%1:\n"
"	ld	a, #%2\n"
"%5:\n"
"} if notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	clr	(%2, sp)\n"
"%5:\n"
"} by {\n"
"	.byte 0xc5\n"
"	; peephole jrf7 used bcp opcode to jump over 2-byte instruction.\n"
"%1:\n"
"	clr	(%2, sp)\n"
"%5:\n"
"} if notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	clrw	x\n"
"	incw	x\n"
"%5:\n"
"} by {\n"
"	.byte 0xc5\n"
"	; peephole jrf8 used bcp opcode to jump over 2-byte instruction sequence.\n"
"%1:\n"
"	clrw	x\n"
"	incw	x\n"
"%5:\n"
"} if notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	ldw	x, (%2, sp)\n"
"%5:\n"
"} by {\n"
"	.byte 0xc5\n"
"	; peephole jrf9 used bcp opcode to jump over 2-byte instruction.\n"
"%1:\n"
"	ldw	x, (%2, sp)\n"
"%5:\n"
"} if notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	ldw	x, #%2\n"
"%5:\n"
"} by {\n"
"	.byte 0xbc\n"
"	; peephole jrf10 used ldf opcode to jump over 3-byte instruction.\n"
"%1:\n"
"	ldw	x, #%2\n"
"%5:\n"
"} if notUsed('a'), notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jra	%5\n"
"%1:\n"
"	clrw	x\n"
"	ldw	(%2, sp), x\n"
"%5:\n"
"} by {\n"
"	.byte 0xbc\n"
"	; peephole jrf11 used ldf opcode to jump over 3-byte instructions.\n"
"%1:\n"
"	clrw	x\n"
"	ldw	(%2, sp), x\n"
"%5:\n"
"} if notUsed('a'), notUsed('n'), notUsed('z'), labelRefCountChange(%5 -1)\n"
"\n"
