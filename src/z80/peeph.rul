/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1, %1\n"
"} by {\n"
"	; common peephole 0a removed redundant load from %1 into %1.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%2, %1\n"
"	ld	%3, %4\n"
"	ld	%1, %2\n"
"} by {\n"
"	ld	%2, %1\n"
"	ld	%3, %4\n"
"	; common peephole 0b removed redundant load from %2 back into %1.\n"
"}if isPort('sm83'), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)'), operandsNotRelated(%3 %1), operandsNotRelated(%3 %2), notVolatile(%1), notVolatile(%2), \n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"} by {\n"
"	; common peephole 1 removed dead load from %2 into %1.\n"
"} if notVolatile(%1), notUsed(%1), notVolatile(%2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	%1	hl, %2\n"
"} by {\n"
"	; common peephole 2a removed %1 hl, %2 due to unused result.\n"
"} if same(%1 'adc' 'sbc'), notUsed('hl' 'f')\n"
"\n"
"replace restart {\n"
"	add	hl, %2\n"
"} by {\n"
"	; common peephole 2b removed add hl, %2 due to unused result.\n"
"} if notUsed('hl' 'cf' 'nf')\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; common peephole 2c removed %1 %2 due to unused result.\n"
"} if same(%1 'dec' 'inc'), same(%2 'bc' 'de' 'hl' 'sp' 'ix' 'iy'), notUsed(%2)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 + %3\n"
"} by {\n"
"	; common peephole 3 removed dead load from %2 + %3 into %1.\n"
"} if notVolatile(%1), notUsed(%1), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%1, (%2)\n"
"} by {\n"
"	ld	%1, 0 (%2)\n"
"	; common peephole 4a made 0 offset explicit.\n"
"} if same(%2 'ix' 'iy')\n"
"\n"
"replace restart {\n"
"	ld	(%1), %2\n"
"} by {\n"
"	ld	0 (%1), %2\n"
"	; common peephole 4b made 0 offset explicit.\n"
"} if same(%1 'ix' 'iy')\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; common peephole 5 removed dead %1 %2.\n"
"} if same(%1 'inc' 'dec'), same(%2 'bc' 'de' 'hl' 'sp' 'ix' 'iy'), notUsed(%2)\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; common peephole 6a removed dead %1 %2\n"
"} if same(%1 'inc' 'dec'), same(%2 'a' 'b' 'c' 'd' 'e' 'h' 'l' 'ixh' 'ixl' 'iyh' 'iyl'), notUsed(%2 'f')\n"
"\n"
"replace restart {\n"
"	%1	a, %2\n"
"} by {\n"
"	; common peephole 6b removed dead %1 a, %2\n"
"} if same(%1 'sub' 'sbc' 'add' 'adc' 'and' 'or' 'xor'), notUsed('af')\n"
"\n"
"replace restart {\n"
"	cp	a, %1\n"
"} by {\n"
"	; common peephole 6c removed dead cp a, %1\n"
"} if notUsed('f')\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; common peephole 6d removed dead %1 %2\n"
"} if same(%1 'rlc' 'rl' 'rrc' 'rr' 'sla' 'sra' 'srl' 'sll' 'sli'), notVolatile(%2), notUsed(%2 'f')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"} by {\n"
"	; common peephole 7 removed dead load from %2 (%3) into %1.\n"
"} if notUsed(%1), same(%3 'ix' 'iy')\n"
"\n"
"replace {\n"
"	ex	de, hl\n"
"	ex	de, hl\n"
"} by {\n"
"	; common peephole 8 removed double de/hl swap.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"} by {\n"
"	; common peephole 9 loaded %3 from %2 directly instead of going through %1.\n"
"	ld	%3, %2\n"
"} if canAssign(%3 %2), notVolatile(%1), notUsed(%1), notSame(%3 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"} by {\n"
"	; common peephole 9a loaded %3 from %2 directly instead of going through %1.\n"
"	ld	%3, %2\n"
"} if canAssign(%3 %2), notVolatile(%1), notUsed(%1), canAssign('a' %1), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%1, hl\n"
"	ld	hl, %1\n"
"} by {\n"
"	; common peephole 9b reused value still in hl.\n"
"	ld	%1, hl\n"
"} if notVolatile(%1), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %4\n"
"	ld	%5, %1\n"
"} by {\n"
"	ld	%5, %2\n"
"	; common peephole 10 loaded %5 from %2 directly instead of going through %1.\n"
"	ld	%3, %4\n"
"} if canAssign(%5 %2), notVolatile(%1), operandsNotRelated(%1 %4), operandsNotRelated(%1 %3), operandsNotRelated(%3 %5), operandsNotRelated(%4 %5), notUsed(%1), notSame(%3 %4 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'),\n"
"   notVolatile(%5), notSame(%1 '(hl+)' '(hl-)'), notSame(%5 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%3 (ix), %1\n"
"	ld	%4 (ix), %2\n"
"	ld	%5, %3 (ix)\n"
"	ld	%6, %4 (ix)\n"
"} by {\n"
"	ld	%3 (ix), %1\n"
"	ld	%4 (ix), %2\n"
"	; common peephole 11 loaded %5%6 from %1%2 directly instead of going through %3 (ix) %4 (ix).\n"
"	ld	%5, %1\n"
"	ld	%6, %2\n"
"} if canAssign(%5 %1), canAssign(%6 %2), notSame(%5 %2)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %1\n"
"} by {\n"
"	; common peephole 12 loaded %2 (%3) into %4 directly instead of going through %1.\n"
"	ld	%4, %2 (%3)\n"
"} if canAssign(%4 %2 %3), notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3 (%4), %1\n"
"} by {\n"
"	; common peephole 13 loaded %2 into %3 (%4) directly instead of going through %1.\n"
"	ld	%3 (%4), %2\n"
"} if canAssign(%3 %4 %2), notVolatile(%1), notUsed(%1), canAssign('a' %1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %5 (%6)\n"
"	ld	%7, %1\n"
"} by {\n"
"	ld	%7, %2 (%3)\n"
"	; common peephole 14 loaded %2 (%3) into %7 directly instead of going through %1.\n"
"	ld	%4, %5 (%6)\n"
"} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), notSame(%1 %4), notSame(%7 %4)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %5\n"
"	ld	%7, %1\n"
"} by {\n"
"	ld	%7, %2 (%3)\n"
"	; common peephole 15 loaded %2 (%3) into %7 directly instead of going through %1.\n"
"	ld	%4, %5\n"
"} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), operandsNotRelated(%1 %5), operandsNotRelated(%7 %4), operandsNotRelated(%7 %5), notSame(%4 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'), notSame(%5 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)' '(iy)')\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	a,%3 (%1)\n"
"} by {\n"
"	; common peephole 16 loaded %2 into a directly instead of going through %1.\n"
"	ld	a,(#%2 + %3)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	hl, #%1\n"
"	ld	a, (hl)\n"
"} by {\n"
"	ld	a, (#%1)\n"
"	; common peephole 17 loaded a from (#%1) directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1 + %2\n"
"	ld	a,(hl)\n"
"} by {\n"
"	; common peephole 18 loaded %2 into a directly instead of using hl.\n"
"	ld	a, (#%1 + %2)\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	(#%1),a\n"
"	; common peephole 19 loaded (#%1) from a directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	(#%1 + %2),a\n"
"	; common peephole 20 loaded (#%1) from a directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%2)\n"
"	%3	a\n"
"	ld	%1 (%2), a\n"
"} by {\n"
"	%3	%1 (%2)\n"
"	ld	a, %1 (%2)\n"
"	; common peephole 21 shifted in (%2) instead of a.\n"
"} if same(%3 'srl' 'sla' 'rl' 'rr' 'rlc' 'rrc' 'sll')\n"
"\n"
"replace restart {\n"
"	ld	%1,(hl)\n"
"	ld	a,%2 (%3)\n"
"	%4	a,%1\n"
"} by {\n"
"	ld	a,%2 (%3)\n"
"	; common peephole 22 used (hl) in %4 directly instead of going through %1.\n"
"	%4	a,(hl)\n"
"} if notVolatile(%1), notUsed(%1), same(%4 'add' 'adc' 'sub' 'sbc' 'and' 'or' 'xor')\n"
"\n"
"replace restart {\n"
"	ld	l, %1\n"
"	ld	h, %2\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"} by {\n"
"	ld	a, (%3)\n"
"	ld	l, a\n"
"	inc	%3\n"
"	ld	a, (%3)\n"
"	ld	h, a\n"
"	; common peephole 23 optimize 16-bit load from %3.\n"
"} if canJoinRegs(%2 %1 %3), notUsed(%3 'a')\n"
"\n"
"replace restart {\n"
"	inc	%1\n"
"	ld	l, %2\n"
"	ld	h, %3\n"
"} by {\n"
"	ld	l, %2\n"
"	ld	h, %3\n"
"	; common peephole 24 incremented in hl instead of %1.\n"
"	inc	hl\n"
"} if canJoinRegs(%3 %2 %4), same(%1 %4), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, l\n"
"	ld	%2, h\n"
"	ld	a, #%3\n"
"	ld	(%4), a\n"
"} by {\n"
"	ld	%1, l\n"
"	ld	%2, h\n"
"	ld	(hl), #%3\n"
"	; common peephole 25a loaded #%1 into (hl) instead of (%4).\n"
"} if canJoinRegs(%2 %1 %5), same(%4 %5), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	%1, %6\n"
"	ld	%2, %7\n"
"	ld	a, #%3\n"
"	ld	(%4), a\n"
"} by {\n"
"	ld	%1, %6\n"
"	ld	%2, %7\n"
"	ld	a, #%3\n"
"	ld	(%8), a\n"
"	; common peephole 25b loaded #%1 into (%8) instead of (%4).\n"
"} if canJoinRegs(%2 %1 %5), same(%4 %5), canJoinRegs(%7 %6 %8)\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	ex	(sp), %2\n"
"} by {\n"
"	; common peephole 26a merged push and ex (sp), since %2 isn't used.\n"
"	push	%2\n"
"} if same(%2 'hl' 'ix' 'xy'), notUsed(%2)\n"
"\n"
"replace restart {\n"
"	push	de\n"
"	ex	de, hl\n"
"} by {\n"
"	; common peephole 26b moved push after de/hl swap.\n"
"	ex	de, hl\n"
"	push	hl\n"
"}\n"
"\n"
"replace restart {\n"
"	push	hl\n"
"	ex	de, hl\n"
"} by {\n"
"	; common peephole 26c moved push after de/hl swap.\n"
"	ex	de, hl\n"
"	push	de\n"
"}\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	%1\n"
"} by {\n"
"	; common peephole 26d moved push %1 before de/hl swap.\n"
"	push	%1\n"
"	ex	de, hl\n"
"} if notSame(%1 'hl' 'de')\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	de\n"
"} by {\n"
"	; common peephole 26e pushed hl directly instead of going through de.\n"
"	push	hl\n"
"} if notUsed('de' 'hl')\n"
"\n"
"replace restart {\n"
"	ld	l,%1\n"
"	ld	h,d\n"
"	push	hl\n"
"} by {\n"
"	; common peephole 27 pushed de instead of hl removing a load.\n"
"	ld	e,%1\n"
"	push	de\n"
"} if notUsed('hl' 'e')\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	%1\n"
"	push	de\n"
"} by {\n"
"	; common peephole 28 pushed hl directly instead of going through de.\n"
"	push	%1\n"
"	push	hl\n"
"} if notSame(%1 'hl' 'de'), notUsed('de' 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4,%1\n"
"	ld	%5,%2\n"
"	push	%6\n"
"} by {\n"
"	; common peephole 29 pushed %3 directly instead of going through %6.\n"
"	push	%3\n"
"} if canJoinRegs(%2 %1 %3), canJoinRegs(%5 %4 %7), same(%7 %6), notUsed(%6)\n"
"\n"
"replace restart {\n"
"	ld	%2,%5\n"
"	ld	%3,%6\n"
"	push	%1\n"
"	push	%4\n"
"} by {\n"
"	; common peephole 30 pushed %7 directly instead of going through %4.\n"
"	push	%1\n"
"	push	%7\n"
"} if canJoinRegs(%3 %2 %5), same(%5 %4), canJoinRegs(%6 %5 %7), notSame(%1 %4), notUsed(%4)\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	ld	%2, %3\n"
"	ld	%4, %5\n"
"} by {\n"
"	; common peephole 31 popped %6 directly instead of going through %1.\n"
"	pop	%6\n"
"} if canJoinRegs(%4 %2 %6), canJoinRegs(%5 %3 %7), same(%7 %1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	ld	e, l\n"
"	ld	d, h\n"
"} by {\n"
"	; common peephole 32a removed de/hl swap.\n"
"	ld	l, e\n"
"	ld	h, d\n"
"}\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	ld	l, e\n"
"	ld	h, d\n"
"} by {\n"
"	; common peephole 32b removed de/hl swap.\n"
"	ld	e, l\n"
"	ld	d, h\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1 (%4), %2\n"
"	ld	%3, %1 (%4)\n"
"} by {\n"
"	; common peephole 33 loaded %3 from %2 instead of going through %1 (%4).\n"
"	ld	%1 (%4), %2\n"
"	ld	%3, %2\n"
"} if same(%4 'ix' 'iy'), canAssign(%3 %2), notSame(%3 'bc' 'de' 'hl' 'ix' 'iy')\n"
"\n"
"replace restart {\n"
"	ld	%1 (%3), a\n"
"	push	%4\n"
"	ld	%2, %1 (%3)\n"
"} by {\n"
"	ld	%1 (%3), a\n"
"	push	%4\n"
"	; common peephole 34 loaded %2 from a instead of %1 (%3)\n"
"	ld	%2, a\n"
"} if same(%3 'ix' 'iy'), canAssign(%2 'a')\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 35 pushed de instead of pushing a twice.\n"
"	ld	d,a\n"
"	push	de\n"
"} if notUsed('d'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	pop	%2\n"
"	push	%2\n"
"	push	%1\n"
"	ld	a, #%3\n"
"	ld	(%2), a\n"
"} by {\n"
"	; common peephole 36 used hl instead of %2.\n"
"	pop	%1\n"
"	pop	hl\n"
"	push	hl\n"
"	push	%1\n"
"	ld	(hl), #%3\n"
"} if notUsed('hl' %2)\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, #%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 37a pushed %4 instead of pushing a twice.\n"
"	ld	%2, a\n"
"	ld	%3, #%1\n"
"	push	%4\n"
"} if unusedReg(%4 'bc' 'de' 'hl'), canSplitReg(%4 %2 %3), notUsed('a')\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	xor	a, a\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 37b pushed %4 instead of pushing a twice.\n"
"	ld	%2, a\n"
"	ld	%3, #0x00\n"
"	push	%4\n"
"} if unusedReg(%4 'bc' 'de' 'hl'), canSplitReg(%4 %2 %3), notUsed('af')\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	inc	sp\n"
"	push	%2\n"
"	inc	sp\n"
"} by {\n"
"	ld	%4, %5\n"
"	; common peephole 38 combined pushing of %3 and %5.\n"
"	push	%1\n"
"} if canSplitReg(%1 %3 %4), canSplitReg(%2 %5), notUsed(%4)\n"
"\n"
"replace restart {\n"
"	ld	hl, #%1\n"
"	add	hl, %2\n"
"} by {\n"
"	; common peephole 39 replaced 16-bit addition by 8-bit loads and 16-bit increment.\n"
"	ld	l, %4\n"
"	ld	h, %3\n"
"	inc	hl\n"
"} if canSplitReg(%2 %3 %4), immdInRange(1 1 '+' %1 0 %9)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	and	a, #%2\n"
"} by {\n"
"	; common peephole 40a combined redundant ANDs #%1 and #%2.\n"
"	and	a, #%3\n"
"} if operandsLiteral(%1 %2), immdInRange(0x00 0xFF '&' %1 %2 %x3)\n"
"\n"
"replace restart {\n"
"	or	a, #%1\n"
"	or	a, #%2\n"
"} by {\n"
"	; common peephole 40b combined redundant ORs #%1 and #%2.\n"
"	or	a, #%3\n"
"} if operandsLiteral(%1 %2), immdInRange(0x00 0xFF '|' %1 %2 %x3)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%1, %3\n"
"} by {\n"
"	; common peephole 41a remove double load to %1.\n"
"	ld	%1, %3\n"
"} if notVolatile(%1), notVolatile(%2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)'), operandsNotRelated(%1 %3)\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, c\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	b, a\n"
"	; common peephole 42 combined pushing of a and c.\n"
"	push	bc\n"
"} if notUsed('b'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	inc	sp\n"
"	ld	a, %2\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	%4, %2\n"
"	; common peephole 43 combined pushing of %3 and %2.\n"
"	push	%1\n"
"} if notSame(%1 'iy'), canSplitReg(%1 %3 %4), canAssign(%4 %2), notUsed(%4 'a')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, %2 (%3)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	%4, %1\n"
"	ld	%5, %2 (%3)\n"
"	; common peephole 44a combined pushing of %1 and %2 (%3).\n"
"	push	%6\n"
"} if unusedReg(%6 'bc' 'de' 'hl'), canSplitReg(%6 %4 %5), canAssign(%4 %1), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a, (%1)\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, (%2)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	a, (%1)\n"
"	ld	%4, a\n"
"	ld	a, (%2)\n"
"	ld	%5, a\n"
"	; common peephole 44b combined pushing of (%1) and (%2).\n"
"	push	%6\n"
"} if unusedReg(%6 'bc' 'de' 'hl'), notSame(%6 %1 %2), canSplitReg(%6 %4 %5)\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2\n"
"} by {\n"
"	; common peephole 45 replace 16-bit immediate load by 8-bit one.\n"
"	ld	%3, #%4\n"
"} if canSplitReg(%1 %5 %3), immdInRange(0x00 0xff '&' %2 0xff %4), canAssign(%3 %4), notUsed(%5)\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2\n"
"} by {\n"
"	; common peephole 46 replace 16-bit immediate load by 8-bit one.\n"
"	ld	%3, #%4\n"
"} if canSplitReg(%1 %3 %5), immdInRange(0x00 0xff '/' %2 256 %4), canAssign(%3 %4), notUsed(%5)\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%3)\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, %2 (%3)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 47a pushed %1 (%3), %2 (%3) through %6 instead of af.\n"
"	ld	%4, %1 (%3)\n"
"	ld	%5, %2 (%3)\n"
"	push	%6\n"
"} if unusedReg(%6 'bc' 'de' 'hl'), canSplitReg(%6 %4 %5), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a, (hl)\n"
"	push	af\n"
"	inc	sp\n"
"	%1	hl\n"
"	ld	a, (hl)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 47b pushed (hl), %1, (hl) through %4 instead of af.\n"
"	ld	a, (hl)\n"
"	%1	hl\n"
"	ld	%2, a\n"
"	ld	a, (hl)\n"
"	ld	%3, a\n"
"	push	%4\n"
"} if same(%1 'inc' 'dec'), unusedReg(%4 'bc' 'de'), canSplitReg(%4 %2 %3), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a, (%5)\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, (%6)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 47c pushed (%5), (%6) through %4 instead of af.\n"
"	ld	a, (%5)\n"
"	ld	%2, a\n"
"	ld	a, (%6)\n"
"	ld	%3, a\n"
"	push	%4\n"
"} if same(%5 'hl' 'hl+' 'hl-'), same(%6 'hl' 'hl+' 'hl-'), unusedReg(%4 'bc' 'de'), canSplitReg(%4 %2 %3)\n"
"\n"
"replace restart {\n"
"	ld	%1, %4\n"
"	ld	%2, %5\n"
"	push	%3\n"
"} by {\n"
"	; common peephole 48 pushed %6 instead of %3.\n"
"	push	%6\n"
"} if canJoinRegs(%2 %1 %7), same(%3 %7), canJoinRegs(%5 %4 %6), notUsed(%3)\n"
"\n"
"replace restart {\n"
"	ld	a, (hl)\n"
"	%4	hl\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"	push	hl\n"
"} by {\n"
"	; common peephole 49 pushed %3 instead of hl.\n"
"	ld	%1, (hl)\n"
"	%4	hl\n"
"	ld	%2, (hl)\n"
"	push	%3\n"
"} if same(%4 'inc' 'dec'), unusedReg(%3 'de' 'bc'), canSplitReg(%3 %2 %1), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%3, %1\n"
"	push	%3\n"
"} by {\n"
"	; common peephole 49a pushed %2 instead of %3.\n"
"	ld	%2, %1\n"
"	push	%2\n"
"} if same(%3 'ix' 'iy'), notUsed(%3), unusedReg(%2 'bc' 'de' 'hl'), canAssign(%2 %1)\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; common peephole 50a eliminated dead pop/push %1 pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	pop	%1\n"
"} by {\n"
"	; common peephole 50b eliminated dead push/pop pair.\n"
"}\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	inc	sp\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 50c eliminated dead push/inc sp pair.\n"
"}\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	ld	%2 (ix), %3\n"
"	push	%1\n"
"} by {\n"
"	; common peephole 51 eliminated dead pop/push pair.\n"
"	ld	%2 (ix), %3\n"
"} if notUsed(%1), operandsNotRelated(%1 %3)\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	pop	%2\n"
"} by {\n"
"	ld	%6, %4\n"
"	ld	%5, %3\n"
"	; common peephole 52a replaced push/pop pair by loads.\n"
"} if canSplitReg(%1 %3 %4), canSplitReg(%2 %5 %6), notSame(%1 %2 'ix' 'iy'), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	pop	af\n"
"} by {\n"
"	ld	a, %3\n"
"	; common peephole 52b replaced push/pop pair by load.\n"
"} if canSplitReg(%1 %3 %4), notUsed('f')\n"
"\n"
"replace restart {\n"
"	ld	%3, #%1\n"
"	ld	%4, %2 (%3)\n"
"} by {\n"
"	; common peephole 53 used direct memory loading instead of indirect.\n"
"	ld	a, (#%1 + %2)\n"
"	ld	%4, a\n"
"} if notUsed(%3 'a')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	%3	%5, %2 (%4)\n"
"} by {\n"
"	; common peephole 54 used hl instead of %4.\n"
"	ld	hl, #%1 + %2\n"
"	%3	%5, (hl)\n"
"} if notUsed(%4 'hl'), same(%5 'a' 'b' 'c' 'd' 'e' 'h' 'l'), same(%3 'add' 'adc' 'and' 'ld' 'or' 'sbc' 'sub' 'xor')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	l, %3 (%4)\n"
"} by {\n"
"	; common peephole 55l used hl instead of %4.\n"
"	ld	hl, #%1 + %3\n"
"	ld	l, (hl)\n"
"} if notUsed(%4 'h')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	h, %3 (%4)\n"
"} by {\n"
"	; common peephole 55 used hl instead of %4.\n"
"	ld	hl, #%1 + %3\n"
"	ld	h, (hl)\n"
"} if notUsed(%4 'l')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	%2 (%4), %3\n"
"} by {\n"
"	; common peephole 56 used hl instead of %4.\n"
"	ld	hl, #%1 + %2\n"
"	ld	(hl), %3\n"
"} if notUsed(%4 'hl'), notSame(%3 'h' 'l')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	%2 (%4), %3\n"
"} by {\n"
"	; common peephole 57 used direct memory storing instead of indirect.\n"
"	ld	a, %3\n"
"	ld	(#%1 + %2), a\n"
"} if notUsed('a' %4)\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	%2, %5 (%4)\n"
"	ld	%3, %6 (%4)\n"
"} by {\n"
"	; common peephole 58 used hl instead of %4.\n"
"	ld	hl, #%1 + %5\n"
"	ld	%2, (hl)\n"
"	inc	hl\n"
"	ld	%3, (hl)\n"
"} if operandsNotRelated(%2 'hl'), operandsNotRelated(%3 'hl'), immdInRange(-128 127 '+' %5 1 %7), same(%6 %7), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	ld	%2 (%4), %3\n"
"	ld	l, %2 (%4)\n"
"} by {\n"
"	; common peephole 59 used hl instead of %4.\n"
"	ld	hl, #%1 + %2\n"
"	ld	(hl), %3\n"
"	ld	l, (hl)\n"
"} if notUsed(%4 'h')\n"
"\n"
"replace restart {\n"
"	ld	%3, #%1\n"
"	ld	%2 (%3), %4\n"
"} by {\n"
"	; common peephole 60 used hl instead of %3.\n"
"	ld	hl, #%1 + %2\n"
"	ld	(hl), %4\n"
"} if notUsed(%3 'hl'), operandsNotRelated(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	%5	%2, %3 (%4)\n"
"} by {\n"
"	; common peephole 61 used hl instead of %4.\n"
"	ld	hl, #%1 + %3\n"
"	%5	%2, (hl)\n"
"} if same(%5 'bit' 'res' 'set'), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	%2, %5 (%4)\n"
"	ld	%3, %6 (%4)\n"
"} by {\n"
"	; common peephole 62 used hl instead of %4.\n"
"	ld	hl, #%1 + %5\n"
"	add	hl, sp\n"
"	ld	%2, (hl)\n"
"	inc	hl\n"
"	ld	%3, (hl)\n"
"} if operandsNotRelated(%2 'hl'), immdInRange(-128 127 '+' %5 1 %7), same(%7 %6), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	%2, %3 (%4)\n"
"} by {\n"
"	; common peephole 63 used hl instead of %4.\n"
"	ld	hl, #%1 + %3\n"
"	add	hl, sp\n"
"	ld	%2, (hl)\n"
"} if notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	l, %2 (%4)\n"
"	ld	h, %3 (%4)\n"
"} by {\n"
"	; common peephole 64 used hl instead of %4.\n"
"	ld	hl, #%1 + %2\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"} if immdInRange(-128 127 '+' %2 1 %5), same(%5 %3), notUsed(%4 'a')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	%5 (iy), #%2\n"
"	ld	%6 (iy), #%3\n"
"} by {\n"
"	; common peephole 65 used hl instead of %4.\n"
"	ld	hl, #%1 + %5\n"
"	add	hl, sp\n"
"	ld	(hl), #%2\n"
"	inc	hl\n"
"	ld	(hl), #%3\n"
"} if immdInRange(-128 127 '+' %5 1 %7), same(%7 %6), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	a, %2 (%4)\n"
"	or	a, %3 (%4)\n"
"} by {\n"
"	ld	hl, #%1 + %2\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	or	a, (hl)\n"
"	; common peephole 66a used hl instead of %4.\n"
"} if immdInRange(-128 127 '+' %2 1 %5), same(%5 %3), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	ld	a, %2 (%4)\n"
"	or	a, %3 (%4)\n"
"} by {\n"
"	ld	hl, #%1 + %3\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	or	a, (hl)\n"
"	; common peephole 66b used hl instead of %4.\n"
"} if immdInRange(-128 127 '-' %2 1 %5), same(%5 %3), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	%5	%2, %3 (%4)\n"
"} by {\n"
"	ld	hl, #%1 + %3\n"
"	add	hl, sp\n"
"	%5	%2, (hl)\n"
"	; common peephole 67a used hl instead of %4.\n"
"} if same(%5 'bit' 'res' 'set'), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	add	%4, sp\n"
"	%5	%3, %2 (%4)\n"
"} by {\n"
"	ld	hl, #%1 + %2\n"
"	add	hl, sp\n"
"	%5	%3, (hl)\n"
"	; common peephole 67b used hl instead of %4.\n"
"} if same(%5 'adc' 'add' 'and' 'ld' 'or' 'sbc' 'sub' 'xor'), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	push	hl\n"
"	ld	hl, #%1\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"} by {\n"
"	; common peephole 67c removed load back from stack.\n"
"	push	hl\n"
"}if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %2)\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	ld	a, (hl)\n"
"	dec	hl\n"
"	or	a, (hl)\n"
"} by {\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	or	a, (hl)\n"
"	; common peephole 68 reversed ld and or.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1, l\n"
"	ld	%2, h\n"
"	inc	%3\n"
"} by {\n"
"	; common peephole 69 incremented in hl instead of %3.\n"
"	inc	hl\n"
"	ld	%1, l\n"
"	ld	%2, h\n"
"} if canJoinRegs(%2 %1 %4), same(%4 %3), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%4, #%1\n"
"	%3	%2 (%4)\n"
"} by {\n"
"	; common peephole 70 %3 (hl) instead of %2 (%4).\n"
"	ld	hl, #%1 + %2\n"
"	%3	(hl)\n"
"} if same(%3 'inc' 'dec'), notUsed(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	push	%3\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 71 eliminate unnecessary initialization of %1 register.\n"
"	push	%3\n"
"	inc	sp\n"
"} if same(%1 'c' 'e' 'l' 'ixl' 'iyl'), canJoinRegs('' %1 %4), same(%3 %4), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%2)\n"
"	bit	%3, a\n"
"} by {\n"
"	; common peephole 72 tested bit %3 of %1 (%2) directly instead of going through a.\n"
"	bit	%3, %1 (%2)\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	%1, (hl)\n"
"	bit	%2, %1\n"
"} by {\n"
"	; common peephole 73 tested bit %2 of (hl) directly instead of going through %1.\n"
"	bit	%2, (hl)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	bit	%2, a\n"
"} by {\n"
"	; common peephole 74 tested bit %2 of %1 directly instead of going through a.\n"
"	bit	%2, %1\n"
"} if notUsed('a'), canAssign(%1 'b')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	%3	%2, a\n"
"	ld	%1, a\n"
"} by {\n"
"	; common peephole 75 %3 bit %2 of %1 directly instead of going through a.\n"
"	%3	%2, %1\n"
"	ld	a, %1\n"
"} if same(%3 'set' 'res'), canAssign(%1 'b'), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%2)\n"
"	%4	%3, a\n"
"	ld	%1 (%2), a\n"
"} by {\n"
"	; common peephole 76 %4 bit %3 of %1 (%2) directly instead of going through a.\n"
"	%4	%3, %1 (%2)\n"
"	ld	a, %1 (%2)\n"
"} if same(%4 'set' 'res')\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2 + %3\n"
"	inc	%1\n"
"} by {\n"
"	ld	%1, #%2 + %4\n"
"	; common peephole 77a incremented immediate.\n"
"} if operandsLiteral(%3), immdInRange(0 256 '+' %3 1 %4), notUsed('f')\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2 - %3\n"
"	inc	%1\n"
"} by {\n"
"	ld	%1, #%2 - %4\n"
"	; common peephole 77b incremented immediate.\n"
"} if operandsLiteral(%3), immdInRange(0 256 '-' %3 1 %4), notUsed('f')\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2 + %3\n"
"	dec	%1\n"
"} by {\n"
"	ld	%1, #%2 + %4\n"
"	; common peephole 77c decremented immediate.\n"
"} if operandsLiteral(%3), immdInRange(0 256 '-' %3 1 %4), notUsed('f')\n"
"\n"
"replace restart {\n"
"	ld	%1, #%2 - %3\n"
"	dec	%1\n"
"} by {\n"
"	ld	%1, #%2 - %4\n"
"	; common peephole 77d decremented immediate.\n"
"} if operandsLiteral(%3), immdInRange(0 256 '+' %3 1 %4), notUsed('f')\n"
"\n"
"replace {\n"
"	ld	%1, #%2 - 0\n"
"} by {\n"
"	ld	%1, #%2 + 0\n"
"	; common peephole 77e changed -0 to +0.\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, #%2 + 0\n"
"	dec	%1\n"
"} by {\n"
"	ld	%1, #%2 - 1\n"
"	; common peephole 77f decremented immediate.\n"
"} if notUsed('f')\n"
"\n"
"replace restart {\n"
"	jp	%1,%2\n"
"	jp	%2\n"
"} by {\n"
"	; common peephole 78 removed redundant jp\n"
"	jp	%2\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NC,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	C,%2\n"
"	; common peephole 79 removed jp by using inverse jump logic\n"
"%1:\n"
"} if operandsNotRelated(%2 '(hl)' '(ix)' '(iy)'), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	C,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NC,%2\n"
"	; common peephole 80 removed jp by using inverse jump logic\n"
"%1:\n"
"} if operandsNotRelated(%2 '(hl)' '(ix)' '(iy)'), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	Z,%2\n"
"	; common peephole 81 removed jp by using inverse jump logic\n"
"%1:\n"
"} if operandsNotRelated(%2 '(hl)' '(ix)' '(iy)'), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NZ,%2\n"
"	; common peephole 82 removed jp by using inverse jump logic\n"
"%1:\n"
"} if operandsNotRelated(%2 '(hl)' '(ix)' '(iy)'), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jp	%6\n"
"	; common peephole 83 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	jp	%1,%6\n"
"	; common peephole 84 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%1:\n"
"} by {\n"
"	; common peephole 85a eliminated jump.\n"
"%1:\n"
"} if notInJumpTable(), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"	; common peephole 85b eliminated jump.\n"
"%2:\n"
"%1:\n"
"} if notInJumpTable(), labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	ld	a,#0x00\n"
"%1:\n"
"	bit	%2,a\n"
"	jp	Z,%3\n"
"} by {\n"
"	ld	a,#0x00\n"
"	jp	%3\n"
"	; common peephole 86 jumped directly to %3 instead of testing a first.\n"
"%1:\n"
"	bit	%2,a\n"
"	jp	Z,%3\n"
"} if labelRefCountChange(%3 +1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	jp	%3\n"
"	jp	%4\n"
"} by {\n"
"	ld	%1, %2\n"
"	jp	%3\n"
"	; common peephole 87a removed unreachable jump to %4\n"
"} if labelRefCountChange(%4 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%2:\n"
"	jp	%3\n"
"} by {\n"
"	; common peephole 87b removed unreachable jump to %3\n"
"	jp	%1\n"
"} if labelRefCount(%2 0), labelRefCountChange(%3 -1)\n"
"\n"
"replace restart {\n"
"	ld	%1, #0x01\n"
"	bit	0, %1\n"
"	jp	Z, %2\n"
"} by {\n"
"	ld	%1, #0x01\n"
"	; common peephole 89 removed impossible jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	rlca\n"
"	and	a, #0x01\n"
"	jp	Z, %1\n"
"} by {\n"
"	rlca\n"
"	; common peephole 90a removed and by changing jump condition.\n"
"	jp	NC, %1\n"
"} if notUsed('a'), notUsedFrom(%1 'a')\n"
"\n"
"replace restart {\n"
"	rlca\n"
"	and	a, #0x01\n"
"	jp	NZ, %1\n"
"} by {\n"
"	; common peephole 90b removed and by changing jump condition.\n"
"	rlca\n"
"	jp	C, %1\n"
"} if notUsed('a'), notUsedFrom(%1 'a')\n"
"\n"
"replace restart {\n"
"	%6	a, %1\n"
"	jp	NZ, %2\n"
"	%5	a, %1\n"
"	jp	NZ, %3\n"
"%2:\n"
"	ld	%4, a\n"
"	rlca\n"
"	sbc	a, a\n"
"} by {\n"
"	%6	a, %1\n"
"	jp	NZ, %2\n"
"	%5	a, %1\n"
"	jp	NZ, %3\n"
"%2:\n"
"	ld	%4, a\n"
"	; common peephole 91 removed redundant rlca.\n"
"	sbc	a, a\n"
"} if notSame('a' %1), notSame(%2 %3), same(%5 'or' 'cp' 'sub'), same(%6 'sub' 'sbc')\n"
"\n"
"replace {\n"
"	ld	%5, #%1\n"
"	ld	%6, #%2\n"
"} by {\n"
"	; common peephole 92a combined constant loads into register pair.\n"
"	ld	%7, #%4\n"
"} if canJoinRegs(%6 %5 %7), operandsLiteral(%1 %2), immdInRange(0x00 0xffff '*' %2 0x100 %3), immdInRange(0x00 0xffff '|' %3 %1 %x4)\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	%5, a\n"
"	ld	%6, #%2\n"
"} by {\n"
"	; common peephole 92b combined constant loads into register pair.\n"
"	ld	%7, #%4\n"
"} if canJoinRegs(%6 %5 %7), operandsLiteral(%2), immdInRange(0x00 0xffff '*' %2 0x100 %x4), notUsed('a' 'cf' 'zf')\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	%5, #%1\n"
"	ld	%6, a\n"
"} by {\n"
"	; common peephole 92c combined constant loads into register pair.\n"
"	ld	%7, #%1\n"
"} if canJoinRegs(%6 %5 %7), operandsLiteral(%1), notUsed('a' 'cf' 'zf')\n"
"\n"
"replace {\n"
"	ld	%5, #%1\n"
"	ld	%6, #%2\n"
"} by {\n"
"	; common peephole 93a combined constant loads into register pair.\n"
"	ld	%7, #%4\n"
"} if canJoinRegs(%5 %6 %7), operandsLiteral(%1 %2), immdInRange(0x00 0xffff '*' %1 0x100 %3), immdInRange(0x00 0xffff '|' %3 %2 %x4)\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	%5, a\n"
"	ld	%6, #%2\n"
"} by {\n"
"	; common peephole 93b combined constant loads into register pair.\n"
"	ld	%7, #%2\n"
"} if canJoinRegs(%5 %6 %7), operandsLiteral(%2), notUsed('a' 'cf' 'zf')\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	%5, #%1\n"
"	ld	%6, a\n"
"} by {\n"
"	; common peephole 93c combined constant loads into register pair.\n"
"	ld	%7, #%4\n"
"} if canJoinRegs(%5 %6 %7), operandsLiteral(%1), immdInRange(0x00 0xffff '*' %1 0x100 %x4), notUsed('a' 'cf' 'zf')\n"
"\n"
"replace {\n"
"	ld	%8, #%1\n"
"	ld	%5, %8\n"
"	ld	%6, #%2\n"
"} by {\n"
"	ld	%8, #%1\n"
"	ld	%7, #%4\n"
"	; common peephole 93d combined constant loads into register pair.\n"
"} if canJoinRegs(%5 %6 %7), operandsLiteral(%1 %2), immdInRange(0x00 0xffff '*' %1 0x100 %3), immdInRange(0x00 0xffff '|' %3 %2 %x4)\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	xor	a, a\n"
"} by {\n"
"	; common peephole 94a reused constant #0 loaded into register.\n"
"	xor	a, a\n"
"	ld	%1, a\n"
"} if same(%1 'a' 'b' 'c' 'd' 'e' 'h' 'l'), operandsLiteral(%2), immdInRange(0 0 '+' %2 0 %3)\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	(%1), a\n"
"	ld	(hl), #%2\n"
"} by {\n"
"	; common peephole 94b reused constant #0 loaded into register.\n"
"	xor	a, a\n"
"	ld	(%1), a\n"
"	ld	(hl), a\n"
"} if same(%1 'hl' 'hl+' 'hl-'), operandsLiteral(%2), immdInRange(0 0 '+' %2 0 %3)\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	ld	(hl), a\n"
"	%1	hl\n"
"	ld	(hl), #%2\n"
"} by {\n"
"	; common peephole 94c reused constant #0 loaded into register.\n"
"	xor	a, a\n"
"	ld	(hl), a\n"
"	%1	hl\n"
"	ld	(hl), a\n"
"} if same(%1 'inc' 'dec'), operandsLiteral(%2), immdInRange(0 0 '+' %2 0 %3)\n"
"\n"
"replace {\n"
"	ld	%1, %2\n"
"	push	%1\n"
"	ld	%1, %2\n"
"} by {\n"
"	ld	%1, %2\n"
"	push	%1\n"
"	; common peephole 94d pushed register pair twice.\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	ld	%3, #%4\n"
"	push	%1\n"
"	push	%3\n"
"} by {\n"
"	ld	%1, #%2\n"
"	ld	%3, #%4\n"
"	push	%1\n"
"	push	%1\n"
"	; common peephole 94e pushed register pair twice.\n"
"}if operandsLiteral(%2), operandsLiteral(%4), immdInRange(0 0 '-' %2 %4 %5)\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	ld	%3, #%4\n"
"	push	%3\n"
"	push	%1\n"
"} by {\n"
"	ld	%1, #%2\n"
"	ld	%3, #%4\n"
"	push	%1\n"
"	push	%1\n"
"	; common peephole 94f pushed register pair twice.\n"
"}if operandsLiteral(%2), operandsLiteral(%4), immdInRange(0 0 '-' %2 %4 %5)\n"
"\n"
"replace restart {\n"
"	ld	(%1), %2\n"
"	inc	%1\n"
"	ld	(%1), %3\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"	ld	%5, (%1)\n"
"} by {\n"
"	; common peephole 95a switched loads to %4 and %5.\n"
"	ld	(%1), %2\n"
"	inc	%1\n"
"	ld	(%1), %3\n"
"	ld	%5, (%1)\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"} if operandsNotRelated(%4 %5 %1), operandsNotRelated(%5 %1)\n"
"\n"
"replace restart {\n"
"	ld	(%1), %2\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"	ld	%5, (%1)\n"
"} by {\n"
"	; common peephole 95b switched loads to %4 and %5.\n"
"	ld	(%1), %2\n"
"	ld	%5, (%1)\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"} if operandsNotRelated(%4 %5 %1), operandsNotRelated(%5 %1)\n"
"\n"
"replace restart {\n"
"	%2	(%1)\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"	ld	%5, (%1)\n"
"} by {\n"
"	; common peephole 95c switched loads to %4 and %5.\n"
"	%2	(%1)\n"
"	ld	%5, (%1)\n"
"	dec	%1\n"
"	ld	%4, (%1)\n"
"	inc	%1\n"
"}if operandsNotRelated(%4 %5 %1), operandsNotRelated(%5 %1)\n"
"\n"
"replace restart {\n"
"	%1\n"
"	%2	%3\n"
"} by {\n"
"	; common peephole 96a move %2 %3 before %1\n"
"	%2	%3\n"
"	%1\n"
"} if same(%2 'inc' 'dec'), same(%3 'hl'), same(%1 'rlca' 'rrca' 'rra' 'rla' 'cpl' 'scf' 'daa' 'ccf' 'sra' 'swap' 'nop')\n"
"\n"
"replace restart {\n"
"	%4	%1, %2\n"
"	%3	%5\n"
"} by {\n"
"	; common peephole 96b move %3 %5 before %4 %1, %2\n"
"	%3	%5\n"
"	%4	%1, %2\n"
"} if same(%3 'inc' 'dec'), same(%5 'hl'), same(%4 'ld' 'ldh' 'cp' 'add' 'adc' 'and' 'or' 'xor' 'sub' 'sbc' 'set' 'res' 'bit' 'in' 'out' 'in0' 'out0'), operandsNotRelated(%1 %5), operandsNotRelated(%2 %5)\n"
"\n"
"replace restart {\n"
"	%2	%1\n"
"	%3	%4\n"
"} by {\n"
"	; common peephole 96c move %3 %4 before %2 %1\n"
"	%3	%4\n"
"	%2	%1\n"
"} if same(%3 'inc' 'dec'), same(%4 'hl'), same(%2 'inc' 'dec' 'rl' 'rlc' 'rr' 'rrc' 'srl' 'sla' 'sra' 'swap'), operandsNotRelated(%1 %4), operandsNotRelated(%2 %4)\n"
"\n"
"replace restart {\n"
"	%2	%1\n"
"	%3	%4\n"
"} by {\n"
"	; common peephole 96d move %3 %4 before %2 (%1)\n"
"	%3	%4\n"
"	%2	%1\n"
"} if same(%3 'inc' 'dec'), same(%4 'hl'), same(%2 'push' 'pop'), notSame(%1 %4)\n"
"\n"
"replace {\n"
"	ld	(hl), #%2\n"
"	ld	%1, #%3\n"
"} by {\n"
"	; common peephole 97a reused constant loaded into register pair. %2 %3\n"
"	ld	%1, #%3\n"
"	ld	(hl), %5\n"
"} if same(%1 'bc' 'de'), operandsLiteral(%2 %3), canSplitReg(%1 %4 %5), immdInRange(0x00 0xff '&' %3 0xff %7), immdInRange(0 0 '-' %7 %2 %8)\n"
"\n"
"replace {\n"
"	ld	(hl), #%2\n"
"	ld	%1, #%3\n"
"} by {\n"
"	; common peephole 97b reused constant loaded into register pair.\n"
"	ld	%1, #%3\n"
"	ld	(hl), %4\n"
"} if same(%1 'bc' 'de'), operandsLiteral(%2 %3), canSplitReg(%1 %4 %5), immdInRange(0x00 0xff '/' %3 0xff %6), immdInRange(0x00 0xff '&' %6 0xff %7), immdInRange(0 0 '-' %7 %2 %8)\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	ld	a, %1\n"
"} by {\n"
"	ld	%1, a\n"
"	; common peephole 98 removed redundant load from %1 into a.\n"
"} if notVolatile(%1), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%2 (ix), %1\n"
"	ld	%1, %2 (ix)\n"
"} by {\n"
"	ld	%2 (ix), %1\n"
"	; common peephole 98a removed redundant load of %1 from %2 (ix)\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	or	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,%2\n"
"	; common peephole 99 removed load by reordering or arguments.\n"
"} if notVolatile(%1), canAssign('b' %2), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%1, (hl)\n"
"	inc	hl\n"
"	ld	a, (hl)\n"
"	or	a, %1\n"
"} by {\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	; common peephole 99a removed load by reordering or arguments.\n"
"	or	a, (hl)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	and	a,%1\n"
"	; common peephole 100 removed redundant or after and.\n"
"}\n"
"\n"
"replace restart {\n"
"	%2	%1\n"
"	ld	a, %1\n"
"	or	a, a\n"
"} by {\n"
"	%2	%1\n"
"	ld	a, %1\n"
"	; common peephole 100b removed redundant or after %2\n"
"\n"
"} if same(%2 'inc' 'dec'), notUsed('cf' 'hf' 'nf' 'sf' 'pf')\n"
"\n"
"replace restart {\n"
"	xor	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1\n"
"	; common peephole 101 removed redundant or after xor.\n"
"}\n"
"\n"
"replace restart {\n"
"	xor	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1 (%2)\n"
"	; common peephole 102 removed redundant or after xor.\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	or	a, a\n"
"} by {\n"
"	; common peephole 102a removed redundant or after dec.\n"
"	dec	a\n"
"} if notUsed('cf')\n"
"\n"
"replace restart {\n"
"	dec	%1\n"
"	ld	a, %1\n"
"	or	a, a\n"
"} by {\n"
"	; common peephole 102b removed redundant or after dec.\n"
"	dec	%1\n"
"	ld	a, %1\n"
"} if notUsed('cf')\n"
"\n"
"replace restart {\n"
"	sbc	hl, %1\n"
"	ld	a, h\n"
"	or	a, l\n"
"	jp	%2, %3\n"
"} by {\n"
"	sbc	hl, %1\n"
"	jp	%2, %3\n"
"	; common peephole 102c removed redundant or after sbc.\n"
"} if same(%2 'NZ' 'Z')\n"
"\n"
"replace restart {\n"
"	sub	a, %1\n"
"	ld	%2, a\n"
"	or	a, a\n"
"	jp	%3, %4\n"
"} by {\n"
"	sub	a, %1\n"
"	ld	%2, a\n"
"	; common peephole 102d removed redundant or after sub.\n"
"	jp	%3, %4\n"
"} if same(%3 'NZ' 'Z')\n"
"\n"
"replace {\n"
"	ld	%1,%2\n"
"	ld	a,%2\n"
"} by {\n"
"	ld	a,%2\n"
"	ld	%1,a\n"
"	; common peephole 103 loaded value in a first and used it next\n"
"} if notVolatile(%1 %2), canAssign(%1 'a'), operandsNotRelated(%1 %2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%2, #%1\n"
"	ld	%3, #%1\n"
"} by {\n"
"	; common peephole 103b loaded constant in %2 first and used it next\n"
"	ld	%2, #%1\n"
"	ld	%3, %2\n"
"} if notVolatile(%2), canAssign(%3 %2)\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	ld	%2,%1\n"
"	ld	%4,%3\n"
"} by {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	; common peephole 104 removed redundant load from %3%1 into %4%2\n"
"} if notVolatile(%1 %2 %3 %4), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)'), notSame(%3 '(hl+)' '(hl-)'), notSame(%4 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	%2, %1\n"
"	%3	%2\n"
"	ld	%1, %2\n"
"} by {\n"
"	%3	%1\n"
"	ld	%2, %1\n"
"	; common peephole 104b %3 %1 directly to remove redundant load from %2 into %1\n"
"} if same(%1 'a' 'b' 'c' 'd' 'e' 'h' 'l' '(hl)'), same(%3 'inc' 'dec')\n"
"\n"
"replace restart {\n"
"	push	de\n"
"	inc	sp\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	push	de\n"
"	; common peephole 105 pushed de\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	iy,%1\n"
"	add	iy,sp\n"
"	ld	sp,iy\n"
"} by {\n"
"	ld	hl,%1\n"
"	add	hl,sp\n"
"	ld	sp,hl\n"
"	; common peephole 106 fixed stack using hl instead of iy.\n"
"} if notUsed('hl'), notUsed('iy')\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	a,%1\n"
"	cp	a,%2\n"
"	jp	%3,%4\n"
"	; common peephole 107 removed load from %1 into a by replacing sub with cp\n"
"	assert	a=%1\n"
"} if notVolatile(%1), notUsedFrom(%4 'a'), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	cp	a,%2\n"
"	jp	%3,%4\n"
"	; common peephole 108 removed load from %1 into a by replacing sub with cp\n"
"	assert	a=%1\n"
"} if notUsedFrom(%4 'a')\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"} by {\n"
"}\n"
"\n"
"replace restart {\n"
"	rlca\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	rlca\n"
"	and	a,#0x01\n"
"	; common peephole 109 replaced zero load, rla by and since rlca writes the same value to carry bit and least significant bit.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	push	%1\n"
"	pop	%4\n"
"	ld	%1,%3\n"
"} by {\n"
"	ld	%4,%2\n"
"	; common peephole 110 moved %2 directly into de instead of going through %1.\n"
"	ld	%1,%3\n"
"}\n"
"\n"
"replace restart {\n"
"	add	a,#0x00\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	adc	a,%4\n"
"} by {\n"
"	; common peephole 111 removed lower part of multibyte addition.\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	add	a,%4\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, l\n"
"	add	a, #%1\n"
"	ld	e, a\n"
"	ld	a, h\n"
"	adc	a, #%2\n"
"	ld	d, a\n"
"} by {\n"
"	ld	de, #%4\n"
"	add	hl, de\n"
"	; common peephole 112 used 16-bit addition.\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	ld	a, h\n"
"} if operandsLiteral(%1 %2), immdInRange(0x00 0xffff '*' %2 0x100 %3), immdInRange(0x00 0xffff '|' %3 %1 %x4), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a, l\n"
"	add	a, #%1\n"
"	ld	c, a\n"
"	ld	a, h\n"
"	adc	a, #%2\n"
"	ld	b, a\n"
"} by {\n"
"	ld	bc, #%4\n"
"	add	hl,bc\n"
"	; common peephole 113 used 16-bit addition.\n"
"	ld	c, l\n"
"	ld	b, h\n"
"	ld	a, h\n"
"} if operandsLiteral(%1 %2), immdInRange(0x00 0xffff '*' %2 0x100 %3), immdInRange(0x00 0xffff '|' %3 %1 %x4), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	a,(hl)\n"
"	inc	a\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	inc	(hl)\n"
"	; common peephole 114 incremented in (hl) instead of going through a.\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a,(hl)\n"
"	inc	a\n"
"	ld	(hl),a\n"
"} by {\n"
"	inc	(hl)\n"
"	; common peephole 115 incremented in (hl) instead of going through a.\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	inc	%1\n"
"	ld	%2 (%3), %1\n"
"} by {\n"
"	inc	%2 (%3)\n"
"	ld	%1, %2 (%3)\n"
"	; common peephole 116 incremented in %2 (%3) instead of going through %1.\n"
"} if canAssign('a' %1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	dec	%1\n"
"	ld	%2 (%3), %1\n"
"} by {\n"
"	dec	%2 (%3)\n"
"	ld	%1, %2 (%3)\n"
"	; common peephole 117 decremented in %2 (%3) instead of going through %1.\n"
"} if canAssign('a' %1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	ld	%1, a\n"
"	; common peephole 118 removed load by exploiting commutativity of addition.\n"
"	add	a,%2\n"
"} if notSame(%2 '(bc)' '(de)'), canAssign('b' %2)\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	hl,#%1\n"
"	add	hl,bc\n"
"} by {\n"
"	; common peephole 119 removed loads by exploiting commutativity of addition.\n"
"	ld	bc,#%1\n"
"	add	hl,bc\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	ld	bc,#%4\n"
"	add	hl,bc\n"
"} by {\n"
"	; common peephole 120 removed loads by exploiting commutativity of addition.\n"
"	ld	hl,#%1 + %4\n"
"	add	hl,%2\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; common peephole 121a replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; common peephole 121b replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace {\n"
"	ld	a, #%1\n"
"	sbc	a, %3\n"
"} by {\n"
"	; common peephole 122a optimized carry subtraction by 0.\n"
"	sbc	a, a\n"
"	sub	a, %3\n"
"} if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %2), notVolatile(%3), notUsed('f')\n"
"\n"
"replace {\n"
"	ld	a, #%1\n"
"	sub	a, %3\n"
"} by {\n"
"	; common peephole 122b optimized carry subtraction by 0.\n"
"	xor	a, a\n"
"	sub	a, %3\n"
"} if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %2), notVolatile(%3), notUsed('f')\n"
"\n"
"replace {\n"
"	ld	a, #%1\n"
"	sbc	a, %2 (ix)\n"
"} by {\n"
"	; common peephole 122c optimized carry subtraction by 0.\n"
"	sbc	a, a\n"
"	sub	a, %2 (ix)\n"
"} if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %3), notUsed('f')\n"
"\n"
"replace {\n"
"	ld	a, #%1\n"
"	sbc	a, %2\n"
"} by {\n"
"	; common peephole 122d optimized carry subtraction by 0.\n"
"	sbc	a, a\n"
"	sub	a, %2\n"
"} if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %3), notUsed('f')\n"
"\n"
"replace restart {\n"
"	ld	a, #%1\n"
"} by {\n"
"	; common peephole 123 optimize ld a, %1\n"
"	xor	a, a\n"
"} if operandsLiteral(%1), immdInRange(0 0 '+' %1 0 %2), notUsed('f')\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; common peephole 124 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	a\n"
"	jp	NZ,%1\n"
"	ld	%2,#0x00\n"
"} by {\n"
"	inc	a\n"
"	jp	NZ,%1\n"
"	ld	%2,a\n"
"	; common peephole 125a replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,#0x00\n"
"} by {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,a\n"
"	; common peephole 125b replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; common peephole 126a shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	ld	%4, a\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1\n"
"	ld	%4, a\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; common peephole 126b shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; common peephole 127a shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	ld	%4, a\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	sub	a,%1\n"
"	ld	%4, a\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; common peephole 127b shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"%3:\n"
"	ld	a, (%1)\n"
"	%4	a, a\n"
"	jp	Z, %2\n"
"	inc	%1\n"
"	jp	%3\n"
"%2:\n"
"} by {\n"
"%3:\n"
"	ld	a, (%1)\n"
"	inc	%1\n"
"	%4	a, a\n"
"	jp	NZ, %3\n"
"	; common peephole 128a sped up loop body.\n"
"	dec	%1\n"
"%2:\n"
"} if same(%4 'or' 'and'), canSplitReg(%1 %0 %0), labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"	ld	a, (%5)\n"
"	inc	%5\n"
"	ld	%3, a\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	ld	%4, a\n"
"	jp	NZ, %2\n"
"	or	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"} by {\n"
"%1:\n"
"	ld	a, (%5)\n"
"	inc	%5\n"
"	ld	%3, a\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	jp	NZ, %2\n"
"	cp	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	; common peephole 128b sped up loop body.\n"
"	ld	%4, a\n"
"} if canSplitReg(%5 %7 %8), canSplitReg(%6 %9 %10), operandsNotRelated(%3 %5 %6), operandsNotRelated(%3 %5 %6), notSame(%3 %4), labelRefCount(%2 1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"	ld	a, (%5)\n"
"	ld	%3, a\n"
"	inc	%5\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	ld	%4, a\n"
"	jp	NZ, %2\n"
"	or	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"} by {\n"
"%1:\n"
"	ld	a, (%5)\n"
"	inc	%5\n"
"	ld	%3, a\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	jp	NZ, %2\n"
"	cp	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	; common peephole 128c sped up loop body.\n"
"	ld	%4, a\n"
"} if canSplitReg(%5 %7 %8), canSplitReg(%6 %9 %10), operandsNotRelated(%3 %5 %6), operandsNotRelated(%3 %5 %6), notSame(%3 %4), labelRefCount(%2 1)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	inc	hl\n"
"} by {\n"
"	ld	hl,#%3\n"
"	add	hl,%2\n"
"	; common peephole 129a moved increment of hl to constant.\n"
"} if operandsLiteral(%1), immdInRange(0 0xFFFF '+' %1 1 %x3)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	dec hl\n"
"} by {\n"
"	ld	hl,#%3\n"
"	add	hl,%2\n"
"	; common peephole 129b moved decrement of hl to constant.\n"
"} if operandsLiteral(%1), immdInRange(0 0xFFFF '-' %1 1 %x3)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	inc	hl\n"
"} by {\n"
"	ld	hl,#%1 + 1\n"
"	add	hl,%2\n"
"	; common peephole 129c moved increment of hl to constant.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	dec hl\n"
"} by {\n"
"	ld	hl,#%1 - 1\n"
"	add	hl,%2\n"
"	; common peephole 129d moved decrement of hl to constant.\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, #%2 + 0\n"
"} by {\n"
"	; common peephole 130a removed unnecessary +0 from constant\n"
"	ld	%1, #%2\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, #%2 + %3\n"
"} by {\n"
"	; common peephole 130b added +%3 to immediate %2\n"
"	ld	%1, #%4\n"
"} if operandsLiteral(%2 %3), immdInRange(0 0xFF '+' %2 %3 %x4)\n"
"\n"
"replace {\n"
"	ld	%1, #%2 + %3\n"
"} by {\n"
"	; common peephole 130c added +%3 to immediate %2\n"
"	ld	%1, #%4\n"
"} if operandsLiteral(%2 %3), immdInRange(0 0xFFFF '+' %2 %3 %x4), canSplitReg(%1 %0 %0)\n"
"\n"
"replace {\n"
"	ld	%1, #%2 - 0\n"
"} by {\n"
"	; common peephole 130d removed unnecessary -0 from constant\n"
"	ld	%1, #%2\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, #%2 - %3\n"
"} by {\n"
"	; common peephole 130e subtracted -%3 from immediate %2\n"
"	ld	%1, #%4\n"
"} if operandsLiteral(%2 %3), immdInRange(0 0xFF '-' %2 %3 %x4)\n"
"\n"
"replace {\n"
"	ld	%1, #%2 - %3\n"
"} by {\n"
"	; common peephole 130f subtracted -%3 from to immediate %2\n"
"	ld	%1, #%4\n"
"} if operandsLiteral(%2 %3), immdInRange(0 0xFFFF '-' %2 %3 %x4), canSplitReg(%1 %0 %0)\n"
"\n"
"\n"
"\n"
"replace {\n"
"	ld	(#%2 + 0), %1\n"
"} by {\n"
"	; common peephole 130h removed unnecessary +0 to immediate\n"
"	ld	(#%2), %1\n"
"}\n"
"\n"
"replace restart {\n"
"	push	hl\n"
"	pop	iy\n"
"	pop	hl\n"
"	inc	iy\n"
"} by {\n"
"	inc	hl\n"
"	push	hl\n"
"	pop	iy\n"
"	pop	hl\n"
"	; common peephole 131a incremented in hl instead of iy.\n"
"}\n"
"\n"
"replace restart {\n"
"	push	bc\n"
"	pop	iy\n"
"	inc	iy\n"
"} by {\n"
"	inc	bc\n"
"	push	bc\n"
"	pop	iy\n"
"	; common peephole 131b incremented in bc instead of iy.\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	hl,%1\n"
"	add	hl,%2\n"
"	push	hl\n"
"	pop	iy\n"
"} by {\n"
"	ld	iy,%1\n"
"	add	iy,%2\n"
"	; common peephole 132 added in iy instead of hl.\n"
"} if notUsed('hl'), notSame(%2 'hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	sp,%1\n"
"} by {\n"
"	; common peephole 133 removed redundant pop af.\n"
"	ld	sp,%1\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	ld	sp,%1\n"
"} by {\n"
"	; common peephole 134 removed redundant inc sp.\n"
"	ld	sp,%1\n"
"}\n"
"\n"
"replace restart {\n"
"	call    %1\n"
"	ret\n"
"} by {\n"
"	jp  %1\n"
"	; common peephole 135 replaced call at end of function by jump (tail call optimization).\n"
"} if symmParmStack(%1)\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	pop	ix\n"
"	ret\n"
"} by {\n"
"	pop	ix\n"
"	jp	%1\n"
"	; common peephole 136 replaced call at end of function by jump moving call beyond pop ix (tail call optimization).\n"
"} if symmParmStack(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	ld	%1,#%2\n"
"} by {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	; common peephole 137 removed load of #%2 into %1 since it's still there.\n"
"} if notVolatile(%1), operandsNotRelated(%3 %1), notSame(%1 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	de,#%1\n"
"} by {\n"
"	; common peephole 138 used #%1 from hl for load into de.\n"
"	ld	hl,#%1\n"
"	ld	e,l\n"
"	ld	d,h\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	sp,hl\n"
"	ld	hl,#0x0002\n"
"	add	hl,sp\n"
"} by {\n"
"	ld	sp, hl\n"
"	inc	hl\n"
"	inc	hl\n"
"	; common peephole 139 replaced addition by increment.\n"
"}\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	ld	hl, #%1\n"
"	add	hl, de\n"
"} by {\n"
"	; common peephole 140 removed ex exploiting commutativity of addition.\n"
"	ld	de, #%1\n"
"	add	hl, de\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	hl, #%1\n"
"	add	hl, %2\n"
"	ex	de, hl\n"
"	inc	de\n"
"} by {\n"
"	ld	hl, #%1+1\n"
"	; common peephole 141 moved increment to constant.\n"
"	add	hl, %2\n"
"	ex	de, hl\n"
"} if notUsed('hl')\n"
"\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	push	hl\n"
"} by {\n"
"	; common peephole 142 used ex to move hl onto the stack.\n"
"	ex	(sp),hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n'), notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	hl, #%1\n"
"	push	hl\n"
"} by {\n"
"	ld	hl, #%1\n"
"	; common peephole 143 used ex to move hl onto the stack.\n"
"	ex	(sp),hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n'), notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	inc	sp\n"
"	ld	hl,#%1\n"
"	push	hl\n"
"} by {\n"
"	inc	sp\n"
"	ld	hl,#%1\n"
"	; common peephole 144 used ex to move #%1 onto the stack.\n"
"	ex	(sp),hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n'), notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	inc	sp\n"
"	ld	h, %1 (ix)\n"
"	ld	l, %2 (ix)\n"
"	push	hl\n"
"} by {\n"
"	inc	sp\n"
"	ld	h, %1 (ix)\n"
"	ld	l, %2 (ix)\n"
"	; common peephole 145 used ex to move %1 (ix) %2 (ix) onto the stack.\n"
"	ex	(sp),hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n'), notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	a,#%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	h,#%1\n"
"	ex	(sp),hl\n"
"	; common peephole 146 used ex to move #%1 onto the stack.\n"
"	inc	sp\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n'), notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),a\n"
"%4:\n"
"	ld	%1,%5\n"
"} by {\n"
"	ld	(#%2 + %3),a\n"
"	; common peephole 147 directly used #%2 instead of going through %1 using indirect addressing.\n"
"%4:\n"
"	ld	%1,%5\n"
"}\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),%4\n"
"	ld	%1,#%5\n"
"} by {\n"
"	ld	a,%4\n"
"	ld	(#%2 + %3),a\n"
"	; common peephole 148 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	pop	af\n"
"	ld	%1,#%5\n"
"} if notSame(%3 'a')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	bit	%2,%1\n"
"} by {\n"
"	bit	%2,a\n"
"	; common peephole 149 tested bit %2 of a directly instead of going through %1.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	sbc	a,%1\n"
"	bit	7,a\n"
"	jp	NZ,%2\n"
"} by {\n"
"	sbc	a,%1\n"
"	jp	M,%2\n"
"	; common peephole 150 used sign flag instead of testing bit 7.\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n' 'tlcs90')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	or	a,a\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,a\n"
"	jp	%3,%4\n"
"	; common peephole 151 used value still in a instead of reloading from %1.\n"
"}\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; common peephole 152 removed unused ret.\n"
"}\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ld	sp,ix\n"
"	pop	ix\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; common peephole 153 removed unused ret.\n"
"}\n"
"\n"
"replace restart {\n"
"	%4	a,%1\n"
"	jp	NZ,%2\n"
"	xor	a,a\n"
"} by {\n"
"	%4	a,%1\n"
"	jp	NZ,%2\n"
"	; common peephole 154a removed redundant zeroing of a (which has just been tested to be #0x00).\n"
"} if same(%4 'or' 'and'), notUsed('f')\n"
"\n"
"replace restart {\n"
"	%4	a\n"
"	jp	NZ,%2\n"
"	xor	a,a\n"
"} by {\n"
"	%4	a\n"
"	jp	NZ,%2\n"
"	; common peephole 154b removed redundant zeroing of a (which has just been tested to be #0x00).\n"
"} if same(%4 'inc' 'dec'), notUsed('f')\n"
"\n"
"replace restart {\n"
"	%4	%1\n"
"	jp	NZ,%2\n"
"	xor	a,a\n"
"} by {\n"
"	%4	%1\n"
"	jp	NZ,%2\n"
"	; common peephole 154c reuseded zero of register (which has just been tested to be #0x00).\n"
"	ld	a, %1\n"
"} if same(%4 'inc' 'dec'), notUsed('f')\n"
"\n"
"replace restart {\n"
"	add	a, #%1\n"
"} by {\n"
"	; common peephole 155a turned add into inc.\n"
"	inc	a\n"
"} if operandsLiteral(%1), immdInRange(1 1 '+' %1 0 %2), notUsed('cf')\n"
"\n"
"replace restart {\n"
"	sub	a, #%1\n"
"} by {\n"
"	; common peephole 155b turned sub into dec.\n"
"	dec	a\n"
"} if operandsLiteral(%1), immdInRange(1 1 '+' %1 0 %2), notUsed('cf')\n"
"\n"
"replace restart {\n"
"	add	a, #%1\n"
"} by {\n"
"	; common peephole 155c turned add into dec.\n"
"	dec	a\n"
"} if operandsLiteral(%1), immdInRange(0xFF 0xFF '+' %1 0 %2), notUsed('cf')\n"
"\n"
"replace restart {\n"
"	dec	%1\n"
"	inc	%1\n"
"} by {\n"
"	; common peephole 156a swap dec %1 / inc %1 pair.\n"
"	inc	%1\n"
"	dec	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	%1\n"
"	dec	%1\n"
"} by {\n"
"	; common peephole 156b removed inc %1 / dec %1 pair.\n"
"} if same(%1 'bc' 'de' 'hl' 'ix' 'iy' 'sp')\n"
"\n"
"replace restart {\n"
"	inc	%1\n"
"	dec	%1\n"
"} by {\n"
"	; common peephole 156c removed inc %1 / dec %1 pair.\n"
"} if same(%1 'a' 'b' 'c' 'd' 'e' 'h' 'l' 'ixh' 'ixl' 'iyh' 'iyl'), notUsed('zf' 'vf' 'sf' 'nf' 'hf')\n"
"\n"
"replace restart {\n"
"	inc	%2\n"
"	inc	%1\n"
"	dec	%1\n"
"} by {\n"
"	; common peephole 156e removed inc %1 / dec %1 pair.\n"
"	inc	%1\n"
"	inc	%2\n"
"	dec	%1\n"
"} if same(%1 'bc' 'de' 'hl' 'ix' 'iy' 'sp'), same(%2 'bc' 'de' 'hl' 'ix' 'iy' 'sp'), operandsNotRelated(%1 %2)\n"
"\n"
"replace restart {\n"
"	jp	Z, %2\n"
"	ld	a, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	a, #%4\n"
"%1:\n"
"} by {\n"
"	ld	a, #%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	ld	a, #%4\n"
"	; common peephole 168z used double assignment in case of Z condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ, %2\n"
"	ld	a, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	a, #%4\n"
"%1:\n"
"} by {\n"
"	ld	a, #%3\n"
"	jp	Z, %1\n"
"%2:\n"
"	ld	a, #%4\n"
"	; common peephole 168nz used double assignment in case of NZ condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z, %2\n"
"	ld	a, #%3\n"
"	jp	%1\n"
"%2:\n"
"	xor	a, a\n"
"%1:\n"
"} by {\n"
"	ld	a, #%3\n"
"	jp	NZ, %1\n"
"	; common peephole 169xz used double assignment in case of Z condition.\n"
"%2:\n"
"	xor	a, a\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ, %2\n"
"	ld	a, #%3\n"
"	jp	%1\n"
"%2:\n"
"	xor	a, a\n"
"%1:\n"
"} by {\n"
"	ld	a, #%3\n"
"	jp	Z, %1\n"
"	; common peephole 169xnz used double assignment in case of NZ condition.\n"
"%2:\n"
"	xor	a, a\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z, %2\n"
"	ld	c, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	c, #%4\n"
"%1:\n"
"} by {\n"
"	ld	c, #%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	ld	c, #%4\n"
"	; common peephole 170z used double assignment in case of Z condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ, %2\n"
"	ld	c, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	c, #%4\n"
"%1:\n"
"} by {\n"
"	ld	c, #%3\n"
"	jp	Z, %1\n"
"%2:\n"
"	ld	c, #%4\n"
"	; common peephole 170nz used double assignment in case of NZ condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z, %2\n"
"	ld	e, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	e, #%4\n"
"%1:\n"
"} by {\n"
"	ld	e, #%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	ld	e, #%4\n"
"	; common peephole 171z used double assignment in case of Z condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ, %2\n"
"	ld	e, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	e, #%4\n"
"%1:\n"
"} by {\n"
"	ld	e, #%3\n"
"	jp	Z, %1\n"
"%2:\n"
"	ld	e, #%4\n"
"	; common peephole 171nz used double assignment in case of NZ condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z, %2\n"
"	ld	l, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	l, #%4\n"
"%1:\n"
"} by {\n"
"	ld	l, #%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	ld	l, #%4\n"
"	; common peephole 172z used double assignment in case of Z condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ, %2\n"
"	ld	l, #%3\n"
"	jp	%1\n"
"%2:\n"
"	ld	l, #%4\n"
"%1:\n"
"} by {\n"
"	ld	l, #%3\n"
"	jp	Z, %1\n"
"%2:\n"
"	ld	l, #%4\n"
"	; common peephole 172nz used double assignment in case of NZ condition.\n"
"%1:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %3\n"
"	ld	%2, %4\n"
"	push	%5\n"
"} by {\n"
"	; common peephole 173 eliminated assignment by pushing %6\n"
"	push	%6\n"
"} if canJoinRegs(%2 %1 %7), same(%7 %5), canJoinRegs(%4 %3 %6), notUsed(%5)\n"
"\n"
"replace restart {\n"
"	ld	%1, #%3\n"
"	ld	%2, #%4\n"
"} by {\n"
"	; ld	%1, #%3\n"
"	; ld	%2, #%4\n"
"	ld	%1, #%3\n"
"	; common peephole 174a reused value still in %1.\n"
"	ld	%7, %5\n"
"	ld	%8, %6\n"
"} if notSame(%1 'ix' 'iy'), notSame(%2 'ix' 'iy'), canSplitReg(%1 %5 %6), canSplitReg(%2 %7 %8), operandsLiteral(%3 %4), immdInRange(0 0 '-' %3 %4 %9)\n"
"\n"
"replace restart {\n"
"	ld	%1, #%3\n"
"	ld	%2, #%4\n"
"} by {\n"
"	; ld	%1, #%3\n"
"	; ld	%2, #%4\n"
"	ld	%1, #%3\n"
"	; common peephole 174b reused value still in %1.\n"
"	ld	%7, %5\n"
"	ld	%8, %6\n"
"} if notSame(%1 'hl'), notSame(%2 'hl'), canSplitReg(%1 %5 %6), canSplitReg(%2 %7 %8), operandsLiteral(%3 %4), immdInRange(0 0 '-' %3 %4 %9), notSame(%1 'ix' 'iy'), notSame(%2 'ix' 'iy')\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	ld	%2,%1\n"
"} by {\n"
"	ld	%1,%2\n"
"	; common peephole 176a remove unnecessary load back\n"
"} if notVolatile(%1), notVolatile(%2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')\n"
"\n"
"replace restart {\n"
"	ld	(%1), a\n"
"	inc	%1\n"
"	ld	(%1), %2\n"
"	ld	a, (%1)\n"
"	dec	%1\n"
"	or	a, (%1)\n"
"} by {\n"
"	ld	(%1), a\n"
"	inc	%1\n"
"	ld	(%1), %2\n"
"	; common peephole 176b remove unnecessary load back\n"
"	or	a, %2\n"
"	dec	%1\n"
"} if canSplitReg(%1 %0 %0)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	push	af\n"
"} by {\n"
"	push	%2\n"
"	; common peephole 177a replace pushed register pair\n"
"} if notUsed('a'), canJoinRegs(%1 '' %2), canSplitReg(%2 %3), same(%3 %1)\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	ld	(%1), #%2\n"
"} by {\n"
"	ld	(%1), #%2\n"
"	; common peephole 177b bubbled down push\n"
"	push	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	ld	a, #%2\n"
"	ld	(%1), a\n"
"} by {\n"
"	ld	a, #%2\n"
"	ld	(%1), a\n"
"	; common peephole 177c bubbled down push\n"
"	push	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	%3\n"
"	ld	%1, %2 (%3)\n"
"} by {\n"
"	; common peephole 178 moved increment of %3 after ld instruction\n"
"	ld	%1, %4 (%3)\n"
"	inc	%3\n"
"} if operandsNotRelated(%1 %3), immdInRange(-128 127 '+' %2 1 %4)\n"
"\n"
"replace restart {\n"
"	dec	%3\n"
"	ld	%1, %2 (%3)\n"
"} by {\n"
"	; common peephole 179 moved decrement of %3 after ld instruction\n"
"	ld	%1, %4 (%3)\n"
"	dec	%3\n"
"} if operandsNotRelated(%1 %3), immdInRange(-128 127 '-' %2 1 %4)\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	pop	%1\n"
"	ld	%2 (%3), %4\n"
"} by {\n"
"	inc	sp\n"
"	; common peephole 190: move pop instruction after register store\n"
"	ld	%2 (%3), %4\n"
"	pop	%1\n"
"} if notSame(%1 %3 %4), operandsNotRelated(%1 %4)\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	ld	%1 (%2), %3\n"
"} by {\n"
"	; common peephole 191a: move register store before stack restore\n"
"	ld	%1 (%2), %3\n"
"	inc	sp\n"
"} if notSame(%2 'sp')\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	pop	%1\n"
"	ld	%2, %3\n"
"} by {\n"
"	; common peephole 191b: move register to register copy before SP increment\n"
"	ld	%2, %3\n"
"	inc	sp\n"
"	pop	%1\n"
"} if same(%3 'l' 'h'), notSame(%2 'l' 'h'), notUsed('hl'), operandsNotRelated(%1 %2 %3), notSame('sp' %2 %3)\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	ld	%1, %2\n"
"} by {\n"
"	; common peephole 191c: move register store before stack restore\n"
"	ld	%1, %2\n"
"	inc	sp\n"
"} if notUsed('hl'), same(%2 'h' 'l' 'sp'), notSame(%1 'h' 'l' 'sp')\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	ld	%3, #%1\n"
"	add	%3, sp\n"
"	ld	sp, %3\n"
"} by {\n"
"	; common peephole 192: increase SP by addition\n"
"	ld	%3, #%2\n"
"	add	%3, sp\n"
"	ld	sp, %3\n"
"} if notUsed(%3), same(%3 'hl' 'ix' 'iy'), immdInRange(0 0x7fff '+' %1 1 %2)\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	inc	sp\n"
"	inc	sp\n"
"	inc	sp\n"
"	inc	sp\n"
"} by {\n"
"	; common peephole 193: increase SP by addition\n"
"	ld	hl, #5\n"
"	add	hl, sp\n"
"	ld	sp, hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	sub	a, #%7\n"
"	ld	a, %2\n"
"	sbc	a, #0x00\n"
"	ld	a, %3\n"
"	sbc	a, #0x00\n"
"	ld	a, %4\n"
"	sbc	a, #0x00\n"
"	%5	C, %6\n"
"} by {\n"
"	; common peephole 194-1: symplify 32-bit compare for 8 bit values\n"
"	ld	a, %2\n"
"	or	a, %3\n"
"	or	a, %4\n"
"	jp	NZ, %9\n"
"	ld	a, %1\n"
"	cp	a, #%7\n"
"	%5	C, %6\n"
"%9:\n"
"} if same(%5 'jr' 'jp' 'call'), notUsed('a'), canAssign('b' %3), canAssign('b' %3), newLabel(%9)\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	sub	a, #%7\n"
"	ld	a, %2\n"
"	sbc	a, #%8\n"
"	ld	a, %3\n"
"	sbc	a, #0x00\n"
"	ld	a, %4\n"
"	sbc	a, #0x00\n"
"	%5	C, %6\n"
"} by {\n"
"	; common peephole 194-2: symplify 32-bit compare for 16 bit values\n"
"	ld	a, %3\n"
"	or	a, %4\n"
"	jp	NZ, %9\n"
"	ld	a, %1\n"
"	sub	a, #%7\n"
"	ld	a, %2\n"
"	sbc	a, #%8\n"
"	%5	C, %6\n"
"%9:\n"
"} if same(%5 'jr' 'jp' 'call'), notUsed('a'), canAssign('b' %3), newLabel(%9)\n"
"\n"
"replace restart {\n"
"	ld	a, #0xff\n"
"	cp	a, %1\n"
"	%2	NC, %3\n"
"} by {\n"
"	; common peephole 195-1: remove always true check\n"
"} if same(%2 'jr' 'jp' 'call'), notUsed('a'), labelRefCountChange(%3 -1)\n"
"\n"
"replace restart {\n"
"	ld	a, #0xff\n"
"	sub	a, %1\n"
"	ld	a, #0xff\n"
"	sbc	a, %2\n"
"	%3	NC, %4\n"
"} by {\n"
"	; common peephole 195-2: remove always true check\n"
"} if same(%3 'jr' 'jp' 'call'), notUsed('a'), labelRefCountChange(%4 -1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	ld	e,l\n"
"	ld	d,h\n"
"} by {\n"
"	; common peephole 156 used ex to load hl into de.\n"
"	ex	de,hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n' 'r2k' 'r2ka' 'r3ka' 'tlcs90'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	; common peephole 157 used ex to load de into hl.\n"
"	ex	de,hl\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n' 'r2k' 'r2ka' 'r3ka' 'tlcs90'), notUsed('de')\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; common peephole 158 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"barrier\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-3 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-3' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-4 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-4' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-5 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-5' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-6 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"%2:\n"
"} by {\n"
"	; common peephole 150-6' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"%2:\n"
"} if isPort('r2k' 'r2ka' 'r3ka'), labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-6' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"	jp	%11\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-7 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"	jr	%11\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"	jp	%11\n"
"%2:\n"
"} by {\n"
"	; common peephole 159-7' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"	jr	%11\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"barrier\n"
"\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	ret\n"
"	; common peephole 160 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	ret	%1\n"
"	; common peephole 161 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	; common peephole 162 changed absolute to relative unconditional jump.\n"
"	jr	%5\n"
"} if optimizeFor('!code-speed'), labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	; common peephole 162a changed absolute to relative unconditional jump.\n"
"	jr	%5\n"
"} if isPort('z180' 'ez80_z80' 'r2k' 'r2ka' 'r3ka' 'tlcs90' 'gbz80'), labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jp	%1, %5\n"
"} by {\n"
"	; common peephole 163 changed absolute to relative conditional jump.\n"
"	jr	%1, %5\n"
"} if same(%1 'C' 'NC' 'NZ' 'Z'), labelInRange(%5)\n"
"\n"
"replace {\n"
"	dec	b\n"
"	jr	NZ, %5\n"
"} by {\n"
"	; common peephole 167 used djnz\n"
"	djnz	%5\n"
"} if isPort('z80' 'ez80_z80' 'z180' 'z80n' 'r2k' 'r2ka' 'r3ka' 'tlcs90')\n"
"\n"
"barrier\n"
