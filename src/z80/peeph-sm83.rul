/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace{\n"
"	ld	hl, #%1\n"
"	ld	a, (hl)\n"
"} by {\n"
"	; sm83 peephole 0 used ldh instead of ld a, (hl).\n"
"	ldh	a, (#%1)\n"
"} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2), notUsed('hl')\n"
"\n"
"replace{\n"
"	ld	a, (#%1)\n"
"} by {\n"
"	; sm83 peephole 0b used ldh instead of ld.\n"
"	ldh	a, (#%1)\n"
"} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2)\n"
"\n"
"replace{\n"
"	ld	hl, #%1\n"
"	ld	(hl), a\n"
"} by {\n"
"	; sm83 peephole 1 used ldh instead of ld (hl), a.\n"
"	ldh	(#%1), a\n"
"} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2), notUsed('hl')\n"
"\n"
"replace{\n"
"	ld	(#%1), a\n"
"} by {\n"
"	; sm83 peephole 1b used ldh instead of ld.\n"
"	ldh	(#%1), a\n"
"} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2)\n"
"\n"
"replace {\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"} by {\n"
"	ld	a, (hl+)\n"
"	; sm83 peephole 2 used ldi to increment hl after load\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1, (hl)\n"
"	inc	hl\n"
"} by {\n"
"	ld	a, (hl+)\n"
"	ld	%1, a\n"
"	; sm83 peephole 2b used ldi to increment hl after load\n"
"} if notUsed('a')\n"
"\n"
"replace {\n"
"	ld	%1, (hl)\n"
"	dec	hl\n"
"} by {\n"
"	ld	a, (hl-)\n"
"	ld	%1, a\n"
"	; sm83 peephole 3 used ldd to decrement hl after load\n"
"} if notUsed('a')\n"
"\n"
"replace {\n"
"	ld	a, (hl)\n"
"	dec	hl\n"
"} by {\n"
"	ld	a, (hl-)\n"
"	; sm83 peephole 3b used ldd to decrement hl after load\n"
"}\n"
"\n"
"replace {\n"
"	ld	(hl), a\n"
"	inc	hl\n"
"} by {\n"
"	ld	(hl+), a\n"
"	; sm83 peephole 4 used ldi to increment hl after load\n"
"}\n"
"\n"
"replace {\n"
"	ld	(hl), %1\n"
"	inc	hl\n"
"} by {\n"
"	ld	a, %1\n"
"	ld	(hl+), a\n"
"	; sm83 peephole 4b used ldi to increment hl after load\n"
"} if notUsed('a')\n"
"\n"
"replace {\n"
"	ld	(hl), a\n"
"	dec	hl\n"
"} by {\n"
"	ld	(hl-), a\n"
"	; sm83 peephole 5 used ldd to decrement hl after load\n"
"}\n"
"\n"
"replace {\n"
"	ld	(hl), %1\n"
"	dec	hl\n"
"} by {\n"
"	ld	a, %1\n"
"	ld	(hl-), a\n"
"	; sm83 peephole 5b used ldd to decrement hl after load\n"
"} if notUsed('a')\n"
"\n"
"replace {\n"
"	ld	(hl), a\n"
"	inc	%2\n"
"	ld	a, (%2)\n"
"	inc	hl\n"
"} by {\n"
"	ld	(hl+), a\n"
"	; sm83 peephole 7 used ldi to increment hl\n"
"	inc	%2\n"
"	ld	a, (%2)\n"
"} if notSame('hl' %2)\n"
"\n"
"replace {\n"
"	ld	a, (hl)\n"
"	ld	(%2), a\n"
"	inc	%2\n"
"	inc	hl\n"
"} by {\n"
"	ld	a, (hl+)\n"
"	; sm83 peephole 8 used ldi to increment hl\n"
"	ld	(%2), a\n"
"	inc	%2\n"
"} if notSame('hl' %2)\n"
"\n"
"replace {\n"
"	dec	hl\n"
"	ld	a, (hl+)\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"} by {\n"
"	; sm83 peephole 9 reversed loading order of hl\n"
"	ld	a, (hl-)\n"
"	ld	l, (hl)\n"
"	ld	h, a\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ldhl	sp,#%1\n"
"	ld	%2, %3\n"
"	ldhl	sp,#%1\n"
"} by {\n"
"	; sm83 peephole 10a removed redundant ldhl.\n"
"	ldhl	sp,#%1\n"
"	ld	%2, %3\n"
"} if notSame('(hl+)' %2 %3),  notSame('(hl+)' %2 %3)\n"
"\n"
"replace restart {\n"
"	ldhl	sp,	#%1\n"
"	ld	%3, %4\n"
"	ld	%5, %6\n"
"	ldhl	sp,	#%2\n"
"} by {\n"
"	ldhl	sp,	#1\n"
"	ld	%3, %4\n"
"	ld	%5, %6\n"
"	; sm83 peephole 10b turned ldhl into dec hl\n"
"	dec	hl\n"
"} if operandsLiteral(%1 %2), notSame('l' %3 %5), notSame('l' %3 %5), immdInRange(0x01 0x01 '-' %1 %2 %3), operandsNotRelated('hl' %3 %4 %5 %6)\n"
"\n"
"replace restart {\n"
"	ldhl	sp,	#%1\n"
"	ld	%3, %4\n"
"	ld	%5, %6\n"
"	ldhl	sp,	#%2\n"
"} by {\n"
"	ldhl	sp,	#1\n"
"	ld	%3, %4\n"
"	ld	%5, %6\n"
"	; sm83 peephole 10c turned ldhl into inc hl\n"
"	inc	hl\n"
"} if operandsLiteral(%1 %2), notSame('l' %3 %5), notSame('l' %3 %5), immdInRange(0x01 0x01 '-' %2 %1 %3), operandsNotRelated('hl' %3 %4 %5 %6)\n"
"\n"
"replace restart {\n"
"	ldhl	sp,#%1\n"
"	dec	hl\n"
"} by {\n"
"	; sm83 peephole 10d combined ld and dec.\n"
"	ldhl	sp,#%2\n"
"} if immdInRange(-128 127 '-' %1 1 %2)\n"
"\n"
"replace restart {\n"
"	ldhl	sp,#%1\n"
"	inc	hl\n"
"} by {\n"
"	; sm83 peephole 10e combined ld and inc.\n"
"	ldhl	sp,#%2\n"
"} if immdInRange(-128 127 '+' %1 1 %2)\n"
"\n"
"replace restart {\n"
"	and	a, #%1\n"
"	swap a\n"
"	and	a, #%2\n"
"} by {\n"
"	; sm83 peephole 11 combined redundant ANDs #%2 and swapped #%1.\n"
"	swap a\n"
"	and	a, #%7\n"
"} if operandsLiteral(%1 %2), immdInRange(0x00 0xff '/' %1 0x10 %3), immdInRange(0x00 0xfff '*' %1 0x10 %4), immdInRange(0x00 0xff '&' %4 0xF0 %5), immdInRange(0x00 0xff '|' %3 %5 %6), immdInRange(0x00 0xff '&' %2 %6 %x7)\n"
"\n"
"replace restart {\n"
"	ldh a, (%1)\n"
"	inc a\n"
"	ldh (%1), a\n"
"} by {\n"
"	; sm83 peephole 12 turned ldh into inc (hl).\n"
"	ld hl, #((%1) | 0xFF00)\n"
"	inc (hl)\n"
"} if notSame(%1 'c'), notUsed('a' 'hl')\n"
"\n"
"replace restart {\n"
"	ldh a, (%1)\n"
"	dec a\n"
"	ldh (%1), a\n"
"} by {\n"
"	; sm83 peephole 13 turned ldh into dec (hl).\n"
"	ld hl, #((%1) | 0xFF00)\n"
"	dec (hl)\n"
"} if notSame(%1 'c'), notUsed('a' 'hl')\n"
"\n"
"replace restart {\n"
"	ldh a, (%1)\n"
"	srl a\n"
"	ldh (%1), a\n"
"} by {\n"
"	; sm83 peephole 14 turned ldh into srl (hl).\n"
"	ld hl, #((%1) | 0xFF00)\n"
"	srl (hl)\n"
"} if notSame(%1 'c'), notUsed('a' 'hl')\n"
"\n"
"replace restart {\n"
"	rra\n"
"	rla\n"
"} by {\n"
"	; sm83 peephole 16 removed redundant rra/rla\n"
"} if notUsed('cf' 'hf' 'nf' 'zf')\n"
"\n"
"replace {\n"
"	xor	a, a\n"
"	push 	af\n"
"	inc	sp\n"
"	xor	a, a\n"
"	push 	af\n"
"	inc	sp\n"
"} by {\n"
"	; sm83 peephole 17a pushed double `xor a` fast\n"
"	xor	a, a\n"
"	rrca\n"
"	push	af\n"
"	xor	a, a\n"
"}\n"
"\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18a pushed #%2 faster\n"
"	sub	a, a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x00C0 0x00C0 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18b pushed #%2 faster\n"
"	xor	a, a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x0080 0x0080 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18c pushed #%2 faster\n"
"	xor	a, a\n"
"	scf\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x0090 0x0090 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18d pushed #%2 faster\n"
"	xor	a, a\n"
"	and	a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x00A0 0x00A0 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18e pushed #%2 faster\n"
"	xor	a, a\n"
"	scf\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x00D0 0x00D0 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18f pushed #%2 faster\n"
"	xor	a, a\n"
"	inc	a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0x0100 0x0100 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18g pushed #%2 faster\n"
"	scf\n"
"	sbc	a, a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0xFF30 0xFF30 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	ld	%1, #%2\n"
"	push	%1\n"
"} by {\n"
"	; sm83 peephole 18h pushed #%2 faster\n"
"	xor	a, a\n"
"	dec	a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0xFF60 0xFF60 '+' %2 0 %x3), notUsed(%1 'af')\n"
"\n"
"replace {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a, #%2\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; sm83 peephole 19 pushed #%2 via flags\n"
"	cp	a\n"
"	push	af\n"
"} if operandsLiteral(%2), immdInRange(0xC0 0xC0 '+' %2 0 %x3), notUsed('f')\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	ld	a, (hl-)\n"
"	or	a, (hl)\n"
"} by {\n"
"	ld	a, (hl+)\n"
"	or	a, (hl)\n"
"	; sm83 peephole 20 reversed ld and or.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"%1:\n"
"	ld	a, (hl+)\n"
"	ld	%3, a\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	ld	%4, a\n"
"	jp	NZ, %2\n"
"	or	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"} by {\n"
"%1:\n"
"	ld	a, (hl+)\n"
"	ld	%3, a\n"
"	ld	a, (%6)\n"
"	inc	%6\n"
"	sub	a, %3\n"
"	jp	NZ, %2\n"
"	cp	a,%3\n"
"	jp	NZ, %1\n"
"%2:\n"
"	; sm83 peephole 21 sped up loop body.\n"
"	ld	%4, a\n"
"} if canSplitReg(%6 %9 %10), operandsNotRelated(%3 %6 'hl'), operandsNotRelated(%3 %6 'hl'), notSame(%3 %4), labelRefCount(%2 1)\n"
"\n"
"replace restart {\n"
"	ld	(hl+), a\n"
"	ld	(hl), %1\n"
"	ld	a, (hl-)\n"
"	or	a, (hl)\n"
"} by {\n"
"	ld	(hl+), a\n"
"	ld	(hl), %1\n"
"	; sm83 peephole 22 remove unnecessary load back\n"
"	or	a, %1\n"
"	dec	hl\n"
"}\n"
"\n"
"replace {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; peephole sp1 removed not needed push\n"
"	pop	%1\n"
"} if notUsed('sp')\n"
"\n"
"replace {\n"
"	pop	%1\n"
"	pop	%2\n"
"	push	%2\n"
"	push	%1\n"
"} by {\n"
"	; peephole sp2 removed not needed push\n"
"	pop	%1\n"
"	pop	%2\n"
"} if notUsed('sp'), notSame(%1 %2)\n"
"\n"
"replace {\n"
"	add	sp, %1\n"
"} by {\n"
"	; peephole sp3 removed not needed add sp\n"
"} if notUsed('sp')\n"
"\n"
"replace {\n"
"	pop	%1\n"
"} by {\n"
"	; peephole sp6 removed not needed pop\n"
"} if notUsed(%1), notUsed('sp')\n"
"\n"
"replace {\n"
"	inc	sp\n"
"	inc	sp\n"
"	inc	sp\n"
"} by {\n"
"	; peephole sp7 increased SP by addition\n"
"	add	sp, #3\n"
"} if notUsed('f')\n"
"\n"
"replace restart {\n"
"	add	sp, #%1\n"
"	inc	sp\n"
"} by {\n"
"	; peephole sp8a increased SP by addition\n"
"	add	sp, #%2\n"
"} if immdInRange(-128 127 '+' %1 1 %2), notUsed('hf' 'cf')\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	add	sp, #%1\n"
"} by {\n"
"	; peephole sp8b increased SP by addition\n"
"	add	sp, #%2\n"
"} if immdInRange(-128 127 '+' %1 1 %2)\n"
"\n"
"replace restart {\n"
"	add	sp, #%1\n"
"	add	sp, #%2\n"
"} by {\n"
"	; peephole sp9 combined SP additions\n"
"	add	sp, #%3\n"
"} if immdInRange(-128 127 '+' %1 %2 %3), notUsed('hf' 'cf')\n"
"\n"
"replace {\n"
"	call	%2\n"
"	add	sp, #%1\n"
"} by {\n"
"	call	%2\n"
"	; peephole sp10a increased SP by %1 through pop\n"
"	pop	%3\n"
"} if immdInRange(2 2 '+' %1 0 %2), unusedReg(%3 'bc' 'de' 'hl'), notUsed('f')\n"
"\n"
"replace {\n"
"	call	%2\n"
"	add	sp, #%1\n"
"} by {\n"
"	call	%2\n"
"	; peephole sp10b increased SP by %1 through pop\n"
"	pop	af\n"
"} if immdInRange(2 2 '+' %1 0 %2), notUsed('af')\n"
"\n"
"replace {\n"
"	call	%2\n"
"	inc	sp\n"
"	inc	sp\n"
"} by {\n"
"	call	%2\n"
"	; peephole sp10c increased SP by 2 through pop\n"
"	pop	%3\n"
"} if unusedReg(%3 'bc' 'de' 'hl')\n"
